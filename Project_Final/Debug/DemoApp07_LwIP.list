
DemoApp07_LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001953c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047e0  0801970c  0801970c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801deec  0801deec  0001f1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801deec  0801deec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801def4  0801def4  0001f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801def4  0801def4  0001eef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801def8  0801def8  0001eef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801defc  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801df88  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801e028  0001f12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f1f0  200001cc  0801e0c8  0001f1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000804  2000f3bc  0801e0c8  0001f3bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001f1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000388d3  00000000  00000000  0001f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c6f  00000000  00000000  00057acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028a8  00000000  00000000  00060740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002027  00000000  00000000  00062fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a058  00000000  00000000  0006500f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042a07  00000000  00000000  0009f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011846c  00000000  00000000  000e1a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f9eda  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b14c  00000000  00000000  001f9f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  0020506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080196f4 	.word	0x080196f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	080196f4 	.word	0x080196f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200001f4 	.word	0x200001f4
 8000600:	20000294 	.word	0x20000294

08000604 <StartHttpServerTask>:
  * @param  None
  * @retval None
  */

void StartHttpServerTask(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    // Wait for the network interface to be up
    while (!netif_is_up(&gnetif))
 800060c:	e002      	b.n	8000614 <StartHttpServerTask+0x10>
    {
        osDelay(100);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f006 f99e 	bl	8006950 <osDelay>
    while (!netif_is_up(&gnetif))
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <StartHttpServerTask+0x2c>)
 8000616:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f5      	beq.n	800060e <StartHttpServerTask+0xa>
    }

    // Start the HTTP server
    httpd_init();
 8000622:	f00c fb71 	bl	800cd08 <httpd_init>

    // Keep the task running
    for (;;)
    {
        osDelay(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062a:	f006 f991 	bl	8006950 <osDelay>
 800062e:	e7fa      	b.n	8000626 <StartHttpServerTask+0x22>
 8000630:	200005e8 	.word	0x200005e8

08000634 <MX_FREERTOS_Init>:
    }
}


void MX_FREERTOS_Init(void) {
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800063a:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <MX_FREERTOS_Init+0x9c>)
 800063c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f006 f92f 	bl	80068b8 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <MX_FREERTOS_Init+0xa0>)
 800065e:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_FREERTOS_Init+0xa4>)
 8000662:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 8000674:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f006 f91c 	bl	80068b8 <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <MX_FREERTOS_Init+0xa8>)
 8000684:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_FREERTOS_Init+0xac>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 f909 	bl	80068b8 <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <MX_FREERTOS_Init+0xb0>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_FREERTOS_Init+0xb4>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 f8f8 	bl	80068b8 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	@ 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bdb0      	pop	{r4, r5, r7, pc}
 80006d0:	08019718 	.word	0x08019718
 80006d4:	200001e8 	.word	0x200001e8
 80006d8:	08019740 	.word	0x08019740
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	08019768 	.word	0x08019768
 80006e4:	200001f0 	.word	0x200001f0
 80006e8:	08019794 	.word	0x08019794

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006f4:	f005 fa6e 	bl	8005bd4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006f8:	2101      	movs	r1, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <StartDefaultTask+0x20>)
 80006fc:	f002 fdc3 	bl	8003286 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f006 f925 	bl	8006950 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000706:	bf00      	nop
 8000708:	e7f6      	b.n	80006f8 <StartDefaultTask+0xc>
 800070a:	bf00      	nop
 800070c:	40020400 	.word	0x40020400

08000710 <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a0      	sub	sp, #128	@ 0x80
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 800071c:	2064      	movs	r0, #100	@ 0x64
 800071e:	f006 f917 	bl	8006950 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2020      	movs	r0, #32
 8000728:	f009 f93e 	bl	80099a8 <netconn_new_with_proto_and_callback>
 800072c:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 800072e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000730:	2b00      	cmp	r3, #0
 8000732:	d106      	bne.n	8000742 <StartUdpEcho+0x32>
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <StartUdpEcho+0xe0>)
 8000736:	22ce      	movs	r2, #206	@ 0xce
 8000738:	492e      	ldr	r1, [pc, #184]	@ (80007f4 <StartUdpEcho+0xe4>)
 800073a:	482f      	ldr	r0, [pc, #188]	@ (80007f8 <StartUdpEcho+0xe8>)
 800073c:	f017 fe94 	bl	8018468 <iprintf>
 8000740:	e053      	b.n	80007ea <StartUdpEcho+0xda>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 8000742:	2208      	movs	r2, #8
 8000744:	492d      	ldr	r1, [pc, #180]	@ (80007fc <StartUdpEcho+0xec>)
 8000746:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000748:	f009 f9e8 	bl	8009b1c <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 800074c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000750:	4619      	mov	r1, r3
 8000752:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000754:	f009 fc4e 	bl	8009ff4 <netconn_recv>
 8000758:	4603      	mov	r3, r0
 800075a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 800075e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f2      	bne.n	800074c <StartUdpEcho+0x3c>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	4825      	ldr	r0, [pc, #148]	@ (8000800 <StartUdpEcho+0xf0>)
 800076c:	f002 fd72 	bl	8003254 <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 8000770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000778:	2300      	movs	r3, #0
 800077a:	2220      	movs	r2, #32
 800077c:	f00e f912 	bl	800e9a4 <pbuf_copy_partial>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	429a      	cmp	r2, r3
 800078c:	d123      	bne.n	80007d6 <StartUdpEcho+0xc6>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 800078e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000790:	3301      	adds	r3, #1
 8000792:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 8000794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	891b      	ldrh	r3, [r3, #8]
 800079a:	3380      	adds	r3, #128	@ 0x80
 800079c:	443b      	add	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 80007a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a8:	f107 000c 	add.w	r0, r7, #12
 80007ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007ae:	4915      	ldr	r1, [pc, #84]	@ (8000804 <StartUdpEcho+0xf4>)
 80007b0:	f017 fe6c 	bl	801848c <siprintf>
 80007b4:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 80007b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80007ba:	b292      	uxth	r2, r2
 80007bc:	f107 010c 	add.w	r1, r7, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00b fa2b 	bl	800bc1c <netbuf_ref>
		err = netconn_send(conn, buf);
 80007c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007c8:	4619      	mov	r1, r3
 80007ca:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80007cc:	f009 fc8c 	bl	800a0e8 <netconn_send>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 80007d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007d8:	4618      	mov	r0, r3
 80007da:	f00b f9ff 	bl	800bbdc <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <StartUdpEcho+0xf0>)
 80007e4:	f002 fd36 	bl	8003254 <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 80007e8:	e7b0      	b.n	800074c <StartUdpEcho+0x3c>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 80007ea:	3780      	adds	r7, #128	@ 0x80
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	080197b0 	.word	0x080197b0
 80007f4:	080197c8 	.word	0x080197c8
 80007f8:	080197e0 	.word	0x080197e0
 80007fc:	0801ddf0 	.word	0x0801ddf0
 8000800:	40020400 	.word	0x40020400
 8000804:	08019808 	.word	0x08019808

08000808 <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f006 f89b 	bl	8006950 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2010      	movs	r0, #16
 8000820:	f009 f8c2 	bl	80099a8 <netconn_new_with_proto_and_callback>
 8000824:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 8000826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000828:	2b00      	cmp	r3, #0
 800082a:	f000 8083 	beq.w	8000934 <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 800082e:	2207      	movs	r2, #7
 8000830:	2100      	movs	r1, #0
 8000832:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000834:	f009 f972 	bl	8009b1c <netconn_bind>
 8000838:	4603      	mov	r3, r0
 800083a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 800083e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000842:	2b00      	cmp	r3, #0
 8000844:	d172      	bne.n	800092c <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 8000846:	21ff      	movs	r1, #255	@ 0xff
 8000848:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800084a:	f009 f99f 	bl	8009b8c <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 800084e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000852:	4619      	mov	r1, r3
 8000854:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000856:	f009 f9c5 	bl	8009be4 <netconn_accept>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 8000860:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f2      	bne.n	800084e <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8000868:	e04d      	b.n	8000906 <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000870:	4832      	ldr	r0, [pc, #200]	@ (800093c <StartTcpEcho+0x134>)
 8000872:	f002 fcef 	bl	8003254 <HAL_GPIO_WritePin>
		    msg_cnt++;
 8000876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000878:	3301      	adds	r3, #1
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 800087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800087e:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000882:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000886:	4618      	mov	r0, r3
 8000888:	f00b fa12 	bl	800bcb0 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000892:	492b      	ldr	r1, [pc, #172]	@ (8000940 <StartTcpEcho+0x138>)
 8000894:	4618      	mov	r0, r3
 8000896:	f017 fdf9 	bl	801848c <siprintf>
 800089a:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 800089c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800089e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008a0:	f107 010c 	add.w	r1, r7, #12
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	f009 fc4b 	bl	800a144 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 80008ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80008b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80008b4:	461a      	mov	r2, r3
 80008b6:	2300      	movs	r3, #0
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	f009 fc42 	bl	800a144 <netconn_write_partly>
			  char postfix[] = "\r\n";
 80008c0:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <StartTcpEcho+0x13c>)
 80008c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4611      	mov	r1, r2
 80008ca:	8019      	strh	r1, [r3, #0]
 80008cc:	3302      	adds	r3, #2
 80008ce:	0c12      	lsrs	r2, r2, #16
 80008d0:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 80008d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80008d4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80008d8:	2300      	movs	r3, #0
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2202      	movs	r2, #2
 80008e0:	f009 fc30 	bl	800a144 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 80008e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00b fa2c 	bl	800bd44 <netbuf_next>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dac4      	bge.n	800087c <StartTcpEcho+0x74>
            netbuf_delete(buf);
 80008f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b f971 	bl	800bbdc <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000900:	480e      	ldr	r0, [pc, #56]	@ (800093c <StartTcpEcho+0x134>)
 8000902:	f002 fca7 	bl	8003254 <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8000906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000908:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f009 fb70 	bl	8009ff4 <netconn_recv>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0a7      	beq.n	800086a <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 800091a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091c:	4618      	mov	r0, r3
 800091e:	f009 fd13 	bl	800a348 <netconn_close>
		  netconn_delete(newconn);
 8000922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000924:	4618      	mov	r0, r3
 8000926:	f009 f8dd 	bl	8009ae4 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 800092a:	e790      	b.n	800084e <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 800092c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800092e:	4618      	mov	r0, r3
 8000930:	f009 f8d8 	bl	8009ae4 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	@ 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020400 	.word	0x40020400
 8000940:	0801981c 	.word	0x0801981c
 8000944:	08019830 	.word	0x08019830

08000948 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b56      	ldr	r3, [pc, #344]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a55      	ldr	r2, [pc, #340]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a49      	ldr	r2, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b44      	ldr	r3, [pc, #272]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a37      	ldr	r2, [pc, #220]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b35      	ldr	r3, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009f4:	4831      	ldr	r0, [pc, #196]	@ (8000abc <MX_GPIO_Init+0x174>)
 80009f6:	f002 fc2d 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a00:	f002 fc28 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482a      	ldr	r0, [pc, #168]	@ (8000ac4 <MX_GPIO_Init+0x17c>)
 8000a1c:	f002 fa6e 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a20:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4820      	ldr	r0, [pc, #128]	@ (8000abc <MX_GPIO_Init+0x174>)
 8000a3a:	f002 fa5f 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a56:	f002 fa51 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a6e:	f002 fa45 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a72:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a84:	230a      	movs	r3, #10
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_GPIO_Init+0x180>)
 8000a90:	f002 fa34 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_GPIO_Init+0x180>)
 8000aaa:	f002 fa27 	bl	8002efc <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <MX_I2C1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <MX_I2C1_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b06:	480e      	ldr	r0, [pc, #56]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b08:	f002 fbd8 	bl	80032bc <HAL_I2C_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 fa43 	bl	8000f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b1a:	f002 ff45 	bl	80039a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 fa3a 	bl	8000f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_I2C1_Init+0x74>)
 8000b2c:	f002 ff87 	bl	8003a3e <HAL_I2CEx_ConfigDigitalFilter>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fa31 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000494 	.word	0x20000494
 8000b44:	40005400 	.word	0x40005400
 8000b48:	20404768 	.word	0x20404768

08000b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0aa      	sub	sp, #168	@ 0xa8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2284      	movs	r2, #132	@ 0x84
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f017 fd1a 	bl	80185a6 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d13c      	bne.n	8000bf6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fd00 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b96:	f000 fa01 	bl	8000f9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bba:	2312      	movs	r3, #18
 8000bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <HAL_I2C_MspInit+0xbc>)
 8000bda:	f002 f98f 	bl	8002efc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000be4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	37a8      	adds	r7, #168	@ 0xa8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000c22:	2308      	movs	r3, #8
 8000c24:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000c26:	2028      	movs	r0, #40	@ 0x28
 8000c28:	f000 fdb4 	bl	8001794 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	7bfa      	ldrb	r2, [r7, #15]
 8000c32:	2130      	movs	r1, #48	@ 0x30
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f829 	bl	8000c8c <lcd_write>
	HAL_Delay(5);
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f000 fdaa 	bl	8001794 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	7bfa      	ldrb	r2, [r7, #15]
 8000c46:	2130      	movs	r1, #48	@ 0x30
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f81f 	bl	8000c8c <lcd_write>
	HAL_Delay(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 fda0 	bl	8001794 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	2130      	movs	r1, #48	@ 0x30
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f815 	bl	8000c8c <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f80e 	bl	8000c8c <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	210c      	movs	r1, #12
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f807 	bl	8000c8c <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f89f 	bl	8000dc2 <lcd_clear>

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	f023 030f 	bic.w	r3, r3, #15
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	797b      	ldrb	r3, [r7, #5]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000cb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cb8:	f023 030f 	bic.w	r3, r3, #15
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	797b      	ldrb	r3, [r7, #5]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	f107 020c 	add.w	r2, r7, #12
 8000cf8:	2364      	movs	r3, #100	@ 0x64
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <lcd_write+0x88>)
 8000d00:	f002 fb6c 	bl	80033dc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f000 fd45 	bl	8001794 <HAL_Delay>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000494 	.word	0x20000494

08000d18 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000d32:	2308      	movs	r3, #8
 8000d34:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f843 	bl	8000dc2 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	2180      	movs	r1, #128	@ 0x80
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffa1 	bl	8000c8c <lcd_write>
	while(lcd->f_line[i])
 8000d4a:	e00f      	b.n	8000d6c <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7818      	ldrb	r0, [r3, #0]
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	7859      	ldrb	r1, [r3, #1]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	f7ff ff93 	bl	8000c8c <lcd_write>
		i++;
 8000d66:	7bbb      	ldrb	r3, [r7, #14]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	785b      	ldrb	r3, [r3, #1]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1e9      	bne.n	8000d4c <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	21c0      	movs	r1, #192	@ 0xc0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff81 	bl	8000c8c <lcd_write>
	while(lcd->s_line[i])
 8000d8a:	e00f      	b.n	8000dac <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7818      	ldrb	r0, [r3, #0]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	7c99      	ldrb	r1, [r3, #18]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	f7ff ff73 	bl	8000c8c <lcd_write>
		i++;
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	3301      	adds	r3, #1
 8000daa:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	7c9b      	ldrb	r3, [r3, #18]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e9      	bne.n	8000d8c <lcd_display+0x74>
	}
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	2101      	movs	r1, #1
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff51 	bl	8000c8c <lcd_write>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f000 fc9e 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f84e 	bl	8000e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f7ff fda2 	bl	8000948 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e04:	f000 fa7e 	bl	8001304 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000e08:	f7ff fe60 	bl	8000acc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <main+0x8c>)
 8000e0e:	224e      	movs	r2, #78	@ 0x4e
 8000e10:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <main+0x8c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  lcd_init(&disp);
 8000e1a:	4819      	ldr	r0, [pc, #100]	@ (8000e80 <main+0x8c>)
 8000e1c:	f7ff fef6 	bl	8000c0c <lcd_init>
  sprintf((char *)disp.f_line, "To 1. linia");
 8000e20:	4918      	ldr	r1, [pc, #96]	@ (8000e84 <main+0x90>)
 8000e22:	4819      	ldr	r0, [pc, #100]	@ (8000e88 <main+0x94>)
 8000e24:	f017 fb32 	bl	801848c <siprintf>
  sprintf((char *)disp.s_line, "a to druga linia");
 8000e28:	4918      	ldr	r1, [pc, #96]	@ (8000e8c <main+0x98>)
 8000e2a:	4819      	ldr	r0, [pc, #100]	@ (8000e90 <main+0x9c>)
 8000e2c:	f017 fb2e 	bl	801848c <siprintf>
  lcd_display(&disp);
 8000e30:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <main+0x8c>)
 8000e32:	f7ff ff71 	bl	8000d18 <lcd_display>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e36:	f7ff fbfd 	bl	8000634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e3a:	f005 fd26 	bl	800688a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	sprintf((char *)disp.f_line, "     ******");
 8000e3e:	4915      	ldr	r1, [pc, #84]	@ (8000e94 <main+0xa0>)
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <main+0x94>)
 8000e42:	f017 fb23 	bl	801848c <siprintf>
	sprintf((char *)disp.s_line, "");
 8000e46:	4914      	ldr	r1, [pc, #80]	@ (8000e98 <main+0xa4>)
 8000e48:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <main+0x9c>)
 8000e4a:	f017 fb1f 	bl	801848c <siprintf>
	HAL_Delay(500);
 8000e4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e52:	f000 fc9f 	bl	8001794 <HAL_Delay>
	lcd_display(&disp);
 8000e56:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <main+0x8c>)
 8000e58:	f7ff ff5e 	bl	8000d18 <lcd_display>

	sprintf((char *)disp.f_line, "");
 8000e5c:	490e      	ldr	r1, [pc, #56]	@ (8000e98 <main+0xa4>)
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <main+0x94>)
 8000e60:	f017 fb14 	bl	801848c <siprintf>
	sprintf((char *)disp.s_line, "     ******");
 8000e64:	490b      	ldr	r1, [pc, #44]	@ (8000e94 <main+0xa0>)
 8000e66:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <main+0x9c>)
 8000e68:	f017 fb10 	bl	801848c <siprintf>
	HAL_Delay(500);
 8000e6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e70:	f000 fc90 	bl	8001794 <HAL_Delay>
	lcd_display(&disp);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <main+0x8c>)
 8000e76:	f7ff ff4f 	bl	8000d18 <lcd_display>
	sprintf((char *)disp.f_line, "     ******");
 8000e7a:	bf00      	nop
 8000e7c:	e7df      	b.n	8000e3e <main+0x4a>
 8000e7e:	bf00      	nop
 8000e80:	200004e8 	.word	0x200004e8
 8000e84:	08019834 	.word	0x08019834
 8000e88:	200004e9 	.word	0x200004e9
 8000e8c:	08019840 	.word	0x08019840
 8000e90:	200004fa 	.word	0x200004fa
 8000e94:	08019854 	.word	0x08019854
 8000e98:	08019860 	.word	0x08019860

08000e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b094      	sub	sp, #80	@ 0x50
 8000ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	2230      	movs	r2, #48	@ 0x30
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f017 fb7b 	bl	80185a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ec0:	f002 fe0a 	bl	8003ad8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <SystemClock_Config+0xd4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a29      	ldr	r2, [pc, #164]	@ (8000f70 <SystemClock_Config+0xd4>)
 8000eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <SystemClock_Config+0xd4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <SystemClock_Config+0xd8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <SystemClock_Config+0xd8>)
 8000ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <SystemClock_Config+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f0c:	23d8      	movs	r3, #216	@ 0xd8
 8000f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f14:	2303      	movs	r3, #3
 8000f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fe3b 	bl	8003b98 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f28:	f000 f838 	bl	8000f9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f2c:	f002 fde4 	bl	8003af8 <HAL_PWREx_EnableOverDrive>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f36:	f000 f831 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2107      	movs	r1, #7
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 f8c1 	bl	80040e0 <HAL_RCC_ClockConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f64:	f000 f81a 	bl	8000f9c <Error_Handler>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3750      	adds	r7, #80	@ 0x50
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f8a:	f000 fbe3 	bl	8001754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40001000 	.word	0x40001000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	f06f 0001 	mvn.w	r0, #1
 8000fe6:	f000 fcb1 	bl	800194c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	@ 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001008:	4b33      	ldr	r3, [pc, #204]	@ (80010d8 <HAL_InitTick+0xe0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a32      	ldr	r2, [pc, #200]	@ (80010d8 <HAL_InitTick+0xe0>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <HAL_InitTick+0xe0>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 0310 	and.w	r3, r3, #16
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fa7e 	bl	800452c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001036:	2b00      	cmp	r3, #0
 8001038:	d103      	bne.n	8001042 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f003 fa4f 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 800103e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001042:	f003 fa4b 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800104c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104e:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <HAL_InitTick+0xe4>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	0c9b      	lsrs	r3, r3, #18
 8001056:	3b01      	subs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <HAL_InitTick+0xe8>)
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <HAL_InitTick+0xec>)
 800105e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_InitTick+0xe8>)
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001068:	4a1d      	ldr	r2, [pc, #116]	@ (80010e0 <HAL_InitTick+0xe8>)
 800106a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800106c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <HAL_InitTick+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <HAL_InitTick+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <HAL_InitTick+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001080:	4817      	ldr	r0, [pc, #92]	@ (80010e0 <HAL_InitTick+0xe8>)
 8001082:	f003 fe75 	bl	8004d70 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800108c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001090:	2b00      	cmp	r3, #0
 8001092:	d11b      	bne.n	80010cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <HAL_InitTick+0xe8>)
 8001096:	f003 fecd 	bl	8004e34 <HAL_TIM_Base_Start_IT>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d111      	bne.n	80010cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a8:	2036      	movs	r0, #54	@ 0x36
 80010aa:	f000 fc6b 	bl	8001984 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d808      	bhi.n	80010c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2036      	movs	r0, #54	@ 0x36
 80010ba:	f000 fc47 	bl	800194c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <HAL_InitTick+0xf0>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e002      	b.n	80010cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3738      	adds	r7, #56	@ 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	2000050c 	.word	0x2000050c
 80010e4:	40001000 	.word	0x40001000
 80010e8:	20000004 	.word	0x20000004

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <TIM6_DAC_IRQHandler+0x10>)
 800112a:	f003 fefb 	bl	8004f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000050c 	.word	0x2000050c

08001138 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <ETH_IRQHandler+0x10>)
 800113e:	f001 f809 	bl	8002154 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20004fc8 	.word	0x20004fc8

0800114c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_kill>:

int _kill(int pid, int sig)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <_kill+0x20>)
 8001168:	2216      	movs	r2, #22
 800116a:	601a      	str	r2, [r3, #0]
	return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	2000f3ac 	.word	0x2000f3ac

08001180 <_exit>:

void _exit (int status)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffe5 	bl	800115c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001192:	bf00      	nop
 8001194:	e7fd      	b.n	8001192 <_exit+0x12>

08001196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e00a      	b.n	80011be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011a8:	f3af 8000 	nop.w
 80011ac:	4601      	mov	r1, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	60ba      	str	r2, [r7, #8]
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbf0      	blt.n	80011a8 <_read+0x12>
	}

return len;
 80011c6:	687b      	ldr	r3, [r7, #4]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e009      	b.n	80011f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	60ba      	str	r2, [r7, #8]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbf1      	blt.n	80011e2 <_write+0x12>
	}
	return len;
 80011fe:	687b      	ldr	r3, [r7, #4]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_close>:

int _close(int file)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001230:	605a      	str	r2, [r3, #4]
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <_isatty>:

int _isatty(int file)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
	return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d205      	bcs.n	80012ac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <_sbrk+0x6c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	20050000 	.word	0x20050000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	20000558 	.word	0x20000558
 80012d8:	2000f3c0 	.word	0x2000f3c0
 80012dc:	2000f3ac 	.word	0x2000f3ac

080012e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001308:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_USART3_UART_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <MX_USART3_UART_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_USART3_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_USART3_UART_Init+0x58>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_USART3_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_USART3_UART_Init+0x58>)
 8001348:	f003 fff2 	bl	8005330 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f7ff fe23 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000055c 	.word	0x2000055c
 8001360:	40004800 	.word	0x40004800

08001364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b0aa      	sub	sp, #168	@ 0xa8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2284      	movs	r2, #132	@ 0x84
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f017 f90e 	bl	80185a6 <memset>
  if(uartHandle->Instance==USART3)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_UART_MspInit+0xb4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d13c      	bne.n	800140e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001398:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800139a:	2300      	movs	r3, #0
 800139c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 f8f4 	bl	8004590 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ae:	f7ff fdf5 	bl	8000f9c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a19      	ldr	r2, [pc, #100]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a13      	ldr	r2, [pc, #76]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <HAL_UART_MspInit+0xb8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013fc:	2307      	movs	r3, #7
 80013fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	@ (8001420 <HAL_UART_MspInit+0xbc>)
 800140a:	f001 fd77 	bl	8002efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800140e:	bf00      	nop
 8001410:	37a8      	adds	r7, #168	@ 0xa8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004800 	.word	0x40004800
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800145c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480d      	ldr	r0, [pc, #52]	@ (8001460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142a:	490e      	ldr	r1, [pc, #56]	@ (8001464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800142c:	4a0e      	ldr	r2, [pc, #56]	@ (8001468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001440:	4c0b      	ldr	r4, [pc, #44]	@ (8001470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144e:	f7ff ff47 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f017 f96b 	bl	801872c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff fccd 	bl	8000df4 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001468:	0801defc 	.word	0x0801defc
  ldr r2, =_sbss
 800146c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001470:	2000f3bc 	.word	0x2000f3bc

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>

08001476 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <LAN8742_RegisterBusIO+0x28>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <LAN8742_RegisterBusIO+0x28>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <LAN8742_RegisterBusIO+0x28>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e014      	b.n	80014ce <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d17c      	bne.n	80015f4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d002      	beq.n	8001508 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e01c      	b.n	800154e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f107 0208 	add.w	r2, r7, #8
 800151c:	2112      	movs	r1, #18
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	4798      	blx	r3
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	da03      	bge.n	8001530 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001528:	f06f 0304 	mvn.w	r3, #4
 800152c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800152e:	e00b      	b.n	8001548 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	d105      	bne.n	8001548 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
         break;
 8001546:	e005      	b.n	8001554 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b1f      	cmp	r3, #31
 8001552:	d9df      	bls.n	8001514 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b1f      	cmp	r3, #31
 800155a:	d902      	bls.n	8001562 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800155c:	f06f 0302 	mvn.w	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d145      	bne.n	80015f4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6810      	ldr	r0, [r2, #0]
 8001570:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001574:	2100      	movs	r1, #0
 8001576:	4798      	blx	r3
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	db37      	blt.n	80015ee <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6810      	ldr	r0, [r2, #0]
 8001586:	f107 0208 	add.w	r2, r7, #8
 800158a:	2100      	movs	r1, #0
 800158c:	4798      	blx	r3
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	db28      	blt.n	80015e6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4798      	blx	r3
 800159a:	4603      	mov	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800159e:	e01c      	b.n	80015da <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4798      	blx	r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015b2:	d80e      	bhi.n	80015d2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6810      	ldr	r0, [r2, #0]
 80015bc:	f107 0208 	add.w	r2, r7, #8
 80015c0:	2100      	movs	r1, #0
 80015c2:	4798      	blx	r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da07      	bge.n	80015da <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80015ca:	f06f 0304 	mvn.w	r3, #4
 80015ce:	613b      	str	r3, [r7, #16]
                 break;
 80015d0:	e010      	b.n	80015f4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
               break;
 80015d8:	e00c      	b.n	80015f4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1dd      	bne.n	80015a0 <LAN8742_Init+0xc6>
 80015e4:	e006      	b.n	80015f4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80015e6:	f06f 0304 	mvn.w	r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	e002      	b.n	80015f4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80015ee:	f06f 0303 	mvn.w	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d112      	bne.n	8001620 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4798      	blx	r3
 8001600:	4603      	mov	r3, r0
 8001602:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001604:	bf00      	nop
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4798      	blx	r3
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001618:	d9f5      	bls.n	8001606 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001620:	693b      	ldr	r3, [r7, #16]
 }
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6810      	ldr	r0, [r2, #0]
 800163e:	f107 020c 	add.w	r2, r7, #12
 8001642:	2101      	movs	r1, #1
 8001644:	4798      	blx	r3
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	da02      	bge.n	8001652 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800164c:	f06f 0304 	mvn.w	r3, #4
 8001650:	e06e      	b.n	8001730 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6810      	ldr	r0, [r2, #0]
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	2101      	movs	r1, #1
 8001660:	4798      	blx	r3
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	da02      	bge.n	800166e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001668:	f06f 0304 	mvn.w	r3, #4
 800166c:	e060      	b.n	8001730 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001678:	2301      	movs	r3, #1
 800167a:	e059      	b.n	8001730 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6810      	ldr	r0, [r2, #0]
 8001684:	f107 020c 	add.w	r2, r7, #12
 8001688:	2100      	movs	r1, #0
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	da02      	bge.n	8001698 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001692:	f06f 0304 	mvn.w	r3, #4
 8001696:	e04b      	b.n	8001730 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11b      	bne.n	80016da <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <LAN8742_GetLinkState+0x90>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80016b6:	2302      	movs	r3, #2
 80016b8:	e03a      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e033      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80016d2:	2304      	movs	r3, #4
 80016d4:	e02c      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80016d6:	2305      	movs	r3, #5
 80016d8:	e02a      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6810      	ldr	r0, [r2, #0]
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	211f      	movs	r1, #31
 80016e8:	4798      	blx	r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da02      	bge.n	80016f6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80016f0:	f06f 0304 	mvn.w	r3, #4
 80016f4:	e01c      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001700:	2306      	movs	r3, #6
 8001702:	e015      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 031c 	and.w	r3, r3, #28
 800170a:	2b18      	cmp	r3, #24
 800170c:	d101      	bne.n	8001712 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800170e:	2302      	movs	r3, #2
 8001710:	e00e      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f003 031c 	and.w	r3, r3, #28
 8001718:	2b08      	cmp	r3, #8
 800171a:	d101      	bne.n	8001720 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800171c:	2303      	movs	r3, #3
 800171e:	e007      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 031c 	and.w	r3, r3, #28
 8001726:	2b14      	cmp	r3, #20
 8001728:	d101      	bne.n	800172e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800172a:	2304      	movs	r3, #4
 800172c:	e000      	b.n	8001730 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800172e:	2305      	movs	r3, #5
    }				
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 f8fa 	bl	8001936 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	200f      	movs	r0, #15
 8001744:	f7ff fc58 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fc2e 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	200005e4 	.word	0x200005e4

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200005e4 	.word	0x200005e4

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <__NVIC_SetPriorityGrouping+0x40>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	@ (800181c <__NVIC_SetPriorityGrouping+0x40>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	05fa0000 	.word	0x05fa0000

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff4c 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195e:	f7ff ff61 	bl	8001824 <__NVIC_GetPriorityGrouping>
 8001962:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	6978      	ldr	r0, [r7, #20]
 800196a:	f7ff ffb1 	bl	80018d0 <NVIC_EncodePriority>
 800196e:	4602      	mov	r2, r0
 8001970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001974:	4611      	mov	r1, r2
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff80 	bl	800187c <__NVIC_SetPriority>
}
 800197c:	bf00      	nop
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff54 	bl	8001840 <__NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06a      	b.n	8001a88 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d106      	bne.n	80019ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2223      	movs	r2, #35	@ 0x23
 80019c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f004 fd1d 	bl	8006404 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_ETH_Init+0xf0>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <HAL_ETH_Init+0xf0>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a90 <HAL_ETH_Init+0xf0>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_ETH_Init+0xf4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a94 <HAL_ETH_Init+0xf4>)
 80019e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80019ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019ee:	4b29      	ldr	r3, [pc, #164]	@ (8001a94 <HAL_ETH_Init+0xf4>)
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4927      	ldr	r1, [pc, #156]	@ (8001a94 <HAL_ETH_Init+0xf4>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <HAL_ETH_Init+0xf4>)
 80019fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff feb0 	bl	800177c <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a1e:	e011      	b.n	8001a44 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a20:	f7ff feac 	bl	800177c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a2e:	d909      	bls.n	8001a44 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	22e0      	movs	r2, #224	@ 0xe0
 8001a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e021      	b.n	8001a88 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1e4      	bne.n	8001a20 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 ffac 	bl	80029b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f001 f853 	bl	8002b08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f8a9 	bl	8002bba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f001 f811 	bl	8002a98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2210      	movs	r2, #16
 8001a82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40013800 	.word	0x40013800

08001a98 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d150      	bne.n	8001b4c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2223      	movs	r2, #35	@ 0x23
 8001aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa7b 	bl	8001fb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0208 	orr.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fe5c 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0204 	orr.w	r2, r2, #4
 8001af2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fe49 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fdf3 	bl	80026f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b26:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b3e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2223      	movs	r2, #35	@ 0x23
 8001b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
  }
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d17b      	bne.n	8001c62 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2223      	movs	r2, #35	@ 0x23
 8001b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001b86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <HAL_ETH_Start_IT+0x114>)
 8001b96:	430b      	orrs	r3, r1
 8001b98:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001bac:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f9fc 	bl	8001fb4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0208 	orr.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff fddd 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0204 	orr.w	r2, r2, #4
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff fdca 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fd74 	bl	80026f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c3c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c46:	69d9      	ldr	r1, [r3, #28]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_ETH_Start_IT+0x118>)
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c54:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2223      	movs	r2, #35	@ 0x23
 8001c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	00020060 	.word	0x00020060
 8001c70:	0001a0c1 	.word	0x0001a0c1

08001c74 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c82:	2b23      	cmp	r3, #35	@ 0x23
 8001c84:	d16e      	bne.n	8001d64 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2223      	movs	r2, #35	@ 0x23
 8001c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	69d9      	ldr	r1, [r3, #28]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_ETH_Stop_IT+0xfc>)
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001cb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cbc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f023 0302 	bic.w	r3, r3, #2
 8001cd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cd4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0204 	bic.w	r2, r2, #4
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff fd50 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fcfa 	bl	80026f6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0208 	bic.w	r2, r2, #8
 8001d10:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fd3a 	bl	8001794 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e00e      	b.n	8001d4c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	3212      	adds	r2, #18
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9ed      	bls.n	8001d2e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	fffe5f3e 	.word	0xfffe5f3e

08001d74 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e045      	b.n	8001e24 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d9e:	2b23      	cmp	r3, #35	@ 0x23
 8001da0:	d13f      	bne.n	8001e22 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001daa:	2201      	movs	r2, #1
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 ff70 	bl	8002c94 <ETH_Prepare_Tx_Descriptors>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc0:	f043 0202 	orr.w	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e02a      	b.n	8001e24 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d904      	bls.n	8001df0 <HAL_ETH_Transmit_IT+0x7c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	1f1a      	subs	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0a8      	b.n	8001faa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e5e:	2b23      	cmp	r3, #35	@ 0x23
 8001e60:	d001      	beq.n	8001e66 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0a1      	b.n	8001faa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	3212      	adds	r2, #18
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e7c:	f1c3 0304 	rsb	r3, r3, #4
 8001e80:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e82:	e06a      	b.n	8001f5a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <HAL_ETH_ReadData+0x88>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d040      	beq.n	8001f36 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00c      	beq.n	8001ef8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ee8:	3b04      	subs	r3, #4
 8001eea:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f10:	461a      	mov	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f004 fc41 	bl	800679c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d902      	bls.n	8001f48 <HAL_ETH_ReadData+0x11c>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b04      	subs	r3, #4
 8001f46:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	3212      	adds	r2, #18
 8001f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db06      	blt.n	8001f70 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d202      	bcs.n	8001f70 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d089      	beq.n	8001e84 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	441a      	add	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f815 	bl	8001fb4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3720      	adds	r7, #32
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fc8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	3212      	adds	r2, #18
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fda:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001fdc:	e040      	b.n	8002060 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d112      	bne.n	800200c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fba6 	bl	800673c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	74fb      	strb	r3, [r7, #19]
 8001ffa:	e007      	b.n	800200c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	461a      	mov	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d026      	beq.n	8002060 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <ETH_UpdateDescriptor+0xe4>)
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	e003      	b.n	800202a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8002028:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800202a:	f3bf 8f5f 	dmb	sy
}
 800202e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d902      	bls.n	800204e <ETH_UpdateDescriptor+0x9a>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	3b04      	subs	r3, #4
 800204c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	3212      	adds	r2, #18
 8002054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002058:	617b      	str	r3, [r7, #20]
      desccount--;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3b01      	subs	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <ETH_UpdateDescriptor+0xb8>
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1b8      	bne.n	8001fde <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	429a      	cmp	r2, r3
 8002074:	d00c      	beq.n	8002090 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207e:	461a      	mov	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	800045f8 	.word	0x800045f8

0800209c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3318      	adds	r3, #24
 80020a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020ba:	e03f      	b.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80020bc:	2301      	movs	r3, #1
 80020be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3304      	adds	r3, #4
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d028      	beq.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db1b      	blt.n	8002138 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3304      	adds	r3, #4
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fb87 	bl	8006820 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3304      	adds	r3, #4
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3301      	adds	r3, #1
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002136:	e001      	b.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_ETH_ReleaseTxPacket+0xac>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1b9      	bne.n	80020bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b40      	cmp	r3, #64	@ 0x40
 800216c:	d112      	bne.n	8002194 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b40      	cmp	r3, #64	@ 0x40
 800217e:	d109      	bne.n	8002194 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002188:	461a      	mov	r2, r3
 800218a:	4b50      	ldr	r3, [pc, #320]	@ (80022cc <HAL_ETH_IRQHandler+0x178>)
 800218c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f003 fe9c 	bl	8005ecc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d113      	bne.n	80021ce <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10a      	bne.n	80021ce <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c0:	461a      	mov	r2, r3
 80021c2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80021c6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f003 fe8f 	bl	8005eec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e0:	d14c      	bne.n	800227c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021f4:	d142      	bne.n	800227c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f043 0208 	orr.w	r2, r3, #8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002218:	d11a      	bne.n	8002250 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_ETH_IRQHandler+0x17c>)
 8002226:	4013      	ands	r3, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	22e0      	movs	r2, #224	@ 0xe0
 800224a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800224e:	e012      	b.n	8002276 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800225e:	4013      	ands	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	461a      	mov	r2, r3
 8002270:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002274:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f003 fe48 	bl	8005f0c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d10e      	bne.n	80022a8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f81c 	bl	80022d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_ETH_IRQHandler+0x180>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <HAL_ETH_IRQHandler+0x180>)
 80022b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022ba:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f815 	bl	80022ec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00010040 	.word	0x00010040
 80022d0:	007e2000 	.word	0x007e2000
 80022d4:	40013c00 	.word	0x40013c00

080022d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	02db      	lsls	r3, r3, #11
 8002322:	b29b      	uxth	r3, r3
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0302 	bic.w	r3, r3, #2
 800233e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002350:	f7ff fa14 	bl	800177c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002356:	e00d      	b.n	8002374 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002358:	f7ff fa10 	bl	800177c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002366:	d301      	bcc.n	800236c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e010      	b.n	800238e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ec      	bne.n	8002358 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	02db      	lsls	r3, r3, #11
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f0:	f7ff f9c4 	bl	800177c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023f6:	e00d      	b.n	8002414 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023f8:	f7ff f9c0 	bl	800177c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002406:	d301      	bcc.n	800240c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e009      	b.n	8002420 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ec      	bne.n	80023f8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d9      	b.n	80025f0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00b      	b.n	8002628 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002616:	2b10      	cmp	r3, #16
 8002618:	d105      	bne.n	8002626 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f88f 	bl	8002740 <ETH_SetMACConfig>

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 031c 	bic.w	r3, r3, #28
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002648:	f001 ff3c 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800264c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4a1d      	ldr	r2, [pc, #116]	@ (80026c8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d908      	bls.n	8002668 <HAL_ETH_SetMDIOClockRange+0x38>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d804      	bhi.n	8002668 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e027      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d908      	bls.n	8002682 <HAL_ETH_SetMDIOClockRange+0x52>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d204      	bcs.n	8002682 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f043 030c 	orr.w	r3, r3, #12
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e01a      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d303      	bcc.n	8002692 <HAL_ETH_SetMDIOClockRange+0x62>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4a11      	ldr	r2, [pc, #68]	@ (80026d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d911      	bls.n	80026b6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d908      	bls.n	80026ac <HAL_ETH_SetMDIOClockRange+0x7c>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d804      	bhi.n	80026ac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e005      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e000      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026b6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	01312cff 	.word	0x01312cff
 80026cc:	02160ebf 	.word	0x02160ebf
 80026d0:	03938700 	.word	0x03938700
 80026d4:	05f5e0ff 	.word	0x05f5e0ff
 80026d8:	08f0d17f 	.word	0x08f0d17f

080026dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002718:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff f834 	bl	8001794 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002736:	6193      	str	r3, [r2, #24]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4b51      	ldr	r3, [pc, #324]	@ (800289c <ETH_SetMACConfig+0x15c>)
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7c1b      	ldrb	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <ETH_SetMACConfig+0x28>
 8002762:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002766:	e000      	b.n	800276a <ETH_SetMACConfig+0x2a>
 8002768:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7c5b      	ldrb	r3, [r3, #17]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <ETH_SetMACConfig+0x38>
 8002772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002776:	e000      	b.n	800277a <ETH_SetMACConfig+0x3a>
 8002778:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800277a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002780:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7fdb      	ldrb	r3, [r3, #31]
 8002786:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002788:	431a      	orrs	r2, r3
                        macconf->Speed |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800278e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	7f92      	ldrb	r2, [r2, #30]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d102      	bne.n	800279e <ETH_SetMACConfig+0x5e>
 8002798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800279c:	e000      	b.n	80027a0 <ETH_SetMACConfig+0x60>
 800279e:	2200      	movs	r2, #0
                        macconf->Speed |
 80027a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
 80027a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetMACConfig+0x88>
 80027c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c6:	e000      	b.n	80027ca <ETH_SetMACConfig+0x8a>
 80027c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	7bdb      	ldrb	r3, [r3, #15]
 80027d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe ffca 	bl	8001794 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002826:	2a00      	cmp	r2, #0
 8002828:	d101      	bne.n	800282e <ETH_SetMACConfig+0xee>
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	e000      	b.n	8002830 <ETH_SetMACConfig+0xf0>
 800282e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002830:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800283e:	2a01      	cmp	r2, #1
 8002840:	d101      	bne.n	8002846 <ETH_SetMACConfig+0x106>
 8002842:	2208      	movs	r2, #8
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x108>
 8002846:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002848:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002850:	2a01      	cmp	r2, #1
 8002852:	d101      	bne.n	8002858 <ETH_SetMACConfig+0x118>
 8002854:	2204      	movs	r2, #4
 8002856:	e000      	b.n	800285a <ETH_SetMACConfig+0x11a>
 8002858:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800285a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002862:	2a01      	cmp	r2, #1
 8002864:	d101      	bne.n	800286a <ETH_SetMACConfig+0x12a>
 8002866:	2202      	movs	r2, #2
 8002868:	e000      	b.n	800286c <ETH_SetMACConfig+0x12c>
 800286a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800286c:	4313      	orrs	r3, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002884:	2001      	movs	r0, #1
 8002886:	f7fe ff85 	bl	8001794 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	ff20810f 	.word	0xff20810f

080028a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <ETH_SetDMAConfig+0x110>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetDMAConfig+0x2c>
 80028c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028ca:	e000      	b.n	80028ce <ETH_SetDMAConfig+0x2e>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7b5b      	ldrb	r3, [r3, #13]
 80028d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	7f52      	ldrb	r2, [r2, #29]
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d102      	bne.n	80028e4 <ETH_SetDMAConfig+0x44>
 80028de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028e2:	e000      	b.n	80028e6 <ETH_SetDMAConfig+0x46>
 80028e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7b9b      	ldrb	r3, [r3, #14]
 80028ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7f1b      	ldrb	r3, [r3, #28]
 80028fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7f9b      	ldrb	r3, [r3, #30]
 8002902:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002904:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800290a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002912:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002914:	4313      	orrs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002936:	2001      	movs	r0, #1
 8002938:	f7fe ff2c 	bl	8001794 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	791b      	ldrb	r3, [r3, #4]
 800294e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002954:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800295a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002960:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002968:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800296a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002972:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002978:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002986:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002994:	2001      	movs	r0, #1
 8002996:	f7fe fefd 	bl	8001794 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	f8de3f23 	.word	0xf8de3f23

080029b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a6      	sub	sp, #152	@ 0x98
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029f0:	2300      	movs	r3, #0
 80029f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fe86 	bl	8002740 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff08 	bl	80028a0 <ETH_SetDMAConfig>
}
 8002a90:	bf00      	nop
 8002a92:	3798      	adds	r7, #152	@ 0x98
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3305      	adds	r3, #5
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	3204      	adds	r2, #4
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <ETH_MACAddressConfig+0x68>)
 8002aba:	4413      	add	r3, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	061a      	lsls	r2, r3, #24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3302      	adds	r3, #2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4313      	orrs	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <ETH_MACAddressConfig+0x6c>)
 8002aea:	4413      	add	r3, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6013      	str	r3, [r2, #0]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40028040 	.word	0x40028040
 8002b04:	40028044 	.word	0x40028044

08002b08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e03e      	b.n	8002b94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	3206      	adds	r2, #6
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d80c      	bhi.n	8002b78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	e004      	b.n	8002b82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d9bd      	bls.n	8002b16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e046      	b.n	8002c56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8002c0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	3212      	adds	r2, #18
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d80c      	bhi.n	8002c46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e004      	b.n	8002c50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d9b5      	bls.n	8002bc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c86:	60da      	str	r2, [r3, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b08d      	sub	sp, #52	@ 0x34
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd6:	d007      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e0ff      	b.n	8002eec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	3301      	adds	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	6852      	ldr	r2, [r2, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d6e:	f3bf 8f5f 	dmb	sy
}
 8002d72:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d80:	e082      	b.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d006      	beq.n	8002da2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e005      	b.n	8002dae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db0:	3301      	adds	r3, #1
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d902      	bls.n	8002dc0 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbc:	3b04      	subs	r3, #4
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de2:	d007      	beq.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de8:	3304      	adds	r3, #4
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d029      	beq.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e06:	e019      	b.n	8002e3c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e08:	f3bf 8f5f 	dmb	sy
}
 8002e0c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d902      	bls.n	8002e2c <ETH_Prepare_Tx_Descriptors+0x198>
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	3b04      	subs	r3, #4
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	3301      	adds	r3, #1
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3e1      	bcc.n	8002e08 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e44:	2302      	movs	r3, #2
 8002e46:	e051      	b.n	8002eec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	6852      	ldr	r2, [r2, #4]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e76:	f3bf 8f5f 	dmb	sy
}
 8002e7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f af78 	bne.w	8002d82 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ed2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed4:	b672      	cpsid	i
}
 8002ed6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee6:	b662      	cpsie	i
}
 8002ee8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3734      	adds	r7, #52	@ 0x34
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	ffffe000 	.word	0xffffe000

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e175      	b.n	8003208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8164 	bne.w	8003202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x56>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80be 	beq.w	8003202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_GPIO_Init+0x324>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b63      	ldr	r3, [pc, #396]	@ (8003220 <HAL_GPIO_Init+0x324>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800309e:	4a61      	ldr	r2, [pc, #388]	@ (8003224 <HAL_GPIO_Init+0x328>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	@ (8003228 <HAL_GPIO_Init+0x32c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d037      	beq.n	800313a <HAL_GPIO_Init+0x23e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a57      	ldr	r2, [pc, #348]	@ (800322c <HAL_GPIO_Init+0x330>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x23a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a56      	ldr	r2, [pc, #344]	@ (8003230 <HAL_GPIO_Init+0x334>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x236>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x232>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a54      	ldr	r2, [pc, #336]	@ (8003238 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x22e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a53      	ldr	r2, [pc, #332]	@ (800323c <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x22a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	@ (8003244 <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	@ (8003248 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	@ (800324c <HAL_GPIO_Init+0x350>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x21a>
 8003112:	2309      	movs	r3, #9
 8003114:	e012      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003116:	230a      	movs	r3, #10
 8003118:	e010      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311a:	2308      	movs	r3, #8
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311e:	2307      	movs	r3, #7
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x240>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	@ (8003224 <HAL_GPIO_Init+0x328>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3d      	ldr	r3, [pc, #244]	@ (8003250 <HAL_GPIO_Init+0x354>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <HAL_GPIO_Init+0x354>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a29      	ldr	r2, [pc, #164]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b28      	ldr	r3, [pc, #160]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae86 	bls.w	8002f1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40022000 	.word	0x40022000
 800324c:	40022400 	.word	0x40022400
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	041a      	lsls	r2, r3, #16
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43d9      	mvns	r1, r3
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	400b      	ands	r3, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fc32 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	@ 0x24
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800330c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800331c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e006      	b.n	8003344 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003342:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d104      	bne.n	8003356 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003354:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_I2C_Init+0x11c>)
 8003362:	430b      	orrs	r3, r1
 8003364:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003374:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	02008000 	.word	0x02008000

080033dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	460b      	mov	r3, r1
 80033ea:	817b      	strh	r3, [r7, #10]
 80033ec:	4613      	mov	r3, r2
 80033ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	f040 80da 	bne.w	80035b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_I2C_Master_Transmit+0x30>
 8003408:	2302      	movs	r3, #2
 800340a:	e0d3      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003414:	f7fe f9b2 	bl	800177c <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2319      	movs	r3, #25
 8003420:	2201      	movs	r2, #1
 8003422:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f8f0 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0be      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2221      	movs	r2, #33	@ 0x21
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2210      	movs	r2, #16
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	d90e      	bls.n	8003486 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	@ 0xff
 800346c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	b2da      	uxtb	r2, r3
 8003474:	8979      	ldrh	r1, [r7, #10]
 8003476:	4b51      	ldr	r3, [pc, #324]	@ (80035bc <HAL_I2C_Master_Transmit+0x1e0>)
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa60 	bl	8003944 <I2C_TransferConfig>
 8003484:	e06c      	b.n	8003560 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	b2da      	uxtb	r2, r3
 8003496:	8979      	ldrh	r1, [r7, #10]
 8003498:	4b48      	ldr	r3, [pc, #288]	@ (80035bc <HAL_I2C_Master_Transmit+0x1e0>)
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fa4f 	bl	8003944 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034a6:	e05b      	b.n	8003560 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f8ed 	bl	800368c <I2C_WaitOnTXISFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e07b      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d034      	beq.n	8003560 <HAL_I2C_Master_Transmit+0x184>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d130      	bne.n	8003560 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	@ 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f87f 	bl	800360c <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e04d      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2bff      	cmp	r3, #255	@ 0xff
 8003520:	d90e      	bls.n	8003540 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	22ff      	movs	r2, #255	@ 0xff
 8003526:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	b2da      	uxtb	r2, r3
 800352e:	8979      	ldrh	r1, [r7, #10]
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fa03 	bl	8003944 <I2C_TransferConfig>
 800353e:	e00f      	b.n	8003560 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	b2da      	uxtb	r2, r3
 8003550:	8979      	ldrh	r1, [r7, #10]
 8003552:	2300      	movs	r3, #0
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f9f2 	bl	8003944 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d19e      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	6a39      	ldr	r1, [r7, #32]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8cc 	bl	800370c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e01a      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2220      	movs	r2, #32
 8003584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003592:	400b      	ands	r3, r1
 8003594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	80002000 	.word	0x80002000
 80035c0:	fe00e800 	.word	0xfe00e800

080035c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d103      	bne.n	80035e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	619a      	str	r2, [r3, #24]
  }
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800361c:	e022      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d01e      	beq.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe f8a9 	bl	800177c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d113      	bne.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00f      	b.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	429a      	cmp	r2, r3
 8003680:	d0cd      	beq.n	800361e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003698:	e02c      	b.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f870 	bl	8003784 <I2C_IsErrorOccurred>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e02a      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d01e      	beq.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe f861 	bl	800177c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d1cb      	bne.n	800369a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003718:	e028      	b.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f830 	bl	8003784 <I2C_IsErrorOccurred>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e026      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7fe f825 	bl	800177c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	d1cf      	bne.n	800371a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	@ 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d068      	beq.n	8003882 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037b8:	e049      	b.n	800384e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d045      	beq.n	800384e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd ffdb 	bl	800177c <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_IsErrorOccurred+0x54>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d13a      	bne.n	800384e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fa:	d121      	bne.n	8003840 <I2C_IsErrorOccurred+0xbc>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003802:	d01d      	beq.n	8003840 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b20      	cmp	r3, #32
 8003808:	d01a      	beq.n	8003840 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003818:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800381a:	f7fd ffaf 	bl	800177c <HAL_GetTick>
 800381e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003820:	e00e      	b.n	8003840 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003822:	f7fd ffab 	bl	800177c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b19      	cmp	r3, #25
 800382e:	d907      	bls.n	8003840 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f043 0320 	orr.w	r3, r3, #32
 8003836:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800383e:	e006      	b.n	800384e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b20      	cmp	r3, #32
 800384c:	d1e9      	bne.n	8003822 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d003      	beq.n	8003864 <I2C_IsErrorOccurred+0xe0>
 800385c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0aa      	beq.n	80037ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003868:	2b00      	cmp	r3, #0
 800386a:	d103      	bne.n	8003874 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2220      	movs	r2, #32
 8003872:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01c      	beq.n	8003932 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fe63 	bl	80035c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <I2C_IsErrorOccurred+0x1bc>)
 800390a:	400b      	ands	r3, r1
 800390c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003936:	4618      	mov	r0, r3
 8003938:	3728      	adds	r7, #40	@ 0x28
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	fe00e800 	.word	0xfe00e800

08003944 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	4613      	mov	r3, r2
 8003954:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800395c:	7a7b      	ldrb	r3, [r7, #9]
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003964:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	4313      	orrs	r3, r2
 800396e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003972:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	0d5b      	lsrs	r3, r3, #21
 800397e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <I2C_TransferConfig+0x60>)
 8003984:	430b      	orrs	r3, r1
 8003986:	43db      	mvns	r3, r3
 8003988:	ea02 0103 	and.w	r1, r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	03ff63ff 	.word	0x03ff63ff

080039a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d138      	bne.n	8003a30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e032      	b.n	8003a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	@ 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d139      	bne.n	8003ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e033      	b.n	8003aca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2224      	movs	r2, #36	@ 0x24
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b26:	f7fd fe29 	bl	800177c <HAL_GetTick>
 8003b2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b2c:	e009      	b.n	8003b42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b2e:	f7fd fe25 	bl	800177c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b3c:	d901      	bls.n	8003b42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e022      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b42:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5c:	f7fd fe0e 	bl	800177c <HAL_GetTick>
 8003b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b62:	e009      	b.n	8003b78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b64:	f7fd fe0a 	bl	800177c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b72:	d901      	bls.n	8003b78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e007      	b.n	8003b88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b84:	d1ee      	bne.n	8003b64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40007000 	.word	0x40007000

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e291      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8087 	beq.w	8003cca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bbc:	4b96      	ldr	r3, [pc, #600]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d00c      	beq.n	8003be2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc8:	4b93      	ldr	r3, [pc, #588]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d112      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62>
 8003bd4:	4b90      	ldr	r3, [pc, #576]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be0:	d10b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b8d      	ldr	r3, [pc, #564]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x130>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d168      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e26b      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x7a>
 8003c04:	4b84      	ldr	r3, [pc, #528]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a83      	ldr	r2, [pc, #524]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02e      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x9c>
 8003c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b7c      	ldr	r3, [pc, #496]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01d      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a72      	ldr	r2, [pc, #456]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xd8>
 8003c58:	4b6f      	ldr	r3, [pc, #444]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b6c      	ldr	r3, [pc, #432]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d013      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd fd80 	bl	800177c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd fd7c 	bl	800177c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e21f      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0xe8>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fd6c 	bl	800177c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fd68 	bl	800177c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	@ 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e20b      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	4b57      	ldr	r3, [pc, #348]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x110>
 8003cc6:	e000      	b.n	8003cca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d069      	beq.n	8003daa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd6:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d11c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x190>
 8003cee:	4b4a      	ldr	r3, [pc, #296]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d116      	bne.n	8003d28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d001      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1df      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	493d      	ldr	r1, [pc, #244]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d26:	e040      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d023      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d30:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a38      	ldr	r2, [pc, #224]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fd1e 	bl	800177c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d44:	f7fd fd1a 	bl	800177c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1bd      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b30      	ldr	r3, [pc, #192]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4929      	ldr	r1, [pc, #164]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
 8003d76:	e018      	b.n	8003daa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d78:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd fcfa 	bl	800177c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8c:	f7fd fcf6 	bl	800177c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e199      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d038      	beq.n	8003e28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d019      	beq.n	8003df2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b16      	ldr	r3, [pc, #88]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fcd7 	bl	800177c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fd fcd3 	bl	800177c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e176      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x23a>
 8003df0:	e01a      	b.n	8003e28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df2:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df6:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <HAL_RCC_OscConfig+0x280>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd fcbd 	bl	800177c <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00a      	b.n	8003e1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd fcb9 	bl	800177c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d903      	bls.n	8003e1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e15c      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
 8003e18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b91      	ldr	r3, [pc, #580]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ee      	bne.n	8003e06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a4 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b8b      	ldr	r3, [pc, #556]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b88      	ldr	r3, [pc, #544]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a87      	ldr	r2, [pc, #540]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b85      	ldr	r3, [pc, #532]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	4b82      	ldr	r3, [pc, #520]	@ (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fd fc81 	bl	800177c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fd fc7d 	bl	800177c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	@ 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e120      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b75      	ldr	r3, [pc, #468]	@ (8004068 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x31a>
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x33c>
 8003eba:	4b6a      	ldr	r3, [pc, #424]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a69      	ldr	r2, [pc, #420]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec6:	4b67      	ldr	r3, [pc, #412]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a66      	ldr	r2, [pc, #408]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x35e>
 8003edc:	4b61      	ldr	r3, [pc, #388]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a60      	ldr	r2, [pc, #384]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x376>
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	4a5a      	ldr	r2, [pc, #360]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f02:	4b58      	ldr	r3, [pc, #352]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a57      	ldr	r2, [pc, #348]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fc31 	bl	800177c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fd fc2d 	bl	800177c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0ce      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b4b      	ldr	r3, [pc, #300]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x386>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd fc1b 	bl	800177c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd fc17 	bl	800177c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0b8      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b40      	ldr	r3, [pc, #256]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b3c      	ldr	r3, [pc, #240]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	4a3b      	ldr	r2, [pc, #236]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a4 	beq.w	80040d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b36      	ldr	r3, [pc, #216]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d06b      	beq.n	800406c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d149      	bne.n	8004030 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a30      	ldr	r2, [pc, #192]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd fbe8 	bl	800177c <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd fbe4 	bl	800177c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e087      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b28      	ldr	r3, [pc, #160]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	019b      	lsls	r3, r3, #6
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ff6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ffa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b19      	ldr	r3, [pc, #100]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd fbb8 	bl	800177c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd fbb4 	bl	800177c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e057      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x478>
 800402e:	e04f      	b.n	80040d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0b      	ldr	r2, [pc, #44]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fb9e 	bl	800177c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fb9a 	bl	800177c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e03d      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x4ac>
 8004062:	e035      	b.n	80040d0 <HAL_RCC_OscConfig+0x538>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800406c:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_RCC_OscConfig+0x544>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d028      	beq.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d121      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d11a      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d111      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	3b01      	subs	r3, #1
 80040b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d0      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6a      	ldr	r3, [pc, #424]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b67      	ldr	r3, [pc, #412]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4965      	ldr	r1, [pc, #404]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a58      	ldr	r2, [pc, #352]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800414a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a52      	ldr	r2, [pc, #328]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d040      	beq.n	8004204 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b41      	ldr	r3, [pc, #260]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e073      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b39      	ldr	r3, [pc, #228]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4936      	ldr	r1, [pc, #216]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fad2 	bl	800177c <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fd face 	bl	800177c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e053      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d210      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4922      	ldr	r1, [pc, #136]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425e:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	@ (80042ac <HAL_RCC_ClockConfig+0x1cc>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	@ (80042b0 <HAL_RCC_ClockConfig+0x1d0>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fc feb0 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	0801cff8 	.word	0x0801cff8
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000004 	.word	0x20000004

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042bc:	b094      	sub	sp, #80	@ 0x50
 80042be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c4:	2300      	movs	r3, #0
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c8:	2300      	movs	r3, #0
 80042ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d0:	4b79      	ldr	r3, [pc, #484]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d00d      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0x40>
 80042dc:	2b08      	cmp	r3, #8
 80042de:	f200 80e1 	bhi.w	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0x34>
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d003      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ea:	e0db      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b73      	ldr	r3, [pc, #460]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042f0:	e0db      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f2:	4b73      	ldr	r3, [pc, #460]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80042f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042f6:	e0d8      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f8:	4b6f      	ldr	r3, [pc, #444]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004302:	4b6d      	ldr	r3, [pc, #436]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d063      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430e:	4b6a      	ldr	r3, [pc, #424]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	099b      	lsrs	r3, r3, #6
 8004314:	2200      	movs	r2, #0
 8004316:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004318:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800431a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	633b      	str	r3, [r7, #48]	@ 0x30
 8004322:	2300      	movs	r3, #0
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
 8004326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800432a:	4622      	mov	r2, r4
 800432c:	462b      	mov	r3, r5
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	0159      	lsls	r1, r3, #5
 8004338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433c:	0150      	lsls	r0, r2, #5
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4621      	mov	r1, r4
 8004344:	1a51      	subs	r1, r2, r1
 8004346:	6139      	str	r1, [r7, #16]
 8004348:	4629      	mov	r1, r5
 800434a:	eb63 0301 	sbc.w	r3, r3, r1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800435c:	4659      	mov	r1, fp
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004366:	4651      	mov	r1, sl
 8004368:	018a      	lsls	r2, r1, #6
 800436a:	4651      	mov	r1, sl
 800436c:	ebb2 0801 	subs.w	r8, r2, r1
 8004370:	4659      	mov	r1, fp
 8004372:	eb63 0901 	sbc.w	r9, r3, r1
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438a:	4690      	mov	r8, r2
 800438c:	4699      	mov	r9, r3
 800438e:	4623      	mov	r3, r4
 8004390:	eb18 0303 	adds.w	r3, r8, r3
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	462b      	mov	r3, r5
 8004398:	eb49 0303 	adc.w	r3, r9, r3
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043aa:	4629      	mov	r1, r5
 80043ac:	024b      	lsls	r3, r1, #9
 80043ae:	4621      	mov	r1, r4
 80043b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043b4:	4621      	mov	r1, r4
 80043b6:	024a      	lsls	r2, r1, #9
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043be:	2200      	movs	r2, #0
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c8:	f7fb ff8a 	bl	80002e0 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d4:	e058      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	4618      	mov	r0, r3
 80043e0:	4611      	mov	r1, r2
 80043e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	0159      	lsls	r1, r3, #5
 80043fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004402:	0150      	lsls	r0, r2, #5
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4641      	mov	r1, r8
 800440a:	ebb2 0a01 	subs.w	sl, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb63 0b01 	sbc.w	fp, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004428:	ebb2 040a 	subs.w	r4, r2, sl
 800442c:	eb63 050b 	sbc.w	r5, r3, fp
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	00eb      	lsls	r3, r5, #3
 800443a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443e:	00e2      	lsls	r2, r4, #3
 8004440:	4614      	mov	r4, r2
 8004442:	461d      	mov	r5, r3
 8004444:	4643      	mov	r3, r8
 8004446:	18e3      	adds	r3, r4, r3
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	464b      	mov	r3, r9
 800444c:	eb45 0303 	adc.w	r3, r5, r3
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800445e:	4629      	mov	r1, r5
 8004460:	028b      	lsls	r3, r1, #10
 8004462:	4621      	mov	r1, r4
 8004464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004468:	4621      	mov	r1, r4
 800446a:	028a      	lsls	r2, r1, #10
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004472:	2200      	movs	r2, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	61fa      	str	r2, [r7, #28]
 8004478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800447c:	f7fb ff30 	bl	80002e0 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4613      	mov	r3, r2
 8004486:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	3301      	adds	r3, #1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800449a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044a2:	e002      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044a4:	4b05      	ldr	r3, [pc, #20]	@ (80044bc <HAL_RCC_GetSysClockFreq+0x204>)
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3750      	adds	r7, #80	@ 0x50
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	007a1200 	.word	0x007a1200

080044c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c8:	4b03      	ldr	r3, [pc, #12]	@ (80044d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ca:	681b      	ldr	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000000 	.word	0x20000000

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e0:	f7ff fff0 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0a9b      	lsrs	r3, r3, #10
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	@ (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	0801d008 	.word	0x0801d008

08004504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004508:	f7ff ffdc 	bl	80044c4 <HAL_RCC_GetHCLKFreq>
 800450c:	4602      	mov	r2, r0
 800450e:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	4903      	ldr	r1, [pc, #12]	@ (8004528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451a:	5ccb      	ldrb	r3, [r1, r3]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	0801d008 	.word	0x0801d008

0800452c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	220f      	movs	r2, #15
 800453a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800453c:	4b12      	ldr	r3, [pc, #72]	@ (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004548:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800456e:	4b07      	ldr	r3, [pc, #28]	@ (800458c <HAL_RCC_GetClockConfig+0x60>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	40023c00 	.word	0x40023c00

08004590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b8:	4b69      	ldr	r3, [pc, #420]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a68      	ldr	r2, [pc, #416]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045c2:	6093      	str	r3, [r2, #8]
 80045c4:	4b66      	ldr	r3, [pc, #408]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	4964      	ldr	r1, [pc, #400]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	4959      	ldr	r1, [pc, #356]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004604:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800460a:	2301      	movs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d017      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004626:	4b4e      	ldr	r3, [pc, #312]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800462c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	494a      	ldr	r1, [pc, #296]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004644:	d101      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004646:	2301      	movs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004652:	2301      	movs	r3, #1
 8004654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 808b 	beq.w	800478a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b3a      	ldr	r3, [pc, #232]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	4a39      	ldr	r2, [pc, #228]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800467e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004680:	4b37      	ldr	r3, [pc, #220]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800468c:	4b35      	ldr	r3, [pc, #212]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a34      	ldr	r2, [pc, #208]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fd f870 	bl	800177c <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a0:	f7fd f86c 	bl	800177c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	@ 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e357      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046be:	4b28      	ldr	r3, [pc, #160]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d035      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d02e      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004704:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d114      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd f834 	bl	800177c <HAL_GetTick>
 8004714:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fd f830 	bl	800177c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e319      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0ee      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004746:	d111      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004754:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004756:	400b      	ands	r3, r1
 8004758:	4901      	ldr	r1, [pc, #4]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
 800475e:	e00b      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004760:	40023800 	.word	0x40023800
 8004764:	40007000 	.word	0x40007000
 8004768:	0ffffcff 	.word	0x0ffffcff
 800476c:	4baa      	ldr	r3, [pc, #680]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4aa9      	ldr	r2, [pc, #676]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004776:	6093      	str	r3, [r2, #8]
 8004778:	4ba7      	ldr	r3, [pc, #668]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	49a4      	ldr	r1, [pc, #656]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	4313      	orrs	r3, r2
 8004788:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004796:	4ba0      	ldr	r3, [pc, #640]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800479c:	4a9e      	ldr	r2, [pc, #632]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b0:	4999      	ldr	r1, [pc, #612]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c4:	4b94      	ldr	r3, [pc, #592]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d2:	4991      	ldr	r1, [pc, #580]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047e6:	4b8c      	ldr	r3, [pc, #560]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f4:	4988      	ldr	r1, [pc, #544]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004808:	4b83      	ldr	r3, [pc, #524]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004816:	4980      	ldr	r1, [pc, #512]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800482a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004838:	4977      	ldr	r1, [pc, #476]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484c:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	496f      	ldr	r1, [pc, #444]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f023 020c 	bic.w	r2, r3, #12
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487c:	4966      	ldr	r1, [pc, #408]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004890:	4b61      	ldr	r3, [pc, #388]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	495e      	ldr	r1, [pc, #376]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c0:	4955      	ldr	r1, [pc, #340]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048d4:	4b50      	ldr	r3, [pc, #320]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	494d      	ldr	r1, [pc, #308]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048f6:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	4944      	ldr	r1, [pc, #272]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004918:	4b3f      	ldr	r3, [pc, #252]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004926:	493c      	ldr	r1, [pc, #240]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800493a:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004940:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004948:	4933      	ldr	r1, [pc, #204]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800495c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800496a:	492b      	ldr	r1, [pc, #172]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800497e:	4b26      	ldr	r3, [pc, #152]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800498c:	4922      	ldr	r1, [pc, #136]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800499c:	d101      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049be:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049cc:	4912      	ldr	r1, [pc, #72]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00b      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f0:	4909      	ldr	r1, [pc, #36]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d006      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80d9 	beq.w	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a0c:	4b02      	ldr	r3, [pc, #8]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a01      	ldr	r2, [pc, #4]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1e:	f7fc fead 	bl	800177c <HAL_GetTick>
 8004a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a24:	e008      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a26:	f7fc fea9 	bl	800177c <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b64      	cmp	r3, #100	@ 0x64
 8004a32:	d901      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e194      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	4b6c      	ldr	r3, [pc, #432]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f0      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a58:	4b64      	ldr	r3, [pc, #400]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a66:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	071b      	lsls	r3, r3, #28
 8004a8c:	4957      	ldr	r1, [pc, #348]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004abe:	d129      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac6:	0c1b      	lsrs	r3, r3, #16
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad4:	0f1b      	lsrs	r3, r3, #28
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	019a      	lsls	r2, r3, #6
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	071b      	lsls	r3, r3, #28
 8004af4:	493d      	ldr	r1, [pc, #244]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b02:	f023 021f 	bic.w	r2, r3, #31
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	4937      	ldr	r1, [pc, #220]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01d      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b20:	4b32      	ldr	r3, [pc, #200]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b26:	0e1b      	lsrs	r3, r3, #24
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b34:	0f1b      	lsrs	r3, r3, #28
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	019a      	lsls	r2, r3, #6
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	4925      	ldr	r1, [pc, #148]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d011      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	019a      	lsls	r2, r3, #6
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	4919      	ldr	r1, [pc, #100]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b8c:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a16      	ldr	r2, [pc, #88]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fc fdf0 	bl	800177c <HAL_GetTick>
 8004b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ba0:	f7fc fdec 	bl	800177c <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	@ 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0d7      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 80cd 	bne.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bc6:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd2:	f7fc fdd3 	bl	800177c <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bda:	f7fc fdcf 	bl	800177c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	@ 0x64
 8004be6:	d903      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0ba      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfc:	d0ed      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02e      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d12a      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c26:	4b51      	ldr	r3, [pc, #324]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c34:	4b4d      	ldr	r3, [pc, #308]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3a:	0f1b      	lsrs	r3, r3, #28
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	019a      	lsls	r2, r3, #6
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	071b      	lsls	r3, r3, #28
 8004c5a:	4944      	ldr	r1, [pc, #272]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c62:	4b42      	ldr	r3, [pc, #264]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c68:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	493d      	ldr	r1, [pc, #244]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c90:	d11d      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c92:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ca0:	4b32      	ldr	r3, [pc, #200]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca6:	0f1b      	lsrs	r3, r3, #28
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	4929      	ldr	r1, [pc, #164]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d028      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cda:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	0e1b      	lsrs	r3, r3, #24
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce8:	4b20      	ldr	r3, [pc, #128]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	019a      	lsls	r2, r3, #6
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	041b      	lsls	r3, r3, #16
 8004d00:	431a      	orrs	r2, r3
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	061b      	lsls	r3, r3, #24
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	071b      	lsls	r3, r3, #28
 8004d0e:	4917      	ldr	r1, [pc, #92]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4911      	ldr	r1, [pc, #68]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d38:	f7fc fd20 	bl	800177c <HAL_GetTick>
 8004d3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d40:	f7fc fd1c 	bl	800177c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	@ 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e007      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d5e:	d1ef      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f841 	bl	8004e1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fa00 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e054      	b.n	8004ef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e76:	d01d      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a22      	ldr	r2, [pc, #136]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d115      	bne.n	8004ee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	4b19      	ldr	r3, [pc, #100]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xec>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d015      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ecc:	d011      	beq.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e000      	b.n	8004ef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40010000 	.word	0x40010000
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	40000800 	.word	0x40000800
 8004f10:	40000c00 	.word	0x40000c00
 8004f14:	40010400 	.word	0x40010400
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40001800 	.word	0x40001800
 8004f20:	00010007 	.word	0x00010007

08004f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0202 	mvn.w	r2, #2
 8004f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f905 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8f7 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f908 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0204 	mvn.w	r2, #4
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8db 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8cd 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8de 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0208 	mvn.w	r2, #8
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8b1 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8a3 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f8b4 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b10      	cmp	r3, #16
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b10      	cmp	r3, #16
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0210 	mvn.w	r2, #16
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2208      	movs	r2, #8
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f887 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f879 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f88a 	bl	800518a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10e      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0201 	mvn.w	r2, #1
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb ff68 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b2:	2b80      	cmp	r3, #128	@ 0x80
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f91a 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d10e      	bne.n	8005102 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ee:	2b80      	cmp	r3, #128	@ 0x80
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f90d 	bl	800531c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d10e      	bne.n	800512e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b40      	cmp	r3, #64	@ 0x40
 800511c:	d107      	bne.n	800512e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f838 	bl	800519e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b20      	cmp	r3, #32
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0220 	mvn.w	r2, #32
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8cd 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d2:	d00f      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3d      	ldr	r2, [pc, #244]	@ (80052cc <TIM_Base_SetConfig+0x118>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <TIM_Base_SetConfig+0x11c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3b      	ldr	r2, [pc, #236]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005214:	d027      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <TIM_Base_SetConfig+0x118>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d023      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2b      	ldr	r2, [pc, #172]	@ (80052d0 <TIM_Base_SetConfig+0x11c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2a      	ldr	r2, [pc, #168]	@ (80052d4 <TIM_Base_SetConfig+0x120>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a29      	ldr	r2, [pc, #164]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d017      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <TIM_Base_SetConfig+0x128>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a26      	ldr	r2, [pc, #152]	@ (80052e4 <TIM_Base_SetConfig+0x130>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <TIM_Base_SetConfig+0x134>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a24      	ldr	r2, [pc, #144]	@ (80052ec <TIM_Base_SetConfig+0x138>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	@ (80052f0 <TIM_Base_SetConfig+0x13c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	@ (80052d8 <TIM_Base_SetConfig+0x124>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]
}
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	40001800 	.word	0x40001800
 80052ec:	40001c00 	.word	0x40001c00
 80052f0:	40002000 	.word	0x40002000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e040      	b.n	80053c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc f806 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	@ 0x24
 800535c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f82c 	bl	80053cc <UART_SetConfig>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e022      	b.n	80053c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa84 	bl	8005894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800539a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb0b 	bl	80059d8 <UART_CheckIdleState>
 80053c2:	4603      	mov	r3, r0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4ba6      	ldr	r3, [pc, #664]	@ (8005690 <UART_SetConfig+0x2c4>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	6979      	ldr	r1, [r7, #20]
 8005400:	430b      	orrs	r3, r1
 8005402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	430a      	orrs	r2, r1
 800543c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a94      	ldr	r2, [pc, #592]	@ (8005694 <UART_SetConfig+0x2c8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d120      	bne.n	800548a <UART_SetConfig+0xbe>
 8005448:	4b93      	ldr	r3, [pc, #588]	@ (8005698 <UART_SetConfig+0x2cc>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d816      	bhi.n	8005484 <UART_SetConfig+0xb8>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <UART_SetConfig+0x90>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	0800546d 	.word	0x0800546d
 8005460:	08005479 	.word	0x08005479
 8005464:	08005473 	.word	0x08005473
 8005468:	0800547f 	.word	0x0800547f
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e150      	b.n	8005714 <UART_SetConfig+0x348>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e14d      	b.n	8005714 <UART_SetConfig+0x348>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e14a      	b.n	8005714 <UART_SetConfig+0x348>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e147      	b.n	8005714 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e144      	b.n	8005714 <UART_SetConfig+0x348>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a83      	ldr	r2, [pc, #524]	@ (800569c <UART_SetConfig+0x2d0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d132      	bne.n	80054fa <UART_SetConfig+0x12e>
 8005494:	4b80      	ldr	r3, [pc, #512]	@ (8005698 <UART_SetConfig+0x2cc>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d828      	bhi.n	80054f4 <UART_SetConfig+0x128>
 80054a2:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <UART_SetConfig+0xdc>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054f5 	.word	0x080054f5
 80054b0:	080054f5 	.word	0x080054f5
 80054b4:	080054f5 	.word	0x080054f5
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	080054f5 	.word	0x080054f5
 80054c4:	080054f5 	.word	0x080054f5
 80054c8:	080054e3 	.word	0x080054e3
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054f5 	.word	0x080054f5
 80054d4:	080054f5 	.word	0x080054f5
 80054d8:	080054ef 	.word	0x080054ef
 80054dc:	2300      	movs	r3, #0
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e118      	b.n	8005714 <UART_SetConfig+0x348>
 80054e2:	2302      	movs	r3, #2
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e115      	b.n	8005714 <UART_SetConfig+0x348>
 80054e8:	2304      	movs	r3, #4
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e112      	b.n	8005714 <UART_SetConfig+0x348>
 80054ee:	2308      	movs	r3, #8
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e10f      	b.n	8005714 <UART_SetConfig+0x348>
 80054f4:	2310      	movs	r3, #16
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e10c      	b.n	8005714 <UART_SetConfig+0x348>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a68      	ldr	r2, [pc, #416]	@ (80056a0 <UART_SetConfig+0x2d4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d120      	bne.n	8005546 <UART_SetConfig+0x17a>
 8005504:	4b64      	ldr	r3, [pc, #400]	@ (8005698 <UART_SetConfig+0x2cc>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800550e:	2b30      	cmp	r3, #48	@ 0x30
 8005510:	d013      	beq.n	800553a <UART_SetConfig+0x16e>
 8005512:	2b30      	cmp	r3, #48	@ 0x30
 8005514:	d814      	bhi.n	8005540 <UART_SetConfig+0x174>
 8005516:	2b20      	cmp	r3, #32
 8005518:	d009      	beq.n	800552e <UART_SetConfig+0x162>
 800551a:	2b20      	cmp	r3, #32
 800551c:	d810      	bhi.n	8005540 <UART_SetConfig+0x174>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <UART_SetConfig+0x15c>
 8005522:	2b10      	cmp	r3, #16
 8005524:	d006      	beq.n	8005534 <UART_SetConfig+0x168>
 8005526:	e00b      	b.n	8005540 <UART_SetConfig+0x174>
 8005528:	2300      	movs	r3, #0
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e0f2      	b.n	8005714 <UART_SetConfig+0x348>
 800552e:	2302      	movs	r3, #2
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e0ef      	b.n	8005714 <UART_SetConfig+0x348>
 8005534:	2304      	movs	r3, #4
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e0ec      	b.n	8005714 <UART_SetConfig+0x348>
 800553a:	2308      	movs	r3, #8
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e0e9      	b.n	8005714 <UART_SetConfig+0x348>
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e0e6      	b.n	8005714 <UART_SetConfig+0x348>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a56      	ldr	r2, [pc, #344]	@ (80056a4 <UART_SetConfig+0x2d8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d120      	bne.n	8005592 <UART_SetConfig+0x1c6>
 8005550:	4b51      	ldr	r3, [pc, #324]	@ (8005698 <UART_SetConfig+0x2cc>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800555a:	2bc0      	cmp	r3, #192	@ 0xc0
 800555c:	d013      	beq.n	8005586 <UART_SetConfig+0x1ba>
 800555e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005560:	d814      	bhi.n	800558c <UART_SetConfig+0x1c0>
 8005562:	2b80      	cmp	r3, #128	@ 0x80
 8005564:	d009      	beq.n	800557a <UART_SetConfig+0x1ae>
 8005566:	2b80      	cmp	r3, #128	@ 0x80
 8005568:	d810      	bhi.n	800558c <UART_SetConfig+0x1c0>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <UART_SetConfig+0x1a8>
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d006      	beq.n	8005580 <UART_SetConfig+0x1b4>
 8005572:	e00b      	b.n	800558c <UART_SetConfig+0x1c0>
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e0cc      	b.n	8005714 <UART_SetConfig+0x348>
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e0c9      	b.n	8005714 <UART_SetConfig+0x348>
 8005580:	2304      	movs	r3, #4
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e0c6      	b.n	8005714 <UART_SetConfig+0x348>
 8005586:	2308      	movs	r3, #8
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e0c3      	b.n	8005714 <UART_SetConfig+0x348>
 800558c:	2310      	movs	r3, #16
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e0c0      	b.n	8005714 <UART_SetConfig+0x348>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a44      	ldr	r2, [pc, #272]	@ (80056a8 <UART_SetConfig+0x2dc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d125      	bne.n	80055e8 <UART_SetConfig+0x21c>
 800559c:	4b3e      	ldr	r3, [pc, #248]	@ (8005698 <UART_SetConfig+0x2cc>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055aa:	d017      	beq.n	80055dc <UART_SetConfig+0x210>
 80055ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055b0:	d817      	bhi.n	80055e2 <UART_SetConfig+0x216>
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b6:	d00b      	beq.n	80055d0 <UART_SetConfig+0x204>
 80055b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055bc:	d811      	bhi.n	80055e2 <UART_SetConfig+0x216>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <UART_SetConfig+0x1fe>
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d006      	beq.n	80055d6 <UART_SetConfig+0x20a>
 80055c8:	e00b      	b.n	80055e2 <UART_SetConfig+0x216>
 80055ca:	2300      	movs	r3, #0
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e0a1      	b.n	8005714 <UART_SetConfig+0x348>
 80055d0:	2302      	movs	r3, #2
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e09e      	b.n	8005714 <UART_SetConfig+0x348>
 80055d6:	2304      	movs	r3, #4
 80055d8:	77fb      	strb	r3, [r7, #31]
 80055da:	e09b      	b.n	8005714 <UART_SetConfig+0x348>
 80055dc:	2308      	movs	r3, #8
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e098      	b.n	8005714 <UART_SetConfig+0x348>
 80055e2:	2310      	movs	r3, #16
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e095      	b.n	8005714 <UART_SetConfig+0x348>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a2f      	ldr	r2, [pc, #188]	@ (80056ac <UART_SetConfig+0x2e0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d125      	bne.n	800563e <UART_SetConfig+0x272>
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <UART_SetConfig+0x2cc>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005600:	d017      	beq.n	8005632 <UART_SetConfig+0x266>
 8005602:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005606:	d817      	bhi.n	8005638 <UART_SetConfig+0x26c>
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800560c:	d00b      	beq.n	8005626 <UART_SetConfig+0x25a>
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005612:	d811      	bhi.n	8005638 <UART_SetConfig+0x26c>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x254>
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561c:	d006      	beq.n	800562c <UART_SetConfig+0x260>
 800561e:	e00b      	b.n	8005638 <UART_SetConfig+0x26c>
 8005620:	2301      	movs	r3, #1
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e076      	b.n	8005714 <UART_SetConfig+0x348>
 8005626:	2302      	movs	r3, #2
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e073      	b.n	8005714 <UART_SetConfig+0x348>
 800562c:	2304      	movs	r3, #4
 800562e:	77fb      	strb	r3, [r7, #31]
 8005630:	e070      	b.n	8005714 <UART_SetConfig+0x348>
 8005632:	2308      	movs	r3, #8
 8005634:	77fb      	strb	r3, [r7, #31]
 8005636:	e06d      	b.n	8005714 <UART_SetConfig+0x348>
 8005638:	2310      	movs	r3, #16
 800563a:	77fb      	strb	r3, [r7, #31]
 800563c:	e06a      	b.n	8005714 <UART_SetConfig+0x348>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1b      	ldr	r2, [pc, #108]	@ (80056b0 <UART_SetConfig+0x2e4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d138      	bne.n	80056ba <UART_SetConfig+0x2ee>
 8005648:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <UART_SetConfig+0x2cc>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005652:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005656:	d017      	beq.n	8005688 <UART_SetConfig+0x2bc>
 8005658:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800565c:	d82a      	bhi.n	80056b4 <UART_SetConfig+0x2e8>
 800565e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005662:	d00b      	beq.n	800567c <UART_SetConfig+0x2b0>
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005668:	d824      	bhi.n	80056b4 <UART_SetConfig+0x2e8>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <UART_SetConfig+0x2aa>
 800566e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005672:	d006      	beq.n	8005682 <UART_SetConfig+0x2b6>
 8005674:	e01e      	b.n	80056b4 <UART_SetConfig+0x2e8>
 8005676:	2300      	movs	r3, #0
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e04b      	b.n	8005714 <UART_SetConfig+0x348>
 800567c:	2302      	movs	r3, #2
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e048      	b.n	8005714 <UART_SetConfig+0x348>
 8005682:	2304      	movs	r3, #4
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e045      	b.n	8005714 <UART_SetConfig+0x348>
 8005688:	2308      	movs	r3, #8
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e042      	b.n	8005714 <UART_SetConfig+0x348>
 800568e:	bf00      	nop
 8005690:	efff69f3 	.word	0xefff69f3
 8005694:	40011000 	.word	0x40011000
 8005698:	40023800 	.word	0x40023800
 800569c:	40004400 	.word	0x40004400
 80056a0:	40004800 	.word	0x40004800
 80056a4:	40004c00 	.word	0x40004c00
 80056a8:	40005000 	.word	0x40005000
 80056ac:	40011400 	.word	0x40011400
 80056b0:	40007800 	.word	0x40007800
 80056b4:	2310      	movs	r3, #16
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e02c      	b.n	8005714 <UART_SetConfig+0x348>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a72      	ldr	r2, [pc, #456]	@ (8005888 <UART_SetConfig+0x4bc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d125      	bne.n	8005710 <UART_SetConfig+0x344>
 80056c4:	4b71      	ldr	r3, [pc, #452]	@ (800588c <UART_SetConfig+0x4c0>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056d2:	d017      	beq.n	8005704 <UART_SetConfig+0x338>
 80056d4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80056d8:	d817      	bhi.n	800570a <UART_SetConfig+0x33e>
 80056da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056de:	d00b      	beq.n	80056f8 <UART_SetConfig+0x32c>
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e4:	d811      	bhi.n	800570a <UART_SetConfig+0x33e>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <UART_SetConfig+0x326>
 80056ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ee:	d006      	beq.n	80056fe <UART_SetConfig+0x332>
 80056f0:	e00b      	b.n	800570a <UART_SetConfig+0x33e>
 80056f2:	2300      	movs	r3, #0
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e00d      	b.n	8005714 <UART_SetConfig+0x348>
 80056f8:	2302      	movs	r3, #2
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e00a      	b.n	8005714 <UART_SetConfig+0x348>
 80056fe:	2304      	movs	r3, #4
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e007      	b.n	8005714 <UART_SetConfig+0x348>
 8005704:	2308      	movs	r3, #8
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e004      	b.n	8005714 <UART_SetConfig+0x348>
 800570a:	2310      	movs	r3, #16
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e001      	b.n	8005714 <UART_SetConfig+0x348>
 8005710:	2310      	movs	r3, #16
 8005712:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571c:	d15b      	bne.n	80057d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d828      	bhi.n	8005776 <UART_SetConfig+0x3aa>
 8005724:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0x360>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005751 	.word	0x08005751
 8005730:	08005759 	.word	0x08005759
 8005734:	08005761 	.word	0x08005761
 8005738:	08005777 	.word	0x08005777
 800573c:	08005767 	.word	0x08005767
 8005740:	08005777 	.word	0x08005777
 8005744:	08005777 	.word	0x08005777
 8005748:	08005777 	.word	0x08005777
 800574c:	0800576f 	.word	0x0800576f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005750:	f7fe fec4 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8005754:	61b8      	str	r0, [r7, #24]
        break;
 8005756:	e013      	b.n	8005780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7fe fed4 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e00f      	b.n	8005780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005760:	4b4b      	ldr	r3, [pc, #300]	@ (8005890 <UART_SetConfig+0x4c4>)
 8005762:	61bb      	str	r3, [r7, #24]
        break;
 8005764:	e00c      	b.n	8005780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005766:	f7fe fda7 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 800576a:	61b8      	str	r0, [r7, #24]
        break;
 800576c:	e008      	b.n	8005780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005772:	61bb      	str	r3, [r7, #24]
        break;
 8005774:	e004      	b.n	8005780 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	77bb      	strb	r3, [r7, #30]
        break;
 800577e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d074      	beq.n	8005870 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	005a      	lsls	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	085b      	lsrs	r3, r3, #1
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b0f      	cmp	r3, #15
 80057a0:	d916      	bls.n	80057d0 <UART_SetConfig+0x404>
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d212      	bcs.n	80057d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f023 030f 	bic.w	r3, r3, #15
 80057b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	b29a      	uxth	r2, r3
 80057c0:	89fb      	ldrh	r3, [r7, #14]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	89fa      	ldrh	r2, [r7, #14]
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	e04f      	b.n	8005870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	77bb      	strb	r3, [r7, #30]
 80057d4:	e04c      	b.n	8005870 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057d6:	7ffb      	ldrb	r3, [r7, #31]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d828      	bhi.n	800582e <UART_SetConfig+0x462>
 80057dc:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0x418>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe fe68 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 800580c:	61b8      	str	r0, [r7, #24]
        break;
 800580e:	e013      	b.n	8005838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7fe fe78 	bl	8004504 <HAL_RCC_GetPCLK2Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e00f      	b.n	8005838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b1d      	ldr	r3, [pc, #116]	@ (8005890 <UART_SetConfig+0x4c4>)
 800581a:	61bb      	str	r3, [r7, #24]
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fe fd4b 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8005822:	61b8      	str	r0, [r7, #24]
        break;
 8005824:	e008      	b.n	8005838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582a:	61bb      	str	r3, [r7, #24]
        break;
 800582c:	e004      	b.n	8005838 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	77bb      	strb	r3, [r7, #30]
        break;
 8005836:	bf00      	nop
    }

    if (pclk != 0U)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d018      	beq.n	8005870 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	085a      	lsrs	r2, r3, #1
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	441a      	add	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b0f      	cmp	r3, #15
 8005856:	d909      	bls.n	800586c <UART_SetConfig+0x4a0>
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800585e:	d205      	bcs.n	800586c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	b29a      	uxth	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60da      	str	r2, [r3, #12]
 800586a:	e001      	b.n	8005870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800587c:	7fbb      	ldrb	r3, [r7, #30]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40007c00 	.word	0x40007c00
 800588c:	40023800 	.word	0x40023800
 8005890:	00f42400 	.word	0x00f42400

08005894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01a      	beq.n	80059aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005992:	d10a      	bne.n	80059aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af02      	add	r7, sp, #8
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059e8:	f7fb fec8 	bl	800177c <HAL_GetTick>
 80059ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10e      	bne.n	8005a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f81b 	bl	8005a46 <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e011      	b.n	8005a3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b09c      	sub	sp, #112	@ 0x70
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a56:	e0a7      	b.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	f000 80a3 	beq.w	8005ba8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a62:	f7fb fe8b 	bl	800177c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d302      	bcc.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d13f      	bne.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a88:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a98:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a9c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e6      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	f023 0301 	bic.w	r3, r3, #1
 8005ac0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005aca:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005acc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e5      	bne.n	8005aaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e068      	b.n	8005bca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d050      	beq.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b14:	d148      	bne.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b40:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	613b      	str	r3, [r7, #16]
   return(result);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f023 0301 	bic.w	r3, r3, #1
 8005b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b72:	623a      	str	r2, [r7, #32]
 8005b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	69f9      	ldr	r1, [r7, #28]
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e010      	b.n	8005bca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	2300      	movne	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f43f af48 	beq.w	8005a58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3770      	adds	r7, #112	@ 0x70
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005bd4:	b5b0      	push	{r4, r5, r7, lr}
 8005bd6:	b08c      	sub	sp, #48	@ 0x30
 8005bd8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005bda:	4b96      	ldr	r3, [pc, #600]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005bdc:	22c0      	movs	r2, #192	@ 0xc0
 8005bde:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005be0:	4b94      	ldr	r3, [pc, #592]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005be2:	22a8      	movs	r2, #168	@ 0xa8
 8005be4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005be6:	4b93      	ldr	r3, [pc, #588]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005be8:	2201      	movs	r2, #1
 8005bea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 8005bec:	4b91      	ldr	r3, [pc, #580]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005bee:	2242      	movs	r2, #66	@ 0x42
 8005bf0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005bf2:	4b91      	ldr	r3, [pc, #580]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005bf4:	22ff      	movs	r2, #255	@ 0xff
 8005bf6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005bfa:	22ff      	movs	r2, #255	@ 0xff
 8005bfc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005bfe:	4b8e      	ldr	r3, [pc, #568]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005c00:	22ff      	movs	r2, #255	@ 0xff
 8005c02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005c04:	4b8c      	ldr	r3, [pc, #560]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005c0a:	4b8c      	ldr	r3, [pc, #560]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005c0c:	22c0      	movs	r2, #192	@ 0xc0
 8005c0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005c10:	4b8a      	ldr	r3, [pc, #552]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005c12:	22a8      	movs	r2, #168	@ 0xa8
 8005c14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005c16:	4b89      	ldr	r3, [pc, #548]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005c1c:	4b87      	ldr	r3, [pc, #540]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005c22:	2100      	movs	r1, #0
 8005c24:	2000      	movs	r0, #0
 8005c26:	f006 fa2b 	bl	800c080 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005c2a:	4b82      	ldr	r3, [pc, #520]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	061a      	lsls	r2, r3, #24
 8005c30:	4b80      	ldr	r3, [pc, #512]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c32:	785b      	ldrb	r3, [r3, #1]
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	431a      	orrs	r2, r3
 8005c38:	4b7e      	ldr	r3, [pc, #504]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c3a:	789b      	ldrb	r3, [r3, #2]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	4a7c      	ldr	r2, [pc, #496]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c42:	78d2      	ldrb	r2, [r2, #3]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	061a      	lsls	r2, r3, #24
 8005c48:	4b7a      	ldr	r3, [pc, #488]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	0619      	lsls	r1, r3, #24
 8005c4e:	4b79      	ldr	r3, [pc, #484]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	041b      	lsls	r3, r3, #16
 8005c54:	4319      	orrs	r1, r3
 8005c56:	4b77      	ldr	r3, [pc, #476]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c58:	789b      	ldrb	r3, [r3, #2]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	4975      	ldr	r1, [pc, #468]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c60:	78c9      	ldrb	r1, [r1, #3]
 8005c62:	430b      	orrs	r3, r1
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	4b71      	ldr	r3, [pc, #452]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	0619      	lsls	r1, r3, #24
 8005c72:	4b70      	ldr	r3, [pc, #448]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	4319      	orrs	r1, r3
 8005c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c7c:	789b      	ldrb	r3, [r3, #2]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	430b      	orrs	r3, r1
 8005c82:	496c      	ldr	r1, [pc, #432]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c84:	78c9      	ldrb	r1, [r1, #3]
 8005c86:	430b      	orrs	r3, r1
 8005c88:	0a1b      	lsrs	r3, r3, #8
 8005c8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	4b68      	ldr	r3, [pc, #416]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	0619      	lsls	r1, r3, #24
 8005c96:	4b67      	ldr	r3, [pc, #412]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	4319      	orrs	r1, r3
 8005c9e:	4b65      	ldr	r3, [pc, #404]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005ca0:	789b      	ldrb	r3, [r3, #2]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	4963      	ldr	r1, [pc, #396]	@ (8005e34 <MX_LWIP_Init+0x260>)
 8005ca8:	78c9      	ldrb	r1, [r1, #3]
 8005caa:	430b      	orrs	r3, r1
 8005cac:	0e1b      	lsrs	r3, r3, #24
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	4a63      	ldr	r2, [pc, #396]	@ (8005e40 <MX_LWIP_Init+0x26c>)
 8005cb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005cb4:	4b60      	ldr	r3, [pc, #384]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	061a      	lsls	r2, r3, #24
 8005cba:	4b5f      	ldr	r3, [pc, #380]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cc4:	789b      	ldrb	r3, [r3, #2]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	4a5b      	ldr	r2, [pc, #364]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005ccc:	78d2      	ldrb	r2, [r2, #3]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	061a      	lsls	r2, r3, #24
 8005cd2:	4b59      	ldr	r3, [pc, #356]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	0619      	lsls	r1, r3, #24
 8005cd8:	4b57      	ldr	r3, [pc, #348]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	4319      	orrs	r1, r3
 8005ce0:	4b55      	ldr	r3, [pc, #340]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005ce2:	789b      	ldrb	r3, [r3, #2]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	4953      	ldr	r1, [pc, #332]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cea:	78c9      	ldrb	r1, [r1, #3]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	4b50      	ldr	r3, [pc, #320]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	0619      	lsls	r1, r3, #24
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	4319      	orrs	r1, r3
 8005d04:	4b4c      	ldr	r3, [pc, #304]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d06:	789b      	ldrb	r3, [r3, #2]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	494a      	ldr	r1, [pc, #296]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d0e:	78c9      	ldrb	r1, [r1, #3]
 8005d10:	430b      	orrs	r3, r1
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	4b47      	ldr	r3, [pc, #284]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	0619      	lsls	r1, r3, #24
 8005d20:	4b45      	ldr	r3, [pc, #276]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	4319      	orrs	r1, r3
 8005d28:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d2a:	789b      	ldrb	r3, [r3, #2]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	4941      	ldr	r1, [pc, #260]	@ (8005e38 <MX_LWIP_Init+0x264>)
 8005d32:	78c9      	ldrb	r1, [r1, #3]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	0e1b      	lsrs	r3, r3, #24
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	4a42      	ldr	r2, [pc, #264]	@ (8005e44 <MX_LWIP_Init+0x270>)
 8005d3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	061a      	lsls	r2, r3, #24
 8005d44:	4b3d      	ldr	r3, [pc, #244]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d4e:	789b      	ldrb	r3, [r3, #2]
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	4313      	orrs	r3, r2
 8005d54:	4a39      	ldr	r2, [pc, #228]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d56:	78d2      	ldrb	r2, [r2, #3]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	061a      	lsls	r2, r3, #24
 8005d5c:	4b37      	ldr	r3, [pc, #220]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	0619      	lsls	r1, r3, #24
 8005d62:	4b36      	ldr	r3, [pc, #216]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	041b      	lsls	r3, r3, #16
 8005d68:	4319      	orrs	r1, r3
 8005d6a:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d6c:	789b      	ldrb	r3, [r3, #2]
 8005d6e:	021b      	lsls	r3, r3, #8
 8005d70:	430b      	orrs	r3, r1
 8005d72:	4932      	ldr	r1, [pc, #200]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d74:	78c9      	ldrb	r1, [r1, #3]
 8005d76:	430b      	orrs	r3, r1
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	4b2e      	ldr	r3, [pc, #184]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	0619      	lsls	r1, r3, #24
 8005d86:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	4319      	orrs	r1, r3
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d90:	789b      	ldrb	r3, [r3, #2]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	430b      	orrs	r3, r1
 8005d96:	4929      	ldr	r1, [pc, #164]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005d98:	78c9      	ldrb	r1, [r1, #3]
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	0a1b      	lsrs	r3, r3, #8
 8005d9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005da2:	431a      	orrs	r2, r3
 8005da4:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	0619      	lsls	r1, r3, #24
 8005daa:	4b24      	ldr	r3, [pc, #144]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	4319      	orrs	r1, r3
 8005db2:	4b22      	ldr	r3, [pc, #136]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	430b      	orrs	r3, r1
 8005dba:	4920      	ldr	r1, [pc, #128]	@ (8005e3c <MX_LWIP_Init+0x268>)
 8005dbc:	78c9      	ldrb	r1, [r1, #3]
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	0e1b      	lsrs	r3, r3, #24
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	4a20      	ldr	r2, [pc, #128]	@ (8005e48 <MX_LWIP_Init+0x274>)
 8005dc6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005dc8:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <MX_LWIP_Init+0x278>)
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	4b20      	ldr	r3, [pc, #128]	@ (8005e50 <MX_LWIP_Init+0x27c>)
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e48 <MX_LWIP_Init+0x274>)
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <MX_LWIP_Init+0x270>)
 8005dd8:	4919      	ldr	r1, [pc, #100]	@ (8005e40 <MX_LWIP_Init+0x26c>)
 8005dda:	481e      	ldr	r0, [pc, #120]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005ddc:	f007 fd6a 	bl	800d8b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005de0:	481c      	ldr	r0, [pc, #112]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005de2:	f007 ff19 	bl	800dc18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005de6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005de8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005dec:	089b      	lsrs	r3, r3, #2
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005df8:	4816      	ldr	r0, [pc, #88]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005dfa:	f007 ff1d 	bl	800dc38 <netif_set_up>
 8005dfe:	e002      	b.n	8005e06 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005e00:	4814      	ldr	r0, [pc, #80]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005e02:	f007 ff85 	bl	800dd10 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005e06:	4914      	ldr	r1, [pc, #80]	@ (8005e58 <MX_LWIP_Init+0x284>)
 8005e08:	4812      	ldr	r0, [pc, #72]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005e0a:	f008 f817 	bl	800de3c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005e0e:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <MX_LWIP_Init+0x288>)
 8005e10:	1d3c      	adds	r4, r7, #4
 8005e12:	461d      	mov	r5, r3
 8005e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	490c      	ldr	r1, [pc, #48]	@ (8005e54 <MX_LWIP_Init+0x280>)
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fd47 	bl	80068b8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005e2a:	bf00      	nop
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bdb0      	pop	{r4, r5, r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000628 	.word	0x20000628
 8005e38:	2000062c 	.word	0x2000062c
 8005e3c:	20000630 	.word	0x20000630
 8005e40:	2000061c 	.word	0x2000061c
 8005e44:	20000620 	.word	0x20000620
 8005e48:	20000624 	.word	0x20000624
 8005e4c:	0800bf91 	.word	0x0800bf91
 8005e50:	08006359 	.word	0x08006359
 8005e54:	200005e8 	.word	0x200005e8
 8005e58:	08005e61 	.word	0x08005e61
 8005e5c:	0801986c 	.word	0x0801986c

08005e60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005e86:	2320      	movs	r3, #32
 8005e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e8a:	f3bf 8f4f 	dsb	sy
}
 8005e8e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005e90:	e00b      	b.n	8005eaa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005e92:	4a0d      	ldr	r2, [pc, #52]	@ (8005ec8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	dcf0      	bgt.n	8005e92 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005eb0:	f3bf 8f4f 	dsb	sy
}
 8005eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eb6:	f3bf 8f6f 	isb	sy
}
 8005eba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005ed4:	4b04      	ldr	r3, [pc, #16]	@ (8005ee8 <HAL_ETH_RxCpltCallback+0x1c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fe69 	bl	8006bb0 <osSemaphoreRelease>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20004fc0 	.word	0x20004fc0

08005eec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005ef4:	4b04      	ldr	r3, [pc, #16]	@ (8005f08 <HAL_ETH_TxCpltCallback+0x1c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fe59 	bl	8006bb0 <osSemaphoreRelease>
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20004fc4 	.word	0x20004fc4

08005f0c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fc fbe1 	bl	80026dc <HAL_ETH_GetDMAError>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f20:	2b80      	cmp	r3, #128	@ 0x80
 8005f22:	d104      	bne.n	8005f2e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005f24:	4b04      	ldr	r3, [pc, #16]	@ (8005f38 <HAL_ETH_ErrorCallback+0x2c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 fe41 	bl	8006bb0 <osSemaphoreRelease>
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20004fc0 	.word	0x20004fc0

08005f3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b0a8      	sub	sp, #160	@ 0xa0
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f5a:	2264      	movs	r2, #100	@ 0x64
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f012 fb21 	bl	80185a6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005f64:	4b85      	ldr	r3, [pc, #532]	@ (800617c <low_level_init+0x240>)
 8005f66:	4a86      	ldr	r2, [pc, #536]	@ (8006180 <low_level_init+0x244>)
 8005f68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 8005f70:	2380      	movs	r3, #128	@ 0x80
 8005f72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 8005f76:	23e1      	movs	r3, #225	@ 0xe1
 8005f78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005f8e:	4a7b      	ldr	r2, [pc, #492]	@ (800617c <low_level_init+0x240>)
 8005f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f94:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005f96:	4b79      	ldr	r3, [pc, #484]	@ (800617c <low_level_init+0x240>)
 8005f98:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005f9c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005f9e:	4b77      	ldr	r3, [pc, #476]	@ (800617c <low_level_init+0x240>)
 8005fa0:	4a78      	ldr	r2, [pc, #480]	@ (8006184 <low_level_init+0x248>)
 8005fa2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005fa4:	4b75      	ldr	r3, [pc, #468]	@ (800617c <low_level_init+0x240>)
 8005fa6:	4a78      	ldr	r2, [pc, #480]	@ (8006188 <low_level_init+0x24c>)
 8005fa8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005faa:	4b74      	ldr	r3, [pc, #464]	@ (800617c <low_level_init+0x240>)
 8005fac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005fb0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005fb2:	4872      	ldr	r0, [pc, #456]	@ (800617c <low_level_init+0x240>)
 8005fb4:	f7fb fcf4 	bl	80019a0 <HAL_ETH_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005fbe:	2238      	movs	r2, #56	@ 0x38
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4872      	ldr	r0, [pc, #456]	@ (800618c <low_level_init+0x250>)
 8005fc4:	f012 faef 	bl	80185a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005fc8:	4b70      	ldr	r3, [pc, #448]	@ (800618c <low_level_init+0x250>)
 8005fca:	2221      	movs	r2, #33	@ 0x21
 8005fcc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005fce:	4b6f      	ldr	r3, [pc, #444]	@ (800618c <low_level_init+0x250>)
 8005fd0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005fd4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800618c <low_level_init+0x250>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005fdc:	486c      	ldr	r0, [pc, #432]	@ (8006190 <low_level_init+0x254>)
 8005fde:	f007 fb23 	bl	800d628 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2206      	movs	r2, #6
 8005fe6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005fea:	4b64      	ldr	r3, [pc, #400]	@ (800617c <low_level_init+0x240>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ff6:	4b61      	ldr	r3, [pc, #388]	@ (800617c <low_level_init+0x240>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	785a      	ldrb	r2, [r3, #1]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006002:	4b5e      	ldr	r3, [pc, #376]	@ (800617c <low_level_init+0x240>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	789a      	ldrb	r2, [r3, #2]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800600e:	4b5b      	ldr	r3, [pc, #364]	@ (800617c <low_level_init+0x240>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	78da      	ldrb	r2, [r3, #3]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800601a:	4b58      	ldr	r3, [pc, #352]	@ (800617c <low_level_init+0x240>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	791a      	ldrb	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006026:	4b55      	ldr	r3, [pc, #340]	@ (800617c <low_level_init+0x240>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	795a      	ldrb	r2, [r3, #5]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006038:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006040:	f043 030a 	orr.w	r3, r3, #10
 8006044:	b2da      	uxtb	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800604c:	2203      	movs	r2, #3
 800604e:	2100      	movs	r1, #0
 8006050:	2001      	movs	r0, #1
 8006052:	f001 f8a4 	bl	800719e <xQueueGenericCreate>
 8006056:	4603      	mov	r3, r0
 8006058:	4a4e      	ldr	r2, [pc, #312]	@ (8006194 <low_level_init+0x258>)
 800605a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800605c:	2203      	movs	r2, #3
 800605e:	2100      	movs	r1, #0
 8006060:	2001      	movs	r0, #1
 8006062:	f001 f89c 	bl	800719e <xQueueGenericCreate>
 8006066:	4603      	mov	r3, r0
 8006068:	4a4b      	ldr	r2, [pc, #300]	@ (8006198 <low_level_init+0x25c>)
 800606a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800606c:	4b4b      	ldr	r3, [pc, #300]	@ (800619c <low_level_init+0x260>)
 800606e:	f107 0408 	add.w	r4, r7, #8
 8006072:	461d      	mov	r5, r3
 8006074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800607c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006080:	f107 0308 	add.w	r3, r7, #8
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fc16 	bl	80068b8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800608c:	4944      	ldr	r1, [pc, #272]	@ (80061a0 <low_level_init+0x264>)
 800608e:	4845      	ldr	r0, [pc, #276]	@ (80061a4 <low_level_init+0x268>)
 8006090:	f7fb f9f1 	bl	8001476 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006094:	4843      	ldr	r0, [pc, #268]	@ (80061a4 <low_level_init+0x268>)
 8006096:	f7fb fa20 	bl	80014da <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800609a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d165      	bne.n	800616e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80060a2:	4840      	ldr	r0, [pc, #256]	@ (80061a4 <low_level_init+0x268>)
 80060a4:	f7fb fac1 	bl	800162a <LAN8742_GetLinkState>
 80060a8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80060ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	dc06      	bgt.n	80060c2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f007 fe91 	bl	800dddc <netif_set_link_down>
      netif_set_down(netif);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f007 fe28 	bl	800dd10 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80060c0:	e057      	b.n	8006172 <low_level_init+0x236>
      switch (PHYLinkState)
 80060c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060c6:	3b02      	subs	r3, #2
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d82b      	bhi.n	8006124 <low_level_init+0x1e8>
 80060cc:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <low_level_init+0x198>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060f7 	.word	0x080060f7
 80060dc:	08006107 	.word	0x08006107
 80060e0:	08006117 	.word	0x08006117
        duplex = ETH_FULLDUPLEX_MODE;
 80060e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 80060ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 80060f4:	e01f      	b.n	8006136 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 80060fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8006104:	e017      	b.n	8006136 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800610a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800610e:	2300      	movs	r3, #0
 8006110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8006114:	e00f      	b.n	8006136 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006116:	2300      	movs	r3, #0
 8006118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8006122:	e008      	b.n	8006136 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006124:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800612c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8006134:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800613a:	4619      	mov	r1, r3
 800613c:	480f      	ldr	r0, [pc, #60]	@ (800617c <low_level_init+0x240>)
 800613e:	f7fc f973 	bl	8002428 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006142:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006146:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 8006148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800614c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800614e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006152:	4619      	mov	r1, r3
 8006154:	4809      	ldr	r0, [pc, #36]	@ (800617c <low_level_init+0x240>)
 8006156:	f7fc fa51 	bl	80025fc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800615a:	4808      	ldr	r0, [pc, #32]	@ (800617c <low_level_init+0x240>)
 800615c:	f7fb fcfc 	bl	8001b58 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f007 fd69 	bl	800dc38 <netif_set_up>
    netif_set_link_up(netif);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f007 fe04 	bl	800dd74 <netif_set_link_up>
}
 800616c:	e001      	b.n	8006172 <low_level_init+0x236>
    Error_Handler();
 800616e:	f7fa ff15 	bl	8000f9c <Error_Handler>
}
 8006172:	bf00      	nop
 8006174:	37a0      	adds	r7, #160	@ 0xa0
 8006176:	46bd      	mov	sp, r7
 8006178:	bdb0      	pop	{r4, r5, r7, pc}
 800617a:	bf00      	nop
 800617c:	20004fc8 	.word	0x20004fc8
 8006180:	40028000 	.word	0x40028000
 8006184:	2000012c 	.word	0x2000012c
 8006188:	2000008c 	.word	0x2000008c
 800618c:	20005078 	.word	0x20005078
 8006190:	0801d010 	.word	0x0801d010
 8006194:	20004fc0 	.word	0x20004fc0
 8006198:	20004fc4 	.word	0x20004fc4
 800619c:	08019890 	.word	0x08019890
 80061a0:	2000000c 	.word	0x2000000c
 80061a4:	200050b0 	.word	0x200050b0

080061a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b092      	sub	sp, #72	@ 0x48
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	2230      	movs	r2, #48	@ 0x30
 80061c6:	2100      	movs	r1, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	f012 f9ec 	bl	80185a6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80061ce:	f107 030c 	add.w	r3, r7, #12
 80061d2:	2230      	movs	r2, #48	@ 0x30
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f012 f9e5 	bl	80185a6 <memset>

  for(q = p; q != NULL; q = q->next)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e0:	e045      	b.n	800626e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80061e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d902      	bls.n	80061ee <low_level_output+0x46>
      return ERR_IF;
 80061e8:	f06f 030b 	mvn.w	r3, #11
 80061ec:	e065      	b.n	80062ba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80061ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f0:	6859      	ldr	r1, [r3, #4]
 80061f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3348      	adds	r3, #72	@ 0x48
 80061fe:	443b      	add	r3, r7
 8006200:	3b3c      	subs	r3, #60	@ 0x3c
 8006202:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006206:	895b      	ldrh	r3, [r3, #10]
 8006208:	4619      	mov	r1, r3
 800620a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	3348      	adds	r3, #72	@ 0x48
 8006216:	443b      	add	r3, r7
 8006218:	3b38      	subs	r3, #56	@ 0x38
 800621a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800621c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800621e:	2b00      	cmp	r3, #0
 8006220:	d011      	beq.n	8006246 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006224:	1e5a      	subs	r2, r3, #1
 8006226:	f107 000c 	add.w	r0, r7, #12
 800622a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800622c:	460b      	mov	r3, r1
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	440b      	add	r3, r1
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	18c1      	adds	r1, r0, r3
 8006236:	4613      	mov	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	3348      	adds	r3, #72	@ 0x48
 8006240:	443b      	add	r3, r7
 8006242:	3b34      	subs	r3, #52	@ 0x34
 8006244:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800624e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	3348      	adds	r3, #72	@ 0x48
 800625a:	443b      	add	r3, r7
 800625c:	3b34      	subs	r3, #52	@ 0x34
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006264:	3301      	adds	r3, #1
 8006266:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
 800626e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1b6      	bne.n	80061e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	891b      	ldrh	r3, [r3, #8]
 8006278:	461a      	mov	r2, r3
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <low_level_output+0x11c>)
 800627c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800627e:	4a11      	ldr	r2, [pc, #68]	@ (80062c4 <low_level_output+0x11c>)
 8006280:	f107 030c 	add.w	r3, r7, #12
 8006284:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006286:	4a0f      	ldr	r2, [pc, #60]	@ (80062c4 <low_level_output+0x11c>)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800628c:	6838      	ldr	r0, [r7, #0]
 800628e:	f008 fa29 	bl	800e6e4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006292:	490c      	ldr	r1, [pc, #48]	@ (80062c4 <low_level_output+0x11c>)
 8006294:	480c      	ldr	r0, [pc, #48]	@ (80062c8 <low_level_output+0x120>)
 8006296:	f7fb fd6d 	bl	8001d74 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800629a:	bf00      	nop
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <low_level_output+0x124>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f04f 31ff 	mov.w	r1, #4294967295
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fc35 	bl	8006b14 <osSemaphoreWait>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f5      	bne.n	800629c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80062b0:	4805      	ldr	r0, [pc, #20]	@ (80062c8 <low_level_output+0x120>)
 80062b2:	f7fb fef3 	bl	800209c <HAL_ETH_ReleaseTxPacket>

  return errval;
 80062b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3748      	adds	r7, #72	@ 0x48
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20005078 	.word	0x20005078
 80062c8:	20004fc8 	.word	0x20004fc8
 80062cc:	20004fc4 	.word	0x20004fc4

080062d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <low_level_input+0x2c>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	4619      	mov	r1, r3
 80062ea:	4805      	ldr	r0, [pc, #20]	@ (8006300 <low_level_input+0x30>)
 80062ec:	f7fb fd9e 	bl	8001e2c <HAL_ETH_ReadData>
  }

  return p;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20004fbc 	.word	0x20004fbc
 8006300:	20004fc8 	.word	0x20004fc8

08006304 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <ethernetif_input+0x50>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f04f 31ff 	mov.w	r1, #4294967295
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fbf9 	bl	8006b14 <osSemaphoreWait>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f5      	bne.n	8006314 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006328:	68b8      	ldr	r0, [r7, #8]
 800632a:	f7ff ffd1 	bl	80062d0 <low_level_input>
 800632e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	4798      	blx	r3
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f008 f926 	bl	800e598 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ea      	bne.n	8006328 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006352:	e7df      	b.n	8006314 <ethernetif_input+0x10>
 8006354:	20004fc0 	.word	0x20004fc0

08006358 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <ethernetif_init+0x1c>
 8006366:	4b0e      	ldr	r3, [pc, #56]	@ (80063a0 <ethernetif_init+0x48>)
 8006368:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800636c:	490d      	ldr	r1, [pc, #52]	@ (80063a4 <ethernetif_init+0x4c>)
 800636e:	480e      	ldr	r0, [pc, #56]	@ (80063a8 <ethernetif_init+0x50>)
 8006370:	f012 f87a 	bl	8018468 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2273      	movs	r2, #115	@ 0x73
 8006378:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2274      	movs	r2, #116	@ 0x74
 8006380:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a09      	ldr	r2, [pc, #36]	@ (80063ac <ethernetif_init+0x54>)
 8006388:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a08      	ldr	r2, [pc, #32]	@ (80063b0 <ethernetif_init+0x58>)
 800638e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fdd3 	bl	8005f3c <low_level_init>

  return ERR_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	080198ac 	.word	0x080198ac
 80063a4:	080198c8 	.word	0x080198c8
 80063a8:	080198d8 	.word	0x080198d8
 80063ac:	080161b1 	.word	0x080161b1
 80063b0:	080061a9 	.word	0x080061a9

080063b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	4809      	ldr	r0, [pc, #36]	@ (80063e8 <pbuf_free_custom+0x34>)
 80063c4:	f007 fa20 	bl	800d808 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80063c8:	4b08      	ldr	r3, [pc, #32]	@ (80063ec <pbuf_free_custom+0x38>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80063d0:	4b06      	ldr	r3, [pc, #24]	@ (80063ec <pbuf_free_custom+0x38>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80063d6:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <pbuf_free_custom+0x3c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fbe8 	bl	8006bb0 <osSemaphoreRelease>
  }
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	0801d010 	.word	0x0801d010
 80063ec:	20004fbc 	.word	0x20004fbc
 80063f0:	20004fc0 	.word	0x20004fc0

080063f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80063f8:	f7fb f9c0 	bl	800177c <HAL_GetTick>
 80063fc:	4603      	mov	r3, r0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08e      	sub	sp, #56	@ 0x38
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800640c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	609a      	str	r2, [r3, #8]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a52      	ldr	r2, [pc, #328]	@ (800656c <HAL_ETH_MspInit+0x168>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f040 809e 	bne.w	8006564 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006428:	4b51      	ldr	r3, [pc, #324]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	4a50      	ldr	r2, [pc, #320]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800642e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006432:	6313      	str	r3, [r2, #48]	@ 0x30
 8006434:	4b4e      	ldr	r3, [pc, #312]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	4b4b      	ldr	r3, [pc, #300]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	4a4a      	ldr	r2, [pc, #296]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006446:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800644a:	6313      	str	r3, [r2, #48]	@ 0x30
 800644c:	4b48      	ldr	r3, [pc, #288]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4b45      	ldr	r3, [pc, #276]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	4a44      	ldr	r2, [pc, #272]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800645e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006462:	6313      	str	r3, [r2, #48]	@ 0x30
 8006464:	4b42      	ldr	r3, [pc, #264]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006470:	4b3f      	ldr	r3, [pc, #252]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006474:	4a3e      	ldr	r2, [pc, #248]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006476:	f043 0304 	orr.w	r3, r3, #4
 800647a:	6313      	str	r3, [r2, #48]	@ 0x30
 800647c:	4b3c      	ldr	r3, [pc, #240]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006488:	4b39      	ldr	r3, [pc, #228]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648c:	4a38      	ldr	r2, [pc, #224]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	6313      	str	r3, [r2, #48]	@ 0x30
 8006494:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064a0:	4b33      	ldr	r3, [pc, #204]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a4:	4a32      	ldr	r2, [pc, #200]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064a6:	f043 0302 	orr.w	r3, r3, #2
 80064aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80064ac:	4b30      	ldr	r3, [pc, #192]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80064b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80064c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006570 <HAL_ETH_MspInit+0x16c>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80064d0:	2332      	movs	r3, #50	@ 0x32
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d4:	2302      	movs	r3, #2
 80064d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064dc:	2303      	movs	r3, #3
 80064de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064e0:	230b      	movs	r3, #11
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064e8:	4619      	mov	r1, r3
 80064ea:	4822      	ldr	r0, [pc, #136]	@ (8006574 <HAL_ETH_MspInit+0x170>)
 80064ec:	f7fc fd06 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80064f0:	2386      	movs	r3, #134	@ 0x86
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f4:	2302      	movs	r3, #2
 80064f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064fc:	2303      	movs	r3, #3
 80064fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006500:	230b      	movs	r3, #11
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006508:	4619      	mov	r1, r3
 800650a:	481b      	ldr	r0, [pc, #108]	@ (8006578 <HAL_ETH_MspInit+0x174>)
 800650c:	f7fc fcf6 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006514:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006516:	2302      	movs	r3, #2
 8006518:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651a:	2300      	movs	r3, #0
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800651e:	2303      	movs	r3, #3
 8006520:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006522:	230b      	movs	r3, #11
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800652a:	4619      	mov	r1, r3
 800652c:	4813      	ldr	r0, [pc, #76]	@ (800657c <HAL_ETH_MspInit+0x178>)
 800652e:	f7fc fce5 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006532:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006538:	2302      	movs	r3, #2
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800653c:	2300      	movs	r3, #0
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006540:	2303      	movs	r3, #3
 8006542:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006544:	230b      	movs	r3, #11
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800654c:	4619      	mov	r1, r3
 800654e:	480c      	ldr	r0, [pc, #48]	@ (8006580 <HAL_ETH_MspInit+0x17c>)
 8006550:	f7fc fcd4 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006554:	2200      	movs	r2, #0
 8006556:	2105      	movs	r1, #5
 8006558:	203d      	movs	r0, #61	@ 0x3d
 800655a:	f7fb f9f7 	bl	800194c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800655e:	203d      	movs	r0, #61	@ 0x3d
 8006560:	f7fb fa10 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006564:	bf00      	nop
 8006566:	3738      	adds	r7, #56	@ 0x38
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40028000 	.word	0x40028000
 8006570:	40023800 	.word	0x40023800
 8006574:	40020800 	.word	0x40020800
 8006578:	40020000 	.word	0x40020000
 800657c:	40020400 	.word	0x40020400
 8006580:	40021800 	.word	0x40021800

08006584 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006588:	4802      	ldr	r0, [pc, #8]	@ (8006594 <ETH_PHY_IO_Init+0x10>)
 800658a:	f7fc f851 	bl	8002630 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20004fc8 	.word	0x20004fc8

08006598 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  return 0;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	4807      	ldr	r0, [pc, #28]	@ (80065d8 <ETH_PHY_IO_ReadReg+0x30>)
 80065bc:	f7fb fea0 	bl	8002300 <HAL_ETH_ReadPHYRegister>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e000      	b.n	80065ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20004fc8 	.word	0x20004fc8

080065dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	68f9      	ldr	r1, [r7, #12]
 80065ee:	4807      	ldr	r0, [pc, #28]	@ (800660c <ETH_PHY_IO_WriteReg+0x30>)
 80065f0:	f7fb fed1 	bl	8002396 <HAL_ETH_WritePHYRegister>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	e000      	b.n	8006602 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20004fc8 	.word	0x20004fc8

08006610 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006614:	f7fb f8b2 	bl	800177c <HAL_GetTick>
 8006618:	4603      	mov	r3, r0
}
 800661a:	4618      	mov	r0, r3
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b0a0      	sub	sp, #128	@ 0x80
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	2264      	movs	r2, #100	@ 0x64
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f011 ffb8 	bl	80185a6 <memset>
  int32_t PHYLinkState = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800663e:	2300      	movs	r3, #0
 8006640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006642:	2300      	movs	r3, #0
 8006644:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800664a:	483a      	ldr	r0, [pc, #232]	@ (8006734 <ethernet_link_thread+0x114>)
 800664c:	f7fa ffed 	bl	800162a <LAN8742_GetLinkState>
 8006650:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006658:	089b      	lsrs	r3, r3, #2
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <ethernet_link_thread+0x5e>
 8006664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006666:	2b01      	cmp	r3, #1
 8006668:	dc09      	bgt.n	800667e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800666a:	4833      	ldr	r0, [pc, #204]	@ (8006738 <ethernet_link_thread+0x118>)
 800666c:	f7fb fb02 	bl	8001c74 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006670:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006672:	f007 fb4d 	bl	800dd10 <netif_set_down>
    netif_set_link_down(netif);
 8006676:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006678:	f007 fbb0 	bl	800dddc <netif_set_link_down>
 800667c:	e055      	b.n	800672a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800667e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006680:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d14e      	bne.n	800672a <ethernet_link_thread+0x10a>
 800668c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800668e:	2b01      	cmp	r3, #1
 8006690:	dd4b      	ble.n	800672a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006694:	3b02      	subs	r3, #2
 8006696:	2b03      	cmp	r3, #3
 8006698:	d82a      	bhi.n	80066f0 <ethernet_link_thread+0xd0>
 800669a:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <ethernet_link_thread+0x80>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066c3 	.word	0x080066c3
 80066a8:	080066d3 	.word	0x080066d3
 80066ac:	080066e3 	.word	0x080066e3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80066b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80066b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80066ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80066bc:	2301      	movs	r3, #1
 80066be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80066c0:	e017      	b.n	80066f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80066c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80066ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80066d0:	e00f      	b.n	80066f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80066d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80066d6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80066d8:	2300      	movs	r3, #0
 80066da:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80066dc:	2301      	movs	r3, #1
 80066de:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80066e0:	e007      	b.n	80066f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80066e6:	2300      	movs	r3, #0
 80066e8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80066ee:	e000      	b.n	80066f2 <ethernet_link_thread+0xd2>
    default:
      break;
 80066f0:	bf00      	nop
    }

    if(linkchanged)
 80066f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d018      	beq.n	800672a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	4619      	mov	r1, r3
 80066fe:	480e      	ldr	r0, [pc, #56]	@ (8006738 <ethernet_link_thread+0x118>)
 8006700:	f7fb fe92 	bl	8002428 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006706:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800670a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800670c:	f107 0308 	add.w	r3, r7, #8
 8006710:	4619      	mov	r1, r3
 8006712:	4809      	ldr	r0, [pc, #36]	@ (8006738 <ethernet_link_thread+0x118>)
 8006714:	f7fb ff72 	bl	80025fc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006718:	4807      	ldr	r0, [pc, #28]	@ (8006738 <ethernet_link_thread+0x118>)
 800671a:	f7fb f9bd 	bl	8001a98 <HAL_ETH_Start>
      netif_set_up(netif);
 800671e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006720:	f007 fa8a 	bl	800dc38 <netif_set_up>
      netif_set_link_up(netif);
 8006724:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006726:	f007 fb25 	bl	800dd74 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800672a:	2064      	movs	r0, #100	@ 0x64
 800672c:	f000 f910 	bl	8006950 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006730:	e78b      	b.n	800664a <ethernet_link_thread+0x2a>
 8006732:	bf00      	nop
 8006734:	200050b0 	.word	0x200050b0
 8006738:	20004fc8 	.word	0x20004fc8

0800673c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006744:	4812      	ldr	r0, [pc, #72]	@ (8006790 <HAL_ETH_RxAllocateCallback+0x54>)
 8006746:	f006 ffeb 	bl	800d720 <memp_malloc_pool>
 800674a:	60f8      	str	r0, [r7, #12]
  if (p)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d014      	beq.n	800677c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f103 0220 	add.w	r2, r3, #32
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4a0d      	ldr	r2, [pc, #52]	@ (8006794 <HAL_ETH_RxAllocateCallback+0x58>)
 8006760:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800676a:	9201      	str	r2, [sp, #4]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2241      	movs	r2, #65	@ 0x41
 8006772:	2100      	movs	r1, #0
 8006774:	2000      	movs	r0, #0
 8006776:	f007 fd55 	bl	800e224 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800677a:	e005      	b.n	8006788 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <HAL_ETH_RxAllocateCallback+0x5c>)
 800677e:	2201      	movs	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
}
 8006788:	bf00      	nop
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	0801d010 	.word	0x0801d010
 8006794:	080063b5 	.word	0x080063b5
 8006798:	20004fbc 	.word	0x20004fbc

0800679c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3b20      	subs	r3, #32
 80067ba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2200      	movs	r2, #0
 80067c6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e003      	b.n	80067e6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e009      	b.n	8006808 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	891a      	ldrh	r2, [r3, #8]
 80067f8:	887b      	ldrh	r3, [r7, #2]
 80067fa:	4413      	add	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f2      	bne.n	80067f4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fb2e 	bl	8005e74 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f007 feb5 	bl	800e598 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	4603      	mov	r3, r0
 800683e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006848:	2b84      	cmp	r3, #132	@ 0x84
 800684a:	d005      	beq.n	8006858 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800684c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	3303      	adds	r3, #3
 8006856:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800686c:	f3ef 8305 	mrs	r3, IPSR
 8006870:	607b      	str	r3, [r7, #4]
  return(result);
 8006872:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006874:	2b00      	cmp	r3, #0
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800688e:	f001 fdad 	bl	80083ec <vTaskStartScheduler>
  
  return osOK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}

08006898 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800689c:	f7ff ffe3 	bl	8006866 <inHandlerMode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80068a6:	f001 fecd 	bl	8008644 <xTaskGetTickCountFromISR>
 80068aa:	4603      	mov	r3, r0
 80068ac:	e002      	b.n	80068b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80068ae:	f001 feb9 	bl	8008624 <xTaskGetTickCount>
 80068b2:	4603      	mov	r3, r0
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ba:	b089      	sub	sp, #36	@ 0x24
 80068bc:	af04      	add	r7, sp, #16
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d020      	beq.n	800690c <osThreadCreate+0x54>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01c      	beq.n	800690c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685c      	ldr	r4, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691e      	ldr	r6, [r3, #16]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ffa6 	bl	8006836 <makeFreeRtosPriority>
 80068ea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068f4:	9202      	str	r2, [sp, #8]
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	9100      	str	r1, [sp, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	4632      	mov	r2, r6
 80068fe:	4629      	mov	r1, r5
 8006900:	4620      	mov	r0, r4
 8006902:	f001 fb83 	bl	800800c <xTaskCreateStatic>
 8006906:	4603      	mov	r3, r0
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e01c      	b.n	8006946 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685c      	ldr	r4, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006918:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff ff88 	bl	8006836 <makeFreeRtosPriority>
 8006926:	4602      	mov	r2, r0
 8006928:	f107 030c 	add.w	r3, r7, #12
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	9200      	str	r2, [sp, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	4632      	mov	r2, r6
 8006934:	4629      	mov	r1, r5
 8006936:	4620      	mov	r0, r4
 8006938:	f001 fbce 	bl	80080d8 <xTaskCreate>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d001      	beq.n	8006946 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	e000      	b.n	8006948 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006950 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <osDelay+0x16>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	e000      	b.n	8006968 <osDelay+0x18>
 8006966:	2301      	movs	r3, #1
 8006968:	4618      	mov	r0, r3
 800696a:	f001 fd07 	bl	800837c <vTaskDelay>
  
  return osOK;
 800696e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4619      	mov	r1, r3
 800698e:	2001      	movs	r0, #1
 8006990:	f000 fc99 	bl	80072c6 <xQueueCreateMutexStatic>
 8006994:	4603      	mov	r3, r0
 8006996:	e003      	b.n	80069a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006998:	2001      	movs	r0, #1
 800699a:	f000 fc7c 	bl	8007296 <xQueueCreateMutex>
 800699e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <osMutexWait+0x18>
    return osErrorParameter;
 80069bc:	2380      	movs	r3, #128	@ 0x80
 80069be:	e03a      	b.n	8006a36 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d103      	bne.n	80069d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e009      	b.n	80069e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <osMutexWait+0x40>
      ticks = 1;
 80069e4:	2301      	movs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80069e8:	f7ff ff3d 	bl	8006866 <inHandlerMode>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d017      	beq.n	8006a22 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80069f2:	f107 0308 	add.w	r3, r7, #8
 80069f6:	461a      	mov	r2, r3
 80069f8:	2100      	movs	r1, #0
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f001 f8c4 	bl	8007b88 <xQueueReceiveFromISR>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <osMutexWait+0x62>
      return osErrorOS;
 8006a06:	23ff      	movs	r3, #255	@ 0xff
 8006a08:	e015      	b.n	8006a36 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d011      	beq.n	8006a34 <osMutexWait+0x8c>
 8006a10:	4b0b      	ldr	r3, [pc, #44]	@ (8006a40 <osMutexWait+0x98>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	e008      	b.n	8006a34 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 ff97 	bl	8007958 <xQueueSemaphoreTake>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d001      	beq.n	8006a34 <osMutexWait+0x8c>
    return osErrorOS;
 8006a30:	23ff      	movs	r3, #255	@ 0xff
 8006a32:	e000      	b.n	8006a36 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006a54:	f7ff ff07 	bl	8006866 <inHandlerMode>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d016      	beq.n	8006a8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a5e:	f107 0308 	add.w	r3, r7, #8
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fdf6 	bl	8007656 <xQueueGiveFromISR>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d001      	beq.n	8006a74 <osMutexRelease+0x30>
      return osErrorOS;
 8006a70:	23ff      	movs	r3, #255	@ 0xff
 8006a72:	e017      	b.n	8006aa4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d013      	beq.n	8006aa2 <osMutexRelease+0x5e>
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006aac <osMutexRelease+0x68>)
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	e00a      	b.n	8006aa2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2100      	movs	r1, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc32 	bl	80072fc <xQueueGenericSend>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d001      	beq.n	8006aa2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006a9e:	23ff      	movs	r3, #255	@ 0xff
 8006aa0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00f      	beq.n	8006ae2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10a      	bne.n	8006ade <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2203      	movs	r2, #3
 8006ace:	9200      	str	r2, [sp, #0]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	f000 fadb 	bl	8007090 <xQueueGenericCreateStatic>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e016      	b.n	8006b0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e014      	b.n	8006b0c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d110      	bne.n	8006b0a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006ae8:	2203      	movs	r2, #3
 8006aea:	2100      	movs	r1, #0
 8006aec:	2001      	movs	r0, #1
 8006aee:	f000 fb56 	bl	800719e <xQueueGenericCreate>
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <osSemaphoreCreate+0x56>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2200      	movs	r2, #0
 8006afe:	2100      	movs	r1, #0
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fbfb 	bl	80072fc <xQueueGenericSend>
      return sema;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e000      	b.n	8006b0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006b0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006b28:	2380      	movs	r3, #128	@ 0x80
 8006b2a:	e03a      	b.n	8006ba2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d103      	bne.n	8006b40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	e009      	b.n	8006b54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <osSemaphoreWait+0x40>
      ticks = 1;
 8006b50:	2301      	movs	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b54:	f7ff fe87 	bl	8006866 <inHandlerMode>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d017      	beq.n	8006b8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	461a      	mov	r2, r3
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 f80e 	bl	8007b88 <xQueueReceiveFromISR>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006b72:	23ff      	movs	r3, #255	@ 0xff
 8006b74:	e015      	b.n	8006ba2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d011      	beq.n	8006ba0 <osSemaphoreWait+0x8c>
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bac <osSemaphoreWait+0x98>)
 8006b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	e008      	b.n	8006ba0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fee1 	bl	8007958 <xQueueSemaphoreTake>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006b9c:	23ff      	movs	r3, #255	@ 0xff
 8006b9e:	e000      	b.n	8006ba2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006bc0:	f7ff fe51 	bl	8006866 <inHandlerMode>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006bca:	f107 0308 	add.w	r3, r7, #8
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd40 	bl	8007656 <xQueueGiveFromISR>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006bdc:	23ff      	movs	r3, #255	@ 0xff
 8006bde:	e017      	b.n	8006c10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d013      	beq.n	8006c0e <osSemaphoreRelease+0x5e>
 8006be6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <osSemaphoreRelease+0x68>)
 8006be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	e00a      	b.n	8006c0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb7c 	bl	80072fc <xQueueGenericSend>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006c0a:	23ff      	movs	r3, #255	@ 0xff
 8006c0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006c24:	f7ff fe1f 	bl	8006866 <inHandlerMode>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006c2e:	2382      	movs	r3, #130	@ 0x82
 8006c30:	e003      	b.n	8006c3a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f872 	bl	8007d1c <vQueueDelete>

  return osOK; 
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c42:	b590      	push	{r4, r7, lr}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d011      	beq.n	8006c78 <osMessageCreate+0x36>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6859      	ldr	r1, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2400      	movs	r4, #0
 8006c6e:	9400      	str	r4, [sp, #0]
 8006c70:	f000 fa0e 	bl	8007090 <xQueueGenericCreateStatic>
 8006c74:	4603      	mov	r3, r0
 8006c76:	e008      	b.n	8006c8a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	4619      	mov	r1, r3
 8006c84:	f000 fa8b 	bl	800719e <xQueueGenericCreate>
 8006c88:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}
	...

08006c94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <osMessagePut+0x1e>
    ticks = 1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006cb2:	f7ff fdd8 	bl	8006866 <inHandlerMode>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d018      	beq.n	8006cee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006cbc:	f107 0210 	add.w	r2, r7, #16
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fc22 	bl	8007510 <xQueueGenericSendFromISR>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <osMessagePut+0x42>
      return osErrorOS;
 8006cd2:	23ff      	movs	r3, #255	@ 0xff
 8006cd4:	e018      	b.n	8006d08 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d014      	beq.n	8006d06 <osMessagePut+0x72>
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <osMessagePut+0x7c>)
 8006cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	e00b      	b.n	8006d06 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006cee:	f107 0108 	add.w	r1, r7, #8
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fb00 	bl	80072fc <xQueueGenericSend>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d001      	beq.n	8006d06 <osMessagePut+0x72>
      return osErrorOS;
 8006d02:	23ff      	movs	r3, #255	@ 0xff
 8006d04:	e000      	b.n	8006d08 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b08b      	sub	sp, #44	@ 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006d2e:	2380      	movs	r3, #128	@ 0x80
 8006d30:	617b      	str	r3, [r7, #20]
    return event;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	461c      	mov	r4, r3
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d42:	e054      	b.n	8006dee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d103      	bne.n	8006d5c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5a:	e009      	b.n	8006d70 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <osMessageGet+0x5c>
      ticks = 1;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006d70:	f7ff fd79 	bl	8006866 <inHandlerMode>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01c      	beq.n	8006db4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006d7a:	f107 0220 	add.w	r2, r7, #32
 8006d7e:	f107 0314 	add.w	r3, r7, #20
 8006d82:	3304      	adds	r3, #4
 8006d84:	4619      	mov	r1, r3
 8006d86:	68b8      	ldr	r0, [r7, #8]
 8006d88:	f000 fefe 	bl	8007b88 <xQueueReceiveFromISR>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d102      	bne.n	8006d98 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006d92:	2310      	movs	r3, #16
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e001      	b.n	8006d9c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01d      	beq.n	8006dde <osMessageGet+0xca>
 8006da2:	4b15      	ldr	r3, [pc, #84]	@ (8006df8 <osMessageGet+0xe4>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	e014      	b.n	8006dde <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006db4:	f107 0314 	add.w	r3, r7, #20
 8006db8:	3304      	adds	r3, #4
 8006dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68b8      	ldr	r0, [r7, #8]
 8006dc0:	f000 fce2 	bl	8007788 <xQueueReceive>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d102      	bne.n	8006dd0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006dca:	2310      	movs	r3, #16
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e006      	b.n	8006dde <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <osMessageGet+0xc6>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <osMessageGet+0xc8>
 8006dda:	2340      	movs	r3, #64	@ 0x40
 8006ddc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	461c      	mov	r4, r3
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	372c      	adds	r7, #44	@ 0x2c
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd90      	pop	{r4, r7, pc}
 8006df6:	bf00      	nop
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006e04:	f7ff fd2f 	bl	8006866 <inHandlerMode>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 ff63 	bl	8007cda <uxQueueMessagesWaitingFromISR>
 8006e14:	4603      	mov	r3, r0
 8006e16:	e003      	b.n	8006e20 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 ff3d 	bl	8007c98 <uxQueueMessagesWaiting>
 8006e1e:	4603      	mov	r3, r0
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006e30:	f7ff fd19 	bl	8006866 <inHandlerMode>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <osMessageDelete+0x16>
    return osErrorISR;
 8006e3a:	2382      	movs	r3, #130	@ 0x82
 8006e3c:	e003      	b.n	8006e46 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 ff6c 	bl	8007d1c <vQueueDelete>

  return osOK; 
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f103 0208 	add.w	r2, r3, #8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f04f 32ff 	mov.w	r2, #4294967295
 8006e66:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f103 0208 	add.w	r2, r3, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f103 0208 	add.w	r2, r3, #8
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f06:	d103      	bne.n	8006f10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e00c      	b.n	8006f2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3308      	adds	r3, #8
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e002      	b.n	8006f1e <vListInsert+0x2e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d2f6      	bcs.n	8006f18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6892      	ldr	r2, [r2, #8]
 8006f78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6852      	ldr	r2, [r2, #4]
 8006f82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d103      	bne.n	8006f96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10d      	bne.n	8006fe8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fe2:	bf00      	nop
 8006fe4:	bf00      	nop
 8006fe6:	e7fd      	b.n	8006fe4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006fe8:	f002 f9a8 	bl	800933c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	441a      	add	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007018:	3b01      	subs	r3, #1
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	441a      	add	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	22ff      	movs	r2, #255	@ 0xff
 800702c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	22ff      	movs	r2, #255	@ 0xff
 8007034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d114      	bne.n	8007068 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01a      	beq.n	800707c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3310      	adds	r3, #16
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fc56 	bl	80088fc <xTaskRemoveFromEventList>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d012      	beq.n	800707c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <xQueueGenericReset+0xd4>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e009      	b.n	800707c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3310      	adds	r3, #16
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff feee 	bl	8006e4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3324      	adds	r3, #36	@ 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fee9 	bl	8006e4e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800707c:	f002 f994 	bl	80093a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007080:	2301      	movs	r3, #1
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	@ 0x38
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10d      	bne.n	80070c0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	b672      	cpsid	i
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	b662      	cpsie	i
 80070b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10d      	bne.n	80070e2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	b672      	cpsid	i
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	b662      	cpsie	i
 80070da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <xQueueGenericCreateStatic+0x5e>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <xQueueGenericCreateStatic+0x62>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <xQueueGenericCreateStatic+0x64>
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10d      	bne.n	8007114 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	b672      	cpsid	i
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	b662      	cpsie	i
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d102      	bne.n	8007120 <xQueueGenericCreateStatic+0x90>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <xQueueGenericCreateStatic+0x94>
 8007120:	2301      	movs	r3, #1
 8007122:	e000      	b.n	8007126 <xQueueGenericCreateStatic+0x96>
 8007124:	2300      	movs	r3, #0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712e:	b672      	cpsid	i
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	b662      	cpsie	i
 800713e:	61fb      	str	r3, [r7, #28]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007146:	2348      	movs	r3, #72	@ 0x48
 8007148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b48      	cmp	r3, #72	@ 0x48
 800714e:	d00d      	beq.n	800716c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	61bb      	str	r3, [r7, #24]
}
 8007166:	bf00      	nop
 8007168:	bf00      	nop
 800716a:	e7fd      	b.n	8007168 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800716c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007180:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4613      	mov	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f848 	bl	8007224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007196:	4618      	mov	r0, r3
 8007198:	3730      	adds	r7, #48	@ 0x30
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b08a      	sub	sp, #40	@ 0x28
 80071a2:	af02      	add	r7, sp, #8
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	4613      	mov	r3, r2
 80071aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <xQueueGenericCreate+0x30>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	613b      	str	r3, [r7, #16]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	e004      	b.n	80071e4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	fb02 f303 	mul.w	r3, r2, r3
 80071e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3348      	adds	r3, #72	@ 0x48
 80071e8:	4618      	mov	r0, r3
 80071ea:	f002 f9d5 	bl	8009598 <pvPortMalloc>
 80071ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d011      	beq.n	800721a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	3348      	adds	r3, #72	@ 0x48
 80071fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007208:	79fa      	ldrb	r2, [r7, #7]
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f805 	bl	8007224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800721a:	69bb      	ldr	r3, [r7, #24]
	}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d103      	bne.n	8007240 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e002      	b.n	8007246 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007252:	2101      	movs	r1, #1
 8007254:	69b8      	ldr	r0, [r7, #24]
 8007256:	f7ff feaf 	bl	8006fb8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00e      	beq.n	800728e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007282:	2300      	movs	r3, #0
 8007284:	2200      	movs	r2, #0
 8007286:	2100      	movs	r1, #0
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f837 	bl	80072fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	4603      	mov	r3, r0
 800729e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6939      	ldr	r1, [r7, #16]
 80072ae:	6978      	ldr	r0, [r7, #20]
 80072b0:	f7ff ff75 	bl	800719e <xQueueGenericCreate>
 80072b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff ffd3 	bl	8007262 <prvInitialiseMutex>

		return xNewQueue;
 80072bc:	68fb      	ldr	r3, [r7, #12]
	}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af02      	add	r7, sp, #8
 80072cc:	4603      	mov	r3, r0
 80072ce:	6039      	str	r1, [r7, #0]
 80072d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	2300      	movs	r3, #0
 80072d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2200      	movs	r2, #0
 80072e2:	6939      	ldr	r1, [r7, #16]
 80072e4:	6978      	ldr	r0, [r7, #20]
 80072e6:	f7ff fed3 	bl	8007090 <xQueueGenericCreateStatic>
 80072ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff ffb8 	bl	8007262 <prvInitialiseMutex>

		return xNewQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	@ 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10d      	bne.n	8007334 <xQueueGenericSend+0x38>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731c:	b672      	cpsid	i
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	b662      	cpsie	i
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	e7fd      	b.n	8007330 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <xQueueGenericSend+0x46>
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueGenericSend+0x4a>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueGenericSend+0x4c>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10d      	bne.n	8007368 <xQueueGenericSend+0x6c>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d103      	bne.n	8007376 <xQueueGenericSend+0x7a>
 800736e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <xQueueGenericSend+0x7e>
 8007376:	2301      	movs	r3, #1
 8007378:	e000      	b.n	800737c <xQueueGenericSend+0x80>
 800737a:	2300      	movs	r3, #0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10d      	bne.n	800739c <xQueueGenericSend+0xa0>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	b672      	cpsid	i
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	b662      	cpsie	i
 8007394:	623b      	str	r3, [r7, #32]
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800739c:	f001 fc7c 	bl	8008c98 <xTaskGetSchedulerState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d102      	bne.n	80073ac <xQueueGenericSend+0xb0>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <xQueueGenericSend+0xb4>
 80073ac:	2301      	movs	r3, #1
 80073ae:	e000      	b.n	80073b2 <xQueueGenericSend+0xb6>
 80073b0:	2300      	movs	r3, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10d      	bne.n	80073d2 <xQueueGenericSend+0xd6>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ba:	b672      	cpsid	i
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	b662      	cpsie	i
 80073ca:	61fb      	str	r3, [r7, #28]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073d2:	f001 ffb3 	bl	800933c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073de:	429a      	cmp	r2, r3
 80073e0:	d302      	bcc.n	80073e8 <xQueueGenericSend+0xec>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d129      	bne.n	800743c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ee:	f000 fcd3 	bl	8007d98 <prvCopyDataToQueue>
 80073f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d010      	beq.n	800741e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	3324      	adds	r3, #36	@ 0x24
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fa7b 	bl	80088fc <xTaskRemoveFromEventList>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d013      	beq.n	8007434 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800740c:	4b3f      	ldr	r3, [pc, #252]	@ (800750c <xQueueGenericSend+0x210>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	e00a      	b.n	8007434 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800741e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007424:	4b39      	ldr	r3, [pc, #228]	@ (800750c <xQueueGenericSend+0x210>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007434:	f001 ffb8 	bl	80093a8 <vPortExitCritical>
				return pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	e063      	b.n	8007504 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007442:	f001 ffb1 	bl	80093a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007446:	2300      	movs	r3, #0
 8007448:	e05c      	b.n	8007504 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800744a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744c:	2b00      	cmp	r3, #0
 800744e:	d106      	bne.n	800745e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fab7 	bl	80089c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800745a:	2301      	movs	r3, #1
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800745e:	f001 ffa3 	bl	80093a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007462:	f001 f831 	bl	80084c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007466:	f001 ff69 	bl	800933c <vPortEnterCritical>
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007470:	b25b      	sxtb	r3, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d103      	bne.n	8007480 <xQueueGenericSend+0x184>
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007486:	b25b      	sxtb	r3, r3
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d103      	bne.n	8007496 <xQueueGenericSend+0x19a>
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007496:	f001 ff87 	bl	80093a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800749a:	1d3a      	adds	r2, r7, #4
 800749c:	f107 0314 	add.w	r3, r7, #20
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 faa6 	bl	80089f4 <xTaskCheckForTimeOut>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d124      	bne.n	80074f8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b0:	f000 fd6a 	bl	8007f88 <prvIsQueueFull>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d018      	beq.n	80074ec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	3310      	adds	r3, #16
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 f9f2 	bl	80088ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ca:	f000 fcf5 	bl	8007eb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074ce:	f001 f809 	bl	80084e4 <xTaskResumeAll>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f47f af7c 	bne.w	80073d2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80074da:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <xQueueGenericSend+0x210>)
 80074dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	e772      	b.n	80073d2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ee:	f000 fce3 	bl	8007eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074f2:	f000 fff7 	bl	80084e4 <xTaskResumeAll>
 80074f6:	e76c      	b.n	80073d2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074fa:	f000 fcdd 	bl	8007eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074fe:	f000 fff1 	bl	80084e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007502:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007504:	4618      	mov	r0, r3
 8007506:	3738      	adds	r7, #56	@ 0x38
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	@ 0x38
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10d      	bne.n	8007544 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	b672      	cpsid	i
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	b662      	cpsie	i
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <xQueueGenericSendFromISR+0x42>
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueGenericSendFromISR+0x46>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSendFromISR+0x48>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	b672      	cpsid	i
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	b662      	cpsie	i
 8007570:	623b      	str	r3, [r7, #32]
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d103      	bne.n	8007586 <xQueueGenericSendFromISR+0x76>
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <xQueueGenericSendFromISR+0x7a>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <xQueueGenericSendFromISR+0x7c>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10d      	bne.n	80075ac <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	b672      	cpsid	i
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	b662      	cpsie	i
 80075a4:	61fb      	str	r3, [r7, #28]
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	e7fd      	b.n	80075a8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ac:	f001 ffae 	bl	800950c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075b0:	f3ef 8211 	mrs	r2, BASEPRI
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	b672      	cpsid	i
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	b662      	cpsie	i
 80075c8:	61ba      	str	r2, [r7, #24]
 80075ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d302      	bcc.n	80075e2 <xQueueGenericSendFromISR+0xd2>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d12c      	bne.n	800763c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	68b9      	ldr	r1, [r7, #8]
 80075f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075f2:	f000 fbd1 	bl	8007d98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d112      	bne.n	8007626 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d016      	beq.n	8007636 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	3324      	adds	r3, #36	@ 0x24
 800760c:	4618      	mov	r0, r3
 800760e:	f001 f975 	bl	80088fc <xTaskRemoveFromEventList>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e007      	b.n	8007636 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007626:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800762a:	3301      	adds	r3, #1
 800762c:	b2db      	uxtb	r3, r3
 800762e:	b25a      	sxtb	r2, r3
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007636:	2301      	movs	r3, #1
 8007638:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800763a:	e001      	b.n	8007640 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800763c:	2300      	movs	r3, #0
 800763e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007642:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800764a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800764c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800764e:	4618      	mov	r0, r3
 8007650:	3738      	adds	r7, #56	@ 0x38
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b08e      	sub	sp, #56	@ 0x38
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10d      	bne.n	8007686 <xQueueGiveFromISR+0x30>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	b672      	cpsid	i
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	b662      	cpsie	i
 800767e:	623b      	str	r3, [r7, #32]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00d      	beq.n	80076aa <xQueueGiveFromISR+0x54>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	61fb      	str	r3, [r7, #28]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <xQueueGiveFromISR+0x64>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <xQueueGiveFromISR+0x68>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <xQueueGiveFromISR+0x6a>
 80076be:	2300      	movs	r3, #0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	b672      	cpsid	i
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	b662      	cpsie	i
 80076d8:	61bb      	str	r3, [r7, #24]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076e0:	f001 ff14 	bl	800950c <vPortValidateInterruptPriority>
	__asm volatile
 80076e4:	f3ef 8211 	mrs	r2, BASEPRI
 80076e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	617a      	str	r2, [r7, #20]
 80076fe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007700:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007702:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007710:	429a      	cmp	r2, r3
 8007712:	d22b      	bcs.n	800776c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007716:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800771a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800771e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007726:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772e:	d112      	bne.n	8007756 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	3324      	adds	r3, #36	@ 0x24
 800773c:	4618      	mov	r0, r3
 800773e:	f001 f8dd 	bl	80088fc <xTaskRemoveFromEventList>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e007      	b.n	8007766 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800775a:	3301      	adds	r3, #1
 800775c:	b2db      	uxtb	r3, r3
 800775e:	b25a      	sxtb	r2, r3
 8007760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007766:	2301      	movs	r3, #1
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
 800776a:	e001      	b.n	8007770 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007772:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f383 8811 	msr	BASEPRI, r3
}
 800777a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800777c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800777e:	4618      	mov	r0, r3
 8007780:	3738      	adds	r7, #56	@ 0x38
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	@ 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <xQueueReceive+0x36>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	623b      	str	r3, [r7, #32]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <xQueueReceive+0x44>
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <xQueueReceive+0x48>
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <xQueueReceive+0x4a>
 80077d0:	2300      	movs	r3, #0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <xQueueReceive+0x6a>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	b672      	cpsid	i
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	b662      	cpsie	i
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077f2:	f001 fa51 	bl	8008c98 <xTaskGetSchedulerState>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <xQueueReceive+0x7a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <xQueueReceive+0x7e>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <xQueueReceive+0x80>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10d      	bne.n	8007828 <xQueueReceive+0xa0>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	b672      	cpsid	i
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	b662      	cpsie	i
 8007820:	61bb      	str	r3, [r7, #24]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007828:	f001 fd88 	bl	800933c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01f      	beq.n	8007878 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800783c:	f000 fb16 	bl	8007e6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	1e5a      	subs	r2, r3, #1
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00f      	beq.n	8007870 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007852:	3310      	adds	r3, #16
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f851 	bl	80088fc <xTaskRemoveFromEventList>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007860:	4b3c      	ldr	r3, [pc, #240]	@ (8007954 <xQueueReceive+0x1cc>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007870:	f001 fd9a 	bl	80093a8 <vPortExitCritical>
				return pdPASS;
 8007874:	2301      	movs	r3, #1
 8007876:	e069      	b.n	800794c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800787e:	f001 fd93 	bl	80093a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007882:	2300      	movs	r3, #0
 8007884:	e062      	b.n	800794c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800788c:	f107 0310 	add.w	r3, r7, #16
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f899 	bl	80089c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800789a:	f001 fd85 	bl	80093a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800789e:	f000 fe13 	bl	80084c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a2:	f001 fd4b 	bl	800933c <vPortEnterCritical>
 80078a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078ac:	b25b      	sxtb	r3, r3
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d103      	bne.n	80078bc <xQueueReceive+0x134>
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d103      	bne.n	80078d2 <xQueueReceive+0x14a>
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078d2:	f001 fd69 	bl	80093a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078d6:	1d3a      	adds	r2, r7, #4
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f888 	bl	80089f4 <xTaskCheckForTimeOut>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d123      	bne.n	8007932 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078ec:	f000 fb36 	bl	8007f5c <prvIsQueueEmpty>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d017      	beq.n	8007926 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	3324      	adds	r3, #36	@ 0x24
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 ffd4 	bl	80088ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007906:	f000 fad7 	bl	8007eb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f000 fdeb 	bl	80084e4 <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d189      	bne.n	8007828 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8007914:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <xQueueReceive+0x1cc>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	e780      	b.n	8007828 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007928:	f000 fac6 	bl	8007eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800792c:	f000 fdda 	bl	80084e4 <xTaskResumeAll>
 8007930:	e77a      	b.n	8007828 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007934:	f000 fac0 	bl	8007eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007938:	f000 fdd4 	bl	80084e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800793c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800793e:	f000 fb0d 	bl	8007f5c <prvIsQueueEmpty>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	f43f af6f 	beq.w	8007828 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800794a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800794c:	4618      	mov	r0, r3
 800794e:	3730      	adds	r7, #48	@ 0x30
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b08e      	sub	sp, #56	@ 0x38
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007978:	b672      	cpsid	i
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	b662      	cpsie	i
 8007988:	623b      	str	r3, [r7, #32]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	b672      	cpsid	i
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	b662      	cpsie	i
 80079ac:	61fb      	str	r3, [r7, #28]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079b4:	f001 f970 	bl	8008c98 <xTaskGetSchedulerState>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <xQueueSemaphoreTake+0x6c>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <xQueueSemaphoreTake+0x70>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <xQueueSemaphoreTake+0x72>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10d      	bne.n	80079ea <xQueueSemaphoreTake+0x92>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	b672      	cpsid	i
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	b662      	cpsie	i
 80079e2:	61bb      	str	r3, [r7, #24]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079ea:	f001 fca7 	bl	800933c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d024      	beq.n	8007a44 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	1e5a      	subs	r2, r3, #1
 80079fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a00:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a0a:	f001 fb0f 	bl	800902c <pvTaskIncrementMutexHeldCount>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00f      	beq.n	8007a3c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1e:	3310      	adds	r3, #16
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 ff6b 	bl	80088fc <xTaskRemoveFromEventList>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d007      	beq.n	8007a3c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a2c:	4b55      	ldr	r3, [pc, #340]	@ (8007b84 <xQueueSemaphoreTake+0x22c>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a3c:	f001 fcb4 	bl	80093a8 <vPortExitCritical>
				return pdPASS;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e09a      	b.n	8007b7a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d114      	bne.n	8007a74 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	617b      	str	r3, [r7, #20]
}
 8007a66:	bf00      	nop
 8007a68:	bf00      	nop
 8007a6a:	e7fd      	b.n	8007a68 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a6c:	f001 fc9c 	bl	80093a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a70:	2300      	movs	r3, #0
 8007a72:	e082      	b.n	8007b7a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 ffa2 	bl	80089c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a88:	f001 fc8e 	bl	80093a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a8c:	f000 fd1c 	bl	80084c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a90:	f001 fc54 	bl	800933c <vPortEnterCritical>
 8007a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a9a:	b25b      	sxtb	r3, r3
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d103      	bne.n	8007aaa <xQueueSemaphoreTake+0x152>
 8007aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ab0:	b25b      	sxtb	r3, r3
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d103      	bne.n	8007ac0 <xQueueSemaphoreTake+0x168>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ac0:	f001 fc72 	bl	80093a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ac4:	463a      	mov	r2, r7
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ff91 	bl	80089f4 <xTaskCheckForTimeOut>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d132      	bne.n	8007b3e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ad8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ada:	f000 fa3f 	bl	8007f5c <prvIsQueueEmpty>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d026      	beq.n	8007b32 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d109      	bne.n	8007b00 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007aec:	f001 fc26 	bl	800933c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 f8ed 	bl	8008cd4 <xTaskPriorityInherit>
 8007afa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007afc:	f001 fc54 	bl	80093a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b02:	3324      	adds	r3, #36	@ 0x24
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	4611      	mov	r1, r2
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fecf 	bl	80088ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b10:	f000 f9d2 	bl	8007eb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b14:	f000 fce6 	bl	80084e4 <xTaskResumeAll>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f47f af65 	bne.w	80079ea <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007b20:	4b18      	ldr	r3, [pc, #96]	@ (8007b84 <xQueueSemaphoreTake+0x22c>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	e75b      	b.n	80079ea <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b34:	f000 f9c0 	bl	8007eb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b38:	f000 fcd4 	bl	80084e4 <xTaskResumeAll>
 8007b3c:	e755      	b.n	80079ea <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b40:	f000 f9ba 	bl	8007eb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b44:	f000 fcce 	bl	80084e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b4a:	f000 fa07 	bl	8007f5c <prvIsQueueEmpty>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f43f af4a 	beq.w	80079ea <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00d      	beq.n	8007b78 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007b5c:	f001 fbee 	bl	800933c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b62:	f000 f901 	bl	8007d68 <prvGetDisinheritPriorityAfterTimeout>
 8007b66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 f9bc 	bl	8008eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b74:	f001 fc18 	bl	80093a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3738      	adds	r7, #56	@ 0x38
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08e      	sub	sp, #56	@ 0x38
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	b672      	cpsid	i
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	b662      	cpsie	i
 8007bb2:	623b      	str	r3, [r7, #32]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d103      	bne.n	8007bc8 <xQueueReceiveFromISR+0x40>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <xQueueReceiveFromISR+0x44>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e000      	b.n	8007bce <xQueueReceiveFromISR+0x46>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	b672      	cpsid	i
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	b662      	cpsie	i
 8007be6:	61fb      	str	r3, [r7, #28]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bee:	f001 fc8d 	bl	800950c <vPortValidateInterruptPriority>
	__asm volatile
 8007bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfa:	b672      	cpsid	i
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	b662      	cpsie	i
 8007c0a:	61ba      	str	r2, [r7, #24]
 8007c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02f      	beq.n	8007c7e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c2c:	f000 f91e 	bl	8007e6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	1e5a      	subs	r2, r3, #1
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d112      	bne.n	8007c68 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d016      	beq.n	8007c78 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fe54 	bl	80088fc <xTaskRemoveFromEventList>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00e      	beq.n	8007c78 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e007      	b.n	8007c78 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7c:	e001      	b.n	8007c82 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f383 8811 	msr	BASEPRI, r3
}
 8007c8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3738      	adds	r7, #56	@ 0x38
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	b672      	cpsid	i
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	b662      	cpsie	i
 8007cba:	60bb      	str	r3, [r7, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007cc2:	f001 fb3b 	bl	800933c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cca:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007ccc:	f001 fb6c 	bl	80093a8 <vPortExitCritical>

	return uxReturn;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b087      	sub	sp, #28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	b672      	cpsid	i
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	b662      	cpsie	i
 8007d00:	60fb      	str	r3, [r7, #12]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d0e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d10:	4618      	mov	r0, r3
 8007d12:	371c      	adds	r7, #28
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10d      	bne.n	8007d4a <vQueueDelete+0x2e>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	b672      	cpsid	i
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	b662      	cpsie	i
 8007d42:	60bb      	str	r3, [r7, #8]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 f934 	bl	8007fb8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d102      	bne.n	8007d60 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f001 fcea 	bl	8009734 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d006      	beq.n	8007d86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f1c3 0307 	rsb	r3, r3, #7
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e001      	b.n	8007d8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007da4:	2300      	movs	r3, #0
 8007da6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10d      	bne.n	8007dd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d14d      	bne.n	8007e5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f001 f806 	bl	8008dd4 <xTaskPriorityDisinherit>
 8007dc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	e043      	b.n	8007e5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d119      	bne.n	8007e0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6858      	ldr	r0, [r3, #4]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de0:	461a      	mov	r2, r3
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	f010 fcc9 	bl	801877a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df0:	441a      	add	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d32b      	bcc.n	8007e5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	e026      	b.n	8007e5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68d8      	ldr	r0, [r3, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e14:	461a      	mov	r2, r3
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	f010 fcaf 	bl	801877a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e24:	425b      	negs	r3, r3
 8007e26:	441a      	add	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d207      	bcs.n	8007e48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e40:	425b      	negs	r3, r3
 8007e42:	441a      	add	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d105      	bne.n	8007e5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e62:	697b      	ldr	r3, [r7, #20]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d018      	beq.n	8007eb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e86:	441a      	add	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d303      	bcc.n	8007ea0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68d9      	ldr	r1, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6838      	ldr	r0, [r7, #0]
 8007eac:	f010 fc65 	bl	801877a <memcpy>
	}
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ec0:	f001 fa3c 	bl	800933c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ecc:	e011      	b.n	8007ef2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d012      	beq.n	8007efc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3324      	adds	r3, #36	@ 0x24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fd0e 	bl	80088fc <xTaskRemoveFromEventList>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ee6:	f000 fded 	bl	8008ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dce9      	bgt.n	8007ece <prvUnlockQueue+0x16>
 8007efa:	e000      	b.n	8007efe <prvUnlockQueue+0x46>
					break;
 8007efc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	22ff      	movs	r2, #255	@ 0xff
 8007f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f06:	f001 fa4f 	bl	80093a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f0a:	f001 fa17 	bl	800933c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f16:	e011      	b.n	8007f3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d012      	beq.n	8007f46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3310      	adds	r3, #16
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fce9 	bl	80088fc <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f30:	f000 fdc8 	bl	8008ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	dce9      	bgt.n	8007f18 <prvUnlockQueue+0x60>
 8007f44:	e000      	b.n	8007f48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	22ff      	movs	r2, #255	@ 0xff
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f50:	f001 fa2a 	bl	80093a8 <vPortExitCritical>
}
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f64:	f001 f9ea 	bl	800933c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e001      	b.n	8007f7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f7a:	f001 fa15 	bl	80093a8 <vPortExitCritical>

	return xReturn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f90:	f001 f9d4 	bl	800933c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d102      	bne.n	8007fa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	e001      	b.n	8007faa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007faa:	f001 f9fd 	bl	80093a8 <vPortExitCritical>

	return xReturn;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e016      	b.n	8007ff4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007fc6:	4a10      	ldr	r2, [pc, #64]	@ (8008008 <vQueueUnregisterQueue+0x50>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	4413      	add	r3, r2
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d10b      	bne.n	8007fee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8008008 <vQueueUnregisterQueue+0x50>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007fe0:	4a09      	ldr	r2, [pc, #36]	@ (8008008 <vQueueUnregisterQueue+0x50>)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
				break;
 8007fec:	e006      	b.n	8007ffc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	60fb      	str	r3, [r7, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b07      	cmp	r3, #7
 8007ff8:	d9e5      	bls.n	8007fc6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007ffa:	bf00      	nop
 8007ffc:	bf00      	nop
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	200050d0 	.word	0x200050d0

0800800c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08e      	sub	sp, #56	@ 0x38
 8008010:	af04      	add	r7, sp, #16
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <xTaskCreateStatic+0x30>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10d      	bne.n	800805e <xTaskCreateStatic+0x52>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	b672      	cpsid	i
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	b662      	cpsie	i
 8008056:	61fb      	str	r3, [r7, #28]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800805e:	23a0      	movs	r3, #160	@ 0xa0
 8008060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2ba0      	cmp	r3, #160	@ 0xa0
 8008066:	d00d      	beq.n	8008084 <xTaskCreateStatic+0x78>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	61bb      	str	r3, [r7, #24]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008084:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01e      	beq.n	80080ca <xTaskCreateStatic+0xbe>
 800808c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01b      	beq.n	80080ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800809a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080a4:	2300      	movs	r3, #0
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	9302      	str	r3, [sp, #8]
 80080ac:	f107 0314 	add.w	r3, r7, #20
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f851 	bl	8008164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080c4:	f000 f8f0 	bl	80082a8 <prvAddNewTaskToReadyList>
 80080c8:	e001      	b.n	80080ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080ce:	697b      	ldr	r3, [r7, #20]
	}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3728      	adds	r7, #40	@ 0x28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08c      	sub	sp, #48	@ 0x30
 80080dc:	af04      	add	r7, sp, #16
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	4613      	mov	r3, r2
 80080e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fa53 	bl	8009598 <pvPortMalloc>
 80080f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080fa:	20a0      	movs	r0, #160	@ 0xa0
 80080fc:	f001 fa4c 	bl	8009598 <pvPortMalloc>
 8008100:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	631a      	str	r2, [r3, #48]	@ 0x30
 800810e:	e005      	b.n	800811c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008110:	6978      	ldr	r0, [r7, #20]
 8008112:	f001 fb0f 	bl	8009734 <vPortFree>
 8008116:	e001      	b.n	800811c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d017      	beq.n	8008152 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	2300      	movs	r3, #0
 800812e:	9303      	str	r3, [sp, #12]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	9302      	str	r3, [sp, #8]
 8008134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f80f 	bl	8008164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008146:	69f8      	ldr	r0, [r7, #28]
 8008148:	f000 f8ae 	bl	80082a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800814c:	2301      	movs	r3, #1
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	e002      	b.n	8008158 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008152:	f04f 33ff 	mov.w	r3, #4294967295
 8008156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008158:	69bb      	ldr	r3, [r7, #24]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800817c:	440b      	add	r3, r1
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	b672      	cpsid	i
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	b662      	cpsie	i
 80081aa:	617b      	str	r3, [r7, #20]
}
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
 80081b0:	e7fd      	b.n	80081ae <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01f      	beq.n	80081f8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	e012      	b.n	80081e4 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	7819      	ldrb	r1, [r3, #0]
 80081c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	3334      	adds	r3, #52	@ 0x34
 80081ce:	460a      	mov	r2, r1
 80081d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d006      	beq.n	80081ec <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3301      	adds	r3, #1
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	d9e9      	bls.n	80081be <prvInitialiseNewTask+0x5a>
 80081ea:	e000      	b.n	80081ee <prvInitialiseNewTask+0x8a>
			{
				break;
 80081ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081f6:	e003      	b.n	8008200 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	2b06      	cmp	r3, #6
 8008204:	d901      	bls.n	800820a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008206:	2306      	movs	r3, #6
 8008208:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800820e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008214:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	2200      	movs	r2, #0
 800821a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800821c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821e:	3304      	adds	r3, #4
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe fe34 	bl	8006e8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	3318      	adds	r3, #24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe fe2f 	bl	8006e8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008234:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	f1c3 0207 	rsb	r2, r3, #7
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008244:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	2200      	movs	r2, #0
 8008252:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	334c      	adds	r3, #76	@ 0x4c
 800825a:	224c      	movs	r2, #76	@ 0x4c
 800825c:	2100      	movs	r1, #0
 800825e:	4618      	mov	r0, r3
 8008260:	f010 f9a1 	bl	80185a6 <memset>
 8008264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008266:	4a0d      	ldr	r2, [pc, #52]	@ (800829c <prvInitialiseNewTask+0x138>)
 8008268:	651a      	str	r2, [r3, #80]	@ 0x50
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	4a0c      	ldr	r2, [pc, #48]	@ (80082a0 <prvInitialiseNewTask+0x13c>)
 800826e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008272:	4a0c      	ldr	r2, [pc, #48]	@ (80082a4 <prvInitialiseNewTask+0x140>)
 8008274:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	68f9      	ldr	r1, [r7, #12]
 800827a:	69b8      	ldr	r0, [r7, #24]
 800827c:	f000 ff50 	bl	8009120 <pxPortInitialiseStack>
 8008280:	4602      	mov	r2, r0
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d002      	beq.n	8008292 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008292:	bf00      	nop
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	2000f270 	.word	0x2000f270
 80082a0:	2000f2d8 	.word	0x2000f2d8
 80082a4:	2000f340 	.word	0x2000f340

080082a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082b0:	f001 f844 	bl	800933c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082b4:	4b2a      	ldr	r3, [pc, #168]	@ (8008360 <prvAddNewTaskToReadyList+0xb8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4a29      	ldr	r2, [pc, #164]	@ (8008360 <prvAddNewTaskToReadyList+0xb8>)
 80082bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082be:	4b29      	ldr	r3, [pc, #164]	@ (8008364 <prvAddNewTaskToReadyList+0xbc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082c6:	4a27      	ldr	r2, [pc, #156]	@ (8008364 <prvAddNewTaskToReadyList+0xbc>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082cc:	4b24      	ldr	r3, [pc, #144]	@ (8008360 <prvAddNewTaskToReadyList+0xb8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d110      	bne.n	80082f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082d4:	f000 fc1a 	bl	8008b0c <prvInitialiseTaskLists>
 80082d8:	e00d      	b.n	80082f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082da:	4b23      	ldr	r3, [pc, #140]	@ (8008368 <prvAddNewTaskToReadyList+0xc0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082e2:	4b20      	ldr	r3, [pc, #128]	@ (8008364 <prvAddNewTaskToReadyList+0xbc>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d802      	bhi.n	80082f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008364 <prvAddNewTaskToReadyList+0xbc>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	@ (800836c <prvAddNewTaskToReadyList+0xc4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <prvAddNewTaskToReadyList+0xc4>)
 80082fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	2201      	movs	r2, #1
 8008306:	409a      	lsls	r2, r3
 8008308:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <prvAddNewTaskToReadyList+0xc8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4313      	orrs	r3, r2
 800830e:	4a18      	ldr	r2, [pc, #96]	@ (8008370 <prvAddNewTaskToReadyList+0xc8>)
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4a15      	ldr	r2, [pc, #84]	@ (8008374 <prvAddNewTaskToReadyList+0xcc>)
 8008320:	441a      	add	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe fdbd 	bl	8006ea8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800832e:	f001 f83b 	bl	80093a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <prvAddNewTaskToReadyList+0xc0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800833a:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <prvAddNewTaskToReadyList+0xbc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008344:	429a      	cmp	r2, r3
 8008346:	d207      	bcs.n	8008358 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008348:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <prvAddNewTaskToReadyList+0xd0>)
 800834a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20005210 	.word	0x20005210
 8008364:	20005110 	.word	0x20005110
 8008368:	2000521c 	.word	0x2000521c
 800836c:	2000522c 	.word	0x2000522c
 8008370:	20005218 	.word	0x20005218
 8008374:	20005114 	.word	0x20005114
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01a      	beq.n	80083c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <vTaskDelay+0x68>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00d      	beq.n	80083b2 <vTaskDelay+0x36>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	b672      	cpsid	i
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	b662      	cpsie	i
 80083aa:	60bb      	str	r3, [r7, #8]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80083b2:	f000 f889 	bl	80084c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083b6:	2100      	movs	r1, #0
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fe4b 	bl	8009054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083be:	f000 f891 	bl	80084e4 <xTaskResumeAll>
 80083c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d107      	bne.n	80083da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80083ca:	4b07      	ldr	r3, [pc, #28]	@ (80083e8 <vTaskDelay+0x6c>)
 80083cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083da:	bf00      	nop
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20005238 	.word	0x20005238
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083fa:	463a      	mov	r2, r7
 80083fc:	1d39      	adds	r1, r7, #4
 80083fe:	f107 0308 	add.w	r3, r7, #8
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 f8e4 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	9202      	str	r2, [sp, #8]
 8008410:	9301      	str	r3, [sp, #4]
 8008412:	2300      	movs	r3, #0
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	2300      	movs	r3, #0
 8008418:	460a      	mov	r2, r1
 800841a:	4923      	ldr	r1, [pc, #140]	@ (80084a8 <vTaskStartScheduler+0xbc>)
 800841c:	4823      	ldr	r0, [pc, #140]	@ (80084ac <vTaskStartScheduler+0xc0>)
 800841e:	f7ff fdf5 	bl	800800c <xTaskCreateStatic>
 8008422:	4603      	mov	r3, r0
 8008424:	4a22      	ldr	r2, [pc, #136]	@ (80084b0 <vTaskStartScheduler+0xc4>)
 8008426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008428:	4b21      	ldr	r3, [pc, #132]	@ (80084b0 <vTaskStartScheduler+0xc4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008430:	2301      	movs	r3, #1
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e001      	b.n	800843a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d11d      	bne.n	800847c <vTaskStartScheduler+0x90>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008444:	b672      	cpsid	i
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	b662      	cpsie	i
 8008454:	613b      	str	r3, [r7, #16]
}
 8008456:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008458:	4b16      	ldr	r3, [pc, #88]	@ (80084b4 <vTaskStartScheduler+0xc8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	334c      	adds	r3, #76	@ 0x4c
 800845e:	4a16      	ldr	r2, [pc, #88]	@ (80084b8 <vTaskStartScheduler+0xcc>)
 8008460:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008462:	4b16      	ldr	r3, [pc, #88]	@ (80084bc <vTaskStartScheduler+0xd0>)
 8008464:	f04f 32ff 	mov.w	r2, #4294967295
 8008468:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800846a:	4b15      	ldr	r3, [pc, #84]	@ (80084c0 <vTaskStartScheduler+0xd4>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008470:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <vTaskStartScheduler+0xd8>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008476:	f000 fee3 	bl	8009240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800847a:	e011      	b.n	80084a0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d10d      	bne.n	80084a0 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	60fb      	str	r3, [r7, #12]
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <vTaskStartScheduler+0xb0>
}
 80084a0:	bf00      	nop
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	08019900 	.word	0x08019900
 80084ac:	08008add 	.word	0x08008add
 80084b0:	20005234 	.word	0x20005234
 80084b4:	20005110 	.word	0x20005110
 80084b8:	2000003c 	.word	0x2000003c
 80084bc:	20005230 	.word	0x20005230
 80084c0:	2000521c 	.word	0x2000521c
 80084c4:	20005214 	.word	0x20005214

080084c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084cc:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <vTaskSuspendAll+0x18>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	4a03      	ldr	r2, [pc, #12]	@ (80084e0 <vTaskSuspendAll+0x18>)
 80084d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084d6:	bf00      	nop
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20005238 	.word	0x20005238

080084e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084f2:	4b43      	ldr	r3, [pc, #268]	@ (8008600 <xTaskResumeAll+0x11c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10d      	bne.n	8008516 <xTaskResumeAll+0x32>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	b672      	cpsid	i
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	b662      	cpsie	i
 800850e:	603b      	str	r3, [r7, #0]
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	e7fd      	b.n	8008512 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008516:	f000 ff11 	bl	800933c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800851a:	4b39      	ldr	r3, [pc, #228]	@ (8008600 <xTaskResumeAll+0x11c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3b01      	subs	r3, #1
 8008520:	4a37      	ldr	r2, [pc, #220]	@ (8008600 <xTaskResumeAll+0x11c>)
 8008522:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008524:	4b36      	ldr	r3, [pc, #216]	@ (8008600 <xTaskResumeAll+0x11c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d161      	bne.n	80085f0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800852c:	4b35      	ldr	r3, [pc, #212]	@ (8008604 <xTaskResumeAll+0x120>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d05d      	beq.n	80085f0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008534:	e02e      	b.n	8008594 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008536:	4b34      	ldr	r3, [pc, #208]	@ (8008608 <xTaskResumeAll+0x124>)
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3318      	adds	r3, #24
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fd0d 	bl	8006f62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3304      	adds	r3, #4
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe fd08 	bl	8006f62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008556:	2201      	movs	r2, #1
 8008558:	409a      	lsls	r2, r3
 800855a:	4b2c      	ldr	r3, [pc, #176]	@ (800860c <xTaskResumeAll+0x128>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4313      	orrs	r3, r2
 8008560:	4a2a      	ldr	r2, [pc, #168]	@ (800860c <xTaskResumeAll+0x128>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <xTaskResumeAll+0x12c>)
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3304      	adds	r3, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7fe fc94 	bl	8006ea8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008584:	4b23      	ldr	r3, [pc, #140]	@ (8008614 <xTaskResumeAll+0x130>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858a:	429a      	cmp	r2, r3
 800858c:	d302      	bcc.n	8008594 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800858e:	4b22      	ldr	r3, [pc, #136]	@ (8008618 <xTaskResumeAll+0x134>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008594:	4b1c      	ldr	r3, [pc, #112]	@ (8008608 <xTaskResumeAll+0x124>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1cc      	bne.n	8008536 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085a2:	f000 fb59 	bl	8008c58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085a6:	4b1d      	ldr	r3, [pc, #116]	@ (800861c <xTaskResumeAll+0x138>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085b2:	f000 f859 	bl	8008668 <xTaskIncrementTick>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80085bc:	4b16      	ldr	r3, [pc, #88]	@ (8008618 <xTaskResumeAll+0x134>)
 80085be:	2201      	movs	r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f1      	bne.n	80085b2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80085ce:	4b13      	ldr	r3, [pc, #76]	@ (800861c <xTaskResumeAll+0x138>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085d4:	4b10      	ldr	r3, [pc, #64]	@ (8008618 <xTaskResumeAll+0x134>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d009      	beq.n	80085f0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008620 <xTaskResumeAll+0x13c>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f0:	f000 feda 	bl	80093a8 <vPortExitCritical>

	return xAlreadyYielded;
 80085f4:	68bb      	ldr	r3, [r7, #8]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20005238 	.word	0x20005238
 8008604:	20005210 	.word	0x20005210
 8008608:	200051d0 	.word	0x200051d0
 800860c:	20005218 	.word	0x20005218
 8008610:	20005114 	.word	0x20005114
 8008614:	20005110 	.word	0x20005110
 8008618:	20005224 	.word	0x20005224
 800861c:	20005220 	.word	0x20005220
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800862a:	4b05      	ldr	r3, [pc, #20]	@ (8008640 <xTaskGetTickCount+0x1c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008630:	687b      	ldr	r3, [r7, #4]
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	20005214 	.word	0x20005214

08008644 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800864a:	f000 ff5f 	bl	800950c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008652:	4b04      	ldr	r3, [pc, #16]	@ (8008664 <xTaskGetTickCountFromISR+0x20>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008658:	683b      	ldr	r3, [r7, #0]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20005214 	.word	0x20005214

08008668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008672:	4b50      	ldr	r3, [pc, #320]	@ (80087b4 <xTaskIncrementTick+0x14c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 808b 	bne.w	8008792 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800867c:	4b4e      	ldr	r3, [pc, #312]	@ (80087b8 <xTaskIncrementTick+0x150>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008684:	4a4c      	ldr	r2, [pc, #304]	@ (80087b8 <xTaskIncrementTick+0x150>)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d123      	bne.n	80086d8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008690:	4b4a      	ldr	r3, [pc, #296]	@ (80087bc <xTaskIncrementTick+0x154>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00d      	beq.n	80086b6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	b672      	cpsid	i
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	b662      	cpsie	i
 80086ae:	603b      	str	r3, [r7, #0]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <xTaskIncrementTick+0x4a>
 80086b6:	4b41      	ldr	r3, [pc, #260]	@ (80087bc <xTaskIncrementTick+0x154>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	4b40      	ldr	r3, [pc, #256]	@ (80087c0 <xTaskIncrementTick+0x158>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a3e      	ldr	r2, [pc, #248]	@ (80087bc <xTaskIncrementTick+0x154>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	4a3e      	ldr	r2, [pc, #248]	@ (80087c0 <xTaskIncrementTick+0x158>)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4b3e      	ldr	r3, [pc, #248]	@ (80087c4 <xTaskIncrementTick+0x15c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4a3c      	ldr	r2, [pc, #240]	@ (80087c4 <xTaskIncrementTick+0x15c>)
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	f000 fac0 	bl	8008c58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086d8:	4b3b      	ldr	r3, [pc, #236]	@ (80087c8 <xTaskIncrementTick+0x160>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d348      	bcc.n	8008774 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e2:	4b36      	ldr	r3, [pc, #216]	@ (80087bc <xTaskIncrementTick+0x154>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	4b36      	ldr	r3, [pc, #216]	@ (80087c8 <xTaskIncrementTick+0x160>)
 80086ee:	f04f 32ff 	mov.w	r2, #4294967295
 80086f2:	601a      	str	r2, [r3, #0]
					break;
 80086f4:	e03e      	b.n	8008774 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f6:	4b31      	ldr	r3, [pc, #196]	@ (80087bc <xTaskIncrementTick+0x154>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d203      	bcs.n	8008716 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800870e:	4a2e      	ldr	r2, [pc, #184]	@ (80087c8 <xTaskIncrementTick+0x160>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008714:	e02e      	b.n	8008774 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3304      	adds	r3, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fc21 	bl	8006f62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3318      	adds	r3, #24
 800872c:	4618      	mov	r0, r3
 800872e:	f7fe fc18 	bl	8006f62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	2201      	movs	r2, #1
 8008738:	409a      	lsls	r2, r3
 800873a:	4b24      	ldr	r3, [pc, #144]	@ (80087cc <xTaskIncrementTick+0x164>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4313      	orrs	r3, r2
 8008740:	4a22      	ldr	r2, [pc, #136]	@ (80087cc <xTaskIncrementTick+0x164>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4a1f      	ldr	r2, [pc, #124]	@ (80087d0 <xTaskIncrementTick+0x168>)
 8008752:	441a      	add	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fe fba4 	bl	8006ea8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008764:	4b1b      	ldr	r3, [pc, #108]	@ (80087d4 <xTaskIncrementTick+0x16c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	429a      	cmp	r2, r3
 800876c:	d3b9      	bcc.n	80086e2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008772:	e7b6      	b.n	80086e2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008774:	4b17      	ldr	r3, [pc, #92]	@ (80087d4 <xTaskIncrementTick+0x16c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877a:	4915      	ldr	r1, [pc, #84]	@ (80087d0 <xTaskIncrementTick+0x168>)
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d907      	bls.n	800879c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800878c:	2301      	movs	r3, #1
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	e004      	b.n	800879c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008792:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <xTaskIncrementTick+0x170>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	4a0f      	ldr	r2, [pc, #60]	@ (80087d8 <xTaskIncrementTick+0x170>)
 800879a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800879c:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <xTaskIncrementTick+0x174>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80087a8:	697b      	ldr	r3, [r7, #20]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20005238 	.word	0x20005238
 80087b8:	20005214 	.word	0x20005214
 80087bc:	200051c8 	.word	0x200051c8
 80087c0:	200051cc 	.word	0x200051cc
 80087c4:	20005228 	.word	0x20005228
 80087c8:	20005230 	.word	0x20005230
 80087cc:	20005218 	.word	0x20005218
 80087d0:	20005114 	.word	0x20005114
 80087d4:	20005110 	.word	0x20005110
 80087d8:	20005220 	.word	0x20005220
 80087dc:	20005224 	.word	0x20005224

080087e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087e6:	4b2b      	ldr	r3, [pc, #172]	@ (8008894 <vTaskSwitchContext+0xb4>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008898 <vTaskSwitchContext+0xb8>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087f4:	e047      	b.n	8008886 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80087f6:	4b28      	ldr	r3, [pc, #160]	@ (8008898 <vTaskSwitchContext+0xb8>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087fc:	4b27      	ldr	r3, [pc, #156]	@ (800889c <vTaskSwitchContext+0xbc>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	fab3 f383 	clz	r3, r3
 8008808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800880a:	7afb      	ldrb	r3, [r7, #11]
 800880c:	f1c3 031f 	rsb	r3, r3, #31
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	4923      	ldr	r1, [pc, #140]	@ (80088a0 <vTaskSwitchContext+0xc0>)
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	440b      	add	r3, r1
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10d      	bne.n	8008842 <vTaskSwitchContext+0x62>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	b672      	cpsid	i
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	b662      	cpsie	i
 800883a:	607b      	str	r3, [r7, #4]
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	e7fd      	b.n	800883e <vTaskSwitchContext+0x5e>
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a14      	ldr	r2, [pc, #80]	@ (80088a0 <vTaskSwitchContext+0xc0>)
 800884e:	4413      	add	r3, r2
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3308      	adds	r3, #8
 8008864:	429a      	cmp	r2, r3
 8008866:	d104      	bne.n	8008872 <vTaskSwitchContext+0x92>
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <vTaskSwitchContext+0xc4>)
 800887a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800887c:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <vTaskSwitchContext+0xc4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	334c      	adds	r3, #76	@ 0x4c
 8008882:	4a09      	ldr	r2, [pc, #36]	@ (80088a8 <vTaskSwitchContext+0xc8>)
 8008884:	6013      	str	r3, [r2, #0]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	20005238 	.word	0x20005238
 8008898:	20005224 	.word	0x20005224
 800889c:	20005218 	.word	0x20005218
 80088a0:	20005114 	.word	0x20005114
 80088a4:	20005110 	.word	0x20005110
 80088a8:	2000003c 	.word	0x2000003c

080088ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10d      	bne.n	80088d8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	b672      	cpsid	i
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	b662      	cpsie	i
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	bf00      	nop
 80088d6:	e7fd      	b.n	80088d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088d8:	4b07      	ldr	r3, [pc, #28]	@ (80088f8 <vTaskPlaceOnEventList+0x4c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3318      	adds	r3, #24
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fe fb05 	bl	8006ef0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088e6:	2101      	movs	r1, #1
 80088e8:	6838      	ldr	r0, [r7, #0]
 80088ea:	f000 fbb3 	bl	8009054 <prvAddCurrentTaskToDelayedList>
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20005110 	.word	0x20005110

080088fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008916:	b672      	cpsid	i
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	b662      	cpsie	i
 8008926:	60fb      	str	r3, [r7, #12]
}
 8008928:	bf00      	nop
 800892a:	bf00      	nop
 800892c:	e7fd      	b.n	800892a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3318      	adds	r3, #24
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fb15 	bl	8006f62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008938:	4b1d      	ldr	r3, [pc, #116]	@ (80089b0 <xTaskRemoveFromEventList+0xb4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d11c      	bne.n	800897a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fb0c 	bl	8006f62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894e:	2201      	movs	r2, #1
 8008950:	409a      	lsls	r2, r3
 8008952:	4b18      	ldr	r3, [pc, #96]	@ (80089b4 <xTaskRemoveFromEventList+0xb8>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4313      	orrs	r3, r2
 8008958:	4a16      	ldr	r2, [pc, #88]	@ (80089b4 <xTaskRemoveFromEventList+0xb8>)
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	4613      	mov	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4a13      	ldr	r2, [pc, #76]	@ (80089b8 <xTaskRemoveFromEventList+0xbc>)
 800896a:	441a      	add	r2, r3
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	3304      	adds	r3, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4610      	mov	r0, r2
 8008974:	f7fe fa98 	bl	8006ea8 <vListInsertEnd>
 8008978:	e005      	b.n	8008986 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	3318      	adds	r3, #24
 800897e:	4619      	mov	r1, r3
 8008980:	480e      	ldr	r0, [pc, #56]	@ (80089bc <xTaskRemoveFromEventList+0xc0>)
 8008982:	f7fe fa91 	bl	8006ea8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	4b0d      	ldr	r3, [pc, #52]	@ (80089c0 <xTaskRemoveFromEventList+0xc4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	429a      	cmp	r2, r3
 8008992:	d905      	bls.n	80089a0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <xTaskRemoveFromEventList+0xc8>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e001      	b.n	80089a4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089a4:	697b      	ldr	r3, [r7, #20]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20005238 	.word	0x20005238
 80089b4:	20005218 	.word	0x20005218
 80089b8:	20005114 	.word	0x20005114
 80089bc:	200051d0 	.word	0x200051d0
 80089c0:	20005110 	.word	0x20005110
 80089c4:	20005224 	.word	0x20005224

080089c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089d0:	4b06      	ldr	r3, [pc, #24]	@ (80089ec <vTaskInternalSetTimeOutState+0x24>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <vTaskInternalSetTimeOutState+0x28>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	605a      	str	r2, [r3, #4]
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	20005228 	.word	0x20005228
 80089f0:	20005214 	.word	0x20005214

080089f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	b672      	cpsid	i
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	b662      	cpsie	i
 8008a18:	613b      	str	r3, [r7, #16]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	b672      	cpsid	i
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	b662      	cpsie	i
 8008a3a:	60fb      	str	r3, [r7, #12]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8008a42:	f000 fc7b 	bl	800933c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a46:	4b1d      	ldr	r3, [pc, #116]	@ (8008abc <xTaskCheckForTimeOut+0xc8>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5e:	d102      	bne.n	8008a66 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
 8008a64:	e023      	b.n	8008aae <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <xTaskCheckForTimeOut+0xcc>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d007      	beq.n	8008a82 <xTaskCheckForTimeOut+0x8e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d302      	bcc.n	8008a82 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	e015      	b.n	8008aae <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d20b      	bcs.n	8008aa4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	1ad2      	subs	r2, r2, r3
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff95 	bl	80089c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	e004      	b.n	8008aae <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008aae:	f000 fc7b 	bl	80093a8 <vPortExitCritical>

	return xReturn;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20005214 	.word	0x20005214
 8008ac0:	20005228 	.word	0x20005228

08008ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ac8:	4b03      	ldr	r3, [pc, #12]	@ (8008ad8 <vTaskMissedYield+0x14>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	20005224 	.word	0x20005224

08008adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ae4:	f000 f852 	bl	8008b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <prvIdleTask+0x28>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d9f9      	bls.n	8008ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008af0:	4b05      	ldr	r3, [pc, #20]	@ (8008b08 <prvIdleTask+0x2c>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b00:	e7f0      	b.n	8008ae4 <prvIdleTask+0x8>
 8008b02:	bf00      	nop
 8008b04:	20005114 	.word	0x20005114
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b12:	2300      	movs	r3, #0
 8008b14:	607b      	str	r3, [r7, #4]
 8008b16:	e00c      	b.n	8008b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4a12      	ldr	r2, [pc, #72]	@ (8008b6c <prvInitialiseTaskLists+0x60>)
 8008b24:	4413      	add	r3, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe f991 	bl	8006e4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b06      	cmp	r3, #6
 8008b36:	d9ef      	bls.n	8008b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b38:	480d      	ldr	r0, [pc, #52]	@ (8008b70 <prvInitialiseTaskLists+0x64>)
 8008b3a:	f7fe f988 	bl	8006e4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b3e:	480d      	ldr	r0, [pc, #52]	@ (8008b74 <prvInitialiseTaskLists+0x68>)
 8008b40:	f7fe f985 	bl	8006e4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b44:	480c      	ldr	r0, [pc, #48]	@ (8008b78 <prvInitialiseTaskLists+0x6c>)
 8008b46:	f7fe f982 	bl	8006e4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b4a:	480c      	ldr	r0, [pc, #48]	@ (8008b7c <prvInitialiseTaskLists+0x70>)
 8008b4c:	f7fe f97f 	bl	8006e4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b50:	480b      	ldr	r0, [pc, #44]	@ (8008b80 <prvInitialiseTaskLists+0x74>)
 8008b52:	f7fe f97c 	bl	8006e4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <prvInitialiseTaskLists+0x78>)
 8008b58:	4a05      	ldr	r2, [pc, #20]	@ (8008b70 <prvInitialiseTaskLists+0x64>)
 8008b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <prvInitialiseTaskLists+0x7c>)
 8008b5e:	4a05      	ldr	r2, [pc, #20]	@ (8008b74 <prvInitialiseTaskLists+0x68>)
 8008b60:	601a      	str	r2, [r3, #0]
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20005114 	.word	0x20005114
 8008b70:	200051a0 	.word	0x200051a0
 8008b74:	200051b4 	.word	0x200051b4
 8008b78:	200051d0 	.word	0x200051d0
 8008b7c:	200051e4 	.word	0x200051e4
 8008b80:	200051fc 	.word	0x200051fc
 8008b84:	200051c8 	.word	0x200051c8
 8008b88:	200051cc 	.word	0x200051cc

08008b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b92:	e019      	b.n	8008bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b94:	f000 fbd2 	bl	800933c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b98:	4b10      	ldr	r3, [pc, #64]	@ (8008bdc <prvCheckTasksWaitingTermination+0x50>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe f9dc 	bl	8006f62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008baa:	4b0d      	ldr	r3, [pc, #52]	@ (8008be0 <prvCheckTasksWaitingTermination+0x54>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8008be0 <prvCheckTasksWaitingTermination+0x54>)
 8008bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a0a      	ldr	r2, [pc, #40]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bbe:	f000 fbf3 	bl	80093a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f810 	bl	8008be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <prvCheckTasksWaitingTermination+0x58>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e1      	bne.n	8008b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	200051e4 	.word	0x200051e4
 8008be0:	20005210 	.word	0x20005210
 8008be4:	200051f8 	.word	0x200051f8

08008be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	334c      	adds	r3, #76	@ 0x4c
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f00f fd0d 	bl	8018614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d108      	bne.n	8008c16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 fd93 	bl	8009734 <vPortFree>
				vPortFree( pxTCB );
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fd90 	bl	8009734 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c14:	e01b      	b.n	8008c4e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d103      	bne.n	8008c28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fd87 	bl	8009734 <vPortFree>
	}
 8008c26:	e012      	b.n	8008c4e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d00d      	beq.n	8008c4e <prvDeleteTCB+0x66>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	b672      	cpsid	i
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	b662      	cpsie	i
 8008c46:	60fb      	str	r3, [r7, #12]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <prvDeleteTCB+0x62>
	}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c90 <prvResetNextTaskUnblockTime+0x38>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	@ (8008c94 <prvResetNextTaskUnblockTime+0x3c>)
 8008c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c70:	e008      	b.n	8008c84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c72:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <prvResetNextTaskUnblockTime+0x38>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	4a04      	ldr	r2, [pc, #16]	@ (8008c94 <prvResetNextTaskUnblockTime+0x3c>)
 8008c82:	6013      	str	r3, [r2, #0]
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	200051c8 	.word	0x200051c8
 8008c94:	20005230 	.word	0x20005230

08008c98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ccc <xTaskGetSchedulerState+0x34>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d102      	bne.n	8008cac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	607b      	str	r3, [r7, #4]
 8008caa:	e008      	b.n	8008cbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cac:	4b08      	ldr	r3, [pc, #32]	@ (8008cd0 <xTaskGetSchedulerState+0x38>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	607b      	str	r3, [r7, #4]
 8008cb8:	e001      	b.n	8008cbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cbe:	687b      	ldr	r3, [r7, #4]
	}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	2000521c 	.word	0x2000521c
 8008cd0:	20005238 	.word	0x20005238

08008cd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d069      	beq.n	8008dbe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cee:	4b36      	ldr	r3, [pc, #216]	@ (8008dc8 <xTaskPriorityInherit+0xf4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d259      	bcs.n	8008dac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	db06      	blt.n	8008d0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d00:	4b31      	ldr	r3, [pc, #196]	@ (8008dc8 <xTaskPriorityInherit+0xf4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	f1c3 0207 	rsb	r2, r3, #7
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6959      	ldr	r1, [r3, #20]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d16:	4613      	mov	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dcc <xTaskPriorityInherit+0xf8>)
 8008d20:	4413      	add	r3, r2
 8008d22:	4299      	cmp	r1, r3
 8008d24:	d13a      	bne.n	8008d9c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe f919 	bl	8006f62 <uxListRemove>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d115      	bne.n	8008d62 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3a:	4924      	ldr	r1, [pc, #144]	@ (8008dcc <xTaskPriorityInherit+0xf8>)
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xTaskPriorityInherit+0x8e>
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d50:	2201      	movs	r2, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	43da      	mvns	r2, r3
 8008d58:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <xTaskPriorityInherit+0xfc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd0 <xTaskPriorityInherit+0xfc>)
 8008d60:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d62:	4b19      	ldr	r3, [pc, #100]	@ (8008dc8 <xTaskPriorityInherit+0xf4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	2201      	movs	r2, #1
 8008d72:	409a      	lsls	r2, r3
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <xTaskPriorityInherit+0xfc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	4a15      	ldr	r2, [pc, #84]	@ (8008dd0 <xTaskPriorityInherit+0xfc>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a10      	ldr	r2, [pc, #64]	@ (8008dcc <xTaskPriorityInherit+0xf8>)
 8008d8c:	441a      	add	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fe f887 	bl	8006ea8 <vListInsertEnd>
 8008d9a:	e004      	b.n	8008da6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <xTaskPriorityInherit+0xf4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
 8008daa:	e008      	b.n	8008dbe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008db0:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <xTaskPriorityInherit+0xf4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d201      	bcs.n	8008dbe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20005110 	.word	0x20005110
 8008dcc:	20005114 	.word	0x20005114
 8008dd0:	20005218 	.word	0x20005218

08008dd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d074      	beq.n	8008ed4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dea:	4b3d      	ldr	r3, [pc, #244]	@ (8008ee0 <xTaskPriorityDisinherit+0x10c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d00d      	beq.n	8008e10 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	b672      	cpsid	i
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	b662      	cpsie	i
 8008e08:	60fb      	str	r3, [r7, #12]
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10d      	bne.n	8008e34 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	b672      	cpsid	i
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	b662      	cpsie	i
 8008e2c:	60bb      	str	r3, [r7, #8]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d044      	beq.n	8008ed4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d140      	bne.n	8008ed4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe f883 	bl	8006f62 <uxListRemove>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d115      	bne.n	8008e8e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e66:	491f      	ldr	r1, [pc, #124]	@ (8008ee4 <xTaskPriorityDisinherit+0x110>)
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xTaskPriorityDisinherit+0xba>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	43da      	mvns	r2, r3
 8008e84:	4b18      	ldr	r3, [pc, #96]	@ (8008ee8 <xTaskPriorityDisinherit+0x114>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	4a17      	ldr	r2, [pc, #92]	@ (8008ee8 <xTaskPriorityDisinherit+0x114>)
 8008e8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9a:	f1c3 0207 	rsb	r2, r3, #7
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	409a      	lsls	r2, r3
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee8 <xTaskPriorityDisinherit+0x114>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8008ee8 <xTaskPriorityDisinherit+0x114>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4a08      	ldr	r2, [pc, #32]	@ (8008ee4 <xTaskPriorityDisinherit+0x110>)
 8008ec2:	441a      	add	r2, r3
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7fd ffec 	bl	8006ea8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ed4:	697b      	ldr	r3, [r7, #20]
	}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20005110 	.word	0x20005110
 8008ee4:	20005114 	.word	0x20005114
 8008ee8:	20005218 	.word	0x20005218

08008eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008efa:	2301      	movs	r3, #1
 8008efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8089 	beq.w	8009018 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10d      	bne.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	b672      	cpsid	i
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	b662      	cpsie	i
 8008f22:	60fb      	str	r3, [r7, #12]
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	e7fd      	b.n	8008f26 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d902      	bls.n	8008f3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	e002      	b.n	8008f40 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	69fa      	ldr	r2, [r7, #28]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d066      	beq.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d161      	bne.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008f54:	4b32      	ldr	r3, [pc, #200]	@ (8009020 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d10d      	bne.n	8008f7a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	b672      	cpsid	i
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	b662      	cpsie	i
 8008f72:	60bb      	str	r3, [r7, #8]
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	e7fd      	b.n	8008f76 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	69fa      	ldr	r2, [r7, #28]
 8008f84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	db04      	blt.n	8008f98 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	f1c3 0207 	rsb	r2, r3, #7
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	6959      	ldr	r1, [r3, #20]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8009024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fa8:	4413      	add	r3, r2
 8008faa:	4299      	cmp	r1, r3
 8008fac:	d134      	bne.n	8009018 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fd ffd5 	bl	8006f62 <uxListRemove>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d115      	bne.n	8008fea <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc2:	4918      	ldr	r1, [pc, #96]	@ (8009024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	2201      	movs	r2, #1
 8008fda:	fa02 f303 	lsl.w	r3, r2, r3
 8008fde:	43da      	mvns	r2, r3
 8008fe0:	4b11      	ldr	r3, [pc, #68]	@ (8009028 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	4a10      	ldr	r2, [pc, #64]	@ (8009028 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008fe8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	2201      	movs	r2, #1
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8009028 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009000:	4613      	mov	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a06      	ldr	r2, [pc, #24]	@ (8009024 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800900a:	441a      	add	r2, r3
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	3304      	adds	r3, #4
 8009010:	4619      	mov	r1, r3
 8009012:	4610      	mov	r0, r2
 8009014:	f7fd ff48 	bl	8006ea8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009018:	bf00      	nop
 800901a:	3720      	adds	r7, #32
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20005110 	.word	0x20005110
 8009024:	20005114 	.word	0x20005114
 8009028:	20005218 	.word	0x20005218

0800902c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800902c:	b480      	push	{r7}
 800902e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <pvTaskIncrementMutexHeldCount+0x24>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009038:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <pvTaskIncrementMutexHeldCount+0x24>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800903e:	3201      	adds	r2, #1
 8009040:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8009042:	4b03      	ldr	r3, [pc, #12]	@ (8009050 <pvTaskIncrementMutexHeldCount+0x24>)
 8009044:	681b      	ldr	r3, [r3, #0]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	20005110 	.word	0x20005110

08009054 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800905e:	4b29      	ldr	r3, [pc, #164]	@ (8009104 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009064:	4b28      	ldr	r3, [pc, #160]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3304      	adds	r3, #4
 800906a:	4618      	mov	r0, r3
 800906c:	f7fd ff79 	bl	8006f62 <uxListRemove>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009076:	4b24      	ldr	r3, [pc, #144]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907c:	2201      	movs	r2, #1
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43da      	mvns	r2, r3
 8009084:	4b21      	ldr	r3, [pc, #132]	@ (800910c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4013      	ands	r3, r2
 800908a:	4a20      	ldr	r2, [pc, #128]	@ (800910c <prvAddCurrentTaskToDelayedList+0xb8>)
 800908c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d10a      	bne.n	80090ac <prvAddCurrentTaskToDelayedList+0x58>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d007      	beq.n	80090ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800909c:	4b1a      	ldr	r3, [pc, #104]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	481a      	ldr	r0, [pc, #104]	@ (8009110 <prvAddCurrentTaskToDelayedList+0xbc>)
 80090a6:	f7fd feff 	bl	8006ea8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090aa:	e026      	b.n	80090fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4413      	add	r3, r2
 80090b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090b4:	4b14      	ldr	r3, [pc, #80]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d209      	bcs.n	80090d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090c4:	4b13      	ldr	r3, [pc, #76]	@ (8009114 <prvAddCurrentTaskToDelayedList+0xc0>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fd ff0d 	bl	8006ef0 <vListInsert>
}
 80090d6:	e010      	b.n	80090fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009118 <prvAddCurrentTaskToDelayedList+0xc4>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fd ff03 	bl	8006ef0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090ea:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <prvAddCurrentTaskToDelayedList+0xc8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d202      	bcs.n	80090fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80090f4:	4a09      	ldr	r2, [pc, #36]	@ (800911c <prvAddCurrentTaskToDelayedList+0xc8>)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20005214 	.word	0x20005214
 8009108:	20005110 	.word	0x20005110
 800910c:	20005218 	.word	0x20005218
 8009110:	200051fc 	.word	0x200051fc
 8009114:	200051cc 	.word	0x200051cc
 8009118:	200051c8 	.word	0x200051c8
 800911c:	20005230 	.word	0x20005230

08009120 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3b04      	subs	r3, #4
 8009130:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3b04      	subs	r3, #4
 800913e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f023 0201 	bic.w	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3b04      	subs	r3, #4
 800914e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009150:	4a0c      	ldr	r2, [pc, #48]	@ (8009184 <pxPortInitialiseStack+0x64>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3b14      	subs	r3, #20
 800915a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3b04      	subs	r3, #4
 8009166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f06f 0202 	mvn.w	r2, #2
 800916e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	3b20      	subs	r3, #32
 8009174:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009176:	68fb      	ldr	r3, [r7, #12]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	08009189 	.word	0x08009189

08009188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009192:	4b15      	ldr	r3, [pc, #84]	@ (80091e8 <prvTaskExitError+0x60>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919a:	d00d      	beq.n	80091b8 <prvTaskExitError+0x30>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	b672      	cpsid	i
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	b662      	cpsie	i
 80091b0:	60fb      	str	r3, [r7, #12]
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <prvTaskExitError+0x2c>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	b672      	cpsid	i
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	b662      	cpsie	i
 80091cc:	60bb      	str	r3, [r7, #8]
}
 80091ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091d0:	bf00      	nop
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0fc      	beq.n	80091d2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000020 	.word	0x20000020
 80091ec:	00000000 	.word	0x00000000

080091f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091f0:	4b07      	ldr	r3, [pc, #28]	@ (8009210 <pxCurrentTCBConst2>)
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f380 8809 	msr	PSP, r0
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f04f 0000 	mov.w	r0, #0
 8009206:	f380 8811 	msr	BASEPRI, r0
 800920a:	4770      	bx	lr
 800920c:	f3af 8000 	nop.w

08009210 <pxCurrentTCBConst2>:
 8009210:	20005110 	.word	0x20005110
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009218:	4808      	ldr	r0, [pc, #32]	@ (800923c <prvPortStartFirstTask+0x24>)
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	6800      	ldr	r0, [r0, #0]
 800921e:	f380 8808 	msr	MSP, r0
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8814 	msr	CONTROL, r0
 800922a:	b662      	cpsie	i
 800922c:	b661      	cpsie	f
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	df00      	svc	0
 8009238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800923a:	bf00      	nop
 800923c:	e000ed08 	.word	0xe000ed08

08009240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009246:	4b37      	ldr	r3, [pc, #220]	@ (8009324 <xPortStartScheduler+0xe4>)
 8009248:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	22ff      	movs	r2, #255	@ 0xff
 8009256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009260:	78fb      	ldrb	r3, [r7, #3]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009268:	b2da      	uxtb	r2, r3
 800926a:	4b2f      	ldr	r3, [pc, #188]	@ (8009328 <xPortStartScheduler+0xe8>)
 800926c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800926e:	4b2f      	ldr	r3, [pc, #188]	@ (800932c <xPortStartScheduler+0xec>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009274:	e009      	b.n	800928a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009276:	4b2d      	ldr	r3, [pc, #180]	@ (800932c <xPortStartScheduler+0xec>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	4a2b      	ldr	r2, [pc, #172]	@ (800932c <xPortStartScheduler+0xec>)
 800927e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	b2db      	uxtb	r3, r3
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	b2db      	uxtb	r3, r3
 800928e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009292:	2b80      	cmp	r3, #128	@ 0x80
 8009294:	d0ef      	beq.n	8009276 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009296:	4b25      	ldr	r3, [pc, #148]	@ (800932c <xPortStartScheduler+0xec>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f1c3 0307 	rsb	r3, r3, #7
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d00d      	beq.n	80092be <xPortStartScheduler+0x7e>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a6:	b672      	cpsid	i
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	b662      	cpsie	i
 80092b6:	60bb      	str	r3, [r7, #8]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092be:	4b1b      	ldr	r3, [pc, #108]	@ (800932c <xPortStartScheduler+0xec>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	021b      	lsls	r3, r3, #8
 80092c4:	4a19      	ldr	r2, [pc, #100]	@ (800932c <xPortStartScheduler+0xec>)
 80092c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092c8:	4b18      	ldr	r3, [pc, #96]	@ (800932c <xPortStartScheduler+0xec>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092d0:	4a16      	ldr	r2, [pc, #88]	@ (800932c <xPortStartScheduler+0xec>)
 80092d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092dc:	4b14      	ldr	r3, [pc, #80]	@ (8009330 <xPortStartScheduler+0xf0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a13      	ldr	r2, [pc, #76]	@ (8009330 <xPortStartScheduler+0xf0>)
 80092e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092e8:	4b11      	ldr	r3, [pc, #68]	@ (8009330 <xPortStartScheduler+0xf0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a10      	ldr	r2, [pc, #64]	@ (8009330 <xPortStartScheduler+0xf0>)
 80092ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092f4:	f000 f8dc 	bl	80094b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009334 <xPortStartScheduler+0xf4>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092fe:	f000 f8fb 	bl	80094f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <xPortStartScheduler+0xf8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a0c      	ldr	r2, [pc, #48]	@ (8009338 <xPortStartScheduler+0xf8>)
 8009308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800930c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800930e:	f7ff ff83 	bl	8009218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009312:	f7ff fa65 	bl	80087e0 <vTaskSwitchContext>
	prvTaskExitError();
 8009316:	f7ff ff37 	bl	8009188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000e400 	.word	0xe000e400
 8009328:	2000523c 	.word	0x2000523c
 800932c:	20005240 	.word	0x20005240
 8009330:	e000ed20 	.word	0xe000ed20
 8009334:	20000020 	.word	0x20000020
 8009338:	e000ef34 	.word	0xe000ef34

0800933c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009346:	b672      	cpsid	i
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	b662      	cpsie	i
 8009356:	607b      	str	r3, [r7, #4]
}
 8009358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800935a:	4b11      	ldr	r3, [pc, #68]	@ (80093a0 <vPortEnterCritical+0x64>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	4a0f      	ldr	r2, [pc, #60]	@ (80093a0 <vPortEnterCritical+0x64>)
 8009362:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009364:	4b0e      	ldr	r3, [pc, #56]	@ (80093a0 <vPortEnterCritical+0x64>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d112      	bne.n	8009392 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800936c:	4b0d      	ldr	r3, [pc, #52]	@ (80093a4 <vPortEnterCritical+0x68>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <vPortEnterCritical+0x56>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	b672      	cpsid	i
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	b662      	cpsie	i
 800938a:	603b      	str	r3, [r7, #0]
}
 800938c:	bf00      	nop
 800938e:	bf00      	nop
 8009390:	e7fd      	b.n	800938e <vPortEnterCritical+0x52>
	}
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20000020 	.word	0x20000020
 80093a4:	e000ed04 	.word	0xe000ed04

080093a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093ae:	4b13      	ldr	r3, [pc, #76]	@ (80093fc <vPortExitCritical+0x54>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10d      	bne.n	80093d2 <vPortExitCritical+0x2a>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ba:	b672      	cpsid	i
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	b662      	cpsie	i
 80093ca:	607b      	str	r3, [r7, #4]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80093d2:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <vPortExitCritical+0x54>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <vPortExitCritical+0x54>)
 80093da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093dc:	4b07      	ldr	r3, [pc, #28]	@ (80093fc <vPortExitCritical+0x54>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <vPortExitCritical+0x48>
 80093e4:	2300      	movs	r3, #0
 80093e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	f383 8811 	msr	BASEPRI, r3
}
 80093ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20000020 	.word	0x20000020

08009400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009400:	f3ef 8009 	mrs	r0, PSP
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	4b15      	ldr	r3, [pc, #84]	@ (8009460 <pxCurrentTCBConst>)
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	f01e 0f10 	tst.w	lr, #16
 8009410:	bf08      	it	eq
 8009412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800941a:	6010      	str	r0, [r2, #0]
 800941c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009424:	b672      	cpsid	i
 8009426:	f380 8811 	msr	BASEPRI, r0
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	b662      	cpsie	i
 8009434:	f7ff f9d4 	bl	80087e0 <vTaskSwitchContext>
 8009438:	f04f 0000 	mov.w	r0, #0
 800943c:	f380 8811 	msr	BASEPRI, r0
 8009440:	bc09      	pop	{r0, r3}
 8009442:	6819      	ldr	r1, [r3, #0]
 8009444:	6808      	ldr	r0, [r1, #0]
 8009446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	f01e 0f10 	tst.w	lr, #16
 800944e:	bf08      	it	eq
 8009450:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009454:	f380 8809 	msr	PSP, r0
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <pxCurrentTCBConst>:
 8009460:	20005110 	.word	0x20005110
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop

08009468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	b672      	cpsid	i
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	b662      	cpsie	i
 8009482:	607b      	str	r3, [r7, #4]
}
 8009484:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009486:	f7ff f8ef 	bl	8008668 <xTaskIncrementTick>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <SysTick_Handler+0x44>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f383 8811 	msr	BASEPRI, r3
}
 80094a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	e000ed04 	.word	0xe000ed04

080094b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094b4:	4b0b      	ldr	r3, [pc, #44]	@ (80094e4 <vPortSetupTimerInterrupt+0x34>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094ba:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <vPortSetupTimerInterrupt+0x38>)
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <vPortSetupTimerInterrupt+0x3c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a0a      	ldr	r2, [pc, #40]	@ (80094f0 <vPortSetupTimerInterrupt+0x40>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	099b      	lsrs	r3, r3, #6
 80094cc:	4a09      	ldr	r2, [pc, #36]	@ (80094f4 <vPortSetupTimerInterrupt+0x44>)
 80094ce:	3b01      	subs	r3, #1
 80094d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094d2:	4b04      	ldr	r3, [pc, #16]	@ (80094e4 <vPortSetupTimerInterrupt+0x34>)
 80094d4:	2207      	movs	r2, #7
 80094d6:	601a      	str	r2, [r3, #0]
}
 80094d8:	bf00      	nop
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	e000e010 	.word	0xe000e010
 80094e8:	e000e018 	.word	0xe000e018
 80094ec:	20000000 	.word	0x20000000
 80094f0:	10624dd3 	.word	0x10624dd3
 80094f4:	e000e014 	.word	0xe000e014

080094f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009508 <vPortEnableVFP+0x10>
 80094fc:	6801      	ldr	r1, [r0, #0]
 80094fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009502:	6001      	str	r1, [r0, #0]
 8009504:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009506:	bf00      	nop
 8009508:	e000ed88 	.word	0xe000ed88

0800950c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009512:	f3ef 8305 	mrs	r3, IPSR
 8009516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b0f      	cmp	r3, #15
 800951c:	d917      	bls.n	800954e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800951e:	4a1a      	ldr	r2, [pc, #104]	@ (8009588 <vPortValidateInterruptPriority+0x7c>)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009528:	4b18      	ldr	r3, [pc, #96]	@ (800958c <vPortValidateInterruptPriority+0x80>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	7afa      	ldrb	r2, [r7, #11]
 800952e:	429a      	cmp	r2, r3
 8009530:	d20d      	bcs.n	800954e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	607b      	str	r3, [r7, #4]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800954e:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <vPortValidateInterruptPriority+0x84>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009556:	4b0f      	ldr	r3, [pc, #60]	@ (8009594 <vPortValidateInterruptPriority+0x88>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d90d      	bls.n	800957a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	603b      	str	r3, [r7, #0]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <vPortValidateInterruptPriority+0x6a>
	}
 800957a:	bf00      	nop
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	e000e3f0 	.word	0xe000e3f0
 800958c:	2000523c 	.word	0x2000523c
 8009590:	e000ed0c 	.word	0xe000ed0c
 8009594:	20005240 	.word	0x20005240

08009598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	@ 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095a4:	f7fe ff90 	bl	80084c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095a8:	4b5d      	ldr	r3, [pc, #372]	@ (8009720 <pvPortMalloc+0x188>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095b0:	f000 f920 	bl	80097f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095b4:	4b5b      	ldr	r3, [pc, #364]	@ (8009724 <pvPortMalloc+0x18c>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4013      	ands	r3, r2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8094 	bne.w	80096ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d020      	beq.n	800960a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80095c8:	2208      	movs	r2, #8
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4413      	add	r3, r2
 80095ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d017      	beq.n	800960a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f023 0307 	bic.w	r3, r3, #7
 80095e0:	3308      	adds	r3, #8
 80095e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00d      	beq.n	800960a <pvPortMalloc+0x72>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	e7fd      	b.n	8009606 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d06c      	beq.n	80096ea <pvPortMalloc+0x152>
 8009610:	4b45      	ldr	r3, [pc, #276]	@ (8009728 <pvPortMalloc+0x190>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d867      	bhi.n	80096ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800961a:	4b44      	ldr	r3, [pc, #272]	@ (800972c <pvPortMalloc+0x194>)
 800961c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800961e:	4b43      	ldr	r3, [pc, #268]	@ (800972c <pvPortMalloc+0x194>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009624:	e004      	b.n	8009630 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	429a      	cmp	r2, r3
 8009638:	d903      	bls.n	8009642 <pvPortMalloc+0xaa>
 800963a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1f1      	bne.n	8009626 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009642:	4b37      	ldr	r3, [pc, #220]	@ (8009720 <pvPortMalloc+0x188>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009648:	429a      	cmp	r2, r3
 800964a:	d04e      	beq.n	80096ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2208      	movs	r2, #8
 8009652:	4413      	add	r3, r2
 8009654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	2308      	movs	r3, #8
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	429a      	cmp	r2, r3
 800966c:	d922      	bls.n	80096b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800966e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4413      	add	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00d      	beq.n	800969c <pvPortMalloc+0x104>
	__asm volatile
 8009680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009684:	b672      	cpsid	i
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	b662      	cpsie	i
 8009694:	613b      	str	r3, [r7, #16]
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	e7fd      	b.n	8009698 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096ae:	69b8      	ldr	r0, [r7, #24]
 80096b0:	f000 f902 	bl	80098b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009728 <pvPortMalloc+0x190>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	4a1a      	ldr	r2, [pc, #104]	@ (8009728 <pvPortMalloc+0x190>)
 80096c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096c2:	4b19      	ldr	r3, [pc, #100]	@ (8009728 <pvPortMalloc+0x190>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009730 <pvPortMalloc+0x198>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d203      	bcs.n	80096d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096ce:	4b16      	ldr	r3, [pc, #88]	@ (8009728 <pvPortMalloc+0x190>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a17      	ldr	r2, [pc, #92]	@ (8009730 <pvPortMalloc+0x198>)
 80096d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	4b12      	ldr	r3, [pc, #72]	@ (8009724 <pvPortMalloc+0x18c>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	431a      	orrs	r2, r3
 80096e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096ea:	f7fe fefb 	bl	80084e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f003 0307 	and.w	r3, r3, #7
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00d      	beq.n	8009714 <pvPortMalloc+0x17c>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fc:	b672      	cpsid	i
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	b662      	cpsie	i
 800970c:	60fb      	str	r3, [r7, #12]
}
 800970e:	bf00      	nop
 8009710:	bf00      	nop
 8009712:	e7fd      	b.n	8009710 <pvPortMalloc+0x178>
	return pvReturn;
 8009714:	69fb      	ldr	r3, [r7, #28]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3728      	adds	r7, #40	@ 0x28
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	2000b55c 	.word	0x2000b55c
 8009724:	2000b568 	.word	0x2000b568
 8009728:	2000b560 	.word	0x2000b560
 800972c:	2000b554 	.word	0x2000b554
 8009730:	2000b564 	.word	0x2000b564

08009734 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d04e      	beq.n	80097e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009746:	2308      	movs	r3, #8
 8009748:	425b      	negs	r3, r3
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4413      	add	r3, r2
 800974e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	4b24      	ldr	r3, [pc, #144]	@ (80097ec <vPortFree+0xb8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4013      	ands	r3, r2
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10d      	bne.n	800977e <vPortFree+0x4a>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	b672      	cpsid	i
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	b662      	cpsie	i
 8009776:	60fb      	str	r3, [r7, #12]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00d      	beq.n	80097a2 <vPortFree+0x6e>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	60bb      	str	r3, [r7, #8]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	4b11      	ldr	r3, [pc, #68]	@ (80097ec <vPortFree+0xb8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d019      	beq.n	80097e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d115      	bne.n	80097e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <vPortFree+0xb8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	43db      	mvns	r3, r3
 80097c2:	401a      	ands	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097c8:	f7fe fe7e 	bl	80084c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <vPortFree+0xbc>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a06      	ldr	r2, [pc, #24]	@ (80097f0 <vPortFree+0xbc>)
 80097d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097da:	6938      	ldr	r0, [r7, #16]
 80097dc:	f000 f86c 	bl	80098b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80097e0:	f7fe fe80 	bl	80084e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097e4:	bf00      	nop
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	2000b568 	.word	0x2000b568
 80097f0:	2000b560 	.word	0x2000b560

080097f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097fa:	f246 3310 	movw	r3, #25360	@ 0x6310
 80097fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009800:	4b27      	ldr	r3, [pc, #156]	@ (80098a0 <prvHeapInit+0xac>)
 8009802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00c      	beq.n	8009828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3307      	adds	r3, #7
 8009812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0307 	bic.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	4a1f      	ldr	r2, [pc, #124]	@ (80098a0 <prvHeapInit+0xac>)
 8009824:	4413      	add	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800982c:	4a1d      	ldr	r2, [pc, #116]	@ (80098a4 <prvHeapInit+0xb0>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009832:	4b1c      	ldr	r3, [pc, #112]	@ (80098a4 <prvHeapInit+0xb0>)
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009840:	2208      	movs	r2, #8
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1a9b      	subs	r3, r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4a15      	ldr	r2, [pc, #84]	@ (80098a8 <prvHeapInit+0xb4>)
 8009854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009856:	4b14      	ldr	r3, [pc, #80]	@ (80098a8 <prvHeapInit+0xb4>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2200      	movs	r2, #0
 800985c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800985e:	4b12      	ldr	r3, [pc, #72]	@ (80098a8 <prvHeapInit+0xb4>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <prvHeapInit+0xb4>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	4a0a      	ldr	r2, [pc, #40]	@ (80098ac <prvHeapInit+0xb8>)
 8009882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a09      	ldr	r2, [pc, #36]	@ (80098b0 <prvHeapInit+0xbc>)
 800988a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800988c:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <prvHeapInit+0xc0>)
 800988e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009892:	601a      	str	r2, [r3, #0]
}
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	20005244 	.word	0x20005244
 80098a4:	2000b554 	.word	0x2000b554
 80098a8:	2000b55c 	.word	0x2000b55c
 80098ac:	2000b564 	.word	0x2000b564
 80098b0:	2000b560 	.word	0x2000b560
 80098b4:	2000b568 	.word	0x2000b568

080098b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098c0:	4b28      	ldr	r3, [pc, #160]	@ (8009964 <prvInsertBlockIntoFreeList+0xac>)
 80098c2:	60fb      	str	r3, [r7, #12]
 80098c4:	e002      	b.n	80098cc <prvInsertBlockIntoFreeList+0x14>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d8f7      	bhi.n	80098c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	4413      	add	r3, r2
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d108      	bne.n	80098fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	441a      	add	r2, r3
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	441a      	add	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d118      	bne.n	8009940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d00d      	beq.n	8009936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	441a      	add	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	e008      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009936:	4b0c      	ldr	r3, [pc, #48]	@ (8009968 <prvInsertBlockIntoFreeList+0xb0>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e003      	b.n	8009948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d002      	beq.n	8009956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	2000b554 	.word	0x2000b554
 8009968:	2000b55c 	.word	0x2000b55c

0800996c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	330c      	adds	r3, #12
 800997c:	461a      	mov	r2, r3
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 fb67 	bl	800c054 <tcpip_send_msg_wait_sem>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800998a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009998:	e001      	b.n	800999e <netconn_apimsg+0x32>
  }
  return err;
 800999a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	@ 0x30
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4603      	mov	r3, r0
 80099b0:	603a      	str	r2, [r7, #0]
 80099b2:	71fb      	strb	r3, [r7, #7]
 80099b4:	460b      	mov	r3, r1
 80099b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 f951 	bl	800ac64 <netconn_alloc>
 80099c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80099c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d054      	beq.n	8009a74 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80099ca:	79bb      	ldrb	r3, [r7, #6]
 80099cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80099ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80099d2:	f107 0308 	add.w	r3, r7, #8
 80099d6:	4619      	mov	r1, r3
 80099d8:	4829      	ldr	r0, [pc, #164]	@ (8009a80 <netconn_new_with_proto_and_callback+0xd8>)
 80099da:	f7ff ffc7 	bl	800996c <netconn_apimsg>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80099e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d043      	beq.n	8009a74 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80099ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <netconn_new_with_proto_and_callback+0x58>
 80099f4:	4b23      	ldr	r3, [pc, #140]	@ (8009a84 <netconn_new_with_proto_and_callback+0xdc>)
 80099f6:	22a3      	movs	r2, #163	@ 0xa3
 80099f8:	4923      	ldr	r1, [pc, #140]	@ (8009a88 <netconn_new_with_proto_and_callback+0xe0>)
 80099fa:	4824      	ldr	r0, [pc, #144]	@ (8009a8c <netconn_new_with_proto_and_callback+0xe4>)
 80099fc:	f00e fd34 	bl	8018468 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	3310      	adds	r3, #16
 8009a04:	4618      	mov	r0, r3
 8009a06:	f00e faf6 	bl	8017ff6 <sys_mbox_valid>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d105      	bne.n	8009a1c <netconn_new_with_proto_and_callback+0x74>
 8009a10:	4b1c      	ldr	r3, [pc, #112]	@ (8009a84 <netconn_new_with_proto_and_callback+0xdc>)
 8009a12:	22a4      	movs	r2, #164	@ 0xa4
 8009a14:	491e      	ldr	r1, [pc, #120]	@ (8009a90 <netconn_new_with_proto_and_callback+0xe8>)
 8009a16:	481d      	ldr	r0, [pc, #116]	@ (8009a8c <netconn_new_with_proto_and_callback+0xe4>)
 8009a18:	f00e fd26 	bl	8018468 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1e:	3314      	adds	r3, #20
 8009a20:	4618      	mov	r0, r3
 8009a22:	f00e fae8 	bl	8017ff6 <sys_mbox_valid>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <netconn_new_with_proto_and_callback+0x90>
 8009a2c:	4b15      	ldr	r3, [pc, #84]	@ (8009a84 <netconn_new_with_proto_and_callback+0xdc>)
 8009a2e:	22a6      	movs	r2, #166	@ 0xa6
 8009a30:	4918      	ldr	r1, [pc, #96]	@ (8009a94 <netconn_new_with_proto_and_callback+0xec>)
 8009a32:	4816      	ldr	r0, [pc, #88]	@ (8009a8c <netconn_new_with_proto_and_callback+0xe4>)
 8009a34:	f00e fd18 	bl	8018468 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	330c      	adds	r3, #12
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f00e fb6b 	bl	8018118 <sys_sem_valid>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d105      	bne.n	8009a54 <netconn_new_with_proto_and_callback+0xac>
 8009a48:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <netconn_new_with_proto_and_callback+0xdc>)
 8009a4a:	22a9      	movs	r2, #169	@ 0xa9
 8009a4c:	4912      	ldr	r1, [pc, #72]	@ (8009a98 <netconn_new_with_proto_and_callback+0xf0>)
 8009a4e:	480f      	ldr	r0, [pc, #60]	@ (8009a8c <netconn_new_with_proto_and_callback+0xe4>)
 8009a50:	f00e fd0a 	bl	8018468 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a56:	330c      	adds	r3, #12
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f00e fb50 	bl	80180fe <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	3310      	adds	r3, #16
 8009a62:	4618      	mov	r0, r3
 8009a64:	f00e fa40 	bl	8017ee8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6a:	2007      	movs	r0, #7
 8009a6c:	f003 fef0 	bl	800d850 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	e000      	b.n	8009a76 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3730      	adds	r7, #48	@ 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	0800ac39 	.word	0x0800ac39
 8009a84:	08019908 	.word	0x08019908
 8009a88:	0801993c 	.word	0x0801993c
 8009a8c:	08019960 	.word	0x08019960
 8009a90:	08019988 	.word	0x08019988
 8009a94:	080199a0 	.word	0x080199a0
 8009a98:	080199c4 	.word	0x080199c4

08009a9c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08c      	sub	sp, #48	@ 0x30
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e014      	b.n	8009ad8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ab2:	2329      	movs	r3, #41	@ 0x29
 8009ab4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009ab6:	f107 030c 	add.w	r3, r7, #12
 8009aba:	4619      	mov	r1, r3
 8009abc:	4808      	ldr	r0, [pc, #32]	@ (8009ae0 <netconn_prepare_delete+0x44>)
 8009abe:	f7ff ff55 	bl	800996c <netconn_apimsg>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009ac8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <netconn_prepare_delete+0x3a>
    return err;
 8009ad0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009ad4:	e000      	b.n	8009ad8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3730      	adds	r7, #48	@ 0x30
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	0800b1a5 	.word	0x0800b1a5

08009ae4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <netconn_delete+0x12>
    return ERR_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	e00d      	b.n	8009b12 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7ff ffd0 	bl	8009a9c <netconn_prepare_delete>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <netconn_delete+0x2a>
    netconn_free(conn);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f919 	bl	800ad40 <netconn_free>
  }
  return err;
 8009b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08e      	sub	sp, #56	@ 0x38
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <netconn_bind+0x28>
 8009b30:	4b11      	ldr	r3, [pc, #68]	@ (8009b78 <netconn_bind+0x5c>)
 8009b32:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8009b36:	4911      	ldr	r1, [pc, #68]	@ (8009b7c <netconn_bind+0x60>)
 8009b38:	4811      	ldr	r0, [pc, #68]	@ (8009b80 <netconn_bind+0x64>)
 8009b3a:	f00e fc95 	bl	8018468 <iprintf>
 8009b3e:	f06f 030f 	mvn.w	r3, #15
 8009b42:	e015      	b.n	8009b70 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b84 <netconn_bind+0x68>)
 8009b4c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009b56:	88fb      	ldrh	r3, [r7, #6]
 8009b58:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8009b5a:	f107 0314 	add.w	r3, r7, #20
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4809      	ldr	r0, [pc, #36]	@ (8009b88 <netconn_bind+0x6c>)
 8009b62:	f7ff ff03 	bl	800996c <netconn_apimsg>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009b6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3738      	adds	r7, #56	@ 0x38
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	08019908 	.word	0x08019908
 8009b7c:	08019a40 	.word	0x08019a40
 8009b80:	08019960 	.word	0x08019960
 8009b84:	0801ddf0 	.word	0x0801ddf0
 8009b88:	0800b36d 	.word	0x0800b36d

08009b8c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b08c      	sub	sp, #48	@ 0x30
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <netconn_listen_with_backlog+0x26>
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <netconn_listen_with_backlog+0x48>)
 8009ba0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009ba4:	490c      	ldr	r1, [pc, #48]	@ (8009bd8 <netconn_listen_with_backlog+0x4c>)
 8009ba6:	480d      	ldr	r0, [pc, #52]	@ (8009bdc <netconn_listen_with_backlog+0x50>)
 8009ba8:	f00e fc5e 	bl	8018468 <iprintf>
 8009bac:	f06f 030f 	mvn.w	r3, #15
 8009bb0:	e00c      	b.n	8009bcc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4808      	ldr	r0, [pc, #32]	@ (8009be0 <netconn_listen_with_backlog+0x54>)
 8009bbe:	f7ff fed5 	bl	800996c <netconn_apimsg>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3730      	adds	r7, #48	@ 0x30
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	08019908 	.word	0x08019908
 8009bd8:	08019ac0 	.word	0x08019ac0
 8009bdc:	08019960 	.word	0x08019960
 8009be0:	0800b3e1 	.word	0x0800b3e1

08009be4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d109      	bne.n	8009c08 <netconn_accept+0x24>
 8009bf4:	4b3d      	ldr	r3, [pc, #244]	@ (8009cec <netconn_accept+0x108>)
 8009bf6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009bfa:	493d      	ldr	r1, [pc, #244]	@ (8009cf0 <netconn_accept+0x10c>)
 8009bfc:	483d      	ldr	r0, [pc, #244]	@ (8009cf4 <netconn_accept+0x110>)
 8009bfe:	f00e fc33 	bl	8018468 <iprintf>
 8009c02:	f06f 030f 	mvn.w	r3, #15
 8009c06:	e06c      	b.n	8009ce2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <netconn_accept+0x44>
 8009c14:	4b35      	ldr	r3, [pc, #212]	@ (8009cec <netconn_accept+0x108>)
 8009c16:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8009c1a:	4937      	ldr	r1, [pc, #220]	@ (8009cf8 <netconn_accept+0x114>)
 8009c1c:	4835      	ldr	r0, [pc, #212]	@ (8009cf4 <netconn_accept+0x110>)
 8009c1e:	f00e fc23 	bl	8018468 <iprintf>
 8009c22:	f06f 030f 	mvn.w	r3, #15
 8009c26:	e05c      	b.n	8009ce2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fb9a 	bl	800a362 <netconn_err>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009c32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8009c3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c3e:	e050      	b.n	8009ce2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3314      	adds	r3, #20
 8009c44:	4618      	mov	r0, r3
 8009c46:	f00e f9d6 	bl	8017ff6 <sys_mbox_valid>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <netconn_accept+0x78>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7f1b      	ldrb	r3, [r3, #28]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009c5c:	f06f 030e 	mvn.w	r3, #14
 8009c60:	e03f      	b.n	8009ce2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7f1b      	ldrb	r3, [r3, #28]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00e      	beq.n	8009c8c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3314      	adds	r3, #20
 8009c72:	f107 020c 	add.w	r2, r7, #12
 8009c76:	4611      	mov	r1, r2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f00e f9a0 	bl	8017fbe <sys_arch_mbox_tryfetch>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d10a      	bne.n	8009c9c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009c86:	f06f 0306 	mvn.w	r3, #6
 8009c8a:	e02a      	b.n	8009ce2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3314      	adds	r3, #20
 8009c90:	f107 010c 	add.w	r1, r7, #12
 8009c94:	2200      	movs	r2, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f00e f952 	bl	8017f40 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d005      	beq.n	8009cb0 <netconn_accept+0xcc>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2101      	movs	r1, #1
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f107 0213 	add.w	r2, r7, #19
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fba3 	bl	800a404 <lwip_netconn_is_err_msg>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009cc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cc8:	e00b      	b.n	8009ce2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d102      	bne.n	8009cd6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009cd0:	f06f 030e 	mvn.w	r3, #14
 8009cd4:	e005      	b.n	8009ce2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009ce0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	08019908 	.word	0x08019908
 8009cf0:	08019ae0 	.word	0x08019ae0
 8009cf4:	08019960 	.word	0x08019960
 8009cf8:	08019b00 	.word	0x08019b00

08009cfc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	4613      	mov	r3, r2
 8009d08:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <netconn_recv_data+0x2c>
 8009d14:	4b58      	ldr	r3, [pc, #352]	@ (8009e78 <netconn_recv_data+0x17c>)
 8009d16:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8009d1a:	4958      	ldr	r1, [pc, #352]	@ (8009e7c <netconn_recv_data+0x180>)
 8009d1c:	4858      	ldr	r0, [pc, #352]	@ (8009e80 <netconn_recv_data+0x184>)
 8009d1e:	f00e fba3 	bl	8018468 <iprintf>
 8009d22:	f06f 030f 	mvn.w	r3, #15
 8009d26:	e0a2      	b.n	8009e6e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <netconn_recv_data+0x4c>
 8009d34:	4b50      	ldr	r3, [pc, #320]	@ (8009e78 <netconn_recv_data+0x17c>)
 8009d36:	f240 224a 	movw	r2, #586	@ 0x24a
 8009d3a:	4952      	ldr	r1, [pc, #328]	@ (8009e84 <netconn_recv_data+0x188>)
 8009d3c:	4850      	ldr	r0, [pc, #320]	@ (8009e80 <netconn_recv_data+0x184>)
 8009d3e:	f00e fb93 	bl	8018468 <iprintf>
 8009d42:	f06f 030f 	mvn.w	r3, #15
 8009d46:	e092      	b.n	8009e6e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3310      	adds	r3, #16
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f00e f952 	bl	8017ff6 <sys_mbox_valid>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10e      	bne.n	8009d76 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 fb02 	bl	800a362 <netconn_err>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009d62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009d6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009d6e:	e07e      	b.n	8009e6e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009d70:	f06f 030a 	mvn.w	r3, #10
 8009d74:	e07b      	b.n	8009e6e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	7f1b      	ldrb	r3, [r3, #28]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10f      	bne.n	8009da2 <netconn_recv_data+0xa6>
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	f003 0304 	and.w	r3, r3, #4
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	7f1b      	ldrb	r3, [r3, #28]
 8009d90:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d023      	beq.n	8009dea <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3310      	adds	r3, #16
 8009da6:	f107 0218 	add.w	r2, r7, #24
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f00e f906 	bl	8017fbe <sys_arch_mbox_tryfetch>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d11f      	bne.n	8009dfa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fad1 	bl	800a362 <netconn_err>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009dc4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009dcc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009dd0:	e04d      	b.n	8009e6e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	7f1b      	ldrb	r3, [r3, #28]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009dde:	f06f 030a 	mvn.w	r3, #10
 8009de2:	e044      	b.n	8009e6e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009de4:	f06f 0306 	mvn.w	r3, #6
 8009de8:	e041      	b.n	8009e6e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3310      	adds	r3, #16
 8009dee:	f107 0118 	add.w	r1, r7, #24
 8009df2:	2200      	movs	r2, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f00e f8a3 	bl	8017f40 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d117      	bne.n	8009e36 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f107 0217 	add.w	r2, r7, #23
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 faf8 	bl	800a404 <lwip_netconn_is_err_msg>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d009      	beq.n	8009e2e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8009e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e1e:	f113 0f0f 	cmn.w	r3, #15
 8009e22:	d101      	bne.n	8009e28 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e022      	b.n	8009e6e <netconn_recv_data+0x172>
      }
      return err;
 8009e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e2c:	e01f      	b.n	8009e6e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	891b      	ldrh	r3, [r3, #8]
 8009e32:	83fb      	strh	r3, [r7, #30]
 8009e34:	e00d      	b.n	8009e52 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <netconn_recv_data+0x14e>
 8009e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <netconn_recv_data+0x17c>)
 8009e3e:	f240 2291 	movw	r2, #657	@ 0x291
 8009e42:	4911      	ldr	r1, [pc, #68]	@ (8009e88 <netconn_recv_data+0x18c>)
 8009e44:	480e      	ldr	r0, [pc, #56]	@ (8009e80 <netconn_recv_data+0x184>)
 8009e46:	f00e fb0f 	bl	8018468 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	891b      	ldrh	r3, [r3, #8]
 8009e50:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <netconn_recv_data+0x16a>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5e:	8bfa      	ldrh	r2, [r7, #30]
 8009e60:	2101      	movs	r1, #1
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	08019908 	.word	0x08019908
 8009e7c:	08019b20 	.word	0x08019b20
 8009e80:	08019960 	.word	0x08019960
 8009e84:	08019b40 	.word	0x08019b40
 8009e88:	08019b5c 	.word	0x08019b5c

08009e8c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d005      	beq.n	8009eaa <netconn_tcp_recvd_msg+0x1e>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ea6:	2b10      	cmp	r3, #16
 8009ea8:	d009      	beq.n	8009ebe <netconn_tcp_recvd_msg+0x32>
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8009edc <netconn_tcp_recvd_msg+0x50>)
 8009eac:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8009eb0:	490b      	ldr	r1, [pc, #44]	@ (8009ee0 <netconn_tcp_recvd_msg+0x54>)
 8009eb2:	480c      	ldr	r0, [pc, #48]	@ (8009ee4 <netconn_tcp_recvd_msg+0x58>)
 8009eb4:	f00e fad8 	bl	8018468 <iprintf>
 8009eb8:	f06f 030f 	mvn.w	r3, #15
 8009ebc:	e00a      	b.n	8009ed4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4806      	ldr	r0, [pc, #24]	@ (8009ee8 <netconn_tcp_recvd_msg+0x5c>)
 8009ece:	f7ff fd4d 	bl	800996c <netconn_apimsg>
 8009ed2:	4603      	mov	r3, r0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	08019908 	.word	0x08019908
 8009ee0:	08019b68 	.word	0x08019b68
 8009ee4:	08019960 	.word	0x08019960
 8009ee8:	0800b5ab 	.word	0x0800b5ab

08009eec <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b090      	sub	sp, #64	@ 0x40
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3310      	adds	r3, #16
 8009efe:	4618      	mov	r0, r3
 8009f00:	f00e f879 	bl	8017ff6 <sys_mbox_valid>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009f0a:	f06f 030a 	mvn.w	r3, #10
 8009f0e:	e06d      	b.n	8009fec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	7f1b      	ldrb	r3, [r3, #28]
 8009f14:	b25b      	sxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	da07      	bge.n	8009f2a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	7f1b      	ldrb	r3, [r3, #28]
 8009f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009f28:	e039      	b.n	8009f9e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fee3 	bl	8009cfc <netconn_recv_data>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009f3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009f44:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009f48:	e050      	b.n	8009fec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10e      	bne.n	8009f78 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <netconn_recv_data_tcp+0x7a>
 8009f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f62:	891b      	ldrh	r3, [r3, #8]
 8009f64:	e000      	b.n	8009f68 <netconn_recv_data_tcp+0x7c>
 8009f66:	2301      	movs	r3, #1
 8009f68:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009f6a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f6c:	f107 0214 	add.w	r2, r7, #20
 8009f70:	4619      	mov	r1, r3
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7ff ff8a 	bl	8009e8c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d134      	bne.n	8009fe8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d009      	beq.n	8009f9c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	7f1b      	ldrb	r3, [r3, #28]
 8009f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009f96:	f06f 0306 	mvn.w	r3, #6
 8009f9a:	e027      	b.n	8009fec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009f9c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <netconn_recv_data_tcp+0xc6>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	2200      	movs	r2, #0
 8009fac:	2101      	movs	r1, #1
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10f      	bne.n	8009fda <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f9d1 	bl	800a362 <netconn_err>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009fc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <netconn_recv_data_tcp+0xe8>
          return err;
 8009fce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009fd2:	e00b      	b.n	8009fec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009fd4:	f06f 030d 	mvn.w	r3, #13
 8009fd8:	e008      	b.n	8009fec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009fda:	2101      	movs	r1, #1
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 f983 	bl	800a2e8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009fe2:	f06f 030e 	mvn.w	r3, #14
 8009fe6:	e001      	b.n	8009fec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009fe8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3740      	adds	r7, #64	@ 0x40
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d109      	bne.n	800a01c <netconn_recv+0x28>
 800a008:	4b32      	ldr	r3, [pc, #200]	@ (800a0d4 <netconn_recv+0xe0>)
 800a00a:	f240 3263 	movw	r2, #867	@ 0x363
 800a00e:	4932      	ldr	r1, [pc, #200]	@ (800a0d8 <netconn_recv+0xe4>)
 800a010:	4832      	ldr	r0, [pc, #200]	@ (800a0dc <netconn_recv+0xe8>)
 800a012:	f00e fa29 	bl	8018468 <iprintf>
 800a016:	f06f 030f 	mvn.w	r3, #15
 800a01a:	e056      	b.n	800a0ca <netconn_recv+0xd6>
  *new_buf = NULL;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2200      	movs	r2, #0
 800a020:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d109      	bne.n	800a03c <netconn_recv+0x48>
 800a028:	4b2a      	ldr	r3, [pc, #168]	@ (800a0d4 <netconn_recv+0xe0>)
 800a02a:	f240 3265 	movw	r2, #869	@ 0x365
 800a02e:	492c      	ldr	r1, [pc, #176]	@ (800a0e0 <netconn_recv+0xec>)
 800a030:	482a      	ldr	r0, [pc, #168]	@ (800a0dc <netconn_recv+0xe8>)
 800a032:	f00e fa19 	bl	8018468 <iprintf>
 800a036:	f06f 030f 	mvn.w	r3, #15
 800a03a:	e046      	b.n	800a0ca <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a044:	2b10      	cmp	r3, #16
 800a046:	d13a      	bne.n	800a0be <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a04c:	2006      	movs	r0, #6
 800a04e:	f003 fb89 	bl	800d764 <memp_malloc>
 800a052:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d102      	bne.n	800a060 <netconn_recv+0x6c>
      return ERR_MEM;
 800a05a:	f04f 33ff 	mov.w	r3, #4294967295
 800a05e:	e034      	b.n	800a0ca <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a060:	f107 030c 	add.w	r3, r7, #12
 800a064:	2200      	movs	r2, #0
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff ff3f 	bl	8009eec <netconn_recv_data_tcp>
 800a06e:	4603      	mov	r3, r0
 800a070:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d006      	beq.n	800a088 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	2006      	movs	r0, #6
 800a07e:	f003 fbe7 	bl	800d850 <memp_free>
      return err;
 800a082:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a086:	e020      	b.n	800a0ca <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <netconn_recv+0xa8>
 800a08e:	4b11      	ldr	r3, [pc, #68]	@ (800a0d4 <netconn_recv+0xe0>)
 800a090:	f240 3279 	movw	r2, #889	@ 0x379
 800a094:	4913      	ldr	r1, [pc, #76]	@ (800a0e4 <netconn_recv+0xf0>)
 800a096:	4811      	ldr	r0, [pc, #68]	@ (800a0dc <netconn_recv+0xe8>)
 800a098:	f00e f9e6 	bl	8018468 <iprintf>

    buf->p = p;
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e005      	b.n	800a0ca <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fe1a 	bl	8009cfc <netconn_recv_data>
 800a0c8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	08019908 	.word	0x08019908
 800a0d8:	08019b20 	.word	0x08019b20
 800a0dc:	08019960 	.word	0x08019960
 800a0e0:	08019b40 	.word	0x08019b40
 800a0e4:	08019bb8 	.word	0x08019bb8

0800a0e8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08c      	sub	sp, #48	@ 0x30
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d109      	bne.n	800a10c <netconn_send+0x24>
 800a0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a134 <netconn_send+0x4c>)
 800a0fa:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800a0fe:	490e      	ldr	r1, [pc, #56]	@ (800a138 <netconn_send+0x50>)
 800a100:	480e      	ldr	r0, [pc, #56]	@ (800a13c <netconn_send+0x54>)
 800a102:	f00e f9b1 	bl	8018468 <iprintf>
 800a106:	f06f 030f 	mvn.w	r3, #15
 800a10a:	e00e      	b.n	800a12a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4619      	mov	r1, r3
 800a11a:	4809      	ldr	r0, [pc, #36]	@ (800a140 <netconn_send+0x58>)
 800a11c:	f7ff fc26 	bl	800996c <netconn_apimsg>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a126:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3730      	adds	r7, #48	@ 0x30
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	08019908 	.word	0x08019908
 800a138:	08019bc4 	.word	0x08019bc4
 800a13c:	08019960 	.word	0x08019960
 800a140:	0800b511 	.word	0x0800b511

0800a144 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	f107 0110 	add.w	r1, r7, #16
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	2201      	movs	r2, #1
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f805 	bl	800a178 <netconn_write_vectors_partly>
 800a16e:	4603      	mov	r3, r0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b092      	sub	sp, #72	@ 0x48
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4611      	mov	r1, r2
 800a184:	461a      	mov	r2, r3
 800a186:	460b      	mov	r3, r1
 800a188:	80fb      	strh	r3, [r7, #6]
 800a18a:	4613      	mov	r3, r2
 800a18c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d109      	bne.n	800a1a8 <netconn_write_vectors_partly+0x30>
 800a194:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d0 <netconn_write_vectors_partly+0x158>)
 800a196:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a19a:	494e      	ldr	r1, [pc, #312]	@ (800a2d4 <netconn_write_vectors_partly+0x15c>)
 800a19c:	484e      	ldr	r0, [pc, #312]	@ (800a2d8 <netconn_write_vectors_partly+0x160>)
 800a19e:	f00e f963 	bl	8018468 <iprintf>
 800a1a2:	f06f 030f 	mvn.w	r3, #15
 800a1a6:	e08e      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d009      	beq.n	800a1c8 <netconn_write_vectors_partly+0x50>
 800a1b4:	4b46      	ldr	r3, [pc, #280]	@ (800a2d0 <netconn_write_vectors_partly+0x158>)
 800a1b6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800a1ba:	4948      	ldr	r1, [pc, #288]	@ (800a2dc <netconn_write_vectors_partly+0x164>)
 800a1bc:	4846      	ldr	r0, [pc, #280]	@ (800a2d8 <netconn_write_vectors_partly+0x160>)
 800a1be:	f00e f953 	bl	8018468 <iprintf>
 800a1c2:	f06f 0305 	mvn.w	r3, #5
 800a1c6:	e07e      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	7f1b      	ldrb	r3, [r3, #28]
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <netconn_write_vectors_partly+0x66>
 800a1d4:	797b      	ldrb	r3, [r7, #5]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <netconn_write_vectors_partly+0x6a>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <netconn_write_vectors_partly+0x6c>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a1e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <netconn_write_vectors_partly+0x84>
 800a1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a1f6:	f06f 0305 	mvn.w	r3, #5
 800a1fa:	e064      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a200:	2300      	movs	r3, #0
 800a202:	643b      	str	r3, [r7, #64]	@ 0x40
 800a204:	e015      	b.n	800a232 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	4413      	add	r3, r2
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a212:	4413      	add	r3, r2
 800a214:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800a216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	4413      	add	r3, r2
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a222:	429a      	cmp	r2, r3
 800a224:	d202      	bcs.n	800a22c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a226:	f06f 0305 	mvn.w	r3, #5
 800a22a:	e04c      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a22c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a22e:	3301      	adds	r3, #1
 800a230:	643b      	str	r3, [r7, #64]	@ 0x40
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a236:	429a      	cmp	r2, r3
 800a238:	dbe5      	blt.n	800a206 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	e040      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a246:	2b00      	cmp	r3, #0
 800a248:	da0a      	bge.n	800a260 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a250:	f06f 0305 	mvn.w	r3, #5
 800a254:	e037      	b.n	800a2c6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a256:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a25a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a268:	88fb      	ldrh	r3, [r7, #6]
 800a26a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a270:	797b      	ldrb	r3, [r7, #5]
 800a272:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a278:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a27e:	f107 0314 	add.w	r3, r7, #20
 800a282:	4619      	mov	r1, r3
 800a284:	4816      	ldr	r0, [pc, #88]	@ (800a2e0 <netconn_write_vectors_partly+0x168>)
 800a286:	f7ff fb71 	bl	800996c <netconn_apimsg>
 800a28a:	4603      	mov	r3, r0
 800a28c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800a290:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a294:	2b00      	cmp	r3, #0
 800a296:	d114      	bne.n	800a2c2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2a2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a2a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d006      	beq.n	800a2c2 <netconn_write_vectors_partly+0x14a>
 800a2b4:	4b06      	ldr	r3, [pc, #24]	@ (800a2d0 <netconn_write_vectors_partly+0x158>)
 800a2b6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a2ba:	490a      	ldr	r1, [pc, #40]	@ (800a2e4 <netconn_write_vectors_partly+0x16c>)
 800a2bc:	4806      	ldr	r0, [pc, #24]	@ (800a2d8 <netconn_write_vectors_partly+0x160>)
 800a2be:	f00e f8d3 	bl	8018468 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a2c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3748      	adds	r7, #72	@ 0x48
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	08019908 	.word	0x08019908
 800a2d4:	08019be0 	.word	0x08019be0
 800a2d8:	08019960 	.word	0x08019960
 800a2dc:	08019bfc 	.word	0x08019bfc
 800a2e0:	0800b9ad 	.word	0x0800b9ad
 800a2e4:	08019c20 	.word	0x08019c20

0800a2e8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08c      	sub	sp, #48	@ 0x30
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d109      	bne.n	800a30e <netconn_close_shutdown+0x26>
 800a2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a338 <netconn_close_shutdown+0x50>)
 800a2fc:	f240 4247 	movw	r2, #1095	@ 0x447
 800a300:	490e      	ldr	r1, [pc, #56]	@ (800a33c <netconn_close_shutdown+0x54>)
 800a302:	480f      	ldr	r0, [pc, #60]	@ (800a340 <netconn_close_shutdown+0x58>)
 800a304:	f00e f8b0 	bl	8018468 <iprintf>
 800a308:	f06f 030f 	mvn.w	r3, #15
 800a30c:	e010      	b.n	800a330 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a316:	2329      	movs	r3, #41	@ 0x29
 800a318:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a31a:	f107 030c 	add.w	r3, r7, #12
 800a31e:	4619      	mov	r1, r3
 800a320:	4808      	ldr	r0, [pc, #32]	@ (800a344 <netconn_close_shutdown+0x5c>)
 800a322:	f7ff fb23 	bl	800996c <netconn_apimsg>
 800a326:	4603      	mov	r3, r0
 800a328:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a32c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a330:	4618      	mov	r0, r3
 800a332:	3730      	adds	r7, #48	@ 0x30
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	08019908 	.word	0x08019908
 800a33c:	08019c44 	.word	0x08019c44
 800a340:	08019960 	.word	0x08019960
 800a344:	0800bac5 	.word	0x0800bac5

0800a348 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a350:	2103      	movs	r1, #3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff ffc8 	bl	800a2e8 <netconn_close_shutdown>
 800a358:	4603      	mov	r3, r0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <netconn_err+0x12>
    return ERR_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	e00d      	b.n	800a390 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a374:	f00d ff5a 	bl	801822c <sys_arch_protect>
 800a378:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7a1b      	ldrb	r3, [r3, #8]
 800a37e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f00d ff5e 	bl	8018248 <sys_arch_unprotect>
  return err;
 800a38c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a6:	f113 0f0d 	cmn.w	r3, #13
 800a3aa:	d009      	beq.n	800a3c0 <lwip_netconn_err_to_msg+0x28>
 800a3ac:	f113 0f0d 	cmn.w	r3, #13
 800a3b0:	dc0c      	bgt.n	800a3cc <lwip_netconn_err_to_msg+0x34>
 800a3b2:	f113 0f0f 	cmn.w	r3, #15
 800a3b6:	d007      	beq.n	800a3c8 <lwip_netconn_err_to_msg+0x30>
 800a3b8:	f113 0f0e 	cmn.w	r3, #14
 800a3bc:	d002      	beq.n	800a3c4 <lwip_netconn_err_to_msg+0x2c>
 800a3be:	e005      	b.n	800a3cc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <lwip_netconn_err_to_msg+0x54>)
 800a3c2:	e00e      	b.n	800a3e2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f0 <lwip_netconn_err_to_msg+0x58>)
 800a3c6:	e00c      	b.n	800a3e2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f4 <lwip_netconn_err_to_msg+0x5c>)
 800a3ca:	e00a      	b.n	800a3e2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a3cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <lwip_netconn_err_to_msg+0x48>
 800a3d4:	4b08      	ldr	r3, [pc, #32]	@ (800a3f8 <lwip_netconn_err_to_msg+0x60>)
 800a3d6:	227d      	movs	r2, #125	@ 0x7d
 800a3d8:	4908      	ldr	r1, [pc, #32]	@ (800a3fc <lwip_netconn_err_to_msg+0x64>)
 800a3da:	4809      	ldr	r0, [pc, #36]	@ (800a400 <lwip_netconn_err_to_msg+0x68>)
 800a3dc:	f00e f844 	bl	8018468 <iprintf>
      return NULL;
 800a3e0:	2300      	movs	r3, #0
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0801d01c 	.word	0x0801d01c
 800a3f0:	0801d01d 	.word	0x0801d01d
 800a3f4:	0801d01e 	.word	0x0801d01e
 800a3f8:	08019c60 	.word	0x08019c60
 800a3fc:	08019c94 	.word	0x08019c94
 800a400:	08019ca4 	.word	0x08019ca4

0800a404 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d105      	bne.n	800a420 <lwip_netconn_is_err_msg+0x1c>
 800a414:	4b12      	ldr	r3, [pc, #72]	@ (800a460 <lwip_netconn_is_err_msg+0x5c>)
 800a416:	2285      	movs	r2, #133	@ 0x85
 800a418:	4912      	ldr	r1, [pc, #72]	@ (800a464 <lwip_netconn_is_err_msg+0x60>)
 800a41a:	4813      	ldr	r0, [pc, #76]	@ (800a468 <lwip_netconn_is_err_msg+0x64>)
 800a41c:	f00e f824 	bl	8018468 <iprintf>

  if (msg == &netconn_aborted) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a12      	ldr	r2, [pc, #72]	@ (800a46c <lwip_netconn_is_err_msg+0x68>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d104      	bne.n	800a432 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	22f3      	movs	r2, #243	@ 0xf3
 800a42c:	701a      	strb	r2, [r3, #0]
    return 1;
 800a42e:	2301      	movs	r3, #1
 800a430:	e012      	b.n	800a458 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a0e      	ldr	r2, [pc, #56]	@ (800a470 <lwip_netconn_is_err_msg+0x6c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d104      	bne.n	800a444 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	22f2      	movs	r2, #242	@ 0xf2
 800a43e:	701a      	strb	r2, [r3, #0]
    return 1;
 800a440:	2301      	movs	r3, #1
 800a442:	e009      	b.n	800a458 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a0b      	ldr	r2, [pc, #44]	@ (800a474 <lwip_netconn_is_err_msg+0x70>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d104      	bne.n	800a456 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	22f1      	movs	r2, #241	@ 0xf1
 800a450:	701a      	strb	r2, [r3, #0]
    return 1;
 800a452:	2301      	movs	r3, #1
 800a454:	e000      	b.n	800a458 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	08019c60 	.word	0x08019c60
 800a464:	08019ccc 	.word	0x08019ccc
 800a468:	08019ca4 	.word	0x08019ca4
 800a46c:	0801d01c 	.word	0x0801d01c
 800a470:	0801d01d 	.word	0x0801d01d
 800a474:	0801d01e 	.word	0x0801d01e

0800a478 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d105      	bne.n	800a498 <recv_udp+0x20>
 800a48c:	4b34      	ldr	r3, [pc, #208]	@ (800a560 <recv_udp+0xe8>)
 800a48e:	22e5      	movs	r2, #229	@ 0xe5
 800a490:	4934      	ldr	r1, [pc, #208]	@ (800a564 <recv_udp+0xec>)
 800a492:	4835      	ldr	r0, [pc, #212]	@ (800a568 <recv_udp+0xf0>)
 800a494:	f00d ffe8 	bl	8018468 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d105      	bne.n	800a4aa <recv_udp+0x32>
 800a49e:	4b30      	ldr	r3, [pc, #192]	@ (800a560 <recv_udp+0xe8>)
 800a4a0:	22e6      	movs	r2, #230	@ 0xe6
 800a4a2:	4932      	ldr	r1, [pc, #200]	@ (800a56c <recv_udp+0xf4>)
 800a4a4:	4830      	ldr	r0, [pc, #192]	@ (800a568 <recv_udp+0xf0>)
 800a4a6:	f00d ffdf 	bl	8018468 <iprintf>
  conn = (struct netconn *)arg;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <recv_udp+0x44>
    pbuf_free(p);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f004 f86f 	bl	800e598 <pbuf_free>
    return;
 800a4ba:	e04d      	b.n	800a558 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d005      	beq.n	800a4d2 <recv_udp+0x5a>
 800a4c6:	4b26      	ldr	r3, [pc, #152]	@ (800a560 <recv_udp+0xe8>)
 800a4c8:	22ee      	movs	r2, #238	@ 0xee
 800a4ca:	4929      	ldr	r1, [pc, #164]	@ (800a570 <recv_udp+0xf8>)
 800a4cc:	4826      	ldr	r0, [pc, #152]	@ (800a568 <recv_udp+0xf0>)
 800a4ce:	f00d ffcb 	bl	8018468 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	3310      	adds	r3, #16
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f00d fd8d 	bl	8017ff6 <sys_mbox_valid>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f004 f858 	bl	800e598 <pbuf_free>
    return;
 800a4e8:	e036      	b.n	800a558 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a4ea:	2006      	movs	r0, #6
 800a4ec:	f003 f93a 	bl	800d764 <memp_malloc>
 800a4f0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d103      	bne.n	800a500 <recv_udp+0x88>
    pbuf_free(p);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 f84d 	bl	800e598 <pbuf_free>
    return;
 800a4fe:	e02b      	b.n	800a558 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <recv_udp+0xa0>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	e000      	b.n	800a51a <recv_udp+0xa2>
 800a518:	2300      	movs	r3, #0
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a522:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	891b      	ldrh	r3, [r3, #8]
 800a528:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	3310      	adds	r3, #16
 800a52e:	69b9      	ldr	r1, [r7, #24]
 800a530:	4618      	mov	r0, r3
 800a532:	f00d fceb 	bl	8017f0c <sys_mbox_trypost>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a53c:	69b8      	ldr	r0, [r7, #24]
 800a53e:	f001 fb4d 	bl	800bbdc <netbuf_delete>
    return;
 800a542:	e009      	b.n	800a558 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <recv_udp+0xe0>
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a550:	8afa      	ldrh	r2, [r7, #22]
 800a552:	2100      	movs	r1, #0
 800a554:	69f8      	ldr	r0, [r7, #28]
 800a556:	4798      	blx	r3
  }
}
 800a558:	3720      	adds	r7, #32
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	08019c60 	.word	0x08019c60
 800a564:	08019cd8 	.word	0x08019cd8
 800a568:	08019ca4 	.word	0x08019ca4
 800a56c:	08019cfc 	.word	0x08019cfc
 800a570:	08019d1c 	.word	0x08019d1c

0800a574 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <recv_tcp+0x22>
 800a588:	4b36      	ldr	r3, [pc, #216]	@ (800a664 <recv_tcp+0xf0>)
 800a58a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a58e:	4936      	ldr	r1, [pc, #216]	@ (800a668 <recv_tcp+0xf4>)
 800a590:	4836      	ldr	r0, [pc, #216]	@ (800a66c <recv_tcp+0xf8>)
 800a592:	f00d ff69 	bl	8018468 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <recv_tcp+0x36>
 800a59c:	4b31      	ldr	r3, [pc, #196]	@ (800a664 <recv_tcp+0xf0>)
 800a59e:	f240 122d 	movw	r2, #301	@ 0x12d
 800a5a2:	4933      	ldr	r1, [pc, #204]	@ (800a670 <recv_tcp+0xfc>)
 800a5a4:	4831      	ldr	r0, [pc, #196]	@ (800a66c <recv_tcp+0xf8>)
 800a5a6:	f00d ff5f 	bl	8018468 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a5aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d006      	beq.n	800a5c0 <recv_tcp+0x4c>
 800a5b2:	4b2c      	ldr	r3, [pc, #176]	@ (800a664 <recv_tcp+0xf0>)
 800a5b4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a5b8:	492e      	ldr	r1, [pc, #184]	@ (800a674 <recv_tcp+0x100>)
 800a5ba:	482c      	ldr	r0, [pc, #176]	@ (800a66c <recv_tcp+0xf8>)
 800a5bc:	f00d ff54 	bl	8018468 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <recv_tcp+0x5c>
    return ERR_VAL;
 800a5ca:	f06f 0305 	mvn.w	r3, #5
 800a5ce:	e045      	b.n	800a65c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d006      	beq.n	800a5e8 <recv_tcp+0x74>
 800a5da:	4b22      	ldr	r3, [pc, #136]	@ (800a664 <recv_tcp+0xf0>)
 800a5dc:	f240 1235 	movw	r2, #309	@ 0x135
 800a5e0:	4925      	ldr	r1, [pc, #148]	@ (800a678 <recv_tcp+0x104>)
 800a5e2:	4822      	ldr	r0, [pc, #136]	@ (800a66c <recv_tcp+0xf8>)
 800a5e4:	f00d ff40 	bl	8018468 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	3310      	adds	r3, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f00d fd02 	bl	8017ff6 <sys_mbox_valid>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10d      	bne.n	800a614 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d008      	beq.n	800a610 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	891b      	ldrh	r3, [r3, #8]
 800a602:	4619      	mov	r1, r3
 800a604:	68b8      	ldr	r0, [r7, #8]
 800a606:	f004 ffa1 	bl	800f54c <tcp_recved>
      pbuf_free(p);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f003 ffc4 	bl	800e598 <pbuf_free>
    }
    return ERR_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	e023      	b.n	800a65c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <recv_tcp+0xb2>
    msg = p;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	891b      	ldrh	r3, [r3, #8]
 800a622:	83fb      	strh	r3, [r7, #30]
 800a624:	e003      	b.n	800a62e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a626:	4b15      	ldr	r3, [pc, #84]	@ (800a67c <recv_tcp+0x108>)
 800a628:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	3310      	adds	r3, #16
 800a632:	69b9      	ldr	r1, [r7, #24]
 800a634:	4618      	mov	r0, r3
 800a636:	f00d fc69 	bl	8017f0c <sys_mbox_trypost>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	e00a      	b.n	800a65c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <recv_tcp+0xe6>
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a652:	8bfa      	ldrh	r2, [r7, #30]
 800a654:	2100      	movs	r1, #0
 800a656:	6978      	ldr	r0, [r7, #20]
 800a658:	4798      	blx	r3
  }

  return ERR_OK;
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	08019c60 	.word	0x08019c60
 800a668:	08019d3c 	.word	0x08019d3c
 800a66c:	08019ca4 	.word	0x08019ca4
 800a670:	08019d60 	.word	0x08019d60
 800a674:	08019d80 	.word	0x08019d80
 800a678:	08019d98 	.word	0x08019d98
 800a67c:	0801d01e 	.word	0x0801d01e

0800a680 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <poll_tcp+0x22>
 800a694:	4b29      	ldr	r3, [pc, #164]	@ (800a73c <poll_tcp+0xbc>)
 800a696:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a69a:	4929      	ldr	r1, [pc, #164]	@ (800a740 <poll_tcp+0xc0>)
 800a69c:	4829      	ldr	r0, [pc, #164]	@ (800a744 <poll_tcp+0xc4>)
 800a69e:	f00d fee3 	bl	8018468 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	785b      	ldrb	r3, [r3, #1]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d104      	bne.n	800a6b4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 ffb1 	bl	800b614 <lwip_netconn_do_writemore>
 800a6b2:	e016      	b.n	800a6e2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d112      	bne.n	800a6e2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00a      	beq.n	800a6da <poll_tcp+0x5a>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	7a5b      	ldrb	r3, [r3, #9]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	7a5a      	ldrb	r2, [r3, #9]
 800a6d4:	3a01      	subs	r2, #1
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a6da:	2101      	movs	r1, #1
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 fbf7 	bl	800aed0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	7f1b      	ldrb	r3, [r3, #28]
 800a6e6:	f003 0310 	and.w	r3, r3, #16
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d021      	beq.n	800a732 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d01d      	beq.n	800a732 <poll_tcp+0xb2>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a6fe:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a702:	d316      	bcc.n	800a732 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d810      	bhi.n	800a732 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	7f1b      	ldrb	r3, [r3, #28]
 800a714:	f023 0310 	bic.w	r3, r3, #16
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d005      	beq.n	800a732 <poll_tcp+0xb2>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	2200      	movs	r2, #0
 800a72c:	2102      	movs	r1, #2
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	08019c60 	.word	0x08019c60
 800a740:	08019db8 	.word	0x08019db8
 800a744:	08019ca4 	.word	0x08019ca4

0800a748 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	4613      	mov	r3, r2
 800a754:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <sent_tcp+0x26>
 800a760:	4b20      	ldr	r3, [pc, #128]	@ (800a7e4 <sent_tcp+0x9c>)
 800a762:	f240 1293 	movw	r2, #403	@ 0x193
 800a766:	4920      	ldr	r1, [pc, #128]	@ (800a7e8 <sent_tcp+0xa0>)
 800a768:	4820      	ldr	r0, [pc, #128]	@ (800a7ec <sent_tcp+0xa4>)
 800a76a:	f00d fe7d 	bl	8018468 <iprintf>

  if (conn) {
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d032      	beq.n	800a7da <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d104      	bne.n	800a786 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a77c:	2101      	movs	r1, #1
 800a77e:	6978      	ldr	r0, [r7, #20]
 800a780:	f000 ff48 	bl	800b614 <lwip_netconn_do_writemore>
 800a784:	e007      	b.n	800a796 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d103      	bne.n	800a796 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a78e:	2101      	movs	r1, #1
 800a790:	6978      	ldr	r0, [r7, #20]
 800a792:	f000 fb9d 	bl	800aed0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d01d      	beq.n	800a7da <sent_tcp+0x92>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a7a6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a7aa:	d316      	bcc.n	800a7da <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d810      	bhi.n	800a7da <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	7f1b      	ldrb	r3, [r3, #28]
 800a7bc:	f023 0310 	bic.w	r3, r3, #16
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d005      	beq.n	800a7da <sent_tcp+0x92>
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	08019c60 	.word	0x08019c60
 800a7e8:	08019db8 	.word	0x08019db8
 800a7ec:	08019ca4 	.word	0x08019ca4

0800a7f0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <err_tcp+0x24>
 800a806:	4b5f      	ldr	r3, [pc, #380]	@ (800a984 <err_tcp+0x194>)
 800a808:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a80c:	495e      	ldr	r1, [pc, #376]	@ (800a988 <err_tcp+0x198>)
 800a80e:	485f      	ldr	r0, [pc, #380]	@ (800a98c <err_tcp+0x19c>)
 800a810:	f00d fe2a 	bl	8018468 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a814:	f00d fd0a 	bl	801822c <sys_arch_protect>
 800a818:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	2200      	movs	r2, #0
 800a81e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	78fa      	ldrb	r2, [r7, #3]
 800a824:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	7f1b      	ldrb	r3, [r3, #28]
 800a82a:	f043 0301 	orr.w	r3, r3, #1
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	2200      	movs	r2, #0
 800a83e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a840:	69b8      	ldr	r0, [r7, #24]
 800a842:	f00d fd01 	bl	8018248 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d005      	beq.n	800a85a <err_tcp+0x6a>
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	2200      	movs	r2, #0
 800a854:	2104      	movs	r1, #4
 800a856:	69f8      	ldr	r0, [r7, #28]
 800a858:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <err_tcp+0x7e>
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	69f8      	ldr	r0, [r7, #28]
 800a86c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <err_tcp+0x92>
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	2200      	movs	r2, #0
 800a87c:	2102      	movs	r1, #2
 800a87e:	69f8      	ldr	r0, [r7, #28]
 800a880:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fd86 	bl	800a398 <lwip_netconn_err_to_msg>
 800a88c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	3310      	adds	r3, #16
 800a892:	4618      	mov	r0, r3
 800a894:	f00d fbaf 	bl	8017ff6 <sys_mbox_valid>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d005      	beq.n	800a8aa <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	3310      	adds	r3, #16
 800a8a2:	6939      	ldr	r1, [r7, #16]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f00d fb31 	bl	8017f0c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3314      	adds	r3, #20
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f00d fba1 	bl	8017ff6 <sys_mbox_valid>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	3314      	adds	r3, #20
 800a8be:	6939      	ldr	r1, [r7, #16]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f00d fb23 	bl	8017f0c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d005      	beq.n	800a8d8 <err_tcp+0xe8>
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d002      	beq.n	800a8d8 <err_tcp+0xe8>
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d143      	bne.n	800a960 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	7f1b      	ldrb	r3, [r3, #28]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bf14      	ite	ne
 800a8e4:	2301      	movne	r3, #1
 800a8e6:	2300      	moveq	r3, #0
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	7f1b      	ldrb	r3, [r3, #28]
 800a8f0:	f023 0304 	bic.w	r3, r3, #4
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d13b      	bne.n	800a978 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <err_tcp+0x126>
 800a908:	4b1e      	ldr	r3, [pc, #120]	@ (800a984 <err_tcp+0x194>)
 800a90a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a90e:	4920      	ldr	r1, [pc, #128]	@ (800a990 <err_tcp+0x1a0>)
 800a910:	481e      	ldr	r0, [pc, #120]	@ (800a98c <err_tcp+0x19c>)
 800a912:	f00d fda9 	bl	8018468 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d104      	bne.n	800a926 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	2200      	movs	r2, #0
 800a922:	711a      	strb	r2, [r3, #4]
 800a924:	e003      	b.n	800a92e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	78fa      	ldrb	r2, [r7, #3]
 800a92c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	330c      	adds	r3, #12
 800a936:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a938:	68b8      	ldr	r0, [r7, #8]
 800a93a:	f00d fbed 	bl	8018118 <sys_sem_valid>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d106      	bne.n	800a952 <err_tcp+0x162>
 800a944:	4b0f      	ldr	r3, [pc, #60]	@ (800a984 <err_tcp+0x194>)
 800a946:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a94a:	4912      	ldr	r1, [pc, #72]	@ (800a994 <err_tcp+0x1a4>)
 800a94c:	480f      	ldr	r0, [pc, #60]	@ (800a98c <err_tcp+0x19c>)
 800a94e:	f00d fd8b 	bl	8018468 <iprintf>
      conn->current_msg = NULL;
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	2200      	movs	r2, #0
 800a956:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a958:	68b8      	ldr	r0, [r7, #8]
 800a95a:	f00d fbc3 	bl	80180e4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a95e:	e00b      	b.n	800a978 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d008      	beq.n	800a97a <err_tcp+0x18a>
 800a968:	4b06      	ldr	r3, [pc, #24]	@ (800a984 <err_tcp+0x194>)
 800a96a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a96e:	490a      	ldr	r1, [pc, #40]	@ (800a998 <err_tcp+0x1a8>)
 800a970:	4806      	ldr	r0, [pc, #24]	@ (800a98c <err_tcp+0x19c>)
 800a972:	f00d fd79 	bl	8018468 <iprintf>
  }
}
 800a976:	e000      	b.n	800a97a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a978:	bf00      	nop
}
 800a97a:	bf00      	nop
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	08019c60 	.word	0x08019c60
 800a988:	08019db8 	.word	0x08019db8
 800a98c:	08019ca4 	.word	0x08019ca4
 800a990:	08019dc8 	.word	0x08019dc8
 800a994:	08019de4 	.word	0x08019de4
 800a998:	08019e00 	.word	0x08019e00

0800a99c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f005 fcb3 	bl	8010318 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a9b2:	490a      	ldr	r1, [pc, #40]	@ (800a9dc <setup_tcp+0x40>)
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f005 fcc1 	bl	801033c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a9ba:	4909      	ldr	r1, [pc, #36]	@ (800a9e0 <setup_tcp+0x44>)
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f005 fcdf 	bl	8010380 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	4907      	ldr	r1, [pc, #28]	@ (800a9e4 <setup_tcp+0x48>)
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f005 fd36 	bl	8010438 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a9cc:	4906      	ldr	r1, [pc, #24]	@ (800a9e8 <setup_tcp+0x4c>)
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f005 fcf8 	bl	80103c4 <tcp_err>
}
 800a9d4:	bf00      	nop
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	0800a575 	.word	0x0800a575
 800a9e0:	0800a749 	.word	0x0800a749
 800a9e4:	0800a681 	.word	0x0800a681
 800a9e8:	0800a7f1 	.word	0x0800a7f1

0800a9ec <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a9ec:	b590      	push	{r4, r7, lr}
 800a9ee:	b089      	sub	sp, #36	@ 0x24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <accept_function+0x1e>
    return ERR_VAL;
 800aa04:	f06f 0305 	mvn.w	r3, #5
 800aa08:	e0a1      	b.n	800ab4e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3314      	adds	r3, #20
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f00d faf1 	bl	8017ff6 <sys_mbox_valid>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800aa1a:	f06f 0305 	mvn.w	r3, #5
 800aa1e:	e096      	b.n	800ab4e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d11b      	bne.n	800aa5e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	f103 0414 	add.w	r4, r3, #20
 800aa2c:	f06f 000c 	mvn.w	r0, #12
 800aa30:	f7ff fcb2 	bl	800a398 <lwip_netconn_err_to_msg>
 800aa34:	4603      	mov	r3, r0
 800aa36:	4619      	mov	r1, r3
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f00d fa67 	bl	8017f0c <sys_mbox_trypost>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <accept_function+0x6c>
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	2200      	movs	r2, #0
 800aa52:	2100      	movs	r1, #0
 800aa54:	69f8      	ldr	r0, [r7, #28]
 800aa56:	4798      	blx	r3
    }
    return ERR_VAL;
 800aa58:	f06f 0305 	mvn.w	r3, #5
 800aa5c:	e077      	b.n	800ab4e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800aa5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d006      	beq.n	800aa74 <accept_function+0x88>
 800aa66:	4b3c      	ldr	r3, [pc, #240]	@ (800ab58 <accept_function+0x16c>)
 800aa68:	f240 222a 	movw	r2, #554	@ 0x22a
 800aa6c:	493b      	ldr	r1, [pc, #236]	@ (800ab5c <accept_function+0x170>)
 800aa6e:	483c      	ldr	r0, [pc, #240]	@ (800ab60 <accept_function+0x174>)
 800aa70:	f00d fcfa 	bl	8018468 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	f000 f8f0 	bl	800ac64 <netconn_alloc>
 800aa84:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d11b      	bne.n	800aac4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f103 0414 	add.w	r4, r3, #20
 800aa92:	f06f 000c 	mvn.w	r0, #12
 800aa96:	f7ff fc7f 	bl	800a398 <lwip_netconn_err_to_msg>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f00d fa34 	bl	8017f0c <sys_mbox_trypost>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d005      	beq.n	800aabe <accept_function+0xd2>
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab6:	2200      	movs	r2, #0
 800aab8:	2100      	movs	r1, #0
 800aaba:	69f8      	ldr	r0, [r7, #28]
 800aabc:	4798      	blx	r3
    }
    return ERR_MEM;
 800aabe:	f04f 33ff 	mov.w	r3, #4294967295
 800aac2:	e044      	b.n	800ab4e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800aaca:	69b8      	ldr	r0, [r7, #24]
 800aacc:	f7ff ff66 	bl	800a99c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	3314      	adds	r3, #20
 800aad4:	69b9      	ldr	r1, [r7, #24]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f00d fa18 	bl	8017f0c <sys_mbox_trypost>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d02a      	beq.n	800ab38 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800aae8:	2100      	movs	r1, #0
 800aaea:	6978      	ldr	r0, [r7, #20]
 800aaec:	f005 fc14 	bl	8010318 <tcp_arg>
    tcp_recv(pcb, NULL);
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6978      	ldr	r0, [r7, #20]
 800aaf4:	f005 fc22 	bl	801033c <tcp_recv>
    tcp_sent(pcb, NULL);
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6978      	ldr	r0, [r7, #20]
 800aafc:	f005 fc40 	bl	8010380 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	6978      	ldr	r0, [r7, #20]
 800ab06:	f005 fc97 	bl	8010438 <tcp_poll>
    tcp_err(pcb, NULL);
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6978      	ldr	r0, [r7, #20]
 800ab0e:	f005 fc59 	bl	80103c4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2200      	movs	r2, #0
 800ab16:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	3310      	adds	r3, #16
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f00d f9e3 	bl	8017ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	3310      	adds	r3, #16
 800ab26:	4618      	mov	r0, r3
 800ab28:	f00d fa76 	bl	8018018 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ab2c:	69b8      	ldr	r0, [r7, #24]
 800ab2e:	f000 f907 	bl	800ad40 <netconn_free>
    return ERR_MEM;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295
 800ab36:	e00a      	b.n	800ab4e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d005      	beq.n	800ab4c <accept_function+0x160>
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab44:	2200      	movs	r2, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	69f8      	ldr	r0, [r7, #28]
 800ab4a:	4798      	blx	r3
  }

  return ERR_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3724      	adds	r7, #36	@ 0x24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd90      	pop	{r4, r7, pc}
 800ab56:	bf00      	nop
 800ab58:	08019c60 	.word	0x08019c60
 800ab5c:	08019e1c 	.word	0x08019e1c
 800ab60:	08019ca4 	.word	0x08019ca4

0800ab64 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ab64:	b590      	push	{r4, r7, lr}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d006      	beq.n	800ab88 <pcb_new+0x24>
 800ab7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ac28 <pcb_new+0xc4>)
 800ab7c:	f240 2265 	movw	r2, #613	@ 0x265
 800ab80:	492a      	ldr	r1, [pc, #168]	@ (800ac2c <pcb_new+0xc8>)
 800ab82:	482b      	ldr	r0, [pc, #172]	@ (800ac30 <pcb_new+0xcc>)
 800ab84:	f00d fc70 	bl	8018468 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab92:	2b10      	cmp	r3, #16
 800ab94:	d022      	beq.n	800abdc <pcb_new+0x78>
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d133      	bne.n	800ac02 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681c      	ldr	r4, [r3, #0]
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f00a fe7c 	bl	801589e <udp_new_ip_type>
 800aba6:	4603      	mov	r3, r0
 800aba8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d02a      	beq.n	800ac0a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b22      	cmp	r3, #34	@ 0x22
 800abbc:	d104      	bne.n	800abc8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6858      	ldr	r0, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	461a      	mov	r2, r3
 800abd4:	4917      	ldr	r1, [pc, #92]	@ (800ac34 <pcb_new+0xd0>)
 800abd6:	f00a fde9 	bl	80157ac <udp_recv>
      }
      break;
 800abda:	e016      	b.n	800ac0a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681c      	ldr	r4, [r3, #0]
 800abe0:	7bfb      	ldrb	r3, [r7, #15]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f005 fb8a 	bl	80102fc <tcp_new_ip_type>
 800abe8:	4603      	mov	r3, r0
 800abea:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00b      	beq.n	800ac0e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff fece 	bl	800a99c <setup_tcp>
      }
      break;
 800ac00:	e005      	b.n	800ac0e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	22fa      	movs	r2, #250	@ 0xfa
 800ac06:	711a      	strb	r2, [r3, #4]
      return;
 800ac08:	e00a      	b.n	800ac20 <pcb_new+0xbc>
      break;
 800ac0a:	bf00      	nop
 800ac0c:	e000      	b.n	800ac10 <pcb_new+0xac>
      break;
 800ac0e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d102      	bne.n	800ac20 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	22ff      	movs	r2, #255	@ 0xff
 800ac1e:	711a      	strb	r2, [r3, #4]
  }
}
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	08019c60 	.word	0x08019c60
 800ac2c:	08019e44 	.word	0x08019e44
 800ac30:	08019ca4 	.word	0x08019ca4
 800ac34:	0800a479 	.word	0x0800a479

0800ac38 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f7ff ff85 	bl	800ab64 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ac5a:	bf00      	nop
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
	...

0800ac64 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ac74:	2007      	movs	r0, #7
 800ac76:	f002 fd75 	bl	800d764 <memp_malloc>
 800ac7a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <netconn_alloc+0x22>
    return NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e052      	b.n	800ad2c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	79fa      	ldrb	r2, [r7, #7]
 800ac90:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ac98:	79fb      	ldrb	r3, [r7, #7]
 800ac9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac9e:	2b10      	cmp	r3, #16
 800aca0:	d004      	beq.n	800acac <netconn_alloc+0x48>
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d105      	bne.n	800acb2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800aca6:	2306      	movs	r3, #6
 800aca8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800acaa:	e00a      	b.n	800acc2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800acac:	2306      	movs	r3, #6
 800acae:	617b      	str	r3, [r7, #20]
      break;
 800acb0:	e007      	b.n	800acc2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800acb2:	4b20      	ldr	r3, [pc, #128]	@ (800ad34 <netconn_alloc+0xd0>)
 800acb4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800acb8:	491f      	ldr	r1, [pc, #124]	@ (800ad38 <netconn_alloc+0xd4>)
 800acba:	4820      	ldr	r0, [pc, #128]	@ (800ad3c <netconn_alloc+0xd8>)
 800acbc:	f00d fbd4 	bl	8018468 <iprintf>
      goto free_and_return;
 800acc0:	e02f      	b.n	800ad22 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3310      	adds	r3, #16
 800acc6:	6979      	ldr	r1, [r7, #20]
 800acc8:	4618      	mov	r0, r3
 800acca:	f00d f8eb 	bl	8017ea4 <sys_mbox_new>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d125      	bne.n	800ad20 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	330c      	adds	r3, #12
 800acd8:	2100      	movs	r1, #0
 800acda:	4618      	mov	r0, r3
 800acdc:	f00d f9a9 	bl	8018032 <sys_sem_new>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d005      	beq.n	800acf2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3310      	adds	r3, #16
 800acea:	4618      	mov	r0, r3
 800acec:	f00d f8fc 	bl	8017ee8 <sys_mbox_free>
    goto free_and_return;
 800acf0:	e017      	b.n	800ad22 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3314      	adds	r3, #20
 800acf6:	4618      	mov	r0, r3
 800acf8:	f00d f98e 	bl	8018018 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f04f 32ff 	mov.w	r2, #4294967295
 800ad08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	7cfa      	ldrb	r2, [r7, #19]
 800ad1a:	771a      	strb	r2, [r3, #28]
  return conn;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	e005      	b.n	800ad2c <netconn_alloc+0xc8>
    goto free_and_return;
 800ad20:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	2007      	movs	r0, #7
 800ad26:	f002 fd93 	bl	800d850 <memp_free>
  return NULL;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	08019c60 	.word	0x08019c60
 800ad38:	08019e64 	.word	0x08019e64
 800ad3c:	08019ca4 	.word	0x08019ca4

0800ad40 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <netconn_free+0x1e>
 800ad50:	4b1b      	ldr	r3, [pc, #108]	@ (800adc0 <netconn_free+0x80>)
 800ad52:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ad56:	491b      	ldr	r1, [pc, #108]	@ (800adc4 <netconn_free+0x84>)
 800ad58:	481b      	ldr	r0, [pc, #108]	@ (800adc8 <netconn_free+0x88>)
 800ad5a:	f00d fb85 	bl	8018468 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3310      	adds	r3, #16
 800ad62:	4618      	mov	r0, r3
 800ad64:	f00d f947 	bl	8017ff6 <sys_mbox_valid>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <netconn_free+0x3c>
 800ad6e:	4b14      	ldr	r3, [pc, #80]	@ (800adc0 <netconn_free+0x80>)
 800ad70:	f240 3223 	movw	r2, #803	@ 0x323
 800ad74:	4915      	ldr	r1, [pc, #84]	@ (800adcc <netconn_free+0x8c>)
 800ad76:	4814      	ldr	r0, [pc, #80]	@ (800adc8 <netconn_free+0x88>)
 800ad78:	f00d fb76 	bl	8018468 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3314      	adds	r3, #20
 800ad80:	4618      	mov	r0, r3
 800ad82:	f00d f938 	bl	8017ff6 <sys_mbox_valid>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d006      	beq.n	800ad9a <netconn_free+0x5a>
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	@ (800adc0 <netconn_free+0x80>)
 800ad8e:	f240 3226 	movw	r2, #806	@ 0x326
 800ad92:	490f      	ldr	r1, [pc, #60]	@ (800add0 <netconn_free+0x90>)
 800ad94:	480c      	ldr	r0, [pc, #48]	@ (800adc8 <netconn_free+0x88>)
 800ad96:	f00d fb67 	bl	8018468 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	330c      	adds	r3, #12
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f00d f9ad 	bl	80180fe <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	330c      	adds	r3, #12
 800ada8:	4618      	mov	r0, r3
 800adaa:	f00d f9c6 	bl	801813a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	2007      	movs	r0, #7
 800adb2:	f002 fd4d 	bl	800d850 <memp_free>
}
 800adb6:	bf00      	nop
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	08019c60 	.word	0x08019c60
 800adc4:	08019e8c 	.word	0x08019e8c
 800adc8:	08019ca4 	.word	0x08019ca4
 800adcc:	08019ebc 	.word	0x08019ebc
 800add0:	08019ef8 	.word	0x08019ef8

0800add4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3310      	adds	r3, #16
 800ade0:	4618      	mov	r0, r3
 800ade2:	f00d f908 	bl	8017ff6 <sys_mbox_valid>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d02f      	beq.n	800ae4c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800adec:	e018      	b.n	800ae20 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adf6:	2b10      	cmp	r3, #16
 800adf8:	d10e      	bne.n	800ae18 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	f107 020f 	add.w	r2, r7, #15
 800ae00:	4611      	mov	r1, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fafe 	bl	800a404 <lwip_netconn_is_err_msg>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d108      	bne.n	800ae20 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f003 fbc1 	bl	800e598 <pbuf_free>
 800ae16:	e003      	b.n	800ae20 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fede 	bl	800bbdc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3310      	adds	r3, #16
 800ae24:	f107 0210 	add.w	r2, r7, #16
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f00d f8c7 	bl	8017fbe <sys_arch_mbox_tryfetch>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d1da      	bne.n	800adee <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3310      	adds	r3, #16
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f00d f853 	bl	8017ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3310      	adds	r3, #16
 800ae46:	4618      	mov	r0, r3
 800ae48:	f00d f8e6 	bl	8018018 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3314      	adds	r3, #20
 800ae50:	4618      	mov	r0, r3
 800ae52:	f00d f8d0 	bl	8017ff6 <sys_mbox_valid>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d034      	beq.n	800aec6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae5c:	e01d      	b.n	800ae9a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f107 020e 	add.w	r2, r7, #14
 800ae64:	4611      	mov	r1, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff facc 	bl	800a404 <lwip_netconn_is_err_msg>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d113      	bne.n	800ae9a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ae76:	6978      	ldr	r0, [r7, #20]
 800ae78:	f7ff ffac 	bl	800add4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d007      	beq.n	800ae94 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f004 f985 	bl	800f198 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ae94:	6978      	ldr	r0, [r7, #20]
 800ae96:	f7ff ff53 	bl	800ad40 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3314      	adds	r3, #20
 800ae9e:	f107 0210 	add.w	r2, r7, #16
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f00d f88a 	bl	8017fbe <sys_arch_mbox_tryfetch>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d1d5      	bne.n	800ae5e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3314      	adds	r3, #20
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f00d f816 	bl	8017ee8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3314      	adds	r3, #20
 800aec0:	4618      	mov	r0, r3
 800aec2:	f00d f8a9 	bl	8018018 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800aec6:	bf00      	nop
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d106      	bne.n	800aef4 <lwip_netconn_do_close_internal+0x24>
 800aee6:	4b87      	ldr	r3, [pc, #540]	@ (800b104 <lwip_netconn_do_close_internal+0x234>)
 800aee8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800aeec:	4986      	ldr	r1, [pc, #536]	@ (800b108 <lwip_netconn_do_close_internal+0x238>)
 800aeee:	4887      	ldr	r0, [pc, #540]	@ (800b10c <lwip_netconn_do_close_internal+0x23c>)
 800aef0:	f00d faba 	bl	8018468 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aefc:	2b10      	cmp	r3, #16
 800aefe:	d006      	beq.n	800af0e <lwip_netconn_do_close_internal+0x3e>
 800af00:	4b80      	ldr	r3, [pc, #512]	@ (800b104 <lwip_netconn_do_close_internal+0x234>)
 800af02:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800af06:	4982      	ldr	r1, [pc, #520]	@ (800b110 <lwip_netconn_do_close_internal+0x240>)
 800af08:	4880      	ldr	r0, [pc, #512]	@ (800b10c <lwip_netconn_do_close_internal+0x23c>)
 800af0a:	f00d faad 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	785b      	ldrb	r3, [r3, #1]
 800af12:	2b04      	cmp	r3, #4
 800af14:	d006      	beq.n	800af24 <lwip_netconn_do_close_internal+0x54>
 800af16:	4b7b      	ldr	r3, [pc, #492]	@ (800b104 <lwip_netconn_do_close_internal+0x234>)
 800af18:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800af1c:	497d      	ldr	r1, [pc, #500]	@ (800b114 <lwip_netconn_do_close_internal+0x244>)
 800af1e:	487b      	ldr	r0, [pc, #492]	@ (800b10c <lwip_netconn_do_close_internal+0x23c>)
 800af20:	f00d faa2 	bl	8018468 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <lwip_netconn_do_close_internal+0x6a>
 800af2c:	4b75      	ldr	r3, [pc, #468]	@ (800b104 <lwip_netconn_do_close_internal+0x234>)
 800af2e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800af32:	4979      	ldr	r1, [pc, #484]	@ (800b118 <lwip_netconn_do_close_internal+0x248>)
 800af34:	4875      	ldr	r0, [pc, #468]	@ (800b10c <lwip_netconn_do_close_internal+0x23c>)
 800af36:	f00d fa97 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <lwip_netconn_do_close_internal+0x80>
 800af42:	4b70      	ldr	r3, [pc, #448]	@ (800b104 <lwip_netconn_do_close_internal+0x234>)
 800af44:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800af48:	4974      	ldr	r1, [pc, #464]	@ (800b11c <lwip_netconn_do_close_internal+0x24c>)
 800af4a:	4870      	ldr	r0, [pc, #448]	@ (800b10c <lwip_netconn_do_close_internal+0x23c>)
 800af4c:	f00d fa8c 	bl	8018468 <iprintf>

  tpcb = conn->pcb.tcp;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	7a1b      	ldrb	r3, [r3, #8]
 800af5c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	2b03      	cmp	r3, #3
 800af72:	d102      	bne.n	800af7a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800af74:	2301      	movs	r3, #1
 800af76:	75bb      	strb	r3, [r7, #22]
 800af78:	e01f      	b.n	800afba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00e      	beq.n	800af9e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800af84:	2b05      	cmp	r3, #5
 800af86:	d007      	beq.n	800af98 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800af8c:	2b06      	cmp	r3, #6
 800af8e:	d003      	beq.n	800af98 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800af94:	2b08      	cmp	r3, #8
 800af96:	d102      	bne.n	800af9e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800af98:	2301      	movs	r3, #1
 800af9a:	75bb      	strb	r3, [r7, #22]
 800af9c:	e00d      	b.n	800afba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d008      	beq.n	800afb6 <lwip_netconn_do_close_internal+0xe6>
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	8b5b      	ldrh	r3, [r3, #26]
 800afa8:	f003 0310 	and.w	r3, r3, #16
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800afb0:	2301      	movs	r3, #1
 800afb2:	75bb      	strb	r3, [r7, #22]
 800afb4:	e001      	b.n	800afba <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800afba:	7dbb      	ldrb	r3, [r7, #22]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800afc0:	2100      	movs	r1, #0
 800afc2:	6938      	ldr	r0, [r7, #16]
 800afc4:	f005 f9a8 	bl	8010318 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	7d1b      	ldrb	r3, [r3, #20]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d104      	bne.n	800afda <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800afd0:	2100      	movs	r1, #0
 800afd2:	6938      	ldr	r0, [r7, #16]
 800afd4:	f005 fa18 	bl	8010408 <tcp_accept>
 800afd8:	e01d      	b.n	800b016 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800afe0:	2100      	movs	r1, #0
 800afe2:	6938      	ldr	r0, [r7, #16]
 800afe4:	f005 f9aa 	bl	801033c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800afe8:	2100      	movs	r1, #0
 800afea:	6938      	ldr	r0, [r7, #16]
 800afec:	f005 fa0c 	bl	8010408 <tcp_accept>
    }
    if (shut_tx) {
 800aff0:	7b7b      	ldrb	r3, [r7, #13]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800aff6:	2100      	movs	r1, #0
 800aff8:	6938      	ldr	r0, [r7, #16]
 800affa:	f005 f9c1 	bl	8010380 <tcp_sent>
    }
    if (shut_close) {
 800affe:	7dbb      	ldrb	r3, [r7, #22]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d008      	beq.n	800b016 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b004:	2200      	movs	r2, #0
 800b006:	2100      	movs	r1, #0
 800b008:	6938      	ldr	r0, [r7, #16]
 800b00a:	f005 fa15 	bl	8010438 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b00e:	2100      	movs	r1, #0
 800b010:	6938      	ldr	r0, [r7, #16]
 800b012:	f005 f9d7 	bl	80103c4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b016:	7dbb      	ldrb	r3, [r7, #22]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d005      	beq.n	800b028 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b01c:	6938      	ldr	r0, [r7, #16]
 800b01e:	f003 ff75 	bl	800ef0c <tcp_close>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]
 800b026:	e007      	b.n	800b038 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	7b7a      	ldrb	r2, [r7, #13]
 800b02c:	4619      	mov	r1, r3
 800b02e:	6938      	ldr	r0, [r7, #16]
 800b030:	f003 ff98 	bl	800ef64 <tcp_shutdown>
 800b034:	4603      	mov	r3, r0
 800b036:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d102      	bne.n	800b046 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b040:	2301      	movs	r3, #1
 800b042:	757b      	strb	r3, [r7, #21]
 800b044:	e016      	b.n	800b074 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d10f      	bne.n	800b070 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a1b      	ldr	r3, [r3, #32]
 800b054:	7a5b      	ldrb	r3, [r3, #9]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10c      	bne.n	800b074 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b05a:	2301      	movs	r3, #1
 800b05c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b05e:	7dbb      	ldrb	r3, [r7, #22]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f004 f897 	bl	800f198 <tcp_abort>
          err = ERR_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
 800b06e:	e001      	b.n	800b074 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b070:	2301      	movs	r3, #1
 800b072:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b074:	7d7b      	ldrb	r3, [r7, #21]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d052      	beq.n	800b120 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	7dfa      	ldrb	r2, [r7, #23]
 800b08a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b098:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d129      	bne.n	800b0f4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b0a0:	7dbb      	ldrb	r3, [r7, #22]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00c      	beq.n	800b0c0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <lwip_netconn_do_close_internal+0x1f0>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2104      	movs	r1, #4
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	4798      	blx	r3
      }
      if (shut_rx) {
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d009      	beq.n	800b0da <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <lwip_netconn_do_close_internal+0x20a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	4798      	blx	r3
      }
      if (shut_tx) {
 800b0da:	7b7b      	ldrb	r3, [r7, #13]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d009      	beq.n	800b0f4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <lwip_netconn_do_close_internal+0x224>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2102      	movs	r1, #2
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b0f4:	78fb      	ldrb	r3, [r7, #3]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b0fa:	68b8      	ldr	r0, [r7, #8]
 800b0fc:	f00c fff2 	bl	80180e4 <sys_sem_signal>
    }
    return ERR_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	e03c      	b.n	800b17e <lwip_netconn_do_close_internal+0x2ae>
 800b104:	08019c60 	.word	0x08019c60
 800b108:	08019f34 	.word	0x08019f34
 800b10c:	08019ca4 	.word	0x08019ca4
 800b110:	08019f44 	.word	0x08019f44
 800b114:	08019f64 	.word	0x08019f64
 800b118:	08019f88 	.word	0x08019f88
 800b11c:	08019dc8 	.word	0x08019dc8
  }
  if (!close_finished) {
 800b120:	7d7b      	ldrb	r3, [r7, #21]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d11e      	bne.n	800b164 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	7d1b      	ldrb	r3, [r3, #20]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d106      	bne.n	800b13c <lwip_netconn_do_close_internal+0x26c>
 800b12e:	4b16      	ldr	r3, [pc, #88]	@ (800b188 <lwip_netconn_do_close_internal+0x2b8>)
 800b130:	f240 4241 	movw	r2, #1089	@ 0x441
 800b134:	4915      	ldr	r1, [pc, #84]	@ (800b18c <lwip_netconn_do_close_internal+0x2bc>)
 800b136:	4816      	ldr	r0, [pc, #88]	@ (800b190 <lwip_netconn_do_close_internal+0x2c0>)
 800b138:	f00d f996 	bl	8018468 <iprintf>
    if (shut_tx) {
 800b13c:	7b7b      	ldrb	r3, [r7, #13]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b142:	4914      	ldr	r1, [pc, #80]	@ (800b194 <lwip_netconn_do_close_internal+0x2c4>)
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f005 f91b 	bl	8010380 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b14a:	2201      	movs	r2, #1
 800b14c:	4912      	ldr	r1, [pc, #72]	@ (800b198 <lwip_netconn_do_close_internal+0x2c8>)
 800b14e:	6938      	ldr	r0, [r7, #16]
 800b150:	f005 f972 	bl	8010438 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b154:	4911      	ldr	r1, [pc, #68]	@ (800b19c <lwip_netconn_do_close_internal+0x2cc>)
 800b156:	6938      	ldr	r0, [r7, #16]
 800b158:	f005 f934 	bl	80103c4 <tcp_err>
    tcp_arg(tpcb, conn);
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	6938      	ldr	r0, [r7, #16]
 800b160:	f005 f8da 	bl	8010318 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d106      	bne.n	800b17a <lwip_netconn_do_close_internal+0x2aa>
 800b16c:	4b06      	ldr	r3, [pc, #24]	@ (800b188 <lwip_netconn_do_close_internal+0x2b8>)
 800b16e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800b172:	490b      	ldr	r1, [pc, #44]	@ (800b1a0 <lwip_netconn_do_close_internal+0x2d0>)
 800b174:	4806      	ldr	r0, [pc, #24]	@ (800b190 <lwip_netconn_do_close_internal+0x2c0>)
 800b176:	f00d f977 	bl	8018468 <iprintf>
  return err;
 800b17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3718      	adds	r7, #24
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	08019c60 	.word	0x08019c60
 800b18c:	08019f9c 	.word	0x08019f9c
 800b190:	08019ca4 	.word	0x08019ca4
 800b194:	0800a749 	.word	0x0800a749
 800b198:	0800a681 	.word	0x0800a681
 800b19c:	0800a7f1 	.word	0x0800a7f1
 800b1a0:	08019fc0 	.word	0x08019fc0

0800b1a4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b1b8:	7afb      	ldrb	r3, [r7, #11]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00d      	beq.n	800b1da <lwip_netconn_do_delconn+0x36>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d006      	beq.n	800b1da <lwip_netconn_do_delconn+0x36>
 800b1cc:	4b60      	ldr	r3, [pc, #384]	@ (800b350 <lwip_netconn_do_delconn+0x1ac>)
 800b1ce:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b1d2:	4960      	ldr	r1, [pc, #384]	@ (800b354 <lwip_netconn_do_delconn+0x1b0>)
 800b1d4:	4860      	ldr	r0, [pc, #384]	@ (800b358 <lwip_netconn_do_delconn+0x1b4>)
 800b1d6:	f00d f947 	bl	8018468 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b1da:	7afb      	ldrb	r3, [r7, #11]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <lwip_netconn_do_delconn+0x48>
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d002      	beq.n	800b1ec <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d109      	bne.n	800b200 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d10a      	bne.n	800b208 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	7f1b      	ldrb	r3, [r3, #28]
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d103      	bne.n	800b208 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	22fb      	movs	r2, #251	@ 0xfb
 800b204:	711a      	strb	r2, [r3, #4]
 800b206:	e097      	b.n	800b338 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d10d      	bne.n	800b22a <lwip_netconn_do_delconn+0x86>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	7f1b      	ldrb	r3, [r3, #28]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d106      	bne.n	800b22a <lwip_netconn_do_delconn+0x86>
 800b21c:	4b4c      	ldr	r3, [pc, #304]	@ (800b350 <lwip_netconn_do_delconn+0x1ac>)
 800b21e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800b222:	494e      	ldr	r1, [pc, #312]	@ (800b35c <lwip_netconn_do_delconn+0x1b8>)
 800b224:	484c      	ldr	r0, [pc, #304]	@ (800b358 <lwip_netconn_do_delconn+0x1b4>)
 800b226:	f00d f91f 	bl	8018468 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff fdcd 	bl	800add4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d05f      	beq.n	800b304 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b24e:	2b10      	cmp	r3, #16
 800b250:	d00d      	beq.n	800b26e <lwip_netconn_do_delconn+0xca>
 800b252:	2b20      	cmp	r3, #32
 800b254:	d151      	bne.n	800b2fa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4618      	mov	r0, r3
 800b268:	f00a fac0 	bl	80157ec <udp_remove>
          break;
 800b26c:	e046      	b.n	800b2fc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d006      	beq.n	800b286 <lwip_netconn_do_delconn+0xe2>
 800b278:	4b35      	ldr	r3, [pc, #212]	@ (800b350 <lwip_netconn_do_delconn+0x1ac>)
 800b27a:	f240 4294 	movw	r2, #1172	@ 0x494
 800b27e:	4938      	ldr	r1, [pc, #224]	@ (800b360 <lwip_netconn_do_delconn+0x1bc>)
 800b280:	4835      	ldr	r0, [pc, #212]	@ (800b358 <lwip_netconn_do_delconn+0x1b4>)
 800b282:	f00d f8f1 	bl	8018468 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2204      	movs	r2, #4
 800b28c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2203      	movs	r2, #3
 800b292:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fe14 	bl	800aed0 <lwip_netconn_do_close_internal>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d04b      	beq.n	800b346 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d006      	beq.n	800b2c6 <lwip_netconn_do_delconn+0x122>
 800b2b8:	4b25      	ldr	r3, [pc, #148]	@ (800b350 <lwip_netconn_do_delconn+0x1ac>)
 800b2ba:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b2be:	4929      	ldr	r1, [pc, #164]	@ (800b364 <lwip_netconn_do_delconn+0x1c0>)
 800b2c0:	4825      	ldr	r0, [pc, #148]	@ (800b358 <lwip_netconn_do_delconn+0x1b4>)
 800b2c2:	f00d f8d1 	bl	8018468 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b2c6:	4828      	ldr	r0, [pc, #160]	@ (800b368 <lwip_netconn_do_delconn+0x1c4>)
 800b2c8:	f00c ff7d 	bl	80181c6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	330c      	adds	r3, #12
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f00c fed4 	bl	8018082 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b2da:	4823      	ldr	r0, [pc, #140]	@ (800b368 <lwip_netconn_do_delconn+0x1c4>)
 800b2dc:	f00c ff64 	bl	80181a8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	785b      	ldrb	r3, [r3, #1]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d02d      	beq.n	800b346 <lwip_netconn_do_delconn+0x1a2>
 800b2ea:	4b19      	ldr	r3, [pc, #100]	@ (800b350 <lwip_netconn_do_delconn+0x1ac>)
 800b2ec:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b2f0:	491c      	ldr	r1, [pc, #112]	@ (800b364 <lwip_netconn_do_delconn+0x1c0>)
 800b2f2:	4819      	ldr	r0, [pc, #100]	@ (800b358 <lwip_netconn_do_delconn+0x1b4>)
 800b2f4:	f00d f8b8 	bl	8018468 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b2f8:	e025      	b.n	800b346 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b2fa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <lwip_netconn_do_delconn+0x17a>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	6810      	ldr	r0, [r2, #0]
 800b318:	2200      	movs	r2, #0
 800b31a:	2100      	movs	r1, #0
 800b31c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	d007      	beq.n	800b338 <lwip_netconn_do_delconn+0x194>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	6810      	ldr	r0, [r2, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	2102      	movs	r1, #2
 800b336:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	330c      	adds	r3, #12
 800b33e:	4618      	mov	r0, r3
 800b340:	f00c feea 	bl	8018118 <sys_sem_valid>
 800b344:	e000      	b.n	800b348 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b346:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	08019c60 	.word	0x08019c60
 800b354:	08019fd0 	.word	0x08019fd0
 800b358:	08019ca4 	.word	0x08019ca4
 800b35c:	08019fe4 	.word	0x08019fe4
 800b360:	0801a004 	.word	0x0801a004
 800b364:	0801a020 	.word	0x0801a020
 800b368:	2000b578 	.word	0x2000b578

0800b36c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d025      	beq.n	800b3ce <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b38c:	2b10      	cmp	r3, #16
 800b38e:	d00e      	beq.n	800b3ae <lwip_netconn_do_bind+0x42>
 800b390:	2b20      	cmp	r3, #32
 800b392:	d119      	bne.n	800b3c8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6858      	ldr	r0, [r3, #4]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	6899      	ldr	r1, [r3, #8]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	899b      	ldrh	r3, [r3, #12]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f00a f97a 	bl	801569c <udp_bind>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]
        break;
 800b3ac:	e011      	b.n	800b3d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6858      	ldr	r0, [r3, #4]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6899      	ldr	r1, [r3, #8]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	899b      	ldrh	r3, [r3, #12]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	f003 fef7 	bl	800f1b0 <tcp_bind>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]
        break;
 800b3c6:	e004      	b.n	800b3d2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b3c8:	23fa      	movs	r3, #250	@ 0xfa
 800b3ca:	73fb      	strb	r3, [r7, #15]
        break;
 800b3cc:	e001      	b.n	800b3d2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b3ce:	23fa      	movs	r3, #250	@ 0xfa
 800b3d0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	7bfa      	ldrb	r2, [r7, #15]
 800b3d6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b086      	sub	sp, #24
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d07f      	beq.n	800b4f6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b400:	2b10      	cmp	r3, #16
 800b402:	d175      	bne.n	800b4f0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	785b      	ldrb	r3, [r3, #1]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d165      	bne.n	800b4da <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	7d1b      	ldrb	r3, [r3, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d002      	beq.n	800b420 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800b41a:	23fa      	movs	r3, #250	@ 0xfa
 800b41c:	72fb      	strb	r3, [r7, #11]
 800b41e:	e06c      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b420:	23ff      	movs	r3, #255	@ 0xff
 800b422:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f107 020b 	add.w	r2, r7, #11
 800b42e:	7cf9      	ldrb	r1, [r7, #19]
 800b430:	4618      	mov	r0, r3
 800b432:	f003 ff87 	bl	800f344 <tcp_listen_with_backlog_and_err>
 800b436:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d05d      	beq.n	800b4fa <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3310      	adds	r3, #16
 800b444:	4618      	mov	r0, r3
 800b446:	f00c fdd6 	bl	8017ff6 <sys_mbox_valid>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	3310      	adds	r3, #16
 800b456:	4618      	mov	r0, r3
 800b458:	f00c fd46 	bl	8017ee8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3310      	adds	r3, #16
 800b462:	4618      	mov	r0, r3
 800b464:	f00c fdd8 	bl	8018018 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3314      	adds	r3, #20
 800b472:	4618      	mov	r0, r3
 800b474:	f00c fdbf 	bl	8017ff6 <sys_mbox_valid>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d108      	bne.n	800b490 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3314      	adds	r3, #20
 800b484:	2106      	movs	r1, #6
 800b486:	4618      	mov	r0, r3
 800b488:	f00c fd0c 	bl	8017ea4 <sys_mbox_new>
 800b48c:	4603      	mov	r3, r0
 800b48e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b490:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d118      	bne.n	800b4ca <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2202      	movs	r2, #2
 800b49e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	f004 ff2f 	bl	8010318 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4912      	ldr	r1, [pc, #72]	@ (800b50c <lwip_netconn_do_listen+0x12c>)
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f004 ffa0 	bl	8010408 <tcp_accept>
 800b4c8:	e017      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f003 fd1e 	bl	800ef0c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	605a      	str	r2, [r3, #4]
 800b4d8:	e00f      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d102      	bne.n	800b4ea <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	72fb      	strb	r3, [r7, #11]
 800b4e8:	e007      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b4ea:	23f5      	movs	r3, #245	@ 0xf5
 800b4ec:	72fb      	strb	r3, [r7, #11]
 800b4ee:	e004      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800b4f0:	23f0      	movs	r3, #240	@ 0xf0
 800b4f2:	72fb      	strb	r3, [r7, #11]
 800b4f4:	e001      	b.n	800b4fa <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800b4f6:	23f5      	movs	r3, #245	@ 0xf5
 800b4f8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800b4fa:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b502:	bf00      	nop
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0800a9ed 	.word	0x0800a9ed

0800b510 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe ff1e 	bl	800a362 <netconn_err>
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d134      	bne.n	800b59c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d02d      	beq.n	800b598 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b546:	2b20      	cmp	r3, #32
 800b548:	d123      	bne.n	800b592 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10c      	bne.n	800b56e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f009 feb0 	bl	80152c8 <udp_send>
 800b568:	4603      	mov	r3, r0
 800b56a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b56c:	e016      	b.n	800b59c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6858      	ldr	r0, [r3, #4]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	6819      	ldr	r1, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f103 0208 	add.w	r2, r3, #8
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	899b      	ldrh	r3, [r3, #12]
 800b588:	f009 fed2 	bl	8015330 <udp_sendto>
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
          break;
 800b590:	e004      	b.n	800b59c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b592:	23f5      	movs	r3, #245	@ 0xf5
 800b594:	73fb      	strb	r3, [r7, #15]
          break;
 800b596:	e001      	b.n	800b59c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b598:	23f5      	movs	r3, #245	@ 0xf5
 800b59a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	7bfa      	ldrb	r2, [r7, #15]
 800b5a0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b5a2:	bf00      	nop
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b086      	sub	sp, #24
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d022      	beq.n	800b60c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d11b      	bne.n	800b60c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e0:	d202      	bcs.n	800b5e8 <lwip_netconn_do_recv+0x3e>
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	e001      	b.n	800b5ec <lwip_netconn_do_recv+0x42>
 800b5e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b5ec:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	89fa      	ldrh	r2, [r7, #14]
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f003 ffa7 	bl	800f54c <tcp_recved>
        remaining -= recved;
 800b5fe:	89fb      	ldrh	r3, [r7, #14]
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e6      	bne.n	800b5da <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b60c:	bf00      	nop
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d106      	bne.n	800b638 <lwip_netconn_do_writemore+0x24>
 800b62a:	4b96      	ldr	r3, [pc, #600]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b62c:	f240 6273 	movw	r2, #1651	@ 0x673
 800b630:	4995      	ldr	r1, [pc, #596]	@ (800b888 <lwip_netconn_do_writemore+0x274>)
 800b632:	4896      	ldr	r0, [pc, #600]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b634:	f00c ff18 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	785b      	ldrb	r3, [r3, #1]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d006      	beq.n	800b64e <lwip_netconn_do_writemore+0x3a>
 800b640:	4b90      	ldr	r3, [pc, #576]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b642:	f240 6274 	movw	r2, #1652	@ 0x674
 800b646:	4992      	ldr	r1, [pc, #584]	@ (800b890 <lwip_netconn_do_writemore+0x27c>)
 800b648:	4890      	ldr	r0, [pc, #576]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b64a:	f00c ff0d 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <lwip_netconn_do_writemore+0x50>
 800b656:	4b8b      	ldr	r3, [pc, #556]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b658:	f240 6275 	movw	r2, #1653	@ 0x675
 800b65c:	498d      	ldr	r1, [pc, #564]	@ (800b894 <lwip_netconn_do_writemore+0x280>)
 800b65e:	488b      	ldr	r0, [pc, #556]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b660:	f00c ff02 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <lwip_netconn_do_writemore+0x66>
 800b66c:	4b85      	ldr	r3, [pc, #532]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b66e:	f240 6276 	movw	r2, #1654	@ 0x676
 800b672:	4989      	ldr	r1, [pc, #548]	@ (800b898 <lwip_netconn_do_writemore+0x284>)
 800b674:	4885      	ldr	r0, [pc, #532]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b676:	f00c fef7 	bl	8018468 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a1b      	ldr	r3, [r3, #32]
 800b67e:	699a      	ldr	r2, [r3, #24]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	429a      	cmp	r2, r3
 800b688:	d306      	bcc.n	800b698 <lwip_netconn_do_writemore+0x84>
 800b68a:	4b7e      	ldr	r3, [pc, #504]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b68c:	f240 6277 	movw	r2, #1655	@ 0x677
 800b690:	4982      	ldr	r1, [pc, #520]	@ (800b89c <lwip_netconn_do_writemore+0x288>)
 800b692:	487e      	ldr	r0, [pc, #504]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b694:	f00c fee8 	bl	8018468 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	899b      	ldrh	r3, [r3, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d106      	bne.n	800b6b0 <lwip_netconn_do_writemore+0x9c>
 800b6a2:	4b78      	ldr	r3, [pc, #480]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b6a4:	f240 6279 	movw	r2, #1657	@ 0x679
 800b6a8:	497d      	ldr	r1, [pc, #500]	@ (800b8a0 <lwip_netconn_do_writemore+0x28c>)
 800b6aa:	4878      	ldr	r0, [pc, #480]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b6ac:	f00c fedc 	bl	8018468 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	7f1b      	ldrb	r3, [r3, #28]
 800b6b6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	7f1b      	ldrb	r3, [r3, #28]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <lwip_netconn_do_writemore+0xba>
 800b6c4:	7ebb      	ldrb	r3, [r7, #26]
 800b6c6:	f003 0304 	and.w	r3, r3, #4
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <lwip_netconn_do_writemore+0xbe>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <lwip_netconn_do_writemore+0xc0>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6a1b      	ldr	r3, [r3, #32]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b700:	d307      	bcc.n	800b712 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b702:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b706:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b708:	7ebb      	ldrb	r3, [r7, #26]
 800b70a:	f043 0302 	orr.w	r3, r3, #2
 800b70e:	76bb      	strb	r3, [r7, #26]
 800b710:	e001      	b.n	800b716 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b71e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b720:	89fa      	ldrh	r2, [r7, #14]
 800b722:	8bbb      	ldrh	r3, [r7, #28]
 800b724:	429a      	cmp	r2, r3
 800b726:	d216      	bcs.n	800b756 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b728:	89fb      	ldrh	r3, [r7, #14]
 800b72a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b72c:	7e3b      	ldrb	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00d      	beq.n	800b74e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b732:	8bbb      	ldrh	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10e      	bne.n	800b756 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d102      	bne.n	800b748 <lwip_netconn_do_writemore+0x134>
 800b742:	f06f 0306 	mvn.w	r3, #6
 800b746:	e000      	b.n	800b74a <lwip_netconn_do_writemore+0x136>
 800b748:	2300      	movs	r3, #0
 800b74a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b74c:	e07d      	b.n	800b84a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b74e:	7ebb      	ldrb	r3, [r7, #26]
 800b750:	f043 0302 	orr.w	r3, r3, #2
 800b754:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	691a      	ldr	r2, [r3, #16]
 800b75c:	8bbb      	ldrh	r3, [r7, #28]
 800b75e:	441a      	add	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d906      	bls.n	800b77a <lwip_netconn_do_writemore+0x166>
 800b76c:	4b45      	ldr	r3, [pc, #276]	@ (800b884 <lwip_netconn_do_writemore+0x270>)
 800b76e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800b772:	494c      	ldr	r1, [pc, #304]	@ (800b8a4 <lwip_netconn_do_writemore+0x290>)
 800b774:	4845      	ldr	r0, [pc, #276]	@ (800b88c <lwip_netconn_do_writemore+0x278>)
 800b776:	f00c fe77 	bl	8018468 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b77a:	8bbb      	ldrh	r3, [r7, #28]
 800b77c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b780:	4293      	cmp	r3, r2
 800b782:	d103      	bne.n	800b78c <lwip_netconn_do_writemore+0x178>
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b78a:	d209      	bcs.n	800b7a0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b790:	8bba      	ldrh	r2, [r7, #28]
 800b792:	429a      	cmp	r2, r3
 800b794:	d10b      	bne.n	800b7ae <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	899b      	ldrh	r3, [r3, #12]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d906      	bls.n	800b7ae <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b7a4:	7ebb      	ldrb	r3, [r7, #26]
 800b7a6:	f043 0302 	orr.w	r3, r3, #2
 800b7aa:	76bb      	strb	r3, [r7, #26]
 800b7ac:	e001      	b.n	800b7b2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6858      	ldr	r0, [r3, #4]
 800b7b6:	7ebb      	ldrb	r3, [r7, #26]
 800b7b8:	8bba      	ldrh	r2, [r7, #28]
 800b7ba:	6979      	ldr	r1, [r7, #20]
 800b7bc:	f007 fce8 	bl	8013190 <tcp_write>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b7c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d12c      	bne.n	800b826 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a1b      	ldr	r3, [r3, #32]
 800b7d0:	6999      	ldr	r1, [r3, #24]
 800b7d2:	8bba      	ldrh	r2, [r7, #28]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
 800b7d8:	440a      	add	r2, r1
 800b7da:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	6919      	ldr	r1, [r3, #16]
 800b7e2:	8bba      	ldrh	r2, [r7, #28]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d113      	bne.n	800b826 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	899a      	ldrh	r2, [r3, #12]
 800b804:	3a01      	subs	r2, #1
 800b806:	b292      	uxth	r2, r2
 800b808:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	899b      	ldrh	r3, [r3, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d008      	beq.n	800b826 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	689a      	ldr	r2, [r3, #8]
 800b81a:	3208      	adds	r2, #8
 800b81c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	2200      	movs	r2, #0
 800b824:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b826:	7e7b      	ldrb	r3, [r7, #25]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <lwip_netconn_do_writemore+0x222>
 800b82c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f43f af50 	beq.w	800b6d6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d004      	beq.n	800b848 <lwip_netconn_do_writemore+0x234>
 800b83e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b846:	d146      	bne.n	800b8d6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b848:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b84a:	7e3b      	ldrb	r3, [r7, #24]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d02b      	beq.n	800b8a8 <lwip_netconn_do_writemore+0x294>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	695b      	ldr	r3, [r3, #20]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d223      	bcs.n	800b8a8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d005      	beq.n	800b874 <lwip_netconn_do_writemore+0x260>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86c:	2200      	movs	r2, #0
 800b86e:	2103      	movs	r1, #3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7f1b      	ldrb	r3, [r3, #28]
 800b878:	f043 0310 	orr.w	r3, r3, #16
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	771a      	strb	r2, [r3, #28]
 800b882:	e028      	b.n	800b8d6 <lwip_netconn_do_writemore+0x2c2>
 800b884:	08019c60 	.word	0x08019c60
 800b888:	08019db8 	.word	0x08019db8
 800b88c:	08019ca4 	.word	0x08019ca4
 800b890:	0801a0c0 	.word	0x0801a0c0
 800b894:	08019dc8 	.word	0x08019dc8
 800b898:	0801a0e0 	.word	0x0801a0e0
 800b89c:	0801a0f8 	.word	0x0801a0f8
 800b8a0:	0801a138 	.word	0x0801a138
 800b8a4:	0801a160 	.word	0x0801a160
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b8b0:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b8b4:	d305      	bcc.n	800b8c2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d909      	bls.n	800b8d6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d005      	beq.n	800b8d6 <lwip_netconn_do_writemore+0x2c2>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2103      	movs	r1, #3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b8d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d11d      	bne.n	800b91a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	699a      	ldr	r2, [r3, #24]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d002      	beq.n	800b8f4 <lwip_netconn_do_writemore+0x2e0>
 800b8ee:	7e3b      	ldrb	r3, [r7, #24]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f008 fa31 	bl	8013d64 <tcp_output>
 800b902:	4603      	mov	r3, r0
 800b904:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b906:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b90a:	f113 0f04 	cmn.w	r3, #4
 800b90e:	d12c      	bne.n	800b96a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b910:	7b3b      	ldrb	r3, [r7, #12]
 800b912:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b914:	2301      	movs	r3, #1
 800b916:	76fb      	strb	r3, [r7, #27]
 800b918:	e027      	b.n	800b96a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b91a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b922:	d120      	bne.n	800b966 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	f008 fa1b 	bl	8013d64 <tcp_output>
 800b92e:	4603      	mov	r3, r0
 800b930:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b932:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b936:	f113 0f04 	cmn.w	r3, #4
 800b93a:	d104      	bne.n	800b946 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b93c:	7b7b      	ldrb	r3, [r7, #13]
 800b93e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b940:	2301      	movs	r3, #1
 800b942:	76fb      	strb	r3, [r7, #27]
 800b944:	e011      	b.n	800b96a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b946:	7e3b      	ldrb	r3, [r7, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00e      	beq.n	800b96a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d102      	bne.n	800b95c <lwip_netconn_do_writemore+0x348>
 800b956:	f06f 0306 	mvn.w	r3, #6
 800b95a:	e000      	b.n	800b95e <lwip_netconn_do_writemore+0x34a>
 800b95c:	2300      	movs	r3, #0
 800b95e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b960:	2301      	movs	r3, #1
 800b962:	76fb      	strb	r3, [r7, #27]
 800b964:	e001      	b.n	800b96a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b966:	2301      	movs	r3, #1
 800b968:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b96a:	7efb      	ldrb	r3, [r7, #27]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d015      	beq.n	800b99c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a1b      	ldr	r3, [r3, #32]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	330c      	adds	r3, #12
 800b978:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	7ffa      	ldrb	r2, [r7, #31]
 800b980:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d006      	beq.n	800b9a2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f00c fba5 	bl	80180e4 <sys_sem_signal>
 800b99a:	e002      	b.n	800b9a2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	e000      	b.n	800b9a4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3720      	adds	r7, #32
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fe fcd0 	bl	800a362 <netconn_err>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d166      	bne.n	800ba9c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b9d8:	2b10      	cmp	r3, #16
 800b9da:	d15d      	bne.n	800ba98 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	785b      	ldrb	r3, [r3, #1]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b9e6:	23fb      	movs	r3, #251	@ 0xfb
 800b9e8:	73fb      	strb	r3, [r7, #15]
 800b9ea:	e057      	b.n	800ba9c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d04d      	beq.n	800ba92 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6a1b      	ldr	r3, [r3, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <lwip_netconn_do_write+0x6a>
 800ba08:	4b28      	ldr	r3, [pc, #160]	@ (800baac <lwip_netconn_do_write+0x100>)
 800ba0a:	f240 7223 	movw	r2, #1827	@ 0x723
 800ba0e:	4928      	ldr	r1, [pc, #160]	@ (800bab0 <lwip_netconn_do_write+0x104>)
 800ba10:	4828      	ldr	r0, [pc, #160]	@ (800bab4 <lwip_netconn_do_write+0x108>)
 800ba12:	f00c fd29 	bl	8018468 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <lwip_netconn_do_write+0x80>
 800ba1e:	4b23      	ldr	r3, [pc, #140]	@ (800baac <lwip_netconn_do_write+0x100>)
 800ba20:	f240 7224 	movw	r2, #1828	@ 0x724
 800ba24:	4924      	ldr	r1, [pc, #144]	@ (800bab8 <lwip_netconn_do_write+0x10c>)
 800ba26:	4823      	ldr	r0, [pc, #140]	@ (800bab4 <lwip_netconn_do_write+0x108>)
 800ba28:	f00c fd1e 	bl	8018468 <iprintf>
        msg->conn->current_msg = msg;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fdea 	bl	800b614 <lwip_netconn_do_writemore>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d02e      	beq.n	800baa4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d006      	beq.n	800ba5e <lwip_netconn_do_write+0xb2>
 800ba50:	4b16      	ldr	r3, [pc, #88]	@ (800baac <lwip_netconn_do_write+0x100>)
 800ba52:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800ba56:	4919      	ldr	r1, [pc, #100]	@ (800babc <lwip_netconn_do_write+0x110>)
 800ba58:	4816      	ldr	r0, [pc, #88]	@ (800bab4 <lwip_netconn_do_write+0x108>)
 800ba5a:	f00c fd05 	bl	8018468 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ba5e:	4818      	ldr	r0, [pc, #96]	@ (800bac0 <lwip_netconn_do_write+0x114>)
 800ba60:	f00c fbb1 	bl	80181c6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	330c      	adds	r3, #12
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f00c fb08 	bl	8018082 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ba72:	4813      	ldr	r0, [pc, #76]	@ (800bac0 <lwip_netconn_do_write+0x114>)
 800ba74:	f00c fb98 	bl	80181a8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	785b      	ldrb	r3, [r3, #1]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d110      	bne.n	800baa4 <lwip_netconn_do_write+0xf8>
 800ba82:	4b0a      	ldr	r3, [pc, #40]	@ (800baac <lwip_netconn_do_write+0x100>)
 800ba84:	f240 722c 	movw	r2, #1836	@ 0x72c
 800ba88:	490c      	ldr	r1, [pc, #48]	@ (800babc <lwip_netconn_do_write+0x110>)
 800ba8a:	480a      	ldr	r0, [pc, #40]	@ (800bab4 <lwip_netconn_do_write+0x108>)
 800ba8c:	f00c fcec 	bl	8018468 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ba90:	e008      	b.n	800baa4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ba92:	23f5      	movs	r3, #245	@ 0xf5
 800ba94:	73fb      	strb	r3, [r7, #15]
 800ba96:	e001      	b.n	800ba9c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ba98:	23fa      	movs	r3, #250	@ 0xfa
 800ba9a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	7bfa      	ldrb	r2, [r7, #15]
 800baa0:	711a      	strb	r2, [r3, #4]
 800baa2:	e000      	b.n	800baa6 <lwip_netconn_do_write+0xfa>
        return;
 800baa4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	08019c60 	.word	0x08019c60
 800bab0:	0801a004 	.word	0x0801a004
 800bab4:	08019ca4 	.word	0x08019ca4
 800bab8:	0801a18c 	.word	0x0801a18c
 800babc:	0801a020 	.word	0x0801a020
 800bac0:	2000b578 	.word	0x2000b578

0800bac4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	785b      	ldrb	r3, [r3, #1]
 800bad6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d069      	beq.n	800bbb6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800baec:	2b10      	cmp	r3, #16
 800baee:	d162      	bne.n	800bbb6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d002      	beq.n	800bafe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800baf8:	7afb      	ldrb	r3, [r7, #11]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d05b      	beq.n	800bbb6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bafe:	7afb      	ldrb	r3, [r7, #11]
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d103      	bne.n	800bb0c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	22f5      	movs	r2, #245	@ 0xf5
 800bb08:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bb0a:	e059      	b.n	800bbc0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bb0c:	7afb      	ldrb	r3, [r7, #11]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d103      	bne.n	800bb1a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	22fb      	movs	r2, #251	@ 0xfb
 800bb16:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bb18:	e052      	b.n	800bbc0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	7a1b      	ldrb	r3, [r3, #8]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d004      	beq.n	800bb30 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff f952 	bl	800add4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d006      	beq.n	800bb48 <lwip_netconn_do_close+0x84>
 800bb3a:	4b23      	ldr	r3, [pc, #140]	@ (800bbc8 <lwip_netconn_do_close+0x104>)
 800bb3c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800bb40:	4922      	ldr	r1, [pc, #136]	@ (800bbcc <lwip_netconn_do_close+0x108>)
 800bb42:	4823      	ldr	r0, [pc, #140]	@ (800bbd0 <lwip_netconn_do_close+0x10c>)
 800bb44:	f00c fc90 	bl	8018468 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2204      	movs	r2, #4
 800bb4e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff f9b6 	bl	800aed0 <lwip_netconn_do_close_internal>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d029      	beq.n	800bbbe <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	785b      	ldrb	r3, [r3, #1]
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	d006      	beq.n	800bb82 <lwip_netconn_do_close+0xbe>
 800bb74:	4b14      	ldr	r3, [pc, #80]	@ (800bbc8 <lwip_netconn_do_close+0x104>)
 800bb76:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800bb7a:	4916      	ldr	r1, [pc, #88]	@ (800bbd4 <lwip_netconn_do_close+0x110>)
 800bb7c:	4814      	ldr	r0, [pc, #80]	@ (800bbd0 <lwip_netconn_do_close+0x10c>)
 800bb7e:	f00c fc73 	bl	8018468 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bb82:	4815      	ldr	r0, [pc, #84]	@ (800bbd8 <lwip_netconn_do_close+0x114>)
 800bb84:	f00c fb1f 	bl	80181c6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	330c      	adds	r3, #12
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4618      	mov	r0, r3
 800bb92:	f00c fa76 	bl	8018082 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800bb96:	4810      	ldr	r0, [pc, #64]	@ (800bbd8 <lwip_netconn_do_close+0x114>)
 800bb98:	f00c fb06 	bl	80181a8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00b      	beq.n	800bbbe <lwip_netconn_do_close+0xfa>
 800bba6:	4b08      	ldr	r3, [pc, #32]	@ (800bbc8 <lwip_netconn_do_close+0x104>)
 800bba8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800bbac:	4909      	ldr	r1, [pc, #36]	@ (800bbd4 <lwip_netconn_do_close+0x110>)
 800bbae:	4808      	ldr	r0, [pc, #32]	@ (800bbd0 <lwip_netconn_do_close+0x10c>)
 800bbb0:	f00c fc5a 	bl	8018468 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800bbb4:	e003      	b.n	800bbbe <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	22f5      	movs	r2, #245	@ 0xf5
 800bbba:	711a      	strb	r2, [r3, #4]
 800bbbc:	e000      	b.n	800bbc0 <lwip_netconn_do_close+0xfc>
      return;
 800bbbe:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	08019c60 	.word	0x08019c60
 800bbcc:	0801a004 	.word	0x0801a004
 800bbd0:	08019ca4 	.word	0x08019ca4
 800bbd4:	0801a020 	.word	0x0801a020
 800bbd8:	2000b578 	.word	0x2000b578

0800bbdc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d013      	beq.n	800bc12 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00b      	beq.n	800bc0a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f002 fcce 	bl	800e598 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	2006      	movs	r0, #6
 800bc0e:	f001 fe1f 	bl	800d850 <memp_free>
  }
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	4613      	mov	r3, r2
 800bc28:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d108      	bne.n	800bc42 <netbuf_ref+0x26>
 800bc30:	4b1c      	ldr	r3, [pc, #112]	@ (800bca4 <netbuf_ref+0x88>)
 800bc32:	2299      	movs	r2, #153	@ 0x99
 800bc34:	491c      	ldr	r1, [pc, #112]	@ (800bca8 <netbuf_ref+0x8c>)
 800bc36:	481d      	ldr	r0, [pc, #116]	@ (800bcac <netbuf_ref+0x90>)
 800bc38:	f00c fc16 	bl	8018468 <iprintf>
 800bc3c:	f06f 030f 	mvn.w	r3, #15
 800bc40:	e02b      	b.n	800bc9a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f002 fca2 	bl	800e598 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800bc54:	2241      	movs	r2, #65	@ 0x41
 800bc56:	2100      	movs	r1, #0
 800bc58:	2036      	movs	r0, #54	@ 0x36
 800bc5a:	f002 f9b9 	bl	800dfd0 <pbuf_alloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d105      	bne.n	800bc78 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
 800bc76:	e010      	b.n	800bc9a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	88fa      	ldrh	r2, [r7, #6]
 800bc86:	811a      	strh	r2, [r3, #8]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	891b      	ldrh	r3, [r3, #8]
 800bc8e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0801a1b8 	.word	0x0801a1b8
 800bca8:	0801a270 	.word	0x0801a270
 800bcac:	0801a208 	.word	0x0801a208

0800bcb0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d108      	bne.n	800bcd4 <netbuf_data+0x24>
 800bcc2:	4b1b      	ldr	r3, [pc, #108]	@ (800bd30 <netbuf_data+0x80>)
 800bcc4:	22c6      	movs	r2, #198	@ 0xc6
 800bcc6:	491b      	ldr	r1, [pc, #108]	@ (800bd34 <netbuf_data+0x84>)
 800bcc8:	481b      	ldr	r0, [pc, #108]	@ (800bd38 <netbuf_data+0x88>)
 800bcca:	f00c fbcd 	bl	8018468 <iprintf>
 800bcce:	f06f 030f 	mvn.w	r3, #15
 800bcd2:	e029      	b.n	800bd28 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d108      	bne.n	800bcec <netbuf_data+0x3c>
 800bcda:	4b15      	ldr	r3, [pc, #84]	@ (800bd30 <netbuf_data+0x80>)
 800bcdc:	22c7      	movs	r2, #199	@ 0xc7
 800bcde:	4917      	ldr	r1, [pc, #92]	@ (800bd3c <netbuf_data+0x8c>)
 800bce0:	4815      	ldr	r0, [pc, #84]	@ (800bd38 <netbuf_data+0x88>)
 800bce2:	f00c fbc1 	bl	8018468 <iprintf>
 800bce6:	f06f 030f 	mvn.w	r3, #15
 800bcea:	e01d      	b.n	800bd28 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d108      	bne.n	800bd04 <netbuf_data+0x54>
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd30 <netbuf_data+0x80>)
 800bcf4:	22c8      	movs	r2, #200	@ 0xc8
 800bcf6:	4912      	ldr	r1, [pc, #72]	@ (800bd40 <netbuf_data+0x90>)
 800bcf8:	480f      	ldr	r0, [pc, #60]	@ (800bd38 <netbuf_data+0x88>)
 800bcfa:	f00c fbb5 	bl	8018468 <iprintf>
 800bcfe:	f06f 030f 	mvn.w	r3, #15
 800bd02:	e011      	b.n	800bd28 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <netbuf_data+0x62>
    return ERR_BUF;
 800bd0c:	f06f 0301 	mvn.w	r3, #1
 800bd10:	e00a      	b.n	800bd28 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	895a      	ldrh	r2, [r3, #10]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	0801a1b8 	.word	0x0801a1b8
 800bd34:	0801a2c0 	.word	0x0801a2c0
 800bd38:	0801a208 	.word	0x0801a208
 800bd3c:	0801a2dc 	.word	0x0801a2dc
 800bd40:	0801a2fc 	.word	0x0801a2fc

0800bd44 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d108      	bne.n	800bd64 <netbuf_next+0x20>
 800bd52:	4b11      	ldr	r3, [pc, #68]	@ (800bd98 <netbuf_next+0x54>)
 800bd54:	22e0      	movs	r2, #224	@ 0xe0
 800bd56:	4911      	ldr	r1, [pc, #68]	@ (800bd9c <netbuf_next+0x58>)
 800bd58:	4811      	ldr	r0, [pc, #68]	@ (800bda0 <netbuf_next+0x5c>)
 800bd5a:	f00c fb85 	bl	8018468 <iprintf>
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd62:	e014      	b.n	800bd8e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <netbuf_next+0x30>
    return -1;
 800bd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd72:	e00c      	b.n	800bd8e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <netbuf_next+0x48>
    return 1;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e000      	b.n	800bd8e <netbuf_next+0x4a>
  }
  return 0;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	0801a1b8 	.word	0x0801a1b8
 800bd9c:	0801a318 	.word	0x0801a318
 800bda0:	0801a208 	.word	0x0801a208

0800bda4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bdae:	f009 f891 	bl	8014ed4 <sys_timeouts_sleeptime>
 800bdb2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdba:	d10b      	bne.n	800bdd4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bdbc:	4813      	ldr	r0, [pc, #76]	@ (800be0c <tcpip_timeouts_mbox_fetch+0x68>)
 800bdbe:	f00c fa02 	bl	80181c6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f00c f8ba 	bl	8017f40 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bdcc:	480f      	ldr	r0, [pc, #60]	@ (800be0c <tcpip_timeouts_mbox_fetch+0x68>)
 800bdce:	f00c f9eb 	bl	80181a8 <sys_mutex_lock>
    return;
 800bdd2:	e018      	b.n	800be06 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bdda:	f009 f841 	bl	8014e60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bdde:	e7e6      	b.n	800bdae <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bde0:	480a      	ldr	r0, [pc, #40]	@ (800be0c <tcpip_timeouts_mbox_fetch+0x68>)
 800bde2:	f00c f9f0 	bl	80181c6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f00c f8a8 	bl	8017f40 <sys_arch_mbox_fetch>
 800bdf0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bdf2:	4806      	ldr	r0, [pc, #24]	@ (800be0c <tcpip_timeouts_mbox_fetch+0x68>)
 800bdf4:	f00c f9d8 	bl	80181a8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d102      	bne.n	800be06 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800be00:	f009 f82e 	bl	8014e60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800be04:	e7d3      	b.n	800bdae <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	2000b578 	.word	0x2000b578

0800be10 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800be18:	4810      	ldr	r0, [pc, #64]	@ (800be5c <tcpip_thread+0x4c>)
 800be1a:	f00c f9c5 	bl	80181a8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800be1e:	4b10      	ldr	r3, [pc, #64]	@ (800be60 <tcpip_thread+0x50>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d005      	beq.n	800be32 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800be26:	4b0e      	ldr	r3, [pc, #56]	@ (800be60 <tcpip_thread+0x50>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a0e      	ldr	r2, [pc, #56]	@ (800be64 <tcpip_thread+0x54>)
 800be2c:	6812      	ldr	r2, [r2, #0]
 800be2e:	4610      	mov	r0, r2
 800be30:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800be32:	f107 030c 	add.w	r3, r7, #12
 800be36:	4619      	mov	r1, r3
 800be38:	480b      	ldr	r0, [pc, #44]	@ (800be68 <tcpip_thread+0x58>)
 800be3a:	f7ff ffb3 	bl	800bda4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d106      	bne.n	800be52 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800be44:	4b09      	ldr	r3, [pc, #36]	@ (800be6c <tcpip_thread+0x5c>)
 800be46:	2291      	movs	r2, #145	@ 0x91
 800be48:	4909      	ldr	r1, [pc, #36]	@ (800be70 <tcpip_thread+0x60>)
 800be4a:	480a      	ldr	r0, [pc, #40]	@ (800be74 <tcpip_thread+0x64>)
 800be4c:	f00c fb0c 	bl	8018468 <iprintf>
      continue;
 800be50:	e003      	b.n	800be5a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4618      	mov	r0, r3
 800be56:	f000 f80f 	bl	800be78 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800be5a:	e7ea      	b.n	800be32 <tcpip_thread+0x22>
 800be5c:	2000b578 	.word	0x2000b578
 800be60:	2000b56c 	.word	0x2000b56c
 800be64:	2000b570 	.word	0x2000b570
 800be68:	2000b574 	.word	0x2000b574
 800be6c:	0801a350 	.word	0x0801a350
 800be70:	0801a380 	.word	0x0801a380
 800be74:	0801a3a0 	.word	0x0801a3a0

0800be78 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d026      	beq.n	800bed6 <tcpip_thread_handle_msg+0x5e>
 800be88:	2b02      	cmp	r3, #2
 800be8a:	dc2b      	bgt.n	800bee4 <tcpip_thread_handle_msg+0x6c>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <tcpip_thread_handle_msg+0x1e>
 800be90:	2b01      	cmp	r3, #1
 800be92:	d015      	beq.n	800bec0 <tcpip_thread_handle_msg+0x48>
 800be94:	e026      	b.n	800bee4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	6850      	ldr	r0, [r2, #4]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6892      	ldr	r2, [r2, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	4798      	blx	r3
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f002 fb71 	bl	800e598 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	2009      	movs	r0, #9
 800beba:	f001 fcc9 	bl	800d850 <memp_free>
      break;
 800bebe:	e018      	b.n	800bef2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	6892      	ldr	r2, [r2, #8]
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800becc:	6879      	ldr	r1, [r7, #4]
 800bece:	2008      	movs	r0, #8
 800bed0:	f001 fcbe 	bl	800d850 <memp_free>
      break;
 800bed4:	e00d      	b.n	800bef2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6892      	ldr	r2, [r2, #8]
 800bede:	4610      	mov	r0, r2
 800bee0:	4798      	blx	r3
      break;
 800bee2:	e006      	b.n	800bef2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bee4:	4b05      	ldr	r3, [pc, #20]	@ (800befc <tcpip_thread_handle_msg+0x84>)
 800bee6:	22cf      	movs	r2, #207	@ 0xcf
 800bee8:	4905      	ldr	r1, [pc, #20]	@ (800bf00 <tcpip_thread_handle_msg+0x88>)
 800beea:	4806      	ldr	r0, [pc, #24]	@ (800bf04 <tcpip_thread_handle_msg+0x8c>)
 800beec:	f00c fabc 	bl	8018468 <iprintf>
      break;
 800bef0:	bf00      	nop
  }
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	0801a350 	.word	0x0801a350
 800bf00:	0801a380 	.word	0x0801a380
 800bf04:	0801a3a0 	.word	0x0801a3a0

0800bf08 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bf14:	481a      	ldr	r0, [pc, #104]	@ (800bf80 <tcpip_inpkt+0x78>)
 800bf16:	f00c f86e 	bl	8017ff6 <sys_mbox_valid>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d105      	bne.n	800bf2c <tcpip_inpkt+0x24>
 800bf20:	4b18      	ldr	r3, [pc, #96]	@ (800bf84 <tcpip_inpkt+0x7c>)
 800bf22:	22fc      	movs	r2, #252	@ 0xfc
 800bf24:	4918      	ldr	r1, [pc, #96]	@ (800bf88 <tcpip_inpkt+0x80>)
 800bf26:	4819      	ldr	r0, [pc, #100]	@ (800bf8c <tcpip_inpkt+0x84>)
 800bf28:	f00c fa9e 	bl	8018468 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800bf2c:	2009      	movs	r0, #9
 800bf2e:	f001 fc19 	bl	800d764 <memp_malloc>
 800bf32:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d102      	bne.n	800bf40 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3e:	e01a      	b.n	800bf76 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2200      	movs	r2, #0
 800bf44:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bf58:	6979      	ldr	r1, [r7, #20]
 800bf5a:	4809      	ldr	r0, [pc, #36]	@ (800bf80 <tcpip_inpkt+0x78>)
 800bf5c:	f00b ffd6 	bl	8017f0c <sys_mbox_trypost>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d006      	beq.n	800bf74 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bf66:	6979      	ldr	r1, [r7, #20]
 800bf68:	2009      	movs	r0, #9
 800bf6a:	f001 fc71 	bl	800d850 <memp_free>
    return ERR_MEM;
 800bf6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf72:	e000      	b.n	800bf76 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bf74:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	2000b574 	.word	0x2000b574
 800bf84:	0801a350 	.word	0x0801a350
 800bf88:	0801a3c8 	.word	0x0801a3c8
 800bf8c:	0801a3a0 	.word	0x0801a3a0

0800bf90 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bfa0:	f003 0318 	and.w	r3, r3, #24
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d006      	beq.n	800bfb6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bfa8:	4a08      	ldr	r2, [pc, #32]	@ (800bfcc <tcpip_input+0x3c>)
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff ffab 	bl	800bf08 <tcpip_inpkt>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	e005      	b.n	800bfc2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bfb6:	4a06      	ldr	r2, [pc, #24]	@ (800bfd0 <tcpip_input+0x40>)
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff ffa4 	bl	800bf08 <tcpip_inpkt>
 800bfc0:	4603      	mov	r3, r0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	08017cf9 	.word	0x08017cf9
 800bfd0:	08016c01 	.word	0x08016c01

0800bfd4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bfde:	4819      	ldr	r0, [pc, #100]	@ (800c044 <tcpip_try_callback+0x70>)
 800bfe0:	f00c f809 	bl	8017ff6 <sys_mbox_valid>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <tcpip_try_callback+0x24>
 800bfea:	4b17      	ldr	r3, [pc, #92]	@ (800c048 <tcpip_try_callback+0x74>)
 800bfec:	f240 125d 	movw	r2, #349	@ 0x15d
 800bff0:	4916      	ldr	r1, [pc, #88]	@ (800c04c <tcpip_try_callback+0x78>)
 800bff2:	4817      	ldr	r0, [pc, #92]	@ (800c050 <tcpip_try_callback+0x7c>)
 800bff4:	f00c fa38 	bl	8018468 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bff8:	2008      	movs	r0, #8
 800bffa:	f001 fbb3 	bl	800d764 <memp_malloc>
 800bffe:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d102      	bne.n	800c00c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295
 800c00a:	e017      	b.n	800c03c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	4808      	ldr	r0, [pc, #32]	@ (800c044 <tcpip_try_callback+0x70>)
 800c022:	f00b ff73 	bl	8017f0c <sys_mbox_trypost>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c02c:	68f9      	ldr	r1, [r7, #12]
 800c02e:	2008      	movs	r0, #8
 800c030:	f001 fc0e 	bl	800d850 <memp_free>
    return ERR_MEM;
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
 800c038:	e000      	b.n	800c03c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	2000b574 	.word	0x2000b574
 800c048:	0801a350 	.word	0x0801a350
 800c04c:	0801a3c8 	.word	0x0801a3c8
 800c050:	0801a3a0 	.word	0x0801a3a0

0800c054 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c060:	4806      	ldr	r0, [pc, #24]	@ (800c07c <tcpip_send_msg_wait_sem+0x28>)
 800c062:	f00c f8a1 	bl	80181a8 <sys_mutex_lock>
  fn(apimsg);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68b8      	ldr	r0, [r7, #8]
 800c06a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c06c:	4803      	ldr	r0, [pc, #12]	@ (800c07c <tcpip_send_msg_wait_sem+0x28>)
 800c06e:	f00c f8aa 	bl	80181c6 <sys_mutex_unlock>
  return ERR_OK;
 800c072:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	2000b578 	.word	0x2000b578

0800c080 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af02      	add	r7, sp, #8
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c08a:	f000 fec1 	bl	800ce10 <lwip_init>

  tcpip_init_done = initfunc;
 800c08e:	4a17      	ldr	r2, [pc, #92]	@ (800c0ec <tcpip_init+0x6c>)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c094:	4a16      	ldr	r2, [pc, #88]	@ (800c0f0 <tcpip_init+0x70>)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c09a:	2106      	movs	r1, #6
 800c09c:	4815      	ldr	r0, [pc, #84]	@ (800c0f4 <tcpip_init+0x74>)
 800c09e:	f00b ff01 	bl	8017ea4 <sys_mbox_new>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d006      	beq.n	800c0b6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c0a8:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <tcpip_init+0x78>)
 800c0aa:	f240 2261 	movw	r2, #609	@ 0x261
 800c0ae:	4913      	ldr	r1, [pc, #76]	@ (800c0fc <tcpip_init+0x7c>)
 800c0b0:	4813      	ldr	r0, [pc, #76]	@ (800c100 <tcpip_init+0x80>)
 800c0b2:	f00c f9d9 	bl	8018468 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c0b6:	4813      	ldr	r0, [pc, #76]	@ (800c104 <tcpip_init+0x84>)
 800c0b8:	f00c f85a 	bl	8018170 <sys_mutex_new>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d006      	beq.n	800c0d0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0f8 <tcpip_init+0x78>)
 800c0c4:	f240 2265 	movw	r2, #613	@ 0x265
 800c0c8:	490f      	ldr	r1, [pc, #60]	@ (800c108 <tcpip_init+0x88>)
 800c0ca:	480d      	ldr	r0, [pc, #52]	@ (800c100 <tcpip_init+0x80>)
 800c0cc:	f00c f9cc 	bl	8018468 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0d8:	2200      	movs	r2, #0
 800c0da:	490c      	ldr	r1, [pc, #48]	@ (800c10c <tcpip_init+0x8c>)
 800c0dc:	480c      	ldr	r0, [pc, #48]	@ (800c110 <tcpip_init+0x90>)
 800c0de:	f00c f87f 	bl	80181e0 <sys_thread_new>
}
 800c0e2:	bf00      	nop
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	2000b56c 	.word	0x2000b56c
 800c0f0:	2000b570 	.word	0x2000b570
 800c0f4:	2000b574 	.word	0x2000b574
 800c0f8:	0801a350 	.word	0x0801a350
 800c0fc:	0801a3d8 	.word	0x0801a3d8
 800c100:	0801a3a0 	.word	0x0801a3a0
 800c104:	2000b578 	.word	0x2000b578
 800c108:	0801a3fc 	.word	0x0801a3fc
 800c10c:	0800be11 	.word	0x0800be11
 800c110:	0801a420 	.word	0x0801a420

0800c114 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d002      	beq.n	800c12a <fs_open+0x16>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d102      	bne.n	800c130 <fs_open+0x1c>
    return ERR_ARG;
 800c12a:	f06f 030f 	mvn.w	r3, #15
 800c12e:	e028      	b.n	800c182 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c130:	4b16      	ldr	r3, [pc, #88]	@ (800c18c <fs_open+0x78>)
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	e020      	b.n	800c178 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4619      	mov	r1, r3
 800c13c:	6838      	ldr	r0, [r7, #0]
 800c13e:	f7f4 f867 	bl	8000210 <strcmp>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d114      	bne.n	800c172 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689a      	ldr	r2, [r3, #8]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	68da      	ldr	r2, [r3, #12]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68da      	ldr	r2, [r3, #12]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7c1a      	ldrb	r2, [r3, #16]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	e007      	b.n	800c182 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1db      	bne.n	800c136 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800c17e:	f06f 0305 	mvn.w	r3, #5
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	0801dca4 	.word	0x0801dca4

0800c190 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	1ad3      	subs	r3, r2, r3
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800c1ca:	222c      	movs	r2, #44	@ 0x2c
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f00c f9e9 	bl	80185a6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800c1e2:	202c      	movs	r0, #44	@ 0x2c
 800c1e4:	f001 f91a 	bl	800d41c <mem_malloc>
 800c1e8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff ffe6 	bl	800c1c2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800c1f6:	687b      	ldr	r3, [r7, #4]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff ffbb 	bl	800c190 <fs_close>
    hs->handle = NULL;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d007      	beq.n	800c238 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6a1b      	ldr	r3, [r3, #32]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f002 f9b3 	bl	800e598 <pbuf_free>
    hs->req = NULL;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c238:	bf00      	nop
 800c23a:	3708      	adds	r7, #8
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d005      	beq.n	800c25a <http_state_free+0x1a>
    http_state_eof(hs);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff ffd6 	bl	800c200 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 ff47 	bl	800d0e8 <mem_free>
  }
}
 800c25a:	bf00      	nop
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <http_write+0x22>
 800c278:	4b2c      	ldr	r3, [pc, #176]	@ (800c32c <http_write+0xc8>)
 800c27a:	f240 2219 	movw	r2, #537	@ 0x219
 800c27e:	492c      	ldr	r1, [pc, #176]	@ (800c330 <http_write+0xcc>)
 800c280:	482c      	ldr	r0, [pc, #176]	@ (800c334 <http_write+0xd0>)
 800c282:	f00c f8f1 	bl	8018468 <iprintf>
  len = *length;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800c28c:	8afb      	ldrh	r3, [r7, #22]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <http_write+0x32>
    return ERR_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	e045      	b.n	800c322 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c29c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800c29e:	8aba      	ldrh	r2, [r7, #20]
 800c2a0:	8afb      	ldrh	r3, [r7, #22]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d201      	bcs.n	800c2aa <http_write+0x46>
    len = max_len;
 800c2a6:	8abb      	ldrh	r3, [r7, #20]
 800c2a8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800c2b2:	8afa      	ldrh	r2, [r7, #22]
 800c2b4:	8abb      	ldrh	r3, [r7, #20]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d901      	bls.n	800c2be <http_write+0x5a>
    len = max_len;
 800c2ba:	8abb      	ldrh	r3, [r7, #20]
 800c2bc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800c2be:	78fb      	ldrb	r3, [r7, #3]
 800c2c0:	8afa      	ldrh	r2, [r7, #22]
 800c2c2:	68b9      	ldr	r1, [r7, #8]
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f006 ff63 	bl	8013190 <tcp_write>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800c2ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d6:	d10f      	bne.n	800c2f8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800c2e8:	2b08      	cmp	r3, #8
 800c2ea:	d902      	bls.n	800c2f2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	82fb      	strh	r3, [r7, #22]
 800c2f0:	e002      	b.n	800c2f8 <http_write+0x94>
      } else {
        len /= 2;
 800c2f2:	8afb      	ldrh	r3, [r7, #22]
 800c2f4:	085b      	lsrs	r3, r3, #1
 800c2f6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800c2f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c300:	d102      	bne.n	800c308 <http_write+0xa4>
 800c302:	8afb      	ldrh	r3, [r7, #22]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d8da      	bhi.n	800c2be <http_write+0x5a>

  if (err == ERR_OK) {
 800c308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	8afa      	ldrh	r2, [r7, #22]
 800c314:	801a      	strh	r2, [r3, #0]
 800c316:	e002      	b.n	800c31e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800c31e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	0801a470 	.word	0x0801a470
 800c330:	0801a4a8 	.word	0x0801a4a8
 800c334:	0801a4b8 	.word	0x0801a4b8

0800c338 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	4613      	mov	r3, r2
 800c344:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800c346:	2100      	movs	r1, #0
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f003 ffe5 	bl	8010318 <tcp_arg>
  altcp_recv(pcb, NULL);
 800c34e:	2100      	movs	r1, #0
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f003 fff3 	bl	801033c <tcp_recv>
  altcp_err(pcb, NULL);
 800c356:	2100      	movs	r1, #0
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f004 f833 	bl	80103c4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800c35e:	2200      	movs	r2, #0
 800c360:	2100      	movs	r1, #0
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f004 f868 	bl	8010438 <tcp_poll>
  altcp_sent(pcb, NULL);
 800c368:	2100      	movs	r1, #0
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f004 f808 	bl	8010380 <tcp_sent>
  if (hs != NULL) {
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800c376:	68b8      	ldr	r0, [r7, #8]
 800c378:	f7ff ff62 	bl	800c240 <http_state_free>
  }

  if (abort_conn) {
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f002 ff08 	bl	800f198 <tcp_abort>
    return ERR_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	e00f      	b.n	800c3ac <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f002 fdbd 	bl	800ef0c <tcp_close>
 800c392:	4603      	mov	r3, r0
 800c394:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800c396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d004      	beq.n	800c3a8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c39e:	2204      	movs	r2, #4
 800c3a0:	4904      	ldr	r1, [pc, #16]	@ (800c3b4 <http_close_or_abort_conn+0x7c>)
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f004 f848 	bl	8010438 <tcp_poll>
  }
  return err;
 800c3a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	0800ca7b 	.word	0x0800ca7b

0800c3b8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff ffb6 	bl	800c338 <http_close_or_abort_conn>
 800c3cc:	4603      	mov	r3, r0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7ff ffe8 	bl	800c3b8 <http_close_conn>
  }
}
 800c3e8:	bf00      	nop
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d105      	bne.n	800c40e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff ffe6 	bl	800c3d6 <http_eof>
    return 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e016      	b.n	800c43c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fec6 	bl	800c1a4 <fs_bytes_left>
 800c418:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dc05      	bgt.n	800c42c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ffd7 	bl	800c3d6 <http_eof>
    return 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	e007      	b.n	800c43c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800c42c:	4b05      	ldr	r3, [pc, #20]	@ (800c444 <http_check_eof+0x54>)
 800c42e:	f240 429d 	movw	r2, #1181	@ 0x49d
 800c432:	4905      	ldr	r1, [pc, #20]	@ (800c448 <http_check_eof+0x58>)
 800c434:	4805      	ldr	r0, [pc, #20]	@ (800c44c <http_check_eof+0x5c>)
 800c436:	f00c f817 	bl	8018468 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800c43a:	2301      	movs	r3, #1
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	0801a470 	.word	0x0801a470
 800c448:	0801a4e0 	.word	0x0801a4e0
 800c44c:	0801a4b8 	.word	0x0801a4b8

0800c450 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c462:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c466:	4293      	cmp	r3, r2
 800c468:	d803      	bhi.n	800c472 <http_send_data_nonssi+0x22>
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46e:	b29b      	uxth	r3, r3
 800c470:	e001      	b.n	800c476 <http_send_data_nonssi+0x26>
 800c472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c476:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	6999      	ldr	r1, [r3, #24]
 800c47c:	f107 020c 	add.w	r2, r7, #12
 800c480:	2300      	movs	r3, #0
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff feee 	bl	800c264 <http_write>
 800c488:	4603      	mov	r3, r0
 800c48a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800c48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10d      	bne.n	800c4b0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800c494:	2301      	movs	r3, #1
 800c496:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	89ba      	ldrh	r2, [r7, #12]
 800c49e:	441a      	add	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a8:	89ba      	ldrh	r2, [r7, #12]
 800c4aa:	1a9a      	subs	r2, r3, r2
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <http_send+0x18>
    return 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e025      	b.n	800c51e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d108      	bne.n	800c4ec <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ff87 	bl	800c3f0 <http_check_eof>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <http_send+0x32>
      return 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e018      	b.n	800c51e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ffae 	bl	800c450 <http_send_data_nonssi>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10d      	bne.n	800c51c <http_send+0x62>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff fe4d 	bl	800c1a4 <fs_bytes_left>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc05      	bgt.n	800c51c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff ff5f 	bl	800c3d6 <http_eof>
    return 0;
 800c518:	2300      	movs	r3, #0
 800c51a:	e000      	b.n	800c51e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
	...

0800c528 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a8 <http_get_404_file+0x80>)
 800c536:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f7ff fde7 	bl	800c114 <fs_open>
 800c546:	4603      	mov	r3, r0
 800c548:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c54a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d024      	beq.n	800c59c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	4a15      	ldr	r2, [pc, #84]	@ (800c5ac <http_get_404_file+0x84>)
 800c556:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4619      	mov	r1, r3
 800c560:	4610      	mov	r0, r2
 800c562:	f7ff fdd7 	bl	800c114 <fs_open>
 800c566:	4603      	mov	r3, r0
 800c568:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d014      	beq.n	800c59c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	4a0e      	ldr	r2, [pc, #56]	@ (800c5b0 <http_get_404_file+0x88>)
 800c576:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7ff fdc7 	bl	800c114 <fs_open>
 800c586:	4603      	mov	r3, r0
 800c588:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800c58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2200      	movs	r2, #0
 800c596:	601a      	str	r2, [r3, #0]
        return NULL;
 800c598:	2300      	movs	r3, #0
 800c59a:	e000      	b.n	800c59e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800c59c:	687b      	ldr	r3, [r7, #4]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0801a518 	.word	0x0801a518
 800c5ac:	0801a524 	.word	0x0801a524
 800c5b0:	0801a530 	.word	0x0801a530

0800c5b4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b08e      	sub	sp, #56	@ 0x38
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <http_parse_request+0x24>
 800c5ca:	4b65      	ldr	r3, [pc, #404]	@ (800c760 <http_parse_request+0x1ac>)
 800c5cc:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800c5d0:	4964      	ldr	r1, [pc, #400]	@ (800c764 <http_parse_request+0x1b0>)
 800c5d2:	4865      	ldr	r0, [pc, #404]	@ (800c768 <http_parse_request+0x1b4>)
 800c5d4:	f00b ff48 	bl	8018468 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <http_parse_request+0x38>
 800c5de:	4b60      	ldr	r3, [pc, #384]	@ (800c760 <http_parse_request+0x1ac>)
 800c5e0:	f240 72af 	movw	r2, #1967	@ 0x7af
 800c5e4:	4961      	ldr	r1, [pc, #388]	@ (800c76c <http_parse_request+0x1b8>)
 800c5e6:	4860      	ldr	r0, [pc, #384]	@ (800c768 <http_parse_request+0x1b4>)
 800c5e8:	f00b ff3e 	bl	8018468 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d103      	bne.n	800c5fc <http_parse_request+0x48>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c5fc:	f06f 0307 	mvn.w	r3, #7
 800c600:	e0a9      	b.n	800c756 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d103      	bne.n	800c612 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c60e:	621a      	str	r2, [r3, #32]
 800c610:	e005      	b.n	800c61e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c618:	4618      	mov	r0, r3
 800c61a:	f002 f88b 	bl	800e734 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c61e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c620:	f002 f860 	bl	800e6e4 <pbuf_ref>

  if (hs->req->next != NULL) {
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d012      	beq.n	800c654 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	891b      	ldrh	r3, [r3, #8]
 800c634:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800c638:	4293      	cmp	r3, r2
 800c63a:	bf28      	it	cs
 800c63c:	4613      	movcs	r3, r2
 800c63e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	6a18      	ldr	r0, [r3, #32]
 800c644:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800c646:	2300      	movs	r3, #0
 800c648:	4949      	ldr	r1, [pc, #292]	@ (800c770 <http_parse_request+0x1bc>)
 800c64a:	f002 f9ab 	bl	800e9a4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c64e:	4b48      	ldr	r3, [pc, #288]	@ (800c770 <http_parse_request+0x1bc>)
 800c650:	637b      	str	r3, [r7, #52]	@ 0x34
 800c652:	e005      	b.n	800c660 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c656:	685b      	ldr	r3, [r3, #4]
 800c658:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800c65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65c:	895b      	ldrh	r3, [r3, #10]
 800c65e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c660:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c662:	2b06      	cmp	r3, #6
 800c664:	d962      	bls.n	800c72c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c666:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c668:	461a      	mov	r2, r3
 800c66a:	4942      	ldr	r1, [pc, #264]	@ (800c774 <http_parse_request+0x1c0>)
 800c66c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c66e:	f000 fb99 	bl	800cda4 <lwip_strnstr>
 800c672:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d058      	beq.n	800c72c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c67e:	2204      	movs	r2, #4
 800c680:	493d      	ldr	r1, [pc, #244]	@ (800c778 <http_parse_request+0x1c4>)
 800c682:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c684:	f00b ffa4 	bl	80185d0 <strncmp>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d116      	bne.n	800c6bc <http_parse_request+0x108>
        sp1 = data + 3;
 800c68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c690:	3303      	adds	r3, #3
 800c692:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	8b7a      	ldrh	r2, [r7, #26]
 800c6aa:	4934      	ldr	r1, [pc, #208]	@ (800c77c <http_parse_request+0x1c8>)
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fb79 	bl	800cda4 <lwip_strnstr>
 800c6b2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800c6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d111      	bne.n	800c6de <http_parse_request+0x12a>
 800c6ba:	e006      	b.n	800c6ca <http_parse_request+0x116>
        data[4] = 0;
 800c6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6be:	3304      	adds	r3, #4
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800c6c4:	f06f 030f 	mvn.w	r3, #15
 800c6c8:	e045      	b.n	800c756 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	8b7a      	ldrh	r2, [r7, #26]
 800c6d0:	4928      	ldr	r1, [pc, #160]	@ (800c774 <http_parse_request+0x1c0>)
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 fb66 	bl	800cda4 <lwip_strnstr>
 800c6d8:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800c6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d01e      	beq.n	800c72c <http_parse_request+0x178>
 800c6ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d91a      	bls.n	800c72c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800c6f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4921      	ldr	r1, [pc, #132]	@ (800c780 <http_parse_request+0x1cc>)
 800c6fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c6fe:	f000 fb51 	bl	800cda4 <lwip_strnstr>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d011      	beq.n	800c72c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	3301      	adds	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	2200      	movs	r2, #0
 800c712:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800c714:	8b3b      	ldrh	r3, [r7, #24]
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	2200      	movs	r2, #0
 800c71c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800c71e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c720:	6979      	ldr	r1, [r7, #20]
 800c722:	68b8      	ldr	r0, [r7, #8]
 800c724:	f000 f82e 	bl	800c784 <http_find_file>
 800c728:	4603      	mov	r3, r0
 800c72a:	e014      	b.n	800c756 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	4618      	mov	r0, r3
 800c732:	f001 ffbf 	bl	800e6b4 <pbuf_clen>
 800c736:	4603      	mov	r3, r0
 800c738:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	891b      	ldrh	r3, [r3, #8]
 800c740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c744:	d205      	bcs.n	800c752 <http_parse_request+0x19e>
 800c746:	8a7b      	ldrh	r3, [r7, #18]
 800c748:	2b05      	cmp	r3, #5
 800c74a:	d802      	bhi.n	800c752 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800c74c:	f06f 0304 	mvn.w	r3, #4
 800c750:	e001      	b.n	800c756 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800c752:	f06f 030f 	mvn.w	r3, #15
  }
}
 800c756:	4618      	mov	r0, r3
 800c758:	3738      	adds	r7, #56	@ 0x38
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	0801a470 	.word	0x0801a470
 800c764:	0801a53c 	.word	0x0801a53c
 800c768:	0801a4b8 	.word	0x0801a4b8
 800c76c:	0801a548 	.word	0x0801a548
 800c770:	2000b57c 	.word	0x2000b57c
 800c774:	0801a554 	.word	0x0801a554
 800c778:	0801a558 	.word	0x0801a558
 800c77c:	0801a560 	.word	0x0801a560
 800c780:	0801a564 	.word	0x0801a564

0800c784 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b092      	sub	sp, #72	@ 0x48
 800c788:	af02      	add	r7, sp, #8
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800c790:	2300      	movs	r3, #0
 800c792:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7f3 fd3f 	bl	8000224 <strlen>
 800c7a6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d06b      	beq.n	800c886 <http_find_file+0x102>
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7ba:	d164      	bne.n	800c886 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c7bc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c7be:	4a53      	ldr	r2, [pc, #332]	@ (800c90c <http_find_file+0x188>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d102      	bne.n	800c7ca <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d15d      	bne.n	800c886 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800c7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	2b3f      	cmp	r3, #63	@ 0x3f
 800c7d0:	bf28      	it	cs
 800c7d2:	233f      	movcs	r3, #63	@ 0x3f
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	484a      	ldr	r0, [pc, #296]	@ (800c90c <http_find_file+0x188>)
 800c7e4:	f00b ffc9 	bl	801877a <memcpy>
      http_uri_buf[copy_len] = 0;
 800c7e8:	4a48      	ldr	r2, [pc, #288]	@ (800c90c <http_find_file+0x188>)
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	4413      	add	r3, r2
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7f6:	e043      	b.n	800c880 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d028      	beq.n	800c850 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800c804:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01e      	beq.n	800c84a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800c80c:	4a40      	ldr	r2, [pc, #256]	@ (800c910 <http_find_file+0x18c>)
 800c80e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c810:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c814:	4618      	mov	r0, r3
 800c816:	f7f3 fd05 	bl	8000224 <strlen>
 800c81a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800c81c:	69fa      	ldr	r2, [r7, #28]
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	4293      	cmp	r3, r2
 800c822:	bf28      	it	cs
 800c824:	4613      	movcs	r3, r2
 800c826:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	4a38      	ldr	r2, [pc, #224]	@ (800c90c <http_find_file+0x188>)
 800c82c:	1898      	adds	r0, r3, r2
 800c82e:	4a38      	ldr	r2, [pc, #224]	@ (800c910 <http_find_file+0x18c>)
 800c830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c832:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	4619      	mov	r1, r3
 800c83a:	f00b ff9e 	bl	801877a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800c83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	4413      	add	r3, r2
 800c844:	4a31      	ldr	r2, [pc, #196]	@ (800c90c <http_find_file+0x188>)
 800c846:	2100      	movs	r1, #0
 800c848:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800c84a:	4b30      	ldr	r3, [pc, #192]	@ (800c90c <http_find_file+0x188>)
 800c84c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c84e:	e004      	b.n	800c85a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800c850:	4a2f      	ldr	r2, [pc, #188]	@ (800c910 <http_find_file+0x18c>)
 800c852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c858:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff fc58 	bl	800c114 <fs_open>
 800c864:	4603      	mov	r3, r0
 800c866:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800c868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d104      	bne.n	800c87a <http_find_file+0xf6>
        uri = file_name;
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800c878:	e005      	b.n	800c886 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87c:	3301      	adds	r3, #1
 800c87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c882:	2b04      	cmp	r3, #4
 800c884:	d9b8      	bls.n	800c7f8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800c886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d124      	bne.n	800c8d6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	213f      	movs	r1, #63	@ 0x3f
 800c890:	4618      	mov	r0, r3
 800c892:	f00b fe90 	bl	80185b6 <strchr>
 800c896:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800c898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d005      	beq.n	800c8aa <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800c89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	701a      	strb	r2, [r3, #0]
      params++;
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fc2f 	bl	800c114 <fs_open>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <http_find_file+0x144>
      file = &hs->file_handle;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8c6:	e006      	b.n	800c8d6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800c8c8:	f107 0308 	add.w	r3, r7, #8
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fe2a 	bl	800c528 <http_get_404_file>
 800c8d4:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d106      	bne.n	800c8ea <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c8dc:	f107 0308 	add.w	r3, r7, #8
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	f7ff fe20 	bl	800c528 <http_get_404_file>
 800c8e8:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f000 f809 	bl	800c914 <http_init_file>
 800c902:	4603      	mov	r3, r0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3740      	adds	r7, #64	@ 0x40
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	2000b97c 	.word	0x2000b97c
 800c910:	0801dcb8 	.word	0x0801dcb8

0800c914 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d05c      	beq.n	800c9e2 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d106      	bne.n	800c93e <http_init_file+0x2a>
 800c930:	4b35      	ldr	r3, [pc, #212]	@ (800ca08 <http_init_file+0xf4>)
 800c932:	f640 120b 	movw	r2, #2315	@ 0x90b
 800c936:	4935      	ldr	r1, [pc, #212]	@ (800ca0c <http_init_file+0xf8>)
 800c938:	4835      	ldr	r0, [pc, #212]	@ (800ca10 <http_init_file+0xfc>)
 800c93a:	f00b fd95 	bl	8018468 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68ba      	ldr	r2, [r7, #8]
 800c942:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	da06      	bge.n	800c962 <http_init_file+0x4e>
 800c954:	4b2c      	ldr	r3, [pc, #176]	@ (800ca08 <http_init_file+0xf4>)
 800c956:	f640 1234 	movw	r2, #2356	@ 0x934
 800c95a:	492e      	ldr	r1, [pc, #184]	@ (800ca14 <http_init_file+0x100>)
 800c95c:	482c      	ldr	r0, [pc, #176]	@ (800ca10 <http_init_file+0xfc>)
 800c95e:	f00b fd83 	bl	8018468 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	461a      	mov	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2200      	movs	r2, #0
 800c970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	7c1b      	ldrb	r3, [r3, #16]
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <http_init_file+0x7c>
 800c982:	4b21      	ldr	r3, [pc, #132]	@ (800ca08 <http_init_file+0xf4>)
 800c984:	f640 1243 	movw	r2, #2371	@ 0x943
 800c988:	4923      	ldr	r1, [pc, #140]	@ (800ca18 <http_init_file+0x104>)
 800c98a:	4821      	ldr	r0, [pc, #132]	@ (800ca10 <http_init_file+0xfc>)
 800c98c:	f00b fd6c 	bl	8018468 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d032      	beq.n	800c9fc <http_init_file+0xe8>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	7c1b      	ldrb	r3, [r3, #16]
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02b      	beq.n	800c9fc <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6998      	ldr	r0, [r3, #24]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	491b      	ldr	r1, [pc, #108]	@ (800ca1c <http_init_file+0x108>)
 800c9b0:	f000 f9f8 	bl	800cda4 <lwip_strnstr>
 800c9b4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01f      	beq.n	800c9fc <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	1d1a      	adds	r2, r3, #4
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	699a      	ldr	r2, [r3, #24]
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	441a      	add	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	1ad2      	subs	r2, r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	625a      	str	r2, [r3, #36]	@ 0x24
 800c9e0:	e00c      	b.n	800c9fc <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	0801a470 	.word	0x0801a470
 800ca0c:	0801a56c 	.word	0x0801a56c
 800ca10:	0801a4b8 	.word	0x0801a4b8
 800ca14:	0801a580 	.word	0x0801a580
 800ca18:	0801a5a0 	.word	0x0801a5a0
 800ca1c:	0801a564 	.word	0x0801a564

0800ca20 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <http_err+0x1c>
    http_state_free(hs);
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f7ff fc02 	bl	800c240 <http_state_free>
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <http_sent+0x1c>
    return ERR_OK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e008      	b.n	800ca72 <http_sent+0x2e>
  }

  hs->retries = 0;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800ca68:	6979      	ldr	r1, [r7, #20]
 800ca6a:	68b8      	ldr	r0, [r7, #8]
 800ca6c:	f7ff fd25 	bl	800c4ba <http_send>

  return ERR_OK;
 800ca70:	2300      	movs	r3, #0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3718      	adds	r7, #24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d107      	bne.n	800ca9e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800ca8e:	2100      	movs	r1, #0
 800ca90:	6838      	ldr	r0, [r7, #0]
 800ca92:	f7ff fc91 	bl	800c3b8 <http_close_conn>
 800ca96:	4603      	mov	r3, r0
 800ca98:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e021      	b.n	800cae2 <http_poll+0x68>
  } else {
    hs->retries++;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa4:	3301      	adds	r3, #1
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d105      	bne.n	800cac4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800cab8:	68f9      	ldr	r1, [r7, #12]
 800caba:	6838      	ldr	r0, [r7, #0]
 800cabc:	f7ff fc7c 	bl	800c3b8 <http_close_conn>
      return ERR_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	e00e      	b.n	800cae2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d009      	beq.n	800cae0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800cacc:	68f9      	ldr	r1, [r7, #12]
 800cace:	6838      	ldr	r0, [r7, #0]
 800cad0:	f7ff fcf3 	bl	800c4ba <http_send>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800cada:	6838      	ldr	r0, [r7, #0]
 800cadc:	f007 f942 	bl	8013d64 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
	...

0800caec <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800cafe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d105      	bne.n	800cb12 <http_recv+0x26>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <http_recv+0x26>
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d111      	bne.n	800cb36 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d008      	beq.n	800cb2a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	891b      	ldrh	r3, [r3, #8]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f002 fd14 	bl	800f54c <tcp_recved>
      pbuf_free(p);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f001 fd37 	bl	800e598 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800cb2a:	6979      	ldr	r1, [r7, #20]
 800cb2c:	68b8      	ldr	r0, [r7, #8]
 800cb2e:	f7ff fc43 	bl	800c3b8 <http_close_conn>
    return ERR_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	e055      	b.n	800cbe2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	891b      	ldrh	r3, [r3, #8]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	68b8      	ldr	r0, [r7, #8]
 800cb3e:	f002 fd05 	bl	800f54c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d147      	bne.n	800cbda <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	6979      	ldr	r1, [r7, #20]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fd30 	bl	800c5b4 <http_parse_request>
 800cb54:	4603      	mov	r3, r0
 800cb56:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800cb58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d015      	beq.n	800cb8c <http_recv+0xa0>
 800cb60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb64:	f113 0f05 	cmn.w	r3, #5
 800cb68:	d010      	beq.n	800cb8c <http_recv+0xa0>
 800cb6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb6e:	f113 0f10 	cmn.w	r3, #16
 800cb72:	d00b      	beq.n	800cb8c <http_recv+0xa0>
 800cb74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb78:	f113 0f08 	cmn.w	r3, #8
 800cb7c:	d006      	beq.n	800cb8c <http_recv+0xa0>
 800cb7e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbec <http_recv+0x100>)
 800cb80:	f640 2204 	movw	r2, #2564	@ 0xa04
 800cb84:	491a      	ldr	r1, [pc, #104]	@ (800cbf0 <http_recv+0x104>)
 800cb86:	481b      	ldr	r0, [pc, #108]	@ (800cbf4 <http_recv+0x108>)
 800cb88:	f00b fc6e 	bl	8018468 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800cb8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb90:	f113 0f05 	cmn.w	r3, #5
 800cb94:	d00b      	beq.n	800cbae <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d007      	beq.n	800cbae <http_recv+0xc2>
          pbuf_free(hs->req);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f001 fcf8 	bl	800e598 <pbuf_free>
          hs->req = NULL;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f001 fcf2 	bl	800e598 <pbuf_free>
      if (parsed == ERR_OK) {
 800cbb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d104      	bne.n	800cbc6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800cbbc:	6979      	ldr	r1, [r7, #20]
 800cbbe:	68b8      	ldr	r0, [r7, #8]
 800cbc0:	f7ff fc7b 	bl	800c4ba <http_send>
 800cbc4:	e00c      	b.n	800cbe0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800cbc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbca:	f113 0f10 	cmn.w	r3, #16
 800cbce:	d107      	bne.n	800cbe0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800cbd0:	6979      	ldr	r1, [r7, #20]
 800cbd2:	68b8      	ldr	r0, [r7, #8]
 800cbd4:	f7ff fbf0 	bl	800c3b8 <http_close_conn>
 800cbd8:	e002      	b.n	800cbe0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f001 fcdc 	bl	800e598 <pbuf_free>
    }
  }
  return ERR_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	0801a470 	.word	0x0801a470
 800cbf0:	0801a5cc 	.word	0x0801a5cc
 800cbf4:	0801a4b8 	.word	0x0801a4b8

0800cbf8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800cc06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d102      	bne.n	800cc14 <http_accept+0x1c>
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <http_accept+0x22>
    return ERR_VAL;
 800cc14:	f06f 0305 	mvn.w	r3, #5
 800cc18:	e025      	b.n	800cc66 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	68b8      	ldr	r0, [r7, #8]
 800cc1e:	f003 f97b 	bl	800ff18 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800cc22:	f7ff fadb 	bl	800c1dc <http_state_alloc>
 800cc26:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d102      	bne.n	800cc34 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800cc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc32:	e018      	b.n	800cc66 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800cc3a:	6979      	ldr	r1, [r7, #20]
 800cc3c:	68b8      	ldr	r0, [r7, #8]
 800cc3e:	f003 fb6b 	bl	8010318 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800cc42:	490b      	ldr	r1, [pc, #44]	@ (800cc70 <http_accept+0x78>)
 800cc44:	68b8      	ldr	r0, [r7, #8]
 800cc46:	f003 fb79 	bl	801033c <tcp_recv>
  altcp_err(pcb, http_err);
 800cc4a:	490a      	ldr	r1, [pc, #40]	@ (800cc74 <http_accept+0x7c>)
 800cc4c:	68b8      	ldr	r0, [r7, #8]
 800cc4e:	f003 fbb9 	bl	80103c4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800cc52:	2204      	movs	r2, #4
 800cc54:	4908      	ldr	r1, [pc, #32]	@ (800cc78 <http_accept+0x80>)
 800cc56:	68b8      	ldr	r0, [r7, #8]
 800cc58:	f003 fbee 	bl	8010438 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800cc5c:	4907      	ldr	r1, [pc, #28]	@ (800cc7c <http_accept+0x84>)
 800cc5e:	68b8      	ldr	r0, [r7, #8]
 800cc60:	f003 fb8e 	bl	8010380 <tcp_sent>

  return ERR_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	0800caed 	.word	0x0800caed
 800cc74:	0800ca21 	.word	0x0800ca21
 800cc78:	0800ca7b 	.word	0x0800ca7b
 800cc7c:	0800ca45 	.word	0x0800ca45

0800cc80 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	460b      	mov	r3, r1
 800cc8a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d029      	beq.n	800cce6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cc92:	2101      	movs	r1, #1
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f003 f93f 	bl	800ff18 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800cc9a:	887b      	ldrh	r3, [r7, #2]
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4914      	ldr	r1, [pc, #80]	@ (800ccf0 <httpd_init_pcb+0x70>)
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f002 fa85 	bl	800f1b0 <tcp_bind>
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800ccaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <httpd_init_pcb+0x40>
 800ccb2:	4b10      	ldr	r3, [pc, #64]	@ (800ccf4 <httpd_init_pcb+0x74>)
 800ccb4:	f640 2257 	movw	r2, #2647	@ 0xa57
 800ccb8:	490f      	ldr	r1, [pc, #60]	@ (800ccf8 <httpd_init_pcb+0x78>)
 800ccba:	4810      	ldr	r0, [pc, #64]	@ (800ccfc <httpd_init_pcb+0x7c>)
 800ccbc:	f00b fbd4 	bl	8018468 <iprintf>
    pcb = altcp_listen(pcb);
 800ccc0:	21ff      	movs	r1, #255	@ 0xff
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f002 fb2c 	bl	800f320 <tcp_listen_with_backlog>
 800ccc8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <httpd_init_pcb+0x5e>
 800ccd0:	4b08      	ldr	r3, [pc, #32]	@ (800ccf4 <httpd_init_pcb+0x74>)
 800ccd2:	f640 2259 	movw	r2, #2649	@ 0xa59
 800ccd6:	490a      	ldr	r1, [pc, #40]	@ (800cd00 <httpd_init_pcb+0x80>)
 800ccd8:	4808      	ldr	r0, [pc, #32]	@ (800ccfc <httpd_init_pcb+0x7c>)
 800ccda:	f00b fbc5 	bl	8018468 <iprintf>
    altcp_accept(pcb, http_accept);
 800ccde:	4909      	ldr	r1, [pc, #36]	@ (800cd04 <httpd_init_pcb+0x84>)
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f003 fb91 	bl	8010408 <tcp_accept>
  }
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	0801ddf0 	.word	0x0801ddf0
 800ccf4:	0801a470 	.word	0x0801a470
 800ccf8:	0801a5f8 	.word	0x0801a5f8
 800ccfc:	0801a4b8 	.word	0x0801a4b8
 800cd00:	0801a614 	.word	0x0801a614
 800cd04:	0800cbf9 	.word	0x0800cbf9

0800cd08 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800cd0e:	202e      	movs	r0, #46	@ 0x2e
 800cd10:	f003 faf4 	bl	80102fc <tcp_new_ip_type>
 800cd14:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <httpd_init+0x22>
 800cd1c:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <httpd_init+0x34>)
 800cd1e:	f640 2272 	movw	r2, #2674	@ 0xa72
 800cd22:	4907      	ldr	r1, [pc, #28]	@ (800cd40 <httpd_init+0x38>)
 800cd24:	4807      	ldr	r0, [pc, #28]	@ (800cd44 <httpd_init+0x3c>)
 800cd26:	f00b fb9f 	bl	8018468 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800cd2a:	2150      	movs	r1, #80	@ 0x50
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f7ff ffa7 	bl	800cc80 <httpd_init_pcb>
}
 800cd32:	bf00      	nop
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	0801a470 	.word	0x0801a470
 800cd40:	0801a634 	.word	0x0801a634
 800cd44:	0801a4b8 	.word	0x0801a4b8

0800cd48 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	021b      	lsls	r3, r3, #8
 800cd56:	b21a      	sxth	r2, r3
 800cd58:	88fb      	ldrh	r3, [r7, #6]
 800cd5a:	0a1b      	lsrs	r3, r3, #8
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	b21b      	sxth	r3, r3
 800cd60:	4313      	orrs	r3, r2
 800cd62:	b21b      	sxth	r3, r3
 800cd64:	b29b      	uxth	r3, r3
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b083      	sub	sp, #12
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	061a      	lsls	r2, r3, #24
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	021b      	lsls	r3, r3, #8
 800cd82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd86:	431a      	orrs	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	0a1b      	lsrs	r3, r3, #8
 800cd8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd90:	431a      	orrs	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	0e1b      	lsrs	r3, r3, #24
 800cd96:	4313      	orrs	r3, r2
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800cdb0:	68b8      	ldr	r0, [r7, #8]
 800cdb2:	f7f3 fa37 	bl	8000224 <strlen>
 800cdb6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	e022      	b.n	800ce08 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	617b      	str	r3, [r7, #20]
 800cdc6:	e012      	b.n	800cdee <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d109      	bne.n	800cde8 <lwip_strnstr+0x44>
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	6978      	ldr	r0, [r7, #20]
 800cdda:	f00b fbf9 	bl	80185d0 <strncmp>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	e00f      	b.n	800ce08 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	3301      	adds	r3, #1
 800cdec:	617b      	str	r3, [r7, #20]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d007      	beq.n	800ce06 <lwip_strnstr+0x62>
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	441a      	add	r2, r3
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	440b      	add	r3, r1
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d9e0      	bls.n	800cdc8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ce1a:	f00b f99b 	bl	8018154 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ce1e:	f000 f8d5 	bl	800cfcc <mem_init>
  memp_init();
 800ce22:	f000 fc31 	bl	800d688 <memp_init>
  pbuf_init();
  netif_init();
 800ce26:	f000 fd3d 	bl	800d8a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ce2a:	f008 f88b 	bl	8014f44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ce2e:	f001 fe5d 	bl	800eaec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ce32:	f007 ffcd 	bl	8014dd0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ce4a:	4b05      	ldr	r3, [pc, #20]	@ (800ce60 <ptr_to_mem+0x20>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	88fb      	ldrh	r3, [r7, #6]
 800ce50:	4413      	add	r3, r2
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	370c      	adds	r7, #12
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	2000c028 	.word	0x2000c028

0800ce64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce6c:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <mem_to_ptr+0x20>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	b29b      	uxth	r3, r3
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	2000c028 	.word	0x2000c028

0800ce88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce88:	b590      	push	{r4, r7, lr}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce90:	4b45      	ldr	r3, [pc, #276]	@ (800cfa8 <plug_holes+0x120>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d206      	bcs.n	800cea8 <plug_holes+0x20>
 800ce9a:	4b44      	ldr	r3, [pc, #272]	@ (800cfac <plug_holes+0x124>)
 800ce9c:	f240 12df 	movw	r2, #479	@ 0x1df
 800cea0:	4943      	ldr	r1, [pc, #268]	@ (800cfb0 <plug_holes+0x128>)
 800cea2:	4844      	ldr	r0, [pc, #272]	@ (800cfb4 <plug_holes+0x12c>)
 800cea4:	f00b fae0 	bl	8018468 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cea8:	4b43      	ldr	r3, [pc, #268]	@ (800cfb8 <plug_holes+0x130>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d306      	bcc.n	800cec0 <plug_holes+0x38>
 800ceb2:	4b3e      	ldr	r3, [pc, #248]	@ (800cfac <plug_holes+0x124>)
 800ceb4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ceb8:	4940      	ldr	r1, [pc, #256]	@ (800cfbc <plug_holes+0x134>)
 800ceba:	483e      	ldr	r0, [pc, #248]	@ (800cfb4 <plug_holes+0x12c>)
 800cebc:	f00b fad4 	bl	8018468 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	791b      	ldrb	r3, [r3, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d006      	beq.n	800ced6 <plug_holes+0x4e>
 800cec8:	4b38      	ldr	r3, [pc, #224]	@ (800cfac <plug_holes+0x124>)
 800ceca:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cece:	493c      	ldr	r1, [pc, #240]	@ (800cfc0 <plug_holes+0x138>)
 800ced0:	4838      	ldr	r0, [pc, #224]	@ (800cfb4 <plug_holes+0x12c>)
 800ced2:	f00b fac9 	bl	8018468 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cede:	d906      	bls.n	800ceee <plug_holes+0x66>
 800cee0:	4b32      	ldr	r3, [pc, #200]	@ (800cfac <plug_holes+0x124>)
 800cee2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cee6:	4937      	ldr	r1, [pc, #220]	@ (800cfc4 <plug_holes+0x13c>)
 800cee8:	4832      	ldr	r0, [pc, #200]	@ (800cfb4 <plug_holes+0x12c>)
 800ceea:	f00b fabd 	bl	8018468 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ffa4 	bl	800ce40 <ptr_to_mem>
 800cef8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d024      	beq.n	800cf4c <plug_holes+0xc4>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	791b      	ldrb	r3, [r3, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d120      	bne.n	800cf4c <plug_holes+0xc4>
 800cf0a:	4b2b      	ldr	r3, [pc, #172]	@ (800cfb8 <plug_holes+0x130>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d01b      	beq.n	800cf4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cf14:	4b2c      	ldr	r3, [pc, #176]	@ (800cfc8 <plug_holes+0x140>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d102      	bne.n	800cf24 <plug_holes+0x9c>
      lfree = mem;
 800cf1e:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc8 <plug_holes+0x140>)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	881a      	ldrh	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf34:	d00a      	beq.n	800cf4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff ff80 	bl	800ce40 <ptr_to_mem>
 800cf40:	4604      	mov	r4, r0
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff ff8e 	bl	800ce64 <mem_to_ptr>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	885b      	ldrh	r3, [r3, #2]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff ff75 	bl	800ce40 <ptr_to_mem>
 800cf56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d01f      	beq.n	800cfa0 <plug_holes+0x118>
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	791b      	ldrb	r3, [r3, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d11b      	bne.n	800cfa0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf68:	4b17      	ldr	r3, [pc, #92]	@ (800cfc8 <plug_holes+0x140>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d102      	bne.n	800cf78 <plug_holes+0xf0>
      lfree = pmem;
 800cf72:	4a15      	ldr	r2, [pc, #84]	@ (800cfc8 <plug_holes+0x140>)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	881a      	ldrh	r2, [r3, #0]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	881b      	ldrh	r3, [r3, #0]
 800cf84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cf88:	d00a      	beq.n	800cfa0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff ff56 	bl	800ce40 <ptr_to_mem>
 800cf94:	4604      	mov	r4, r0
 800cf96:	68b8      	ldr	r0, [r7, #8]
 800cf98:	f7ff ff64 	bl	800ce64 <mem_to_ptr>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd90      	pop	{r4, r7, pc}
 800cfa8:	2000c028 	.word	0x2000c028
 800cfac:	0801a650 	.word	0x0801a650
 800cfb0:	0801a680 	.word	0x0801a680
 800cfb4:	0801a698 	.word	0x0801a698
 800cfb8:	2000c02c 	.word	0x2000c02c
 800cfbc:	0801a6c0 	.word	0x0801a6c0
 800cfc0:	0801a6dc 	.word	0x0801a6dc
 800cfc4:	0801a6f8 	.word	0x0801a6f8
 800cfc8:	2000c034 	.word	0x2000c034

0800cfcc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cfd2:	4b1f      	ldr	r3, [pc, #124]	@ (800d050 <mem_init+0x84>)
 800cfd4:	3303      	adds	r3, #3
 800cfd6:	f023 0303 	bic.w	r3, r3, #3
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4b1d      	ldr	r3, [pc, #116]	@ (800d054 <mem_init+0x88>)
 800cfde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cfe0:	4b1c      	ldr	r3, [pc, #112]	@ (800d054 <mem_init+0x88>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800cfec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cffa:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800cffe:	f7ff ff1f 	bl	800ce40 <ptr_to_mem>
 800d002:	4603      	mov	r3, r0
 800d004:	4a14      	ldr	r2, [pc, #80]	@ (800d058 <mem_init+0x8c>)
 800d006:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d008:	4b13      	ldr	r3, [pc, #76]	@ (800d058 <mem_init+0x8c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2201      	movs	r2, #1
 800d00e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d010:	4b11      	ldr	r3, [pc, #68]	@ (800d058 <mem_init+0x8c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800d018:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d01a:	4b0f      	ldr	r3, [pc, #60]	@ (800d058 <mem_init+0x8c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800d022:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d024:	4b0b      	ldr	r3, [pc, #44]	@ (800d054 <mem_init+0x88>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a0c      	ldr	r2, [pc, #48]	@ (800d05c <mem_init+0x90>)
 800d02a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d02c:	480c      	ldr	r0, [pc, #48]	@ (800d060 <mem_init+0x94>)
 800d02e:	f00b f89f 	bl	8018170 <sys_mutex_new>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d006      	beq.n	800d046 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d038:	4b0a      	ldr	r3, [pc, #40]	@ (800d064 <mem_init+0x98>)
 800d03a:	f240 221f 	movw	r2, #543	@ 0x21f
 800d03e:	490a      	ldr	r1, [pc, #40]	@ (800d068 <mem_init+0x9c>)
 800d040:	480a      	ldr	r0, [pc, #40]	@ (800d06c <mem_init+0xa0>)
 800d042:	f00b fa11 	bl	8018468 <iprintf>
  }
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	2000b9d4 	.word	0x2000b9d4
 800d054:	2000c028 	.word	0x2000c028
 800d058:	2000c02c 	.word	0x2000c02c
 800d05c:	2000c034 	.word	0x2000c034
 800d060:	2000c030 	.word	0x2000c030
 800d064:	0801a650 	.word	0x0801a650
 800d068:	0801a724 	.word	0x0801a724
 800d06c:	0801a698 	.word	0x0801a698

0800d070 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff fef3 	bl	800ce64 <mem_to_ptr>
 800d07e:	4603      	mov	r3, r0
 800d080:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	4618      	mov	r0, r3
 800d088:	f7ff feda 	bl	800ce40 <ptr_to_mem>
 800d08c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	885b      	ldrh	r3, [r3, #2]
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fed4 	bl	800ce40 <ptr_to_mem>
 800d098:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d0a2:	d818      	bhi.n	800d0d6 <mem_link_valid+0x66>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	885b      	ldrh	r3, [r3, #2]
 800d0a8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d0ac:	d813      	bhi.n	800d0d6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d0b2:	8afa      	ldrh	r2, [r7, #22]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d004      	beq.n	800d0c2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	8afa      	ldrh	r2, [r7, #22]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d109      	bne.n	800d0d6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d0c2:	4b08      	ldr	r3, [pc, #32]	@ (800d0e4 <mem_link_valid+0x74>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d006      	beq.n	800d0da <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	885b      	ldrh	r3, [r3, #2]
 800d0d0:	8afa      	ldrh	r2, [r7, #22]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d001      	beq.n	800d0da <mem_link_valid+0x6a>
    return 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	e000      	b.n	800d0dc <mem_link_valid+0x6c>
  }
  return 1;
 800d0da:	2301      	movs	r3, #1
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	2000c02c 	.word	0x2000c02c

0800d0e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d070      	beq.n	800d1d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f003 0303 	and.w	r3, r3, #3
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00d      	beq.n	800d11c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d100:	4b37      	ldr	r3, [pc, #220]	@ (800d1e0 <mem_free+0xf8>)
 800d102:	f240 2273 	movw	r2, #627	@ 0x273
 800d106:	4937      	ldr	r1, [pc, #220]	@ (800d1e4 <mem_free+0xfc>)
 800d108:	4837      	ldr	r0, [pc, #220]	@ (800d1e8 <mem_free+0x100>)
 800d10a:	f00b f9ad 	bl	8018468 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d10e:	f00b f88d 	bl	801822c <sys_arch_protect>
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f00b f897 	bl	8018248 <sys_arch_unprotect>
    return;
 800d11a:	e05e      	b.n	800d1da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	3b08      	subs	r3, #8
 800d120:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d122:	4b32      	ldr	r3, [pc, #200]	@ (800d1ec <mem_free+0x104>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69fa      	ldr	r2, [r7, #28]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d306      	bcc.n	800d13a <mem_free+0x52>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f103 020c 	add.w	r2, r3, #12
 800d132:	4b2f      	ldr	r3, [pc, #188]	@ (800d1f0 <mem_free+0x108>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d90d      	bls.n	800d156 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d13a:	4b29      	ldr	r3, [pc, #164]	@ (800d1e0 <mem_free+0xf8>)
 800d13c:	f240 227f 	movw	r2, #639	@ 0x27f
 800d140:	492c      	ldr	r1, [pc, #176]	@ (800d1f4 <mem_free+0x10c>)
 800d142:	4829      	ldr	r0, [pc, #164]	@ (800d1e8 <mem_free+0x100>)
 800d144:	f00b f990 	bl	8018468 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d148:	f00b f870 	bl	801822c <sys_arch_protect>
 800d14c:	6138      	str	r0, [r7, #16]
 800d14e:	6938      	ldr	r0, [r7, #16]
 800d150:	f00b f87a 	bl	8018248 <sys_arch_unprotect>
    return;
 800d154:	e041      	b.n	800d1da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d156:	4828      	ldr	r0, [pc, #160]	@ (800d1f8 <mem_free+0x110>)
 800d158:	f00b f826 	bl	80181a8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	791b      	ldrb	r3, [r3, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d110      	bne.n	800d186 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d164:	4b1e      	ldr	r3, [pc, #120]	@ (800d1e0 <mem_free+0xf8>)
 800d166:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d16a:	4924      	ldr	r1, [pc, #144]	@ (800d1fc <mem_free+0x114>)
 800d16c:	481e      	ldr	r0, [pc, #120]	@ (800d1e8 <mem_free+0x100>)
 800d16e:	f00b f97b 	bl	8018468 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d172:	4821      	ldr	r0, [pc, #132]	@ (800d1f8 <mem_free+0x110>)
 800d174:	f00b f827 	bl	80181c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d178:	f00b f858 	bl	801822c <sys_arch_protect>
 800d17c:	6178      	str	r0, [r7, #20]
 800d17e:	6978      	ldr	r0, [r7, #20]
 800d180:	f00b f862 	bl	8018248 <sys_arch_unprotect>
    return;
 800d184:	e029      	b.n	800d1da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d186:	69f8      	ldr	r0, [r7, #28]
 800d188:	f7ff ff72 	bl	800d070 <mem_link_valid>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d110      	bne.n	800d1b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d192:	4b13      	ldr	r3, [pc, #76]	@ (800d1e0 <mem_free+0xf8>)
 800d194:	f240 2295 	movw	r2, #661	@ 0x295
 800d198:	4919      	ldr	r1, [pc, #100]	@ (800d200 <mem_free+0x118>)
 800d19a:	4813      	ldr	r0, [pc, #76]	@ (800d1e8 <mem_free+0x100>)
 800d19c:	f00b f964 	bl	8018468 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d1a0:	4815      	ldr	r0, [pc, #84]	@ (800d1f8 <mem_free+0x110>)
 800d1a2:	f00b f810 	bl	80181c6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1a6:	f00b f841 	bl	801822c <sys_arch_protect>
 800d1aa:	61b8      	str	r0, [r7, #24]
 800d1ac:	69b8      	ldr	r0, [r7, #24]
 800d1ae:	f00b f84b 	bl	8018248 <sys_arch_unprotect>
    return;
 800d1b2:	e012      	b.n	800d1da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d1ba:	4b12      	ldr	r3, [pc, #72]	@ (800d204 <mem_free+0x11c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	69fa      	ldr	r2, [r7, #28]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d202      	bcs.n	800d1ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d1c4:	4a0f      	ldr	r2, [pc, #60]	@ (800d204 <mem_free+0x11c>)
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d1ca:	69f8      	ldr	r0, [r7, #28]
 800d1cc:	f7ff fe5c 	bl	800ce88 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d1d0:	4809      	ldr	r0, [pc, #36]	@ (800d1f8 <mem_free+0x110>)
 800d1d2:	f00a fff8 	bl	80181c6 <sys_mutex_unlock>
 800d1d6:	e000      	b.n	800d1da <mem_free+0xf2>
    return;
 800d1d8:	bf00      	nop
}
 800d1da:	3720      	adds	r7, #32
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	0801a650 	.word	0x0801a650
 800d1e4:	0801a740 	.word	0x0801a740
 800d1e8:	0801a698 	.word	0x0801a698
 800d1ec:	2000c028 	.word	0x2000c028
 800d1f0:	2000c02c 	.word	0x2000c02c
 800d1f4:	0801a764 	.word	0x0801a764
 800d1f8:	2000c030 	.word	0x2000c030
 800d1fc:	0801a780 	.word	0x0801a780
 800d200:	0801a7a8 	.word	0x0801a7a8
 800d204:	2000c034 	.word	0x2000c034

0800d208 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d214:	887b      	ldrh	r3, [r7, #2]
 800d216:	3303      	adds	r3, #3
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f023 0303 	bic.w	r3, r3, #3
 800d21e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d220:	8bfb      	ldrh	r3, [r7, #30]
 800d222:	2b0b      	cmp	r3, #11
 800d224:	d801      	bhi.n	800d22a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d226:	230c      	movs	r3, #12
 800d228:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d22a:	8bfb      	ldrh	r3, [r7, #30]
 800d22c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d230:	d803      	bhi.n	800d23a <mem_trim+0x32>
 800d232:	8bfa      	ldrh	r2, [r7, #30]
 800d234:	887b      	ldrh	r3, [r7, #2]
 800d236:	429a      	cmp	r2, r3
 800d238:	d201      	bcs.n	800d23e <mem_trim+0x36>
    return NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	e0d8      	b.n	800d3f0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d23e:	4b6e      	ldr	r3, [pc, #440]	@ (800d3f8 <mem_trim+0x1f0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d304      	bcc.n	800d252 <mem_trim+0x4a>
 800d248:	4b6c      	ldr	r3, [pc, #432]	@ (800d3fc <mem_trim+0x1f4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d306      	bcc.n	800d260 <mem_trim+0x58>
 800d252:	4b6b      	ldr	r3, [pc, #428]	@ (800d400 <mem_trim+0x1f8>)
 800d254:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d258:	496a      	ldr	r1, [pc, #424]	@ (800d404 <mem_trim+0x1fc>)
 800d25a:	486b      	ldr	r0, [pc, #428]	@ (800d408 <mem_trim+0x200>)
 800d25c:	f00b f904 	bl	8018468 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d260:	4b65      	ldr	r3, [pc, #404]	@ (800d3f8 <mem_trim+0x1f0>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	429a      	cmp	r2, r3
 800d268:	d304      	bcc.n	800d274 <mem_trim+0x6c>
 800d26a:	4b64      	ldr	r3, [pc, #400]	@ (800d3fc <mem_trim+0x1f4>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d307      	bcc.n	800d284 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d274:	f00a ffda 	bl	801822c <sys_arch_protect>
 800d278:	60b8      	str	r0, [r7, #8]
 800d27a:	68b8      	ldr	r0, [r7, #8]
 800d27c:	f00a ffe4 	bl	8018248 <sys_arch_unprotect>
    return rmem;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	e0b5      	b.n	800d3f0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3b08      	subs	r3, #8
 800d288:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d28a:	69b8      	ldr	r0, [r7, #24]
 800d28c:	f7ff fdea 	bl	800ce64 <mem_to_ptr>
 800d290:	4603      	mov	r3, r0
 800d292:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	881a      	ldrh	r2, [r3, #0]
 800d298:	8afb      	ldrh	r3, [r7, #22]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	3b08      	subs	r3, #8
 800d2a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d2a2:	8bfa      	ldrh	r2, [r7, #30]
 800d2a4:	8abb      	ldrh	r3, [r7, #20]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d906      	bls.n	800d2b8 <mem_trim+0xb0>
 800d2aa:	4b55      	ldr	r3, [pc, #340]	@ (800d400 <mem_trim+0x1f8>)
 800d2ac:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d2b0:	4956      	ldr	r1, [pc, #344]	@ (800d40c <mem_trim+0x204>)
 800d2b2:	4855      	ldr	r0, [pc, #340]	@ (800d408 <mem_trim+0x200>)
 800d2b4:	f00b f8d8 	bl	8018468 <iprintf>
  if (newsize > size) {
 800d2b8:	8bfa      	ldrh	r2, [r7, #30]
 800d2ba:	8abb      	ldrh	r3, [r7, #20]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d901      	bls.n	800d2c4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e095      	b.n	800d3f0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d2c4:	8bfa      	ldrh	r2, [r7, #30]
 800d2c6:	8abb      	ldrh	r3, [r7, #20]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d101      	bne.n	800d2d0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	e08f      	b.n	800d3f0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d2d0:	484f      	ldr	r0, [pc, #316]	@ (800d410 <mem_trim+0x208>)
 800d2d2:	f00a ff69 	bl	80181a8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7ff fdb0 	bl	800ce40 <ptr_to_mem>
 800d2e0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	791b      	ldrb	r3, [r3, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d13f      	bne.n	800d36a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d2f2:	d106      	bne.n	800d302 <mem_trim+0xfa>
 800d2f4:	4b42      	ldr	r3, [pc, #264]	@ (800d400 <mem_trim+0x1f8>)
 800d2f6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d2fa:	4946      	ldr	r1, [pc, #280]	@ (800d414 <mem_trim+0x20c>)
 800d2fc:	4842      	ldr	r0, [pc, #264]	@ (800d408 <mem_trim+0x200>)
 800d2fe:	f00b f8b3 	bl	8018468 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d308:	8afa      	ldrh	r2, [r7, #22]
 800d30a:	8bfb      	ldrh	r3, [r7, #30]
 800d30c:	4413      	add	r3, r2
 800d30e:	b29b      	uxth	r3, r3
 800d310:	3308      	adds	r3, #8
 800d312:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d314:	4b40      	ldr	r3, [pc, #256]	@ (800d418 <mem_trim+0x210>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	693a      	ldr	r2, [r7, #16]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d106      	bne.n	800d32c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff fd8d 	bl	800ce40 <ptr_to_mem>
 800d326:	4603      	mov	r3, r0
 800d328:	4a3b      	ldr	r2, [pc, #236]	@ (800d418 <mem_trim+0x210>)
 800d32a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d32c:	89fb      	ldrh	r3, [r7, #14]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fd86 	bl	800ce40 <ptr_to_mem>
 800d334:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2200      	movs	r2, #0
 800d33a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	89ba      	ldrh	r2, [r7, #12]
 800d340:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	8afa      	ldrh	r2, [r7, #22]
 800d346:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	89fa      	ldrh	r2, [r7, #14]
 800d34c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d356:	d047      	beq.n	800d3e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fd6f 	bl	800ce40 <ptr_to_mem>
 800d362:	4602      	mov	r2, r0
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	8053      	strh	r3, [r2, #2]
 800d368:	e03e      	b.n	800d3e8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d36a:	8bfb      	ldrh	r3, [r7, #30]
 800d36c:	f103 0214 	add.w	r2, r3, #20
 800d370:	8abb      	ldrh	r3, [r7, #20]
 800d372:	429a      	cmp	r2, r3
 800d374:	d838      	bhi.n	800d3e8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d376:	8afa      	ldrh	r2, [r7, #22]
 800d378:	8bfb      	ldrh	r3, [r7, #30]
 800d37a:	4413      	add	r3, r2
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	3308      	adds	r3, #8
 800d380:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d38a:	d106      	bne.n	800d39a <mem_trim+0x192>
 800d38c:	4b1c      	ldr	r3, [pc, #112]	@ (800d400 <mem_trim+0x1f8>)
 800d38e:	f240 3216 	movw	r2, #790	@ 0x316
 800d392:	4920      	ldr	r1, [pc, #128]	@ (800d414 <mem_trim+0x20c>)
 800d394:	481c      	ldr	r0, [pc, #112]	@ (800d408 <mem_trim+0x200>)
 800d396:	f00b f867 	bl	8018468 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d39a:	89fb      	ldrh	r3, [r7, #14]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff fd4f 	bl	800ce40 <ptr_to_mem>
 800d3a2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d3a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d418 <mem_trim+0x210>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d202      	bcs.n	800d3b4 <mem_trim+0x1ac>
      lfree = mem2;
 800d3ae:	4a1a      	ldr	r2, [pc, #104]	@ (800d418 <mem_trim+0x210>)
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	881a      	ldrh	r2, [r3, #0]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	8afa      	ldrh	r2, [r7, #22]
 800d3c6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	89fa      	ldrh	r2, [r7, #14]
 800d3cc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d3d6:	d007      	beq.n	800d3e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fd2f 	bl	800ce40 <ptr_to_mem>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	89fb      	ldrh	r3, [r7, #14]
 800d3e6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d3e8:	4809      	ldr	r0, [pc, #36]	@ (800d410 <mem_trim+0x208>)
 800d3ea:	f00a feec 	bl	80181c6 <sys_mutex_unlock>
  return rmem;
 800d3ee:	687b      	ldr	r3, [r7, #4]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	2000c028 	.word	0x2000c028
 800d3fc:	2000c02c 	.word	0x2000c02c
 800d400:	0801a650 	.word	0x0801a650
 800d404:	0801a7dc 	.word	0x0801a7dc
 800d408:	0801a698 	.word	0x0801a698
 800d40c:	0801a7f4 	.word	0x0801a7f4
 800d410:	2000c030 	.word	0x2000c030
 800d414:	0801a814 	.word	0x0801a814
 800d418:	2000c034 	.word	0x2000c034

0800d41c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af00      	add	r7, sp, #0
 800d422:	4603      	mov	r3, r0
 800d424:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d426:	88fb      	ldrh	r3, [r7, #6]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <mem_malloc+0x14>
    return NULL;
 800d42c:	2300      	movs	r3, #0
 800d42e:	e0e2      	b.n	800d5f6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d430:	88fb      	ldrh	r3, [r7, #6]
 800d432:	3303      	adds	r3, #3
 800d434:	b29b      	uxth	r3, r3
 800d436:	f023 0303 	bic.w	r3, r3, #3
 800d43a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d43c:	8bbb      	ldrh	r3, [r7, #28]
 800d43e:	2b0b      	cmp	r3, #11
 800d440:	d801      	bhi.n	800d446 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d442:	230c      	movs	r3, #12
 800d444:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d446:	8bbb      	ldrh	r3, [r7, #28]
 800d448:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d44c:	d803      	bhi.n	800d456 <mem_malloc+0x3a>
 800d44e:	8bba      	ldrh	r2, [r7, #28]
 800d450:	88fb      	ldrh	r3, [r7, #6]
 800d452:	429a      	cmp	r2, r3
 800d454:	d201      	bcs.n	800d45a <mem_malloc+0x3e>
    return NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	e0cd      	b.n	800d5f6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d45a:	4869      	ldr	r0, [pc, #420]	@ (800d600 <mem_malloc+0x1e4>)
 800d45c:	f00a fea4 	bl	80181a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d460:	4b68      	ldr	r3, [pc, #416]	@ (800d604 <mem_malloc+0x1e8>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fcfd 	bl	800ce64 <mem_to_ptr>
 800d46a:	4603      	mov	r3, r0
 800d46c:	83fb      	strh	r3, [r7, #30]
 800d46e:	e0b7      	b.n	800d5e0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d470:	8bfb      	ldrh	r3, [r7, #30]
 800d472:	4618      	mov	r0, r3
 800d474:	f7ff fce4 	bl	800ce40 <ptr_to_mem>
 800d478:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	791b      	ldrb	r3, [r3, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f040 80a7 	bne.w	800d5d2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	8bfb      	ldrh	r3, [r7, #30]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	f1a3 0208 	sub.w	r2, r3, #8
 800d492:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d494:	429a      	cmp	r2, r3
 800d496:	f0c0 809c 	bcc.w	800d5d2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	8bfb      	ldrh	r3, [r7, #30]
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	f1a3 0208 	sub.w	r2, r3, #8
 800d4a8:	8bbb      	ldrh	r3, [r7, #28]
 800d4aa:	3314      	adds	r3, #20
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d333      	bcc.n	800d518 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d4b0:	8bfa      	ldrh	r2, [r7, #30]
 800d4b2:	8bbb      	ldrh	r3, [r7, #28]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d4bc:	8a7b      	ldrh	r3, [r7, #18]
 800d4be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d4c2:	d106      	bne.n	800d4d2 <mem_malloc+0xb6>
 800d4c4:	4b50      	ldr	r3, [pc, #320]	@ (800d608 <mem_malloc+0x1ec>)
 800d4c6:	f240 3287 	movw	r2, #903	@ 0x387
 800d4ca:	4950      	ldr	r1, [pc, #320]	@ (800d60c <mem_malloc+0x1f0>)
 800d4cc:	4850      	ldr	r0, [pc, #320]	@ (800d610 <mem_malloc+0x1f4>)
 800d4ce:	f00a ffcb 	bl	8018468 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d4d2:	8a7b      	ldrh	r3, [r7, #18]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fcb3 	bl	800ce40 <ptr_to_mem>
 800d4da:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	881a      	ldrh	r2, [r3, #0]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8bfa      	ldrh	r2, [r7, #30]
 800d4ee:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	8a7a      	ldrh	r2, [r7, #18]
 800d4f4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800d504:	d00b      	beq.n	800d51e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fc98 	bl	800ce40 <ptr_to_mem>
 800d510:	4602      	mov	r2, r0
 800d512:	8a7b      	ldrh	r3, [r7, #18]
 800d514:	8053      	strh	r3, [r2, #2]
 800d516:	e002      	b.n	800d51e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2201      	movs	r2, #1
 800d51c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d51e:	4b39      	ldr	r3, [pc, #228]	@ (800d604 <mem_malloc+0x1e8>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d127      	bne.n	800d578 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d528:	4b36      	ldr	r3, [pc, #216]	@ (800d604 <mem_malloc+0x1e8>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d52e:	e005      	b.n	800d53c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff fc83 	bl	800ce40 <ptr_to_mem>
 800d53a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	791b      	ldrb	r3, [r3, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d004      	beq.n	800d54e <mem_malloc+0x132>
 800d544:	4b33      	ldr	r3, [pc, #204]	@ (800d614 <mem_malloc+0x1f8>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	69ba      	ldr	r2, [r7, #24]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d1f0      	bne.n	800d530 <mem_malloc+0x114>
          }
          lfree = cur;
 800d54e:	4a2d      	ldr	r2, [pc, #180]	@ (800d604 <mem_malloc+0x1e8>)
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d554:	4b2b      	ldr	r3, [pc, #172]	@ (800d604 <mem_malloc+0x1e8>)
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	4b2e      	ldr	r3, [pc, #184]	@ (800d614 <mem_malloc+0x1f8>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d00b      	beq.n	800d578 <mem_malloc+0x15c>
 800d560:	4b28      	ldr	r3, [pc, #160]	@ (800d604 <mem_malloc+0x1e8>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	791b      	ldrb	r3, [r3, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d006      	beq.n	800d578 <mem_malloc+0x15c>
 800d56a:	4b27      	ldr	r3, [pc, #156]	@ (800d608 <mem_malloc+0x1ec>)
 800d56c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d570:	4929      	ldr	r1, [pc, #164]	@ (800d618 <mem_malloc+0x1fc>)
 800d572:	4827      	ldr	r0, [pc, #156]	@ (800d610 <mem_malloc+0x1f4>)
 800d574:	f00a ff78 	bl	8018468 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d578:	4821      	ldr	r0, [pc, #132]	@ (800d600 <mem_malloc+0x1e4>)
 800d57a:	f00a fe24 	bl	80181c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d57e:	8bba      	ldrh	r2, [r7, #28]
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	4413      	add	r3, r2
 800d584:	3308      	adds	r3, #8
 800d586:	4a23      	ldr	r2, [pc, #140]	@ (800d614 <mem_malloc+0x1f8>)
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d906      	bls.n	800d59c <mem_malloc+0x180>
 800d58e:	4b1e      	ldr	r3, [pc, #120]	@ (800d608 <mem_malloc+0x1ec>)
 800d590:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d594:	4921      	ldr	r1, [pc, #132]	@ (800d61c <mem_malloc+0x200>)
 800d596:	481e      	ldr	r0, [pc, #120]	@ (800d610 <mem_malloc+0x1f4>)
 800d598:	f00a ff66 	bl	8018468 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d006      	beq.n	800d5b4 <mem_malloc+0x198>
 800d5a6:	4b18      	ldr	r3, [pc, #96]	@ (800d608 <mem_malloc+0x1ec>)
 800d5a8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d5ac:	491c      	ldr	r1, [pc, #112]	@ (800d620 <mem_malloc+0x204>)
 800d5ae:	4818      	ldr	r0, [pc, #96]	@ (800d610 <mem_malloc+0x1f4>)
 800d5b0:	f00a ff5a 	bl	8018468 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	f003 0303 	and.w	r3, r3, #3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d006      	beq.n	800d5cc <mem_malloc+0x1b0>
 800d5be:	4b12      	ldr	r3, [pc, #72]	@ (800d608 <mem_malloc+0x1ec>)
 800d5c0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d5c4:	4917      	ldr	r1, [pc, #92]	@ (800d624 <mem_malloc+0x208>)
 800d5c6:	4812      	ldr	r0, [pc, #72]	@ (800d610 <mem_malloc+0x1f4>)
 800d5c8:	f00a ff4e 	bl	8018468 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	e011      	b.n	800d5f6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d5d2:	8bfb      	ldrh	r3, [r7, #30]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7ff fc33 	bl	800ce40 <ptr_to_mem>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d5e0:	8bfa      	ldrh	r2, [r7, #30]
 800d5e2:	8bbb      	ldrh	r3, [r7, #28]
 800d5e4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	f4ff af41 	bcc.w	800d470 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d5ee:	4804      	ldr	r0, [pc, #16]	@ (800d600 <mem_malloc+0x1e4>)
 800d5f0:	f00a fde9 	bl	80181c6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d5f4:	2300      	movs	r3, #0
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	2000c030 	.word	0x2000c030
 800d604:	2000c034 	.word	0x2000c034
 800d608:	0801a650 	.word	0x0801a650
 800d60c:	0801a814 	.word	0x0801a814
 800d610:	0801a698 	.word	0x0801a698
 800d614:	2000c02c 	.word	0x2000c02c
 800d618:	0801a828 	.word	0x0801a828
 800d61c:	0801a844 	.word	0x0801a844
 800d620:	0801a874 	.word	0x0801a874
 800d624:	0801a8a4 	.word	0x0801a8a4

0800d628 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d628:	b480      	push	{r7}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	2200      	movs	r2, #0
 800d636:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	3303      	adds	r3, #3
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d644:	2300      	movs	r3, #0
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e011      	b.n	800d66e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	68ba      	ldr	r2, [r7, #8]
 800d65a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	461a      	mov	r2, r3
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	4413      	add	r3, r2
 800d666:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3301      	adds	r3, #1
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	885b      	ldrh	r3, [r3, #2]
 800d672:	461a      	mov	r2, r3
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	4293      	cmp	r3, r2
 800d678:	dbe7      	blt.n	800d64a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d67a:	bf00      	nop
 800d67c:	bf00      	nop
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d68e:	2300      	movs	r3, #0
 800d690:	80fb      	strh	r3, [r7, #6]
 800d692:	e009      	b.n	800d6a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d694:	88fb      	ldrh	r3, [r7, #6]
 800d696:	4a08      	ldr	r2, [pc, #32]	@ (800d6b8 <memp_init+0x30>)
 800d698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7ff ffc3 	bl	800d628 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	80fb      	strh	r3, [r7, #6]
 800d6a8:	88fb      	ldrh	r3, [r7, #6]
 800d6aa:	2b0c      	cmp	r3, #12
 800d6ac:	d9f2      	bls.n	800d694 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0801dd7c 	.word	0x0801dd7c

0800d6bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d6c4:	f00a fdb2 	bl	801822c <sys_arch_protect>
 800d6c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d015      	beq.n	800d704 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	6812      	ldr	r2, [r2, #0]
 800d6e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f003 0303 	and.w	r3, r3, #3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <do_memp_malloc_pool+0x3e>
 800d6ec:	4b09      	ldr	r3, [pc, #36]	@ (800d714 <do_memp_malloc_pool+0x58>)
 800d6ee:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d6f2:	4909      	ldr	r1, [pc, #36]	@ (800d718 <do_memp_malloc_pool+0x5c>)
 800d6f4:	4809      	ldr	r0, [pc, #36]	@ (800d71c <do_memp_malloc_pool+0x60>)
 800d6f6:	f00a feb7 	bl	8018468 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f00a fda4 	bl	8018248 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	e003      	b.n	800d70c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f00a fd9f 	bl	8018248 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	0801a8c8 	.word	0x0801a8c8
 800d718:	0801a8f8 	.word	0x0801a8f8
 800d71c:	0801a91c 	.word	0x0801a91c

0800d720 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <memp_malloc_pool+0x1c>
 800d72e:	4b0a      	ldr	r3, [pc, #40]	@ (800d758 <memp_malloc_pool+0x38>)
 800d730:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d734:	4909      	ldr	r1, [pc, #36]	@ (800d75c <memp_malloc_pool+0x3c>)
 800d736:	480a      	ldr	r0, [pc, #40]	@ (800d760 <memp_malloc_pool+0x40>)
 800d738:	f00a fe96 	bl	8018468 <iprintf>
  if (desc == NULL) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <memp_malloc_pool+0x26>
    return NULL;
 800d742:	2300      	movs	r3, #0
 800d744:	e003      	b.n	800d74e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff ffb8 	bl	800d6bc <do_memp_malloc_pool>
 800d74c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	0801a8c8 	.word	0x0801a8c8
 800d75c:	0801a944 	.word	0x0801a944
 800d760:	0801a91c 	.word	0x0801a91c

0800d764 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d76e:	79fb      	ldrb	r3, [r7, #7]
 800d770:	2b0c      	cmp	r3, #12
 800d772:	d908      	bls.n	800d786 <memp_malloc+0x22>
 800d774:	4b0a      	ldr	r3, [pc, #40]	@ (800d7a0 <memp_malloc+0x3c>)
 800d776:	f240 1257 	movw	r2, #343	@ 0x157
 800d77a:	490a      	ldr	r1, [pc, #40]	@ (800d7a4 <memp_malloc+0x40>)
 800d77c:	480a      	ldr	r0, [pc, #40]	@ (800d7a8 <memp_malloc+0x44>)
 800d77e:	f00a fe73 	bl	8018468 <iprintf>
 800d782:	2300      	movs	r3, #0
 800d784:	e008      	b.n	800d798 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d786:	79fb      	ldrb	r3, [r7, #7]
 800d788:	4a08      	ldr	r2, [pc, #32]	@ (800d7ac <memp_malloc+0x48>)
 800d78a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff ff94 	bl	800d6bc <do_memp_malloc_pool>
 800d794:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d796:	68fb      	ldr	r3, [r7, #12]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	0801a8c8 	.word	0x0801a8c8
 800d7a4:	0801a958 	.word	0x0801a958
 800d7a8:	0801a91c 	.word	0x0801a91c
 800d7ac:	0801dd7c 	.word	0x0801dd7c

0800d7b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	f003 0303 	and.w	r3, r3, #3
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <do_memp_free_pool+0x22>
 800d7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <do_memp_free_pool+0x4c>)
 800d7c6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d7ca:	490d      	ldr	r1, [pc, #52]	@ (800d800 <do_memp_free_pool+0x50>)
 800d7cc:	480d      	ldr	r0, [pc, #52]	@ (800d804 <do_memp_free_pool+0x54>)
 800d7ce:	f00a fe4b 	bl	8018468 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d7d6:	f00a fd29 	bl	801822c <sys_arch_protect>
 800d7da:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d7ee:	68b8      	ldr	r0, [r7, #8]
 800d7f0:	f00a fd2a 	bl	8018248 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	0801a8c8 	.word	0x0801a8c8
 800d800:	0801a978 	.word	0x0801a978
 800d804:	0801a91c 	.word	0x0801a91c

0800d808 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d106      	bne.n	800d826 <memp_free_pool+0x1e>
 800d818:	4b0a      	ldr	r3, [pc, #40]	@ (800d844 <memp_free_pool+0x3c>)
 800d81a:	f240 1295 	movw	r2, #405	@ 0x195
 800d81e:	490a      	ldr	r1, [pc, #40]	@ (800d848 <memp_free_pool+0x40>)
 800d820:	480a      	ldr	r0, [pc, #40]	@ (800d84c <memp_free_pool+0x44>)
 800d822:	f00a fe21 	bl	8018468 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d007      	beq.n	800d83c <memp_free_pool+0x34>
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff ffbb 	bl	800d7b0 <do_memp_free_pool>
 800d83a:	e000      	b.n	800d83e <memp_free_pool+0x36>
    return;
 800d83c:	bf00      	nop
}
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	0801a8c8 	.word	0x0801a8c8
 800d848:	0801a944 	.word	0x0801a944
 800d84c:	0801a91c 	.word	0x0801a91c

0800d850 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	4603      	mov	r3, r0
 800d858:	6039      	str	r1, [r7, #0]
 800d85a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d85c:	79fb      	ldrb	r3, [r7, #7]
 800d85e:	2b0c      	cmp	r3, #12
 800d860:	d907      	bls.n	800d872 <memp_free+0x22>
 800d862:	4b0c      	ldr	r3, [pc, #48]	@ (800d894 <memp_free+0x44>)
 800d864:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d868:	490b      	ldr	r1, [pc, #44]	@ (800d898 <memp_free+0x48>)
 800d86a:	480c      	ldr	r0, [pc, #48]	@ (800d89c <memp_free+0x4c>)
 800d86c:	f00a fdfc 	bl	8018468 <iprintf>
 800d870:	e00c      	b.n	800d88c <memp_free+0x3c>

  if (mem == NULL) {
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d008      	beq.n	800d88a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	4a09      	ldr	r2, [pc, #36]	@ (800d8a0 <memp_free+0x50>)
 800d87c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	4618      	mov	r0, r3
 800d884:	f7ff ff94 	bl	800d7b0 <do_memp_free_pool>
 800d888:	e000      	b.n	800d88c <memp_free+0x3c>
    return;
 800d88a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	0801a8c8 	.word	0x0801a8c8
 800d898:	0801a998 	.word	0x0801a998
 800d89c:	0801a91c 	.word	0x0801a91c
 800d8a0:	0801dd7c 	.word	0x0801dd7c

0800d8a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d8a8:	bf00      	nop
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b086      	sub	sp, #24
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d108      	bne.n	800d8da <netif_add+0x26>
 800d8c8:	4b57      	ldr	r3, [pc, #348]	@ (800da28 <netif_add+0x174>)
 800d8ca:	f240 1227 	movw	r2, #295	@ 0x127
 800d8ce:	4957      	ldr	r1, [pc, #348]	@ (800da2c <netif_add+0x178>)
 800d8d0:	4857      	ldr	r0, [pc, #348]	@ (800da30 <netif_add+0x17c>)
 800d8d2:	f00a fdc9 	bl	8018468 <iprintf>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e0a2      	b.n	800da20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d108      	bne.n	800d8f2 <netif_add+0x3e>
 800d8e0:	4b51      	ldr	r3, [pc, #324]	@ (800da28 <netif_add+0x174>)
 800d8e2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d8e6:	4953      	ldr	r1, [pc, #332]	@ (800da34 <netif_add+0x180>)
 800d8e8:	4851      	ldr	r0, [pc, #324]	@ (800da30 <netif_add+0x17c>)
 800d8ea:	f00a fdbd 	bl	8018468 <iprintf>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e096      	b.n	800da20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d8f8:	4b4f      	ldr	r3, [pc, #316]	@ (800da38 <netif_add+0x184>)
 800d8fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d902:	4b4d      	ldr	r3, [pc, #308]	@ (800da38 <netif_add+0x184>)
 800d904:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d90c:	4b4a      	ldr	r3, [pc, #296]	@ (800da38 <netif_add+0x184>)
 800d90e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4a45      	ldr	r2, [pc, #276]	@ (800da3c <netif_add+0x188>)
 800d926:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6a3a      	ldr	r2, [r7, #32]
 800d940:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d942:	4b3f      	ldr	r3, [pc, #252]	@ (800da40 <netif_add+0x18c>)
 800d944:	781a      	ldrb	r2, [r3, #0]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d950:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 f913 	bl	800db84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	4798      	blx	r3
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <netif_add+0xba>
    return NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	e058      	b.n	800da20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d974:	2bff      	cmp	r3, #255	@ 0xff
 800d976:	d103      	bne.n	800d980 <netif_add+0xcc>
        netif->num = 0;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d984:	4b2f      	ldr	r3, [pc, #188]	@ (800da44 <netif_add+0x190>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	e02b      	b.n	800d9e4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	429a      	cmp	r2, r3
 800d992:	d106      	bne.n	800d9a2 <netif_add+0xee>
 800d994:	4b24      	ldr	r3, [pc, #144]	@ (800da28 <netif_add+0x174>)
 800d996:	f240 128b 	movw	r2, #395	@ 0x18b
 800d99a:	492b      	ldr	r1, [pc, #172]	@ (800da48 <netif_add+0x194>)
 800d99c:	4824      	ldr	r0, [pc, #144]	@ (800da30 <netif_add+0x17c>)
 800d99e:	f00a fd63 	bl	8018468 <iprintf>
        num_netifs++;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2bff      	cmp	r3, #255	@ 0xff
 800d9ac:	dd06      	ble.n	800d9bc <netif_add+0x108>
 800d9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800da28 <netif_add+0x174>)
 800d9b0:	f240 128d 	movw	r2, #397	@ 0x18d
 800d9b4:	4925      	ldr	r1, [pc, #148]	@ (800da4c <netif_add+0x198>)
 800d9b6:	481e      	ldr	r0, [pc, #120]	@ (800da30 <netif_add+0x17c>)
 800d9b8:	f00a fd56 	bl	8018468 <iprintf>
        if (netif2->num == netif->num) {
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d108      	bne.n	800d9de <netif_add+0x12a>
          netif->num++;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d9dc:	e005      	b.n	800d9ea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	617b      	str	r3, [r7, #20]
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1d0      	bne.n	800d98c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d1be      	bne.n	800d96e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9f6:	2bfe      	cmp	r3, #254	@ 0xfe
 800d9f8:	d103      	bne.n	800da02 <netif_add+0x14e>
    netif_num = 0;
 800d9fa:	4b11      	ldr	r3, [pc, #68]	@ (800da40 <netif_add+0x18c>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e006      	b.n	800da10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da08:	3301      	adds	r3, #1
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	4b0c      	ldr	r3, [pc, #48]	@ (800da40 <netif_add+0x18c>)
 800da0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800da10:	4b0c      	ldr	r3, [pc, #48]	@ (800da44 <netif_add+0x190>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800da18:	4a0a      	ldr	r2, [pc, #40]	@ (800da44 <netif_add+0x190>)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	0801a9b4 	.word	0x0801a9b4
 800da2c:	0801aa48 	.word	0x0801aa48
 800da30:	0801aa04 	.word	0x0801aa04
 800da34:	0801aa64 	.word	0x0801aa64
 800da38:	0801ddf0 	.word	0x0801ddf0
 800da3c:	0800de5f 	.word	0x0800de5f
 800da40:	2000f10c 	.word	0x2000f10c
 800da44:	2000f104 	.word	0x2000f104
 800da48:	0801aa88 	.word	0x0801aa88
 800da4c:	0801aa9c 	.word	0x0801aa9c

0800da50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f002 fe91 	bl	8010784 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f007 ff27 	bl	80158b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800da6a:	bf00      	nop
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
	...

0800da74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <netif_do_set_ipaddr+0x20>
 800da86:	4b1d      	ldr	r3, [pc, #116]	@ (800dafc <netif_do_set_ipaddr+0x88>)
 800da88:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800da8c:	491c      	ldr	r1, [pc, #112]	@ (800db00 <netif_do_set_ipaddr+0x8c>)
 800da8e:	481d      	ldr	r0, [pc, #116]	@ (800db04 <netif_do_set_ipaddr+0x90>)
 800da90:	f00a fcea 	bl	8018468 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <netif_do_set_ipaddr+0x34>
 800da9a:	4b18      	ldr	r3, [pc, #96]	@ (800dafc <netif_do_set_ipaddr+0x88>)
 800da9c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800daa0:	4917      	ldr	r1, [pc, #92]	@ (800db00 <netif_do_set_ipaddr+0x8c>)
 800daa2:	4818      	ldr	r0, [pc, #96]	@ (800db04 <netif_do_set_ipaddr+0x90>)
 800daa4:	f00a fce0 	bl	8018468 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	3304      	adds	r3, #4
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d01c      	beq.n	800daf0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	3304      	adds	r3, #4
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dac6:	f107 0314 	add.w	r3, r7, #20
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff ffbf 	bl	800da50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <netif_do_set_ipaddr+0x6a>
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	e000      	b.n	800dae0 <netif_do_set_ipaddr+0x6c>
 800dade:	2300      	movs	r3, #0
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dae4:	2101      	movs	r1, #1
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f000 f8d2 	bl	800dc90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800daec:	2301      	movs	r3, #1
 800daee:	e000      	b.n	800daf2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	0801a9b4 	.word	0x0801a9b4
 800db00:	0801aacc 	.word	0x0801aacc
 800db04:	0801aa04 	.word	0x0801aa04

0800db08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3308      	adds	r3, #8
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d00a      	beq.n	800db38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d002      	beq.n	800db2e <netif_do_set_netmask+0x26>
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	e000      	b.n	800db30 <netif_do_set_netmask+0x28>
 800db2e:	2300      	movs	r3, #0
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800db34:	2301      	movs	r3, #1
 800db36:	e000      	b.n	800db3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800db46:	b480      	push	{r7}
 800db48:	b085      	sub	sp, #20
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	60f8      	str	r0, [r7, #12]
 800db4e:	60b9      	str	r1, [r7, #8]
 800db50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	330c      	adds	r3, #12
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d00a      	beq.n	800db76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d002      	beq.n	800db6c <netif_do_set_gw+0x26>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	e000      	b.n	800db6e <netif_do_set_gw+0x28>
 800db6c:	2300      	movs	r3, #0
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800db72:	2301      	movs	r3, #1
 800db74:	e000      	b.n	800db78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d101      	bne.n	800dba4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dba0:	4b1c      	ldr	r3, [pc, #112]	@ (800dc14 <netif_set_addr+0x90>)
 800dba2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dbaa:	4b1a      	ldr	r3, [pc, #104]	@ (800dc14 <netif_set_addr+0x90>)
 800dbac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dbb4:	4b17      	ldr	r3, [pc, #92]	@ (800dc14 <netif_set_addr+0x90>)
 800dbb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <netif_set_addr+0x42>
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d101      	bne.n	800dbca <netif_set_addr+0x46>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e000      	b.n	800dbcc <netif_set_addr+0x48>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d006      	beq.n	800dbe2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbd4:	f107 0310 	add.w	r3, r7, #16
 800dbd8:	461a      	mov	r2, r3
 800dbda:	68b9      	ldr	r1, [r7, #8]
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f7ff ff49 	bl	800da74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f7ff ff8e 	bl	800db08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	6839      	ldr	r1, [r7, #0]
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff ffa8 	bl	800db46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d106      	bne.n	800dc0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbfc:	f107 0310 	add.w	r3, r7, #16
 800dc00:	461a      	mov	r2, r3
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f7ff ff35 	bl	800da74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dc0a:	bf00      	nop
 800dc0c:	3720      	adds	r7, #32
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	0801ddf0 	.word	0x0801ddf0

0800dc18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dc20:	4a04      	ldr	r2, [pc, #16]	@ (800dc34 <netif_set_default+0x1c>)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	2000f108 	.word	0x2000f108

0800dc38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d107      	bne.n	800dc56 <netif_set_up+0x1e>
 800dc46:	4b0f      	ldr	r3, [pc, #60]	@ (800dc84 <netif_set_up+0x4c>)
 800dc48:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800dc4c:	490e      	ldr	r1, [pc, #56]	@ (800dc88 <netif_set_up+0x50>)
 800dc4e:	480f      	ldr	r0, [pc, #60]	@ (800dc8c <netif_set_up+0x54>)
 800dc50:	f00a fc0a 	bl	8018468 <iprintf>
 800dc54:	e013      	b.n	800dc7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10c      	bne.n	800dc7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc76:	2103      	movs	r1, #3
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f809 	bl	800dc90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	0801a9b4 	.word	0x0801a9b4
 800dc88:	0801ab3c 	.word	0x0801ab3c
 800dc8c:	0801aa04 	.word	0x0801aa04

0800dc90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d106      	bne.n	800dcb0 <netif_issue_reports+0x20>
 800dca2:	4b18      	ldr	r3, [pc, #96]	@ (800dd04 <netif_issue_reports+0x74>)
 800dca4:	f240 326d 	movw	r2, #877	@ 0x36d
 800dca8:	4917      	ldr	r1, [pc, #92]	@ (800dd08 <netif_issue_reports+0x78>)
 800dcaa:	4818      	ldr	r0, [pc, #96]	@ (800dd0c <netif_issue_reports+0x7c>)
 800dcac:	f00a fbdc 	bl	8018468 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcb6:	f003 0304 	and.w	r3, r3, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d01e      	beq.n	800dcfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d017      	beq.n	800dcfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dccc:	78fb      	ldrb	r3, [r7, #3]
 800dcce:	f003 0301 	and.w	r3, r3, #1
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d013      	beq.n	800dcfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d00e      	beq.n	800dcfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d007      	beq.n	800dcfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f008 fd49 	bl	801678c <etharp_request>
 800dcfa:	e000      	b.n	800dcfe <netif_issue_reports+0x6e>
    return;
 800dcfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0801a9b4 	.word	0x0801a9b4
 800dd08:	0801ab58 	.word	0x0801ab58
 800dd0c:	0801aa04 	.word	0x0801aa04

0800dd10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d107      	bne.n	800dd2e <netif_set_down+0x1e>
 800dd1e:	4b12      	ldr	r3, [pc, #72]	@ (800dd68 <netif_set_down+0x58>)
 800dd20:	f240 329b 	movw	r2, #923	@ 0x39b
 800dd24:	4911      	ldr	r1, [pc, #68]	@ (800dd6c <netif_set_down+0x5c>)
 800dd26:	4812      	ldr	r0, [pc, #72]	@ (800dd70 <netif_set_down+0x60>)
 800dd28:	f00a fb9e 	bl	8018468 <iprintf>
 800dd2c:	e019      	b.n	800dd62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d012      	beq.n	800dd62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd42:	f023 0301 	bic.w	r3, r3, #1
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd54:	f003 0308 	and.w	r3, r3, #8
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f008 f8d3 	bl	8015f08 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	0801a9b4 	.word	0x0801a9b4
 800dd6c:	0801ab7c 	.word	0x0801ab7c
 800dd70:	0801aa04 	.word	0x0801aa04

0800dd74 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d107      	bne.n	800dd92 <netif_set_link_up+0x1e>
 800dd82:	4b13      	ldr	r3, [pc, #76]	@ (800ddd0 <netif_set_link_up+0x5c>)
 800dd84:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800dd88:	4912      	ldr	r1, [pc, #72]	@ (800ddd4 <netif_set_link_up+0x60>)
 800dd8a:	4813      	ldr	r0, [pc, #76]	@ (800ddd8 <netif_set_link_up+0x64>)
 800dd8c:	f00a fb6c 	bl	8018468 <iprintf>
 800dd90:	e01b      	b.n	800ddca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd98:	f003 0304 	and.w	r3, r3, #4
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d114      	bne.n	800ddca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dda6:	f043 0304 	orr.w	r3, r3, #4
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ddb2:	2103      	movs	r1, #3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff ff6b 	bl	800dc90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d003      	beq.n	800ddca <netif_set_link_up+0x56>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	69db      	ldr	r3, [r3, #28]
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	0801a9b4 	.word	0x0801a9b4
 800ddd4:	0801ab9c 	.word	0x0801ab9c
 800ddd8:	0801aa04 	.word	0x0801aa04

0800dddc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d107      	bne.n	800ddfa <netif_set_link_down+0x1e>
 800ddea:	4b11      	ldr	r3, [pc, #68]	@ (800de30 <netif_set_link_down+0x54>)
 800ddec:	f240 4206 	movw	r2, #1030	@ 0x406
 800ddf0:	4910      	ldr	r1, [pc, #64]	@ (800de34 <netif_set_link_down+0x58>)
 800ddf2:	4811      	ldr	r0, [pc, #68]	@ (800de38 <netif_set_link_down+0x5c>)
 800ddf4:	f00a fb38 	bl	8018468 <iprintf>
 800ddf8:	e017      	b.n	800de2a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de00:	f003 0304 	and.w	r3, r3, #4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d010      	beq.n	800de2a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de0e:	f023 0304 	bic.w	r3, r3, #4
 800de12:	b2da      	uxtb	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	69db      	ldr	r3, [r3, #28]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d003      	beq.n	800de2a <netif_set_link_down+0x4e>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	0801a9b4 	.word	0x0801a9b4
 800de34:	0801abc0 	.word	0x0801abc0
 800de38:	0801aa04 	.word	0x0801aa04

0800de3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	61da      	str	r2, [r3, #28]
  }
}
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr

0800de5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800de5e:	b480      	push	{r7}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800de6a:	f06f 030b 	mvn.w	r3, #11
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr
	...

0800de7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	4603      	mov	r3, r0
 800de84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800de86:	79fb      	ldrb	r3, [r7, #7]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d013      	beq.n	800deb4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800de8c:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <netif_get_by_index+0x48>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60fb      	str	r3, [r7, #12]
 800de92:	e00c      	b.n	800deae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de9a:	3301      	adds	r3, #1
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	79fa      	ldrb	r2, [r7, #7]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d101      	bne.n	800dea8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	e006      	b.n	800deb6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1ef      	bne.n	800de94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3714      	adds	r7, #20
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	2000f104 	.word	0x2000f104

0800dec8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800dece:	f00a f9ad 	bl	801822c <sys_arch_protect>
 800ded2:	6038      	str	r0, [r7, #0]
 800ded4:	4b0d      	ldr	r3, [pc, #52]	@ (800df0c <pbuf_free_ooseq+0x44>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	6838      	ldr	r0, [r7, #0]
 800dedc:	f00a f9b4 	bl	8018248 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dee0:	4b0b      	ldr	r3, [pc, #44]	@ (800df10 <pbuf_free_ooseq+0x48>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	607b      	str	r3, [r7, #4]
 800dee6:	e00a      	b.n	800defe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deec:	2b00      	cmp	r3, #0
 800deee:	d003      	beq.n	800def8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f002 fc85 	bl	8010800 <tcp_free_ooseq>
      return;
 800def6:	e005      	b.n	800df04 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	607b      	str	r3, [r7, #4]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f1      	bne.n	800dee8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	2000f10d 	.word	0x2000f10d
 800df10:	2000f11c 	.word	0x2000f11c

0800df14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800df1c:	f7ff ffd4 	bl	800dec8 <pbuf_free_ooseq>
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800df2e:	f00a f97d 	bl	801822c <sys_arch_protect>
 800df32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800df34:	4b0f      	ldr	r3, [pc, #60]	@ (800df74 <pbuf_pool_is_empty+0x4c>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800df3a:	4b0e      	ldr	r3, [pc, #56]	@ (800df74 <pbuf_pool_is_empty+0x4c>)
 800df3c:	2201      	movs	r2, #1
 800df3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f00a f981 	bl	8018248 <sys_arch_unprotect>

  if (!queued) {
 800df46:	78fb      	ldrb	r3, [r7, #3]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d10f      	bne.n	800df6c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800df4c:	2100      	movs	r1, #0
 800df4e:	480a      	ldr	r0, [pc, #40]	@ (800df78 <pbuf_pool_is_empty+0x50>)
 800df50:	f7fe f840 	bl	800bfd4 <tcpip_try_callback>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d008      	beq.n	800df6c <pbuf_pool_is_empty+0x44>
 800df5a:	f00a f967 	bl	801822c <sys_arch_protect>
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	4b04      	ldr	r3, [pc, #16]	@ (800df74 <pbuf_pool_is_empty+0x4c>)
 800df62:	2200      	movs	r2, #0
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f00a f96e 	bl	8018248 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}
 800df74:	2000f10d 	.word	0x2000f10d
 800df78:	0800df15 	.word	0x0800df15

0800df7c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	4611      	mov	r1, r2
 800df88:	461a      	mov	r2, r3
 800df8a:	460b      	mov	r3, r1
 800df8c:	80fb      	strh	r3, [r7, #6]
 800df8e:	4613      	mov	r3, r2
 800df90:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	88fa      	ldrh	r2, [r7, #6]
 800dfa2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	88ba      	ldrh	r2, [r7, #4]
 800dfa8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dfaa:	8b3b      	ldrh	r3, [r7, #24]
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	7f3a      	ldrb	r2, [r7, #28]
 800dfb6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	73da      	strb	r2, [r3, #15]
}
 800dfc4:	bf00      	nop
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08c      	sub	sp, #48	@ 0x30
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	80bb      	strh	r3, [r7, #4]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dfe6:	887b      	ldrh	r3, [r7, #2]
 800dfe8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dfec:	d07f      	beq.n	800e0ee <pbuf_alloc+0x11e>
 800dfee:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800dff2:	f300 80c8 	bgt.w	800e186 <pbuf_alloc+0x1b6>
 800dff6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800dffa:	d010      	beq.n	800e01e <pbuf_alloc+0x4e>
 800dffc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800e000:	f300 80c1 	bgt.w	800e186 <pbuf_alloc+0x1b6>
 800e004:	2b01      	cmp	r3, #1
 800e006:	d002      	beq.n	800e00e <pbuf_alloc+0x3e>
 800e008:	2b41      	cmp	r3, #65	@ 0x41
 800e00a:	f040 80bc 	bne.w	800e186 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e00e:	887a      	ldrh	r2, [r7, #2]
 800e010:	88bb      	ldrh	r3, [r7, #4]
 800e012:	4619      	mov	r1, r3
 800e014:	2000      	movs	r0, #0
 800e016:	f000 f8d1 	bl	800e1bc <pbuf_alloc_reference>
 800e01a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800e01c:	e0bd      	b.n	800e19a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800e022:	2300      	movs	r3, #0
 800e024:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e026:	88bb      	ldrh	r3, [r7, #4]
 800e028:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e02a:	200c      	movs	r0, #12
 800e02c:	f7ff fb9a 	bl	800d764 <memp_malloc>
 800e030:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d109      	bne.n	800e04c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e038:	f7ff ff76 	bl	800df28 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d002      	beq.n	800e048 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e044:	f000 faa8 	bl	800e598 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e048:	2300      	movs	r3, #0
 800e04a:	e0a7      	b.n	800e19c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e04c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e04e:	3303      	adds	r3, #3
 800e050:	b29b      	uxth	r3, r3
 800e052:	f023 0303 	bic.w	r3, r3, #3
 800e056:	b29b      	uxth	r3, r3
 800e058:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	8b7a      	ldrh	r2, [r7, #26]
 800e060:	4293      	cmp	r3, r2
 800e062:	bf28      	it	cs
 800e064:	4613      	movcs	r3, r2
 800e066:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e06a:	3310      	adds	r3, #16
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4413      	add	r3, r2
 800e070:	3303      	adds	r3, #3
 800e072:	f023 0303 	bic.w	r3, r3, #3
 800e076:	4618      	mov	r0, r3
 800e078:	89f9      	ldrh	r1, [r7, #14]
 800e07a:	8b7a      	ldrh	r2, [r7, #26]
 800e07c:	2300      	movs	r3, #0
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	887b      	ldrh	r3, [r7, #2]
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	460b      	mov	r3, r1
 800e086:	4601      	mov	r1, r0
 800e088:	6938      	ldr	r0, [r7, #16]
 800e08a:	f7ff ff77 	bl	800df7c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	f003 0303 	and.w	r3, r3, #3
 800e096:	2b00      	cmp	r3, #0
 800e098:	d006      	beq.n	800e0a8 <pbuf_alloc+0xd8>
 800e09a:	4b42      	ldr	r3, [pc, #264]	@ (800e1a4 <pbuf_alloc+0x1d4>)
 800e09c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e0a0:	4941      	ldr	r1, [pc, #260]	@ (800e1a8 <pbuf_alloc+0x1d8>)
 800e0a2:	4842      	ldr	r0, [pc, #264]	@ (800e1ac <pbuf_alloc+0x1dc>)
 800e0a4:	f00a f9e0 	bl	8018468 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e0a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0aa:	3303      	adds	r3, #3
 800e0ac:	f023 0303 	bic.w	r3, r3, #3
 800e0b0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800e0b4:	d106      	bne.n	800e0c4 <pbuf_alloc+0xf4>
 800e0b6:	4b3b      	ldr	r3, [pc, #236]	@ (800e1a4 <pbuf_alloc+0x1d4>)
 800e0b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e0bc:	493c      	ldr	r1, [pc, #240]	@ (800e1b0 <pbuf_alloc+0x1e0>)
 800e0be:	483b      	ldr	r0, [pc, #236]	@ (800e1ac <pbuf_alloc+0x1dc>)
 800e0c0:	f00a f9d2 	bl	8018468 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d102      	bne.n	800e0d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0ce:	e002      	b.n	800e0d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	693a      	ldr	r2, [r7, #16]
 800e0d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e0da:	8b7a      	ldrh	r2, [r7, #26]
 800e0dc:	89fb      	ldrh	r3, [r7, #14]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e0e6:	8b7b      	ldrh	r3, [r7, #26]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d19e      	bne.n	800e02a <pbuf_alloc+0x5a>
      break;
 800e0ec:	e055      	b.n	800e19a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e0ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0f0:	3303      	adds	r3, #3
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	f023 0303 	bic.w	r3, r3, #3
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	88bb      	ldrh	r3, [r7, #4]
 800e0fc:	3303      	adds	r3, #3
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	f023 0303 	bic.w	r3, r3, #3
 800e104:	b29b      	uxth	r3, r3
 800e106:	4413      	add	r3, r2
 800e108:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e10a:	8b3b      	ldrh	r3, [r7, #24]
 800e10c:	3310      	adds	r3, #16
 800e10e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e110:	8b3a      	ldrh	r2, [r7, #24]
 800e112:	88bb      	ldrh	r3, [r7, #4]
 800e114:	3303      	adds	r3, #3
 800e116:	f023 0303 	bic.w	r3, r3, #3
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d306      	bcc.n	800e12c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e11e:	8afa      	ldrh	r2, [r7, #22]
 800e120:	88bb      	ldrh	r3, [r7, #4]
 800e122:	3303      	adds	r3, #3
 800e124:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e128:	429a      	cmp	r2, r3
 800e12a:	d201      	bcs.n	800e130 <pbuf_alloc+0x160>
        return NULL;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e035      	b.n	800e19c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e130:	8afb      	ldrh	r3, [r7, #22]
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff f972 	bl	800d41c <mem_malloc>
 800e138:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d101      	bne.n	800e144 <pbuf_alloc+0x174>
        return NULL;
 800e140:	2300      	movs	r3, #0
 800e142:	e02b      	b.n	800e19c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e144:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e146:	3310      	adds	r3, #16
 800e148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e14a:	4413      	add	r3, r2
 800e14c:	3303      	adds	r3, #3
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	4618      	mov	r0, r3
 800e154:	88b9      	ldrh	r1, [r7, #4]
 800e156:	88ba      	ldrh	r2, [r7, #4]
 800e158:	2300      	movs	r3, #0
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	887b      	ldrh	r3, [r7, #2]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	460b      	mov	r3, r1
 800e162:	4601      	mov	r1, r0
 800e164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e166:	f7ff ff09 	bl	800df7c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	f003 0303 	and.w	r3, r3, #3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d010      	beq.n	800e198 <pbuf_alloc+0x1c8>
 800e176:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a4 <pbuf_alloc+0x1d4>)
 800e178:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e17c:	490d      	ldr	r1, [pc, #52]	@ (800e1b4 <pbuf_alloc+0x1e4>)
 800e17e:	480b      	ldr	r0, [pc, #44]	@ (800e1ac <pbuf_alloc+0x1dc>)
 800e180:	f00a f972 	bl	8018468 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e184:	e008      	b.n	800e198 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e186:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <pbuf_alloc+0x1d4>)
 800e188:	f240 1227 	movw	r2, #295	@ 0x127
 800e18c:	490a      	ldr	r1, [pc, #40]	@ (800e1b8 <pbuf_alloc+0x1e8>)
 800e18e:	4807      	ldr	r0, [pc, #28]	@ (800e1ac <pbuf_alloc+0x1dc>)
 800e190:	f00a f96a 	bl	8018468 <iprintf>
      return NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	e001      	b.n	800e19c <pbuf_alloc+0x1cc>
      break;
 800e198:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3728      	adds	r7, #40	@ 0x28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	0801abe4 	.word	0x0801abe4
 800e1a8:	0801ac14 	.word	0x0801ac14
 800e1ac:	0801ac44 	.word	0x0801ac44
 800e1b0:	0801ac6c 	.word	0x0801ac6c
 800e1b4:	0801aca0 	.word	0x0801aca0
 800e1b8:	0801accc 	.word	0x0801accc

0800e1bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	807b      	strh	r3, [r7, #2]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e1cc:	883b      	ldrh	r3, [r7, #0]
 800e1ce:	2b41      	cmp	r3, #65	@ 0x41
 800e1d0:	d009      	beq.n	800e1e6 <pbuf_alloc_reference+0x2a>
 800e1d2:	883b      	ldrh	r3, [r7, #0]
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d006      	beq.n	800e1e6 <pbuf_alloc_reference+0x2a>
 800e1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e218 <pbuf_alloc_reference+0x5c>)
 800e1da:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e1de:	490f      	ldr	r1, [pc, #60]	@ (800e21c <pbuf_alloc_reference+0x60>)
 800e1e0:	480f      	ldr	r0, [pc, #60]	@ (800e220 <pbuf_alloc_reference+0x64>)
 800e1e2:	f00a f941 	bl	8018468 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e1e6:	200b      	movs	r0, #11
 800e1e8:	f7ff fabc 	bl	800d764 <memp_malloc>
 800e1ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e00b      	b.n	800e210 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e1f8:	8879      	ldrh	r1, [r7, #2]
 800e1fa:	887a      	ldrh	r2, [r7, #2]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	883b      	ldrh	r3, [r7, #0]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	460b      	mov	r3, r1
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7ff feb7 	bl	800df7c <pbuf_init_alloced_pbuf>
  return p;
 800e20e:	68fb      	ldr	r3, [r7, #12]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	0801abe4 	.word	0x0801abe4
 800e21c:	0801ace8 	.word	0x0801ace8
 800e220:	0801ac44 	.word	0x0801ac44

0800e224 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af02      	add	r7, sp, #8
 800e22a:	607b      	str	r3, [r7, #4]
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]
 800e230:	460b      	mov	r3, r1
 800e232:	81bb      	strh	r3, [r7, #12]
 800e234:	4613      	mov	r3, r2
 800e236:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e23c:	8a7b      	ldrh	r3, [r7, #18]
 800e23e:	3303      	adds	r3, #3
 800e240:	f023 0203 	bic.w	r2, r3, #3
 800e244:	89bb      	ldrh	r3, [r7, #12]
 800e246:	441a      	add	r2, r3
 800e248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d901      	bls.n	800e252 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	e018      	b.n	800e284 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d007      	beq.n	800e268 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e258:	8a7b      	ldrh	r3, [r7, #18]
 800e25a:	3303      	adds	r3, #3
 800e25c:	f023 0303 	bic.w	r3, r3, #3
 800e260:	6a3a      	ldr	r2, [r7, #32]
 800e262:	4413      	add	r3, r2
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e001      	b.n	800e26c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	89b9      	ldrh	r1, [r7, #12]
 800e270:	89ba      	ldrh	r2, [r7, #12]
 800e272:	2302      	movs	r3, #2
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	897b      	ldrh	r3, [r7, #10]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	460b      	mov	r3, r1
 800e27c:	6979      	ldr	r1, [r7, #20]
 800e27e:	f7ff fe7d 	bl	800df7c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e282:	687b      	ldr	r3, [r7, #4]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <pbuf_realloc+0x20>
 800e29e:	4b3a      	ldr	r3, [pc, #232]	@ (800e388 <pbuf_realloc+0xfc>)
 800e2a0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e2a4:	4939      	ldr	r1, [pc, #228]	@ (800e38c <pbuf_realloc+0x100>)
 800e2a6:	483a      	ldr	r0, [pc, #232]	@ (800e390 <pbuf_realloc+0x104>)
 800e2a8:	f00a f8de 	bl	8018468 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	891b      	ldrh	r3, [r3, #8]
 800e2b0:	887a      	ldrh	r2, [r7, #2]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d263      	bcs.n	800e37e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	891a      	ldrh	r2, [r3, #8]
 800e2ba:	887b      	ldrh	r3, [r7, #2]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e2c0:	887b      	ldrh	r3, [r7, #2]
 800e2c2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e2c8:	e018      	b.n	800e2fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	895b      	ldrh	r3, [r3, #10]
 800e2ce:	897a      	ldrh	r2, [r7, #10]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	891a      	ldrh	r2, [r3, #8]
 800e2d8:	893b      	ldrh	r3, [r7, #8]
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d106      	bne.n	800e2fc <pbuf_realloc+0x70>
 800e2ee:	4b26      	ldr	r3, [pc, #152]	@ (800e388 <pbuf_realloc+0xfc>)
 800e2f0:	f240 12af 	movw	r2, #431	@ 0x1af
 800e2f4:	4927      	ldr	r1, [pc, #156]	@ (800e394 <pbuf_realloc+0x108>)
 800e2f6:	4826      	ldr	r0, [pc, #152]	@ (800e390 <pbuf_realloc+0x104>)
 800e2f8:	f00a f8b6 	bl	8018468 <iprintf>
  while (rem_len > q->len) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	895b      	ldrh	r3, [r3, #10]
 800e300:	897a      	ldrh	r2, [r7, #10]
 800e302:	429a      	cmp	r2, r3
 800e304:	d8e1      	bhi.n	800e2ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7b1b      	ldrb	r3, [r3, #12]
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d121      	bne.n	800e356 <pbuf_realloc+0xca>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	895b      	ldrh	r3, [r3, #10]
 800e316:	897a      	ldrh	r2, [r7, #10]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d01c      	beq.n	800e356 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	7b5b      	ldrb	r3, [r3, #13]
 800e320:	f003 0302 	and.w	r3, r3, #2
 800e324:	2b00      	cmp	r3, #0
 800e326:	d116      	bne.n	800e356 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	b29a      	uxth	r2, r3
 800e332:	897b      	ldrh	r3, [r7, #10]
 800e334:	4413      	add	r3, r2
 800e336:	b29b      	uxth	r3, r3
 800e338:	4619      	mov	r1, r3
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7fe ff64 	bl	800d208 <mem_trim>
 800e340:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d106      	bne.n	800e356 <pbuf_realloc+0xca>
 800e348:	4b0f      	ldr	r3, [pc, #60]	@ (800e388 <pbuf_realloc+0xfc>)
 800e34a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e34e:	4912      	ldr	r1, [pc, #72]	@ (800e398 <pbuf_realloc+0x10c>)
 800e350:	480f      	ldr	r0, [pc, #60]	@ (800e390 <pbuf_realloc+0x104>)
 800e352:	f00a f889 	bl	8018468 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	897a      	ldrh	r2, [r7, #10]
 800e35a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	895a      	ldrh	r2, [r3, #10]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d004      	beq.n	800e376 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4618      	mov	r0, r3
 800e372:	f000 f911 	bl	800e598 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]
 800e37c:	e000      	b.n	800e380 <pbuf_realloc+0xf4>
    return;
 800e37e:	bf00      	nop

}
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	0801abe4 	.word	0x0801abe4
 800e38c:	0801acfc 	.word	0x0801acfc
 800e390:	0801ac44 	.word	0x0801ac44
 800e394:	0801ad14 	.word	0x0801ad14
 800e398:	0801ad2c 	.word	0x0801ad2c

0800e39c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d106      	bne.n	800e3be <pbuf_add_header_impl+0x22>
 800e3b0:	4b2b      	ldr	r3, [pc, #172]	@ (800e460 <pbuf_add_header_impl+0xc4>)
 800e3b2:	f240 12df 	movw	r2, #479	@ 0x1df
 800e3b6:	492b      	ldr	r1, [pc, #172]	@ (800e464 <pbuf_add_header_impl+0xc8>)
 800e3b8:	482b      	ldr	r0, [pc, #172]	@ (800e468 <pbuf_add_header_impl+0xcc>)
 800e3ba:	f00a f855 	bl	8018468 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <pbuf_add_header_impl+0x30>
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3ca:	d301      	bcc.n	800e3d0 <pbuf_add_header_impl+0x34>
    return 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e043      	b.n	800e458 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <pbuf_add_header_impl+0x3e>
    return 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e03e      	b.n	800e458 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	891a      	ldrh	r2, [r3, #8]
 800e3e2:	8a7b      	ldrh	r3, [r7, #18]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	8a7a      	ldrh	r2, [r7, #18]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d901      	bls.n	800e3f2 <pbuf_add_header_impl+0x56>
    return 1;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e032      	b.n	800e458 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	7b1b      	ldrb	r3, [r3, #12]
 800e3f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e3f8:	8a3b      	ldrh	r3, [r7, #16]
 800e3fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00c      	beq.n	800e41c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	685a      	ldr	r2, [r3, #4]
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	425b      	negs	r3, r3
 800e40a:	4413      	add	r3, r2
 800e40c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	3310      	adds	r3, #16
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	429a      	cmp	r2, r3
 800e416:	d20d      	bcs.n	800e434 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e418:	2301      	movs	r3, #1
 800e41a:	e01d      	b.n	800e458 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e41c:	79fb      	ldrb	r3, [r7, #7]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d006      	beq.n	800e430 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	425b      	negs	r3, r3
 800e42a:	4413      	add	r3, r2
 800e42c:	617b      	str	r3, [r7, #20]
 800e42e:	e001      	b.n	800e434 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e430:	2301      	movs	r3, #1
 800e432:	e011      	b.n	800e458 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	895a      	ldrh	r2, [r3, #10]
 800e43e:	8a7b      	ldrh	r3, [r7, #18]
 800e440:	4413      	add	r3, r2
 800e442:	b29a      	uxth	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	891a      	ldrh	r2, [r3, #8]
 800e44c:	8a7b      	ldrh	r3, [r7, #18]
 800e44e:	4413      	add	r3, r2
 800e450:	b29a      	uxth	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	811a      	strh	r2, [r3, #8]


  return 0;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	0801abe4 	.word	0x0801abe4
 800e464:	0801ad48 	.word	0x0801ad48
 800e468:	0801ac44 	.word	0x0801ac44

0800e46c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e476:	2200      	movs	r2, #0
 800e478:	6839      	ldr	r1, [r7, #0]
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff ff8e 	bl	800e39c <pbuf_add_header_impl>
 800e480:	4603      	mov	r3, r0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d106      	bne.n	800e4aa <pbuf_remove_header+0x1e>
 800e49c:	4b20      	ldr	r3, [pc, #128]	@ (800e520 <pbuf_remove_header+0x94>)
 800e49e:	f240 224b 	movw	r2, #587	@ 0x24b
 800e4a2:	4920      	ldr	r1, [pc, #128]	@ (800e524 <pbuf_remove_header+0x98>)
 800e4a4:	4820      	ldr	r0, [pc, #128]	@ (800e528 <pbuf_remove_header+0x9c>)
 800e4a6:	f009 ffdf 	bl	8018468 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d003      	beq.n	800e4b8 <pbuf_remove_header+0x2c>
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4b6:	d301      	bcc.n	800e4bc <pbuf_remove_header+0x30>
    return 1;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e02c      	b.n	800e516 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <pbuf_remove_header+0x3a>
    return 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e027      	b.n	800e516 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	895b      	ldrh	r3, [r3, #10]
 800e4ce:	89fa      	ldrh	r2, [r7, #14]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d908      	bls.n	800e4e6 <pbuf_remove_header+0x5a>
 800e4d4:	4b12      	ldr	r3, [pc, #72]	@ (800e520 <pbuf_remove_header+0x94>)
 800e4d6:	f240 2255 	movw	r2, #597	@ 0x255
 800e4da:	4914      	ldr	r1, [pc, #80]	@ (800e52c <pbuf_remove_header+0xa0>)
 800e4dc:	4812      	ldr	r0, [pc, #72]	@ (800e528 <pbuf_remove_header+0x9c>)
 800e4de:	f009 ffc3 	bl	8018468 <iprintf>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e017      	b.n	800e516 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	685a      	ldr	r2, [r3, #4]
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	441a      	add	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	895a      	ldrh	r2, [r3, #10]
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	b29a      	uxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	891a      	ldrh	r2, [r3, #8]
 800e50a:	89fb      	ldrh	r3, [r7, #14]
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	b29a      	uxth	r2, r3
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	0801abe4 	.word	0x0801abe4
 800e524:	0801ad48 	.word	0x0801ad48
 800e528:	0801ac44 	.word	0x0801ac44
 800e52c:	0801ad54 	.word	0x0801ad54

0800e530 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	807b      	strh	r3, [r7, #2]
 800e53c:	4613      	mov	r3, r2
 800e53e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e544:	2b00      	cmp	r3, #0
 800e546:	da08      	bge.n	800e55a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e54c:	425b      	negs	r3, r3
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ff9b 	bl	800e48c <pbuf_remove_header>
 800e556:	4603      	mov	r3, r0
 800e558:	e007      	b.n	800e56a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e55a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e55e:	787a      	ldrb	r2, [r7, #1]
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ff1a 	bl	800e39c <pbuf_add_header_impl>
 800e568:	4603      	mov	r3, r0
  }
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b082      	sub	sp, #8
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	460b      	mov	r3, r1
 800e57c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e57e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e582:	2201      	movs	r2, #1
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff ffd2 	bl	800e530 <pbuf_header_impl>
 800e58c:	4603      	mov	r3, r0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
	...

0800e598 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b088      	sub	sp, #32
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d10b      	bne.n	800e5be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <pbuf_free+0x22>
 800e5ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e69c <pbuf_free+0x104>)
 800e5ae:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e5b2:	493b      	ldr	r1, [pc, #236]	@ (800e6a0 <pbuf_free+0x108>)
 800e5b4:	483b      	ldr	r0, [pc, #236]	@ (800e6a4 <pbuf_free+0x10c>)
 800e5b6:	f009 ff57 	bl	8018468 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	e069      	b.n	800e692 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e5c2:	e062      	b.n	800e68a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e5c4:	f009 fe32 	bl	801822c <sys_arch_protect>
 800e5c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	7b9b      	ldrb	r3, [r3, #14]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <pbuf_free+0x48>
 800e5d2:	4b32      	ldr	r3, [pc, #200]	@ (800e69c <pbuf_free+0x104>)
 800e5d4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e5d8:	4933      	ldr	r1, [pc, #204]	@ (800e6a8 <pbuf_free+0x110>)
 800e5da:	4832      	ldr	r0, [pc, #200]	@ (800e6a4 <pbuf_free+0x10c>)
 800e5dc:	f009 ff44 	bl	8018468 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	7b9b      	ldrb	r3, [r3, #14]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	b2da      	uxtb	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	739a      	strb	r2, [r3, #14]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7b9b      	ldrb	r3, [r3, #14]
 800e5f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e5f2:	69b8      	ldr	r0, [r7, #24]
 800e5f4:	f009 fe28 	bl	8018248 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d143      	bne.n	800e686 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7b1b      	ldrb	r3, [r3, #12]
 800e608:	f003 030f 	and.w	r3, r3, #15
 800e60c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7b5b      	ldrb	r3, [r3, #13]
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	2b00      	cmp	r3, #0
 800e618:	d011      	beq.n	800e63e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <pbuf_free+0x9c>
 800e626:	4b1d      	ldr	r3, [pc, #116]	@ (800e69c <pbuf_free+0x104>)
 800e628:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e62c:	491f      	ldr	r1, [pc, #124]	@ (800e6ac <pbuf_free+0x114>)
 800e62e:	481d      	ldr	r0, [pc, #116]	@ (800e6a4 <pbuf_free+0x10c>)
 800e630:	f009 ff1a 	bl	8018468 <iprintf>
        pc->custom_free_function(p);
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	4798      	blx	r3
 800e63c:	e01d      	b.n	800e67a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d104      	bne.n	800e64e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e644:	6879      	ldr	r1, [r7, #4]
 800e646:	200c      	movs	r0, #12
 800e648:	f7ff f902 	bl	800d850 <memp_free>
 800e64c:	e015      	b.n	800e67a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d104      	bne.n	800e65e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	200b      	movs	r0, #11
 800e658:	f7ff f8fa 	bl	800d850 <memp_free>
 800e65c:	e00d      	b.n	800e67a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e65e:	7bfb      	ldrb	r3, [r7, #15]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d103      	bne.n	800e66c <pbuf_free+0xd4>
          mem_free(p);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7fe fd3f 	bl	800d0e8 <mem_free>
 800e66a:	e006      	b.n	800e67a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e66c:	4b0b      	ldr	r3, [pc, #44]	@ (800e69c <pbuf_free+0x104>)
 800e66e:	f240 320f 	movw	r2, #783	@ 0x30f
 800e672:	490f      	ldr	r1, [pc, #60]	@ (800e6b0 <pbuf_free+0x118>)
 800e674:	480b      	ldr	r0, [pc, #44]	@ (800e6a4 <pbuf_free+0x10c>)
 800e676:	f009 fef7 	bl	8018468 <iprintf>
        }
      }
      count++;
 800e67a:	7ffb      	ldrb	r3, [r7, #31]
 800e67c:	3301      	adds	r3, #1
 800e67e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	607b      	str	r3, [r7, #4]
 800e684:	e001      	b.n	800e68a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e686:	2300      	movs	r3, #0
 800e688:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d199      	bne.n	800e5c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e690:	7ffb      	ldrb	r3, [r7, #31]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3720      	adds	r7, #32
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	0801abe4 	.word	0x0801abe4
 800e6a0:	0801ad48 	.word	0x0801ad48
 800e6a4:	0801ac44 	.word	0x0801ac44
 800e6a8:	0801ad74 	.word	0x0801ad74
 800e6ac:	0801ad8c 	.word	0x0801ad8c
 800e6b0:	0801adb0 	.word	0x0801adb0

0800e6b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e6c0:	e005      	b.n	800e6ce <pbuf_clen+0x1a>
    ++len;
 800e6c2:	89fb      	ldrh	r3, [r7, #14]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f6      	bne.n	800e6c2 <pbuf_clen+0xe>
  }
  return len;
 800e6d4:	89fb      	ldrh	r3, [r7, #14]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3714      	adds	r7, #20
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d016      	beq.n	800e720 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e6f2:	f009 fd9b 	bl	801822c <sys_arch_protect>
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	7b9b      	ldrb	r3, [r3, #14]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	b2da      	uxtb	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	739a      	strb	r2, [r3, #14]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f009 fd9f 	bl	8018248 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	7b9b      	ldrb	r3, [r3, #14]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d106      	bne.n	800e720 <pbuf_ref+0x3c>
 800e712:	4b05      	ldr	r3, [pc, #20]	@ (800e728 <pbuf_ref+0x44>)
 800e714:	f240 3242 	movw	r2, #834	@ 0x342
 800e718:	4904      	ldr	r1, [pc, #16]	@ (800e72c <pbuf_ref+0x48>)
 800e71a:	4805      	ldr	r0, [pc, #20]	@ (800e730 <pbuf_ref+0x4c>)
 800e71c:	f009 fea4 	bl	8018468 <iprintf>
  }
}
 800e720:	bf00      	nop
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	0801abe4 	.word	0x0801abe4
 800e72c:	0801adc4 	.word	0x0801adc4
 800e730:	0801ac44 	.word	0x0801ac44

0800e734 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d002      	beq.n	800e74a <pbuf_cat+0x16>
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d107      	bne.n	800e75a <pbuf_cat+0x26>
 800e74a:	4b20      	ldr	r3, [pc, #128]	@ (800e7cc <pbuf_cat+0x98>)
 800e74c:	f240 3259 	movw	r2, #857	@ 0x359
 800e750:	491f      	ldr	r1, [pc, #124]	@ (800e7d0 <pbuf_cat+0x9c>)
 800e752:	4820      	ldr	r0, [pc, #128]	@ (800e7d4 <pbuf_cat+0xa0>)
 800e754:	f009 fe88 	bl	8018468 <iprintf>
 800e758:	e034      	b.n	800e7c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60fb      	str	r3, [r7, #12]
 800e75e:	e00a      	b.n	800e776 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	891a      	ldrh	r2, [r3, #8]
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	891b      	ldrh	r3, [r3, #8]
 800e768:	4413      	add	r3, r2
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1f0      	bne.n	800e760 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	891a      	ldrh	r2, [r3, #8]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	895b      	ldrh	r3, [r3, #10]
 800e786:	429a      	cmp	r2, r3
 800e788:	d006      	beq.n	800e798 <pbuf_cat+0x64>
 800e78a:	4b10      	ldr	r3, [pc, #64]	@ (800e7cc <pbuf_cat+0x98>)
 800e78c:	f240 3262 	movw	r2, #866	@ 0x362
 800e790:	4911      	ldr	r1, [pc, #68]	@ (800e7d8 <pbuf_cat+0xa4>)
 800e792:	4810      	ldr	r0, [pc, #64]	@ (800e7d4 <pbuf_cat+0xa0>)
 800e794:	f009 fe68 	bl	8018468 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d006      	beq.n	800e7ae <pbuf_cat+0x7a>
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e7cc <pbuf_cat+0x98>)
 800e7a2:	f240 3263 	movw	r2, #867	@ 0x363
 800e7a6:	490d      	ldr	r1, [pc, #52]	@ (800e7dc <pbuf_cat+0xa8>)
 800e7a8:	480a      	ldr	r0, [pc, #40]	@ (800e7d4 <pbuf_cat+0xa0>)
 800e7aa:	f009 fe5d 	bl	8018468 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	891a      	ldrh	r2, [r3, #8]
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	891b      	ldrh	r3, [r3, #8]
 800e7b6:	4413      	add	r3, r2
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	683a      	ldr	r2, [r7, #0]
 800e7c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	0801abe4 	.word	0x0801abe4
 800e7d0:	0801add8 	.word	0x0801add8
 800e7d4:	0801ac44 	.word	0x0801ac44
 800e7d8:	0801ae10 	.word	0x0801ae10
 800e7dc:	0801ae40 	.word	0x0801ae40

0800e7e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7ff ffa1 	bl	800e734 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e7f2:	6838      	ldr	r0, [r7, #0]
 800e7f4:	f7ff ff76 	bl	800e6e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e7f8:	bf00      	nop
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e80a:	2300      	movs	r3, #0
 800e80c:	617b      	str	r3, [r7, #20]
 800e80e:	2300      	movs	r3, #0
 800e810:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d008      	beq.n	800e82a <pbuf_copy+0x2a>
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d005      	beq.n	800e82a <pbuf_copy+0x2a>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	891a      	ldrh	r2, [r3, #8]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	891b      	ldrh	r3, [r3, #8]
 800e826:	429a      	cmp	r2, r3
 800e828:	d209      	bcs.n	800e83e <pbuf_copy+0x3e>
 800e82a:	4b57      	ldr	r3, [pc, #348]	@ (800e988 <pbuf_copy+0x188>)
 800e82c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e830:	4956      	ldr	r1, [pc, #344]	@ (800e98c <pbuf_copy+0x18c>)
 800e832:	4857      	ldr	r0, [pc, #348]	@ (800e990 <pbuf_copy+0x190>)
 800e834:	f009 fe18 	bl	8018468 <iprintf>
 800e838:	f06f 030f 	mvn.w	r3, #15
 800e83c:	e09f      	b.n	800e97e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	895b      	ldrh	r3, [r3, #10]
 800e842:	461a      	mov	r2, r3
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	1ad2      	subs	r2, r2, r3
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	895b      	ldrh	r3, [r3, #10]
 800e84c:	4619      	mov	r1, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	1acb      	subs	r3, r1, r3
 800e852:	429a      	cmp	r2, r3
 800e854:	d306      	bcc.n	800e864 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	895b      	ldrh	r3, [r3, #10]
 800e85a:	461a      	mov	r2, r3
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	60fb      	str	r3, [r7, #12]
 800e862:	e005      	b.n	800e870 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	895b      	ldrh	r3, [r3, #10]
 800e868:	461a      	mov	r2, r3
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	1ad3      	subs	r3, r2, r3
 800e86e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	18d0      	adds	r0, r2, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	685a      	ldr	r2, [r3, #4]
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	4413      	add	r3, r2
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	4619      	mov	r1, r3
 800e884:	f009 ff79 	bl	801877a <memcpy>
    offset_to += len;
 800e888:	697a      	ldr	r2, [r7, #20]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	4413      	add	r3, r2
 800e88e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	4413      	add	r3, r2
 800e896:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	895b      	ldrh	r3, [r3, #10]
 800e89c:	461a      	mov	r2, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d906      	bls.n	800e8b2 <pbuf_copy+0xb2>
 800e8a4:	4b38      	ldr	r3, [pc, #224]	@ (800e988 <pbuf_copy+0x188>)
 800e8a6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e8aa:	493a      	ldr	r1, [pc, #232]	@ (800e994 <pbuf_copy+0x194>)
 800e8ac:	4838      	ldr	r0, [pc, #224]	@ (800e990 <pbuf_copy+0x190>)
 800e8ae:	f009 fddb 	bl	8018468 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	895b      	ldrh	r3, [r3, #10]
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d906      	bls.n	800e8cc <pbuf_copy+0xcc>
 800e8be:	4b32      	ldr	r3, [pc, #200]	@ (800e988 <pbuf_copy+0x188>)
 800e8c0:	f240 32da 	movw	r2, #986	@ 0x3da
 800e8c4:	4934      	ldr	r1, [pc, #208]	@ (800e998 <pbuf_copy+0x198>)
 800e8c6:	4832      	ldr	r0, [pc, #200]	@ (800e990 <pbuf_copy+0x190>)
 800e8c8:	f009 fdce 	bl	8018468 <iprintf>
    if (offset_from >= p_from->len) {
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	895b      	ldrh	r3, [r3, #10]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d304      	bcc.n	800e8e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	895b      	ldrh	r3, [r3, #10]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d114      	bne.n	800e918 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10c      	bne.n	800e918 <pbuf_copy+0x118>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d009      	beq.n	800e918 <pbuf_copy+0x118>
 800e904:	4b20      	ldr	r3, [pc, #128]	@ (800e988 <pbuf_copy+0x188>)
 800e906:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e90a:	4924      	ldr	r1, [pc, #144]	@ (800e99c <pbuf_copy+0x19c>)
 800e90c:	4820      	ldr	r0, [pc, #128]	@ (800e990 <pbuf_copy+0x190>)
 800e90e:	f009 fdab 	bl	8018468 <iprintf>
 800e912:	f06f 030f 	mvn.w	r3, #15
 800e916:	e032      	b.n	800e97e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d013      	beq.n	800e946 <pbuf_copy+0x146>
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	895a      	ldrh	r2, [r3, #10]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	891b      	ldrh	r3, [r3, #8]
 800e926:	429a      	cmp	r2, r3
 800e928:	d10d      	bne.n	800e946 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d009      	beq.n	800e946 <pbuf_copy+0x146>
 800e932:	4b15      	ldr	r3, [pc, #84]	@ (800e988 <pbuf_copy+0x188>)
 800e934:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e938:	4919      	ldr	r1, [pc, #100]	@ (800e9a0 <pbuf_copy+0x1a0>)
 800e93a:	4815      	ldr	r0, [pc, #84]	@ (800e990 <pbuf_copy+0x190>)
 800e93c:	f009 fd94 	bl	8018468 <iprintf>
 800e940:	f06f 0305 	mvn.w	r3, #5
 800e944:	e01b      	b.n	800e97e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d013      	beq.n	800e974 <pbuf_copy+0x174>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	895a      	ldrh	r2, [r3, #10]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	891b      	ldrh	r3, [r3, #8]
 800e954:	429a      	cmp	r2, r3
 800e956:	d10d      	bne.n	800e974 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d009      	beq.n	800e974 <pbuf_copy+0x174>
 800e960:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <pbuf_copy+0x188>)
 800e962:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e966:	490e      	ldr	r1, [pc, #56]	@ (800e9a0 <pbuf_copy+0x1a0>)
 800e968:	4809      	ldr	r0, [pc, #36]	@ (800e990 <pbuf_copy+0x190>)
 800e96a:	f009 fd7d 	bl	8018468 <iprintf>
 800e96e:	f06f 0305 	mvn.w	r3, #5
 800e972:	e004      	b.n	800e97e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	f47f af61 	bne.w	800e83e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3718      	adds	r7, #24
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	0801abe4 	.word	0x0801abe4
 800e98c:	0801ae8c 	.word	0x0801ae8c
 800e990:	0801ac44 	.word	0x0801ac44
 800e994:	0801aebc 	.word	0x0801aebc
 800e998:	0801aed4 	.word	0x0801aed4
 800e99c:	0801aef0 	.word	0x0801aef0
 800e9a0:	0801af00 	.word	0x0801af00

0800e9a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	80fb      	strh	r3, [r7, #6]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d108      	bne.n	800e9da <pbuf_copy_partial+0x36>
 800e9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800ea78 <pbuf_copy_partial+0xd4>)
 800e9ca:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e9ce:	492b      	ldr	r1, [pc, #172]	@ (800ea7c <pbuf_copy_partial+0xd8>)
 800e9d0:	482b      	ldr	r0, [pc, #172]	@ (800ea80 <pbuf_copy_partial+0xdc>)
 800e9d2:	f009 fd49 	bl	8018468 <iprintf>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	e04a      	b.n	800ea70 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d108      	bne.n	800e9f2 <pbuf_copy_partial+0x4e>
 800e9e0:	4b25      	ldr	r3, [pc, #148]	@ (800ea78 <pbuf_copy_partial+0xd4>)
 800e9e2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e9e6:	4927      	ldr	r1, [pc, #156]	@ (800ea84 <pbuf_copy_partial+0xe0>)
 800e9e8:	4825      	ldr	r0, [pc, #148]	@ (800ea80 <pbuf_copy_partial+0xdc>)
 800e9ea:	f009 fd3d 	bl	8018468 <iprintf>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e03e      	b.n	800ea70 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	61fb      	str	r3, [r7, #28]
 800e9f6:	e034      	b.n	800ea62 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e9f8:	88bb      	ldrh	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00a      	beq.n	800ea14 <pbuf_copy_partial+0x70>
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	895b      	ldrh	r3, [r3, #10]
 800ea02:	88ba      	ldrh	r2, [r7, #4]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d305      	bcc.n	800ea14 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	895b      	ldrh	r3, [r3, #10]
 800ea0c:	88ba      	ldrh	r2, [r7, #4]
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	80bb      	strh	r3, [r7, #4]
 800ea12:	e023      	b.n	800ea5c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	895a      	ldrh	r2, [r3, #10]
 800ea18:	88bb      	ldrh	r3, [r7, #4]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea1e:	8b3a      	ldrh	r2, [r7, #24]
 800ea20:	88fb      	ldrh	r3, [r7, #6]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d901      	bls.n	800ea2a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea26:	88fb      	ldrh	r3, [r7, #6]
 800ea28:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea2a:	8b7b      	ldrh	r3, [r7, #26]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	18d0      	adds	r0, r2, r3
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	685a      	ldr	r2, [r3, #4]
 800ea34:	88bb      	ldrh	r3, [r7, #4]
 800ea36:	4413      	add	r3, r2
 800ea38:	8b3a      	ldrh	r2, [r7, #24]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	f009 fe9d 	bl	801877a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ea40:	8afa      	ldrh	r2, [r7, #22]
 800ea42:	8b3b      	ldrh	r3, [r7, #24]
 800ea44:	4413      	add	r3, r2
 800ea46:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ea48:	8b7a      	ldrh	r2, [r7, #26]
 800ea4a:	8b3b      	ldrh	r3, [r7, #24]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	8b3b      	ldrh	r3, [r7, #24]
 800ea54:	1ad3      	subs	r3, r2, r3
 800ea56:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	61fb      	str	r3, [r7, #28]
 800ea62:	88fb      	ldrh	r3, [r7, #6]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <pbuf_copy_partial+0xca>
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1c4      	bne.n	800e9f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ea6e:	8afb      	ldrh	r3, [r7, #22]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3720      	adds	r7, #32
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	0801abe4 	.word	0x0801abe4
 800ea7c:	0801af2c 	.word	0x0801af2c
 800ea80:	0801ac44 	.word	0x0801ac44
 800ea84:	0801af4c 	.word	0x0801af4c

0800ea88 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	603a      	str	r2, [r7, #0]
 800ea92:	71fb      	strb	r3, [r7, #7]
 800ea94:	460b      	mov	r3, r1
 800ea96:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	8919      	ldrh	r1, [r3, #8]
 800ea9c:	88ba      	ldrh	r2, [r7, #4]
 800ea9e:	79fb      	ldrb	r3, [r7, #7]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7ff fa95 	bl	800dfd0 <pbuf_alloc>
 800eaa6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <pbuf_clone+0x2a>
    return NULL;
 800eaae:	2300      	movs	r3, #0
 800eab0:	e011      	b.n	800ead6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	68f8      	ldr	r0, [r7, #12]
 800eab6:	f7ff fea3 	bl	800e800 <pbuf_copy>
 800eaba:	4603      	mov	r3, r0
 800eabc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eabe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d006      	beq.n	800ead4 <pbuf_clone+0x4c>
 800eac6:	4b06      	ldr	r3, [pc, #24]	@ (800eae0 <pbuf_clone+0x58>)
 800eac8:	f240 5224 	movw	r2, #1316	@ 0x524
 800eacc:	4905      	ldr	r1, [pc, #20]	@ (800eae4 <pbuf_clone+0x5c>)
 800eace:	4806      	ldr	r0, [pc, #24]	@ (800eae8 <pbuf_clone+0x60>)
 800ead0:	f009 fcca 	bl	8018468 <iprintf>
  return q;
 800ead4:	68fb      	ldr	r3, [r7, #12]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	0801abe4 	.word	0x0801abe4
 800eae4:	0801b058 	.word	0x0801b058
 800eae8:	0801ac44 	.word	0x0801ac44

0800eaec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eaf0:	f009 fbba 	bl	8018268 <rand>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	4b01      	ldr	r3, [pc, #4]	@ (800eb0c <tcp_init+0x20>)
 800eb06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eb08:	bf00      	nop
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	20000024 	.word	0x20000024

0800eb10 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7d1b      	ldrb	r3, [r3, #20]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d105      	bne.n	800eb2c <tcp_free+0x1c>
 800eb20:	4b06      	ldr	r3, [pc, #24]	@ (800eb3c <tcp_free+0x2c>)
 800eb22:	22d4      	movs	r2, #212	@ 0xd4
 800eb24:	4906      	ldr	r1, [pc, #24]	@ (800eb40 <tcp_free+0x30>)
 800eb26:	4807      	ldr	r0, [pc, #28]	@ (800eb44 <tcp_free+0x34>)
 800eb28:	f009 fc9e 	bl	8018468 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eb2c:	6879      	ldr	r1, [r7, #4]
 800eb2e:	2001      	movs	r0, #1
 800eb30:	f7fe fe8e 	bl	800d850 <memp_free>
}
 800eb34:	bf00      	nop
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	0801b0e4 	.word	0x0801b0e4
 800eb40:	0801b114 	.word	0x0801b114
 800eb44:	0801b128 	.word	0x0801b128

0800eb48 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7d1b      	ldrb	r3, [r3, #20]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d105      	bne.n	800eb64 <tcp_free_listen+0x1c>
 800eb58:	4b06      	ldr	r3, [pc, #24]	@ (800eb74 <tcp_free_listen+0x2c>)
 800eb5a:	22df      	movs	r2, #223	@ 0xdf
 800eb5c:	4906      	ldr	r1, [pc, #24]	@ (800eb78 <tcp_free_listen+0x30>)
 800eb5e:	4807      	ldr	r0, [pc, #28]	@ (800eb7c <tcp_free_listen+0x34>)
 800eb60:	f009 fc82 	bl	8018468 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	2002      	movs	r0, #2
 800eb68:	f7fe fe72 	bl	800d850 <memp_free>
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	0801b0e4 	.word	0x0801b0e4
 800eb78:	0801b150 	.word	0x0801b150
 800eb7c:	0801b128 	.word	0x0801b128

0800eb80 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eb84:	f001 f8ba 	bl	800fcfc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eb88:	4b07      	ldr	r3, [pc, #28]	@ (800eba8 <tcp_tmr+0x28>)
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	4b05      	ldr	r3, [pc, #20]	@ (800eba8 <tcp_tmr+0x28>)
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	4b04      	ldr	r3, [pc, #16]	@ (800eba8 <tcp_tmr+0x28>)
 800eb96:	781b      	ldrb	r3, [r3, #0]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800eba0:	f000 fd6a 	bl	800f678 <tcp_slowtmr>
  }
}
 800eba4:	bf00      	nop
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	2000f125 	.word	0x2000f125

0800ebac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d105      	bne.n	800ebc8 <tcp_remove_listener+0x1c>
 800ebbc:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf4 <tcp_remove_listener+0x48>)
 800ebbe:	22ff      	movs	r2, #255	@ 0xff
 800ebc0:	490d      	ldr	r1, [pc, #52]	@ (800ebf8 <tcp_remove_listener+0x4c>)
 800ebc2:	480e      	ldr	r0, [pc, #56]	@ (800ebfc <tcp_remove_listener+0x50>)
 800ebc4:	f009 fc50 	bl	8018468 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e00a      	b.n	800ebe4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d102      	bne.n	800ebde <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1f1      	bne.n	800ebce <tcp_remove_listener+0x22>
    }
  }
}
 800ebea:	bf00      	nop
 800ebec:	bf00      	nop
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	0801b0e4 	.word	0x0801b0e4
 800ebf8:	0801b16c 	.word	0x0801b16c
 800ebfc:	0801b128 	.word	0x0801b128

0800ec00 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d106      	bne.n	800ec1c <tcp_listen_closed+0x1c>
 800ec0e:	4b14      	ldr	r3, [pc, #80]	@ (800ec60 <tcp_listen_closed+0x60>)
 800ec10:	f240 1211 	movw	r2, #273	@ 0x111
 800ec14:	4913      	ldr	r1, [pc, #76]	@ (800ec64 <tcp_listen_closed+0x64>)
 800ec16:	4814      	ldr	r0, [pc, #80]	@ (800ec68 <tcp_listen_closed+0x68>)
 800ec18:	f009 fc26 	bl	8018468 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	7d1b      	ldrb	r3, [r3, #20]
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d006      	beq.n	800ec32 <tcp_listen_closed+0x32>
 800ec24:	4b0e      	ldr	r3, [pc, #56]	@ (800ec60 <tcp_listen_closed+0x60>)
 800ec26:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ec2a:	4910      	ldr	r1, [pc, #64]	@ (800ec6c <tcp_listen_closed+0x6c>)
 800ec2c:	480e      	ldr	r0, [pc, #56]	@ (800ec68 <tcp_listen_closed+0x68>)
 800ec2e:	f009 fc1b 	bl	8018468 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec32:	2301      	movs	r3, #1
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	e00b      	b.n	800ec50 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ec38:	4a0d      	ldr	r2, [pc, #52]	@ (800ec70 <tcp_listen_closed+0x70>)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff ffb1 	bl	800ebac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d9f0      	bls.n	800ec38 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ec56:	bf00      	nop
 800ec58:	bf00      	nop
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	0801b0e4 	.word	0x0801b0e4
 800ec64:	0801b194 	.word	0x0801b194
 800ec68:	0801b128 	.word	0x0801b128
 800ec6c:	0801b1a0 	.word	0x0801b1a0
 800ec70:	0801ddc8 	.word	0x0801ddc8

0800ec74 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ec74:	b5b0      	push	{r4, r5, r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af04      	add	r7, sp, #16
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d106      	bne.n	800ec94 <tcp_close_shutdown+0x20>
 800ec86:	4b63      	ldr	r3, [pc, #396]	@ (800ee14 <tcp_close_shutdown+0x1a0>)
 800ec88:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ec8c:	4962      	ldr	r1, [pc, #392]	@ (800ee18 <tcp_close_shutdown+0x1a4>)
 800ec8e:	4863      	ldr	r0, [pc, #396]	@ (800ee1c <tcp_close_shutdown+0x1a8>)
 800ec90:	f009 fbea 	bl	8018468 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ec94:	78fb      	ldrb	r3, [r7, #3]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d066      	beq.n	800ed68 <tcp_close_shutdown+0xf4>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	7d1b      	ldrb	r3, [r3, #20]
 800ec9e:	2b04      	cmp	r3, #4
 800eca0:	d003      	beq.n	800ecaa <tcp_close_shutdown+0x36>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	7d1b      	ldrb	r3, [r3, #20]
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	d15e      	bne.n	800ed68 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d104      	bne.n	800ecbc <tcp_close_shutdown+0x48>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecb6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ecba:	d055      	beq.n	800ed68 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	8b5b      	ldrh	r3, [r3, #26]
 800ecc0:	f003 0310 	and.w	r3, r3, #16
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d106      	bne.n	800ecd6 <tcp_close_shutdown+0x62>
 800ecc8:	4b52      	ldr	r3, [pc, #328]	@ (800ee14 <tcp_close_shutdown+0x1a0>)
 800ecca:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ecce:	4954      	ldr	r1, [pc, #336]	@ (800ee20 <tcp_close_shutdown+0x1ac>)
 800ecd0:	4852      	ldr	r0, [pc, #328]	@ (800ee1c <tcp_close_shutdown+0x1a8>)
 800ecd2:	f009 fbc9 	bl	8018468 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ecde:	687d      	ldr	r5, [r7, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	3304      	adds	r3, #4
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	8ad2      	ldrh	r2, [r2, #22]
 800ece8:	6879      	ldr	r1, [r7, #4]
 800ecea:	8b09      	ldrh	r1, [r1, #24]
 800ecec:	9102      	str	r1, [sp, #8]
 800ecee:	9201      	str	r2, [sp, #4]
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	462b      	mov	r3, r5
 800ecf4:	4622      	mov	r2, r4
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f005 fde7 	bl	80148cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f001 fbca 	bl	8010498 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ed04:	4b47      	ldr	r3, [pc, #284]	@ (800ee24 <tcp_close_shutdown+0x1b0>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d105      	bne.n	800ed1a <tcp_close_shutdown+0xa6>
 800ed0e:	4b45      	ldr	r3, [pc, #276]	@ (800ee24 <tcp_close_shutdown+0x1b0>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	4a43      	ldr	r2, [pc, #268]	@ (800ee24 <tcp_close_shutdown+0x1b0>)
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	e013      	b.n	800ed42 <tcp_close_shutdown+0xce>
 800ed1a:	4b42      	ldr	r3, [pc, #264]	@ (800ee24 <tcp_close_shutdown+0x1b0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]
 800ed20:	e00c      	b.n	800ed3c <tcp_close_shutdown+0xc8>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d104      	bne.n	800ed36 <tcp_close_shutdown+0xc2>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	60da      	str	r2, [r3, #12]
 800ed34:	e005      	b.n	800ed42 <tcp_close_shutdown+0xce>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1ef      	bne.n	800ed22 <tcp_close_shutdown+0xae>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	60da      	str	r2, [r3, #12]
 800ed48:	4b37      	ldr	r3, [pc, #220]	@ (800ee28 <tcp_close_shutdown+0x1b4>)
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ed4e:	4b37      	ldr	r3, [pc, #220]	@ (800ee2c <tcp_close_shutdown+0x1b8>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d102      	bne.n	800ed5e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ed58:	f004 f85e 	bl	8012e18 <tcp_trigger_input_pcb_close>
 800ed5c:	e002      	b.n	800ed64 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff fed6 	bl	800eb10 <tcp_free>
      }
      return ERR_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	e050      	b.n	800ee0a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7d1b      	ldrb	r3, [r3, #20]
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	d03b      	beq.n	800ede8 <tcp_close_shutdown+0x174>
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	dc44      	bgt.n	800edfe <tcp_close_shutdown+0x18a>
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <tcp_close_shutdown+0x10a>
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d02a      	beq.n	800edd2 <tcp_close_shutdown+0x15e>
 800ed7c:	e03f      	b.n	800edfe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8adb      	ldrh	r3, [r3, #22]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d021      	beq.n	800edca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed86:	4b2a      	ldr	r3, [pc, #168]	@ (800ee30 <tcp_close_shutdown+0x1bc>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d105      	bne.n	800ed9c <tcp_close_shutdown+0x128>
 800ed90:	4b27      	ldr	r3, [pc, #156]	@ (800ee30 <tcp_close_shutdown+0x1bc>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	4a26      	ldr	r2, [pc, #152]	@ (800ee30 <tcp_close_shutdown+0x1bc>)
 800ed98:	6013      	str	r3, [r2, #0]
 800ed9a:	e013      	b.n	800edc4 <tcp_close_shutdown+0x150>
 800ed9c:	4b24      	ldr	r3, [pc, #144]	@ (800ee30 <tcp_close_shutdown+0x1bc>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	60bb      	str	r3, [r7, #8]
 800eda2:	e00c      	b.n	800edbe <tcp_close_shutdown+0x14a>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d104      	bne.n	800edb8 <tcp_close_shutdown+0x144>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68da      	ldr	r2, [r3, #12]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	60da      	str	r2, [r3, #12]
 800edb6:	e005      	b.n	800edc4 <tcp_close_shutdown+0x150>
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	60bb      	str	r3, [r7, #8]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d1ef      	bne.n	800eda4 <tcp_close_shutdown+0x130>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff fea0 	bl	800eb10 <tcp_free>
      break;
 800edd0:	e01a      	b.n	800ee08 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff ff14 	bl	800ec00 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	4816      	ldr	r0, [pc, #88]	@ (800ee34 <tcp_close_shutdown+0x1c0>)
 800eddc:	f001 fbac 	bl	8010538 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff feb1 	bl	800eb48 <tcp_free_listen>
      break;
 800ede6:	e00f      	b.n	800ee08 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ede8:	6879      	ldr	r1, [r7, #4]
 800edea:	480e      	ldr	r0, [pc, #56]	@ (800ee24 <tcp_close_shutdown+0x1b0>)
 800edec:	f001 fba4 	bl	8010538 <tcp_pcb_remove>
 800edf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ee28 <tcp_close_shutdown+0x1b4>)
 800edf2:	2201      	movs	r2, #1
 800edf4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff fe8a 	bl	800eb10 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800edfc:	e004      	b.n	800ee08 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 f81a 	bl	800ee38 <tcp_close_shutdown_fin>
 800ee04:	4603      	mov	r3, r0
 800ee06:	e000      	b.n	800ee0a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bdb0      	pop	{r4, r5, r7, pc}
 800ee12:	bf00      	nop
 800ee14:	0801b0e4 	.word	0x0801b0e4
 800ee18:	0801b1b8 	.word	0x0801b1b8
 800ee1c:	0801b128 	.word	0x0801b128
 800ee20:	0801b1d8 	.word	0x0801b1d8
 800ee24:	2000f11c 	.word	0x2000f11c
 800ee28:	2000f124 	.word	0x2000f124
 800ee2c:	2000f15c 	.word	0x2000f15c
 800ee30:	2000f114 	.word	0x2000f114
 800ee34:	2000f118 	.word	0x2000f118

0800ee38 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d106      	bne.n	800ee54 <tcp_close_shutdown_fin+0x1c>
 800ee46:	4b2e      	ldr	r3, [pc, #184]	@ (800ef00 <tcp_close_shutdown_fin+0xc8>)
 800ee48:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ee4c:	492d      	ldr	r1, [pc, #180]	@ (800ef04 <tcp_close_shutdown_fin+0xcc>)
 800ee4e:	482e      	ldr	r0, [pc, #184]	@ (800ef08 <tcp_close_shutdown_fin+0xd0>)
 800ee50:	f009 fb0a 	bl	8018468 <iprintf>

  switch (pcb->state) {
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7d1b      	ldrb	r3, [r3, #20]
 800ee58:	2b07      	cmp	r3, #7
 800ee5a:	d020      	beq.n	800ee9e <tcp_close_shutdown_fin+0x66>
 800ee5c:	2b07      	cmp	r3, #7
 800ee5e:	dc2b      	bgt.n	800eeb8 <tcp_close_shutdown_fin+0x80>
 800ee60:	2b03      	cmp	r3, #3
 800ee62:	d002      	beq.n	800ee6a <tcp_close_shutdown_fin+0x32>
 800ee64:	2b04      	cmp	r3, #4
 800ee66:	d00d      	beq.n	800ee84 <tcp_close_shutdown_fin+0x4c>
 800ee68:	e026      	b.n	800eeb8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f004 fe3c 	bl	8013ae8 <tcp_send_fin>
 800ee70:	4603      	mov	r3, r0
 800ee72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d11f      	bne.n	800eebc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2205      	movs	r2, #5
 800ee80:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee82:	e01b      	b.n	800eebc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f004 fe2f 	bl	8013ae8 <tcp_send_fin>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ee8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d114      	bne.n	800eec0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2205      	movs	r2, #5
 800ee9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee9c:	e010      	b.n	800eec0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f004 fe22 	bl	8013ae8 <tcp_send_fin>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d109      	bne.n	800eec4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2209      	movs	r2, #9
 800eeb4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eeb6:	e005      	b.n	800eec4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	e01c      	b.n	800eef6 <tcp_close_shutdown_fin+0xbe>
      break;
 800eebc:	bf00      	nop
 800eebe:	e002      	b.n	800eec6 <tcp_close_shutdown_fin+0x8e>
      break;
 800eec0:	bf00      	nop
 800eec2:	e000      	b.n	800eec6 <tcp_close_shutdown_fin+0x8e>
      break;
 800eec4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d103      	bne.n	800eed6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f004 ff48 	bl	8013d64 <tcp_output>
 800eed4:	e00d      	b.n	800eef2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800eed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d108      	bne.n	800eef2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	8b5b      	ldrh	r3, [r3, #26]
 800eee4:	f043 0308 	orr.w	r3, r3, #8
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e001      	b.n	800eef6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800eef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	0801b0e4 	.word	0x0801b0e4
 800ef04:	0801b194 	.word	0x0801b194
 800ef08:	0801b128 	.word	0x0801b128

0800ef0c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d109      	bne.n	800ef2e <tcp_close+0x22>
 800ef1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ef58 <tcp_close+0x4c>)
 800ef1c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ef20:	490e      	ldr	r1, [pc, #56]	@ (800ef5c <tcp_close+0x50>)
 800ef22:	480f      	ldr	r0, [pc, #60]	@ (800ef60 <tcp_close+0x54>)
 800ef24:	f009 faa0 	bl	8018468 <iprintf>
 800ef28:	f06f 030f 	mvn.w	r3, #15
 800ef2c:	e00f      	b.n	800ef4e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	7d1b      	ldrb	r3, [r3, #20]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d006      	beq.n	800ef44 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	8b5b      	ldrh	r3, [r3, #26]
 800ef3a:	f043 0310 	orr.w	r3, r3, #16
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ef44:	2101      	movs	r1, #1
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff fe94 	bl	800ec74 <tcp_close_shutdown>
 800ef4c:	4603      	mov	r3, r0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	0801b0e4 	.word	0x0801b0e4
 800ef5c:	0801b1f4 	.word	0x0801b1f4
 800ef60:	0801b128 	.word	0x0801b128

0800ef64 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d109      	bne.n	800ef8a <tcp_shutdown+0x26>
 800ef76:	4b26      	ldr	r3, [pc, #152]	@ (800f010 <tcp_shutdown+0xac>)
 800ef78:	f240 2207 	movw	r2, #519	@ 0x207
 800ef7c:	4925      	ldr	r1, [pc, #148]	@ (800f014 <tcp_shutdown+0xb0>)
 800ef7e:	4826      	ldr	r0, [pc, #152]	@ (800f018 <tcp_shutdown+0xb4>)
 800ef80:	f009 fa72 	bl	8018468 <iprintf>
 800ef84:	f06f 030f 	mvn.w	r3, #15
 800ef88:	e03d      	b.n	800f006 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	7d1b      	ldrb	r3, [r3, #20]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d102      	bne.n	800ef98 <tcp_shutdown+0x34>
    return ERR_CONN;
 800ef92:	f06f 030a 	mvn.w	r3, #10
 800ef96:	e036      	b.n	800f006 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d01b      	beq.n	800efd6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	8b5b      	ldrh	r3, [r3, #26]
 800efa2:	f043 0310 	orr.w	r3, r3, #16
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d005      	beq.n	800efbe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800efb2:	2101      	movs	r1, #1
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f7ff fe5d 	bl	800ec74 <tcp_close_shutdown>
 800efba:	4603      	mov	r3, r0
 800efbc:	e023      	b.n	800f006 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d007      	beq.n	800efd6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fae4 	bl	800e598 <pbuf_free>
      pcb->refused_data = NULL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d013      	beq.n	800f004 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	7d1b      	ldrb	r3, [r3, #20]
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	dc02      	bgt.n	800efea <tcp_shutdown+0x86>
 800efe4:	2b03      	cmp	r3, #3
 800efe6:	da02      	bge.n	800efee <tcp_shutdown+0x8a>
 800efe8:	e009      	b.n	800effe <tcp_shutdown+0x9a>
 800efea:	2b07      	cmp	r3, #7
 800efec:	d107      	bne.n	800effe <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	4619      	mov	r1, r3
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f7ff fe3d 	bl	800ec74 <tcp_close_shutdown>
 800effa:	4603      	mov	r3, r0
 800effc:	e003      	b.n	800f006 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800effe:	f06f 030a 	mvn.w	r3, #10
 800f002:	e000      	b.n	800f006 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	0801b0e4 	.word	0x0801b0e4
 800f014:	0801b20c 	.word	0x0801b20c
 800f018:	0801b128 	.word	0x0801b128

0800f01c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b08e      	sub	sp, #56	@ 0x38
 800f020:	af04      	add	r7, sp, #16
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d107      	bne.n	800f03c <tcp_abandon+0x20>
 800f02c:	4b52      	ldr	r3, [pc, #328]	@ (800f178 <tcp_abandon+0x15c>)
 800f02e:	f240 223d 	movw	r2, #573	@ 0x23d
 800f032:	4952      	ldr	r1, [pc, #328]	@ (800f17c <tcp_abandon+0x160>)
 800f034:	4852      	ldr	r0, [pc, #328]	@ (800f180 <tcp_abandon+0x164>)
 800f036:	f009 fa17 	bl	8018468 <iprintf>
 800f03a:	e099      	b.n	800f170 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d106      	bne.n	800f052 <tcp_abandon+0x36>
 800f044:	4b4c      	ldr	r3, [pc, #304]	@ (800f178 <tcp_abandon+0x15c>)
 800f046:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800f04a:	494e      	ldr	r1, [pc, #312]	@ (800f184 <tcp_abandon+0x168>)
 800f04c:	484c      	ldr	r0, [pc, #304]	@ (800f180 <tcp_abandon+0x164>)
 800f04e:	f009 fa0b 	bl	8018468 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	7d1b      	ldrb	r3, [r3, #20]
 800f056:	2b0a      	cmp	r3, #10
 800f058:	d107      	bne.n	800f06a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	484a      	ldr	r0, [pc, #296]	@ (800f188 <tcp_abandon+0x16c>)
 800f05e:	f001 fa6b 	bl	8010538 <tcp_pcb_remove>
    tcp_free(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff fd54 	bl	800eb10 <tcp_free>
 800f068:	e082      	b.n	800f170 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f076:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f07c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f084:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d126      	bne.n	800f0e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	8adb      	ldrh	r3, [r3, #22]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d02e      	beq.n	800f0fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f09c:	4b3b      	ldr	r3, [pc, #236]	@ (800f18c <tcp_abandon+0x170>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d105      	bne.n	800f0b2 <tcp_abandon+0x96>
 800f0a6:	4b39      	ldr	r3, [pc, #228]	@ (800f18c <tcp_abandon+0x170>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	4a37      	ldr	r2, [pc, #220]	@ (800f18c <tcp_abandon+0x170>)
 800f0ae:	6013      	str	r3, [r2, #0]
 800f0b0:	e013      	b.n	800f0da <tcp_abandon+0xbe>
 800f0b2:	4b36      	ldr	r3, [pc, #216]	@ (800f18c <tcp_abandon+0x170>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	61fb      	str	r3, [r7, #28]
 800f0b8:	e00c      	b.n	800f0d4 <tcp_abandon+0xb8>
 800f0ba:	69fb      	ldr	r3, [r7, #28]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d104      	bne.n	800f0ce <tcp_abandon+0xb2>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68da      	ldr	r2, [r3, #12]
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	60da      	str	r2, [r3, #12]
 800f0cc:	e005      	b.n	800f0da <tcp_abandon+0xbe>
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	61fb      	str	r3, [r7, #28]
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1ef      	bne.n	800f0ba <tcp_abandon+0x9e>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2200      	movs	r2, #0
 800f0de:	60da      	str	r2, [r3, #12]
 800f0e0:	e00b      	b.n	800f0fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8adb      	ldrh	r3, [r3, #22]
 800f0ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0ec:	6879      	ldr	r1, [r7, #4]
 800f0ee:	4828      	ldr	r0, [pc, #160]	@ (800f190 <tcp_abandon+0x174>)
 800f0f0:	f001 fa22 	bl	8010538 <tcp_pcb_remove>
 800f0f4:	4b27      	ldr	r3, [pc, #156]	@ (800f194 <tcp_abandon+0x178>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d004      	beq.n	800f10c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f106:	4618      	mov	r0, r3
 800f108:	f000 fed8 	bl	800febc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 fecf 	bl	800febc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 fec6 	bl	800febc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00e      	beq.n	800f154 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f136:	6879      	ldr	r1, [r7, #4]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3304      	adds	r3, #4
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	8b12      	ldrh	r2, [r2, #24]
 800f140:	9202      	str	r2, [sp, #8]
 800f142:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f144:	9201      	str	r2, [sp, #4]
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	460b      	mov	r3, r1
 800f14a:	697a      	ldr	r2, [r7, #20]
 800f14c:	69b9      	ldr	r1, [r7, #24]
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f005 fbbc 	bl	80148cc <tcp_rst>
    }
    last_state = pcb->state;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	7d1b      	ldrb	r3, [r3, #20]
 800f158:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7ff fcd8 	bl	800eb10 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d004      	beq.n	800f170 <tcp_abandon+0x154>
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	f06f 010c 	mvn.w	r1, #12
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	4798      	blx	r3
  }
}
 800f170:	3728      	adds	r7, #40	@ 0x28
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	0801b0e4 	.word	0x0801b0e4
 800f17c:	0801b228 	.word	0x0801b228
 800f180:	0801b128 	.word	0x0801b128
 800f184:	0801b244 	.word	0x0801b244
 800f188:	2000f120 	.word	0x2000f120
 800f18c:	2000f114 	.word	0x2000f114
 800f190:	2000f11c 	.word	0x2000f11c
 800f194:	2000f124 	.word	0x2000f124

0800f198 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff ff3a 	bl	800f01c <tcp_abandon>
}
 800f1a8:	bf00      	nop
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f1be:	2304      	movs	r3, #4
 800f1c0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f1c8:	4b3e      	ldr	r3, [pc, #248]	@ (800f2c4 <tcp_bind+0x114>)
 800f1ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <tcp_bind+0x36>
 800f1d2:	4b3d      	ldr	r3, [pc, #244]	@ (800f2c8 <tcp_bind+0x118>)
 800f1d4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800f1d8:	493c      	ldr	r1, [pc, #240]	@ (800f2cc <tcp_bind+0x11c>)
 800f1da:	483d      	ldr	r0, [pc, #244]	@ (800f2d0 <tcp_bind+0x120>)
 800f1dc:	f009 f944 	bl	8018468 <iprintf>
 800f1e0:	f06f 030f 	mvn.w	r3, #15
 800f1e4:	e06a      	b.n	800f2bc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d009      	beq.n	800f202 <tcp_bind+0x52>
 800f1ee:	4b36      	ldr	r3, [pc, #216]	@ (800f2c8 <tcp_bind+0x118>)
 800f1f0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f1f4:	4937      	ldr	r1, [pc, #220]	@ (800f2d4 <tcp_bind+0x124>)
 800f1f6:	4836      	ldr	r0, [pc, #216]	@ (800f2d0 <tcp_bind+0x120>)
 800f1f8:	f009 f936 	bl	8018468 <iprintf>
 800f1fc:	f06f 0305 	mvn.w	r3, #5
 800f200:	e05c      	b.n	800f2bc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f202:	88fb      	ldrh	r3, [r7, #6]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d109      	bne.n	800f21c <tcp_bind+0x6c>
    port = tcp_new_port();
 800f208:	f000 f9f0 	bl	800f5ec <tcp_new_port>
 800f20c:	4603      	mov	r3, r0
 800f20e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f210:	88fb      	ldrh	r3, [r7, #6]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d135      	bne.n	800f282 <tcp_bind+0xd2>
      return ERR_BUF;
 800f216:	f06f 0301 	mvn.w	r3, #1
 800f21a:	e04f      	b.n	800f2bc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f21c:	2300      	movs	r3, #0
 800f21e:	61fb      	str	r3, [r7, #28]
 800f220:	e02b      	b.n	800f27a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f222:	4a2d      	ldr	r2, [pc, #180]	@ (800f2d8 <tcp_bind+0x128>)
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	61bb      	str	r3, [r7, #24]
 800f22e:	e01e      	b.n	800f26e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	8adb      	ldrh	r3, [r3, #22]
 800f234:	88fa      	ldrh	r2, [r7, #6]
 800f236:	429a      	cmp	r2, r3
 800f238:	d116      	bne.n	800f268 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f23a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d010      	beq.n	800f262 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00c      	beq.n	800f262 <tcp_bind+0xb2>
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d009      	beq.n	800f262 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d005      	beq.n	800f262 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f25e:	429a      	cmp	r2, r3
 800f260:	d102      	bne.n	800f268 <tcp_bind+0xb8>
              return ERR_USE;
 800f262:	f06f 0307 	mvn.w	r3, #7
 800f266:	e029      	b.n	800f2bc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f268:	69bb      	ldr	r3, [r7, #24]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	61bb      	str	r3, [r7, #24]
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1dd      	bne.n	800f230 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	3301      	adds	r3, #1
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	69fa      	ldr	r2, [r7, #28]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	429a      	cmp	r2, r3
 800f280:	dbcf      	blt.n	800f222 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00c      	beq.n	800f2a2 <tcp_bind+0xf2>
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d008      	beq.n	800f2a2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <tcp_bind+0xec>
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	e000      	b.n	800f29e <tcp_bind+0xee>
 800f29c:	2300      	movs	r3, #0
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	88fa      	ldrh	r2, [r7, #6]
 800f2a6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f2dc <tcp_bind+0x12c>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	60da      	str	r2, [r3, #12]
 800f2b0:	4a0a      	ldr	r2, [pc, #40]	@ (800f2dc <tcp_bind+0x12c>)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6013      	str	r3, [r2, #0]
 800f2b6:	f005 fccb 	bl	8014c50 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3720      	adds	r7, #32
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	0801ddf0 	.word	0x0801ddf0
 800f2c8:	0801b0e4 	.word	0x0801b0e4
 800f2cc:	0801b278 	.word	0x0801b278
 800f2d0:	0801b128 	.word	0x0801b128
 800f2d4:	0801b290 	.word	0x0801b290
 800f2d8:	0801ddc8 	.word	0x0801ddc8
 800f2dc:	2000f114 	.word	0x2000f114

0800f2e0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d106      	bne.n	800f302 <tcp_accept_null+0x22>
 800f2f4:	4b07      	ldr	r3, [pc, #28]	@ (800f314 <tcp_accept_null+0x34>)
 800f2f6:	f240 320f 	movw	r2, #783	@ 0x30f
 800f2fa:	4907      	ldr	r1, [pc, #28]	@ (800f318 <tcp_accept_null+0x38>)
 800f2fc:	4807      	ldr	r0, [pc, #28]	@ (800f31c <tcp_accept_null+0x3c>)
 800f2fe:	f009 f8b3 	bl	8018468 <iprintf>

  tcp_abort(pcb);
 800f302:	68b8      	ldr	r0, [r7, #8]
 800f304:	f7ff ff48 	bl	800f198 <tcp_abort>

  return ERR_ABRT;
 800f308:	f06f 030c 	mvn.w	r3, #12
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	0801b0e4 	.word	0x0801b0e4
 800f318:	0801b2b8 	.word	0x0801b2b8
 800f31c:	0801b128 	.word	0x0801b128

0800f320 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	460b      	mov	r3, r1
 800f32a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f32c:	78fb      	ldrb	r3, [r7, #3]
 800f32e:	2200      	movs	r2, #0
 800f330:	4619      	mov	r1, r3
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 f806 	bl	800f344 <tcp_listen_with_backlog_and_err>
 800f338:	4603      	mov	r3, r0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	460b      	mov	r3, r1
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d109      	bne.n	800f370 <tcp_listen_with_backlog_and_err+0x2c>
 800f35c:	4b47      	ldr	r3, [pc, #284]	@ (800f47c <tcp_listen_with_backlog_and_err+0x138>)
 800f35e:	f240 3259 	movw	r2, #857	@ 0x359
 800f362:	4947      	ldr	r1, [pc, #284]	@ (800f480 <tcp_listen_with_backlog_and_err+0x13c>)
 800f364:	4847      	ldr	r0, [pc, #284]	@ (800f484 <tcp_listen_with_backlog_and_err+0x140>)
 800f366:	f009 f87f 	bl	8018468 <iprintf>
 800f36a:	23f0      	movs	r3, #240	@ 0xf0
 800f36c:	76fb      	strb	r3, [r7, #27]
 800f36e:	e079      	b.n	800f464 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d009      	beq.n	800f38c <tcp_listen_with_backlog_and_err+0x48>
 800f378:	4b40      	ldr	r3, [pc, #256]	@ (800f47c <tcp_listen_with_backlog_and_err+0x138>)
 800f37a:	f240 325a 	movw	r2, #858	@ 0x35a
 800f37e:	4942      	ldr	r1, [pc, #264]	@ (800f488 <tcp_listen_with_backlog_and_err+0x144>)
 800f380:	4840      	ldr	r0, [pc, #256]	@ (800f484 <tcp_listen_with_backlog_and_err+0x140>)
 800f382:	f009 f871 	bl	8018468 <iprintf>
 800f386:	23f1      	movs	r3, #241	@ 0xf1
 800f388:	76fb      	strb	r3, [r7, #27]
 800f38a:	e06b      	b.n	800f464 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	7d1b      	ldrb	r3, [r3, #20]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d104      	bne.n	800f39e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f398:	23f7      	movs	r3, #247	@ 0xf7
 800f39a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f39c:	e062      	b.n	800f464 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f39e:	2002      	movs	r0, #2
 800f3a0:	f7fe f9e0 	bl	800d764 <memp_malloc>
 800f3a4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d102      	bne.n	800f3b2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f3ac:	23ff      	movs	r3, #255	@ 0xff
 800f3ae:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f3b0:	e058      	b.n	800f464 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	691a      	ldr	r2, [r3, #16]
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	8ada      	ldrh	r2, [r3, #22]
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	7d5a      	ldrb	r2, [r3, #21]
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	7a5a      	ldrb	r2, [r3, #9]
 800f3d4:	69fb      	ldr	r3, [r7, #28]
 800f3d6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	7ada      	ldrb	r2, [r3, #11]
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	7a9a      	ldrb	r2, [r3, #10]
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	8adb      	ldrh	r3, [r3, #22]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d021      	beq.n	800f442 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3fe:	4b23      	ldr	r3, [pc, #140]	@ (800f48c <tcp_listen_with_backlog_and_err+0x148>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	429a      	cmp	r2, r3
 800f406:	d105      	bne.n	800f414 <tcp_listen_with_backlog_and_err+0xd0>
 800f408:	4b20      	ldr	r3, [pc, #128]	@ (800f48c <tcp_listen_with_backlog_and_err+0x148>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	4a1f      	ldr	r2, [pc, #124]	@ (800f48c <tcp_listen_with_backlog_and_err+0x148>)
 800f410:	6013      	str	r3, [r2, #0]
 800f412:	e013      	b.n	800f43c <tcp_listen_with_backlog_and_err+0xf8>
 800f414:	4b1d      	ldr	r3, [pc, #116]	@ (800f48c <tcp_listen_with_backlog_and_err+0x148>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	617b      	str	r3, [r7, #20]
 800f41a:	e00c      	b.n	800f436 <tcp_listen_with_backlog_and_err+0xf2>
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	429a      	cmp	r2, r3
 800f424:	d104      	bne.n	800f430 <tcp_listen_with_backlog_and_err+0xec>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	68da      	ldr	r2, [r3, #12]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	60da      	str	r2, [r3, #12]
 800f42e:	e005      	b.n	800f43c <tcp_listen_with_backlog_and_err+0xf8>
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	617b      	str	r3, [r7, #20]
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1ef      	bne.n	800f41c <tcp_listen_with_backlog_and_err+0xd8>
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2200      	movs	r2, #0
 800f440:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f7ff fb64 	bl	800eb10 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	4a11      	ldr	r2, [pc, #68]	@ (800f490 <tcp_listen_with_backlog_and_err+0x14c>)
 800f44c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f44e:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <tcp_listen_with_backlog_and_err+0x150>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	60da      	str	r2, [r3, #12]
 800f456:	4a0f      	ldr	r2, [pc, #60]	@ (800f494 <tcp_listen_with_backlog_and_err+0x150>)
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	6013      	str	r3, [r2, #0]
 800f45c:	f005 fbf8 	bl	8014c50 <tcp_timer_needed>
  res = ERR_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d002      	beq.n	800f470 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	7efa      	ldrb	r2, [r7, #27]
 800f46e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f470:	69fb      	ldr	r3, [r7, #28]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3720      	adds	r7, #32
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	0801b0e4 	.word	0x0801b0e4
 800f480:	0801b2d8 	.word	0x0801b2d8
 800f484:	0801b128 	.word	0x0801b128
 800f488:	0801b308 	.word	0x0801b308
 800f48c:	2000f114 	.word	0x2000f114
 800f490:	0800f2e1 	.word	0x0800f2e1
 800f494:	2000f118 	.word	0x2000f118

0800f498 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d106      	bne.n	800f4b4 <tcp_update_rcv_ann_wnd+0x1c>
 800f4a6:	4b25      	ldr	r3, [pc, #148]	@ (800f53c <tcp_update_rcv_ann_wnd+0xa4>)
 800f4a8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f4ac:	4924      	ldr	r1, [pc, #144]	@ (800f540 <tcp_update_rcv_ann_wnd+0xa8>)
 800f4ae:	4825      	ldr	r0, [pc, #148]	@ (800f544 <tcp_update_rcv_ann_wnd+0xac>)
 800f4b0:	f008 ffda 	bl	8018468 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800f4bc:	4413      	add	r3, r2
 800f4be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f4c8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800f4cc:	bf28      	it	cs
 800f4ce:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800f4d2:	b292      	uxth	r2, r2
 800f4d4:	4413      	add	r3, r2
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	db08      	blt.n	800f4f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ea:	68fa      	ldr	r2, [r7, #12]
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	e020      	b.n	800f532 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4f8:	1ad3      	subs	r3, r2, r3
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	dd03      	ble.n	800f506 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f504:	e014      	b.n	800f530 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f518:	d306      	bcc.n	800f528 <tcp_update_rcv_ann_wnd+0x90>
 800f51a:	4b08      	ldr	r3, [pc, #32]	@ (800f53c <tcp_update_rcv_ann_wnd+0xa4>)
 800f51c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f520:	4909      	ldr	r1, [pc, #36]	@ (800f548 <tcp_update_rcv_ann_wnd+0xb0>)
 800f522:	4808      	ldr	r0, [pc, #32]	@ (800f544 <tcp_update_rcv_ann_wnd+0xac>)
 800f524:	f008 ffa0 	bl	8018468 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f530:	2300      	movs	r3, #0
  }
}
 800f532:	4618      	mov	r0, r3
 800f534:	3710      	adds	r7, #16
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	0801b0e4 	.word	0x0801b0e4
 800f540:	0801b340 	.word	0x0801b340
 800f544:	0801b128 	.word	0x0801b128
 800f548:	0801b364 	.word	0x0801b364

0800f54c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d107      	bne.n	800f56e <tcp_recved+0x22>
 800f55e:	4b1f      	ldr	r3, [pc, #124]	@ (800f5dc <tcp_recved+0x90>)
 800f560:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f564:	491e      	ldr	r1, [pc, #120]	@ (800f5e0 <tcp_recved+0x94>)
 800f566:	481f      	ldr	r0, [pc, #124]	@ (800f5e4 <tcp_recved+0x98>)
 800f568:	f008 ff7e 	bl	8018468 <iprintf>
 800f56c:	e032      	b.n	800f5d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	7d1b      	ldrb	r3, [r3, #20]
 800f572:	2b01      	cmp	r3, #1
 800f574:	d106      	bne.n	800f584 <tcp_recved+0x38>
 800f576:	4b19      	ldr	r3, [pc, #100]	@ (800f5dc <tcp_recved+0x90>)
 800f578:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f57c:	491a      	ldr	r1, [pc, #104]	@ (800f5e8 <tcp_recved+0x9c>)
 800f57e:	4819      	ldr	r0, [pc, #100]	@ (800f5e4 <tcp_recved+0x98>)
 800f580:	f008 ff72 	bl	8018468 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f588:	887b      	ldrh	r3, [r7, #2]
 800f58a:	4413      	add	r3, r2
 800f58c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f58e:	89fb      	ldrh	r3, [r7, #14]
 800f590:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f594:	d804      	bhi.n	800f5a0 <tcp_recved+0x54>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f59a:	89fa      	ldrh	r2, [r7, #14]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d204      	bcs.n	800f5aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f5a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f5a8:	e002      	b.n	800f5b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	89fa      	ldrh	r2, [r7, #14]
 800f5ae:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff ff71 	bl	800f498 <tcp_update_rcv_ann_wnd>
 800f5b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f5be:	d309      	bcc.n	800f5d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	8b5b      	ldrh	r3, [r3, #26]
 800f5c4:	f043 0302 	orr.w	r3, r3, #2
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f004 fbc8 	bl	8013d64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	0801b0e4 	.word	0x0801b0e4
 800f5e0:	0801b380 	.word	0x0801b380
 800f5e4:	0801b128 	.word	0x0801b128
 800f5e8:	0801b398 	.word	0x0801b398

0800f5ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800f670 <tcp_new_port+0x84>)
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800f670 <tcp_new_port+0x84>)
 800f600:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f602:	4b1b      	ldr	r3, [pc, #108]	@ (800f670 <tcp_new_port+0x84>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d103      	bne.n	800f616 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f60e:	4b18      	ldr	r3, [pc, #96]	@ (800f670 <tcp_new_port+0x84>)
 800f610:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f614:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f616:	2300      	movs	r3, #0
 800f618:	71fb      	strb	r3, [r7, #7]
 800f61a:	e01e      	b.n	800f65a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f61c:	79fb      	ldrb	r3, [r7, #7]
 800f61e:	4a15      	ldr	r2, [pc, #84]	@ (800f674 <tcp_new_port+0x88>)
 800f620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	603b      	str	r3, [r7, #0]
 800f628:	e011      	b.n	800f64e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	8ada      	ldrh	r2, [r3, #22]
 800f62e:	4b10      	ldr	r3, [pc, #64]	@ (800f670 <tcp_new_port+0x84>)
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d108      	bne.n	800f648 <tcp_new_port+0x5c>
        n++;
 800f636:	88bb      	ldrh	r3, [r7, #4]
 800f638:	3301      	adds	r3, #1
 800f63a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f63c:	88bb      	ldrh	r3, [r7, #4]
 800f63e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f642:	d3d8      	bcc.n	800f5f6 <tcp_new_port+0xa>
          return 0;
 800f644:	2300      	movs	r3, #0
 800f646:	e00d      	b.n	800f664 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	603b      	str	r3, [r7, #0]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1ea      	bne.n	800f62a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	3301      	adds	r3, #1
 800f658:	71fb      	strb	r3, [r7, #7]
 800f65a:	79fb      	ldrb	r3, [r7, #7]
 800f65c:	2b03      	cmp	r3, #3
 800f65e:	d9dd      	bls.n	800f61c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f660:	4b03      	ldr	r3, [pc, #12]	@ (800f670 <tcp_new_port+0x84>)
 800f662:	881b      	ldrh	r3, [r3, #0]
}
 800f664:	4618      	mov	r0, r3
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	20000024 	.word	0x20000024
 800f674:	0801ddc8 	.word	0x0801ddc8

0800f678 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f678:	b5b0      	push	{r4, r5, r7, lr}
 800f67a:	b090      	sub	sp, #64	@ 0x40
 800f67c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f684:	4b95      	ldr	r3, [pc, #596]	@ (800f8dc <tcp_slowtmr+0x264>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	3301      	adds	r3, #1
 800f68a:	4a94      	ldr	r2, [pc, #592]	@ (800f8dc <tcp_slowtmr+0x264>)
 800f68c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f68e:	4b94      	ldr	r3, [pc, #592]	@ (800f8e0 <tcp_slowtmr+0x268>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	3301      	adds	r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	4b92      	ldr	r3, [pc, #584]	@ (800f8e0 <tcp_slowtmr+0x268>)
 800f698:	701a      	strb	r2, [r3, #0]
 800f69a:	e000      	b.n	800f69e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f69c:	bf00      	nop
  prev = NULL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f6a2:	4b90      	ldr	r3, [pc, #576]	@ (800f8e4 <tcp_slowtmr+0x26c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f6a8:	e29d      	b.n	800fbe6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ac:	7d1b      	ldrb	r3, [r3, #20]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d106      	bne.n	800f6c0 <tcp_slowtmr+0x48>
 800f6b2:	4b8d      	ldr	r3, [pc, #564]	@ (800f8e8 <tcp_slowtmr+0x270>)
 800f6b4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f6b8:	498c      	ldr	r1, [pc, #560]	@ (800f8ec <tcp_slowtmr+0x274>)
 800f6ba:	488d      	ldr	r0, [pc, #564]	@ (800f8f0 <tcp_slowtmr+0x278>)
 800f6bc:	f008 fed4 	bl	8018468 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c2:	7d1b      	ldrb	r3, [r3, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d106      	bne.n	800f6d6 <tcp_slowtmr+0x5e>
 800f6c8:	4b87      	ldr	r3, [pc, #540]	@ (800f8e8 <tcp_slowtmr+0x270>)
 800f6ca:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f6ce:	4989      	ldr	r1, [pc, #548]	@ (800f8f4 <tcp_slowtmr+0x27c>)
 800f6d0:	4887      	ldr	r0, [pc, #540]	@ (800f8f0 <tcp_slowtmr+0x278>)
 800f6d2:	f008 fec9 	bl	8018468 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6d8:	7d1b      	ldrb	r3, [r3, #20]
 800f6da:	2b0a      	cmp	r3, #10
 800f6dc:	d106      	bne.n	800f6ec <tcp_slowtmr+0x74>
 800f6de:	4b82      	ldr	r3, [pc, #520]	@ (800f8e8 <tcp_slowtmr+0x270>)
 800f6e0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f6e4:	4984      	ldr	r1, [pc, #528]	@ (800f8f8 <tcp_slowtmr+0x280>)
 800f6e6:	4882      	ldr	r0, [pc, #520]	@ (800f8f0 <tcp_slowtmr+0x278>)
 800f6e8:	f008 febe 	bl	8018468 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ee:	7f9a      	ldrb	r2, [r3, #30]
 800f6f0:	4b7b      	ldr	r3, [pc, #492]	@ (800f8e0 <tcp_slowtmr+0x268>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d105      	bne.n	800f704 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f702:	e270      	b.n	800fbe6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800f704:	4b76      	ldr	r3, [pc, #472]	@ (800f8e0 <tcp_slowtmr+0x268>)
 800f706:	781a      	ldrb	r2, [r3, #0]
 800f708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f70a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f70c:	2300      	movs	r3, #0
 800f70e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f71a:	7d1b      	ldrb	r3, [r3, #20]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d10a      	bne.n	800f736 <tcp_slowtmr+0xbe>
 800f720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f726:	2b05      	cmp	r3, #5
 800f728:	d905      	bls.n	800f736 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f72a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f72e:	3301      	adds	r3, #1
 800f730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f734:	e11e      	b.n	800f974 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f73c:	2b0b      	cmp	r3, #11
 800f73e:	d905      	bls.n	800f74c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f744:	3301      	adds	r3, #1
 800f746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f74a:	e113      	b.n	800f974 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f74e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f752:	2b00      	cmp	r3, #0
 800f754:	d075      	beq.n	800f842 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d006      	beq.n	800f76c <tcp_slowtmr+0xf4>
 800f75e:	4b62      	ldr	r3, [pc, #392]	@ (800f8e8 <tcp_slowtmr+0x270>)
 800f760:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f764:	4965      	ldr	r1, [pc, #404]	@ (800f8fc <tcp_slowtmr+0x284>)
 800f766:	4862      	ldr	r0, [pc, #392]	@ (800f8f0 <tcp_slowtmr+0x278>)
 800f768:	f008 fe7e 	bl	8018468 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d106      	bne.n	800f782 <tcp_slowtmr+0x10a>
 800f774:	4b5c      	ldr	r3, [pc, #368]	@ (800f8e8 <tcp_slowtmr+0x270>)
 800f776:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f77a:	4961      	ldr	r1, [pc, #388]	@ (800f900 <tcp_slowtmr+0x288>)
 800f77c:	485c      	ldr	r0, [pc, #368]	@ (800f8f0 <tcp_slowtmr+0x278>)
 800f77e:	f008 fe73 	bl	8018468 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f784:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f788:	2b0b      	cmp	r3, #11
 800f78a:	d905      	bls.n	800f798 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f78c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f790:	3301      	adds	r3, #1
 800f792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f796:	e0ed      	b.n	800f974 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f79a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	4a58      	ldr	r2, [pc, #352]	@ (800f904 <tcp_slowtmr+0x28c>)
 800f7a2:	5cd3      	ldrb	r3, [r2, r3]
 800f7a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f7ac:	7c7a      	ldrb	r2, [r7, #17]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d907      	bls.n	800f7c2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	b2da      	uxtb	r2, r3
 800f7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7be:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f7c8:	7c7a      	ldrb	r2, [r7, #17]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	f200 80d2 	bhi.w	800f974 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d108      	bne.n	800f7f0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f7de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7e0:	f005 f968 	bl	8014ab4 <tcp_zero_window_probe>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d014      	beq.n	800f814 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	623b      	str	r3, [r7, #32]
 800f7ee:	e011      	b.n	800f814 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7fa:	f004 f82d 	bl	8013858 <tcp_split_unsent_seg>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d107      	bne.n	800f814 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f806:	f004 faad 	bl	8013d64 <tcp_output>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f814:	6a3b      	ldr	r3, [r7, #32]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 80ac 	beq.w	800f974 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f81e:	2200      	movs	r2, #0
 800f820:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f826:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f82a:	2b06      	cmp	r3, #6
 800f82c:	f200 80a2 	bhi.w	800f974 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f832:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f836:	3301      	adds	r3, #1
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f83c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f840:	e098      	b.n	800f974 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f844:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f848:	2b00      	cmp	r3, #0
 800f84a:	db0f      	blt.n	800f86c <tcp_slowtmr+0x1f4>
 800f84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f84e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f852:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f856:	4293      	cmp	r3, r2
 800f858:	d008      	beq.n	800f86c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f85c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f860:	b29b      	uxth	r3, r3
 800f862:	3301      	adds	r3, #1
 800f864:	b29b      	uxth	r3, r3
 800f866:	b21a      	sxth	r2, r3
 800f868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f874:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f878:	429a      	cmp	r2, r3
 800f87a:	db7b      	blt.n	800f974 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f87c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f87e:	f004 fd65 	bl	801434c <tcp_rexmit_rto_prepare>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d007      	beq.n	800f898 <tcp_slowtmr+0x220>
 800f888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d171      	bne.n	800f974 <tcp_slowtmr+0x2fc>
 800f890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f892:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f894:	2b00      	cmp	r3, #0
 800f896:	d06d      	beq.n	800f974 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89a:	7d1b      	ldrb	r3, [r3, #20]
 800f89c:	2b02      	cmp	r3, #2
 800f89e:	d03a      	beq.n	800f916 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f8a6:	2b0c      	cmp	r3, #12
 800f8a8:	bf28      	it	cs
 800f8aa:	230c      	movcs	r3, #12
 800f8ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8b4:	10db      	asrs	r3, r3, #3
 800f8b6:	b21b      	sxth	r3, r3
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f8c0:	4413      	add	r3, r2
 800f8c2:	7efa      	ldrb	r2, [r7, #27]
 800f8c4:	4910      	ldr	r1, [pc, #64]	@ (800f908 <tcp_slowtmr+0x290>)
 800f8c6:	5c8a      	ldrb	r2, [r1, r2]
 800f8c8:	4093      	lsls	r3, r2
 800f8ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	dc1a      	bgt.n	800f90c <tcp_slowtmr+0x294>
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	b21a      	sxth	r2, r3
 800f8da:	e019      	b.n	800f910 <tcp_slowtmr+0x298>
 800f8dc:	2000f110 	.word	0x2000f110
 800f8e0:	2000f126 	.word	0x2000f126
 800f8e4:	2000f11c 	.word	0x2000f11c
 800f8e8:	0801b0e4 	.word	0x0801b0e4
 800f8ec:	0801b428 	.word	0x0801b428
 800f8f0:	0801b128 	.word	0x0801b128
 800f8f4:	0801b454 	.word	0x0801b454
 800f8f8:	0801b480 	.word	0x0801b480
 800f8fc:	0801b4b0 	.word	0x0801b4b0
 800f900:	0801b4e4 	.word	0x0801b4e4
 800f904:	0801ddc0 	.word	0x0801ddc0
 800f908:	0801ddb0 	.word	0x0801ddb0
 800f90c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f912:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f918:	2200      	movs	r2, #0
 800f91a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f91e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f924:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f928:	4293      	cmp	r3, r2
 800f92a:	bf28      	it	cs
 800f92c:	4613      	movcs	r3, r2
 800f92e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f930:	8a7b      	ldrh	r3, [r7, #18]
 800f932:	085b      	lsrs	r3, r3, #1
 800f934:	b29a      	uxth	r2, r3
 800f936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f938:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f93e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f944:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f946:	005b      	lsls	r3, r3, #1
 800f948:	b29b      	uxth	r3, r3
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d206      	bcs.n	800f95c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f950:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f952:	005b      	lsls	r3, r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f958:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f95e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f962:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f968:	2200      	movs	r2, #0
 800f96a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f96e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f970:	f004 fd5c 	bl	801442c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f976:	7d1b      	ldrb	r3, [r3, #20]
 800f978:	2b06      	cmp	r3, #6
 800f97a:	d111      	bne.n	800f9a0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97e:	8b5b      	ldrh	r3, [r3, #26]
 800f980:	f003 0310 	and.w	r3, r3, #16
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00b      	beq.n	800f9a0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f988:	4b9c      	ldr	r3, [pc, #624]	@ (800fbfc <tcp_slowtmr+0x584>)
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98e:	6a1b      	ldr	r3, [r3, #32]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	2b28      	cmp	r3, #40	@ 0x28
 800f994:	d904      	bls.n	800f9a0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f99a:	3301      	adds	r3, #1
 800f99c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a2:	7a5b      	ldrb	r3, [r3, #9]
 800f9a4:	f003 0308 	and.w	r3, r3, #8
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d04a      	beq.n	800fa42 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f9b0:	2b04      	cmp	r3, #4
 800f9b2:	d003      	beq.n	800f9bc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f9b8:	2b07      	cmp	r3, #7
 800f9ba:	d142      	bne.n	800fa42 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9bc:	4b8f      	ldr	r3, [pc, #572]	@ (800fbfc <tcp_slowtmr+0x584>)
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c2:	6a1b      	ldr	r3, [r3, #32]
 800f9c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f9cc:	4b8c      	ldr	r3, [pc, #560]	@ (800fc00 <tcp_slowtmr+0x588>)
 800f9ce:	440b      	add	r3, r1
 800f9d0:	498c      	ldr	r1, [pc, #560]	@ (800fc04 <tcp_slowtmr+0x58c>)
 800f9d2:	fba1 1303 	umull	r1, r3, r1, r3
 800f9d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d90a      	bls.n	800f9f2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800f9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f9e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f9f0:	e027      	b.n	800fa42 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9f2:	4b82      	ldr	r3, [pc, #520]	@ (800fbfc <tcp_slowtmr+0x584>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800fa02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa04:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800fa08:	4618      	mov	r0, r3
 800fa0a:	4b7f      	ldr	r3, [pc, #508]	@ (800fc08 <tcp_slowtmr+0x590>)
 800fa0c:	fb00 f303 	mul.w	r3, r0, r3
 800fa10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fa12:	497c      	ldr	r1, [pc, #496]	@ (800fc04 <tcp_slowtmr+0x58c>)
 800fa14:	fba1 1303 	umull	r1, r3, r1, r3
 800fa18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d911      	bls.n	800fa42 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fa1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa20:	f005 f808 	bl	8014a34 <tcp_keepalive>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800fa2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d107      	bne.n	800fa42 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa34:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800fa38:	3301      	adds	r3, #1
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800fa42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d011      	beq.n	800fa6e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fa4a:	4b6c      	ldr	r3, [pc, #432]	@ (800fbfc <tcp_slowtmr+0x584>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	1ad2      	subs	r2, r2, r3
 800fa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	440b      	add	r3, r1
 800fa62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d302      	bcc.n	800fa6e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800fa68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fa6a:	f000 fec9 	bl	8010800 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800fa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa70:	7d1b      	ldrb	r3, [r3, #20]
 800fa72:	2b03      	cmp	r3, #3
 800fa74:	d10b      	bne.n	800fa8e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa76:	4b61      	ldr	r3, [pc, #388]	@ (800fbfc <tcp_slowtmr+0x584>)
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	2b28      	cmp	r3, #40	@ 0x28
 800fa82:	d904      	bls.n	800fa8e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800fa84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa88:	3301      	adds	r3, #1
 800fa8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800fa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa90:	7d1b      	ldrb	r3, [r3, #20]
 800fa92:	2b09      	cmp	r3, #9
 800fa94:	d10b      	bne.n	800faae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa96:	4b59      	ldr	r3, [pc, #356]	@ (800fbfc <tcp_slowtmr+0x584>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	1ad3      	subs	r3, r2, r3
 800faa0:	2bf0      	cmp	r3, #240	@ 0xf0
 800faa2:	d904      	bls.n	800faae <tcp_slowtmr+0x436>
        ++pcb_remove;
 800faa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800faa8:	3301      	adds	r3, #1
 800faaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800faae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d060      	beq.n	800fb78 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800fab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fabc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800fabe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fac0:	f000 fcea 	bl	8010498 <tcp_pcb_purge>
      if (prev != NULL) {
 800fac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d010      	beq.n	800faec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800faca:	4b50      	ldr	r3, [pc, #320]	@ (800fc0c <tcp_slowtmr+0x594>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d106      	bne.n	800fae2 <tcp_slowtmr+0x46a>
 800fad4:	4b4e      	ldr	r3, [pc, #312]	@ (800fc10 <tcp_slowtmr+0x598>)
 800fad6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800fada:	494e      	ldr	r1, [pc, #312]	@ (800fc14 <tcp_slowtmr+0x59c>)
 800fadc:	484e      	ldr	r0, [pc, #312]	@ (800fc18 <tcp_slowtmr+0x5a0>)
 800fade:	f008 fcc3 	bl	8018468 <iprintf>
        prev->next = pcb->next;
 800fae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae4:	68da      	ldr	r2, [r3, #12]
 800fae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae8:	60da      	str	r2, [r3, #12]
 800faea:	e00f      	b.n	800fb0c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800faec:	4b47      	ldr	r3, [pc, #284]	@ (800fc0c <tcp_slowtmr+0x594>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d006      	beq.n	800fb04 <tcp_slowtmr+0x48c>
 800faf6:	4b46      	ldr	r3, [pc, #280]	@ (800fc10 <tcp_slowtmr+0x598>)
 800faf8:	f240 5271 	movw	r2, #1393	@ 0x571
 800fafc:	4947      	ldr	r1, [pc, #284]	@ (800fc1c <tcp_slowtmr+0x5a4>)
 800fafe:	4846      	ldr	r0, [pc, #280]	@ (800fc18 <tcp_slowtmr+0x5a0>)
 800fb00:	f008 fcb2 	bl	8018468 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	4a40      	ldr	r2, [pc, #256]	@ (800fc0c <tcp_slowtmr+0x594>)
 800fb0a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800fb0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d013      	beq.n	800fb3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb16:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fb18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb1a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fb1c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800fb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb20:	3304      	adds	r3, #4
 800fb22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb24:	8ad2      	ldrh	r2, [r2, #22]
 800fb26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb28:	8b09      	ldrh	r1, [r1, #24]
 800fb2a:	9102      	str	r1, [sp, #8]
 800fb2c:	9201      	str	r2, [sp, #4]
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	462b      	mov	r3, r5
 800fb32:	4622      	mov	r2, r4
 800fb34:	4601      	mov	r1, r0
 800fb36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb38:	f004 fec8 	bl	80148cc <tcp_rst>
      err_arg = pcb->callback_arg;
 800fb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb3e:	691b      	ldr	r3, [r3, #16]
 800fb40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb44:	7d1b      	ldrb	r3, [r3, #20]
 800fb46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fb4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fb52:	6838      	ldr	r0, [r7, #0]
 800fb54:	f7fe ffdc 	bl	800eb10 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800fb58:	4b31      	ldr	r3, [pc, #196]	@ (800fc20 <tcp_slowtmr+0x5a8>)
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d004      	beq.n	800fb6e <tcp_slowtmr+0x4f6>
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f06f 010c 	mvn.w	r1, #12
 800fb6a:	68b8      	ldr	r0, [r7, #8]
 800fb6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb6e:	4b2c      	ldr	r3, [pc, #176]	@ (800fc20 <tcp_slowtmr+0x5a8>)
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d037      	beq.n	800fbe6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fb76:	e592      	b.n	800f69e <tcp_slowtmr+0x26>
      prev = pcb;
 800fb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800fb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb84:	7f1b      	ldrb	r3, [r3, #28]
 800fb86:	3301      	adds	r3, #1
 800fb88:	b2da      	uxtb	r2, r3
 800fb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb90:	7f1a      	ldrb	r2, [r3, #28]
 800fb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb94:	7f5b      	ldrb	r3, [r3, #29]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d325      	bcc.n	800fbe6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800fba0:	4b1f      	ldr	r3, [pc, #124]	@ (800fc20 <tcp_slowtmr+0x5a8>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00b      	beq.n	800fbc8 <tcp_slowtmr+0x550>
 800fbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fbb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbb8:	6912      	ldr	r2, [r2, #16]
 800fbba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fbbc:	4610      	mov	r0, r2
 800fbbe:	4798      	blx	r3
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800fbc6:	e002      	b.n	800fbce <tcp_slowtmr+0x556>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800fbce:	4b14      	ldr	r3, [pc, #80]	@ (800fc20 <tcp_slowtmr+0x5a8>)
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f47f ad62 	bne.w	800f69c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fbd8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d102      	bne.n	800fbe6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800fbe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fbe2:	f004 f8bf 	bl	8013d64 <tcp_output>
  while (pcb != NULL) {
 800fbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f47f ad5e 	bne.w	800f6aa <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800fbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800fc24 <tcp_slowtmr+0x5ac>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fbf8:	e069      	b.n	800fcce <tcp_slowtmr+0x656>
 800fbfa:	bf00      	nop
 800fbfc:	2000f110 	.word	0x2000f110
 800fc00:	000a4cb8 	.word	0x000a4cb8
 800fc04:	10624dd3 	.word	0x10624dd3
 800fc08:	000124f8 	.word	0x000124f8
 800fc0c:	2000f11c 	.word	0x2000f11c
 800fc10:	0801b0e4 	.word	0x0801b0e4
 800fc14:	0801b51c 	.word	0x0801b51c
 800fc18:	0801b128 	.word	0x0801b128
 800fc1c:	0801b548 	.word	0x0801b548
 800fc20:	2000f124 	.word	0x2000f124
 800fc24:	2000f120 	.word	0x2000f120
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc2a:	7d1b      	ldrb	r3, [r3, #20]
 800fc2c:	2b0a      	cmp	r3, #10
 800fc2e:	d006      	beq.n	800fc3e <tcp_slowtmr+0x5c6>
 800fc30:	4b2b      	ldr	r3, [pc, #172]	@ (800fce0 <tcp_slowtmr+0x668>)
 800fc32:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800fc36:	492b      	ldr	r1, [pc, #172]	@ (800fce4 <tcp_slowtmr+0x66c>)
 800fc38:	482b      	ldr	r0, [pc, #172]	@ (800fce8 <tcp_slowtmr+0x670>)
 800fc3a:	f008 fc15 	bl	8018468 <iprintf>
    pcb_remove = 0;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc44:	4b29      	ldr	r3, [pc, #164]	@ (800fcec <tcp_slowtmr+0x674>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	2bf0      	cmp	r3, #240	@ 0xf0
 800fc50:	d904      	bls.n	800fc5c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800fc52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc56:	3301      	adds	r3, #1
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d02f      	beq.n	800fcc4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc66:	f000 fc17 	bl	8010498 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d010      	beq.n	800fc92 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc70:	4b1f      	ldr	r3, [pc, #124]	@ (800fcf0 <tcp_slowtmr+0x678>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d106      	bne.n	800fc88 <tcp_slowtmr+0x610>
 800fc7a:	4b19      	ldr	r3, [pc, #100]	@ (800fce0 <tcp_slowtmr+0x668>)
 800fc7c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800fc80:	491c      	ldr	r1, [pc, #112]	@ (800fcf4 <tcp_slowtmr+0x67c>)
 800fc82:	4819      	ldr	r0, [pc, #100]	@ (800fce8 <tcp_slowtmr+0x670>)
 800fc84:	f008 fbf0 	bl	8018468 <iprintf>
        prev->next = pcb->next;
 800fc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc8a:	68da      	ldr	r2, [r3, #12]
 800fc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8e:	60da      	str	r2, [r3, #12]
 800fc90:	e00f      	b.n	800fcb2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc92:	4b17      	ldr	r3, [pc, #92]	@ (800fcf0 <tcp_slowtmr+0x678>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d006      	beq.n	800fcaa <tcp_slowtmr+0x632>
 800fc9c:	4b10      	ldr	r3, [pc, #64]	@ (800fce0 <tcp_slowtmr+0x668>)
 800fc9e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800fca2:	4915      	ldr	r1, [pc, #84]	@ (800fcf8 <tcp_slowtmr+0x680>)
 800fca4:	4810      	ldr	r0, [pc, #64]	@ (800fce8 <tcp_slowtmr+0x670>)
 800fca6:	f008 fbdf 	bl	8018468 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	4a10      	ldr	r2, [pc, #64]	@ (800fcf0 <tcp_slowtmr+0x678>)
 800fcb0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fcb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800fcbc:	69f8      	ldr	r0, [r7, #28]
 800fcbe:	f7fe ff27 	bl	800eb10 <tcp_free>
 800fcc2:	e004      	b.n	800fcce <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800fcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800fcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800fcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1a9      	bne.n	800fc28 <tcp_slowtmr+0x5b0>
    }
  }
}
 800fcd4:	bf00      	nop
 800fcd6:	bf00      	nop
 800fcd8:	3730      	adds	r7, #48	@ 0x30
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bdb0      	pop	{r4, r5, r7, pc}
 800fcde:	bf00      	nop
 800fce0:	0801b0e4 	.word	0x0801b0e4
 800fce4:	0801b574 	.word	0x0801b574
 800fce8:	0801b128 	.word	0x0801b128
 800fcec:	2000f110 	.word	0x2000f110
 800fcf0:	2000f120 	.word	0x2000f120
 800fcf4:	0801b5a4 	.word	0x0801b5a4
 800fcf8:	0801b5cc 	.word	0x0801b5cc

0800fcfc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fd02:	4b2d      	ldr	r3, [pc, #180]	@ (800fdb8 <tcp_fasttmr+0xbc>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	3301      	adds	r3, #1
 800fd08:	b2da      	uxtb	r2, r3
 800fd0a:	4b2b      	ldr	r3, [pc, #172]	@ (800fdb8 <tcp_fasttmr+0xbc>)
 800fd0c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fd0e:	4b2b      	ldr	r3, [pc, #172]	@ (800fdbc <tcp_fasttmr+0xc0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fd14:	e048      	b.n	800fda8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	7f9a      	ldrb	r2, [r3, #30]
 800fd1a:	4b27      	ldr	r3, [pc, #156]	@ (800fdb8 <tcp_fasttmr+0xbc>)
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d03f      	beq.n	800fda2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fd22:	4b25      	ldr	r3, [pc, #148]	@ (800fdb8 <tcp_fasttmr+0xbc>)
 800fd24:	781a      	ldrb	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	8b5b      	ldrh	r3, [r3, #26]
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d010      	beq.n	800fd58 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8b5b      	ldrh	r3, [r3, #26]
 800fd3a:	f043 0302 	orr.w	r3, r3, #2
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f004 f80d 	bl	8013d64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8b5b      	ldrh	r3, [r3, #26]
 800fd4e:	f023 0303 	bic.w	r3, r3, #3
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8b5b      	ldrh	r3, [r3, #26]
 800fd5c:	f003 0308 	and.w	r3, r3, #8
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d009      	beq.n	800fd78 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8b5b      	ldrh	r3, [r3, #26]
 800fd68:	f023 0308 	bic.w	r3, r3, #8
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f7ff f860 	bl	800ee38 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00a      	beq.n	800fd9c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd86:	4b0e      	ldr	r3, [pc, #56]	@ (800fdc0 <tcp_fasttmr+0xc4>)
 800fd88:	2200      	movs	r2, #0
 800fd8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 f819 	bl	800fdc4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd92:	4b0b      	ldr	r3, [pc, #44]	@ (800fdc0 <tcp_fasttmr+0xc4>)
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d000      	beq.n	800fd9c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd9a:	e7b8      	b.n	800fd0e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	607b      	str	r3, [r7, #4]
 800fda0:	e002      	b.n	800fda8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1b3      	bne.n	800fd16 <tcp_fasttmr+0x1a>
    }
  }
}
 800fdae:	bf00      	nop
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	2000f126 	.word	0x2000f126
 800fdbc:	2000f11c 	.word	0x2000f11c
 800fdc0:	2000f124 	.word	0x2000f124

0800fdc4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fdc4:	b590      	push	{r4, r7, lr}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d109      	bne.n	800fde6 <tcp_process_refused_data+0x22>
 800fdd2:	4b37      	ldr	r3, [pc, #220]	@ (800feb0 <tcp_process_refused_data+0xec>)
 800fdd4:	f240 6209 	movw	r2, #1545	@ 0x609
 800fdd8:	4936      	ldr	r1, [pc, #216]	@ (800feb4 <tcp_process_refused_data+0xf0>)
 800fdda:	4837      	ldr	r0, [pc, #220]	@ (800feb8 <tcp_process_refused_data+0xf4>)
 800fddc:	f008 fb44 	bl	8018468 <iprintf>
 800fde0:	f06f 030f 	mvn.w	r3, #15
 800fde4:	e060      	b.n	800fea8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdea:	7b5b      	ldrb	r3, [r3, #13]
 800fdec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdf2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d00b      	beq.n	800fe1c <tcp_process_refused_data+0x58>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6918      	ldr	r0, [r3, #16]
 800fe0e:	2300      	movs	r3, #0
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	47a0      	blx	r4
 800fe16:	4603      	mov	r3, r0
 800fe18:	73fb      	strb	r3, [r7, #15]
 800fe1a:	e007      	b.n	800fe2c <tcp_process_refused_data+0x68>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	6879      	ldr	r1, [r7, #4]
 800fe22:	2000      	movs	r0, #0
 800fe24:	f000 f8c2 	bl	800ffac <tcp_recv_null>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fe2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d12a      	bne.n	800fe8a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fe34:	7bbb      	ldrb	r3, [r7, #14]
 800fe36:	f003 0320 	and.w	r3, r3, #32
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d033      	beq.n	800fea6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe42:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fe46:	d005      	beq.n	800fe54 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00b      	beq.n	800fe76 <tcp_process_refused_data+0xb2>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6918      	ldr	r0, [r3, #16]
 800fe68:	2300      	movs	r3, #0
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	6879      	ldr	r1, [r7, #4]
 800fe6e:	47a0      	blx	r4
 800fe70:	4603      	mov	r3, r0
 800fe72:	73fb      	strb	r3, [r7, #15]
 800fe74:	e001      	b.n	800fe7a <tcp_process_refused_data+0xb6>
 800fe76:	2300      	movs	r3, #0
 800fe78:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe7e:	f113 0f0d 	cmn.w	r3, #13
 800fe82:	d110      	bne.n	800fea6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe84:	f06f 030c 	mvn.w	r3, #12
 800fe88:	e00e      	b.n	800fea8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe8e:	f113 0f0d 	cmn.w	r3, #13
 800fe92:	d102      	bne.n	800fe9a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe94:	f06f 030c 	mvn.w	r3, #12
 800fe98:	e006      	b.n	800fea8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800fea0:	f06f 0304 	mvn.w	r3, #4
 800fea4:	e000      	b.n	800fea8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3714      	adds	r7, #20
 800feac:	46bd      	mov	sp, r7
 800feae:	bd90      	pop	{r4, r7, pc}
 800feb0:	0801b0e4 	.word	0x0801b0e4
 800feb4:	0801b5f4 	.word	0x0801b5f4
 800feb8:	0801b128 	.word	0x0801b128

0800febc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fec4:	e007      	b.n	800fed6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f80a 	bl	800fee6 <tcp_seg_free>
    seg = next;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1f4      	bne.n	800fec6 <tcp_segs_free+0xa>
  }
}
 800fedc:	bf00      	nop
 800fede:	bf00      	nop
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b082      	sub	sp, #8
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00c      	beq.n	800ff0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d004      	beq.n	800ff06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	685b      	ldr	r3, [r3, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fe fb49 	bl	800e598 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ff06:	6879      	ldr	r1, [r7, #4]
 800ff08:	2003      	movs	r0, #3
 800ff0a:	f7fd fca1 	bl	800d850 <memp_free>
  }
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
	...

0800ff18 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	460b      	mov	r3, r1
 800ff22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d107      	bne.n	800ff3a <tcp_setprio+0x22>
 800ff2a:	4b07      	ldr	r3, [pc, #28]	@ (800ff48 <tcp_setprio+0x30>)
 800ff2c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800ff30:	4906      	ldr	r1, [pc, #24]	@ (800ff4c <tcp_setprio+0x34>)
 800ff32:	4807      	ldr	r0, [pc, #28]	@ (800ff50 <tcp_setprio+0x38>)
 800ff34:	f008 fa98 	bl	8018468 <iprintf>
 800ff38:	e002      	b.n	800ff40 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	78fa      	ldrb	r2, [r7, #3]
 800ff3e:	755a      	strb	r2, [r3, #21]
}
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	0801b0e4 	.word	0x0801b0e4
 800ff4c:	0801b61c 	.word	0x0801b61c
 800ff50:	0801b128 	.word	0x0801b128

0800ff54 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b084      	sub	sp, #16
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d106      	bne.n	800ff70 <tcp_seg_copy+0x1c>
 800ff62:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa0 <tcp_seg_copy+0x4c>)
 800ff64:	f240 6282 	movw	r2, #1666	@ 0x682
 800ff68:	490e      	ldr	r1, [pc, #56]	@ (800ffa4 <tcp_seg_copy+0x50>)
 800ff6a:	480f      	ldr	r0, [pc, #60]	@ (800ffa8 <tcp_seg_copy+0x54>)
 800ff6c:	f008 fa7c 	bl	8018468 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ff70:	2003      	movs	r0, #3
 800ff72:	f7fd fbf7 	bl	800d764 <memp_malloc>
 800ff76:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <tcp_seg_copy+0x2e>
    return NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e00a      	b.n	800ff98 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ff82:	2210      	movs	r2, #16
 800ff84:	6879      	ldr	r1, [r7, #4]
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f008 fbf7 	bl	801877a <memcpy>
  pbuf_ref(cseg->p);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe fba7 	bl	800e6e4 <pbuf_ref>
  return cseg;
 800ff96:	68fb      	ldr	r3, [r7, #12]
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	0801b0e4 	.word	0x0801b0e4
 800ffa4:	0801b638 	.word	0x0801b638
 800ffa8:	0801b128 	.word	0x0801b128

0800ffac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d109      	bne.n	800ffd4 <tcp_recv_null+0x28>
 800ffc0:	4b12      	ldr	r3, [pc, #72]	@ (801000c <tcp_recv_null+0x60>)
 800ffc2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ffc6:	4912      	ldr	r1, [pc, #72]	@ (8010010 <tcp_recv_null+0x64>)
 800ffc8:	4812      	ldr	r0, [pc, #72]	@ (8010014 <tcp_recv_null+0x68>)
 800ffca:	f008 fa4d 	bl	8018468 <iprintf>
 800ffce:	f06f 030f 	mvn.w	r3, #15
 800ffd2:	e016      	b.n	8010002 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d009      	beq.n	800ffee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	891b      	ldrh	r3, [r3, #8]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68b8      	ldr	r0, [r7, #8]
 800ffe2:	f7ff fab3 	bl	800f54c <tcp_recved>
    pbuf_free(p);
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f7fe fad6 	bl	800e598 <pbuf_free>
 800ffec:	e008      	b.n	8010000 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ffee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d104      	bne.n	8010000 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fff6:	68b8      	ldr	r0, [r7, #8]
 800fff8:	f7fe ff88 	bl	800ef0c <tcp_close>
 800fffc:	4603      	mov	r3, r0
 800fffe:	e000      	b.n	8010002 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	0801b0e4 	.word	0x0801b0e4
 8010010:	0801b654 	.word	0x0801b654
 8010014:	0801b128 	.word	0x0801b128

08010018 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b086      	sub	sp, #24
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010026:	2b00      	cmp	r3, #0
 8010028:	db01      	blt.n	801002e <tcp_kill_prio+0x16>
 801002a:	79fb      	ldrb	r3, [r7, #7]
 801002c:	e000      	b.n	8010030 <tcp_kill_prio+0x18>
 801002e:	237f      	movs	r3, #127	@ 0x7f
 8010030:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010032:	7afb      	ldrb	r3, [r7, #11]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d034      	beq.n	80100a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010038:	7afb      	ldrb	r3, [r7, #11]
 801003a:	3b01      	subs	r3, #1
 801003c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010042:	2300      	movs	r3, #0
 8010044:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010046:	4b19      	ldr	r3, [pc, #100]	@ (80100ac <tcp_kill_prio+0x94>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	617b      	str	r3, [r7, #20]
 801004c:	e01f      	b.n	801008e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	7d5b      	ldrb	r3, [r3, #21]
 8010052:	7afa      	ldrb	r2, [r7, #11]
 8010054:	429a      	cmp	r2, r3
 8010056:	d80c      	bhi.n	8010072 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801005c:	7afa      	ldrb	r2, [r7, #11]
 801005e:	429a      	cmp	r2, r3
 8010060:	d112      	bne.n	8010088 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010062:	4b13      	ldr	r3, [pc, #76]	@ (80100b0 <tcp_kill_prio+0x98>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	68fa      	ldr	r2, [r7, #12]
 801006e:	429a      	cmp	r2, r3
 8010070:	d80a      	bhi.n	8010088 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010072:	4b0f      	ldr	r3, [pc, #60]	@ (80100b0 <tcp_kill_prio+0x98>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	7d5b      	ldrb	r3, [r3, #21]
 8010086:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	617b      	str	r3, [r7, #20]
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d1dc      	bne.n	801004e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801009a:	6938      	ldr	r0, [r7, #16]
 801009c:	f7ff f87c 	bl	800f198 <tcp_abort>
 80100a0:	e000      	b.n	80100a4 <tcp_kill_prio+0x8c>
    return;
 80100a2:	bf00      	nop
  }
}
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	2000f11c 	.word	0x2000f11c
 80100b0:	2000f110 	.word	0x2000f110

080100b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b086      	sub	sp, #24
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	4603      	mov	r3, r0
 80100bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80100be:	79fb      	ldrb	r3, [r7, #7]
 80100c0:	2b08      	cmp	r3, #8
 80100c2:	d009      	beq.n	80100d8 <tcp_kill_state+0x24>
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	2b09      	cmp	r3, #9
 80100c8:	d006      	beq.n	80100d8 <tcp_kill_state+0x24>
 80100ca:	4b1a      	ldr	r3, [pc, #104]	@ (8010134 <tcp_kill_state+0x80>)
 80100cc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80100d0:	4919      	ldr	r1, [pc, #100]	@ (8010138 <tcp_kill_state+0x84>)
 80100d2:	481a      	ldr	r0, [pc, #104]	@ (801013c <tcp_kill_state+0x88>)
 80100d4:	f008 f9c8 	bl	8018468 <iprintf>

  inactivity = 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80100dc:	2300      	movs	r3, #0
 80100de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e0:	4b17      	ldr	r3, [pc, #92]	@ (8010140 <tcp_kill_state+0x8c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	e017      	b.n	8010118 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	7d1b      	ldrb	r3, [r3, #20]
 80100ec:	79fa      	ldrb	r2, [r7, #7]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d10f      	bne.n	8010112 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80100f2:	4b14      	ldr	r3, [pc, #80]	@ (8010144 <tcp_kill_state+0x90>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	6a1b      	ldr	r3, [r3, #32]
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	68fa      	ldr	r2, [r7, #12]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d807      	bhi.n	8010112 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010102:	4b10      	ldr	r3, [pc, #64]	@ (8010144 <tcp_kill_state+0x90>)
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	6a1b      	ldr	r3, [r3, #32]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	617b      	str	r3, [r7, #20]
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1e4      	bne.n	80100e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d003      	beq.n	801012c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010124:	2100      	movs	r1, #0
 8010126:	6938      	ldr	r0, [r7, #16]
 8010128:	f7fe ff78 	bl	800f01c <tcp_abandon>
  }
}
 801012c:	bf00      	nop
 801012e:	3718      	adds	r7, #24
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	0801b0e4 	.word	0x0801b0e4
 8010138:	0801b670 	.word	0x0801b670
 801013c:	0801b128 	.word	0x0801b128
 8010140:	2000f11c 	.word	0x2000f11c
 8010144:	2000f110 	.word	0x2000f110

08010148 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801014e:	2300      	movs	r3, #0
 8010150:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010156:	4b12      	ldr	r3, [pc, #72]	@ (80101a0 <tcp_kill_timewait+0x58>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	e012      	b.n	8010184 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801015e:	4b11      	ldr	r3, [pc, #68]	@ (80101a4 <tcp_kill_timewait+0x5c>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6a1b      	ldr	r3, [r3, #32]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	429a      	cmp	r2, r3
 801016c:	d807      	bhi.n	801017e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801016e:	4b0d      	ldr	r3, [pc, #52]	@ (80101a4 <tcp_kill_timewait+0x5c>)
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	6a1b      	ldr	r3, [r3, #32]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	60fb      	str	r3, [r7, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1e9      	bne.n	801015e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010190:	68b8      	ldr	r0, [r7, #8]
 8010192:	f7ff f801 	bl	800f198 <tcp_abort>
  }
}
 8010196:	bf00      	nop
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	2000f120 	.word	0x2000f120
 80101a4:	2000f110 	.word	0x2000f110

080101a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80101ae:	4b10      	ldr	r3, [pc, #64]	@ (80101f0 <tcp_handle_closepend+0x48>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101b4:	e014      	b.n	80101e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	8b5b      	ldrh	r3, [r3, #26]
 80101c0:	f003 0308 	and.w	r3, r3, #8
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d009      	beq.n	80101dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	8b5b      	ldrh	r3, [r3, #26]
 80101cc:	f023 0308 	bic.w	r3, r3, #8
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7fe fe2e 	bl	800ee38 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d1e7      	bne.n	80101b6 <tcp_handle_closepend+0xe>
  }
}
 80101e6:	bf00      	nop
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	2000f11c 	.word	0x2000f11c

080101f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	4603      	mov	r3, r0
 80101fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101fe:	2001      	movs	r0, #1
 8010200:	f7fd fab0 	bl	800d764 <memp_malloc>
 8010204:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d126      	bne.n	801025a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801020c:	f7ff ffcc 	bl	80101a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010210:	f7ff ff9a 	bl	8010148 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010214:	2001      	movs	r0, #1
 8010216:	f7fd faa5 	bl	800d764 <memp_malloc>
 801021a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d11b      	bne.n	801025a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010222:	2009      	movs	r0, #9
 8010224:	f7ff ff46 	bl	80100b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010228:	2001      	movs	r0, #1
 801022a:	f7fd fa9b 	bl	800d764 <memp_malloc>
 801022e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d111      	bne.n	801025a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010236:	2008      	movs	r0, #8
 8010238:	f7ff ff3c 	bl	80100b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801023c:	2001      	movs	r0, #1
 801023e:	f7fd fa91 	bl	800d764 <memp_malloc>
 8010242:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d107      	bne.n	801025a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801024a:	79fb      	ldrb	r3, [r7, #7]
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff fee3 	bl	8010018 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010252:	2001      	movs	r0, #1
 8010254:	f7fd fa86 	bl	800d764 <memp_malloc>
 8010258:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d03f      	beq.n	80102e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010260:	229c      	movs	r2, #156	@ 0x9c
 8010262:	2100      	movs	r1, #0
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f008 f99e 	bl	80185a6 <memset>
    pcb->prio = prio;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	79fa      	ldrb	r2, [r7, #7]
 801026e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8010276:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8010280:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	22ff      	movs	r2, #255	@ 0xff
 801028e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010296:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2206      	movs	r2, #6
 801029c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2206      	movs	r2, #6
 80102a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80102ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2201      	movs	r2, #1
 80102b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80102b6:	4b0d      	ldr	r3, [pc, #52]	@ (80102ec <tcp_alloc+0xf8>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80102be:	4b0c      	ldr	r3, [pc, #48]	@ (80102f0 <tcp_alloc+0xfc>)
 80102c0:	781a      	ldrb	r2, [r3, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80102cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	4a08      	ldr	r2, [pc, #32]	@ (80102f4 <tcp_alloc+0x100>)
 80102d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	4a07      	ldr	r2, [pc, #28]	@ (80102f8 <tcp_alloc+0x104>)
 80102dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80102e0:	68fb      	ldr	r3, [r7, #12]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3710      	adds	r7, #16
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	2000f110 	.word	0x2000f110
 80102f0:	2000f126 	.word	0x2000f126
 80102f4:	0800ffad 	.word	0x0800ffad
 80102f8:	006ddd00 	.word	0x006ddd00

080102fc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010306:	2040      	movs	r0, #64	@ 0x40
 8010308:	f7ff ff74 	bl	80101f4 <tcp_alloc>
 801030c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801030e:	68fb      	ldr	r3, [r7, #12]
}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010318:	b480      	push	{r7}
 801031a:	b083      	sub	sp, #12
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	611a      	str	r2, [r3, #16]
  }
}
 801032e:	bf00      	nop
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
	...

0801033c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00e      	beq.n	801036a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	7d1b      	ldrb	r3, [r3, #20]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d106      	bne.n	8010362 <tcp_recv+0x26>
 8010354:	4b07      	ldr	r3, [pc, #28]	@ (8010374 <tcp_recv+0x38>)
 8010356:	f240 72df 	movw	r2, #2015	@ 0x7df
 801035a:	4907      	ldr	r1, [pc, #28]	@ (8010378 <tcp_recv+0x3c>)
 801035c:	4807      	ldr	r0, [pc, #28]	@ (801037c <tcp_recv+0x40>)
 801035e:	f008 f883 	bl	8018468 <iprintf>
    pcb->recv = recv;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	683a      	ldr	r2, [r7, #0]
 8010366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801036a:	bf00      	nop
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	0801b0e4 	.word	0x0801b0e4
 8010378:	0801b680 	.word	0x0801b680
 801037c:	0801b128 	.word	0x0801b128

08010380 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00e      	beq.n	80103ae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	7d1b      	ldrb	r3, [r3, #20]
 8010394:	2b01      	cmp	r3, #1
 8010396:	d106      	bne.n	80103a6 <tcp_sent+0x26>
 8010398:	4b07      	ldr	r3, [pc, #28]	@ (80103b8 <tcp_sent+0x38>)
 801039a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801039e:	4907      	ldr	r1, [pc, #28]	@ (80103bc <tcp_sent+0x3c>)
 80103a0:	4807      	ldr	r0, [pc, #28]	@ (80103c0 <tcp_sent+0x40>)
 80103a2:	f008 f861 	bl	8018468 <iprintf>
    pcb->sent = sent;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80103ae:	bf00      	nop
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	0801b0e4 	.word	0x0801b0e4
 80103bc:	0801b6a8 	.word	0x0801b6a8
 80103c0:	0801b128 	.word	0x0801b128

080103c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00e      	beq.n	80103f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	7d1b      	ldrb	r3, [r3, #20]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d106      	bne.n	80103ea <tcp_err+0x26>
 80103dc:	4b07      	ldr	r3, [pc, #28]	@ (80103fc <tcp_err+0x38>)
 80103de:	f640 020d 	movw	r2, #2061	@ 0x80d
 80103e2:	4907      	ldr	r1, [pc, #28]	@ (8010400 <tcp_err+0x3c>)
 80103e4:	4807      	ldr	r0, [pc, #28]	@ (8010404 <tcp_err+0x40>)
 80103e6:	f008 f83f 	bl	8018468 <iprintf>
    pcb->errf = err;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	683a      	ldr	r2, [r7, #0]
 80103ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	0801b0e4 	.word	0x0801b0e4
 8010400:	0801b6d0 	.word	0x0801b6d0
 8010404:	0801b128 	.word	0x0801b128

08010408 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d008      	beq.n	801042a <tcp_accept+0x22>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	7d1b      	ldrb	r3, [r3, #20]
 801041c:	2b01      	cmp	r3, #1
 801041e:	d104      	bne.n	801042a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	619a      	str	r2, [r3, #24]
  }
}
 801042a:	bf00      	nop
 801042c:	3714      	adds	r7, #20
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
	...

08010438 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	4613      	mov	r3, r2
 8010444:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d107      	bne.n	801045c <tcp_poll+0x24>
 801044c:	4b0e      	ldr	r3, [pc, #56]	@ (8010488 <tcp_poll+0x50>)
 801044e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8010452:	490e      	ldr	r1, [pc, #56]	@ (801048c <tcp_poll+0x54>)
 8010454:	480e      	ldr	r0, [pc, #56]	@ (8010490 <tcp_poll+0x58>)
 8010456:	f008 f807 	bl	8018468 <iprintf>
 801045a:	e011      	b.n	8010480 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	7d1b      	ldrb	r3, [r3, #20]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d106      	bne.n	8010472 <tcp_poll+0x3a>
 8010464:	4b08      	ldr	r3, [pc, #32]	@ (8010488 <tcp_poll+0x50>)
 8010466:	f640 023e 	movw	r2, #2110	@ 0x83e
 801046a:	490a      	ldr	r1, [pc, #40]	@ (8010494 <tcp_poll+0x5c>)
 801046c:	4808      	ldr	r0, [pc, #32]	@ (8010490 <tcp_poll+0x58>)
 801046e:	f007 fffb 	bl	8018468 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	79fa      	ldrb	r2, [r7, #7]
 801047e:	775a      	strb	r2, [r3, #29]
}
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	0801b0e4 	.word	0x0801b0e4
 801048c:	0801b6f8 	.word	0x0801b6f8
 8010490:	0801b128 	.word	0x0801b128
 8010494:	0801b710 	.word	0x0801b710

08010498 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d107      	bne.n	80104b6 <tcp_pcb_purge+0x1e>
 80104a6:	4b21      	ldr	r3, [pc, #132]	@ (801052c <tcp_pcb_purge+0x94>)
 80104a8:	f640 0251 	movw	r2, #2129	@ 0x851
 80104ac:	4920      	ldr	r1, [pc, #128]	@ (8010530 <tcp_pcb_purge+0x98>)
 80104ae:	4821      	ldr	r0, [pc, #132]	@ (8010534 <tcp_pcb_purge+0x9c>)
 80104b0:	f007 ffda 	bl	8018468 <iprintf>
 80104b4:	e037      	b.n	8010526 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	7d1b      	ldrb	r3, [r3, #20]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d033      	beq.n	8010526 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80104c2:	2b0a      	cmp	r3, #10
 80104c4:	d02f      	beq.n	8010526 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d02b      	beq.n	8010526 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d007      	beq.n	80104e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe f85c 	bl	800e598 <pbuf_free>
      pcb->refused_data = NULL;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 f986 	bl	8010800 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104fa:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010500:	4618      	mov	r0, r3
 8010502:	f7ff fcdb 	bl	800febc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff fcd6 	bl	800febc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	0801b0e4 	.word	0x0801b0e4
 8010530:	0801b730 	.word	0x0801b730
 8010534:	0801b128 	.word	0x0801b128

08010538 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <tcp_pcb_remove+0x1e>
 8010548:	4b3e      	ldr	r3, [pc, #248]	@ (8010644 <tcp_pcb_remove+0x10c>)
 801054a:	f640 0283 	movw	r2, #2179	@ 0x883
 801054e:	493e      	ldr	r1, [pc, #248]	@ (8010648 <tcp_pcb_remove+0x110>)
 8010550:	483e      	ldr	r0, [pc, #248]	@ (801064c <tcp_pcb_remove+0x114>)
 8010552:	f007 ff89 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d106      	bne.n	801056a <tcp_pcb_remove+0x32>
 801055c:	4b39      	ldr	r3, [pc, #228]	@ (8010644 <tcp_pcb_remove+0x10c>)
 801055e:	f640 0284 	movw	r2, #2180	@ 0x884
 8010562:	493b      	ldr	r1, [pc, #236]	@ (8010650 <tcp_pcb_remove+0x118>)
 8010564:	4839      	ldr	r0, [pc, #228]	@ (801064c <tcp_pcb_remove+0x114>)
 8010566:	f007 ff7f 	bl	8018468 <iprintf>

  TCP_RMV(pcblist, pcb);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	683a      	ldr	r2, [r7, #0]
 8010570:	429a      	cmp	r2, r3
 8010572:	d105      	bne.n	8010580 <tcp_pcb_remove+0x48>
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	68da      	ldr	r2, [r3, #12]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	601a      	str	r2, [r3, #0]
 801057e:	e013      	b.n	80105a8 <tcp_pcb_remove+0x70>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60fb      	str	r3, [r7, #12]
 8010586:	e00c      	b.n	80105a2 <tcp_pcb_remove+0x6a>
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	429a      	cmp	r2, r3
 8010590:	d104      	bne.n	801059c <tcp_pcb_remove+0x64>
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	68da      	ldr	r2, [r3, #12]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	e005      	b.n	80105a8 <tcp_pcb_remove+0x70>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	60fb      	str	r3, [r7, #12]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1ef      	bne.n	8010588 <tcp_pcb_remove+0x50>
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2200      	movs	r2, #0
 80105ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80105ae:	6838      	ldr	r0, [r7, #0]
 80105b0:	f7ff ff72 	bl	8010498 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	7d1b      	ldrb	r3, [r3, #20]
 80105b8:	2b0a      	cmp	r3, #10
 80105ba:	d013      	beq.n	80105e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d00f      	beq.n	80105e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	8b5b      	ldrh	r3, [r3, #26]
 80105c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d009      	beq.n	80105e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	8b5b      	ldrh	r3, [r3, #26]
 80105d4:	f043 0302 	orr.w	r3, r3, #2
 80105d8:	b29a      	uxth	r2, r3
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80105de:	6838      	ldr	r0, [r7, #0]
 80105e0:	f003 fbc0 	bl	8013d64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	7d1b      	ldrb	r3, [r3, #20]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d020      	beq.n	801062e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d006      	beq.n	8010602 <tcp_pcb_remove+0xca>
 80105f4:	4b13      	ldr	r3, [pc, #76]	@ (8010644 <tcp_pcb_remove+0x10c>)
 80105f6:	f640 0293 	movw	r2, #2195	@ 0x893
 80105fa:	4916      	ldr	r1, [pc, #88]	@ (8010654 <tcp_pcb_remove+0x11c>)
 80105fc:	4813      	ldr	r0, [pc, #76]	@ (801064c <tcp_pcb_remove+0x114>)
 80105fe:	f007 ff33 	bl	8018468 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010606:	2b00      	cmp	r3, #0
 8010608:	d006      	beq.n	8010618 <tcp_pcb_remove+0xe0>
 801060a:	4b0e      	ldr	r3, [pc, #56]	@ (8010644 <tcp_pcb_remove+0x10c>)
 801060c:	f640 0294 	movw	r2, #2196	@ 0x894
 8010610:	4911      	ldr	r1, [pc, #68]	@ (8010658 <tcp_pcb_remove+0x120>)
 8010612:	480e      	ldr	r0, [pc, #56]	@ (801064c <tcp_pcb_remove+0x114>)
 8010614:	f007 ff28 	bl	8018468 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801061c:	2b00      	cmp	r3, #0
 801061e:	d006      	beq.n	801062e <tcp_pcb_remove+0xf6>
 8010620:	4b08      	ldr	r3, [pc, #32]	@ (8010644 <tcp_pcb_remove+0x10c>)
 8010622:	f640 0296 	movw	r2, #2198	@ 0x896
 8010626:	490d      	ldr	r1, [pc, #52]	@ (801065c <tcp_pcb_remove+0x124>)
 8010628:	4808      	ldr	r0, [pc, #32]	@ (801064c <tcp_pcb_remove+0x114>)
 801062a:	f007 ff1d 	bl	8018468 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	2200      	movs	r2, #0
 8010632:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2200      	movs	r2, #0
 8010638:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	0801b0e4 	.word	0x0801b0e4
 8010648:	0801b74c 	.word	0x0801b74c
 801064c:	0801b128 	.word	0x0801b128
 8010650:	0801b768 	.word	0x0801b768
 8010654:	0801b788 	.word	0x0801b788
 8010658:	0801b7a0 	.word	0x0801b7a0
 801065c:	0801b7bc 	.word	0x0801b7bc

08010660 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d106      	bne.n	801067c <tcp_next_iss+0x1c>
 801066e:	4b0a      	ldr	r3, [pc, #40]	@ (8010698 <tcp_next_iss+0x38>)
 8010670:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010674:	4909      	ldr	r1, [pc, #36]	@ (801069c <tcp_next_iss+0x3c>)
 8010676:	480a      	ldr	r0, [pc, #40]	@ (80106a0 <tcp_next_iss+0x40>)
 8010678:	f007 fef6 	bl	8018468 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801067c:	4b09      	ldr	r3, [pc, #36]	@ (80106a4 <tcp_next_iss+0x44>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	4b09      	ldr	r3, [pc, #36]	@ (80106a8 <tcp_next_iss+0x48>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4413      	add	r3, r2
 8010686:	4a07      	ldr	r2, [pc, #28]	@ (80106a4 <tcp_next_iss+0x44>)
 8010688:	6013      	str	r3, [r2, #0]
  return iss;
 801068a:	4b06      	ldr	r3, [pc, #24]	@ (80106a4 <tcp_next_iss+0x44>)
 801068c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	0801b0e4 	.word	0x0801b0e4
 801069c:	0801b7d4 	.word	0x0801b7d4
 80106a0:	0801b128 	.word	0x0801b128
 80106a4:	20000028 	.word	0x20000028
 80106a8:	2000f110 	.word	0x2000f110

080106ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	4603      	mov	r3, r0
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
 80106b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d106      	bne.n	80106ce <tcp_eff_send_mss_netif+0x22>
 80106c0:	4b14      	ldr	r3, [pc, #80]	@ (8010714 <tcp_eff_send_mss_netif+0x68>)
 80106c2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80106c6:	4914      	ldr	r1, [pc, #80]	@ (8010718 <tcp_eff_send_mss_netif+0x6c>)
 80106c8:	4814      	ldr	r0, [pc, #80]	@ (801071c <tcp_eff_send_mss_netif+0x70>)
 80106ca:	f007 fecd 	bl	8018468 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d101      	bne.n	80106d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80106d4:	89fb      	ldrh	r3, [r7, #14]
 80106d6:	e019      	b.n	801070c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80106dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80106de:	8afb      	ldrh	r3, [r7, #22]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d012      	beq.n	801070a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80106e4:	2328      	movs	r3, #40	@ 0x28
 80106e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80106e8:	8afa      	ldrh	r2, [r7, #22]
 80106ea:	8abb      	ldrh	r3, [r7, #20]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d904      	bls.n	80106fa <tcp_eff_send_mss_netif+0x4e>
 80106f0:	8afa      	ldrh	r2, [r7, #22]
 80106f2:	8abb      	ldrh	r3, [r7, #20]
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	e000      	b.n	80106fc <tcp_eff_send_mss_netif+0x50>
 80106fa:	2300      	movs	r3, #0
 80106fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80106fe:	8a7a      	ldrh	r2, [r7, #18]
 8010700:	89fb      	ldrh	r3, [r7, #14]
 8010702:	4293      	cmp	r3, r2
 8010704:	bf28      	it	cs
 8010706:	4613      	movcs	r3, r2
 8010708:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801070a:	89fb      	ldrh	r3, [r7, #14]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	0801b0e4 	.word	0x0801b0e4
 8010718:	0801b7f0 	.word	0x0801b7f0
 801071c:	0801b128 	.word	0x0801b128

08010720 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d119      	bne.n	8010768 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010734:	4b10      	ldr	r3, [pc, #64]	@ (8010778 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010736:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801073a:	4910      	ldr	r1, [pc, #64]	@ (801077c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801073c:	4810      	ldr	r0, [pc, #64]	@ (8010780 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801073e:	f007 fe93 	bl	8018468 <iprintf>

  while (pcb != NULL) {
 8010742:	e011      	b.n	8010768 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	429a      	cmp	r2, r3
 801074e:	d108      	bne.n	8010762 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7fe fd1e 	bl	800f198 <tcp_abort>
      pcb = next;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	60fb      	str	r3, [r7, #12]
 8010760:	e002      	b.n	8010768 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1ea      	bne.n	8010744 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801076e:	bf00      	nop
 8010770:	bf00      	nop
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	0801b0e4 	.word	0x0801b0e4
 801077c:	0801b818 	.word	0x0801b818
 8010780:	0801b128 	.word	0x0801b128

08010784 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d02a      	beq.n	80107ea <tcp_netif_ip_addr_changed+0x66>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d026      	beq.n	80107ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801079c:	4b15      	ldr	r3, [pc, #84]	@ (80107f4 <tcp_netif_ip_addr_changed+0x70>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	4619      	mov	r1, r3
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7ff ffbc 	bl	8010720 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80107a8:	4b13      	ldr	r3, [pc, #76]	@ (80107f8 <tcp_netif_ip_addr_changed+0x74>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4619      	mov	r1, r3
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7ff ffb6 	bl	8010720 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d017      	beq.n	80107ea <tcp_netif_ip_addr_changed+0x66>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d013      	beq.n	80107ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107c2:	4b0e      	ldr	r3, [pc, #56]	@ (80107fc <tcp_netif_ip_addr_changed+0x78>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	e00c      	b.n	80107e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	681a      	ldr	r2, [r3, #0]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d103      	bne.n	80107de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	60fb      	str	r3, [r7, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1ef      	bne.n	80107ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80107ea:	bf00      	nop
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	2000f11c 	.word	0x2000f11c
 80107f8:	2000f114 	.word	0x2000f114
 80107fc:	2000f118 	.word	0x2000f118

08010800 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801080c:	2b00      	cmp	r3, #0
 801080e:	d007      	beq.n	8010820 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010814:	4618      	mov	r0, r3
 8010816:	f7ff fb51 	bl	800febc <tcp_segs_free>
    pcb->ooseq = NULL;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010820:	bf00      	nop
 8010822:	3708      	adds	r7, #8
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010828:	b590      	push	{r4, r7, lr}
 801082a:	b08d      	sub	sp, #52	@ 0x34
 801082c:	af04      	add	r7, sp, #16
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d105      	bne.n	8010844 <tcp_input+0x1c>
 8010838:	4b9b      	ldr	r3, [pc, #620]	@ (8010aa8 <tcp_input+0x280>)
 801083a:	2283      	movs	r2, #131	@ 0x83
 801083c:	499b      	ldr	r1, [pc, #620]	@ (8010aac <tcp_input+0x284>)
 801083e:	489c      	ldr	r0, [pc, #624]	@ (8010ab0 <tcp_input+0x288>)
 8010840:	f007 fe12 	bl	8018468 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	4a9a      	ldr	r2, [pc, #616]	@ (8010ab4 <tcp_input+0x28c>)
 801084a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	895b      	ldrh	r3, [r3, #10]
 8010850:	2b13      	cmp	r3, #19
 8010852:	f240 83d1 	bls.w	8010ff8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010856:	4b98      	ldr	r3, [pc, #608]	@ (8010ab8 <tcp_input+0x290>)
 8010858:	695b      	ldr	r3, [r3, #20]
 801085a:	4a97      	ldr	r2, [pc, #604]	@ (8010ab8 <tcp_input+0x290>)
 801085c:	6812      	ldr	r2, [r2, #0]
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f006 fbc9 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	f040 83c7 	bne.w	8010ffc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801086e:	4b92      	ldr	r3, [pc, #584]	@ (8010ab8 <tcp_input+0x290>)
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010876:	2be0      	cmp	r3, #224	@ 0xe0
 8010878:	f000 83c0 	beq.w	8010ffc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801087c:	4b8d      	ldr	r3, [pc, #564]	@ (8010ab4 <tcp_input+0x28c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	899b      	ldrh	r3, [r3, #12]
 8010882:	b29b      	uxth	r3, r3
 8010884:	4618      	mov	r0, r3
 8010886:	f7fc fa5f 	bl	800cd48 <lwip_htons>
 801088a:	4603      	mov	r3, r0
 801088c:	0b1b      	lsrs	r3, r3, #12
 801088e:	b29b      	uxth	r3, r3
 8010890:	b2db      	uxtb	r3, r3
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010896:	7cbb      	ldrb	r3, [r7, #18]
 8010898:	2b13      	cmp	r3, #19
 801089a:	f240 83b1 	bls.w	8011000 <tcp_input+0x7d8>
 801089e:	7cbb      	ldrb	r3, [r7, #18]
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	891b      	ldrh	r3, [r3, #8]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	f200 83aa 	bhi.w	8011000 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80108ac:	7cbb      	ldrb	r3, [r7, #18]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	3b14      	subs	r3, #20
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	4b81      	ldr	r3, [pc, #516]	@ (8010abc <tcp_input+0x294>)
 80108b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80108b8:	4b81      	ldr	r3, [pc, #516]	@ (8010ac0 <tcp_input+0x298>)
 80108ba:	2200      	movs	r2, #0
 80108bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	895a      	ldrh	r2, [r3, #10]
 80108c2:	7cbb      	ldrb	r3, [r7, #18]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d309      	bcc.n	80108de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80108ca:	4b7c      	ldr	r3, [pc, #496]	@ (8010abc <tcp_input+0x294>)
 80108cc:	881a      	ldrh	r2, [r3, #0]
 80108ce:	4b7d      	ldr	r3, [pc, #500]	@ (8010ac4 <tcp_input+0x29c>)
 80108d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80108d2:	7cbb      	ldrb	r3, [r7, #18]
 80108d4:	4619      	mov	r1, r3
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f7fd fdd8 	bl	800e48c <pbuf_remove_header>
 80108dc:	e04e      	b.n	801097c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d105      	bne.n	80108f2 <tcp_input+0xca>
 80108e6:	4b70      	ldr	r3, [pc, #448]	@ (8010aa8 <tcp_input+0x280>)
 80108e8:	22c2      	movs	r2, #194	@ 0xc2
 80108ea:	4977      	ldr	r1, [pc, #476]	@ (8010ac8 <tcp_input+0x2a0>)
 80108ec:	4870      	ldr	r0, [pc, #448]	@ (8010ab0 <tcp_input+0x288>)
 80108ee:	f007 fdbb 	bl	8018468 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80108f2:	2114      	movs	r1, #20
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7fd fdc9 	bl	800e48c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	895a      	ldrh	r2, [r3, #10]
 80108fe:	4b71      	ldr	r3, [pc, #452]	@ (8010ac4 <tcp_input+0x29c>)
 8010900:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010902:	4b6e      	ldr	r3, [pc, #440]	@ (8010abc <tcp_input+0x294>)
 8010904:	881a      	ldrh	r2, [r3, #0]
 8010906:	4b6f      	ldr	r3, [pc, #444]	@ (8010ac4 <tcp_input+0x29c>)
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801090e:	4b6d      	ldr	r3, [pc, #436]	@ (8010ac4 <tcp_input+0x29c>)
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f7fd fdb9 	bl	800e48c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	895b      	ldrh	r3, [r3, #10]
 8010920:	8a3a      	ldrh	r2, [r7, #16]
 8010922:	429a      	cmp	r2, r3
 8010924:	f200 836e 	bhi.w	8011004 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	4a64      	ldr	r2, [pc, #400]	@ (8010ac0 <tcp_input+0x298>)
 8010930:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	8a3a      	ldrh	r2, [r7, #16]
 8010938:	4611      	mov	r1, r2
 801093a:	4618      	mov	r0, r3
 801093c:	f7fd fda6 	bl	800e48c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	891a      	ldrh	r2, [r3, #8]
 8010944:	8a3b      	ldrh	r3, [r7, #16]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	b29a      	uxth	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	895b      	ldrh	r3, [r3, #10]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d005      	beq.n	8010962 <tcp_input+0x13a>
 8010956:	4b54      	ldr	r3, [pc, #336]	@ (8010aa8 <tcp_input+0x280>)
 8010958:	22df      	movs	r2, #223	@ 0xdf
 801095a:	495c      	ldr	r1, [pc, #368]	@ (8010acc <tcp_input+0x2a4>)
 801095c:	4854      	ldr	r0, [pc, #336]	@ (8010ab0 <tcp_input+0x288>)
 801095e:	f007 fd83 	bl	8018468 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	891a      	ldrh	r2, [r3, #8]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	891b      	ldrh	r3, [r3, #8]
 801096c:	429a      	cmp	r2, r3
 801096e:	d005      	beq.n	801097c <tcp_input+0x154>
 8010970:	4b4d      	ldr	r3, [pc, #308]	@ (8010aa8 <tcp_input+0x280>)
 8010972:	22e0      	movs	r2, #224	@ 0xe0
 8010974:	4956      	ldr	r1, [pc, #344]	@ (8010ad0 <tcp_input+0x2a8>)
 8010976:	484e      	ldr	r0, [pc, #312]	@ (8010ab0 <tcp_input+0x288>)
 8010978:	f007 fd76 	bl	8018468 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801097c:	4b4d      	ldr	r3, [pc, #308]	@ (8010ab4 <tcp_input+0x28c>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	b29b      	uxth	r3, r3
 8010984:	4a4b      	ldr	r2, [pc, #300]	@ (8010ab4 <tcp_input+0x28c>)
 8010986:	6814      	ldr	r4, [r2, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f7fc f9dd 	bl	800cd48 <lwip_htons>
 801098e:	4603      	mov	r3, r0
 8010990:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010992:	4b48      	ldr	r3, [pc, #288]	@ (8010ab4 <tcp_input+0x28c>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	885b      	ldrh	r3, [r3, #2]
 8010998:	b29b      	uxth	r3, r3
 801099a:	4a46      	ldr	r2, [pc, #280]	@ (8010ab4 <tcp_input+0x28c>)
 801099c:	6814      	ldr	r4, [r2, #0]
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fc f9d2 	bl	800cd48 <lwip_htons>
 80109a4:	4603      	mov	r3, r0
 80109a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80109a8:	4b42      	ldr	r3, [pc, #264]	@ (8010ab4 <tcp_input+0x28c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	4a41      	ldr	r2, [pc, #260]	@ (8010ab4 <tcp_input+0x28c>)
 80109b0:	6814      	ldr	r4, [r2, #0]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fc f9dd 	bl	800cd72 <lwip_htonl>
 80109b8:	4603      	mov	r3, r0
 80109ba:	6063      	str	r3, [r4, #4]
 80109bc:	6863      	ldr	r3, [r4, #4]
 80109be:	4a45      	ldr	r2, [pc, #276]	@ (8010ad4 <tcp_input+0x2ac>)
 80109c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80109c2:	4b3c      	ldr	r3, [pc, #240]	@ (8010ab4 <tcp_input+0x28c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	4a3a      	ldr	r2, [pc, #232]	@ (8010ab4 <tcp_input+0x28c>)
 80109ca:	6814      	ldr	r4, [r2, #0]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fc f9d0 	bl	800cd72 <lwip_htonl>
 80109d2:	4603      	mov	r3, r0
 80109d4:	60a3      	str	r3, [r4, #8]
 80109d6:	68a3      	ldr	r3, [r4, #8]
 80109d8:	4a3f      	ldr	r2, [pc, #252]	@ (8010ad8 <tcp_input+0x2b0>)
 80109da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80109dc:	4b35      	ldr	r3, [pc, #212]	@ (8010ab4 <tcp_input+0x28c>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	89db      	ldrh	r3, [r3, #14]
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	4a33      	ldr	r2, [pc, #204]	@ (8010ab4 <tcp_input+0x28c>)
 80109e6:	6814      	ldr	r4, [r2, #0]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fc f9ad 	bl	800cd48 <lwip_htons>
 80109ee:	4603      	mov	r3, r0
 80109f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80109f2:	4b30      	ldr	r3, [pc, #192]	@ (8010ab4 <tcp_input+0x28c>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	899b      	ldrh	r3, [r3, #12]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fc f9a4 	bl	800cd48 <lwip_htons>
 8010a00:	4603      	mov	r3, r0
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	4b34      	ldr	r3, [pc, #208]	@ (8010adc <tcp_input+0x2b4>)
 8010a0c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	891a      	ldrh	r2, [r3, #8]
 8010a12:	4b33      	ldr	r3, [pc, #204]	@ (8010ae0 <tcp_input+0x2b8>)
 8010a14:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010a16:	4b31      	ldr	r3, [pc, #196]	@ (8010adc <tcp_input+0x2b4>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 0303 	and.w	r3, r3, #3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00c      	beq.n	8010a3c <tcp_input+0x214>
    tcplen++;
 8010a22:	4b2f      	ldr	r3, [pc, #188]	@ (8010ae0 <tcp_input+0x2b8>)
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	3301      	adds	r3, #1
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8010ae0 <tcp_input+0x2b8>)
 8010a2c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	891a      	ldrh	r2, [r3, #8]
 8010a32:	4b2b      	ldr	r3, [pc, #172]	@ (8010ae0 <tcp_input+0x2b8>)
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	f200 82e6 	bhi.w	8011008 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a40:	4b28      	ldr	r3, [pc, #160]	@ (8010ae4 <tcp_input+0x2bc>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	61fb      	str	r3, [r7, #28]
 8010a46:	e09d      	b.n	8010b84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	7d1b      	ldrb	r3, [r3, #20]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d105      	bne.n	8010a5c <tcp_input+0x234>
 8010a50:	4b15      	ldr	r3, [pc, #84]	@ (8010aa8 <tcp_input+0x280>)
 8010a52:	22fb      	movs	r2, #251	@ 0xfb
 8010a54:	4924      	ldr	r1, [pc, #144]	@ (8010ae8 <tcp_input+0x2c0>)
 8010a56:	4816      	ldr	r0, [pc, #88]	@ (8010ab0 <tcp_input+0x288>)
 8010a58:	f007 fd06 	bl	8018468 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	7d1b      	ldrb	r3, [r3, #20]
 8010a60:	2b0a      	cmp	r3, #10
 8010a62:	d105      	bne.n	8010a70 <tcp_input+0x248>
 8010a64:	4b10      	ldr	r3, [pc, #64]	@ (8010aa8 <tcp_input+0x280>)
 8010a66:	22fc      	movs	r2, #252	@ 0xfc
 8010a68:	4920      	ldr	r1, [pc, #128]	@ (8010aec <tcp_input+0x2c4>)
 8010a6a:	4811      	ldr	r0, [pc, #68]	@ (8010ab0 <tcp_input+0x288>)
 8010a6c:	f007 fcfc 	bl	8018468 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	7d1b      	ldrb	r3, [r3, #20]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d105      	bne.n	8010a84 <tcp_input+0x25c>
 8010a78:	4b0b      	ldr	r3, [pc, #44]	@ (8010aa8 <tcp_input+0x280>)
 8010a7a:	22fd      	movs	r2, #253	@ 0xfd
 8010a7c:	491c      	ldr	r1, [pc, #112]	@ (8010af0 <tcp_input+0x2c8>)
 8010a7e:	480c      	ldr	r0, [pc, #48]	@ (8010ab0 <tcp_input+0x288>)
 8010a80:	f007 fcf2 	bl	8018468 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	7a1b      	ldrb	r3, [r3, #8]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d033      	beq.n	8010af4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	7a1a      	ldrb	r2, [r3, #8]
 8010a90:	4b09      	ldr	r3, [pc, #36]	@ (8010ab8 <tcp_input+0x290>)
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a98:	3301      	adds	r3, #1
 8010a9a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d029      	beq.n	8010af4 <tcp_input+0x2cc>
      prev = pcb;
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	61bb      	str	r3, [r7, #24]
      continue;
 8010aa4:	e06b      	b.n	8010b7e <tcp_input+0x356>
 8010aa6:	bf00      	nop
 8010aa8:	0801b84c 	.word	0x0801b84c
 8010aac:	0801b880 	.word	0x0801b880
 8010ab0:	0801b898 	.word	0x0801b898
 8010ab4:	2000f138 	.word	0x2000f138
 8010ab8:	2000b9bc 	.word	0x2000b9bc
 8010abc:	2000f13c 	.word	0x2000f13c
 8010ac0:	2000f140 	.word	0x2000f140
 8010ac4:	2000f13e 	.word	0x2000f13e
 8010ac8:	0801b8c0 	.word	0x0801b8c0
 8010acc:	0801b8d0 	.word	0x0801b8d0
 8010ad0:	0801b8dc 	.word	0x0801b8dc
 8010ad4:	2000f148 	.word	0x2000f148
 8010ad8:	2000f14c 	.word	0x2000f14c
 8010adc:	2000f154 	.word	0x2000f154
 8010ae0:	2000f152 	.word	0x2000f152
 8010ae4:	2000f11c 	.word	0x2000f11c
 8010ae8:	0801b8fc 	.word	0x0801b8fc
 8010aec:	0801b924 	.word	0x0801b924
 8010af0:	0801b950 	.word	0x0801b950
    }

    if (pcb->remote_port == tcphdr->src &&
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	8b1a      	ldrh	r2, [r3, #24]
 8010af8:	4b72      	ldr	r3, [pc, #456]	@ (8010cc4 <tcp_input+0x49c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	881b      	ldrh	r3, [r3, #0]
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d13a      	bne.n	8010b7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	8ada      	ldrh	r2, [r3, #22]
 8010b08:	4b6e      	ldr	r3, [pc, #440]	@ (8010cc4 <tcp_input+0x49c>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	885b      	ldrh	r3, [r3, #2]
 8010b0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d132      	bne.n	8010b7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	685a      	ldr	r2, [r3, #4]
 8010b18:	4b6b      	ldr	r3, [pc, #428]	@ (8010cc8 <tcp_input+0x4a0>)
 8010b1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d12c      	bne.n	8010b7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	4b68      	ldr	r3, [pc, #416]	@ (8010cc8 <tcp_input+0x4a0>)
 8010b26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d126      	bne.n	8010b7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	69fa      	ldr	r2, [r7, #28]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d106      	bne.n	8010b44 <tcp_input+0x31c>
 8010b36:	4b65      	ldr	r3, [pc, #404]	@ (8010ccc <tcp_input+0x4a4>)
 8010b38:	f240 120d 	movw	r2, #269	@ 0x10d
 8010b3c:	4964      	ldr	r1, [pc, #400]	@ (8010cd0 <tcp_input+0x4a8>)
 8010b3e:	4865      	ldr	r0, [pc, #404]	@ (8010cd4 <tcp_input+0x4ac>)
 8010b40:	f007 fc92 	bl	8018468 <iprintf>
      if (prev != NULL) {
 8010b44:	69bb      	ldr	r3, [r7, #24]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d00a      	beq.n	8010b60 <tcp_input+0x338>
        prev->next = pcb->next;
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	68da      	ldr	r2, [r3, #12]
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010b52:	4b61      	ldr	r3, [pc, #388]	@ (8010cd8 <tcp_input+0x4b0>)
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8010cd8 <tcp_input+0x4b0>)
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	69fa      	ldr	r2, [r7, #28]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d111      	bne.n	8010b8e <tcp_input+0x366>
 8010b6a:	4b58      	ldr	r3, [pc, #352]	@ (8010ccc <tcp_input+0x4a4>)
 8010b6c:	f240 1215 	movw	r2, #277	@ 0x115
 8010b70:	495a      	ldr	r1, [pc, #360]	@ (8010cdc <tcp_input+0x4b4>)
 8010b72:	4858      	ldr	r0, [pc, #352]	@ (8010cd4 <tcp_input+0x4ac>)
 8010b74:	f007 fc78 	bl	8018468 <iprintf>
      break;
 8010b78:	e009      	b.n	8010b8e <tcp_input+0x366>
    }
    prev = pcb;
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	61fb      	str	r3, [r7, #28]
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f47f af5e 	bne.w	8010a48 <tcp_input+0x220>
 8010b8c:	e000      	b.n	8010b90 <tcp_input+0x368>
      break;
 8010b8e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 80aa 	bne.w	8010cec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b98:	4b51      	ldr	r3, [pc, #324]	@ (8010ce0 <tcp_input+0x4b8>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	61fb      	str	r3, [r7, #28]
 8010b9e:	e03f      	b.n	8010c20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	7d1b      	ldrb	r3, [r3, #20]
 8010ba4:	2b0a      	cmp	r3, #10
 8010ba6:	d006      	beq.n	8010bb6 <tcp_input+0x38e>
 8010ba8:	4b48      	ldr	r3, [pc, #288]	@ (8010ccc <tcp_input+0x4a4>)
 8010baa:	f240 121f 	movw	r2, #287	@ 0x11f
 8010bae:	494d      	ldr	r1, [pc, #308]	@ (8010ce4 <tcp_input+0x4bc>)
 8010bb0:	4848      	ldr	r0, [pc, #288]	@ (8010cd4 <tcp_input+0x4ac>)
 8010bb2:	f007 fc59 	bl	8018468 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	7a1b      	ldrb	r3, [r3, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	7a1a      	ldrb	r2, [r3, #8]
 8010bc2:	4b41      	ldr	r3, [pc, #260]	@ (8010cc8 <tcp_input+0x4a0>)
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010bca:	3301      	adds	r3, #1
 8010bcc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d122      	bne.n	8010c18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	8b1a      	ldrh	r2, [r3, #24]
 8010bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8010cc4 <tcp_input+0x49c>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	881b      	ldrh	r3, [r3, #0]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d11b      	bne.n	8010c1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	8ada      	ldrh	r2, [r3, #22]
 8010be6:	4b37      	ldr	r3, [pc, #220]	@ (8010cc4 <tcp_input+0x49c>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	885b      	ldrh	r3, [r3, #2]
 8010bec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d113      	bne.n	8010c1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	685a      	ldr	r2, [r3, #4]
 8010bf6:	4b34      	ldr	r3, [pc, #208]	@ (8010cc8 <tcp_input+0x4a0>)
 8010bf8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d10d      	bne.n	8010c1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	4b31      	ldr	r3, [pc, #196]	@ (8010cc8 <tcp_input+0x4a0>)
 8010c04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d107      	bne.n	8010c1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010c0a:	69f8      	ldr	r0, [r7, #28]
 8010c0c:	f000 fb56 	bl	80112bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f7fd fcc1 	bl	800e598 <pbuf_free>
        return;
 8010c16:	e1fd      	b.n	8011014 <tcp_input+0x7ec>
        continue;
 8010c18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	61fb      	str	r3, [r7, #28]
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1bc      	bne.n	8010ba0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8010ce8 <tcp_input+0x4c0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	617b      	str	r3, [r7, #20]
 8010c30:	e02a      	b.n	8010c88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	7a1b      	ldrb	r3, [r3, #8]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00c      	beq.n	8010c54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	7a1a      	ldrb	r2, [r3, #8]
 8010c3e:	4b22      	ldr	r3, [pc, #136]	@ (8010cc8 <tcp_input+0x4a0>)
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c46:	3301      	adds	r3, #1
 8010c48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d002      	beq.n	8010c54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	61bb      	str	r3, [r7, #24]
        continue;
 8010c52:	e016      	b.n	8010c82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	8ada      	ldrh	r2, [r3, #22]
 8010c58:	4b1a      	ldr	r3, [pc, #104]	@ (8010cc4 <tcp_input+0x49c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	885b      	ldrh	r3, [r3, #2]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d10c      	bne.n	8010c7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	4b17      	ldr	r3, [pc, #92]	@ (8010cc8 <tcp_input+0x4a0>)
 8010c6a:	695b      	ldr	r3, [r3, #20]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d00f      	beq.n	8010c90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00d      	beq.n	8010c92 <tcp_input+0x46a>
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d009      	beq.n	8010c92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c82:	697b      	ldr	r3, [r7, #20]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	617b      	str	r3, [r7, #20]
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1d1      	bne.n	8010c32 <tcp_input+0x40a>
 8010c8e:	e000      	b.n	8010c92 <tcp_input+0x46a>
            break;
 8010c90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d029      	beq.n	8010cec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010c98:	69bb      	ldr	r3, [r7, #24]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00a      	beq.n	8010cb4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	68da      	ldr	r2, [r3, #12]
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010ca6:	4b10      	ldr	r3, [pc, #64]	@ (8010ce8 <tcp_input+0x4c0>)
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010cae:	4a0e      	ldr	r2, [pc, #56]	@ (8010ce8 <tcp_input+0x4c0>)
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010cb4:	6978      	ldr	r0, [r7, #20]
 8010cb6:	f000 fa03 	bl	80110c0 <tcp_listen_input>
      }
      pbuf_free(p);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7fd fc6c 	bl	800e598 <pbuf_free>
      return;
 8010cc0:	e1a8      	b.n	8011014 <tcp_input+0x7ec>
 8010cc2:	bf00      	nop
 8010cc4:	2000f138 	.word	0x2000f138
 8010cc8:	2000b9bc 	.word	0x2000b9bc
 8010ccc:	0801b84c 	.word	0x0801b84c
 8010cd0:	0801b978 	.word	0x0801b978
 8010cd4:	0801b898 	.word	0x0801b898
 8010cd8:	2000f11c 	.word	0x2000f11c
 8010cdc:	0801b9a4 	.word	0x0801b9a4
 8010ce0:	2000f120 	.word	0x2000f120
 8010ce4:	0801b9d0 	.word	0x0801b9d0
 8010ce8:	2000f118 	.word	0x2000f118
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 8158 	beq.w	8010fa4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010cf4:	4b95      	ldr	r3, [pc, #596]	@ (8010f4c <tcp_input+0x724>)
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	891a      	ldrh	r2, [r3, #8]
 8010cfe:	4b93      	ldr	r3, [pc, #588]	@ (8010f4c <tcp_input+0x724>)
 8010d00:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010d02:	4a92      	ldr	r2, [pc, #584]	@ (8010f4c <tcp_input+0x724>)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010d08:	4b91      	ldr	r3, [pc, #580]	@ (8010f50 <tcp_input+0x728>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4a8f      	ldr	r2, [pc, #572]	@ (8010f4c <tcp_input+0x724>)
 8010d0e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010d10:	4b90      	ldr	r3, [pc, #576]	@ (8010f54 <tcp_input+0x72c>)
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010d16:	4b90      	ldr	r3, [pc, #576]	@ (8010f58 <tcp_input+0x730>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8010f5c <tcp_input+0x734>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010d22:	4b8f      	ldr	r3, [pc, #572]	@ (8010f60 <tcp_input+0x738>)
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	f003 0308 	and.w	r3, r3, #8
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d006      	beq.n	8010d3c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	7b5b      	ldrb	r3, [r3, #13]
 8010d32:	f043 0301 	orr.w	r3, r3, #1
 8010d36:	b2da      	uxtb	r2, r3
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d017      	beq.n	8010d74 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d44:	69f8      	ldr	r0, [r7, #28]
 8010d46:	f7ff f83d 	bl	800fdc4 <tcp_process_refused_data>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	f113 0f0d 	cmn.w	r3, #13
 8010d50:	d007      	beq.n	8010d62 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00c      	beq.n	8010d74 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010d5a:	4b82      	ldr	r3, [pc, #520]	@ (8010f64 <tcp_input+0x73c>)
 8010d5c:	881b      	ldrh	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d008      	beq.n	8010d74 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f040 80e3 	bne.w	8010f32 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010d6c:	69f8      	ldr	r0, [r7, #28]
 8010d6e:	f003 fdff 	bl	8014970 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010d72:	e0de      	b.n	8010f32 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010d74:	4a7c      	ldr	r2, [pc, #496]	@ (8010f68 <tcp_input+0x740>)
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010d7a:	69f8      	ldr	r0, [r7, #28]
 8010d7c:	f000 fb18 	bl	80113b0 <tcp_process>
 8010d80:	4603      	mov	r3, r0
 8010d82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010d84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d88:	f113 0f0d 	cmn.w	r3, #13
 8010d8c:	f000 80d3 	beq.w	8010f36 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010d90:	4b71      	ldr	r3, [pc, #452]	@ (8010f58 <tcp_input+0x730>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	f003 0308 	and.w	r3, r3, #8
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d015      	beq.n	8010dc8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d008      	beq.n	8010db8 <tcp_input+0x590>
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010dac:	69fa      	ldr	r2, [r7, #28]
 8010dae:	6912      	ldr	r2, [r2, #16]
 8010db0:	f06f 010d 	mvn.w	r1, #13
 8010db4:	4610      	mov	r0, r2
 8010db6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010db8:	69f9      	ldr	r1, [r7, #28]
 8010dba:	486c      	ldr	r0, [pc, #432]	@ (8010f6c <tcp_input+0x744>)
 8010dbc:	f7ff fbbc 	bl	8010538 <tcp_pcb_remove>
        tcp_free(pcb);
 8010dc0:	69f8      	ldr	r0, [r7, #28]
 8010dc2:	f7fd fea5 	bl	800eb10 <tcp_free>
 8010dc6:	e0da      	b.n	8010f7e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010dcc:	4b63      	ldr	r3, [pc, #396]	@ (8010f5c <tcp_input+0x734>)
 8010dce:	881b      	ldrh	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d01d      	beq.n	8010e10 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010dd4:	4b61      	ldr	r3, [pc, #388]	@ (8010f5c <tcp_input+0x734>)
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00a      	beq.n	8010dfa <tcp_input+0x5d2>
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dea:	69fa      	ldr	r2, [r7, #28]
 8010dec:	6910      	ldr	r0, [r2, #16]
 8010dee:	89fa      	ldrh	r2, [r7, #14]
 8010df0:	69f9      	ldr	r1, [r7, #28]
 8010df2:	4798      	blx	r3
 8010df4:	4603      	mov	r3, r0
 8010df6:	74fb      	strb	r3, [r7, #19]
 8010df8:	e001      	b.n	8010dfe <tcp_input+0x5d6>
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010dfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e02:	f113 0f0d 	cmn.w	r3, #13
 8010e06:	f000 8098 	beq.w	8010f3a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010e0a:	4b54      	ldr	r3, [pc, #336]	@ (8010f5c <tcp_input+0x734>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010e10:	69f8      	ldr	r0, [r7, #28]
 8010e12:	f000 f915 	bl	8011040 <tcp_input_delayed_close>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	f040 8090 	bne.w	8010f3e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8010f54 <tcp_input+0x72c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d041      	beq.n	8010eaa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d006      	beq.n	8010e3c <tcp_input+0x614>
 8010e2e:	4b50      	ldr	r3, [pc, #320]	@ (8010f70 <tcp_input+0x748>)
 8010e30:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010e34:	494f      	ldr	r1, [pc, #316]	@ (8010f74 <tcp_input+0x74c>)
 8010e36:	4850      	ldr	r0, [pc, #320]	@ (8010f78 <tcp_input+0x750>)
 8010e38:	f007 fb16 	bl	8018468 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	8b5b      	ldrh	r3, [r3, #26]
 8010e40:	f003 0310 	and.w	r3, r3, #16
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d008      	beq.n	8010e5a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e48:	4b42      	ldr	r3, [pc, #264]	@ (8010f54 <tcp_input+0x72c>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fd fba3 	bl	800e598 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e52:	69f8      	ldr	r0, [r7, #28]
 8010e54:	f7fe f9a0 	bl	800f198 <tcp_abort>
            goto aborted;
 8010e58:	e091      	b.n	8010f7e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00c      	beq.n	8010e7e <tcp_input+0x656>
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	6918      	ldr	r0, [r3, #16]
 8010e6e:	4b39      	ldr	r3, [pc, #228]	@ (8010f54 <tcp_input+0x72c>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	2300      	movs	r3, #0
 8010e74:	69f9      	ldr	r1, [r7, #28]
 8010e76:	47a0      	blx	r4
 8010e78:	4603      	mov	r3, r0
 8010e7a:	74fb      	strb	r3, [r7, #19]
 8010e7c:	e008      	b.n	8010e90 <tcp_input+0x668>
 8010e7e:	4b35      	ldr	r3, [pc, #212]	@ (8010f54 <tcp_input+0x72c>)
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	2300      	movs	r3, #0
 8010e84:	69f9      	ldr	r1, [r7, #28]
 8010e86:	2000      	movs	r0, #0
 8010e88:	f7ff f890 	bl	800ffac <tcp_recv_null>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010e90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e94:	f113 0f0d 	cmn.w	r3, #13
 8010e98:	d053      	beq.n	8010f42 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010e9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8010f54 <tcp_input+0x72c>)
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8010f58 <tcp_input+0x730>)
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	f003 0320 	and.w	r3, r3, #32
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d030      	beq.n	8010f18 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d009      	beq.n	8010ed2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ec2:	7b5a      	ldrb	r2, [r3, #13]
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ec8:	f042 0220 	orr.w	r2, r2, #32
 8010ecc:	b2d2      	uxtb	r2, r2
 8010ece:	735a      	strb	r2, [r3, #13]
 8010ed0:	e022      	b.n	8010f18 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ed6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010eda:	d005      	beq.n	8010ee8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00b      	beq.n	8010f0a <tcp_input+0x6e2>
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	6918      	ldr	r0, [r3, #16]
 8010efc:	2300      	movs	r3, #0
 8010efe:	2200      	movs	r2, #0
 8010f00:	69f9      	ldr	r1, [r7, #28]
 8010f02:	47a0      	blx	r4
 8010f04:	4603      	mov	r3, r0
 8010f06:	74fb      	strb	r3, [r7, #19]
 8010f08:	e001      	b.n	8010f0e <tcp_input+0x6e6>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010f0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f12:	f113 0f0d 	cmn.w	r3, #13
 8010f16:	d016      	beq.n	8010f46 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010f18:	4b13      	ldr	r3, [pc, #76]	@ (8010f68 <tcp_input+0x740>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010f1e:	69f8      	ldr	r0, [r7, #28]
 8010f20:	f000 f88e 	bl	8011040 <tcp_input_delayed_close>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d128      	bne.n	8010f7c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010f2a:	69f8      	ldr	r0, [r7, #28]
 8010f2c:	f002 ff1a 	bl	8013d64 <tcp_output>
 8010f30:	e025      	b.n	8010f7e <tcp_input+0x756>
        goto aborted;
 8010f32:	bf00      	nop
 8010f34:	e023      	b.n	8010f7e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010f36:	bf00      	nop
 8010f38:	e021      	b.n	8010f7e <tcp_input+0x756>
              goto aborted;
 8010f3a:	bf00      	nop
 8010f3c:	e01f      	b.n	8010f7e <tcp_input+0x756>
          goto aborted;
 8010f3e:	bf00      	nop
 8010f40:	e01d      	b.n	8010f7e <tcp_input+0x756>
            goto aborted;
 8010f42:	bf00      	nop
 8010f44:	e01b      	b.n	8010f7e <tcp_input+0x756>
              goto aborted;
 8010f46:	bf00      	nop
 8010f48:	e019      	b.n	8010f7e <tcp_input+0x756>
 8010f4a:	bf00      	nop
 8010f4c:	2000f128 	.word	0x2000f128
 8010f50:	2000f138 	.word	0x2000f138
 8010f54:	2000f158 	.word	0x2000f158
 8010f58:	2000f155 	.word	0x2000f155
 8010f5c:	2000f150 	.word	0x2000f150
 8010f60:	2000f154 	.word	0x2000f154
 8010f64:	2000f152 	.word	0x2000f152
 8010f68:	2000f15c 	.word	0x2000f15c
 8010f6c:	2000f11c 	.word	0x2000f11c
 8010f70:	0801b84c 	.word	0x0801b84c
 8010f74:	0801ba00 	.word	0x0801ba00
 8010f78:	0801b898 	.word	0x0801b898
          goto aborted;
 8010f7c:	bf00      	nop
    tcp_input_pcb = NULL;
 8010f7e:	4b27      	ldr	r3, [pc, #156]	@ (801101c <tcp_input+0x7f4>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010f84:	4b26      	ldr	r3, [pc, #152]	@ (8011020 <tcp_input+0x7f8>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010f8a:	4b26      	ldr	r3, [pc, #152]	@ (8011024 <tcp_input+0x7fc>)
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d03f      	beq.n	8011012 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010f92:	4b24      	ldr	r3, [pc, #144]	@ (8011024 <tcp_input+0x7fc>)
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fd fafe 	bl	800e598 <pbuf_free>
      inseg.p = NULL;
 8010f9c:	4b21      	ldr	r3, [pc, #132]	@ (8011024 <tcp_input+0x7fc>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010fa2:	e036      	b.n	8011012 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010fa4:	4b20      	ldr	r3, [pc, #128]	@ (8011028 <tcp_input+0x800>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	899b      	ldrh	r3, [r3, #12]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fb fecb 	bl	800cd48 <lwip_htons>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	f003 0304 	and.w	r3, r3, #4
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d118      	bne.n	8010ff0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fbe:	4b1b      	ldr	r3, [pc, #108]	@ (801102c <tcp_input+0x804>)
 8010fc0:	6819      	ldr	r1, [r3, #0]
 8010fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8011030 <tcp_input+0x808>)
 8010fc4:	881b      	ldrh	r3, [r3, #0]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8011034 <tcp_input+0x80c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fce:	4b16      	ldr	r3, [pc, #88]	@ (8011028 <tcp_input+0x800>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fd2:	885b      	ldrh	r3, [r3, #2]
 8010fd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fd6:	4a14      	ldr	r2, [pc, #80]	@ (8011028 <tcp_input+0x800>)
 8010fd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fda:	8812      	ldrh	r2, [r2, #0]
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	9202      	str	r2, [sp, #8]
 8010fe0:	9301      	str	r3, [sp, #4]
 8010fe2:	4b15      	ldr	r3, [pc, #84]	@ (8011038 <tcp_input+0x810>)
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	4b15      	ldr	r3, [pc, #84]	@ (801103c <tcp_input+0x814>)
 8010fe8:	4602      	mov	r2, r0
 8010fea:	2000      	movs	r0, #0
 8010fec:	f003 fc6e 	bl	80148cc <tcp_rst>
    pbuf_free(p);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7fd fad1 	bl	800e598 <pbuf_free>
  return;
 8010ff6:	e00c      	b.n	8011012 <tcp_input+0x7ea>
    goto dropped;
 8010ff8:	bf00      	nop
 8010ffa:	e006      	b.n	801100a <tcp_input+0x7e2>
    goto dropped;
 8010ffc:	bf00      	nop
 8010ffe:	e004      	b.n	801100a <tcp_input+0x7e2>
    goto dropped;
 8011000:	bf00      	nop
 8011002:	e002      	b.n	801100a <tcp_input+0x7e2>
      goto dropped;
 8011004:	bf00      	nop
 8011006:	e000      	b.n	801100a <tcp_input+0x7e2>
      goto dropped;
 8011008:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7fd fac4 	bl	800e598 <pbuf_free>
 8011010:	e000      	b.n	8011014 <tcp_input+0x7ec>
  return;
 8011012:	bf00      	nop
}
 8011014:	3724      	adds	r7, #36	@ 0x24
 8011016:	46bd      	mov	sp, r7
 8011018:	bd90      	pop	{r4, r7, pc}
 801101a:	bf00      	nop
 801101c:	2000f15c 	.word	0x2000f15c
 8011020:	2000f158 	.word	0x2000f158
 8011024:	2000f128 	.word	0x2000f128
 8011028:	2000f138 	.word	0x2000f138
 801102c:	2000f14c 	.word	0x2000f14c
 8011030:	2000f152 	.word	0x2000f152
 8011034:	2000f148 	.word	0x2000f148
 8011038:	2000b9cc 	.word	0x2000b9cc
 801103c:	2000b9d0 	.word	0x2000b9d0

08011040 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d106      	bne.n	801105c <tcp_input_delayed_close+0x1c>
 801104e:	4b17      	ldr	r3, [pc, #92]	@ (80110ac <tcp_input_delayed_close+0x6c>)
 8011050:	f240 225a 	movw	r2, #602	@ 0x25a
 8011054:	4916      	ldr	r1, [pc, #88]	@ (80110b0 <tcp_input_delayed_close+0x70>)
 8011056:	4817      	ldr	r0, [pc, #92]	@ (80110b4 <tcp_input_delayed_close+0x74>)
 8011058:	f007 fa06 	bl	8018468 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801105c:	4b16      	ldr	r3, [pc, #88]	@ (80110b8 <tcp_input_delayed_close+0x78>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	f003 0310 	and.w	r3, r3, #16
 8011064:	2b00      	cmp	r3, #0
 8011066:	d01c      	beq.n	80110a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	8b5b      	ldrh	r3, [r3, #26]
 801106c:	f003 0310 	and.w	r3, r3, #16
 8011070:	2b00      	cmp	r3, #0
 8011072:	d10d      	bne.n	8011090 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801107a:	2b00      	cmp	r3, #0
 801107c:	d008      	beq.n	8011090 <tcp_input_delayed_close+0x50>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	6912      	ldr	r2, [r2, #16]
 8011088:	f06f 010e 	mvn.w	r1, #14
 801108c:	4610      	mov	r0, r2
 801108e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011090:	6879      	ldr	r1, [r7, #4]
 8011092:	480a      	ldr	r0, [pc, #40]	@ (80110bc <tcp_input_delayed_close+0x7c>)
 8011094:	f7ff fa50 	bl	8010538 <tcp_pcb_remove>
    tcp_free(pcb);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f7fd fd39 	bl	800eb10 <tcp_free>
    return 1;
 801109e:	2301      	movs	r3, #1
 80110a0:	e000      	b.n	80110a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0801b84c 	.word	0x0801b84c
 80110b0:	0801ba1c 	.word	0x0801ba1c
 80110b4:	0801b898 	.word	0x0801b898
 80110b8:	2000f155 	.word	0x2000f155
 80110bc:	2000f11c 	.word	0x2000f11c

080110c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80110c0:	b590      	push	{r4, r7, lr}
 80110c2:	b08b      	sub	sp, #44	@ 0x2c
 80110c4:	af04      	add	r7, sp, #16
 80110c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80110c8:	4b6f      	ldr	r3, [pc, #444]	@ (8011288 <tcp_listen_input+0x1c8>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	f003 0304 	and.w	r3, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f040 80d2 	bne.w	801127a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d106      	bne.n	80110ea <tcp_listen_input+0x2a>
 80110dc:	4b6b      	ldr	r3, [pc, #428]	@ (801128c <tcp_listen_input+0x1cc>)
 80110de:	f240 2281 	movw	r2, #641	@ 0x281
 80110e2:	496b      	ldr	r1, [pc, #428]	@ (8011290 <tcp_listen_input+0x1d0>)
 80110e4:	486b      	ldr	r0, [pc, #428]	@ (8011294 <tcp_listen_input+0x1d4>)
 80110e6:	f007 f9bf 	bl	8018468 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80110ea:	4b67      	ldr	r3, [pc, #412]	@ (8011288 <tcp_listen_input+0x1c8>)
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	f003 0310 	and.w	r3, r3, #16
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d019      	beq.n	801112a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110f6:	4b68      	ldr	r3, [pc, #416]	@ (8011298 <tcp_listen_input+0x1d8>)
 80110f8:	6819      	ldr	r1, [r3, #0]
 80110fa:	4b68      	ldr	r3, [pc, #416]	@ (801129c <tcp_listen_input+0x1dc>)
 80110fc:	881b      	ldrh	r3, [r3, #0]
 80110fe:	461a      	mov	r2, r3
 8011100:	4b67      	ldr	r3, [pc, #412]	@ (80112a0 <tcp_listen_input+0x1e0>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011106:	4b67      	ldr	r3, [pc, #412]	@ (80112a4 <tcp_listen_input+0x1e4>)
 8011108:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801110a:	885b      	ldrh	r3, [r3, #2]
 801110c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801110e:	4a65      	ldr	r2, [pc, #404]	@ (80112a4 <tcp_listen_input+0x1e4>)
 8011110:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011112:	8812      	ldrh	r2, [r2, #0]
 8011114:	b292      	uxth	r2, r2
 8011116:	9202      	str	r2, [sp, #8]
 8011118:	9301      	str	r3, [sp, #4]
 801111a:	4b63      	ldr	r3, [pc, #396]	@ (80112a8 <tcp_listen_input+0x1e8>)
 801111c:	9300      	str	r3, [sp, #0]
 801111e:	4b63      	ldr	r3, [pc, #396]	@ (80112ac <tcp_listen_input+0x1ec>)
 8011120:	4602      	mov	r2, r0
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f003 fbd2 	bl	80148cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011128:	e0a9      	b.n	801127e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801112a:	4b57      	ldr	r3, [pc, #348]	@ (8011288 <tcp_listen_input+0x1c8>)
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	2b00      	cmp	r3, #0
 8011134:	f000 80a3 	beq.w	801127e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	7d5b      	ldrb	r3, [r3, #21]
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff f859 	bl	80101f4 <tcp_alloc>
 8011142:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d111      	bne.n	801116e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d00a      	beq.n	8011168 <tcp_listen_input+0xa8>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	699b      	ldr	r3, [r3, #24]
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	6910      	ldr	r0, [r2, #16]
 801115a:	f04f 32ff 	mov.w	r2, #4294967295
 801115e:	2100      	movs	r1, #0
 8011160:	4798      	blx	r3
 8011162:	4603      	mov	r3, r0
 8011164:	73bb      	strb	r3, [r7, #14]
      return;
 8011166:	e08b      	b.n	8011280 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011168:	23f0      	movs	r3, #240	@ 0xf0
 801116a:	73bb      	strb	r3, [r7, #14]
      return;
 801116c:	e088      	b.n	8011280 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801116e:	4b50      	ldr	r3, [pc, #320]	@ (80112b0 <tcp_listen_input+0x1f0>)
 8011170:	695a      	ldr	r2, [r3, #20]
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011176:	4b4e      	ldr	r3, [pc, #312]	@ (80112b0 <tcp_listen_input+0x1f0>)
 8011178:	691a      	ldr	r2, [r3, #16]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	8ada      	ldrh	r2, [r3, #22]
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011186:	4b47      	ldr	r3, [pc, #284]	@ (80112a4 <tcp_listen_input+0x1e4>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	b29a      	uxth	r2, r3
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	2203      	movs	r2, #3
 8011196:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011198:	4b41      	ldr	r3, [pc, #260]	@ (80112a0 <tcp_listen_input+0x1e0>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	1c5a      	adds	r2, r3, #1
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	f7ff fa58 	bl	8010660 <tcp_next_iss>
 80111b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	693a      	ldr	r2, [r7, #16]
 80111bc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	693a      	ldr	r2, [r7, #16]
 80111c2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	693a      	ldr	r2, [r7, #16]
 80111c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80111ca:	4b35      	ldr	r3, [pc, #212]	@ (80112a0 <tcp_listen_input+0x1e0>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	1e5a      	subs	r2, r3, #1
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	691a      	ldr	r2, [r3, #16]
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	7a5b      	ldrb	r3, [r3, #9]
 80111e6:	f003 030c 	and.w	r3, r3, #12
 80111ea:	b2da      	uxtb	r2, r3
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	7a1a      	ldrb	r2, [r3, #8]
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80111f8:	4b2e      	ldr	r3, [pc, #184]	@ (80112b4 <tcp_listen_input+0x1f4>)
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	60da      	str	r2, [r3, #12]
 8011200:	4a2c      	ldr	r2, [pc, #176]	@ (80112b4 <tcp_listen_input+0x1f4>)
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	6013      	str	r3, [r2, #0]
 8011206:	f003 fd23 	bl	8014c50 <tcp_timer_needed>
 801120a:	4b2b      	ldr	r3, [pc, #172]	@ (80112b8 <tcp_listen_input+0x1f8>)
 801120c:	2201      	movs	r2, #1
 801120e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011210:	6978      	ldr	r0, [r7, #20]
 8011212:	f001 fd8b 	bl	8012d2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011216:	4b23      	ldr	r3, [pc, #140]	@ (80112a4 <tcp_listen_input+0x1e4>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	89db      	ldrh	r3, [r3, #14]
 801121c:	b29a      	uxth	r2, r3
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	3304      	adds	r3, #4
 8011238:	4618      	mov	r0, r3
 801123a:	f005 fc47 	bl	8016acc <ip4_route>
 801123e:	4601      	mov	r1, r0
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	3304      	adds	r3, #4
 8011244:	461a      	mov	r2, r3
 8011246:	4620      	mov	r0, r4
 8011248:	f7ff fa30 	bl	80106ac <tcp_eff_send_mss_netif>
 801124c:	4603      	mov	r3, r0
 801124e:	461a      	mov	r2, r3
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011254:	2112      	movs	r1, #18
 8011256:	6978      	ldr	r0, [r7, #20]
 8011258:	f002 fc96 	bl	8013b88 <tcp_enqueue_flags>
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d004      	beq.n	8011272 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011268:	2100      	movs	r1, #0
 801126a:	6978      	ldr	r0, [r7, #20]
 801126c:	f7fd fed6 	bl	800f01c <tcp_abandon>
      return;
 8011270:	e006      	b.n	8011280 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011272:	6978      	ldr	r0, [r7, #20]
 8011274:	f002 fd76 	bl	8013d64 <tcp_output>
  return;
 8011278:	e001      	b.n	801127e <tcp_listen_input+0x1be>
    return;
 801127a:	bf00      	nop
 801127c:	e000      	b.n	8011280 <tcp_listen_input+0x1c0>
  return;
 801127e:	bf00      	nop
}
 8011280:	371c      	adds	r7, #28
 8011282:	46bd      	mov	sp, r7
 8011284:	bd90      	pop	{r4, r7, pc}
 8011286:	bf00      	nop
 8011288:	2000f154 	.word	0x2000f154
 801128c:	0801b84c 	.word	0x0801b84c
 8011290:	0801ba44 	.word	0x0801ba44
 8011294:	0801b898 	.word	0x0801b898
 8011298:	2000f14c 	.word	0x2000f14c
 801129c:	2000f152 	.word	0x2000f152
 80112a0:	2000f148 	.word	0x2000f148
 80112a4:	2000f138 	.word	0x2000f138
 80112a8:	2000b9cc 	.word	0x2000b9cc
 80112ac:	2000b9d0 	.word	0x2000b9d0
 80112b0:	2000b9bc 	.word	0x2000b9bc
 80112b4:	2000f11c 	.word	0x2000f11c
 80112b8:	2000f124 	.word	0x2000f124

080112bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af04      	add	r7, sp, #16
 80112c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80112c4:	4b2f      	ldr	r3, [pc, #188]	@ (8011384 <tcp_timewait_input+0xc8>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	f003 0304 	and.w	r3, r3, #4
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d153      	bne.n	8011378 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d106      	bne.n	80112e4 <tcp_timewait_input+0x28>
 80112d6:	4b2c      	ldr	r3, [pc, #176]	@ (8011388 <tcp_timewait_input+0xcc>)
 80112d8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80112dc:	492b      	ldr	r1, [pc, #172]	@ (801138c <tcp_timewait_input+0xd0>)
 80112de:	482c      	ldr	r0, [pc, #176]	@ (8011390 <tcp_timewait_input+0xd4>)
 80112e0:	f007 f8c2 	bl	8018468 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80112e4:	4b27      	ldr	r3, [pc, #156]	@ (8011384 <tcp_timewait_input+0xc8>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f003 0302 	and.w	r3, r3, #2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d02a      	beq.n	8011346 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80112f0:	4b28      	ldr	r3, [pc, #160]	@ (8011394 <tcp_timewait_input+0xd8>)
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112f8:	1ad3      	subs	r3, r2, r3
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	db2d      	blt.n	801135a <tcp_timewait_input+0x9e>
 80112fe:	4b25      	ldr	r3, [pc, #148]	@ (8011394 <tcp_timewait_input+0xd8>)
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801130a:	440b      	add	r3, r1
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	2b00      	cmp	r3, #0
 8011310:	dc23      	bgt.n	801135a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011312:	4b21      	ldr	r3, [pc, #132]	@ (8011398 <tcp_timewait_input+0xdc>)
 8011314:	6819      	ldr	r1, [r3, #0]
 8011316:	4b21      	ldr	r3, [pc, #132]	@ (801139c <tcp_timewait_input+0xe0>)
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	461a      	mov	r2, r3
 801131c:	4b1d      	ldr	r3, [pc, #116]	@ (8011394 <tcp_timewait_input+0xd8>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011322:	4b1f      	ldr	r3, [pc, #124]	@ (80113a0 <tcp_timewait_input+0xe4>)
 8011324:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011326:	885b      	ldrh	r3, [r3, #2]
 8011328:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801132a:	4a1d      	ldr	r2, [pc, #116]	@ (80113a0 <tcp_timewait_input+0xe4>)
 801132c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801132e:	8812      	ldrh	r2, [r2, #0]
 8011330:	b292      	uxth	r2, r2
 8011332:	9202      	str	r2, [sp, #8]
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	4b1b      	ldr	r3, [pc, #108]	@ (80113a4 <tcp_timewait_input+0xe8>)
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	4b1b      	ldr	r3, [pc, #108]	@ (80113a8 <tcp_timewait_input+0xec>)
 801133c:	4602      	mov	r2, r0
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f003 fac4 	bl	80148cc <tcp_rst>
      return;
 8011344:	e01b      	b.n	801137e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011346:	4b0f      	ldr	r3, [pc, #60]	@ (8011384 <tcp_timewait_input+0xc8>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	f003 0301 	and.w	r3, r3, #1
 801134e:	2b00      	cmp	r3, #0
 8011350:	d003      	beq.n	801135a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011352:	4b16      	ldr	r3, [pc, #88]	@ (80113ac <tcp_timewait_input+0xf0>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801135a:	4b10      	ldr	r3, [pc, #64]	@ (801139c <tcp_timewait_input+0xe0>)
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00c      	beq.n	801137c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	8b5b      	ldrh	r3, [r3, #26]
 8011366:	f043 0302 	orr.w	r3, r3, #2
 801136a:	b29a      	uxth	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f002 fcf7 	bl	8013d64 <tcp_output>
  }
  return;
 8011376:	e001      	b.n	801137c <tcp_timewait_input+0xc0>
    return;
 8011378:	bf00      	nop
 801137a:	e000      	b.n	801137e <tcp_timewait_input+0xc2>
  return;
 801137c:	bf00      	nop
}
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	2000f154 	.word	0x2000f154
 8011388:	0801b84c 	.word	0x0801b84c
 801138c:	0801ba64 	.word	0x0801ba64
 8011390:	0801b898 	.word	0x0801b898
 8011394:	2000f148 	.word	0x2000f148
 8011398:	2000f14c 	.word	0x2000f14c
 801139c:	2000f152 	.word	0x2000f152
 80113a0:	2000f138 	.word	0x2000f138
 80113a4:	2000b9cc 	.word	0x2000b9cc
 80113a8:	2000b9d0 	.word	0x2000b9d0
 80113ac:	2000f110 	.word	0x2000f110

080113b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80113b0:	b590      	push	{r4, r7, lr}
 80113b2:	b08d      	sub	sp, #52	@ 0x34
 80113b4:	af04      	add	r7, sp, #16
 80113b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80113b8:	2300      	movs	r3, #0
 80113ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80113bc:	2300      	movs	r3, #0
 80113be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d106      	bne.n	80113d4 <tcp_process+0x24>
 80113c6:	4b9d      	ldr	r3, [pc, #628]	@ (801163c <tcp_process+0x28c>)
 80113c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80113cc:	499c      	ldr	r1, [pc, #624]	@ (8011640 <tcp_process+0x290>)
 80113ce:	489d      	ldr	r0, [pc, #628]	@ (8011644 <tcp_process+0x294>)
 80113d0:	f007 f84a 	bl	8018468 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80113d4:	4b9c      	ldr	r3, [pc, #624]	@ (8011648 <tcp_process+0x298>)
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	f003 0304 	and.w	r3, r3, #4
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d04e      	beq.n	801147e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	7d1b      	ldrb	r3, [r3, #20]
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d108      	bne.n	80113fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80113ec:	4b97      	ldr	r3, [pc, #604]	@ (801164c <tcp_process+0x29c>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d123      	bne.n	801143c <tcp_process+0x8c>
        acceptable = 1;
 80113f4:	2301      	movs	r3, #1
 80113f6:	76fb      	strb	r3, [r7, #27]
 80113f8:	e020      	b.n	801143c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113fe:	4b94      	ldr	r3, [pc, #592]	@ (8011650 <tcp_process+0x2a0>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	429a      	cmp	r2, r3
 8011404:	d102      	bne.n	801140c <tcp_process+0x5c>
        acceptable = 1;
 8011406:	2301      	movs	r3, #1
 8011408:	76fb      	strb	r3, [r7, #27]
 801140a:	e017      	b.n	801143c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801140c:	4b90      	ldr	r3, [pc, #576]	@ (8011650 <tcp_process+0x2a0>)
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011414:	1ad3      	subs	r3, r2, r3
 8011416:	2b00      	cmp	r3, #0
 8011418:	db10      	blt.n	801143c <tcp_process+0x8c>
 801141a:	4b8d      	ldr	r3, [pc, #564]	@ (8011650 <tcp_process+0x2a0>)
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011422:	6879      	ldr	r1, [r7, #4]
 8011424:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011426:	440b      	add	r3, r1
 8011428:	1ad3      	subs	r3, r2, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	dc06      	bgt.n	801143c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	8b5b      	ldrh	r3, [r3, #26]
 8011432:	f043 0302 	orr.w	r3, r3, #2
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801143c:	7efb      	ldrb	r3, [r7, #27]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d01b      	beq.n	801147a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	7d1b      	ldrb	r3, [r3, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <tcp_process+0xa8>
 801144a:	4b7c      	ldr	r3, [pc, #496]	@ (801163c <tcp_process+0x28c>)
 801144c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011450:	4980      	ldr	r1, [pc, #512]	@ (8011654 <tcp_process+0x2a4>)
 8011452:	487c      	ldr	r0, [pc, #496]	@ (8011644 <tcp_process+0x294>)
 8011454:	f007 f808 	bl	8018468 <iprintf>
      recv_flags |= TF_RESET;
 8011458:	4b7f      	ldr	r3, [pc, #508]	@ (8011658 <tcp_process+0x2a8>)
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	f043 0308 	orr.w	r3, r3, #8
 8011460:	b2da      	uxtb	r2, r3
 8011462:	4b7d      	ldr	r3, [pc, #500]	@ (8011658 <tcp_process+0x2a8>)
 8011464:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	8b5b      	ldrh	r3, [r3, #26]
 801146a:	f023 0301 	bic.w	r3, r3, #1
 801146e:	b29a      	uxth	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011474:	f06f 030d 	mvn.w	r3, #13
 8011478:	e37a      	b.n	8011b70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	e378      	b.n	8011b70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801147e:	4b72      	ldr	r3, [pc, #456]	@ (8011648 <tcp_process+0x298>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	f003 0302 	and.w	r3, r3, #2
 8011486:	2b00      	cmp	r3, #0
 8011488:	d010      	beq.n	80114ac <tcp_process+0xfc>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	7d1b      	ldrb	r3, [r3, #20]
 801148e:	2b02      	cmp	r3, #2
 8011490:	d00c      	beq.n	80114ac <tcp_process+0xfc>
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	7d1b      	ldrb	r3, [r3, #20]
 8011496:	2b03      	cmp	r3, #3
 8011498:	d008      	beq.n	80114ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	8b5b      	ldrh	r3, [r3, #26]
 801149e:	f043 0302 	orr.w	r3, r3, #2
 80114a2:	b29a      	uxth	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	e361      	b.n	8011b70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	8b5b      	ldrh	r3, [r3, #26]
 80114b0:	f003 0310 	and.w	r3, r3, #16
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d103      	bne.n	80114c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80114b8:	4b68      	ldr	r3, [pc, #416]	@ (801165c <tcp_process+0x2ac>)
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80114d0:	6878      	ldr	r0, [r7, #4]
 80114d2:	f001 fc2b 	bl	8012d2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	7d1b      	ldrb	r3, [r3, #20]
 80114da:	3b02      	subs	r3, #2
 80114dc:	2b07      	cmp	r3, #7
 80114de:	f200 8337 	bhi.w	8011b50 <tcp_process+0x7a0>
 80114e2:	a201      	add	r2, pc, #4	@ (adr r2, 80114e8 <tcp_process+0x138>)
 80114e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e8:	08011509 	.word	0x08011509
 80114ec:	08011739 	.word	0x08011739
 80114f0:	080118b1 	.word	0x080118b1
 80114f4:	080118db 	.word	0x080118db
 80114f8:	080119ff 	.word	0x080119ff
 80114fc:	080118b1 	.word	0x080118b1
 8011500:	08011a8b 	.word	0x08011a8b
 8011504:	08011b1b 	.word	0x08011b1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011508:	4b4f      	ldr	r3, [pc, #316]	@ (8011648 <tcp_process+0x298>)
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	f003 0310 	and.w	r3, r3, #16
 8011510:	2b00      	cmp	r3, #0
 8011512:	f000 80e4 	beq.w	80116de <tcp_process+0x32e>
 8011516:	4b4c      	ldr	r3, [pc, #304]	@ (8011648 <tcp_process+0x298>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 80dd 	beq.w	80116de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011528:	1c5a      	adds	r2, r3, #1
 801152a:	4b48      	ldr	r3, [pc, #288]	@ (801164c <tcp_process+0x29c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	429a      	cmp	r2, r3
 8011530:	f040 80d5 	bne.w	80116de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011534:	4b46      	ldr	r3, [pc, #280]	@ (8011650 <tcp_process+0x2a0>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011546:	4b41      	ldr	r3, [pc, #260]	@ (801164c <tcp_process+0x29c>)
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801154e:	4b44      	ldr	r3, [pc, #272]	@ (8011660 <tcp_process+0x2b0>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	89db      	ldrh	r3, [r3, #14]
 8011554:	b29a      	uxth	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011568:	4b39      	ldr	r3, [pc, #228]	@ (8011650 <tcp_process+0x2a0>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	1e5a      	subs	r2, r3, #1
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2204      	movs	r2, #4
 8011576:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	3304      	adds	r3, #4
 8011580:	4618      	mov	r0, r3
 8011582:	f005 faa3 	bl	8016acc <ip4_route>
 8011586:	4601      	mov	r1, r0
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3304      	adds	r3, #4
 801158c:	461a      	mov	r2, r3
 801158e:	4620      	mov	r0, r4
 8011590:	f7ff f88c 	bl	80106ac <tcp_eff_send_mss_netif>
 8011594:	4603      	mov	r3, r0
 8011596:	461a      	mov	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115a0:	009a      	lsls	r2, r3, #2
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80115ac:	428b      	cmp	r3, r1
 80115ae:	bf38      	it	cc
 80115b0:	460b      	movcc	r3, r1
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d204      	bcs.n	80115c0 <tcp_process+0x210>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	b29b      	uxth	r3, r3
 80115be:	e00d      	b.n	80115dc <tcp_process+0x22c>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d904      	bls.n	80115d8 <tcp_process+0x228>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115d2:	005b      	lsls	r3, r3, #1
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	e001      	b.n	80115dc <tcp_process+0x22c>
 80115d8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <tcp_process+0x24a>
 80115ec:	4b13      	ldr	r3, [pc, #76]	@ (801163c <tcp_process+0x28c>)
 80115ee:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80115f2:	491c      	ldr	r1, [pc, #112]	@ (8011664 <tcp_process+0x2b4>)
 80115f4:	4813      	ldr	r0, [pc, #76]	@ (8011644 <tcp_process+0x294>)
 80115f6:	f006 ff37 	bl	8018468 <iprintf>
        --pcb->snd_queuelen;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011600:	3b01      	subs	r3, #1
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801160e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d12a      	bne.n	801166c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801161a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801161c:	69fb      	ldr	r3, [r7, #28]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d106      	bne.n	8011630 <tcp_process+0x280>
 8011622:	4b06      	ldr	r3, [pc, #24]	@ (801163c <tcp_process+0x28c>)
 8011624:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011628:	490f      	ldr	r1, [pc, #60]	@ (8011668 <tcp_process+0x2b8>)
 801162a:	4806      	ldr	r0, [pc, #24]	@ (8011644 <tcp_process+0x294>)
 801162c:	f006 ff1c 	bl	8018468 <iprintf>
          pcb->unsent = rseg->next;
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011638:	e01c      	b.n	8011674 <tcp_process+0x2c4>
 801163a:	bf00      	nop
 801163c:	0801b84c 	.word	0x0801b84c
 8011640:	0801ba84 	.word	0x0801ba84
 8011644:	0801b898 	.word	0x0801b898
 8011648:	2000f154 	.word	0x2000f154
 801164c:	2000f14c 	.word	0x2000f14c
 8011650:	2000f148 	.word	0x2000f148
 8011654:	0801baa0 	.word	0x0801baa0
 8011658:	2000f155 	.word	0x2000f155
 801165c:	2000f110 	.word	0x2000f110
 8011660:	2000f138 	.word	0x2000f138
 8011664:	0801bac0 	.word	0x0801bac0
 8011668:	0801bad8 	.word	0x0801bad8
        } else {
          pcb->unacked = rseg->next;
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011674:	69f8      	ldr	r0, [r7, #28]
 8011676:	f7fe fc36 	bl	800fee6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801167e:	2b00      	cmp	r3, #0
 8011680:	d104      	bne.n	801168c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011688:	861a      	strh	r2, [r3, #48]	@ 0x30
 801168a:	e006      	b.n	801169a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2200      	movs	r2, #0
 8011696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00a      	beq.n	80116ba <tcp_process+0x30a>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	6910      	ldr	r0, [r2, #16]
 80116ae:	2200      	movs	r2, #0
 80116b0:	6879      	ldr	r1, [r7, #4]
 80116b2:	4798      	blx	r3
 80116b4:	4603      	mov	r3, r0
 80116b6:	76bb      	strb	r3, [r7, #26]
 80116b8:	e001      	b.n	80116be <tcp_process+0x30e>
 80116ba:	2300      	movs	r3, #0
 80116bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80116be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116c2:	f113 0f0d 	cmn.w	r3, #13
 80116c6:	d102      	bne.n	80116ce <tcp_process+0x31e>
          return ERR_ABRT;
 80116c8:	f06f 030c 	mvn.w	r3, #12
 80116cc:	e250      	b.n	8011b70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	8b5b      	ldrh	r3, [r3, #26]
 80116d2:	f043 0302 	orr.w	r3, r3, #2
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80116dc:	e23a      	b.n	8011b54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80116de:	4b98      	ldr	r3, [pc, #608]	@ (8011940 <tcp_process+0x590>)
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	f003 0310 	and.w	r3, r3, #16
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f000 8234 	beq.w	8011b54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116ec:	4b95      	ldr	r3, [pc, #596]	@ (8011944 <tcp_process+0x594>)
 80116ee:	6819      	ldr	r1, [r3, #0]
 80116f0:	4b95      	ldr	r3, [pc, #596]	@ (8011948 <tcp_process+0x598>)
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	461a      	mov	r2, r3
 80116f6:	4b95      	ldr	r3, [pc, #596]	@ (801194c <tcp_process+0x59c>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116fc:	4b94      	ldr	r3, [pc, #592]	@ (8011950 <tcp_process+0x5a0>)
 80116fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011700:	885b      	ldrh	r3, [r3, #2]
 8011702:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011704:	4a92      	ldr	r2, [pc, #584]	@ (8011950 <tcp_process+0x5a0>)
 8011706:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011708:	8812      	ldrh	r2, [r2, #0]
 801170a:	b292      	uxth	r2, r2
 801170c:	9202      	str	r2, [sp, #8]
 801170e:	9301      	str	r3, [sp, #4]
 8011710:	4b90      	ldr	r3, [pc, #576]	@ (8011954 <tcp_process+0x5a4>)
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	4b90      	ldr	r3, [pc, #576]	@ (8011958 <tcp_process+0x5a8>)
 8011716:	4602      	mov	r2, r0
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f003 f8d7 	bl	80148cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011724:	2b05      	cmp	r3, #5
 8011726:	f200 8215 	bhi.w	8011b54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f002 fea3 	bl	801447c <tcp_rexmit_rto>
      break;
 8011736:	e20d      	b.n	8011b54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011738:	4b81      	ldr	r3, [pc, #516]	@ (8011940 <tcp_process+0x590>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	f000 80a1 	beq.w	8011888 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011746:	4b7f      	ldr	r3, [pc, #508]	@ (8011944 <tcp_process+0x594>)
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	3b01      	subs	r3, #1
 8011752:	2b00      	cmp	r3, #0
 8011754:	db7e      	blt.n	8011854 <tcp_process+0x4a4>
 8011756:	4b7b      	ldr	r3, [pc, #492]	@ (8011944 <tcp_process+0x594>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	2b00      	cmp	r3, #0
 8011762:	dc77      	bgt.n	8011854 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2204      	movs	r2, #4
 8011768:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801176e:	2b00      	cmp	r3, #0
 8011770:	d102      	bne.n	8011778 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011772:	23fa      	movs	r3, #250	@ 0xfa
 8011774:	76bb      	strb	r3, [r7, #26]
 8011776:	e01d      	b.n	80117b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d106      	bne.n	8011790 <tcp_process+0x3e0>
 8011782:	4b76      	ldr	r3, [pc, #472]	@ (801195c <tcp_process+0x5ac>)
 8011784:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011788:	4975      	ldr	r1, [pc, #468]	@ (8011960 <tcp_process+0x5b0>)
 801178a:	4876      	ldr	r0, [pc, #472]	@ (8011964 <tcp_process+0x5b4>)
 801178c:	f006 fe6c 	bl	8018468 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011794:	699b      	ldr	r3, [r3, #24]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <tcp_process+0x400>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	6910      	ldr	r0, [r2, #16]
 80117a4:	2200      	movs	r2, #0
 80117a6:	6879      	ldr	r1, [r7, #4]
 80117a8:	4798      	blx	r3
 80117aa:	4603      	mov	r3, r0
 80117ac:	76bb      	strb	r3, [r7, #26]
 80117ae:	e001      	b.n	80117b4 <tcp_process+0x404>
 80117b0:	23f0      	movs	r3, #240	@ 0xf0
 80117b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80117b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80117bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80117c0:	f113 0f0d 	cmn.w	r3, #13
 80117c4:	d002      	beq.n	80117cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80117c6:	6878      	ldr	r0, [r7, #4]
 80117c8:	f7fd fce6 	bl	800f198 <tcp_abort>
            }
            return ERR_ABRT;
 80117cc:	f06f 030c 	mvn.w	r3, #12
 80117d0:	e1ce      	b.n	8011b70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 fae0 	bl	8011d98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80117d8:	4b63      	ldr	r3, [pc, #396]	@ (8011968 <tcp_process+0x5b8>)
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d005      	beq.n	80117ec <tcp_process+0x43c>
            recv_acked--;
 80117e0:	4b61      	ldr	r3, [pc, #388]	@ (8011968 <tcp_process+0x5b8>)
 80117e2:	881b      	ldrh	r3, [r3, #0]
 80117e4:	3b01      	subs	r3, #1
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	4b5f      	ldr	r3, [pc, #380]	@ (8011968 <tcp_process+0x5b8>)
 80117ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117f0:	009a      	lsls	r2, r3, #2
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117f6:	005b      	lsls	r3, r3, #1
 80117f8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80117fc:	428b      	cmp	r3, r1
 80117fe:	bf38      	it	cc
 8011800:	460b      	movcc	r3, r1
 8011802:	429a      	cmp	r2, r3
 8011804:	d204      	bcs.n	8011810 <tcp_process+0x460>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	b29b      	uxth	r3, r3
 801180e:	e00d      	b.n	801182c <tcp_process+0x47c>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	f241 121c 	movw	r2, #4380	@ 0x111c
 801181a:	4293      	cmp	r3, r2
 801181c:	d904      	bls.n	8011828 <tcp_process+0x478>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	b29b      	uxth	r3, r3
 8011826:	e001      	b.n	801182c <tcp_process+0x47c>
 8011828:	f241 131c 	movw	r3, #4380	@ 0x111c
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011832:	4b4e      	ldr	r3, [pc, #312]	@ (801196c <tcp_process+0x5bc>)
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	f003 0320 	and.w	r3, r3, #32
 801183a:	2b00      	cmp	r3, #0
 801183c:	d037      	beq.n	80118ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	8b5b      	ldrh	r3, [r3, #26]
 8011842:	f043 0302 	orr.w	r3, r3, #2
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2207      	movs	r2, #7
 8011850:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011852:	e02c      	b.n	80118ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011854:	4b3b      	ldr	r3, [pc, #236]	@ (8011944 <tcp_process+0x594>)
 8011856:	6819      	ldr	r1, [r3, #0]
 8011858:	4b3b      	ldr	r3, [pc, #236]	@ (8011948 <tcp_process+0x598>)
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	461a      	mov	r2, r3
 801185e:	4b3b      	ldr	r3, [pc, #236]	@ (801194c <tcp_process+0x59c>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011864:	4b3a      	ldr	r3, [pc, #232]	@ (8011950 <tcp_process+0x5a0>)
 8011866:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011868:	885b      	ldrh	r3, [r3, #2]
 801186a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801186c:	4a38      	ldr	r2, [pc, #224]	@ (8011950 <tcp_process+0x5a0>)
 801186e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011870:	8812      	ldrh	r2, [r2, #0]
 8011872:	b292      	uxth	r2, r2
 8011874:	9202      	str	r2, [sp, #8]
 8011876:	9301      	str	r3, [sp, #4]
 8011878:	4b36      	ldr	r3, [pc, #216]	@ (8011954 <tcp_process+0x5a4>)
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	4b36      	ldr	r3, [pc, #216]	@ (8011958 <tcp_process+0x5a8>)
 801187e:	4602      	mov	r2, r0
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f003 f823 	bl	80148cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011886:	e167      	b.n	8011b58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011888:	4b2d      	ldr	r3, [pc, #180]	@ (8011940 <tcp_process+0x590>)
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	f003 0302 	and.w	r3, r3, #2
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 8161 	beq.w	8011b58 <tcp_process+0x7a8>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189a:	1e5a      	subs	r2, r3, #1
 801189c:	4b2b      	ldr	r3, [pc, #172]	@ (801194c <tcp_process+0x59c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	f040 8159 	bne.w	8011b58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f002 fe0a 	bl	80144c0 <tcp_rexmit>
      break;
 80118ac:	e154      	b.n	8011b58 <tcp_process+0x7a8>
 80118ae:	e153      	b.n	8011b58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 fa71 	bl	8011d98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80118b6:	4b2d      	ldr	r3, [pc, #180]	@ (801196c <tcp_process+0x5bc>)
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	f003 0320 	and.w	r3, r3, #32
 80118be:	2b00      	cmp	r3, #0
 80118c0:	f000 814c 	beq.w	8011b5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8b5b      	ldrh	r3, [r3, #26]
 80118c8:	f043 0302 	orr.w	r3, r3, #2
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2207      	movs	r2, #7
 80118d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80118d8:	e140      	b.n	8011b5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 fa5c 	bl	8011d98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80118e0:	4b22      	ldr	r3, [pc, #136]	@ (801196c <tcp_process+0x5bc>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	f003 0320 	and.w	r3, r3, #32
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d071      	beq.n	80119d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118ec:	4b14      	ldr	r3, [pc, #80]	@ (8011940 <tcp_process+0x590>)
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f003 0310 	and.w	r3, r3, #16
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d060      	beq.n	80119ba <tcp_process+0x60a>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80118fc:	4b11      	ldr	r3, [pc, #68]	@ (8011944 <tcp_process+0x594>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	429a      	cmp	r2, r3
 8011902:	d15a      	bne.n	80119ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011908:	2b00      	cmp	r3, #0
 801190a:	d156      	bne.n	80119ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	8b5b      	ldrh	r3, [r3, #26]
 8011910:	f043 0302 	orr.w	r3, r3, #2
 8011914:	b29a      	uxth	r2, r3
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7fe fdbc 	bl	8010498 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011920:	4b13      	ldr	r3, [pc, #76]	@ (8011970 <tcp_process+0x5c0>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	429a      	cmp	r2, r3
 8011928:	d105      	bne.n	8011936 <tcp_process+0x586>
 801192a:	4b11      	ldr	r3, [pc, #68]	@ (8011970 <tcp_process+0x5c0>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	4a0f      	ldr	r2, [pc, #60]	@ (8011970 <tcp_process+0x5c0>)
 8011932:	6013      	str	r3, [r2, #0]
 8011934:	e02e      	b.n	8011994 <tcp_process+0x5e4>
 8011936:	4b0e      	ldr	r3, [pc, #56]	@ (8011970 <tcp_process+0x5c0>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	617b      	str	r3, [r7, #20]
 801193c:	e027      	b.n	801198e <tcp_process+0x5de>
 801193e:	bf00      	nop
 8011940:	2000f154 	.word	0x2000f154
 8011944:	2000f14c 	.word	0x2000f14c
 8011948:	2000f152 	.word	0x2000f152
 801194c:	2000f148 	.word	0x2000f148
 8011950:	2000f138 	.word	0x2000f138
 8011954:	2000b9cc 	.word	0x2000b9cc
 8011958:	2000b9d0 	.word	0x2000b9d0
 801195c:	0801b84c 	.word	0x0801b84c
 8011960:	0801baec 	.word	0x0801baec
 8011964:	0801b898 	.word	0x0801b898
 8011968:	2000f150 	.word	0x2000f150
 801196c:	2000f155 	.word	0x2000f155
 8011970:	2000f11c 	.word	0x2000f11c
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	429a      	cmp	r2, r3
 801197c:	d104      	bne.n	8011988 <tcp_process+0x5d8>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	68da      	ldr	r2, [r3, #12]
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	60da      	str	r2, [r3, #12]
 8011986:	e005      	b.n	8011994 <tcp_process+0x5e4>
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	617b      	str	r3, [r7, #20]
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1ef      	bne.n	8011974 <tcp_process+0x5c4>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	60da      	str	r2, [r3, #12]
 801199a:	4b77      	ldr	r3, [pc, #476]	@ (8011b78 <tcp_process+0x7c8>)
 801199c:	2201      	movs	r2, #1
 801199e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	220a      	movs	r2, #10
 80119a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80119a6:	4b75      	ldr	r3, [pc, #468]	@ (8011b7c <tcp_process+0x7cc>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	60da      	str	r2, [r3, #12]
 80119ae:	4a73      	ldr	r2, [pc, #460]	@ (8011b7c <tcp_process+0x7cc>)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	f003 f94c 	bl	8014c50 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80119b8:	e0d2      	b.n	8011b60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	8b5b      	ldrh	r3, [r3, #26]
 80119be:	f043 0302 	orr.w	r3, r3, #2
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2208      	movs	r2, #8
 80119cc:	751a      	strb	r2, [r3, #20]
      break;
 80119ce:	e0c7      	b.n	8011b60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119d0:	4b6b      	ldr	r3, [pc, #428]	@ (8011b80 <tcp_process+0x7d0>)
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	f003 0310 	and.w	r3, r3, #16
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 80c1 	beq.w	8011b60 <tcp_process+0x7b0>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119e2:	4b68      	ldr	r3, [pc, #416]	@ (8011b84 <tcp_process+0x7d4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	f040 80ba 	bne.w	8011b60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f040 80b5 	bne.w	8011b60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2206      	movs	r2, #6
 80119fa:	751a      	strb	r2, [r3, #20]
      break;
 80119fc:	e0b0      	b.n	8011b60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f9ca 	bl	8011d98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011a04:	4b60      	ldr	r3, [pc, #384]	@ (8011b88 <tcp_process+0x7d8>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	f003 0320 	and.w	r3, r3, #32
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f000 80a9 	beq.w	8011b64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8b5b      	ldrh	r3, [r3, #26]
 8011a16:	f043 0302 	orr.w	r3, r3, #2
 8011a1a:	b29a      	uxth	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7fe fd39 	bl	8010498 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a26:	4b59      	ldr	r3, [pc, #356]	@ (8011b8c <tcp_process+0x7dc>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d105      	bne.n	8011a3c <tcp_process+0x68c>
 8011a30:	4b56      	ldr	r3, [pc, #344]	@ (8011b8c <tcp_process+0x7dc>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	4a55      	ldr	r2, [pc, #340]	@ (8011b8c <tcp_process+0x7dc>)
 8011a38:	6013      	str	r3, [r2, #0]
 8011a3a:	e013      	b.n	8011a64 <tcp_process+0x6b4>
 8011a3c:	4b53      	ldr	r3, [pc, #332]	@ (8011b8c <tcp_process+0x7dc>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	613b      	str	r3, [r7, #16]
 8011a42:	e00c      	b.n	8011a5e <tcp_process+0x6ae>
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	68db      	ldr	r3, [r3, #12]
 8011a48:	687a      	ldr	r2, [r7, #4]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d104      	bne.n	8011a58 <tcp_process+0x6a8>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	68da      	ldr	r2, [r3, #12]
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	60da      	str	r2, [r3, #12]
 8011a56:	e005      	b.n	8011a64 <tcp_process+0x6b4>
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	613b      	str	r3, [r7, #16]
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1ef      	bne.n	8011a44 <tcp_process+0x694>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	60da      	str	r2, [r3, #12]
 8011a6a:	4b43      	ldr	r3, [pc, #268]	@ (8011b78 <tcp_process+0x7c8>)
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	220a      	movs	r2, #10
 8011a74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a76:	4b41      	ldr	r3, [pc, #260]	@ (8011b7c <tcp_process+0x7cc>)
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	60da      	str	r2, [r3, #12]
 8011a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8011b7c <tcp_process+0x7cc>)
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	f003 f8e4 	bl	8014c50 <tcp_timer_needed>
      }
      break;
 8011a88:	e06c      	b.n	8011b64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f984 	bl	8011d98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a90:	4b3b      	ldr	r3, [pc, #236]	@ (8011b80 <tcp_process+0x7d0>)
 8011a92:	781b      	ldrb	r3, [r3, #0]
 8011a94:	f003 0310 	and.w	r3, r3, #16
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d065      	beq.n	8011b68 <tcp_process+0x7b8>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011aa0:	4b38      	ldr	r3, [pc, #224]	@ (8011b84 <tcp_process+0x7d4>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d15f      	bne.n	8011b68 <tcp_process+0x7b8>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d15b      	bne.n	8011b68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7fe fcf1 	bl	8010498 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ab6:	4b35      	ldr	r3, [pc, #212]	@ (8011b8c <tcp_process+0x7dc>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d105      	bne.n	8011acc <tcp_process+0x71c>
 8011ac0:	4b32      	ldr	r3, [pc, #200]	@ (8011b8c <tcp_process+0x7dc>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	68db      	ldr	r3, [r3, #12]
 8011ac6:	4a31      	ldr	r2, [pc, #196]	@ (8011b8c <tcp_process+0x7dc>)
 8011ac8:	6013      	str	r3, [r2, #0]
 8011aca:	e013      	b.n	8011af4 <tcp_process+0x744>
 8011acc:	4b2f      	ldr	r3, [pc, #188]	@ (8011b8c <tcp_process+0x7dc>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	60fb      	str	r3, [r7, #12]
 8011ad2:	e00c      	b.n	8011aee <tcp_process+0x73e>
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d104      	bne.n	8011ae8 <tcp_process+0x738>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68da      	ldr	r2, [r3, #12]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	60da      	str	r2, [r3, #12]
 8011ae6:	e005      	b.n	8011af4 <tcp_process+0x744>
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	60fb      	str	r3, [r7, #12]
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1ef      	bne.n	8011ad4 <tcp_process+0x724>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	60da      	str	r2, [r3, #12]
 8011afa:	4b1f      	ldr	r3, [pc, #124]	@ (8011b78 <tcp_process+0x7c8>)
 8011afc:	2201      	movs	r2, #1
 8011afe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	220a      	movs	r2, #10
 8011b04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011b06:	4b1d      	ldr	r3, [pc, #116]	@ (8011b7c <tcp_process+0x7cc>)
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	60da      	str	r2, [r3, #12]
 8011b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8011b7c <tcp_process+0x7cc>)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	f003 f89c 	bl	8014c50 <tcp_timer_needed>
      }
      break;
 8011b18:	e026      	b.n	8011b68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 f93c 	bl	8011d98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011b20:	4b17      	ldr	r3, [pc, #92]	@ (8011b80 <tcp_process+0x7d0>)
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	f003 0310 	and.w	r3, r3, #16
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d01f      	beq.n	8011b6c <tcp_process+0x7bc>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b30:	4b14      	ldr	r3, [pc, #80]	@ (8011b84 <tcp_process+0x7d4>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d119      	bne.n	8011b6c <tcp_process+0x7bc>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d115      	bne.n	8011b6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011b40:	4b11      	ldr	r3, [pc, #68]	@ (8011b88 <tcp_process+0x7d8>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f043 0310 	orr.w	r3, r3, #16
 8011b48:	b2da      	uxtb	r2, r3
 8011b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8011b88 <tcp_process+0x7d8>)
 8011b4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011b4e:	e00d      	b.n	8011b6c <tcp_process+0x7bc>
    default:
      break;
 8011b50:	bf00      	nop
 8011b52:	e00c      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b54:	bf00      	nop
 8011b56:	e00a      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b58:	bf00      	nop
 8011b5a:	e008      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b5c:	bf00      	nop
 8011b5e:	e006      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b60:	bf00      	nop
 8011b62:	e004      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b64:	bf00      	nop
 8011b66:	e002      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b68:	bf00      	nop
 8011b6a:	e000      	b.n	8011b6e <tcp_process+0x7be>
      break;
 8011b6c:	bf00      	nop
  }
  return ERR_OK;
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3724      	adds	r7, #36	@ 0x24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd90      	pop	{r4, r7, pc}
 8011b78:	2000f124 	.word	0x2000f124
 8011b7c:	2000f120 	.word	0x2000f120
 8011b80:	2000f154 	.word	0x2000f154
 8011b84:	2000f14c 	.word	0x2000f14c
 8011b88:	2000f155 	.word	0x2000f155
 8011b8c:	2000f11c 	.word	0x2000f11c

08011b90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b90:	b590      	push	{r4, r7, lr}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <tcp_oos_insert_segment+0x1e>
 8011ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8011c90 <tcp_oos_insert_segment+0x100>)
 8011ba2:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011ba6:	493b      	ldr	r1, [pc, #236]	@ (8011c94 <tcp_oos_insert_segment+0x104>)
 8011ba8:	483b      	ldr	r0, [pc, #236]	@ (8011c98 <tcp_oos_insert_segment+0x108>)
 8011baa:	f006 fc5d 	bl	8018468 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	899b      	ldrh	r3, [r3, #12]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fb f8c6 	bl	800cd48 <lwip_htons>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f003 0301 	and.w	r3, r3, #1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d028      	beq.n	8011c1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011bc8:	6838      	ldr	r0, [r7, #0]
 8011bca:	f7fe f977 	bl	800febc <tcp_segs_free>
    next = NULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	603b      	str	r3, [r7, #0]
 8011bd2:	e056      	b.n	8011c82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	899b      	ldrh	r3, [r3, #12]
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7fb f8b3 	bl	800cd48 <lwip_htons>
 8011be2:	4603      	mov	r3, r0
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	f003 0301 	and.w	r3, r3, #1
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00d      	beq.n	8011c0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	899b      	ldrh	r3, [r3, #12]
 8011bf4:	b29c      	uxth	r4, r3
 8011bf6:	2001      	movs	r0, #1
 8011bf8:	f7fb f8a6 	bl	800cd48 <lwip_htons>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	461a      	mov	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	4322      	orrs	r2, r4
 8011c06:	b292      	uxth	r2, r2
 8011c08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011c14:	68f8      	ldr	r0, [r7, #12]
 8011c16:	f7fe f966 	bl	800fee6 <tcp_seg_free>
    while (next &&
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00e      	beq.n	8011c3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	891b      	ldrh	r3, [r3, #8]
 8011c24:	461a      	mov	r2, r3
 8011c26:	4b1d      	ldr	r3, [pc, #116]	@ (8011c9c <tcp_oos_insert_segment+0x10c>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	441a      	add	r2, r3
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	6839      	ldr	r1, [r7, #0]
 8011c34:	8909      	ldrh	r1, [r1, #8]
 8011c36:	440b      	add	r3, r1
 8011c38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	daca      	bge.n	8011bd4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d01e      	beq.n	8011c82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	891b      	ldrh	r3, [r3, #8]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	4b14      	ldr	r3, [pc, #80]	@ (8011c9c <tcp_oos_insert_segment+0x10c>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	441a      	add	r2, r3
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	dd12      	ble.n	8011c82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	4b0d      	ldr	r3, [pc, #52]	@ (8011c9c <tcp_oos_insert_segment+0x10c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	1ad3      	subs	r3, r2, r3
 8011c6c:	b29a      	uxth	r2, r3
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685a      	ldr	r2, [r3, #4]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	891b      	ldrh	r3, [r3, #8]
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	f7fc fb05 	bl	800e28c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	683a      	ldr	r2, [r7, #0]
 8011c86:	601a      	str	r2, [r3, #0]
}
 8011c88:	bf00      	nop
 8011c8a:	3714      	adds	r7, #20
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd90      	pop	{r4, r7, pc}
 8011c90:	0801b84c 	.word	0x0801b84c
 8011c94:	0801bb0c 	.word	0x0801bb0c
 8011c98:	0801b898 	.word	0x0801b898
 8011c9c:	2000f148 	.word	0x2000f148

08011ca0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ca0:	b5b0      	push	{r4, r5, r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
 8011cac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011cae:	e03e      	b.n	8011d2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fc fcf8 	bl	800e6b4 <pbuf_clen>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cce:	8a7a      	ldrh	r2, [r7, #18]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d906      	bls.n	8011ce2 <tcp_free_acked_segments+0x42>
 8011cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8011d80 <tcp_free_acked_segments+0xe0>)
 8011cd6:	f240 4257 	movw	r2, #1111	@ 0x457
 8011cda:	492a      	ldr	r1, [pc, #168]	@ (8011d84 <tcp_free_acked_segments+0xe4>)
 8011cdc:	482a      	ldr	r0, [pc, #168]	@ (8011d88 <tcp_free_acked_segments+0xe8>)
 8011cde:	f006 fbc3 	bl	8018468 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011ce8:	8a7b      	ldrh	r3, [r7, #18]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	891a      	ldrh	r2, [r3, #8]
 8011cf8:	4b24      	ldr	r3, [pc, #144]	@ (8011d8c <tcp_free_acked_segments+0xec>)
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	4b22      	ldr	r3, [pc, #136]	@ (8011d8c <tcp_free_acked_segments+0xec>)
 8011d02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011d04:	6978      	ldr	r0, [r7, #20]
 8011d06:	f7fe f8ee 	bl	800fee6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d00c      	beq.n	8011d2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d109      	bne.n	8011d2e <tcp_free_acked_segments+0x8e>
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d106      	bne.n	8011d2e <tcp_free_acked_segments+0x8e>
 8011d20:	4b17      	ldr	r3, [pc, #92]	@ (8011d80 <tcp_free_acked_segments+0xe0>)
 8011d22:	f240 4261 	movw	r2, #1121	@ 0x461
 8011d26:	491a      	ldr	r1, [pc, #104]	@ (8011d90 <tcp_free_acked_segments+0xf0>)
 8011d28:	4817      	ldr	r0, [pc, #92]	@ (8011d88 <tcp_free_acked_segments+0xe8>)
 8011d2a:	f006 fb9d 	bl	8018468 <iprintf>
  while (seg_list != NULL &&
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d020      	beq.n	8011d76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fb f819 	bl	800cd72 <lwip_htonl>
 8011d40:	4604      	mov	r4, r0
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	891b      	ldrh	r3, [r3, #8]
 8011d46:	461d      	mov	r5, r3
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	899b      	ldrh	r3, [r3, #12]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fa fff9 	bl	800cd48 <lwip_htons>
 8011d56:	4603      	mov	r3, r0
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	f003 0303 	and.w	r3, r3, #3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <tcp_free_acked_segments+0xc6>
 8011d62:	2301      	movs	r3, #1
 8011d64:	e000      	b.n	8011d68 <tcp_free_acked_segments+0xc8>
 8011d66:	2300      	movs	r3, #0
 8011d68:	442b      	add	r3, r5
 8011d6a:	18e2      	adds	r2, r4, r3
 8011d6c:	4b09      	ldr	r3, [pc, #36]	@ (8011d94 <tcp_free_acked_segments+0xf4>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	dd9c      	ble.n	8011cb0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011d76:	68bb      	ldr	r3, [r7, #8]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3718      	adds	r7, #24
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d80:	0801b84c 	.word	0x0801b84c
 8011d84:	0801bb34 	.word	0x0801bb34
 8011d88:	0801b898 	.word	0x0801b898
 8011d8c:	2000f150 	.word	0x2000f150
 8011d90:	0801bb5c 	.word	0x0801bb5c
 8011d94:	2000f14c 	.word	0x2000f14c

08011d98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011d98:	b5b0      	push	{r4, r5, r7, lr}
 8011d9a:	b094      	sub	sp, #80	@ 0x50
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011da0:	2300      	movs	r3, #0
 8011da2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d106      	bne.n	8011db8 <tcp_receive+0x20>
 8011daa:	4b91      	ldr	r3, [pc, #580]	@ (8011ff0 <tcp_receive+0x258>)
 8011dac:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011db0:	4990      	ldr	r1, [pc, #576]	@ (8011ff4 <tcp_receive+0x25c>)
 8011db2:	4891      	ldr	r0, [pc, #580]	@ (8011ff8 <tcp_receive+0x260>)
 8011db4:	f006 fb58 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d806      	bhi.n	8011dce <tcp_receive+0x36>
 8011dc0:	4b8b      	ldr	r3, [pc, #556]	@ (8011ff0 <tcp_receive+0x258>)
 8011dc2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8011dc6:	498d      	ldr	r1, [pc, #564]	@ (8011ffc <tcp_receive+0x264>)
 8011dc8:	488b      	ldr	r0, [pc, #556]	@ (8011ff8 <tcp_receive+0x260>)
 8011dca:	f006 fb4d 	bl	8018468 <iprintf>

  if (flags & TCP_ACK) {
 8011dce:	4b8c      	ldr	r3, [pc, #560]	@ (8012000 <tcp_receive+0x268>)
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	f003 0310 	and.w	r3, r3, #16
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f000 8264 	beq.w	80122a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011de2:	461a      	mov	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011de8:	4413      	add	r3, r2
 8011dea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011df0:	4b84      	ldr	r3, [pc, #528]	@ (8012004 <tcp_receive+0x26c>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	db1b      	blt.n	8011e32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011dfe:	4b81      	ldr	r3, [pc, #516]	@ (8012004 <tcp_receive+0x26c>)
 8011e00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d106      	bne.n	8011e14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8012008 <tcp_receive+0x270>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	db0e      	blt.n	8011e32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011e18:	4b7b      	ldr	r3, [pc, #492]	@ (8012008 <tcp_receive+0x270>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d125      	bne.n	8011e6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011e20:	4b7a      	ldr	r3, [pc, #488]	@ (801200c <tcp_receive+0x274>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	89db      	ldrh	r3, [r3, #14]
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d91c      	bls.n	8011e6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011e32:	4b76      	ldr	r3, [pc, #472]	@ (801200c <tcp_receive+0x274>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	89db      	ldrh	r3, [r3, #14]
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	d205      	bcs.n	8011e5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011e5c:	4b69      	ldr	r3, [pc, #420]	@ (8012004 <tcp_receive+0x26c>)
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011e64:	4b68      	ldr	r3, [pc, #416]	@ (8012008 <tcp_receive+0x270>)
 8011e66:	681a      	ldr	r2, [r3, #0]
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011e6c:	4b66      	ldr	r3, [pc, #408]	@ (8012008 <tcp_receive+0x270>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dc58      	bgt.n	8011f2c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011e7a:	4b65      	ldr	r3, [pc, #404]	@ (8012010 <tcp_receive+0x278>)
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d14b      	bne.n	8011f1a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011e8c:	4413      	add	r3, r2
 8011e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d142      	bne.n	8011f1a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	db3d      	blt.n	8011f1a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ea2:	4b59      	ldr	r3, [pc, #356]	@ (8012008 <tcp_receive+0x270>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d137      	bne.n	8011f1a <tcp_receive+0x182>
              found_dupack = 1;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011eb4:	2bff      	cmp	r3, #255	@ 0xff
 8011eb6:	d007      	beq.n	8011ec8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	b2da      	uxtb	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011ece:	2b03      	cmp	r3, #3
 8011ed0:	d91b      	bls.n	8011f0a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011edc:	4413      	add	r3, r2
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d30a      	bcc.n	8011f00 <tcp_receive+0x168>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011ef4:	4413      	add	r3, r2
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011efe:	e004      	b.n	8011f0a <tcp_receive+0x172>
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	d902      	bls.n	8011f1a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f002 fb3f 	bl	8014598 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f040 8161 	bne.w	80121e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011f2a:	e15b      	b.n	80121e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011f2c:	4b36      	ldr	r3, [pc, #216]	@ (8012008 <tcp_receive+0x270>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	3b01      	subs	r3, #1
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	f2c0 814e 	blt.w	80121da <tcp_receive+0x442>
 8011f3e:	4b32      	ldr	r3, [pc, #200]	@ (8012008 <tcp_receive+0x270>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f300 8146 	bgt.w	80121da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	8b5b      	ldrh	r3, [r3, #26]
 8011f52:	f003 0304 	and.w	r3, r3, #4
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d010      	beq.n	8011f7c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	8b5b      	ldrh	r3, [r3, #26]
 8011f5e:	f023 0304 	bic.w	r3, r3, #4
 8011f62:	b29a      	uxth	r2, r3
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011f8a:	10db      	asrs	r3, r3, #3
 8011f8c:	b21b      	sxth	r3, r3
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	4413      	add	r3, r2
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	b21a      	sxth	r2, r3
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011fa4:	4b18      	ldr	r3, [pc, #96]	@ (8012008 <tcp_receive+0x270>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011fbc:	4b12      	ldr	r3, [pc, #72]	@ (8012008 <tcp_receive+0x270>)
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	7d1b      	ldrb	r3, [r3, #20]
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	f240 8097 	bls.w	80120fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d245      	bcs.n	801206a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	8b5b      	ldrh	r3, [r3, #26]
 8011fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d014      	beq.n	8012014 <tcp_receive+0x27c>
 8011fea:	2301      	movs	r3, #1
 8011fec:	e013      	b.n	8012016 <tcp_receive+0x27e>
 8011fee:	bf00      	nop
 8011ff0:	0801b84c 	.word	0x0801b84c
 8011ff4:	0801bb7c 	.word	0x0801bb7c
 8011ff8:	0801b898 	.word	0x0801b898
 8011ffc:	0801bb98 	.word	0x0801bb98
 8012000:	2000f154 	.word	0x2000f154
 8012004:	2000f148 	.word	0x2000f148
 8012008:	2000f14c 	.word	0x2000f14c
 801200c:	2000f138 	.word	0x2000f138
 8012010:	2000f152 	.word	0x2000f152
 8012014:	2302      	movs	r3, #2
 8012016:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801201a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801201e:	b29a      	uxth	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012024:	fb12 f303 	smulbb	r3, r2, r3
 8012028:	b29b      	uxth	r3, r3
 801202a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801202c:	4293      	cmp	r3, r2
 801202e:	bf28      	it	cs
 8012030:	4613      	movcs	r3, r2
 8012032:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801203a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801203c:	4413      	add	r3, r2
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012046:	429a      	cmp	r2, r3
 8012048:	d309      	bcc.n	801205e <tcp_receive+0x2c6>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012050:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012052:	4413      	add	r3, r2
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801205c:	e04e      	b.n	80120fc <tcp_receive+0x364>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012064:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012068:	e048      	b.n	80120fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012070:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012072:	4413      	add	r3, r2
 8012074:	b29a      	uxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801207c:	429a      	cmp	r2, r3
 801207e:	d309      	bcc.n	8012094 <tcp_receive+0x2fc>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012086:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012088:	4413      	add	r3, r2
 801208a:	b29a      	uxth	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012092:	e004      	b.n	801209e <tcp_receive+0x306>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801209a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d326      	bcc.n	80120fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	b29a      	uxth	r2, r3
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120ce:	4413      	add	r3, r2
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80120d8:	429a      	cmp	r2, r3
 80120da:	d30a      	bcc.n	80120f2 <tcp_receive+0x35a>
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120e6:	4413      	add	r3, r2
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80120f0:	e004      	b.n	80120fc <tcp_receive+0x364>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012104:	4a98      	ldr	r2, [pc, #608]	@ (8012368 <tcp_receive+0x5d0>)
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f7ff fdca 	bl	8011ca0 <tcp_free_acked_segments>
 801210c:	4602      	mov	r2, r0
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801211a:	4a94      	ldr	r2, [pc, #592]	@ (801236c <tcp_receive+0x5d4>)
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff fdbf 	bl	8011ca0 <tcp_free_acked_segments>
 8012122:	4602      	mov	r2, r0
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801212c:	2b00      	cmp	r3, #0
 801212e:	d104      	bne.n	801213a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012136:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012138:	e002      	b.n	8012140 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2200      	movs	r2, #0
 801213e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801214a:	2b00      	cmp	r3, #0
 801214c:	d103      	bne.n	8012156 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2200      	movs	r2, #0
 8012152:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801215c:	4b84      	ldr	r3, [pc, #528]	@ (8012370 <tcp_receive+0x5d8>)
 801215e:	881b      	ldrh	r3, [r3, #0]
 8012160:	4413      	add	r3, r2
 8012162:	b29a      	uxth	r2, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	8b5b      	ldrh	r3, [r3, #26]
 801216e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012172:	2b00      	cmp	r3, #0
 8012174:	d035      	beq.n	80121e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801217a:	2b00      	cmp	r3, #0
 801217c:	d118      	bne.n	80121b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012182:	2b00      	cmp	r3, #0
 8012184:	d00c      	beq.n	80121a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4618      	mov	r0, r3
 8012194:	f7fa fded 	bl	800cd72 <lwip_htonl>
 8012198:	4603      	mov	r3, r0
 801219a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801219c:	2b00      	cmp	r3, #0
 801219e:	dc20      	bgt.n	80121e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8b5b      	ldrh	r3, [r3, #26]
 80121a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121ae:	e018      	b.n	80121e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	4618      	mov	r0, r3
 80121be:	f7fa fdd8 	bl	800cd72 <lwip_htonl>
 80121c2:	4603      	mov	r3, r0
 80121c4:	1ae3      	subs	r3, r4, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	dc0b      	bgt.n	80121e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	8b5b      	ldrh	r3, [r3, #26]
 80121ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121d8:	e003      	b.n	80121e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f002 fbc8 	bl	8014970 <tcp_send_empty_ack>
 80121e0:	e000      	b.n	80121e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d05b      	beq.n	80122a4 <tcp_receive+0x50c>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121f0:	4b60      	ldr	r3, [pc, #384]	@ (8012374 <tcp_receive+0x5dc>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	da54      	bge.n	80122a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80121fa:	4b5f      	ldr	r3, [pc, #380]	@ (8012378 <tcp_receive+0x5e0>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	b29a      	uxth	r2, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012204:	b29b      	uxth	r3, r3
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	b29b      	uxth	r3, r3
 801220a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801220e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012218:	10db      	asrs	r3, r3, #3
 801221a:	b21b      	sxth	r3, r3
 801221c:	b29b      	uxth	r3, r3
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	b29b      	uxth	r3, r3
 8012222:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801222c:	b29a      	uxth	r2, r3
 801222e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012232:	4413      	add	r3, r2
 8012234:	b29b      	uxth	r3, r3
 8012236:	b21a      	sxth	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801223c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012240:	2b00      	cmp	r3, #0
 8012242:	da05      	bge.n	8012250 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012248:	425b      	negs	r3, r3
 801224a:	b29b      	uxth	r3, r3
 801224c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012250:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801225a:	109b      	asrs	r3, r3, #2
 801225c:	b21b      	sxth	r3, r3
 801225e:	b29b      	uxth	r3, r3
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	b29b      	uxth	r3, r3
 8012264:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801226e:	b29a      	uxth	r2, r3
 8012270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012274:	4413      	add	r3, r2
 8012276:	b29b      	uxth	r3, r3
 8012278:	b21a      	sxth	r2, r3
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012284:	10db      	asrs	r3, r3, #3
 8012286:	b21b      	sxth	r3, r3
 8012288:	b29a      	uxth	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012290:	b29b      	uxth	r3, r3
 8012292:	4413      	add	r3, r2
 8012294:	b29b      	uxth	r3, r3
 8012296:	b21a      	sxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2200      	movs	r2, #0
 80122a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80122a4:	4b35      	ldr	r3, [pc, #212]	@ (801237c <tcp_receive+0x5e4>)
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f000 84df 	beq.w	8012c6c <tcp_receive+0xed4>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	7d1b      	ldrb	r3, [r3, #20]
 80122b2:	2b06      	cmp	r3, #6
 80122b4:	f200 84da 	bhi.w	8012c6c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122bc:	4b30      	ldr	r3, [pc, #192]	@ (8012380 <tcp_receive+0x5e8>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	3b01      	subs	r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f2c0 808f 	blt.w	80123e8 <tcp_receive+0x650>
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122ce:	4b2b      	ldr	r3, [pc, #172]	@ (801237c <tcp_receive+0x5e4>)
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	4619      	mov	r1, r3
 80122d4:	4b2a      	ldr	r3, [pc, #168]	@ (8012380 <tcp_receive+0x5e8>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	440b      	add	r3, r1
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	3301      	adds	r3, #1
 80122de:	2b00      	cmp	r3, #0
 80122e0:	f300 8082 	bgt.w	80123e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80122e4:	4b27      	ldr	r3, [pc, #156]	@ (8012384 <tcp_receive+0x5ec>)
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80122ee:	4b24      	ldr	r3, [pc, #144]	@ (8012380 <tcp_receive+0x5e8>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80122f6:	4b23      	ldr	r3, [pc, #140]	@ (8012384 <tcp_receive+0x5ec>)
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d106      	bne.n	801230c <tcp_receive+0x574>
 80122fe:	4b22      	ldr	r3, [pc, #136]	@ (8012388 <tcp_receive+0x5f0>)
 8012300:	f240 5294 	movw	r2, #1428	@ 0x594
 8012304:	4921      	ldr	r1, [pc, #132]	@ (801238c <tcp_receive+0x5f4>)
 8012306:	4822      	ldr	r0, [pc, #136]	@ (8012390 <tcp_receive+0x5f8>)
 8012308:	f006 f8ae 	bl	8018468 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012312:	4293      	cmp	r3, r2
 8012314:	d906      	bls.n	8012324 <tcp_receive+0x58c>
 8012316:	4b1c      	ldr	r3, [pc, #112]	@ (8012388 <tcp_receive+0x5f0>)
 8012318:	f240 5295 	movw	r2, #1429	@ 0x595
 801231c:	491d      	ldr	r1, [pc, #116]	@ (8012394 <tcp_receive+0x5fc>)
 801231e:	481c      	ldr	r0, [pc, #112]	@ (8012390 <tcp_receive+0x5f8>)
 8012320:	f006 f8a2 	bl	8018468 <iprintf>
      off = (u16_t)off32;
 8012324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012326:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801232a:	4b16      	ldr	r3, [pc, #88]	@ (8012384 <tcp_receive+0x5ec>)
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	891b      	ldrh	r3, [r3, #8]
 8012330:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012334:	429a      	cmp	r2, r3
 8012336:	d906      	bls.n	8012346 <tcp_receive+0x5ae>
 8012338:	4b13      	ldr	r3, [pc, #76]	@ (8012388 <tcp_receive+0x5f0>)
 801233a:	f240 5297 	movw	r2, #1431	@ 0x597
 801233e:	4916      	ldr	r1, [pc, #88]	@ (8012398 <tcp_receive+0x600>)
 8012340:	4813      	ldr	r0, [pc, #76]	@ (8012390 <tcp_receive+0x5f8>)
 8012342:	f006 f891 	bl	8018468 <iprintf>
      inseg.len -= off;
 8012346:	4b0f      	ldr	r3, [pc, #60]	@ (8012384 <tcp_receive+0x5ec>)
 8012348:	891a      	ldrh	r2, [r3, #8]
 801234a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801234e:	1ad3      	subs	r3, r2, r3
 8012350:	b29a      	uxth	r2, r3
 8012352:	4b0c      	ldr	r3, [pc, #48]	@ (8012384 <tcp_receive+0x5ec>)
 8012354:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012356:	4b0b      	ldr	r3, [pc, #44]	@ (8012384 <tcp_receive+0x5ec>)
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	891a      	ldrh	r2, [r3, #8]
 801235c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012364:	e02a      	b.n	80123bc <tcp_receive+0x624>
 8012366:	bf00      	nop
 8012368:	0801bbb4 	.word	0x0801bbb4
 801236c:	0801bbbc 	.word	0x0801bbbc
 8012370:	2000f150 	.word	0x2000f150
 8012374:	2000f14c 	.word	0x2000f14c
 8012378:	2000f110 	.word	0x2000f110
 801237c:	2000f152 	.word	0x2000f152
 8012380:	2000f148 	.word	0x2000f148
 8012384:	2000f128 	.word	0x2000f128
 8012388:	0801b84c 	.word	0x0801b84c
 801238c:	0801bbc4 	.word	0x0801bbc4
 8012390:	0801b898 	.word	0x0801b898
 8012394:	0801bbd4 	.word	0x0801bbd4
 8012398:	0801bbe4 	.word	0x0801bbe4
        off -= p->len;
 801239c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801239e:	895b      	ldrh	r3, [r3, #10]
 80123a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80123aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80123ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80123b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123b2:	2200      	movs	r2, #0
 80123b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80123b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80123bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123be:	895b      	ldrh	r3, [r3, #10]
 80123c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d8e9      	bhi.n	801239c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80123c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80123cc:	4619      	mov	r1, r3
 80123ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80123d0:	f7fc f85c 	bl	800e48c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123d8:	4a90      	ldr	r2, [pc, #576]	@ (801261c <tcp_receive+0x884>)
 80123da:	6013      	str	r3, [r2, #0]
 80123dc:	4b90      	ldr	r3, [pc, #576]	@ (8012620 <tcp_receive+0x888>)
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	4a8e      	ldr	r2, [pc, #568]	@ (801261c <tcp_receive+0x884>)
 80123e2:	6812      	ldr	r2, [r2, #0]
 80123e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80123e6:	e00d      	b.n	8012404 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80123e8:	4b8c      	ldr	r3, [pc, #560]	@ (801261c <tcp_receive+0x884>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	da06      	bge.n	8012404 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	8b5b      	ldrh	r3, [r3, #26]
 80123fa:	f043 0302 	orr.w	r3, r3, #2
 80123fe:	b29a      	uxth	r2, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012404:	4b85      	ldr	r3, [pc, #532]	@ (801261c <tcp_receive+0x884>)
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	2b00      	cmp	r3, #0
 8012410:	f2c0 8427 	blt.w	8012c62 <tcp_receive+0xeca>
 8012414:	4b81      	ldr	r3, [pc, #516]	@ (801261c <tcp_receive+0x884>)
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012420:	440b      	add	r3, r1
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	3301      	adds	r3, #1
 8012426:	2b00      	cmp	r3, #0
 8012428:	f300 841b 	bgt.w	8012c62 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012430:	4b7a      	ldr	r3, [pc, #488]	@ (801261c <tcp_receive+0x884>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	429a      	cmp	r2, r3
 8012436:	f040 8298 	bne.w	801296a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801243a:	4b79      	ldr	r3, [pc, #484]	@ (8012620 <tcp_receive+0x888>)
 801243c:	891c      	ldrh	r4, [r3, #8]
 801243e:	4b78      	ldr	r3, [pc, #480]	@ (8012620 <tcp_receive+0x888>)
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	899b      	ldrh	r3, [r3, #12]
 8012444:	b29b      	uxth	r3, r3
 8012446:	4618      	mov	r0, r3
 8012448:	f7fa fc7e 	bl	800cd48 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 0303 	and.w	r3, r3, #3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <tcp_receive+0x6c4>
 8012458:	2301      	movs	r3, #1
 801245a:	e000      	b.n	801245e <tcp_receive+0x6c6>
 801245c:	2300      	movs	r3, #0
 801245e:	4423      	add	r3, r4
 8012460:	b29a      	uxth	r2, r3
 8012462:	4b70      	ldr	r3, [pc, #448]	@ (8012624 <tcp_receive+0x88c>)
 8012464:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801246a:	4b6e      	ldr	r3, [pc, #440]	@ (8012624 <tcp_receive+0x88c>)
 801246c:	881b      	ldrh	r3, [r3, #0]
 801246e:	429a      	cmp	r2, r3
 8012470:	d274      	bcs.n	801255c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012472:	4b6b      	ldr	r3, [pc, #428]	@ (8012620 <tcp_receive+0x888>)
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	899b      	ldrh	r3, [r3, #12]
 8012478:	b29b      	uxth	r3, r3
 801247a:	4618      	mov	r0, r3
 801247c:	f7fa fc64 	bl	800cd48 <lwip_htons>
 8012480:	4603      	mov	r3, r0
 8012482:	b2db      	uxtb	r3, r3
 8012484:	f003 0301 	and.w	r3, r3, #1
 8012488:	2b00      	cmp	r3, #0
 801248a:	d01e      	beq.n	80124ca <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801248c:	4b64      	ldr	r3, [pc, #400]	@ (8012620 <tcp_receive+0x888>)
 801248e:	68db      	ldr	r3, [r3, #12]
 8012490:	899b      	ldrh	r3, [r3, #12]
 8012492:	b29b      	uxth	r3, r3
 8012494:	b21b      	sxth	r3, r3
 8012496:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801249a:	b21c      	sxth	r4, r3
 801249c:	4b60      	ldr	r3, [pc, #384]	@ (8012620 <tcp_receive+0x888>)
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	899b      	ldrh	r3, [r3, #12]
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fa fc4f 	bl	800cd48 <lwip_htons>
 80124aa:	4603      	mov	r3, r0
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7fa fc47 	bl	800cd48 <lwip_htons>
 80124ba:	4603      	mov	r3, r0
 80124bc:	b21b      	sxth	r3, r3
 80124be:	4323      	orrs	r3, r4
 80124c0:	b21a      	sxth	r2, r3
 80124c2:	4b57      	ldr	r3, [pc, #348]	@ (8012620 <tcp_receive+0x888>)
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	b292      	uxth	r2, r2
 80124c8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80124ce:	4b54      	ldr	r3, [pc, #336]	@ (8012620 <tcp_receive+0x888>)
 80124d0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80124d2:	4b53      	ldr	r3, [pc, #332]	@ (8012620 <tcp_receive+0x888>)
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	899b      	ldrh	r3, [r3, #12]
 80124d8:	b29b      	uxth	r3, r3
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fa fc34 	bl	800cd48 <lwip_htons>
 80124e0:	4603      	mov	r3, r0
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f003 0302 	and.w	r3, r3, #2
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d005      	beq.n	80124f8 <tcp_receive+0x760>
            inseg.len -= 1;
 80124ec:	4b4c      	ldr	r3, [pc, #304]	@ (8012620 <tcp_receive+0x888>)
 80124ee:	891b      	ldrh	r3, [r3, #8]
 80124f0:	3b01      	subs	r3, #1
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	4b4a      	ldr	r3, [pc, #296]	@ (8012620 <tcp_receive+0x888>)
 80124f6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80124f8:	4b49      	ldr	r3, [pc, #292]	@ (8012620 <tcp_receive+0x888>)
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	4a48      	ldr	r2, [pc, #288]	@ (8012620 <tcp_receive+0x888>)
 80124fe:	8912      	ldrh	r2, [r2, #8]
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f7fb fec2 	bl	800e28c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012508:	4b45      	ldr	r3, [pc, #276]	@ (8012620 <tcp_receive+0x888>)
 801250a:	891c      	ldrh	r4, [r3, #8]
 801250c:	4b44      	ldr	r3, [pc, #272]	@ (8012620 <tcp_receive+0x888>)
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	899b      	ldrh	r3, [r3, #12]
 8012512:	b29b      	uxth	r3, r3
 8012514:	4618      	mov	r0, r3
 8012516:	f7fa fc17 	bl	800cd48 <lwip_htons>
 801251a:	4603      	mov	r3, r0
 801251c:	b2db      	uxtb	r3, r3
 801251e:	f003 0303 	and.w	r3, r3, #3
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <tcp_receive+0x792>
 8012526:	2301      	movs	r3, #1
 8012528:	e000      	b.n	801252c <tcp_receive+0x794>
 801252a:	2300      	movs	r3, #0
 801252c:	4423      	add	r3, r4
 801252e:	b29a      	uxth	r2, r3
 8012530:	4b3c      	ldr	r3, [pc, #240]	@ (8012624 <tcp_receive+0x88c>)
 8012532:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012534:	4b3b      	ldr	r3, [pc, #236]	@ (8012624 <tcp_receive+0x88c>)
 8012536:	881b      	ldrh	r3, [r3, #0]
 8012538:	461a      	mov	r2, r3
 801253a:	4b38      	ldr	r3, [pc, #224]	@ (801261c <tcp_receive+0x884>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	441a      	add	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012544:	6879      	ldr	r1, [r7, #4]
 8012546:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012548:	440b      	add	r3, r1
 801254a:	429a      	cmp	r2, r3
 801254c:	d006      	beq.n	801255c <tcp_receive+0x7c4>
 801254e:	4b36      	ldr	r3, [pc, #216]	@ (8012628 <tcp_receive+0x890>)
 8012550:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012554:	4935      	ldr	r1, [pc, #212]	@ (801262c <tcp_receive+0x894>)
 8012556:	4836      	ldr	r0, [pc, #216]	@ (8012630 <tcp_receive+0x898>)
 8012558:	f005 ff86 	bl	8018468 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 80e6 	beq.w	8012732 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012566:	4b2e      	ldr	r3, [pc, #184]	@ (8012620 <tcp_receive+0x888>)
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	899b      	ldrh	r3, [r3, #12]
 801256c:	b29b      	uxth	r3, r3
 801256e:	4618      	mov	r0, r3
 8012570:	f7fa fbea 	bl	800cd48 <lwip_htons>
 8012574:	4603      	mov	r3, r0
 8012576:	b2db      	uxtb	r3, r3
 8012578:	f003 0301 	and.w	r3, r3, #1
 801257c:	2b00      	cmp	r3, #0
 801257e:	d010      	beq.n	80125a2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012580:	e00a      	b.n	8012598 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012586:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f7fd fca7 	bl	800fee6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801259c:	2b00      	cmp	r3, #0
 801259e:	d1f0      	bne.n	8012582 <tcp_receive+0x7ea>
 80125a0:	e0c7      	b.n	8012732 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80125a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80125a8:	e051      	b.n	801264e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	899b      	ldrh	r3, [r3, #12]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fa fbc8 	bl	800cd48 <lwip_htons>
 80125b8:	4603      	mov	r3, r0
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	f003 0301 	and.w	r3, r3, #1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d03c      	beq.n	801263e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80125c4:	4b16      	ldr	r3, [pc, #88]	@ (8012620 <tcp_receive+0x888>)
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	899b      	ldrh	r3, [r3, #12]
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7fa fbbb 	bl	800cd48 <lwip_htons>
 80125d2:	4603      	mov	r3, r0
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d12f      	bne.n	801263e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80125de:	4b10      	ldr	r3, [pc, #64]	@ (8012620 <tcp_receive+0x888>)
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	899b      	ldrh	r3, [r3, #12]
 80125e4:	b29c      	uxth	r4, r3
 80125e6:	2001      	movs	r0, #1
 80125e8:	f7fa fbae 	bl	800cd48 <lwip_htons>
 80125ec:	4603      	mov	r3, r0
 80125ee:	461a      	mov	r2, r3
 80125f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012620 <tcp_receive+0x888>)
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	4322      	orrs	r2, r4
 80125f6:	b292      	uxth	r2, r2
 80125f8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80125fa:	4b09      	ldr	r3, [pc, #36]	@ (8012620 <tcp_receive+0x888>)
 80125fc:	891c      	ldrh	r4, [r3, #8]
 80125fe:	4b08      	ldr	r3, [pc, #32]	@ (8012620 <tcp_receive+0x888>)
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	b29b      	uxth	r3, r3
 8012606:	4618      	mov	r0, r3
 8012608:	f7fa fb9e 	bl	800cd48 <lwip_htons>
 801260c:	4603      	mov	r3, r0
 801260e:	b2db      	uxtb	r3, r3
 8012610:	f003 0303 	and.w	r3, r3, #3
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00d      	beq.n	8012634 <tcp_receive+0x89c>
 8012618:	2301      	movs	r3, #1
 801261a:	e00c      	b.n	8012636 <tcp_receive+0x89e>
 801261c:	2000f148 	.word	0x2000f148
 8012620:	2000f128 	.word	0x2000f128
 8012624:	2000f152 	.word	0x2000f152
 8012628:	0801b84c 	.word	0x0801b84c
 801262c:	0801bbf4 	.word	0x0801bbf4
 8012630:	0801b898 	.word	0x0801b898
 8012634:	2300      	movs	r3, #0
 8012636:	4423      	add	r3, r4
 8012638:	b29a      	uxth	r2, r3
 801263a:	4b98      	ldr	r3, [pc, #608]	@ (801289c <tcp_receive+0xb04>)
 801263c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801263e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012640:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012648:	6938      	ldr	r0, [r7, #16]
 801264a:	f7fd fc4c 	bl	800fee6 <tcp_seg_free>
            while (next &&
 801264e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00e      	beq.n	8012672 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012654:	4b91      	ldr	r3, [pc, #580]	@ (801289c <tcp_receive+0xb04>)
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	461a      	mov	r2, r3
 801265a:	4b91      	ldr	r3, [pc, #580]	@ (80128a0 <tcp_receive+0xb08>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	441a      	add	r2, r3
 8012660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012668:	8909      	ldrh	r1, [r1, #8]
 801266a:	440b      	add	r3, r1
 801266c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801266e:	2b00      	cmp	r3, #0
 8012670:	da9b      	bge.n	80125aa <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012674:	2b00      	cmp	r3, #0
 8012676:	d059      	beq.n	801272c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012678:	4b88      	ldr	r3, [pc, #544]	@ (801289c <tcp_receive+0xb04>)
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	461a      	mov	r2, r3
 801267e:	4b88      	ldr	r3, [pc, #544]	@ (80128a0 <tcp_receive+0xb08>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	441a      	add	r2, r3
 8012684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801268c:	2b00      	cmp	r3, #0
 801268e:	dd4d      	ble.n	801272c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	b29a      	uxth	r2, r3
 8012698:	4b81      	ldr	r3, [pc, #516]	@ (80128a0 <tcp_receive+0xb08>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	b29b      	uxth	r3, r3
 801269e:	1ad3      	subs	r3, r2, r3
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	4b80      	ldr	r3, [pc, #512]	@ (80128a4 <tcp_receive+0xb0c>)
 80126a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126a6:	4b7f      	ldr	r3, [pc, #508]	@ (80128a4 <tcp_receive+0xb0c>)
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	899b      	ldrh	r3, [r3, #12]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7fa fb4a 	bl	800cd48 <lwip_htons>
 80126b4:	4603      	mov	r3, r0
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	f003 0302 	and.w	r3, r3, #2
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d005      	beq.n	80126cc <tcp_receive+0x934>
                inseg.len -= 1;
 80126c0:	4b78      	ldr	r3, [pc, #480]	@ (80128a4 <tcp_receive+0xb0c>)
 80126c2:	891b      	ldrh	r3, [r3, #8]
 80126c4:	3b01      	subs	r3, #1
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	4b76      	ldr	r3, [pc, #472]	@ (80128a4 <tcp_receive+0xb0c>)
 80126ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80126cc:	4b75      	ldr	r3, [pc, #468]	@ (80128a4 <tcp_receive+0xb0c>)
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	4a74      	ldr	r2, [pc, #464]	@ (80128a4 <tcp_receive+0xb0c>)
 80126d2:	8912      	ldrh	r2, [r2, #8]
 80126d4:	4611      	mov	r1, r2
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fb fdd8 	bl	800e28c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80126dc:	4b71      	ldr	r3, [pc, #452]	@ (80128a4 <tcp_receive+0xb0c>)
 80126de:	891c      	ldrh	r4, [r3, #8]
 80126e0:	4b70      	ldr	r3, [pc, #448]	@ (80128a4 <tcp_receive+0xb0c>)
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	899b      	ldrh	r3, [r3, #12]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fa fb2d 	bl	800cd48 <lwip_htons>
 80126ee:	4603      	mov	r3, r0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <tcp_receive+0x966>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e000      	b.n	8012700 <tcp_receive+0x968>
 80126fe:	2300      	movs	r3, #0
 8012700:	4423      	add	r3, r4
 8012702:	b29a      	uxth	r2, r3
 8012704:	4b65      	ldr	r3, [pc, #404]	@ (801289c <tcp_receive+0xb04>)
 8012706:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012708:	4b64      	ldr	r3, [pc, #400]	@ (801289c <tcp_receive+0xb04>)
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	461a      	mov	r2, r3
 801270e:	4b64      	ldr	r3, [pc, #400]	@ (80128a0 <tcp_receive+0xb08>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	441a      	add	r2, r3
 8012714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	429a      	cmp	r2, r3
 801271c:	d006      	beq.n	801272c <tcp_receive+0x994>
 801271e:	4b62      	ldr	r3, [pc, #392]	@ (80128a8 <tcp_receive+0xb10>)
 8012720:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012724:	4961      	ldr	r1, [pc, #388]	@ (80128ac <tcp_receive+0xb14>)
 8012726:	4862      	ldr	r0, [pc, #392]	@ (80128b0 <tcp_receive+0xb18>)
 8012728:	f005 fe9e 	bl	8018468 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012730:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012732:	4b5a      	ldr	r3, [pc, #360]	@ (801289c <tcp_receive+0xb04>)
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	461a      	mov	r2, r3
 8012738:	4b59      	ldr	r3, [pc, #356]	@ (80128a0 <tcp_receive+0xb08>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	441a      	add	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012746:	4b55      	ldr	r3, [pc, #340]	@ (801289c <tcp_receive+0xb04>)
 8012748:	881b      	ldrh	r3, [r3, #0]
 801274a:	429a      	cmp	r2, r3
 801274c:	d206      	bcs.n	801275c <tcp_receive+0x9c4>
 801274e:	4b56      	ldr	r3, [pc, #344]	@ (80128a8 <tcp_receive+0xb10>)
 8012750:	f240 6207 	movw	r2, #1543	@ 0x607
 8012754:	4957      	ldr	r1, [pc, #348]	@ (80128b4 <tcp_receive+0xb1c>)
 8012756:	4856      	ldr	r0, [pc, #344]	@ (80128b0 <tcp_receive+0xb18>)
 8012758:	f005 fe86 	bl	8018468 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012760:	4b4e      	ldr	r3, [pc, #312]	@ (801289c <tcp_receive+0xb04>)
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	b29a      	uxth	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7fc fe93 	bl	800f498 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012772:	4b4c      	ldr	r3, [pc, #304]	@ (80128a4 <tcp_receive+0xb0c>)
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	891b      	ldrh	r3, [r3, #8]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801277c:	4b49      	ldr	r3, [pc, #292]	@ (80128a4 <tcp_receive+0xb0c>)
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	4a4d      	ldr	r2, [pc, #308]	@ (80128b8 <tcp_receive+0xb20>)
 8012782:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012784:	4b47      	ldr	r3, [pc, #284]	@ (80128a4 <tcp_receive+0xb0c>)
 8012786:	2200      	movs	r2, #0
 8012788:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801278a:	4b46      	ldr	r3, [pc, #280]	@ (80128a4 <tcp_receive+0xb0c>)
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	899b      	ldrh	r3, [r3, #12]
 8012790:	b29b      	uxth	r3, r3
 8012792:	4618      	mov	r0, r3
 8012794:	f7fa fad8 	bl	800cd48 <lwip_htons>
 8012798:	4603      	mov	r3, r0
 801279a:	b2db      	uxtb	r3, r3
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	f000 80b8 	beq.w	8012916 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80127a6:	4b45      	ldr	r3, [pc, #276]	@ (80128bc <tcp_receive+0xb24>)
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	f043 0320 	orr.w	r3, r3, #32
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	4b42      	ldr	r3, [pc, #264]	@ (80128bc <tcp_receive+0xb24>)
 80127b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80127b4:	e0af      	b.n	8012916 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	4a36      	ldr	r2, [pc, #216]	@ (80128a0 <tcp_receive+0xb08>)
 80127c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	891b      	ldrh	r3, [r3, #8]
 80127cc:	461c      	mov	r4, r3
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	899b      	ldrh	r3, [r3, #12]
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fa fab6 	bl	800cd48 <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	f003 0303 	and.w	r3, r3, #3
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d001      	beq.n	80127ec <tcp_receive+0xa54>
 80127e8:	2301      	movs	r3, #1
 80127ea:	e000      	b.n	80127ee <tcp_receive+0xa56>
 80127ec:	2300      	movs	r3, #0
 80127ee:	191a      	adds	r2, r3, r4
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127f4:	441a      	add	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80127fe:	461c      	mov	r4, r3
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	891b      	ldrh	r3, [r3, #8]
 8012804:	461d      	mov	r5, r3
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	b29b      	uxth	r3, r3
 801280e:	4618      	mov	r0, r3
 8012810:	f7fa fa9a 	bl	800cd48 <lwip_htons>
 8012814:	4603      	mov	r3, r0
 8012816:	b2db      	uxtb	r3, r3
 8012818:	f003 0303 	and.w	r3, r3, #3
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <tcp_receive+0xa8c>
 8012820:	2301      	movs	r3, #1
 8012822:	e000      	b.n	8012826 <tcp_receive+0xa8e>
 8012824:	2300      	movs	r3, #0
 8012826:	442b      	add	r3, r5
 8012828:	429c      	cmp	r4, r3
 801282a:	d206      	bcs.n	801283a <tcp_receive+0xaa2>
 801282c:	4b1e      	ldr	r3, [pc, #120]	@ (80128a8 <tcp_receive+0xb10>)
 801282e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012832:	4923      	ldr	r1, [pc, #140]	@ (80128c0 <tcp_receive+0xb28>)
 8012834:	481e      	ldr	r0, [pc, #120]	@ (80128b0 <tcp_receive+0xb18>)
 8012836:	f005 fe17 	bl	8018468 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	891b      	ldrh	r3, [r3, #8]
 801283e:	461c      	mov	r4, r3
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	899b      	ldrh	r3, [r3, #12]
 8012846:	b29b      	uxth	r3, r3
 8012848:	4618      	mov	r0, r3
 801284a:	f7fa fa7d 	bl	800cd48 <lwip_htons>
 801284e:	4603      	mov	r3, r0
 8012850:	b2db      	uxtb	r3, r3
 8012852:	f003 0303 	and.w	r3, r3, #3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <tcp_receive+0xac6>
 801285a:	2301      	movs	r3, #1
 801285c:	e000      	b.n	8012860 <tcp_receive+0xac8>
 801285e:	2300      	movs	r3, #0
 8012860:	1919      	adds	r1, r3, r4
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012866:	b28b      	uxth	r3, r1
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7fc fe11 	bl	800f498 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012876:	68bb      	ldr	r3, [r7, #8]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	891b      	ldrh	r3, [r3, #8]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d028      	beq.n	80128d2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012880:	4b0d      	ldr	r3, [pc, #52]	@ (80128b8 <tcp_receive+0xb20>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d01d      	beq.n	80128c4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012888:	4b0b      	ldr	r3, [pc, #44]	@ (80128b8 <tcp_receive+0xb20>)
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	4619      	mov	r1, r3
 8012892:	4610      	mov	r0, r2
 8012894:	f7fb ff4e 	bl	800e734 <pbuf_cat>
 8012898:	e018      	b.n	80128cc <tcp_receive+0xb34>
 801289a:	bf00      	nop
 801289c:	2000f152 	.word	0x2000f152
 80128a0:	2000f148 	.word	0x2000f148
 80128a4:	2000f128 	.word	0x2000f128
 80128a8:	0801b84c 	.word	0x0801b84c
 80128ac:	0801bc2c 	.word	0x0801bc2c
 80128b0:	0801b898 	.word	0x0801b898
 80128b4:	0801bc68 	.word	0x0801bc68
 80128b8:	2000f158 	.word	0x2000f158
 80128bc:	2000f155 	.word	0x2000f155
 80128c0:	0801bc88 	.word	0x0801bc88
            } else {
              recv_data = cseg->p;
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	4a70      	ldr	r2, [pc, #448]	@ (8012a8c <tcp_receive+0xcf4>)
 80128ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	2200      	movs	r2, #0
 80128d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	899b      	ldrh	r3, [r3, #12]
 80128d8:	b29b      	uxth	r3, r3
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fa fa34 	bl	800cd48 <lwip_htons>
 80128e0:	4603      	mov	r3, r0
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d00d      	beq.n	8012908 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80128ec:	4b68      	ldr	r3, [pc, #416]	@ (8012a90 <tcp_receive+0xcf8>)
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	f043 0320 	orr.w	r3, r3, #32
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	4b66      	ldr	r3, [pc, #408]	@ (8012a90 <tcp_receive+0xcf8>)
 80128f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	7d1b      	ldrb	r3, [r3, #20]
 80128fe:	2b04      	cmp	r3, #4
 8012900:	d102      	bne.n	8012908 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2207      	movs	r2, #7
 8012906:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8012910:	68b8      	ldr	r0, [r7, #8]
 8012912:	f7fd fae8 	bl	800fee6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801291a:	2b00      	cmp	r3, #0
 801291c:	d008      	beq.n	8012930 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	685a      	ldr	r2, [r3, #4]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801292a:	429a      	cmp	r2, r3
 801292c:	f43f af43 	beq.w	80127b6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	8b5b      	ldrh	r3, [r3, #26]
 8012934:	f003 0301 	and.w	r3, r3, #1
 8012938:	2b00      	cmp	r3, #0
 801293a:	d00e      	beq.n	801295a <tcp_receive+0xbc2>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8b5b      	ldrh	r3, [r3, #26]
 8012940:	f023 0301 	bic.w	r3, r3, #1
 8012944:	b29a      	uxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	835a      	strh	r2, [r3, #26]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	8b5b      	ldrh	r3, [r3, #26]
 801294e:	f043 0302 	orr.w	r3, r3, #2
 8012952:	b29a      	uxth	r2, r3
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012958:	e187      	b.n	8012c6a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	8b5b      	ldrh	r3, [r3, #26]
 801295e:	f043 0301 	orr.w	r3, r3, #1
 8012962:	b29a      	uxth	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012968:	e17f      	b.n	8012c6a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012972:	4848      	ldr	r0, [pc, #288]	@ (8012a94 <tcp_receive+0xcfc>)
 8012974:	f7fd faee 	bl	800ff54 <tcp_seg_copy>
 8012978:	4602      	mov	r2, r0
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	675a      	str	r2, [r3, #116]	@ 0x74
 801297e:	e16c      	b.n	8012c5a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012980:	2300      	movs	r3, #0
 8012982:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012988:	63bb      	str	r3, [r7, #56]	@ 0x38
 801298a:	e156      	b.n	8012c3a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801298c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	4b41      	ldr	r3, [pc, #260]	@ (8012a98 <tcp_receive+0xd00>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	429a      	cmp	r2, r3
 8012998:	d11d      	bne.n	80129d6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801299a:	4b3e      	ldr	r3, [pc, #248]	@ (8012a94 <tcp_receive+0xcfc>)
 801299c:	891a      	ldrh	r2, [r3, #8]
 801299e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129a0:	891b      	ldrh	r3, [r3, #8]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	f240 814e 	bls.w	8012c44 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129a8:	483a      	ldr	r0, [pc, #232]	@ (8012a94 <tcp_receive+0xcfc>)
 80129aa:	f7fd fad3 	bl	800ff54 <tcp_seg_copy>
 80129ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 8148 	beq.w	8012c48 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80129b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d003      	beq.n	80129c6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80129be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129c0:	697a      	ldr	r2, [r7, #20]
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	e002      	b.n	80129cc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	697a      	ldr	r2, [r7, #20]
 80129ca:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80129cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80129ce:	6978      	ldr	r0, [r7, #20]
 80129d0:	f7ff f8de 	bl	8011b90 <tcp_oos_insert_segment>
                }
                break;
 80129d4:	e138      	b.n	8012c48 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80129d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d117      	bne.n	8012a0c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80129dc:	4b2e      	ldr	r3, [pc, #184]	@ (8012a98 <tcp_receive+0xd00>)
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	1ad3      	subs	r3, r2, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	da57      	bge.n	8012a9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129ec:	4829      	ldr	r0, [pc, #164]	@ (8012a94 <tcp_receive+0xcfc>)
 80129ee:	f7fd fab1 	bl	800ff54 <tcp_seg_copy>
 80129f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 8128 	beq.w	8012c4c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012a02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a04:	69b8      	ldr	r0, [r7, #24]
 8012a06:	f7ff f8c3 	bl	8011b90 <tcp_oos_insert_segment>
                  }
                  break;
 8012a0a:	e11f      	b.n	8012c4c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012a0c:	4b22      	ldr	r3, [pc, #136]	@ (8012a98 <tcp_receive+0xd00>)
 8012a0e:	681a      	ldr	r2, [r3, #0]
 8012a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	1ad3      	subs	r3, r2, r3
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	db3e      	blt.n	8012a9c <tcp_receive+0xd04>
 8012a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8012a98 <tcp_receive+0xd00>)
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	dc35      	bgt.n	8012a9c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012a30:	4818      	ldr	r0, [pc, #96]	@ (8012a94 <tcp_receive+0xcfc>)
 8012a32:	f7fd fa8f 	bl	800ff54 <tcp_seg_copy>
 8012a36:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f000 8108 	beq.w	8012c50 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a48:	8912      	ldrh	r2, [r2, #8]
 8012a4a:	441a      	add	r2, r3
 8012a4c:	4b12      	ldr	r3, [pc, #72]	@ (8012a98 <tcp_receive+0xd00>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	dd12      	ble.n	8012a7c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012a56:	4b10      	ldr	r3, [pc, #64]	@ (8012a98 <tcp_receive+0xd00>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a6a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a6e:	685a      	ldr	r2, [r3, #4]
 8012a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a72:	891b      	ldrh	r3, [r3, #8]
 8012a74:	4619      	mov	r1, r3
 8012a76:	4610      	mov	r0, r2
 8012a78:	f7fb fc08 	bl	800e28c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a7e:	69fa      	ldr	r2, [r7, #28]
 8012a80:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a84:	69f8      	ldr	r0, [r7, #28]
 8012a86:	f7ff f883 	bl	8011b90 <tcp_oos_insert_segment>
                  }
                  break;
 8012a8a:	e0e1      	b.n	8012c50 <tcp_receive+0xeb8>
 8012a8c:	2000f158 	.word	0x2000f158
 8012a90:	2000f155 	.word	0x2000f155
 8012a94:	2000f128 	.word	0x2000f128
 8012a98:	2000f148 	.word	0x2000f148
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a9e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f040 80c5 	bne.w	8012c34 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8012ca8 <tcp_receive+0xf10>)
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	f340 80bc 	ble.w	8012c34 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fa f93f 	bl	800cd48 <lwip_htons>
 8012aca:	4603      	mov	r3, r0
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	f003 0301 	and.w	r3, r3, #1
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f040 80be 	bne.w	8012c54 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012ad8:	4874      	ldr	r0, [pc, #464]	@ (8012cac <tcp_receive+0xf14>)
 8012ada:	f7fd fa3b 	bl	800ff54 <tcp_seg_copy>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f000 80b5 	beq.w	8012c58 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012af6:	8912      	ldrh	r2, [r2, #8]
 8012af8:	441a      	add	r2, r3
 8012afa:	4b6b      	ldr	r3, [pc, #428]	@ (8012ca8 <tcp_receive+0xf10>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	dd12      	ble.n	8012b2a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012b04:	4b68      	ldr	r3, [pc, #416]	@ (8012ca8 <tcp_receive+0xf10>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	1ad3      	subs	r3, r2, r3
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b1c:	685a      	ldr	r2, [r3, #4]
 8012b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b20:	891b      	ldrh	r3, [r3, #8]
 8012b22:	4619      	mov	r1, r3
 8012b24:	4610      	mov	r0, r2
 8012b26:	f7fb fbb1 	bl	800e28c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012b2a:	4b61      	ldr	r3, [pc, #388]	@ (8012cb0 <tcp_receive+0xf18>)
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	461a      	mov	r2, r3
 8012b30:	4b5d      	ldr	r3, [pc, #372]	@ (8012ca8 <tcp_receive+0xf10>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	441a      	add	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b3a:	6879      	ldr	r1, [r7, #4]
 8012b3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012b3e:	440b      	add	r3, r1
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	f340 8088 	ble.w	8012c58 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	899b      	ldrh	r3, [r3, #12]
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fa f8f8 	bl	800cd48 <lwip_htons>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d021      	beq.n	8012ba8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	68db      	ldr	r3, [r3, #12]
 8012b6a:	899b      	ldrh	r3, [r3, #12]
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	b21b      	sxth	r3, r3
 8012b70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012b74:	b21c      	sxth	r4, r3
 8012b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	899b      	ldrh	r3, [r3, #12]
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fa f8e1 	bl	800cd48 <lwip_htons>
 8012b86:	4603      	mov	r3, r0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	4618      	mov	r0, r3
 8012b92:	f7fa f8d9 	bl	800cd48 <lwip_htons>
 8012b96:	4603      	mov	r3, r0
 8012b98:	b21b      	sxth	r3, r3
 8012b9a:	4323      	orrs	r3, r4
 8012b9c:	b21a      	sxth	r2, r3
 8012b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	b292      	uxth	r2, r2
 8012ba6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bb2:	4413      	add	r3, r2
 8012bb4:	b299      	uxth	r1, r3
 8012bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8012ca8 <tcp_receive+0xf10>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	1a8a      	subs	r2, r1, r2
 8012bc2:	b292      	uxth	r2, r2
 8012bc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	685a      	ldr	r2, [r3, #4]
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	891b      	ldrh	r3, [r3, #8]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	f7fb fb59 	bl	800e28c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	891c      	ldrh	r4, [r3, #8]
 8012be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	899b      	ldrh	r3, [r3, #12]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fa f8ac 	bl	800cd48 <lwip_htons>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	f003 0303 	and.w	r3, r3, #3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d001      	beq.n	8012c00 <tcp_receive+0xe68>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	e000      	b.n	8012c02 <tcp_receive+0xe6a>
 8012c00:	2300      	movs	r3, #0
 8012c02:	4423      	add	r3, r4
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	4b2a      	ldr	r3, [pc, #168]	@ (8012cb0 <tcp_receive+0xf18>)
 8012c08:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c0a:	4b29      	ldr	r3, [pc, #164]	@ (8012cb0 <tcp_receive+0xf18>)
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	461a      	mov	r2, r3
 8012c10:	4b25      	ldr	r3, [pc, #148]	@ (8012ca8 <tcp_receive+0xf10>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	441a      	add	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c1a:	6879      	ldr	r1, [r7, #4]
 8012c1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c1e:	440b      	add	r3, r1
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d019      	beq.n	8012c58 <tcp_receive+0xec0>
 8012c24:	4b23      	ldr	r3, [pc, #140]	@ (8012cb4 <tcp_receive+0xf1c>)
 8012c26:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8012c2a:	4923      	ldr	r1, [pc, #140]	@ (8012cb8 <tcp_receive+0xf20>)
 8012c2c:	4823      	ldr	r0, [pc, #140]	@ (8012cbc <tcp_receive+0xf24>)
 8012c2e:	f005 fc1b 	bl	8018468 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012c32:	e011      	b.n	8012c58 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	f47f aea5 	bne.w	801298c <tcp_receive+0xbf4>
 8012c42:	e00a      	b.n	8012c5a <tcp_receive+0xec2>
                break;
 8012c44:	bf00      	nop
 8012c46:	e008      	b.n	8012c5a <tcp_receive+0xec2>
                break;
 8012c48:	bf00      	nop
 8012c4a:	e006      	b.n	8012c5a <tcp_receive+0xec2>
                  break;
 8012c4c:	bf00      	nop
 8012c4e:	e004      	b.n	8012c5a <tcp_receive+0xec2>
                  break;
 8012c50:	bf00      	nop
 8012c52:	e002      	b.n	8012c5a <tcp_receive+0xec2>
                  break;
 8012c54:	bf00      	nop
 8012c56:	e000      	b.n	8012c5a <tcp_receive+0xec2>
                break;
 8012c58:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f001 fe88 	bl	8014970 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c60:	e003      	b.n	8012c6a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f001 fe84 	bl	8014970 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c68:	e01a      	b.n	8012ca0 <tcp_receive+0xf08>
 8012c6a:	e019      	b.n	8012ca0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8012ca8 <tcp_receive+0xf10>)
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c74:	1ad3      	subs	r3, r2, r3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	db0a      	blt.n	8012c90 <tcp_receive+0xef8>
 8012c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8012ca8 <tcp_receive+0xf10>)
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c82:	6879      	ldr	r1, [r7, #4]
 8012c84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012c86:	440b      	add	r3, r1
 8012c88:	1ad3      	subs	r3, r2, r3
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	dd07      	ble.n	8012ca0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8b5b      	ldrh	r3, [r3, #26]
 8012c94:	f043 0302 	orr.w	r3, r3, #2
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012c9e:	e7ff      	b.n	8012ca0 <tcp_receive+0xf08>
 8012ca0:	bf00      	nop
 8012ca2:	3750      	adds	r7, #80	@ 0x50
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ca8:	2000f148 	.word	0x2000f148
 8012cac:	2000f128 	.word	0x2000f128
 8012cb0:	2000f152 	.word	0x2000f152
 8012cb4:	0801b84c 	.word	0x0801b84c
 8012cb8:	0801bbf4 	.word	0x0801bbf4
 8012cbc:	0801b898 	.word	0x0801b898

08012cc0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012cc0:	b480      	push	{r7}
 8012cc2:	b083      	sub	sp, #12
 8012cc4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012cc6:	4b15      	ldr	r3, [pc, #84]	@ (8012d1c <tcp_get_next_optbyte+0x5c>)
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	1c5a      	adds	r2, r3, #1
 8012ccc:	b291      	uxth	r1, r2
 8012cce:	4a13      	ldr	r2, [pc, #76]	@ (8012d1c <tcp_get_next_optbyte+0x5c>)
 8012cd0:	8011      	strh	r1, [r2, #0]
 8012cd2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012cd4:	4b12      	ldr	r3, [pc, #72]	@ (8012d20 <tcp_get_next_optbyte+0x60>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d004      	beq.n	8012ce6 <tcp_get_next_optbyte+0x26>
 8012cdc:	4b11      	ldr	r3, [pc, #68]	@ (8012d24 <tcp_get_next_optbyte+0x64>)
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	88fa      	ldrh	r2, [r7, #6]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d208      	bcs.n	8012cf8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012ce6:	4b10      	ldr	r3, [pc, #64]	@ (8012d28 <tcp_get_next_optbyte+0x68>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	3314      	adds	r3, #20
 8012cec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012cee:	88fb      	ldrh	r3, [r7, #6]
 8012cf0:	683a      	ldr	r2, [r7, #0]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	e00b      	b.n	8012d10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012cf8:	88fb      	ldrh	r3, [r7, #6]
 8012cfa:	b2da      	uxtb	r2, r3
 8012cfc:	4b09      	ldr	r3, [pc, #36]	@ (8012d24 <tcp_get_next_optbyte+0x64>)
 8012cfe:	881b      	ldrh	r3, [r3, #0]
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	1ad3      	subs	r3, r2, r3
 8012d04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012d06:	4b06      	ldr	r3, [pc, #24]	@ (8012d20 <tcp_get_next_optbyte+0x60>)
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	797b      	ldrb	r3, [r7, #5]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr
 8012d1c:	2000f144 	.word	0x2000f144
 8012d20:	2000f140 	.word	0x2000f140
 8012d24:	2000f13e 	.word	0x2000f13e
 8012d28:	2000f138 	.word	0x2000f138

08012d2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d106      	bne.n	8012d48 <tcp_parseopt+0x1c>
 8012d3a:	4b32      	ldr	r3, [pc, #200]	@ (8012e04 <tcp_parseopt+0xd8>)
 8012d3c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012d40:	4931      	ldr	r1, [pc, #196]	@ (8012e08 <tcp_parseopt+0xdc>)
 8012d42:	4832      	ldr	r0, [pc, #200]	@ (8012e0c <tcp_parseopt+0xe0>)
 8012d44:	f005 fb90 	bl	8018468 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012d48:	4b31      	ldr	r3, [pc, #196]	@ (8012e10 <tcp_parseopt+0xe4>)
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d056      	beq.n	8012dfe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d50:	4b30      	ldr	r3, [pc, #192]	@ (8012e14 <tcp_parseopt+0xe8>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	801a      	strh	r2, [r3, #0]
 8012d56:	e046      	b.n	8012de6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012d58:	f7ff ffb2 	bl	8012cc0 <tcp_get_next_optbyte>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	d006      	beq.n	8012d74 <tcp_parseopt+0x48>
 8012d66:	2b02      	cmp	r3, #2
 8012d68:	dc2a      	bgt.n	8012dc0 <tcp_parseopt+0x94>
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d042      	beq.n	8012df4 <tcp_parseopt+0xc8>
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d038      	beq.n	8012de4 <tcp_parseopt+0xb8>
 8012d72:	e025      	b.n	8012dc0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012d74:	f7ff ffa4 	bl	8012cc0 <tcp_get_next_optbyte>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b04      	cmp	r3, #4
 8012d7c:	d13c      	bne.n	8012df8 <tcp_parseopt+0xcc>
 8012d7e:	4b25      	ldr	r3, [pc, #148]	@ (8012e14 <tcp_parseopt+0xe8>)
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	3301      	adds	r3, #1
 8012d84:	4a22      	ldr	r2, [pc, #136]	@ (8012e10 <tcp_parseopt+0xe4>)
 8012d86:	8812      	ldrh	r2, [r2, #0]
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	da35      	bge.n	8012df8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d8c:	f7ff ff98 	bl	8012cc0 <tcp_get_next_optbyte>
 8012d90:	4603      	mov	r3, r0
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012d96:	f7ff ff93 	bl	8012cc0 <tcp_get_next_optbyte>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	89bb      	ldrh	r3, [r7, #12]
 8012da0:	4313      	orrs	r3, r2
 8012da2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012da4:	89bb      	ldrh	r3, [r7, #12]
 8012da6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012daa:	d804      	bhi.n	8012db6 <tcp_parseopt+0x8a>
 8012dac:	89bb      	ldrh	r3, [r7, #12]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d001      	beq.n	8012db6 <tcp_parseopt+0x8a>
 8012db2:	89ba      	ldrh	r2, [r7, #12]
 8012db4:	e001      	b.n	8012dba <tcp_parseopt+0x8e>
 8012db6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012dbe:	e012      	b.n	8012de6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012dc0:	f7ff ff7e 	bl	8012cc0 <tcp_get_next_optbyte>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012dc8:	7afb      	ldrb	r3, [r7, #11]
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d916      	bls.n	8012dfc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012dce:	7afb      	ldrb	r3, [r7, #11]
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	4b10      	ldr	r3, [pc, #64]	@ (8012e14 <tcp_parseopt+0xe8>)
 8012dd4:	881b      	ldrh	r3, [r3, #0]
 8012dd6:	4413      	add	r3, r2
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	3b02      	subs	r3, #2
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	4b0d      	ldr	r3, [pc, #52]	@ (8012e14 <tcp_parseopt+0xe8>)
 8012de0:	801a      	strh	r2, [r3, #0]
 8012de2:	e000      	b.n	8012de6 <tcp_parseopt+0xba>
          break;
 8012de4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012de6:	4b0b      	ldr	r3, [pc, #44]	@ (8012e14 <tcp_parseopt+0xe8>)
 8012de8:	881a      	ldrh	r2, [r3, #0]
 8012dea:	4b09      	ldr	r3, [pc, #36]	@ (8012e10 <tcp_parseopt+0xe4>)
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d3b2      	bcc.n	8012d58 <tcp_parseopt+0x2c>
 8012df2:	e004      	b.n	8012dfe <tcp_parseopt+0xd2>
          return;
 8012df4:	bf00      	nop
 8012df6:	e002      	b.n	8012dfe <tcp_parseopt+0xd2>
            return;
 8012df8:	bf00      	nop
 8012dfa:	e000      	b.n	8012dfe <tcp_parseopt+0xd2>
            return;
 8012dfc:	bf00      	nop
      }
    }
  }
}
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	0801b84c 	.word	0x0801b84c
 8012e08:	0801bcb0 	.word	0x0801bcb0
 8012e0c:	0801b898 	.word	0x0801b898
 8012e10:	2000f13c 	.word	0x2000f13c
 8012e14:	2000f144 	.word	0x2000f144

08012e18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012e1c:	4b05      	ldr	r3, [pc, #20]	@ (8012e34 <tcp_trigger_input_pcb_close+0x1c>)
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	f043 0310 	orr.w	r3, r3, #16
 8012e24:	b2da      	uxtb	r2, r3
 8012e26:	4b03      	ldr	r3, [pc, #12]	@ (8012e34 <tcp_trigger_input_pcb_close+0x1c>)
 8012e28:	701a      	strb	r2, [r3, #0]
}
 8012e2a:	bf00      	nop
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr
 8012e34:	2000f155 	.word	0x2000f155

08012e38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00a      	beq.n	8012e60 <tcp_route+0x28>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7a1b      	ldrb	r3, [r3, #8]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d006      	beq.n	8012e60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	7a1b      	ldrb	r3, [r3, #8]
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7fb f810 	bl	800de7c <netif_get_by_index>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	e003      	b.n	8012e68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f003 fe33 	bl	8016acc <ip4_route>
 8012e66:	4603      	mov	r3, r0
  }
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3710      	adds	r7, #16
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}

08012e70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012e70:	b590      	push	{r4, r7, lr}
 8012e72:	b087      	sub	sp, #28
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	60b9      	str	r1, [r7, #8]
 8012e7a:	603b      	str	r3, [r7, #0]
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d105      	bne.n	8012e92 <tcp_create_segment+0x22>
 8012e86:	4b43      	ldr	r3, [pc, #268]	@ (8012f94 <tcp_create_segment+0x124>)
 8012e88:	22a3      	movs	r2, #163	@ 0xa3
 8012e8a:	4943      	ldr	r1, [pc, #268]	@ (8012f98 <tcp_create_segment+0x128>)
 8012e8c:	4843      	ldr	r0, [pc, #268]	@ (8012f9c <tcp_create_segment+0x12c>)
 8012e8e:	f005 faeb 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d105      	bne.n	8012ea4 <tcp_create_segment+0x34>
 8012e98:	4b3e      	ldr	r3, [pc, #248]	@ (8012f94 <tcp_create_segment+0x124>)
 8012e9a:	22a4      	movs	r2, #164	@ 0xa4
 8012e9c:	4940      	ldr	r1, [pc, #256]	@ (8012fa0 <tcp_create_segment+0x130>)
 8012e9e:	483f      	ldr	r0, [pc, #252]	@ (8012f9c <tcp_create_segment+0x12c>)
 8012ea0:	f005 fae2 	bl	8018468 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	f003 0304 	and.w	r3, r3, #4
 8012eb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012eb2:	2003      	movs	r0, #3
 8012eb4:	f7fa fc56 	bl	800d764 <memp_malloc>
 8012eb8:	6138      	str	r0, [r7, #16]
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d104      	bne.n	8012eca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012ec0:	68b8      	ldr	r0, [r7, #8]
 8012ec2:	f7fb fb69 	bl	800e598 <pbuf_free>
    return NULL;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e060      	b.n	8012f8c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012ed0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	68ba      	ldr	r2, [r7, #8]
 8012edc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	891a      	ldrh	r2, [r3, #8]
 8012ee2:	7dfb      	ldrb	r3, [r7, #23]
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d205      	bcs.n	8012ef6 <tcp_create_segment+0x86>
 8012eea:	4b2a      	ldr	r3, [pc, #168]	@ (8012f94 <tcp_create_segment+0x124>)
 8012eec:	22b0      	movs	r2, #176	@ 0xb0
 8012eee:	492d      	ldr	r1, [pc, #180]	@ (8012fa4 <tcp_create_segment+0x134>)
 8012ef0:	482a      	ldr	r0, [pc, #168]	@ (8012f9c <tcp_create_segment+0x12c>)
 8012ef2:	f005 fab9 	bl	8018468 <iprintf>
  seg->len = p->tot_len - optlen;
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	891a      	ldrh	r2, [r3, #8]
 8012efa:	7dfb      	ldrb	r3, [r7, #23]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012f06:	2114      	movs	r1, #20
 8012f08:	68b8      	ldr	r0, [r7, #8]
 8012f0a:	f7fb faaf 	bl	800e46c <pbuf_add_header>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d004      	beq.n	8012f1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012f14:	6938      	ldr	r0, [r7, #16]
 8012f16:	f7fc ffe6 	bl	800fee6 <tcp_seg_free>
    return NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	e036      	b.n	8012f8c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	685a      	ldr	r2, [r3, #4]
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	8ada      	ldrh	r2, [r3, #22]
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	68dc      	ldr	r4, [r3, #12]
 8012f30:	4610      	mov	r0, r2
 8012f32:	f7f9 ff09 	bl	800cd48 <lwip_htons>
 8012f36:	4603      	mov	r3, r0
 8012f38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	8b1a      	ldrh	r2, [r3, #24]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	68dc      	ldr	r4, [r3, #12]
 8012f42:	4610      	mov	r0, r2
 8012f44:	f7f9 ff00 	bl	800cd48 <lwip_htons>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	68dc      	ldr	r4, [r3, #12]
 8012f50:	6838      	ldr	r0, [r7, #0]
 8012f52:	f7f9 ff0e 	bl	800cd72 <lwip_htonl>
 8012f56:	4603      	mov	r3, r0
 8012f58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012f5a:	7dfb      	ldrb	r3, [r7, #23]
 8012f5c:	089b      	lsrs	r3, r3, #2
 8012f5e:	b2db      	uxtb	r3, r3
 8012f60:	3305      	adds	r3, #5
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	031b      	lsls	r3, r3, #12
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	79fb      	ldrb	r3, [r7, #7]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	68dc      	ldr	r4, [r3, #12]
 8012f74:	4610      	mov	r0, r2
 8012f76:	f7f9 fee7 	bl	800cd48 <lwip_htons>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	2200      	movs	r2, #0
 8012f84:	749a      	strb	r2, [r3, #18]
 8012f86:	2200      	movs	r2, #0
 8012f88:	74da      	strb	r2, [r3, #19]
  return seg;
 8012f8a:	693b      	ldr	r3, [r7, #16]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	371c      	adds	r7, #28
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd90      	pop	{r4, r7, pc}
 8012f94:	0801bccc 	.word	0x0801bccc
 8012f98:	0801bd00 	.word	0x0801bd00
 8012f9c:	0801bd20 	.word	0x0801bd20
 8012fa0:	0801bd48 	.word	0x0801bd48
 8012fa4:	0801bd6c 	.word	0x0801bd6c

08012fa8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b086      	sub	sp, #24
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	607b      	str	r3, [r7, #4]
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	73fb      	strb	r3, [r7, #15]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	81bb      	strh	r3, [r7, #12]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012fbc:	89bb      	ldrh	r3, [r7, #12]
 8012fbe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d105      	bne.n	8012fd2 <tcp_pbuf_prealloc+0x2a>
 8012fc6:	4b30      	ldr	r3, [pc, #192]	@ (8013088 <tcp_pbuf_prealloc+0xe0>)
 8012fc8:	22e8      	movs	r2, #232	@ 0xe8
 8012fca:	4930      	ldr	r1, [pc, #192]	@ (801308c <tcp_pbuf_prealloc+0xe4>)
 8012fcc:	4830      	ldr	r0, [pc, #192]	@ (8013090 <tcp_pbuf_prealloc+0xe8>)
 8012fce:	f005 fa4b 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d105      	bne.n	8012fe4 <tcp_pbuf_prealloc+0x3c>
 8012fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8013088 <tcp_pbuf_prealloc+0xe0>)
 8012fda:	22e9      	movs	r2, #233	@ 0xe9
 8012fdc:	492d      	ldr	r1, [pc, #180]	@ (8013094 <tcp_pbuf_prealloc+0xec>)
 8012fde:	482c      	ldr	r0, [pc, #176]	@ (8013090 <tcp_pbuf_prealloc+0xe8>)
 8012fe0:	f005 fa42 	bl	8018468 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012fe4:	89ba      	ldrh	r2, [r7, #12]
 8012fe6:	897b      	ldrh	r3, [r7, #10]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d221      	bcs.n	8013030 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012fec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012ff0:	f003 0302 	and.w	r3, r3, #2
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d111      	bne.n	801301c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012ff8:	6a3b      	ldr	r3, [r7, #32]
 8012ffa:	8b5b      	ldrh	r3, [r3, #26]
 8012ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013000:	2b00      	cmp	r3, #0
 8013002:	d115      	bne.n	8013030 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013004:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013008:	2b00      	cmp	r3, #0
 801300a:	d007      	beq.n	801301c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8013010:	2b00      	cmp	r3, #0
 8013012:	d103      	bne.n	801301c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013014:	6a3b      	ldr	r3, [r7, #32]
 8013016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8013018:	2b00      	cmp	r3, #0
 801301a:	d009      	beq.n	8013030 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801301c:	89bb      	ldrh	r3, [r7, #12]
 801301e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8013022:	f023 0203 	bic.w	r2, r3, #3
 8013026:	897b      	ldrh	r3, [r7, #10]
 8013028:	4293      	cmp	r3, r2
 801302a:	bf28      	it	cs
 801302c:	4613      	movcs	r3, r2
 801302e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013030:	8af9      	ldrh	r1, [r7, #22]
 8013032:	7bfb      	ldrb	r3, [r7, #15]
 8013034:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013038:	4618      	mov	r0, r3
 801303a:	f7fa ffc9 	bl	800dfd0 <pbuf_alloc>
 801303e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d101      	bne.n	801304a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013046:	2300      	movs	r3, #0
 8013048:	e019      	b.n	801307e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d006      	beq.n	8013060 <tcp_pbuf_prealloc+0xb8>
 8013052:	4b0d      	ldr	r3, [pc, #52]	@ (8013088 <tcp_pbuf_prealloc+0xe0>)
 8013054:	f240 120b 	movw	r2, #267	@ 0x10b
 8013058:	490f      	ldr	r1, [pc, #60]	@ (8013098 <tcp_pbuf_prealloc+0xf0>)
 801305a:	480d      	ldr	r0, [pc, #52]	@ (8013090 <tcp_pbuf_prealloc+0xe8>)
 801305c:	f005 fa04 	bl	8018468 <iprintf>
  *oversize = p->len - length;
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	895a      	ldrh	r2, [r3, #10]
 8013064:	89bb      	ldrh	r3, [r7, #12]
 8013066:	1ad3      	subs	r3, r2, r3
 8013068:	b29a      	uxth	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	89ba      	ldrh	r2, [r7, #12]
 8013072:	811a      	strh	r2, [r3, #8]
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	891a      	ldrh	r2, [r3, #8]
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	815a      	strh	r2, [r3, #10]
  return p;
 801307c:	693b      	ldr	r3, [r7, #16]
}
 801307e:	4618      	mov	r0, r3
 8013080:	3718      	adds	r7, #24
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	0801bccc 	.word	0x0801bccc
 801308c:	0801bd84 	.word	0x0801bd84
 8013090:	0801bd20 	.word	0x0801bd20
 8013094:	0801bda8 	.word	0x0801bda8
 8013098:	0801bdc8 	.word	0x0801bdc8

0801309c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	460b      	mov	r3, r1
 80130a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d106      	bne.n	80130bc <tcp_write_checks+0x20>
 80130ae:	4b33      	ldr	r3, [pc, #204]	@ (801317c <tcp_write_checks+0xe0>)
 80130b0:	f240 1233 	movw	r2, #307	@ 0x133
 80130b4:	4932      	ldr	r1, [pc, #200]	@ (8013180 <tcp_write_checks+0xe4>)
 80130b6:	4833      	ldr	r0, [pc, #204]	@ (8013184 <tcp_write_checks+0xe8>)
 80130b8:	f005 f9d6 	bl	8018468 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	7d1b      	ldrb	r3, [r3, #20]
 80130c0:	2b04      	cmp	r3, #4
 80130c2:	d00e      	beq.n	80130e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80130c8:	2b07      	cmp	r3, #7
 80130ca:	d00a      	beq.n	80130e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80130d0:	2b02      	cmp	r3, #2
 80130d2:	d006      	beq.n	80130e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80130d8:	2b03      	cmp	r3, #3
 80130da:	d002      	beq.n	80130e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80130dc:	f06f 030a 	mvn.w	r3, #10
 80130e0:	e048      	b.n	8013174 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80130e2:	887b      	ldrh	r3, [r7, #2]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d101      	bne.n	80130ec <tcp_write_checks+0x50>
    return ERR_OK;
 80130e8:	2300      	movs	r3, #0
 80130ea:	e043      	b.n	8013174 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80130f2:	887a      	ldrh	r2, [r7, #2]
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d909      	bls.n	801310c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	8b5b      	ldrh	r3, [r3, #26]
 80130fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013100:	b29a      	uxth	r2, r3
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013106:	f04f 33ff 	mov.w	r3, #4294967295
 801310a:	e033      	b.n	8013174 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013112:	2b08      	cmp	r3, #8
 8013114:	d909      	bls.n	801312a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	8b5b      	ldrh	r3, [r3, #26]
 801311a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801311e:	b29a      	uxth	r2, r3
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013124:	f04f 33ff 	mov.w	r3, #4294967295
 8013128:	e024      	b.n	8013174 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00f      	beq.n	8013154 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013138:	2b00      	cmp	r3, #0
 801313a:	d11a      	bne.n	8013172 <tcp_write_checks+0xd6>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013140:	2b00      	cmp	r3, #0
 8013142:	d116      	bne.n	8013172 <tcp_write_checks+0xd6>
 8013144:	4b0d      	ldr	r3, [pc, #52]	@ (801317c <tcp_write_checks+0xe0>)
 8013146:	f240 1255 	movw	r2, #341	@ 0x155
 801314a:	490f      	ldr	r1, [pc, #60]	@ (8013188 <tcp_write_checks+0xec>)
 801314c:	480d      	ldr	r0, [pc, #52]	@ (8013184 <tcp_write_checks+0xe8>)
 801314e:	f005 f98b 	bl	8018468 <iprintf>
 8013152:	e00e      	b.n	8013172 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013158:	2b00      	cmp	r3, #0
 801315a:	d103      	bne.n	8013164 <tcp_write_checks+0xc8>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013160:	2b00      	cmp	r3, #0
 8013162:	d006      	beq.n	8013172 <tcp_write_checks+0xd6>
 8013164:	4b05      	ldr	r3, [pc, #20]	@ (801317c <tcp_write_checks+0xe0>)
 8013166:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801316a:	4908      	ldr	r1, [pc, #32]	@ (801318c <tcp_write_checks+0xf0>)
 801316c:	4805      	ldr	r0, [pc, #20]	@ (8013184 <tcp_write_checks+0xe8>)
 801316e:	f005 f97b 	bl	8018468 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	0801bccc 	.word	0x0801bccc
 8013180:	0801bddc 	.word	0x0801bddc
 8013184:	0801bd20 	.word	0x0801bd20
 8013188:	0801bdfc 	.word	0x0801bdfc
 801318c:	0801be38 	.word	0x0801be38

08013190 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013190:	b590      	push	{r4, r7, lr}
 8013192:	b09b      	sub	sp, #108	@ 0x6c
 8013194:	af04      	add	r7, sp, #16
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	4611      	mov	r1, r2
 801319c:	461a      	mov	r2, r3
 801319e:	460b      	mov	r3, r1
 80131a0:	80fb      	strh	r3, [r7, #6]
 80131a2:	4613      	mov	r3, r2
 80131a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80131a6:	2300      	movs	r3, #0
 80131a8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80131ae:	2300      	movs	r3, #0
 80131b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131b2:	2300      	movs	r3, #0
 80131b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80131b6:	2300      	movs	r3, #0
 80131b8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80131ba:	2300      	movs	r3, #0
 80131bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80131c0:	2300      	movs	r3, #0
 80131c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80131c6:	2300      	movs	r3, #0
 80131c8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80131ca:	2300      	movs	r3, #0
 80131cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d109      	bne.n	80131ec <tcp_write+0x5c>
 80131d8:	4ba4      	ldr	r3, [pc, #656]	@ (801346c <tcp_write+0x2dc>)
 80131da:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80131de:	49a4      	ldr	r1, [pc, #656]	@ (8013470 <tcp_write+0x2e0>)
 80131e0:	48a4      	ldr	r0, [pc, #656]	@ (8013474 <tcp_write+0x2e4>)
 80131e2:	f005 f941 	bl	8018468 <iprintf>
 80131e6:	f06f 030f 	mvn.w	r3, #15
 80131ea:	e32a      	b.n	8013842 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80131f2:	085b      	lsrs	r3, r3, #1
 80131f4:	b29a      	uxth	r2, r3
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131fa:	4293      	cmp	r3, r2
 80131fc:	bf28      	it	cs
 80131fe:	4613      	movcs	r3, r2
 8013200:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <tcp_write+0x7e>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801320c:	e000      	b.n	8013210 <tcp_write+0x80>
 801320e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013210:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d109      	bne.n	801322c <tcp_write+0x9c>
 8013218:	4b94      	ldr	r3, [pc, #592]	@ (801346c <tcp_write+0x2dc>)
 801321a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801321e:	4996      	ldr	r1, [pc, #600]	@ (8013478 <tcp_write+0x2e8>)
 8013220:	4894      	ldr	r0, [pc, #592]	@ (8013474 <tcp_write+0x2e4>)
 8013222:	f005 f921 	bl	8018468 <iprintf>
 8013226:	f06f 030f 	mvn.w	r3, #15
 801322a:	e30a      	b.n	8013842 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801322c:	88fb      	ldrh	r3, [r7, #6]
 801322e:	4619      	mov	r1, r3
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f7ff ff33 	bl	801309c <tcp_write_checks>
 8013236:	4603      	mov	r3, r0
 8013238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801323c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013240:	2b00      	cmp	r3, #0
 8013242:	d002      	beq.n	801324a <tcp_write+0xba>
    return err;
 8013244:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8013248:	e2fb      	b.n	8013842 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013250:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013254:	2300      	movs	r3, #0
 8013256:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801325e:	2b00      	cmp	r3, #0
 8013260:	f000 80f6 	beq.w	8013450 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013268:	653b      	str	r3, [r7, #80]	@ 0x50
 801326a:	e002      	b.n	8013272 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801326c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1f8      	bne.n	801326c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801327a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801327c:	7a9b      	ldrb	r3, [r3, #10]
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	b29b      	uxth	r3, r3
 8013282:	f003 0304 	and.w	r3, r3, #4
 8013286:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013288:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801328a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801328c:	891b      	ldrh	r3, [r3, #8]
 801328e:	4619      	mov	r1, r3
 8013290:	8c3b      	ldrh	r3, [r7, #32]
 8013292:	440b      	add	r3, r1
 8013294:	429a      	cmp	r2, r3
 8013296:	da06      	bge.n	80132a6 <tcp_write+0x116>
 8013298:	4b74      	ldr	r3, [pc, #464]	@ (801346c <tcp_write+0x2dc>)
 801329a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801329e:	4977      	ldr	r1, [pc, #476]	@ (801347c <tcp_write+0x2ec>)
 80132a0:	4874      	ldr	r0, [pc, #464]	@ (8013474 <tcp_write+0x2e4>)
 80132a2:	f005 f8e1 	bl	8018468 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80132a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132a8:	891a      	ldrh	r2, [r3, #8]
 80132aa:	8c3b      	ldrh	r3, [r7, #32]
 80132ac:	4413      	add	r3, r2
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80132bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80132be:	8a7b      	ldrh	r3, [r7, #18]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d026      	beq.n	8013312 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80132c4:	8a7b      	ldrh	r3, [r7, #18]
 80132c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d206      	bcs.n	80132da <tcp_write+0x14a>
 80132cc:	4b67      	ldr	r3, [pc, #412]	@ (801346c <tcp_write+0x2dc>)
 80132ce:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80132d2:	496b      	ldr	r1, [pc, #428]	@ (8013480 <tcp_write+0x2f0>)
 80132d4:	4867      	ldr	r0, [pc, #412]	@ (8013474 <tcp_write+0x2e4>)
 80132d6:	f005 f8c7 	bl	8018468 <iprintf>
      seg = last_unsent;
 80132da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80132de:	8a7b      	ldrh	r3, [r7, #18]
 80132e0:	88fa      	ldrh	r2, [r7, #6]
 80132e2:	4293      	cmp	r3, r2
 80132e4:	bf28      	it	cs
 80132e6:	4613      	movcs	r3, r2
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80132ec:	4293      	cmp	r3, r2
 80132ee:	bf28      	it	cs
 80132f0:	4613      	movcs	r3, r2
 80132f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80132f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80132f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80132fa:	4413      	add	r3, r2
 80132fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8013300:	8a7a      	ldrh	r2, [r7, #18]
 8013302:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	b29b      	uxth	r3, r3
 8013308:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801330a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801330c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801330e:	1ad3      	subs	r3, r2, r3
 8013310:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013312:	8a7b      	ldrh	r3, [r7, #18]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00b      	beq.n	8013330 <tcp_write+0x1a0>
 8013318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801331c:	88fb      	ldrh	r3, [r7, #6]
 801331e:	429a      	cmp	r2, r3
 8013320:	d006      	beq.n	8013330 <tcp_write+0x1a0>
 8013322:	4b52      	ldr	r3, [pc, #328]	@ (801346c <tcp_write+0x2dc>)
 8013324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013328:	4956      	ldr	r1, [pc, #344]	@ (8013484 <tcp_write+0x2f4>)
 801332a:	4852      	ldr	r0, [pc, #328]	@ (8013474 <tcp_write+0x2e4>)
 801332c:	f005 f89c 	bl	8018468 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013330:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013334:	88fb      	ldrh	r3, [r7, #6]
 8013336:	429a      	cmp	r2, r3
 8013338:	f080 8167 	bcs.w	801360a <tcp_write+0x47a>
 801333c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 8163 	beq.w	801360a <tcp_write+0x47a>
 8013344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013346:	891b      	ldrh	r3, [r3, #8]
 8013348:	2b00      	cmp	r3, #0
 801334a:	f000 815e 	beq.w	801360a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801334e:	88fa      	ldrh	r2, [r7, #6]
 8013350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013354:	1ad2      	subs	r2, r2, r3
 8013356:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013358:	4293      	cmp	r3, r2
 801335a:	bfa8      	it	ge
 801335c:	4613      	movge	r3, r2
 801335e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013362:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013364:	797b      	ldrb	r3, [r7, #5]
 8013366:	f003 0301 	and.w	r3, r3, #1
 801336a:	2b00      	cmp	r3, #0
 801336c:	d027      	beq.n	80133be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801336e:	f107 0012 	add.w	r0, r7, #18
 8013372:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013374:	8bf9      	ldrh	r1, [r7, #30]
 8013376:	2301      	movs	r3, #1
 8013378:	9302      	str	r3, [sp, #8]
 801337a:	797b      	ldrb	r3, [r7, #5]
 801337c:	9301      	str	r3, [sp, #4]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	4603      	mov	r3, r0
 8013384:	2000      	movs	r0, #0
 8013386:	f7ff fe0f 	bl	8012fa8 <tcp_pbuf_prealloc>
 801338a:	6578      	str	r0, [r7, #84]	@ 0x54
 801338c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338e:	2b00      	cmp	r3, #0
 8013390:	f000 8225 	beq.w	80137de <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013396:	6858      	ldr	r0, [r3, #4]
 8013398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801339c:	68ba      	ldr	r2, [r7, #8]
 801339e:	4413      	add	r3, r2
 80133a0:	8bfa      	ldrh	r2, [r7, #30]
 80133a2:	4619      	mov	r1, r3
 80133a4:	f005 f9e9 	bl	801877a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80133a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80133aa:	f7fb f983 	bl	800e6b4 <pbuf_clen>
 80133ae:	4603      	mov	r3, r0
 80133b0:	461a      	mov	r2, r3
 80133b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80133b6:	4413      	add	r3, r2
 80133b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80133bc:	e041      	b.n	8013442 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80133be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80133c4:	e002      	b.n	80133cc <tcp_write+0x23c>
 80133c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80133cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d1f8      	bne.n	80133c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80133d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133d6:	7b1b      	ldrb	r3, [r3, #12]
 80133d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d115      	bne.n	801340c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80133e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80133e6:	8952      	ldrh	r2, [r2, #10]
 80133e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80133ea:	68ba      	ldr	r2, [r7, #8]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d10d      	bne.n	801340c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80133f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d006      	beq.n	8013406 <tcp_write+0x276>
 80133f8:	4b1c      	ldr	r3, [pc, #112]	@ (801346c <tcp_write+0x2dc>)
 80133fa:	f240 2231 	movw	r2, #561	@ 0x231
 80133fe:	4922      	ldr	r1, [pc, #136]	@ (8013488 <tcp_write+0x2f8>)
 8013400:	481c      	ldr	r0, [pc, #112]	@ (8013474 <tcp_write+0x2e4>)
 8013402:	f005 f831 	bl	8018468 <iprintf>
          extendlen = seglen;
 8013406:	8bfb      	ldrh	r3, [r7, #30]
 8013408:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801340a:	e01a      	b.n	8013442 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801340c:	8bfb      	ldrh	r3, [r7, #30]
 801340e:	2201      	movs	r2, #1
 8013410:	4619      	mov	r1, r3
 8013412:	2000      	movs	r0, #0
 8013414:	f7fa fddc 	bl	800dfd0 <pbuf_alloc>
 8013418:	6578      	str	r0, [r7, #84]	@ 0x54
 801341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801341c:	2b00      	cmp	r3, #0
 801341e:	f000 81e0 	beq.w	80137e2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	441a      	add	r2, r3
 801342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801342c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801342e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013430:	f7fb f940 	bl	800e6b4 <pbuf_clen>
 8013434:	4603      	mov	r3, r0
 8013436:	461a      	mov	r2, r3
 8013438:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801343c:	4413      	add	r3, r2
 801343e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013442:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013446:	8bfb      	ldrh	r3, [r7, #30]
 8013448:	4413      	add	r3, r2
 801344a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801344e:	e0dc      	b.n	801360a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8013456:	2b00      	cmp	r3, #0
 8013458:	f000 80d7 	beq.w	801360a <tcp_write+0x47a>
 801345c:	4b03      	ldr	r3, [pc, #12]	@ (801346c <tcp_write+0x2dc>)
 801345e:	f240 224a 	movw	r2, #586	@ 0x24a
 8013462:	490a      	ldr	r1, [pc, #40]	@ (801348c <tcp_write+0x2fc>)
 8013464:	4803      	ldr	r0, [pc, #12]	@ (8013474 <tcp_write+0x2e4>)
 8013466:	f004 ffff 	bl	8018468 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801346a:	e0ce      	b.n	801360a <tcp_write+0x47a>
 801346c:	0801bccc 	.word	0x0801bccc
 8013470:	0801be6c 	.word	0x0801be6c
 8013474:	0801bd20 	.word	0x0801bd20
 8013478:	0801be84 	.word	0x0801be84
 801347c:	0801beb8 	.word	0x0801beb8
 8013480:	0801bed0 	.word	0x0801bed0
 8013484:	0801bef0 	.word	0x0801bef0
 8013488:	0801bf10 	.word	0x0801bf10
 801348c:	0801bf3c 	.word	0x0801bf3c
    struct pbuf *p;
    u16_t left = len - pos;
 8013490:	88fa      	ldrh	r2, [r7, #6]
 8013492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801349a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801349e:	b29b      	uxth	r3, r3
 80134a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134a2:	1ad3      	subs	r3, r2, r3
 80134a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80134a6:	8b7a      	ldrh	r2, [r7, #26]
 80134a8:	8bbb      	ldrh	r3, [r7, #28]
 80134aa:	4293      	cmp	r3, r2
 80134ac:	bf28      	it	cs
 80134ae:	4613      	movcs	r3, r2
 80134b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80134b2:	797b      	ldrb	r3, [r7, #5]
 80134b4:	f003 0301 	and.w	r3, r3, #1
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d036      	beq.n	801352a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80134bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	8b3b      	ldrh	r3, [r7, #24]
 80134c4:	4413      	add	r3, r2
 80134c6:	b299      	uxth	r1, r3
 80134c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bf0c      	ite	eq
 80134ce:	2301      	moveq	r3, #1
 80134d0:	2300      	movne	r3, #0
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	f107 0012 	add.w	r0, r7, #18
 80134d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80134da:	9302      	str	r3, [sp, #8]
 80134dc:	797b      	ldrb	r3, [r7, #5]
 80134de:	9301      	str	r3, [sp, #4]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	4603      	mov	r3, r0
 80134e6:	2036      	movs	r0, #54	@ 0x36
 80134e8:	f7ff fd5e 	bl	8012fa8 <tcp_pbuf_prealloc>
 80134ec:	6338      	str	r0, [r7, #48]	@ 0x30
 80134ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f000 8178 	beq.w	80137e6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80134f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f8:	895b      	ldrh	r3, [r3, #10]
 80134fa:	8b3a      	ldrh	r2, [r7, #24]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d906      	bls.n	801350e <tcp_write+0x37e>
 8013500:	4b8c      	ldr	r3, [pc, #560]	@ (8013734 <tcp_write+0x5a4>)
 8013502:	f240 2266 	movw	r2, #614	@ 0x266
 8013506:	498c      	ldr	r1, [pc, #560]	@ (8013738 <tcp_write+0x5a8>)
 8013508:	488c      	ldr	r0, [pc, #560]	@ (801373c <tcp_write+0x5ac>)
 801350a:	f004 ffad 	bl	8018468 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013510:	685a      	ldr	r2, [r3, #4]
 8013512:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013516:	18d0      	adds	r0, r2, r3
 8013518:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801351c:	68ba      	ldr	r2, [r7, #8]
 801351e:	4413      	add	r3, r2
 8013520:	8b3a      	ldrh	r2, [r7, #24]
 8013522:	4619      	mov	r1, r3
 8013524:	f005 f929 	bl	801877a <memcpy>
 8013528:	e02f      	b.n	801358a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801352a:	8a7b      	ldrh	r3, [r7, #18]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d006      	beq.n	801353e <tcp_write+0x3ae>
 8013530:	4b80      	ldr	r3, [pc, #512]	@ (8013734 <tcp_write+0x5a4>)
 8013532:	f240 2271 	movw	r2, #625	@ 0x271
 8013536:	4982      	ldr	r1, [pc, #520]	@ (8013740 <tcp_write+0x5b0>)
 8013538:	4880      	ldr	r0, [pc, #512]	@ (801373c <tcp_write+0x5ac>)
 801353a:	f004 ff95 	bl	8018468 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801353e:	8b3b      	ldrh	r3, [r7, #24]
 8013540:	2201      	movs	r2, #1
 8013542:	4619      	mov	r1, r3
 8013544:	2036      	movs	r0, #54	@ 0x36
 8013546:	f7fa fd43 	bl	800dfd0 <pbuf_alloc>
 801354a:	6178      	str	r0, [r7, #20]
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	2b00      	cmp	r3, #0
 8013550:	f000 814b 	beq.w	80137ea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013558:	68ba      	ldr	r2, [r7, #8]
 801355a:	441a      	add	r2, r3
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013560:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013564:	b29b      	uxth	r3, r3
 8013566:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801356a:	4619      	mov	r1, r3
 801356c:	2036      	movs	r0, #54	@ 0x36
 801356e:	f7fa fd2f 	bl	800dfd0 <pbuf_alloc>
 8013572:	6338      	str	r0, [r7, #48]	@ 0x30
 8013574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013576:	2b00      	cmp	r3, #0
 8013578:	d103      	bne.n	8013582 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801357a:	6978      	ldr	r0, [r7, #20]
 801357c:	f7fb f80c 	bl	800e598 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013580:	e136      	b.n	80137f0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013582:	6979      	ldr	r1, [r7, #20]
 8013584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013586:	f7fb f8d5 	bl	800e734 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801358a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801358c:	f7fb f892 	bl	800e6b4 <pbuf_clen>
 8013590:	4603      	mov	r3, r0
 8013592:	461a      	mov	r2, r3
 8013594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013598:	4413      	add	r3, r2
 801359a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801359e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80135a2:	2b09      	cmp	r3, #9
 80135a4:	d903      	bls.n	80135ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80135a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135a8:	f7fa fff6 	bl	800e598 <pbuf_free>
      goto memerr;
 80135ac:	e120      	b.n	80137f0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80135b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80135b6:	441a      	add	r2, r3
 80135b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135bc:	9300      	str	r3, [sp, #0]
 80135be:	4613      	mov	r3, r2
 80135c0:	2200      	movs	r2, #0
 80135c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f7ff fc53 	bl	8012e70 <tcp_create_segment>
 80135ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80135cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f000 810d 	beq.w	80137ee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80135d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d102      	bne.n	80135e0 <tcp_write+0x450>
      queue = seg;
 80135da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80135de:	e00c      	b.n	80135fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80135e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d106      	bne.n	80135f4 <tcp_write+0x464>
 80135e6:	4b53      	ldr	r3, [pc, #332]	@ (8013734 <tcp_write+0x5a4>)
 80135e8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80135ec:	4955      	ldr	r1, [pc, #340]	@ (8013744 <tcp_write+0x5b4>)
 80135ee:	4853      	ldr	r0, [pc, #332]	@ (801373c <tcp_write+0x5ac>)
 80135f0:	f004 ff3a 	bl	8018468 <iprintf>
      prev_seg->next = seg;
 80135f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80135f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80135f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80135fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135fc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80135fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013602:	8b3b      	ldrh	r3, [r7, #24]
 8013604:	4413      	add	r3, r2
 8013606:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801360a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801360e:	88fb      	ldrh	r3, [r7, #6]
 8013610:	429a      	cmp	r2, r3
 8013612:	f4ff af3d 	bcc.w	8013490 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013616:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013618:	2b00      	cmp	r3, #0
 801361a:	d02c      	beq.n	8013676 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801361c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801361e:	685b      	ldr	r3, [r3, #4]
 8013620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013622:	e01e      	b.n	8013662 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013626:	891a      	ldrh	r2, [r3, #8]
 8013628:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801362a:	4413      	add	r3, r2
 801362c:	b29a      	uxth	r2, r3
 801362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013630:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d110      	bne.n	801365c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013640:	8952      	ldrh	r2, [r2, #10]
 8013642:	4413      	add	r3, r2
 8013644:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013646:	68b9      	ldr	r1, [r7, #8]
 8013648:	4618      	mov	r0, r3
 801364a:	f005 f896 	bl	801877a <memcpy>
        p->len += oversize_used;
 801364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013650:	895a      	ldrh	r2, [r3, #10]
 8013652:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013654:	4413      	add	r3, r2
 8013656:	b29a      	uxth	r2, r3
 8013658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1dd      	bne.n	8013624 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801366a:	891a      	ldrh	r2, [r3, #8]
 801366c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801366e:	4413      	add	r3, r2
 8013670:	b29a      	uxth	r2, r3
 8013672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013674:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013676:	8a7a      	ldrh	r2, [r7, #18]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013680:	2b00      	cmp	r3, #0
 8013682:	d018      	beq.n	80136b6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013686:	2b00      	cmp	r3, #0
 8013688:	d106      	bne.n	8013698 <tcp_write+0x508>
 801368a:	4b2a      	ldr	r3, [pc, #168]	@ (8013734 <tcp_write+0x5a4>)
 801368c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8013690:	492d      	ldr	r1, [pc, #180]	@ (8013748 <tcp_write+0x5b8>)
 8013692:	482a      	ldr	r0, [pc, #168]	@ (801373c <tcp_write+0x5ac>)
 8013694:	f004 fee8 	bl	8018468 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801369e:	4618      	mov	r0, r3
 80136a0:	f7fb f848 	bl	800e734 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80136a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136a6:	891a      	ldrh	r2, [r3, #8]
 80136a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136aa:	891b      	ldrh	r3, [r3, #8]
 80136ac:	4413      	add	r3, r2
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136b2:	811a      	strh	r2, [r3, #8]
 80136b4:	e037      	b.n	8013726 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80136b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d034      	beq.n	8013726 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80136bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d003      	beq.n	80136ca <tcp_write+0x53a>
 80136c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d106      	bne.n	80136d8 <tcp_write+0x548>
 80136ca:	4b1a      	ldr	r3, [pc, #104]	@ (8013734 <tcp_write+0x5a4>)
 80136cc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80136d0:	491e      	ldr	r1, [pc, #120]	@ (801374c <tcp_write+0x5bc>)
 80136d2:	481a      	ldr	r0, [pc, #104]	@ (801373c <tcp_write+0x5ac>)
 80136d4:	f004 fec8 	bl	8018468 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80136d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80136de:	e009      	b.n	80136f4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80136e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e2:	891a      	ldrh	r2, [r3, #8]
 80136e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80136e6:	4413      	add	r3, r2
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80136ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80136f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1f1      	bne.n	80136e0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80136fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fe:	891a      	ldrh	r2, [r3, #8]
 8013700:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013702:	4413      	add	r3, r2
 8013704:	b29a      	uxth	r2, r3
 8013706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013708:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801370c:	895a      	ldrh	r2, [r3, #10]
 801370e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013710:	4413      	add	r3, r2
 8013712:	b29a      	uxth	r2, r3
 8013714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013716:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801371a:	891a      	ldrh	r2, [r3, #8]
 801371c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801371e:	4413      	add	r3, r2
 8013720:	b29a      	uxth	r2, r3
 8013722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013724:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013728:	2b00      	cmp	r3, #0
 801372a:	d111      	bne.n	8013750 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013730:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013732:	e010      	b.n	8013756 <tcp_write+0x5c6>
 8013734:	0801bccc 	.word	0x0801bccc
 8013738:	0801bf6c 	.word	0x0801bf6c
 801373c:	0801bd20 	.word	0x0801bd20
 8013740:	0801bfac 	.word	0x0801bfac
 8013744:	0801bfbc 	.word	0x0801bfbc
 8013748:	0801bfd0 	.word	0x0801bfd0
 801374c:	0801c008 	.word	0x0801c008
  } else {
    last_unsent->next = queue;
 8013750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013754:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801375a:	88fb      	ldrh	r3, [r7, #6]
 801375c:	441a      	add	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013768:	88fb      	ldrh	r3, [r7, #6]
 801376a:	1ad3      	subs	r3, r2, r3
 801376c:	b29a      	uxth	r2, r3
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801377a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013784:	2b00      	cmp	r3, #0
 8013786:	d00e      	beq.n	80137a6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801378c:	2b00      	cmp	r3, #0
 801378e:	d10a      	bne.n	80137a6 <tcp_write+0x616>
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013794:	2b00      	cmp	r3, #0
 8013796:	d106      	bne.n	80137a6 <tcp_write+0x616>
 8013798:	4b2c      	ldr	r3, [pc, #176]	@ (801384c <tcp_write+0x6bc>)
 801379a:	f240 3212 	movw	r2, #786	@ 0x312
 801379e:	492c      	ldr	r1, [pc, #176]	@ (8013850 <tcp_write+0x6c0>)
 80137a0:	482c      	ldr	r0, [pc, #176]	@ (8013854 <tcp_write+0x6c4>)
 80137a2:	f004 fe61 	bl	8018468 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80137a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d016      	beq.n	80137da <tcp_write+0x64a>
 80137ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d012      	beq.n	80137da <tcp_write+0x64a>
 80137b4:	797b      	ldrb	r3, [r7, #5]
 80137b6:	f003 0302 	and.w	r3, r3, #2
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d10d      	bne.n	80137da <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80137be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	899b      	ldrh	r3, [r3, #12]
 80137c4:	b29c      	uxth	r4, r3
 80137c6:	2008      	movs	r0, #8
 80137c8:	f7f9 fabe 	bl	800cd48 <lwip_htons>
 80137cc:	4603      	mov	r3, r0
 80137ce:	461a      	mov	r2, r3
 80137d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	4322      	orrs	r2, r4
 80137d6:	b292      	uxth	r2, r2
 80137d8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80137da:	2300      	movs	r3, #0
 80137dc:	e031      	b.n	8013842 <tcp_write+0x6b2>
          goto memerr;
 80137de:	bf00      	nop
 80137e0:	e006      	b.n	80137f0 <tcp_write+0x660>
            goto memerr;
 80137e2:	bf00      	nop
 80137e4:	e004      	b.n	80137f0 <tcp_write+0x660>
        goto memerr;
 80137e6:	bf00      	nop
 80137e8:	e002      	b.n	80137f0 <tcp_write+0x660>
        goto memerr;
 80137ea:	bf00      	nop
 80137ec:	e000      	b.n	80137f0 <tcp_write+0x660>
      goto memerr;
 80137ee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	8b5b      	ldrh	r3, [r3, #26]
 80137f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80137fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013800:	2b00      	cmp	r3, #0
 8013802:	d002      	beq.n	801380a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013804:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8013806:	f7fa fec7 	bl	800e598 <pbuf_free>
  }
  if (queue != NULL) {
 801380a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801380c:	2b00      	cmp	r3, #0
 801380e:	d002      	beq.n	8013816 <tcp_write+0x686>
    tcp_segs_free(queue);
 8013810:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013812:	f7fc fb53 	bl	800febc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00e      	beq.n	801383e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013824:	2b00      	cmp	r3, #0
 8013826:	d10a      	bne.n	801383e <tcp_write+0x6ae>
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801382c:	2b00      	cmp	r3, #0
 801382e:	d106      	bne.n	801383e <tcp_write+0x6ae>
 8013830:	4b06      	ldr	r3, [pc, #24]	@ (801384c <tcp_write+0x6bc>)
 8013832:	f240 3227 	movw	r2, #807	@ 0x327
 8013836:	4906      	ldr	r1, [pc, #24]	@ (8013850 <tcp_write+0x6c0>)
 8013838:	4806      	ldr	r0, [pc, #24]	@ (8013854 <tcp_write+0x6c4>)
 801383a:	f004 fe15 	bl	8018468 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801383e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013842:	4618      	mov	r0, r3
 8013844:	375c      	adds	r7, #92	@ 0x5c
 8013846:	46bd      	mov	sp, r7
 8013848:	bd90      	pop	{r4, r7, pc}
 801384a:	bf00      	nop
 801384c:	0801bccc 	.word	0x0801bccc
 8013850:	0801c040 	.word	0x0801c040
 8013854:	0801bd20 	.word	0x0801bd20

08013858 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013858:	b590      	push	{r4, r7, lr}
 801385a:	b08b      	sub	sp, #44	@ 0x2c
 801385c:	af02      	add	r7, sp, #8
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013864:	2300      	movs	r3, #0
 8013866:	61fb      	str	r3, [r7, #28]
 8013868:	2300      	movs	r3, #0
 801386a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801386c:	2300      	movs	r3, #0
 801386e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d106      	bne.n	8013884 <tcp_split_unsent_seg+0x2c>
 8013876:	4b95      	ldr	r3, [pc, #596]	@ (8013acc <tcp_split_unsent_seg+0x274>)
 8013878:	f240 324b 	movw	r2, #843	@ 0x34b
 801387c:	4994      	ldr	r1, [pc, #592]	@ (8013ad0 <tcp_split_unsent_seg+0x278>)
 801387e:	4895      	ldr	r0, [pc, #596]	@ (8013ad4 <tcp_split_unsent_seg+0x27c>)
 8013880:	f004 fdf2 	bl	8018468 <iprintf>

  useg = pcb->unsent;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013888:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d102      	bne.n	8013896 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013890:	f04f 33ff 	mov.w	r3, #4294967295
 8013894:	e116      	b.n	8013ac4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013896:	887b      	ldrh	r3, [r7, #2]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d109      	bne.n	80138b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801389c:	4b8b      	ldr	r3, [pc, #556]	@ (8013acc <tcp_split_unsent_seg+0x274>)
 801389e:	f240 3253 	movw	r2, #851	@ 0x353
 80138a2:	498d      	ldr	r1, [pc, #564]	@ (8013ad8 <tcp_split_unsent_seg+0x280>)
 80138a4:	488b      	ldr	r0, [pc, #556]	@ (8013ad4 <tcp_split_unsent_seg+0x27c>)
 80138a6:	f004 fddf 	bl	8018468 <iprintf>
    return ERR_VAL;
 80138aa:	f06f 0305 	mvn.w	r3, #5
 80138ae:	e109      	b.n	8013ac4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	891b      	ldrh	r3, [r3, #8]
 80138b4:	887a      	ldrh	r2, [r7, #2]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d301      	bcc.n	80138be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e102      	b.n	8013ac4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138c2:	887a      	ldrh	r2, [r7, #2]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d906      	bls.n	80138d6 <tcp_split_unsent_seg+0x7e>
 80138c8:	4b80      	ldr	r3, [pc, #512]	@ (8013acc <tcp_split_unsent_seg+0x274>)
 80138ca:	f240 325b 	movw	r2, #859	@ 0x35b
 80138ce:	4983      	ldr	r1, [pc, #524]	@ (8013adc <tcp_split_unsent_seg+0x284>)
 80138d0:	4880      	ldr	r0, [pc, #512]	@ (8013ad4 <tcp_split_unsent_seg+0x27c>)
 80138d2:	f004 fdc9 	bl	8018468 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	891b      	ldrh	r3, [r3, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d106      	bne.n	80138ec <tcp_split_unsent_seg+0x94>
 80138de:	4b7b      	ldr	r3, [pc, #492]	@ (8013acc <tcp_split_unsent_seg+0x274>)
 80138e0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80138e4:	497e      	ldr	r1, [pc, #504]	@ (8013ae0 <tcp_split_unsent_seg+0x288>)
 80138e6:	487b      	ldr	r0, [pc, #492]	@ (8013ad4 <tcp_split_unsent_seg+0x27c>)
 80138e8:	f004 fdbe 	bl	8018468 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	7a9b      	ldrb	r3, [r3, #10]
 80138f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80138f2:	7bfb      	ldrb	r3, [r7, #15]
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	b2db      	uxtb	r3, r3
 80138f8:	f003 0304 	and.w	r3, r3, #4
 80138fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	891a      	ldrh	r2, [r3, #8]
 8013902:	887b      	ldrh	r3, [r7, #2]
 8013904:	1ad3      	subs	r3, r2, r3
 8013906:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013908:	7bbb      	ldrb	r3, [r7, #14]
 801390a:	b29a      	uxth	r2, r3
 801390c:	89bb      	ldrh	r3, [r7, #12]
 801390e:	4413      	add	r3, r2
 8013910:	b29b      	uxth	r3, r3
 8013912:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013916:	4619      	mov	r1, r3
 8013918:	2036      	movs	r0, #54	@ 0x36
 801391a:	f7fa fb59 	bl	800dfd0 <pbuf_alloc>
 801391e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	f000 80b7 	beq.w	8013a96 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	685b      	ldr	r3, [r3, #4]
 801392c:	891a      	ldrh	r2, [r3, #8]
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	891b      	ldrh	r3, [r3, #8]
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	b29a      	uxth	r2, r3
 8013936:	887b      	ldrh	r3, [r7, #2]
 8013938:	4413      	add	r3, r2
 801393a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	6858      	ldr	r0, [r3, #4]
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	685a      	ldr	r2, [r3, #4]
 8013944:	7bbb      	ldrb	r3, [r7, #14]
 8013946:	18d1      	adds	r1, r2, r3
 8013948:	897b      	ldrh	r3, [r7, #10]
 801394a:	89ba      	ldrh	r2, [r7, #12]
 801394c:	f7fb f82a 	bl	800e9a4 <pbuf_copy_partial>
 8013950:	4603      	mov	r3, r0
 8013952:	461a      	mov	r2, r3
 8013954:	89bb      	ldrh	r3, [r7, #12]
 8013956:	4293      	cmp	r3, r2
 8013958:	f040 809f 	bne.w	8013a9a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	899b      	ldrh	r3, [r3, #12]
 8013962:	b29b      	uxth	r3, r3
 8013964:	4618      	mov	r0, r3
 8013966:	f7f9 f9ef 	bl	800cd48 <lwip_htons>
 801396a:	4603      	mov	r3, r0
 801396c:	b2db      	uxtb	r3, r3
 801396e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013972:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013974:	2300      	movs	r3, #0
 8013976:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013978:	7efb      	ldrb	r3, [r7, #27]
 801397a:	f003 0308 	and.w	r3, r3, #8
 801397e:	2b00      	cmp	r3, #0
 8013980:	d007      	beq.n	8013992 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013982:	7efb      	ldrb	r3, [r7, #27]
 8013984:	f023 0308 	bic.w	r3, r3, #8
 8013988:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801398a:	7ebb      	ldrb	r3, [r7, #26]
 801398c:	f043 0308 	orr.w	r3, r3, #8
 8013990:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013992:	7efb      	ldrb	r3, [r7, #27]
 8013994:	f003 0301 	and.w	r3, r3, #1
 8013998:	2b00      	cmp	r3, #0
 801399a:	d007      	beq.n	80139ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801399c:	7efb      	ldrb	r3, [r7, #27]
 801399e:	f023 0301 	bic.w	r3, r3, #1
 80139a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80139a4:	7ebb      	ldrb	r3, [r7, #26]
 80139a6:	f043 0301 	orr.w	r3, r3, #1
 80139aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	68db      	ldr	r3, [r3, #12]
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7f9 f9dd 	bl	800cd72 <lwip_htonl>
 80139b8:	4602      	mov	r2, r0
 80139ba:	887b      	ldrh	r3, [r7, #2]
 80139bc:	18d1      	adds	r1, r2, r3
 80139be:	7eba      	ldrb	r2, [r7, #26]
 80139c0:	7bfb      	ldrb	r3, [r7, #15]
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	460b      	mov	r3, r1
 80139c6:	6939      	ldr	r1, [r7, #16]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7ff fa51 	bl	8012e70 <tcp_create_segment>
 80139ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80139d0:	69fb      	ldr	r3, [r7, #28]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d063      	beq.n	8013a9e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fa fe6a 	bl	800e6b4 <pbuf_clen>
 80139e0:	4603      	mov	r3, r0
 80139e2:	461a      	mov	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80139ea:	1a9b      	subs	r3, r3, r2
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	6858      	ldr	r0, [r3, #4]
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	891a      	ldrh	r2, [r3, #8]
 80139fe:	89bb      	ldrh	r3, [r7, #12]
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	4619      	mov	r1, r3
 8013a06:	f7fa fc41 	bl	800e28c <pbuf_realloc>
  useg->len -= remainder;
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	891a      	ldrh	r2, [r3, #8]
 8013a0e:	89bb      	ldrh	r3, [r7, #12]
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	899b      	ldrh	r3, [r3, #12]
 8013a1e:	b29c      	uxth	r4, r3
 8013a20:	7efb      	ldrb	r3, [r7, #27]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7f9 f98f 	bl	800cd48 <lwip_htons>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	68db      	ldr	r3, [r3, #12]
 8013a32:	4322      	orrs	r2, r4
 8013a34:	b292      	uxth	r2, r2
 8013a36:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	685b      	ldr	r3, [r3, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fa fe39 	bl	800e6b4 <pbuf_clen>
 8013a42:	4603      	mov	r3, r0
 8013a44:	461a      	mov	r2, r3
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a4c:	4413      	add	r3, r2
 8013a4e:	b29a      	uxth	r2, r3
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fa fe2a 	bl	800e6b4 <pbuf_clen>
 8013a60:	4603      	mov	r3, r0
 8013a62:	461a      	mov	r2, r3
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013a6a:	4413      	add	r3, r2
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	69fa      	ldr	r2, [r7, #28]
 8013a80:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d103      	bne.n	8013a92 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	e016      	b.n	8013ac4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013a96:	bf00      	nop
 8013a98:	e002      	b.n	8013aa0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a9a:	bf00      	nop
 8013a9c:	e000      	b.n	8013aa0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a9e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d006      	beq.n	8013ab4 <tcp_split_unsent_seg+0x25c>
 8013aa6:	4b09      	ldr	r3, [pc, #36]	@ (8013acc <tcp_split_unsent_seg+0x274>)
 8013aa8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013aac:	490d      	ldr	r1, [pc, #52]	@ (8013ae4 <tcp_split_unsent_seg+0x28c>)
 8013aae:	4809      	ldr	r0, [pc, #36]	@ (8013ad4 <tcp_split_unsent_seg+0x27c>)
 8013ab0:	f004 fcda 	bl	8018468 <iprintf>
  if (p != NULL) {
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d002      	beq.n	8013ac0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013aba:	6938      	ldr	r0, [r7, #16]
 8013abc:	f7fa fd6c 	bl	800e598 <pbuf_free>
  }

  return ERR_MEM;
 8013ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3724      	adds	r7, #36	@ 0x24
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd90      	pop	{r4, r7, pc}
 8013acc:	0801bccc 	.word	0x0801bccc
 8013ad0:	0801c060 	.word	0x0801c060
 8013ad4:	0801bd20 	.word	0x0801bd20
 8013ad8:	0801c084 	.word	0x0801c084
 8013adc:	0801c0a8 	.word	0x0801c0a8
 8013ae0:	0801c0b8 	.word	0x0801c0b8
 8013ae4:	0801c0c8 	.word	0x0801c0c8

08013ae8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013ae8:	b590      	push	{r4, r7, lr}
 8013aea:	b085      	sub	sp, #20
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <tcp_send_fin+0x1c>
 8013af6:	4b21      	ldr	r3, [pc, #132]	@ (8013b7c <tcp_send_fin+0x94>)
 8013af8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013afc:	4920      	ldr	r1, [pc, #128]	@ (8013b80 <tcp_send_fin+0x98>)
 8013afe:	4821      	ldr	r0, [pc, #132]	@ (8013b84 <tcp_send_fin+0x9c>)
 8013b00:	f004 fcb2 	bl	8018468 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d02e      	beq.n	8013b6a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b10:	60fb      	str	r3, [r7, #12]
 8013b12:	e002      	b.n	8013b1a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1f8      	bne.n	8013b14 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	899b      	ldrh	r3, [r3, #12]
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7f9 f90c 	bl	800cd48 <lwip_htons>
 8013b30:	4603      	mov	r3, r0
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	f003 0307 	and.w	r3, r3, #7
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d116      	bne.n	8013b6a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	68db      	ldr	r3, [r3, #12]
 8013b40:	899b      	ldrh	r3, [r3, #12]
 8013b42:	b29c      	uxth	r4, r3
 8013b44:	2001      	movs	r0, #1
 8013b46:	f7f9 f8ff 	bl	800cd48 <lwip_htons>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	4322      	orrs	r2, r4
 8013b54:	b292      	uxth	r2, r2
 8013b56:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	8b5b      	ldrh	r3, [r3, #26]
 8013b5c:	f043 0320 	orr.w	r3, r3, #32
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013b66:	2300      	movs	r3, #0
 8013b68:	e004      	b.n	8013b74 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013b6a:	2101      	movs	r1, #1
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 f80b 	bl	8013b88 <tcp_enqueue_flags>
 8013b72:	4603      	mov	r3, r0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3714      	adds	r7, #20
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd90      	pop	{r4, r7, pc}
 8013b7c:	0801bccc 	.word	0x0801bccc
 8013b80:	0801c0d4 	.word	0x0801c0d4
 8013b84:	0801bd20 	.word	0x0801bd20

08013b88 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b08a      	sub	sp, #40	@ 0x28
 8013b8c:	af02      	add	r7, sp, #8
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	460b      	mov	r3, r1
 8013b92:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013b94:	2300      	movs	r3, #0
 8013b96:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013b9c:	78fb      	ldrb	r3, [r7, #3]
 8013b9e:	f003 0303 	and.w	r3, r3, #3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d106      	bne.n	8013bb4 <tcp_enqueue_flags+0x2c>
 8013ba6:	4b67      	ldr	r3, [pc, #412]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013ba8:	f240 4211 	movw	r2, #1041	@ 0x411
 8013bac:	4966      	ldr	r1, [pc, #408]	@ (8013d48 <tcp_enqueue_flags+0x1c0>)
 8013bae:	4867      	ldr	r0, [pc, #412]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013bb0:	f004 fc5a 	bl	8018468 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d106      	bne.n	8013bc8 <tcp_enqueue_flags+0x40>
 8013bba:	4b62      	ldr	r3, [pc, #392]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013bbc:	f240 4213 	movw	r2, #1043	@ 0x413
 8013bc0:	4963      	ldr	r1, [pc, #396]	@ (8013d50 <tcp_enqueue_flags+0x1c8>)
 8013bc2:	4862      	ldr	r0, [pc, #392]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013bc4:	f004 fc50 	bl	8018468 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013bc8:	78fb      	ldrb	r3, [r7, #3]
 8013bca:	f003 0302 	and.w	r3, r3, #2
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d001      	beq.n	8013bd6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013bd6:	7ffb      	ldrb	r3, [r7, #31]
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	b2db      	uxtb	r3, r3
 8013bdc:	f003 0304 	and.w	r3, r3, #4
 8013be0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013bea:	4619      	mov	r1, r3
 8013bec:	2036      	movs	r0, #54	@ 0x36
 8013bee:	f7fa f9ef 	bl	800dfd0 <pbuf_alloc>
 8013bf2:	6138      	str	r0, [r7, #16]
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d109      	bne.n	8013c0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	8b5b      	ldrh	r3, [r3, #26]
 8013bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c08:	f04f 33ff 	mov.w	r3, #4294967295
 8013c0c:	e095      	b.n	8013d3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	895a      	ldrh	r2, [r3, #10]
 8013c12:	7dfb      	ldrb	r3, [r7, #23]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d206      	bcs.n	8013c28 <tcp_enqueue_flags+0xa0>
 8013c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013c1c:	f240 4239 	movw	r2, #1081	@ 0x439
 8013c20:	494c      	ldr	r1, [pc, #304]	@ (8013d54 <tcp_enqueue_flags+0x1cc>)
 8013c22:	484a      	ldr	r0, [pc, #296]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013c24:	f004 fc20 	bl	8018468 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013c2c:	78fa      	ldrb	r2, [r7, #3]
 8013c2e:	7ffb      	ldrb	r3, [r7, #31]
 8013c30:	9300      	str	r3, [sp, #0]
 8013c32:	460b      	mov	r3, r1
 8013c34:	6939      	ldr	r1, [r7, #16]
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff f91a 	bl	8012e70 <tcp_create_segment>
 8013c3c:	60f8      	str	r0, [r7, #12]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d109      	bne.n	8013c58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	8b5b      	ldrh	r3, [r3, #26]
 8013c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013c52:	f04f 33ff 	mov.w	r3, #4294967295
 8013c56:	e070      	b.n	8013d3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	f003 0303 	and.w	r3, r3, #3
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d006      	beq.n	8013c72 <tcp_enqueue_flags+0xea>
 8013c64:	4b37      	ldr	r3, [pc, #220]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013c66:	f240 4242 	movw	r2, #1090	@ 0x442
 8013c6a:	493b      	ldr	r1, [pc, #236]	@ (8013d58 <tcp_enqueue_flags+0x1d0>)
 8013c6c:	4837      	ldr	r0, [pc, #220]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013c6e:	f004 fbfb 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	891b      	ldrh	r3, [r3, #8]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d006      	beq.n	8013c88 <tcp_enqueue_flags+0x100>
 8013c7a:	4b32      	ldr	r3, [pc, #200]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013c7c:	f240 4243 	movw	r2, #1091	@ 0x443
 8013c80:	4936      	ldr	r1, [pc, #216]	@ (8013d5c <tcp_enqueue_flags+0x1d4>)
 8013c82:	4832      	ldr	r0, [pc, #200]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013c84:	f004 fbf0 	bl	8018468 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d103      	bne.n	8013c98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013c96:	e00d      	b.n	8013cb4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c9c:	61bb      	str	r3, [r7, #24]
 8013c9e:	e002      	b.n	8013ca6 <tcp_enqueue_flags+0x11e>
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	61bb      	str	r3, [r7, #24]
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1f8      	bne.n	8013ca0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013cbc:	78fb      	ldrb	r3, [r7, #3]
 8013cbe:	f003 0302 	and.w	r3, r3, #2
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d104      	bne.n	8013cd0 <tcp_enqueue_flags+0x148>
 8013cc6:	78fb      	ldrb	r3, [r7, #3]
 8013cc8:	f003 0301 	and.w	r3, r3, #1
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d004      	beq.n	8013cda <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013cd4:	1c5a      	adds	r2, r3, #1
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013cda:	78fb      	ldrb	r3, [r7, #3]
 8013cdc:	f003 0301 	and.w	r3, r3, #1
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d006      	beq.n	8013cf2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	8b5b      	ldrh	r3, [r3, #26]
 8013ce8:	f043 0320 	orr.w	r3, r3, #32
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fa fcdc 	bl	800e6b4 <pbuf_clen>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	461a      	mov	r2, r3
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d06:	4413      	add	r3, r2
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00e      	beq.n	8013d38 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d10a      	bne.n	8013d38 <tcp_enqueue_flags+0x1b0>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d106      	bne.n	8013d38 <tcp_enqueue_flags+0x1b0>
 8013d2a:	4b06      	ldr	r3, [pc, #24]	@ (8013d44 <tcp_enqueue_flags+0x1bc>)
 8013d2c:	f240 4265 	movw	r2, #1125	@ 0x465
 8013d30:	490b      	ldr	r1, [pc, #44]	@ (8013d60 <tcp_enqueue_flags+0x1d8>)
 8013d32:	4806      	ldr	r0, [pc, #24]	@ (8013d4c <tcp_enqueue_flags+0x1c4>)
 8013d34:	f004 fb98 	bl	8018468 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3720      	adds	r7, #32
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	0801bccc 	.word	0x0801bccc
 8013d48:	0801c0f0 	.word	0x0801c0f0
 8013d4c:	0801bd20 	.word	0x0801bd20
 8013d50:	0801c148 	.word	0x0801c148
 8013d54:	0801c168 	.word	0x0801c168
 8013d58:	0801c1a4 	.word	0x0801c1a4
 8013d5c:	0801c1bc 	.word	0x0801c1bc
 8013d60:	0801c1e8 	.word	0x0801c1e8

08013d64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d64:	b5b0      	push	{r4, r5, r7, lr}
 8013d66:	b08a      	sub	sp, #40	@ 0x28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d106      	bne.n	8013d80 <tcp_output+0x1c>
 8013d72:	4b8a      	ldr	r3, [pc, #552]	@ (8013f9c <tcp_output+0x238>)
 8013d74:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013d78:	4989      	ldr	r1, [pc, #548]	@ (8013fa0 <tcp_output+0x23c>)
 8013d7a:	488a      	ldr	r0, [pc, #552]	@ (8013fa4 <tcp_output+0x240>)
 8013d7c:	f004 fb74 	bl	8018468 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	7d1b      	ldrb	r3, [r3, #20]
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d106      	bne.n	8013d96 <tcp_output+0x32>
 8013d88:	4b84      	ldr	r3, [pc, #528]	@ (8013f9c <tcp_output+0x238>)
 8013d8a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013d8e:	4986      	ldr	r1, [pc, #536]	@ (8013fa8 <tcp_output+0x244>)
 8013d90:	4884      	ldr	r0, [pc, #528]	@ (8013fa4 <tcp_output+0x240>)
 8013d92:	f004 fb69 	bl	8018468 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013d96:	4b85      	ldr	r3, [pc, #532]	@ (8013fac <tcp_output+0x248>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	687a      	ldr	r2, [r7, #4]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d101      	bne.n	8013da4 <tcp_output+0x40>
    return ERR_OK;
 8013da0:	2300      	movs	r3, #0
 8013da2:	e1ce      	b.n	8014142 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013db0:	4293      	cmp	r3, r2
 8013db2:	bf28      	it	cs
 8013db4:	4613      	movcs	r3, r2
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013dbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d10b      	bne.n	8013dde <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	8b5b      	ldrh	r3, [r3, #26]
 8013dca:	f003 0302 	and.w	r3, r3, #2
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	f000 81aa 	beq.w	8014128 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f000 fdcb 	bl	8014970 <tcp_send_empty_ack>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	e1b1      	b.n	8014142 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013dde:	6879      	ldr	r1, [r7, #4]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3304      	adds	r3, #4
 8013de4:	461a      	mov	r2, r3
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f7ff f826 	bl	8012e38 <tcp_route>
 8013dec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d102      	bne.n	8013dfa <tcp_output+0x96>
    return ERR_RTE;
 8013df4:	f06f 0303 	mvn.w	r3, #3
 8013df8:	e1a3      	b.n	8014142 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d003      	beq.n	8013e08 <tcp_output+0xa4>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d111      	bne.n	8013e2c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d002      	beq.n	8013e14 <tcp_output+0xb0>
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	3304      	adds	r3, #4
 8013e12:	e000      	b.n	8013e16 <tcp_output+0xb2>
 8013e14:	2300      	movs	r3, #0
 8013e16:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d102      	bne.n	8013e24 <tcp_output+0xc0>
      return ERR_RTE;
 8013e1e:	f06f 0303 	mvn.w	r3, #3
 8013e22:	e18e      	b.n	8014142 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f8 ff9d 	bl	800cd72 <lwip_htonl>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e42:	8912      	ldrh	r2, [r2, #8]
 8013e44:	4413      	add	r3, r2
 8013e46:	69ba      	ldr	r2, [r7, #24]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d227      	bcs.n	8013e9c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e52:	461a      	mov	r2, r3
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	4293      	cmp	r3, r2
 8013e58:	d114      	bne.n	8013e84 <tcp_output+0x120>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d110      	bne.n	8013e84 <tcp_output+0x120>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d10b      	bne.n	8013e84 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2201      	movs	r2, #1
 8013e78:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	8b5b      	ldrh	r3, [r3, #26]
 8013e88:	f003 0302 	and.w	r3, r3, #2
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f000 814d 	beq.w	801412c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f000 fd6c 	bl	8014970 <tcp_send_empty_ack>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	e152      	b.n	8014142 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ea8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f000 811c 	beq.w	80140ea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013eb2:	e002      	b.n	8013eba <tcp_output+0x156>
 8013eb4:	6a3b      	ldr	r3, [r7, #32]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	623b      	str	r3, [r7, #32]
 8013eba:	6a3b      	ldr	r3, [r7, #32]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1f8      	bne.n	8013eb4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013ec2:	e112      	b.n	80140ea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	899b      	ldrh	r3, [r3, #12]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7f8 ff3b 	bl	800cd48 <lwip_htons>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	f003 0304 	and.w	r3, r3, #4
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d006      	beq.n	8013eec <tcp_output+0x188>
 8013ede:	4b2f      	ldr	r3, [pc, #188]	@ (8013f9c <tcp_output+0x238>)
 8013ee0:	f240 5236 	movw	r2, #1334	@ 0x536
 8013ee4:	4932      	ldr	r1, [pc, #200]	@ (8013fb0 <tcp_output+0x24c>)
 8013ee6:	482f      	ldr	r0, [pc, #188]	@ (8013fa4 <tcp_output+0x240>)
 8013ee8:	f004 fabe 	bl	8018468 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d01f      	beq.n	8013f34 <tcp_output+0x1d0>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	8b5b      	ldrh	r3, [r3, #26]
 8013ef8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d119      	bne.n	8013f34 <tcp_output+0x1d0>
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d00b      	beq.n	8013f20 <tcp_output+0x1bc>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d110      	bne.n	8013f34 <tcp_output+0x1d0>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f16:	891a      	ldrh	r2, [r3, #8]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d209      	bcs.n	8013f34 <tcp_output+0x1d0>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d004      	beq.n	8013f34 <tcp_output+0x1d0>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013f30:	2b08      	cmp	r3, #8
 8013f32:	d901      	bls.n	8013f38 <tcp_output+0x1d4>
 8013f34:	2301      	movs	r3, #1
 8013f36:	e000      	b.n	8013f3a <tcp_output+0x1d6>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d106      	bne.n	8013f4c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	8b5b      	ldrh	r3, [r3, #26]
 8013f42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	f000 80e4 	beq.w	8014114 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	7d1b      	ldrb	r3, [r3, #20]
 8013f50:	2b02      	cmp	r3, #2
 8013f52:	d00d      	beq.n	8013f70 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	899b      	ldrh	r3, [r3, #12]
 8013f5a:	b29c      	uxth	r4, r3
 8013f5c:	2010      	movs	r0, #16
 8013f5e:	f7f8 fef3 	bl	800cd48 <lwip_htons>
 8013f62:	4603      	mov	r3, r0
 8013f64:	461a      	mov	r2, r3
 8013f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	4322      	orrs	r2, r4
 8013f6c:	b292      	uxth	r2, r2
 8013f6e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013f70:	697a      	ldr	r2, [r7, #20]
 8013f72:	6879      	ldr	r1, [r7, #4]
 8013f74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f76:	f000 f909 	bl	801418c <tcp_output_segment>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d016      	beq.n	8013fb4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	8b5b      	ldrh	r3, [r3, #26]
 8013f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	835a      	strh	r2, [r3, #26]
      return err;
 8013f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f98:	e0d3      	b.n	8014142 <tcp_output+0x3de>
 8013f9a:	bf00      	nop
 8013f9c:	0801bccc 	.word	0x0801bccc
 8013fa0:	0801c210 	.word	0x0801c210
 8013fa4:	0801bd20 	.word	0x0801bd20
 8013fa8:	0801c228 	.word	0x0801c228
 8013fac:	2000f15c 	.word	0x2000f15c
 8013fb0:	0801c250 	.word	0x0801c250
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	7d1b      	ldrb	r3, [r3, #20]
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	d006      	beq.n	8013fd2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	8b5b      	ldrh	r3, [r3, #26]
 8013fc8:	f023 0303 	bic.w	r3, r3, #3
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7f8 feca 	bl	800cd72 <lwip_htonl>
 8013fde:	4604      	mov	r4, r0
 8013fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fe2:	891b      	ldrh	r3, [r3, #8]
 8013fe4:	461d      	mov	r5, r3
 8013fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	899b      	ldrh	r3, [r3, #12]
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7f8 feaa 	bl	800cd48 <lwip_htons>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	b2db      	uxtb	r3, r3
 8013ff8:	f003 0303 	and.w	r3, r3, #3
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d001      	beq.n	8014004 <tcp_output+0x2a0>
 8014000:	2301      	movs	r3, #1
 8014002:	e000      	b.n	8014006 <tcp_output+0x2a2>
 8014004:	2300      	movs	r3, #0
 8014006:	442b      	add	r3, r5
 8014008:	4423      	add	r3, r4
 801400a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	2b00      	cmp	r3, #0
 8014016:	da02      	bge.n	801401e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	68ba      	ldr	r2, [r7, #8]
 801401c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014020:	891b      	ldrh	r3, [r3, #8]
 8014022:	461c      	mov	r4, r3
 8014024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	899b      	ldrh	r3, [r3, #12]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4618      	mov	r0, r3
 801402e:	f7f8 fe8b 	bl	800cd48 <lwip_htons>
 8014032:	4603      	mov	r3, r0
 8014034:	b2db      	uxtb	r3, r3
 8014036:	f003 0303 	and.w	r3, r3, #3
 801403a:	2b00      	cmp	r3, #0
 801403c:	d001      	beq.n	8014042 <tcp_output+0x2de>
 801403e:	2301      	movs	r3, #1
 8014040:	e000      	b.n	8014044 <tcp_output+0x2e0>
 8014042:	2300      	movs	r3, #0
 8014044:	4423      	add	r3, r4
 8014046:	2b00      	cmp	r3, #0
 8014048:	d049      	beq.n	80140de <tcp_output+0x37a>
      seg->next = NULL;
 801404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801404c:	2200      	movs	r2, #0
 801404e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014054:	2b00      	cmp	r3, #0
 8014056:	d105      	bne.n	8014064 <tcp_output+0x300>
        pcb->unacked = seg;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801405c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014060:	623b      	str	r3, [r7, #32]
 8014062:	e03f      	b.n	80140e4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014066:	68db      	ldr	r3, [r3, #12]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	4618      	mov	r0, r3
 801406c:	f7f8 fe81 	bl	800cd72 <lwip_htonl>
 8014070:	4604      	mov	r4, r0
 8014072:	6a3b      	ldr	r3, [r7, #32]
 8014074:	68db      	ldr	r3, [r3, #12]
 8014076:	685b      	ldr	r3, [r3, #4]
 8014078:	4618      	mov	r0, r3
 801407a:	f7f8 fe7a 	bl	800cd72 <lwip_htonl>
 801407e:	4603      	mov	r3, r0
 8014080:	1ae3      	subs	r3, r4, r3
 8014082:	2b00      	cmp	r3, #0
 8014084:	da24      	bge.n	80140d0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	3370      	adds	r3, #112	@ 0x70
 801408a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801408c:	e002      	b.n	8014094 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014094:	69fb      	ldr	r3, [r7, #28]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d011      	beq.n	80140c0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	685b      	ldr	r3, [r3, #4]
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7f8 fe64 	bl	800cd72 <lwip_htonl>
 80140aa:	4604      	mov	r4, r0
 80140ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7f8 fe5d 	bl	800cd72 <lwip_htonl>
 80140b8:	4603      	mov	r3, r0
 80140ba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80140bc:	2b00      	cmp	r3, #0
 80140be:	dbe6      	blt.n	801408e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80140c8:	69fb      	ldr	r3, [r7, #28]
 80140ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	e009      	b.n	80140e4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80140d0:	6a3b      	ldr	r3, [r7, #32]
 80140d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140d4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80140d6:	6a3b      	ldr	r3, [r7, #32]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	623b      	str	r3, [r7, #32]
 80140dc:	e002      	b.n	80140e4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80140de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140e0:	f7fb ff01 	bl	800fee6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80140ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d012      	beq.n	8014116 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80140f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f8 fe3b 	bl	800cd72 <lwip_htonl>
 80140fc:	4602      	mov	r2, r0
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014102:	1ad3      	subs	r3, r2, r3
 8014104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014106:	8912      	ldrh	r2, [r2, #8]
 8014108:	4413      	add	r3, r2
  while (seg != NULL &&
 801410a:	69ba      	ldr	r2, [r7, #24]
 801410c:	429a      	cmp	r2, r3
 801410e:	f4bf aed9 	bcs.w	8013ec4 <tcp_output+0x160>
 8014112:	e000      	b.n	8014116 <tcp_output+0x3b2>
      break;
 8014114:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801411a:	2b00      	cmp	r3, #0
 801411c:	d108      	bne.n	8014130 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2200      	movs	r2, #0
 8014122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014126:	e004      	b.n	8014132 <tcp_output+0x3ce>
    goto output_done;
 8014128:	bf00      	nop
 801412a:	e002      	b.n	8014132 <tcp_output+0x3ce>
    goto output_done;
 801412c:	bf00      	nop
 801412e:	e000      	b.n	8014132 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014130:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	8b5b      	ldrh	r3, [r3, #26]
 8014136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801413a:	b29a      	uxth	r2, r3
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	3728      	adds	r7, #40	@ 0x28
 8014146:	46bd      	mov	sp, r7
 8014148:	bdb0      	pop	{r4, r5, r7, pc}
 801414a:	bf00      	nop

0801414c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d106      	bne.n	8014168 <tcp_output_segment_busy+0x1c>
 801415a:	4b09      	ldr	r3, [pc, #36]	@ (8014180 <tcp_output_segment_busy+0x34>)
 801415c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014160:	4908      	ldr	r1, [pc, #32]	@ (8014184 <tcp_output_segment_busy+0x38>)
 8014162:	4809      	ldr	r0, [pc, #36]	@ (8014188 <tcp_output_segment_busy+0x3c>)
 8014164:	f004 f980 	bl	8018468 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	7b9b      	ldrb	r3, [r3, #14]
 801416e:	2b01      	cmp	r3, #1
 8014170:	d001      	beq.n	8014176 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014172:	2301      	movs	r3, #1
 8014174:	e000      	b.n	8014178 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014176:	2300      	movs	r3, #0
}
 8014178:	4618      	mov	r0, r3
 801417a:	3708      	adds	r7, #8
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	0801bccc 	.word	0x0801bccc
 8014184:	0801c268 	.word	0x0801c268
 8014188:	0801bd20 	.word	0x0801bd20

0801418c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801418c:	b5b0      	push	{r4, r5, r7, lr}
 801418e:	b08c      	sub	sp, #48	@ 0x30
 8014190:	af04      	add	r7, sp, #16
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d106      	bne.n	80141ac <tcp_output_segment+0x20>
 801419e:	4b64      	ldr	r3, [pc, #400]	@ (8014330 <tcp_output_segment+0x1a4>)
 80141a0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80141a4:	4963      	ldr	r1, [pc, #396]	@ (8014334 <tcp_output_segment+0x1a8>)
 80141a6:	4864      	ldr	r0, [pc, #400]	@ (8014338 <tcp_output_segment+0x1ac>)
 80141a8:	f004 f95e 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <tcp_output_segment+0x34>
 80141b2:	4b5f      	ldr	r3, [pc, #380]	@ (8014330 <tcp_output_segment+0x1a4>)
 80141b4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80141b8:	4960      	ldr	r1, [pc, #384]	@ (801433c <tcp_output_segment+0x1b0>)
 80141ba:	485f      	ldr	r0, [pc, #380]	@ (8014338 <tcp_output_segment+0x1ac>)
 80141bc:	f004 f954 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d106      	bne.n	80141d4 <tcp_output_segment+0x48>
 80141c6:	4b5a      	ldr	r3, [pc, #360]	@ (8014330 <tcp_output_segment+0x1a4>)
 80141c8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80141cc:	495c      	ldr	r1, [pc, #368]	@ (8014340 <tcp_output_segment+0x1b4>)
 80141ce:	485a      	ldr	r0, [pc, #360]	@ (8014338 <tcp_output_segment+0x1ac>)
 80141d0:	f004 f94a 	bl	8018468 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f7ff ffb9 	bl	801414c <tcp_output_segment_busy>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d001      	beq.n	80141e4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80141e0:	2300      	movs	r3, #0
 80141e2:	e0a1      	b.n	8014328 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	68dc      	ldr	r4, [r3, #12]
 80141ec:	4610      	mov	r0, r2
 80141ee:	f7f8 fdc0 	bl	800cd72 <lwip_htonl>
 80141f2:	4603      	mov	r3, r0
 80141f4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	68dc      	ldr	r4, [r3, #12]
 80141fe:	4610      	mov	r0, r2
 8014200:	f7f8 fda2 	bl	800cd48 <lwip_htons>
 8014204:	4603      	mov	r3, r0
 8014206:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801420c:	68ba      	ldr	r2, [r7, #8]
 801420e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014210:	441a      	add	r2, r3
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	3314      	adds	r3, #20
 801421c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	7a9b      	ldrb	r3, [r3, #10]
 8014222:	f003 0301 	and.w	r3, r3, #1
 8014226:	2b00      	cmp	r3, #0
 8014228:	d015      	beq.n	8014256 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	3304      	adds	r3, #4
 801422e:	461a      	mov	r2, r3
 8014230:	6879      	ldr	r1, [r7, #4]
 8014232:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8014236:	f7fc fa39 	bl	80106ac <tcp_eff_send_mss_netif>
 801423a:	4603      	mov	r3, r0
 801423c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801423e:	8b7b      	ldrh	r3, [r7, #26]
 8014240:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014244:	4618      	mov	r0, r3
 8014246:	f7f8 fd94 	bl	800cd72 <lwip_htonl>
 801424a:	4602      	mov	r2, r0
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014250:	69fb      	ldr	r3, [r7, #28]
 8014252:	3304      	adds	r3, #4
 8014254:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801425c:	2b00      	cmp	r3, #0
 801425e:	da02      	bge.n	8014266 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	2200      	movs	r2, #0
 8014264:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801426a:	2b00      	cmp	r3, #0
 801426c:	d10c      	bne.n	8014288 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801426e:	4b35      	ldr	r3, [pc, #212]	@ (8014344 <tcp_output_segment+0x1b8>)
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	f7f8 fd78 	bl	800cd72 <lwip_htonl>
 8014282:	4602      	mov	r2, r0
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	68da      	ldr	r2, [r3, #12]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	1ad3      	subs	r3, r2, r3
 8014294:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	8959      	ldrh	r1, [r3, #10]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	8b3a      	ldrh	r2, [r7, #24]
 80142a2:	1a8a      	subs	r2, r1, r2
 80142a4:	b292      	uxth	r2, r2
 80142a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	8919      	ldrh	r1, [r3, #8]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	8b3a      	ldrh	r2, [r7, #24]
 80142b4:	1a8a      	subs	r2, r1, r2
 80142b6:	b292      	uxth	r2, r2
 80142b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	685b      	ldr	r3, [r3, #4]
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	68d2      	ldr	r2, [r2, #12]
 80142c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	2200      	movs	r2, #0
 80142ca:	741a      	strb	r2, [r3, #16]
 80142cc:	2200      	movs	r2, #0
 80142ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	68da      	ldr	r2, [r3, #12]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	7a9b      	ldrb	r3, [r3, #10]
 80142d8:	f003 0301 	and.w	r3, r3, #1
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d001      	beq.n	80142e4 <tcp_output_segment+0x158>
 80142e0:	2318      	movs	r3, #24
 80142e2:	e000      	b.n	80142e6 <tcp_output_segment+0x15a>
 80142e4:	2314      	movs	r3, #20
 80142e6:	4413      	add	r3, r2
 80142e8:	69fa      	ldr	r2, [r7, #28]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d006      	beq.n	80142fc <tcp_output_segment+0x170>
 80142ee:	4b10      	ldr	r3, [pc, #64]	@ (8014330 <tcp_output_segment+0x1a4>)
 80142f0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80142f4:	4914      	ldr	r1, [pc, #80]	@ (8014348 <tcp_output_segment+0x1bc>)
 80142f6:	4810      	ldr	r0, [pc, #64]	@ (8014338 <tcp_output_segment+0x1ac>)
 80142f8:	f004 f8b6 	bl	8018468 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	6858      	ldr	r0, [r3, #4]
 8014300:	68b9      	ldr	r1, [r7, #8]
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	1d1c      	adds	r4, r3, #4
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	7add      	ldrb	r5, [r3, #11]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	7a9b      	ldrb	r3, [r3, #10]
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	9202      	str	r2, [sp, #8]
 8014312:	2206      	movs	r2, #6
 8014314:	9201      	str	r2, [sp, #4]
 8014316:	9300      	str	r3, [sp, #0]
 8014318:	462b      	mov	r3, r5
 801431a:	4622      	mov	r2, r4
 801431c:	f002 fd94 	bl	8016e48 <ip4_output_if>
 8014320:	4603      	mov	r3, r0
 8014322:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014324:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014328:	4618      	mov	r0, r3
 801432a:	3720      	adds	r7, #32
 801432c:	46bd      	mov	sp, r7
 801432e:	bdb0      	pop	{r4, r5, r7, pc}
 8014330:	0801bccc 	.word	0x0801bccc
 8014334:	0801c290 	.word	0x0801c290
 8014338:	0801bd20 	.word	0x0801bd20
 801433c:	0801c2b0 	.word	0x0801c2b0
 8014340:	0801c2d0 	.word	0x0801c2d0
 8014344:	2000f110 	.word	0x2000f110
 8014348:	0801c2f4 	.word	0x0801c2f4

0801434c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801434c:	b5b0      	push	{r4, r5, r7, lr}
 801434e:	b084      	sub	sp, #16
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <tcp_rexmit_rto_prepare+0x1c>
 801435a:	4b31      	ldr	r3, [pc, #196]	@ (8014420 <tcp_rexmit_rto_prepare+0xd4>)
 801435c:	f240 6263 	movw	r2, #1635	@ 0x663
 8014360:	4930      	ldr	r1, [pc, #192]	@ (8014424 <tcp_rexmit_rto_prepare+0xd8>)
 8014362:	4831      	ldr	r0, [pc, #196]	@ (8014428 <tcp_rexmit_rto_prepare+0xdc>)
 8014364:	f004 f880 	bl	8018468 <iprintf>

  if (pcb->unacked == NULL) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801436c:	2b00      	cmp	r3, #0
 801436e:	d102      	bne.n	8014376 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014370:	f06f 0305 	mvn.w	r3, #5
 8014374:	e050      	b.n	8014418 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801437a:	60fb      	str	r3, [r7, #12]
 801437c:	e00b      	b.n	8014396 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f7ff fee4 	bl	801414c <tcp_output_segment_busy>
 8014384:	4603      	mov	r3, r0
 8014386:	2b00      	cmp	r3, #0
 8014388:	d002      	beq.n	8014390 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801438a:	f06f 0305 	mvn.w	r3, #5
 801438e:	e043      	b.n	8014418 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	60fb      	str	r3, [r7, #12]
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1ef      	bne.n	801437e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801439e:	68f8      	ldr	r0, [r7, #12]
 80143a0:	f7ff fed4 	bl	801414c <tcp_output_segment_busy>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d002      	beq.n	80143b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80143aa:	f06f 0305 	mvn.w	r3, #5
 80143ae:	e033      	b.n	8014418 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2200      	movs	r2, #0
 80143c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8b5b      	ldrh	r3, [r3, #26]
 80143ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	68db      	ldr	r3, [r3, #12]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	4618      	mov	r0, r3
 80143dc:	f7f8 fcc9 	bl	800cd72 <lwip_htonl>
 80143e0:	4604      	mov	r4, r0
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	891b      	ldrh	r3, [r3, #8]
 80143e6:	461d      	mov	r5, r3
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	899b      	ldrh	r3, [r3, #12]
 80143ee:	b29b      	uxth	r3, r3
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7f8 fca9 	bl	800cd48 <lwip_htons>
 80143f6:	4603      	mov	r3, r0
 80143f8:	b2db      	uxtb	r3, r3
 80143fa:	f003 0303 	and.w	r3, r3, #3
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d001      	beq.n	8014406 <tcp_rexmit_rto_prepare+0xba>
 8014402:	2301      	movs	r3, #1
 8014404:	e000      	b.n	8014408 <tcp_rexmit_rto_prepare+0xbc>
 8014406:	2300      	movs	r3, #0
 8014408:	442b      	add	r3, r5
 801440a:	18e2      	adds	r2, r4, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2200      	movs	r2, #0
 8014414:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3710      	adds	r7, #16
 801441c:	46bd      	mov	sp, r7
 801441e:	bdb0      	pop	{r4, r5, r7, pc}
 8014420:	0801bccc 	.word	0x0801bccc
 8014424:	0801c308 	.word	0x0801c308
 8014428:	0801bd20 	.word	0x0801bd20

0801442c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_rexmit_rto_commit+0x1c>
 801443a:	4b0d      	ldr	r3, [pc, #52]	@ (8014470 <tcp_rexmit_rto_commit+0x44>)
 801443c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014440:	490c      	ldr	r1, [pc, #48]	@ (8014474 <tcp_rexmit_rto_commit+0x48>)
 8014442:	480d      	ldr	r0, [pc, #52]	@ (8014478 <tcp_rexmit_rto_commit+0x4c>)
 8014444:	f004 f810 	bl	8018468 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801444e:	2bff      	cmp	r3, #255	@ 0xff
 8014450:	d007      	beq.n	8014462 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014458:	3301      	adds	r3, #1
 801445a:	b2da      	uxtb	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f7ff fc7e 	bl	8013d64 <tcp_output>
}
 8014468:	bf00      	nop
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}
 8014470:	0801bccc 	.word	0x0801bccc
 8014474:	0801c32c 	.word	0x0801c32c
 8014478:	0801bd20 	.word	0x0801bd20

0801447c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d106      	bne.n	8014498 <tcp_rexmit_rto+0x1c>
 801448a:	4b0a      	ldr	r3, [pc, #40]	@ (80144b4 <tcp_rexmit_rto+0x38>)
 801448c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014490:	4909      	ldr	r1, [pc, #36]	@ (80144b8 <tcp_rexmit_rto+0x3c>)
 8014492:	480a      	ldr	r0, [pc, #40]	@ (80144bc <tcp_rexmit_rto+0x40>)
 8014494:	f003 ffe8 	bl	8018468 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7ff ff57 	bl	801434c <tcp_rexmit_rto_prepare>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d102      	bne.n	80144aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f7ff ffc1 	bl	801442c <tcp_rexmit_rto_commit>
  }
}
 80144aa:	bf00      	nop
 80144ac:	3708      	adds	r7, #8
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
 80144b2:	bf00      	nop
 80144b4:	0801bccc 	.word	0x0801bccc
 80144b8:	0801c350 	.word	0x0801c350
 80144bc:	0801bd20 	.word	0x0801bd20

080144c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b085      	sub	sp, #20
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d106      	bne.n	80144dc <tcp_rexmit+0x1c>
 80144ce:	4b2f      	ldr	r3, [pc, #188]	@ (801458c <tcp_rexmit+0xcc>)
 80144d0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80144d4:	492e      	ldr	r1, [pc, #184]	@ (8014590 <tcp_rexmit+0xd0>)
 80144d6:	482f      	ldr	r0, [pc, #188]	@ (8014594 <tcp_rexmit+0xd4>)
 80144d8:	f003 ffc6 	bl	8018468 <iprintf>

  if (pcb->unacked == NULL) {
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80144e4:	f06f 0305 	mvn.w	r3, #5
 80144e8:	e04c      	b.n	8014584 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80144ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80144f0:	68b8      	ldr	r0, [r7, #8]
 80144f2:	f7ff fe2b 	bl	801414c <tcp_output_segment_busy>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d002      	beq.n	8014502 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80144fc:	f06f 0305 	mvn.w	r3, #5
 8014500:	e040      	b.n	8014584 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	336c      	adds	r3, #108	@ 0x6c
 801450e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014510:	e002      	b.n	8014518 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d011      	beq.n	8014544 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	68db      	ldr	r3, [r3, #12]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	4618      	mov	r0, r3
 801452a:	f7f8 fc22 	bl	800cd72 <lwip_htonl>
 801452e:	4604      	mov	r4, r0
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	4618      	mov	r0, r3
 8014538:	f7f8 fc1b 	bl	800cd72 <lwip_htonl>
 801453c:	4603      	mov	r3, r0
 801453e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014540:	2b00      	cmp	r3, #0
 8014542:	dbe6      	blt.n	8014512 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	68ba      	ldr	r2, [r7, #8]
 8014550:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d103      	bne.n	8014562 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2200      	movs	r2, #0
 801455e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014568:	2bff      	cmp	r3, #255	@ 0xff
 801456a:	d007      	beq.n	801457c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014572:	3301      	adds	r3, #1
 8014574:	b2da      	uxtb	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014582:	2300      	movs	r3, #0
}
 8014584:	4618      	mov	r0, r3
 8014586:	3714      	adds	r7, #20
 8014588:	46bd      	mov	sp, r7
 801458a:	bd90      	pop	{r4, r7, pc}
 801458c:	0801bccc 	.word	0x0801bccc
 8014590:	0801c36c 	.word	0x0801c36c
 8014594:	0801bd20 	.word	0x0801bd20

08014598 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d106      	bne.n	80145b4 <tcp_rexmit_fast+0x1c>
 80145a6:	4b2a      	ldr	r3, [pc, #168]	@ (8014650 <tcp_rexmit_fast+0xb8>)
 80145a8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80145ac:	4929      	ldr	r1, [pc, #164]	@ (8014654 <tcp_rexmit_fast+0xbc>)
 80145ae:	482a      	ldr	r0, [pc, #168]	@ (8014658 <tcp_rexmit_fast+0xc0>)
 80145b0:	f003 ff5a 	bl	8018468 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d045      	beq.n	8014648 <tcp_rexmit_fast+0xb0>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	8b5b      	ldrh	r3, [r3, #26]
 80145c0:	f003 0304 	and.w	r3, r3, #4
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d13f      	bne.n	8014648 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7ff ff79 	bl	80144c0 <tcp_rexmit>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d139      	bne.n	8014648 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80145e0:	4293      	cmp	r3, r2
 80145e2:	bf28      	it	cs
 80145e4:	4613      	movcs	r3, r2
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	da00      	bge.n	80145ee <tcp_rexmit_fast+0x56>
 80145ec:	3301      	adds	r3, #1
 80145ee:	105b      	asrs	r3, r3, #1
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80145fe:	461a      	mov	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014604:	005b      	lsls	r3, r3, #1
 8014606:	429a      	cmp	r2, r3
 8014608:	d206      	bcs.n	8014618 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	b29a      	uxth	r2, r3
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014622:	4619      	mov	r1, r3
 8014624:	0049      	lsls	r1, r1, #1
 8014626:	440b      	add	r3, r1
 8014628:	b29b      	uxth	r3, r3
 801462a:	4413      	add	r3, r2
 801462c:	b29a      	uxth	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	8b5b      	ldrh	r3, [r3, #26]
 8014638:	f043 0304 	orr.w	r3, r3, #4
 801463c:	b29a      	uxth	r2, r3
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014648:	bf00      	nop
 801464a:	3708      	adds	r7, #8
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	0801bccc 	.word	0x0801bccc
 8014654:	0801c384 	.word	0x0801c384
 8014658:	0801bd20 	.word	0x0801bd20

0801465c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	607b      	str	r3, [r7, #4]
 8014666:	460b      	mov	r3, r1
 8014668:	817b      	strh	r3, [r7, #10]
 801466a:	4613      	mov	r3, r2
 801466c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801466e:	897a      	ldrh	r2, [r7, #10]
 8014670:	893b      	ldrh	r3, [r7, #8]
 8014672:	4413      	add	r3, r2
 8014674:	b29b      	uxth	r3, r3
 8014676:	3314      	adds	r3, #20
 8014678:	b29b      	uxth	r3, r3
 801467a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801467e:	4619      	mov	r1, r3
 8014680:	2022      	movs	r0, #34	@ 0x22
 8014682:	f7f9 fca5 	bl	800dfd0 <pbuf_alloc>
 8014686:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d04d      	beq.n	801472a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801468e:	897b      	ldrh	r3, [r7, #10]
 8014690:	3313      	adds	r3, #19
 8014692:	697a      	ldr	r2, [r7, #20]
 8014694:	8952      	ldrh	r2, [r2, #10]
 8014696:	4293      	cmp	r3, r2
 8014698:	db06      	blt.n	80146a8 <tcp_output_alloc_header_common+0x4c>
 801469a:	4b26      	ldr	r3, [pc, #152]	@ (8014734 <tcp_output_alloc_header_common+0xd8>)
 801469c:	f240 7223 	movw	r2, #1827	@ 0x723
 80146a0:	4925      	ldr	r1, [pc, #148]	@ (8014738 <tcp_output_alloc_header_common+0xdc>)
 80146a2:	4826      	ldr	r0, [pc, #152]	@ (801473c <tcp_output_alloc_header_common+0xe0>)
 80146a4:	f003 fee0 	bl	8018468 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80146ae:	8c3b      	ldrh	r3, [r7, #32]
 80146b0:	4618      	mov	r0, r3
 80146b2:	f7f8 fb49 	bl	800cd48 <lwip_htons>
 80146b6:	4603      	mov	r3, r0
 80146b8:	461a      	mov	r2, r3
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80146be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7f8 fb41 	bl	800cd48 <lwip_htons>
 80146c6:	4603      	mov	r3, r0
 80146c8:	461a      	mov	r2, r3
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f7f8 fb4c 	bl	800cd72 <lwip_htonl>
 80146da:	4602      	mov	r2, r0
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80146e0:	897b      	ldrh	r3, [r7, #10]
 80146e2:	089b      	lsrs	r3, r3, #2
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	3305      	adds	r3, #5
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	031b      	lsls	r3, r3, #12
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	4313      	orrs	r3, r2
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f8 fb25 	bl	800cd48 <lwip_htons>
 80146fe:	4603      	mov	r3, r0
 8014700:	461a      	mov	r2, r3
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014706:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014708:	4618      	mov	r0, r3
 801470a:	f7f8 fb1d 	bl	800cd48 <lwip_htons>
 801470e:	4603      	mov	r3, r0
 8014710:	461a      	mov	r2, r3
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	2200      	movs	r2, #0
 801471a:	741a      	strb	r2, [r3, #16]
 801471c:	2200      	movs	r2, #0
 801471e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	2200      	movs	r2, #0
 8014724:	749a      	strb	r2, [r3, #18]
 8014726:	2200      	movs	r2, #0
 8014728:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801472a:	697b      	ldr	r3, [r7, #20]
}
 801472c:	4618      	mov	r0, r3
 801472e:	3718      	adds	r7, #24
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	0801bccc 	.word	0x0801bccc
 8014738:	0801c3a4 	.word	0x0801c3a4
 801473c:	0801bd20 	.word	0x0801bd20

08014740 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014740:	b5b0      	push	{r4, r5, r7, lr}
 8014742:	b08a      	sub	sp, #40	@ 0x28
 8014744:	af04      	add	r7, sp, #16
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	607b      	str	r3, [r7, #4]
 801474a:	460b      	mov	r3, r1
 801474c:	817b      	strh	r3, [r7, #10]
 801474e:	4613      	mov	r3, r2
 8014750:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d106      	bne.n	8014766 <tcp_output_alloc_header+0x26>
 8014758:	4b15      	ldr	r3, [pc, #84]	@ (80147b0 <tcp_output_alloc_header+0x70>)
 801475a:	f240 7242 	movw	r2, #1858	@ 0x742
 801475e:	4915      	ldr	r1, [pc, #84]	@ (80147b4 <tcp_output_alloc_header+0x74>)
 8014760:	4815      	ldr	r0, [pc, #84]	@ (80147b8 <tcp_output_alloc_header+0x78>)
 8014762:	f003 fe81 	bl	8018468 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	8adb      	ldrh	r3, [r3, #22]
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	8b12      	ldrh	r2, [r2, #24]
 8014772:	68f9      	ldr	r1, [r7, #12]
 8014774:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014776:	893d      	ldrh	r5, [r7, #8]
 8014778:	897c      	ldrh	r4, [r7, #10]
 801477a:	9103      	str	r1, [sp, #12]
 801477c:	2110      	movs	r1, #16
 801477e:	9102      	str	r1, [sp, #8]
 8014780:	9201      	str	r2, [sp, #4]
 8014782:	9300      	str	r3, [sp, #0]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	462a      	mov	r2, r5
 8014788:	4621      	mov	r1, r4
 801478a:	f7ff ff67 	bl	801465c <tcp_output_alloc_header_common>
 801478e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d006      	beq.n	80147a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801479a:	68fa      	ldr	r2, [r7, #12]
 801479c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801479e:	441a      	add	r2, r3
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80147a4:	697b      	ldr	r3, [r7, #20]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3718      	adds	r7, #24
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bdb0      	pop	{r4, r5, r7, pc}
 80147ae:	bf00      	nop
 80147b0:	0801bccc 	.word	0x0801bccc
 80147b4:	0801c3d4 	.word	0x0801c3d4
 80147b8:	0801bd20 	.word	0x0801bd20

080147bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b088      	sub	sp, #32
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	4611      	mov	r1, r2
 80147c8:	461a      	mov	r2, r3
 80147ca:	460b      	mov	r3, r1
 80147cc:	71fb      	strb	r3, [r7, #7]
 80147ce:	4613      	mov	r3, r2
 80147d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d106      	bne.n	80147ea <tcp_output_fill_options+0x2e>
 80147dc:	4b12      	ldr	r3, [pc, #72]	@ (8014828 <tcp_output_fill_options+0x6c>)
 80147de:	f240 7256 	movw	r2, #1878	@ 0x756
 80147e2:	4912      	ldr	r1, [pc, #72]	@ (801482c <tcp_output_fill_options+0x70>)
 80147e4:	4812      	ldr	r0, [pc, #72]	@ (8014830 <tcp_output_fill_options+0x74>)
 80147e6:	f003 fe3f 	bl	8018468 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	3314      	adds	r3, #20
 80147f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80147f6:	8bfb      	ldrh	r3, [r7, #30]
 80147f8:	009b      	lsls	r3, r3, #2
 80147fa:	461a      	mov	r2, r3
 80147fc:	79fb      	ldrb	r3, [r7, #7]
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	4413      	add	r3, r2
 8014806:	3314      	adds	r3, #20
 8014808:	69ba      	ldr	r2, [r7, #24]
 801480a:	4413      	add	r3, r2
 801480c:	697a      	ldr	r2, [r7, #20]
 801480e:	429a      	cmp	r2, r3
 8014810:	d006      	beq.n	8014820 <tcp_output_fill_options+0x64>
 8014812:	4b05      	ldr	r3, [pc, #20]	@ (8014828 <tcp_output_fill_options+0x6c>)
 8014814:	f240 7275 	movw	r2, #1909	@ 0x775
 8014818:	4906      	ldr	r1, [pc, #24]	@ (8014834 <tcp_output_fill_options+0x78>)
 801481a:	4805      	ldr	r0, [pc, #20]	@ (8014830 <tcp_output_fill_options+0x74>)
 801481c:	f003 fe24 	bl	8018468 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014820:	bf00      	nop
 8014822:	3720      	adds	r7, #32
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	0801bccc 	.word	0x0801bccc
 801482c:	0801c3fc 	.word	0x0801c3fc
 8014830:	0801bd20 	.word	0x0801bd20
 8014834:	0801c2f4 	.word	0x0801c2f4

08014838 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b08a      	sub	sp, #40	@ 0x28
 801483c:	af04      	add	r7, sp, #16
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	607a      	str	r2, [r7, #4]
 8014844:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d106      	bne.n	801485a <tcp_output_control_segment+0x22>
 801484c:	4b1c      	ldr	r3, [pc, #112]	@ (80148c0 <tcp_output_control_segment+0x88>)
 801484e:	f240 7287 	movw	r2, #1927	@ 0x787
 8014852:	491c      	ldr	r1, [pc, #112]	@ (80148c4 <tcp_output_control_segment+0x8c>)
 8014854:	481c      	ldr	r0, [pc, #112]	@ (80148c8 <tcp_output_control_segment+0x90>)
 8014856:	f003 fe07 	bl	8018468 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	6879      	ldr	r1, [r7, #4]
 801485e:	68f8      	ldr	r0, [r7, #12]
 8014860:	f7fe faea 	bl	8012e38 <tcp_route>
 8014864:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d102      	bne.n	8014872 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801486c:	23fc      	movs	r3, #252	@ 0xfc
 801486e:	75fb      	strb	r3, [r7, #23]
 8014870:	e01c      	b.n	80148ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d006      	beq.n	8014886 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	7adb      	ldrb	r3, [r3, #11]
 801487c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	7a9b      	ldrb	r3, [r3, #10]
 8014882:	757b      	strb	r3, [r7, #21]
 8014884:	e003      	b.n	801488e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014886:	23ff      	movs	r3, #255	@ 0xff
 8014888:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801488e:	7dba      	ldrb	r2, [r7, #22]
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	9302      	str	r3, [sp, #8]
 8014894:	2306      	movs	r3, #6
 8014896:	9301      	str	r3, [sp, #4]
 8014898:	7d7b      	ldrb	r3, [r7, #21]
 801489a:	9300      	str	r3, [sp, #0]
 801489c:	4613      	mov	r3, r2
 801489e:	683a      	ldr	r2, [r7, #0]
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	68b8      	ldr	r0, [r7, #8]
 80148a4:	f002 fad0 	bl	8016e48 <ip4_output_if>
 80148a8:	4603      	mov	r3, r0
 80148aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80148ac:	68b8      	ldr	r0, [r7, #8]
 80148ae:	f7f9 fe73 	bl	800e598 <pbuf_free>
  return err;
 80148b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3718      	adds	r7, #24
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	0801bccc 	.word	0x0801bccc
 80148c4:	0801c424 	.word	0x0801c424
 80148c8:	0801bd20 	.word	0x0801bd20

080148cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b08b      	sub	sp, #44	@ 0x2c
 80148d0:	af04      	add	r7, sp, #16
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d106      	bne.n	80148ee <tcp_rst+0x22>
 80148e0:	4b1f      	ldr	r3, [pc, #124]	@ (8014960 <tcp_rst+0x94>)
 80148e2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80148e6:	491f      	ldr	r1, [pc, #124]	@ (8014964 <tcp_rst+0x98>)
 80148e8:	481f      	ldr	r0, [pc, #124]	@ (8014968 <tcp_rst+0x9c>)
 80148ea:	f003 fdbd 	bl	8018468 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80148ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d106      	bne.n	8014902 <tcp_rst+0x36>
 80148f4:	4b1a      	ldr	r3, [pc, #104]	@ (8014960 <tcp_rst+0x94>)
 80148f6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80148fa:	491c      	ldr	r1, [pc, #112]	@ (801496c <tcp_rst+0xa0>)
 80148fc:	481a      	ldr	r0, [pc, #104]	@ (8014968 <tcp_rst+0x9c>)
 80148fe:	f003 fdb3 	bl	8018468 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014902:	2300      	movs	r3, #0
 8014904:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014906:	f246 0308 	movw	r3, #24584	@ 0x6008
 801490a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801490c:	7dfb      	ldrb	r3, [r7, #23]
 801490e:	b29c      	uxth	r4, r3
 8014910:	68b8      	ldr	r0, [r7, #8]
 8014912:	f7f8 fa2e 	bl	800cd72 <lwip_htonl>
 8014916:	4602      	mov	r2, r0
 8014918:	8abb      	ldrh	r3, [r7, #20]
 801491a:	9303      	str	r3, [sp, #12]
 801491c:	2314      	movs	r3, #20
 801491e:	9302      	str	r3, [sp, #8]
 8014920:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014922:	9301      	str	r3, [sp, #4]
 8014924:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	4613      	mov	r3, r2
 801492a:	2200      	movs	r2, #0
 801492c:	4621      	mov	r1, r4
 801492e:	6878      	ldr	r0, [r7, #4]
 8014930:	f7ff fe94 	bl	801465c <tcp_output_alloc_header_common>
 8014934:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00c      	beq.n	8014956 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801493c:	7dfb      	ldrb	r3, [r7, #23]
 801493e:	2200      	movs	r2, #0
 8014940:	6939      	ldr	r1, [r7, #16]
 8014942:	68f8      	ldr	r0, [r7, #12]
 8014944:	f7ff ff3a 	bl	80147bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	6939      	ldr	r1, [r7, #16]
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f7ff ff72 	bl	8014838 <tcp_output_control_segment>
 8014954:	e000      	b.n	8014958 <tcp_rst+0x8c>
    return;
 8014956:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014958:	371c      	adds	r7, #28
 801495a:	46bd      	mov	sp, r7
 801495c:	bd90      	pop	{r4, r7, pc}
 801495e:	bf00      	nop
 8014960:	0801bccc 	.word	0x0801bccc
 8014964:	0801c450 	.word	0x0801c450
 8014968:	0801bd20 	.word	0x0801bd20
 801496c:	0801c46c 	.word	0x0801c46c

08014970 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014970:	b590      	push	{r4, r7, lr}
 8014972:	b087      	sub	sp, #28
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014978:	2300      	movs	r3, #0
 801497a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d106      	bne.n	8014994 <tcp_send_empty_ack+0x24>
 8014986:	4b28      	ldr	r3, [pc, #160]	@ (8014a28 <tcp_send_empty_ack+0xb8>)
 8014988:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801498c:	4927      	ldr	r1, [pc, #156]	@ (8014a2c <tcp_send_empty_ack+0xbc>)
 801498e:	4828      	ldr	r0, [pc, #160]	@ (8014a30 <tcp_send_empty_ack+0xc0>)
 8014990:	f003 fd6a 	bl	8018468 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014994:	7dfb      	ldrb	r3, [r7, #23]
 8014996:	009b      	lsls	r3, r3, #2
 8014998:	b2db      	uxtb	r3, r3
 801499a:	f003 0304 	and.w	r3, r3, #4
 801499e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80149a0:	7d7b      	ldrb	r3, [r7, #21]
 80149a2:	b29c      	uxth	r4, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7f8 f9e2 	bl	800cd72 <lwip_htonl>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2200      	movs	r2, #0
 80149b2:	4621      	mov	r1, r4
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7ff fec3 	bl	8014740 <tcp_output_alloc_header>
 80149ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d109      	bne.n	80149d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	8b5b      	ldrh	r3, [r3, #26]
 80149c6:	f043 0303 	orr.w	r3, r3, #3
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80149d0:	f06f 0301 	mvn.w	r3, #1
 80149d4:	e023      	b.n	8014a1e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80149d6:	7dbb      	ldrb	r3, [r7, #22]
 80149d8:	7dfa      	ldrb	r2, [r7, #23]
 80149da:	6939      	ldr	r1, [r7, #16]
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f7ff feed 	bl	80147bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	3304      	adds	r3, #4
 80149e8:	6939      	ldr	r1, [r7, #16]
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7ff ff24 	bl	8014838 <tcp_output_control_segment>
 80149f0:	4603      	mov	r3, r0
 80149f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80149f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d007      	beq.n	8014a0c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	8b5b      	ldrh	r3, [r3, #26]
 8014a00:	f043 0303 	orr.w	r3, r3, #3
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	835a      	strh	r2, [r3, #26]
 8014a0a:	e006      	b.n	8014a1a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	8b5b      	ldrh	r3, [r3, #26]
 8014a10:	f023 0303 	bic.w	r3, r3, #3
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	371c      	adds	r7, #28
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd90      	pop	{r4, r7, pc}
 8014a26:	bf00      	nop
 8014a28:	0801bccc 	.word	0x0801bccc
 8014a2c:	0801c488 	.word	0x0801c488
 8014a30:	0801bd20 	.word	0x0801bd20

08014a34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014a34:	b590      	push	{r4, r7, lr}
 8014a36:	b087      	sub	sp, #28
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <tcp_keepalive+0x20>
 8014a46:	4b18      	ldr	r3, [pc, #96]	@ (8014aa8 <tcp_keepalive+0x74>)
 8014a48:	f640 0224 	movw	r2, #2084	@ 0x824
 8014a4c:	4917      	ldr	r1, [pc, #92]	@ (8014aac <tcp_keepalive+0x78>)
 8014a4e:	4818      	ldr	r0, [pc, #96]	@ (8014ab0 <tcp_keepalive+0x7c>)
 8014a50:	f003 fd0a 	bl	8018468 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	b29c      	uxth	r4, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7f8 f987 	bl	800cd72 <lwip_htonl>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2200      	movs	r2, #0
 8014a68:	4621      	mov	r1, r4
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff fe68 	bl	8014740 <tcp_output_alloc_header>
 8014a70:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a72:	693b      	ldr	r3, [r7, #16]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d102      	bne.n	8014a7e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014a78:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7c:	e010      	b.n	8014aa0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a7e:	7dfb      	ldrb	r3, [r7, #23]
 8014a80:	2200      	movs	r2, #0
 8014a82:	6939      	ldr	r1, [r7, #16]
 8014a84:	6878      	ldr	r0, [r7, #4]
 8014a86:	f7ff fe99 	bl	80147bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	3304      	adds	r3, #4
 8014a90:	6939      	ldr	r1, [r7, #16]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff fed0 	bl	8014838 <tcp_output_control_segment>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	371c      	adds	r7, #28
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd90      	pop	{r4, r7, pc}
 8014aa8:	0801bccc 	.word	0x0801bccc
 8014aac:	0801c4a8 	.word	0x0801c4a8
 8014ab0:	0801bd20 	.word	0x0801bd20

08014ab4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014ab4:	b590      	push	{r4, r7, lr}
 8014ab6:	b08b      	sub	sp, #44	@ 0x2c
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014abc:	2300      	movs	r3, #0
 8014abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d106      	bne.n	8014ad6 <tcp_zero_window_probe+0x22>
 8014ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8014bfc <tcp_zero_window_probe+0x148>)
 8014aca:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014ace:	494c      	ldr	r1, [pc, #304]	@ (8014c00 <tcp_zero_window_probe+0x14c>)
 8014ad0:	484c      	ldr	r0, [pc, #304]	@ (8014c04 <tcp_zero_window_probe+0x150>)
 8014ad2:	f003 fcc9 	bl	8018468 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ada:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014adc:	6a3b      	ldr	r3, [r7, #32]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e086      	b.n	8014bf4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014aec:	2bff      	cmp	r3, #255	@ 0xff
 8014aee:	d007      	beq.n	8014b00 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014af6:	3301      	adds	r3, #1
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014b00:	6a3b      	ldr	r3, [r7, #32]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	899b      	ldrh	r3, [r3, #12]
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7f8 f91d 	bl	800cd48 <lwip_htons>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	b2db      	uxtb	r3, r3
 8014b12:	f003 0301 	and.w	r3, r3, #1
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d005      	beq.n	8014b26 <tcp_zero_window_probe+0x72>
 8014b1a:	6a3b      	ldr	r3, [r7, #32]
 8014b1c:	891b      	ldrh	r3, [r3, #8]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d101      	bne.n	8014b26 <tcp_zero_window_probe+0x72>
 8014b22:	2301      	movs	r3, #1
 8014b24:	e000      	b.n	8014b28 <tcp_zero_window_probe+0x74>
 8014b26:	2300      	movs	r3, #0
 8014b28:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014b2a:	7ffb      	ldrb	r3, [r7, #31]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	bf0c      	ite	eq
 8014b30:	2301      	moveq	r3, #1
 8014b32:	2300      	movne	r3, #0
 8014b34:	b2db      	uxtb	r3, r3
 8014b36:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014b3c:	b299      	uxth	r1, r3
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	8bba      	ldrh	r2, [r7, #28]
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f7ff fdfa 	bl	8014740 <tcp_output_alloc_header>
 8014b4c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d102      	bne.n	8014b5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014b54:	f04f 33ff 	mov.w	r3, #4294967295
 8014b58:	e04c      	b.n	8014bf4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014b5a:	69bb      	ldr	r3, [r7, #24]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014b60:	7ffb      	ldrb	r3, [r7, #31]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d011      	beq.n	8014b8a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	899b      	ldrh	r3, [r3, #12]
 8014b6a:	b29b      	uxth	r3, r3
 8014b6c:	b21b      	sxth	r3, r3
 8014b6e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014b72:	b21c      	sxth	r4, r3
 8014b74:	2011      	movs	r0, #17
 8014b76:	f7f8 f8e7 	bl	800cd48 <lwip_htons>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	b21b      	sxth	r3, r3
 8014b7e:	4323      	orrs	r3, r4
 8014b80:	b21b      	sxth	r3, r3
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	819a      	strh	r2, [r3, #12]
 8014b88:	e010      	b.n	8014bac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	3314      	adds	r3, #20
 8014b90:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014b92:	6a3b      	ldr	r3, [r7, #32]
 8014b94:	6858      	ldr	r0, [r3, #4]
 8014b96:	6a3b      	ldr	r3, [r7, #32]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	891a      	ldrh	r2, [r3, #8]
 8014b9c:	6a3b      	ldr	r3, [r7, #32]
 8014b9e:	891b      	ldrh	r3, [r3, #8]
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	2201      	movs	r2, #1
 8014ba6:	6939      	ldr	r1, [r7, #16]
 8014ba8:	f7f9 fefc 	bl	800e9a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014bac:	6a3b      	ldr	r3, [r7, #32]
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7f8 f8dd 	bl	800cd72 <lwip_htonl>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	3301      	adds	r3, #1
 8014bbc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	1ad3      	subs	r3, r2, r3
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	da02      	bge.n	8014bd0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	69b9      	ldr	r1, [r7, #24]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f7ff fdef 	bl	80147bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3304      	adds	r3, #4
 8014be4:	69b9      	ldr	r1, [r7, #24]
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7ff fe26 	bl	8014838 <tcp_output_control_segment>
 8014bec:	4603      	mov	r3, r0
 8014bee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014bf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	372c      	adds	r7, #44	@ 0x2c
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd90      	pop	{r4, r7, pc}
 8014bfc:	0801bccc 	.word	0x0801bccc
 8014c00:	0801c4c4 	.word	0x0801c4c4
 8014c04:	0801bd20 	.word	0x0801bd20

08014c08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014c10:	f7f9 ffb6 	bl	800eb80 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014c14:	4b0a      	ldr	r3, [pc, #40]	@ (8014c40 <tcpip_tcp_timer+0x38>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d103      	bne.n	8014c24 <tcpip_tcp_timer+0x1c>
 8014c1c:	4b09      	ldr	r3, [pc, #36]	@ (8014c44 <tcpip_tcp_timer+0x3c>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d005      	beq.n	8014c30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c24:	2200      	movs	r2, #0
 8014c26:	4908      	ldr	r1, [pc, #32]	@ (8014c48 <tcpip_tcp_timer+0x40>)
 8014c28:	20fa      	movs	r0, #250	@ 0xfa
 8014c2a:	f000 f8f3 	bl	8014e14 <sys_timeout>
 8014c2e:	e003      	b.n	8014c38 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014c30:	4b06      	ldr	r3, [pc, #24]	@ (8014c4c <tcpip_tcp_timer+0x44>)
 8014c32:	2200      	movs	r2, #0
 8014c34:	601a      	str	r2, [r3, #0]
  }
}
 8014c36:	bf00      	nop
 8014c38:	bf00      	nop
 8014c3a:	3708      	adds	r7, #8
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	2000f11c 	.word	0x2000f11c
 8014c44:	2000f120 	.word	0x2000f120
 8014c48:	08014c09 	.word	0x08014c09
 8014c4c:	2000f168 	.word	0x2000f168

08014c50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014c54:	4b0a      	ldr	r3, [pc, #40]	@ (8014c80 <tcp_timer_needed+0x30>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d10f      	bne.n	8014c7c <tcp_timer_needed+0x2c>
 8014c5c:	4b09      	ldr	r3, [pc, #36]	@ (8014c84 <tcp_timer_needed+0x34>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d103      	bne.n	8014c6c <tcp_timer_needed+0x1c>
 8014c64:	4b08      	ldr	r3, [pc, #32]	@ (8014c88 <tcp_timer_needed+0x38>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d007      	beq.n	8014c7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014c6c:	4b04      	ldr	r3, [pc, #16]	@ (8014c80 <tcp_timer_needed+0x30>)
 8014c6e:	2201      	movs	r2, #1
 8014c70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c72:	2200      	movs	r2, #0
 8014c74:	4905      	ldr	r1, [pc, #20]	@ (8014c8c <tcp_timer_needed+0x3c>)
 8014c76:	20fa      	movs	r0, #250	@ 0xfa
 8014c78:	f000 f8cc 	bl	8014e14 <sys_timeout>
  }
}
 8014c7c:	bf00      	nop
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	2000f168 	.word	0x2000f168
 8014c84:	2000f11c 	.word	0x2000f11c
 8014c88:	2000f120 	.word	0x2000f120
 8014c8c:	08014c09 	.word	0x08014c09

08014c90 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b086      	sub	sp, #24
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014c9c:	200a      	movs	r0, #10
 8014c9e:	f7f8 fd61 	bl	800d764 <memp_malloc>
 8014ca2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d109      	bne.n	8014cbe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d151      	bne.n	8014d54 <sys_timeout_abs+0xc4>
 8014cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8014d5c <sys_timeout_abs+0xcc>)
 8014cb2:	22be      	movs	r2, #190	@ 0xbe
 8014cb4:	492a      	ldr	r1, [pc, #168]	@ (8014d60 <sys_timeout_abs+0xd0>)
 8014cb6:	482b      	ldr	r0, [pc, #172]	@ (8014d64 <sys_timeout_abs+0xd4>)
 8014cb8:	f003 fbd6 	bl	8018468 <iprintf>
    return;
 8014cbc:	e04a      	b.n	8014d54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	68ba      	ldr	r2, [r7, #8]
 8014cc8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	68fa      	ldr	r2, [r7, #12]
 8014cd4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014cd6:	4b24      	ldr	r3, [pc, #144]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d103      	bne.n	8014ce6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014cde:	4a22      	ldr	r2, [pc, #136]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	6013      	str	r3, [r2, #0]
    return;
 8014ce4:	e037      	b.n	8014d56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	685a      	ldr	r2, [r3, #4]
 8014cea:	4b1f      	ldr	r3, [pc, #124]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	1ad3      	subs	r3, r2, r3
 8014cf2:	0fdb      	lsrs	r3, r3, #31
 8014cf4:	f003 0301 	and.w	r3, r3, #1
 8014cf8:	b2db      	uxtb	r3, r3
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d007      	beq.n	8014d0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014d06:	4a18      	ldr	r2, [pc, #96]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014d08:	693b      	ldr	r3, [r7, #16]
 8014d0a:	6013      	str	r3, [r2, #0]
 8014d0c:	e023      	b.n	8014d56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d0e:	4b16      	ldr	r3, [pc, #88]	@ (8014d68 <sys_timeout_abs+0xd8>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	617b      	str	r3, [r7, #20]
 8014d14:	e01a      	b.n	8014d4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d00b      	beq.n	8014d36 <sys_timeout_abs+0xa6>
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	1ad3      	subs	r3, r2, r3
 8014d2a:	0fdb      	lsrs	r3, r3, #31
 8014d2c:	f003 0301 	and.w	r3, r3, #1
 8014d30:	b2db      	uxtb	r3, r3
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d007      	beq.n	8014d46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014d36:	697b      	ldr	r3, [r7, #20]
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014d3e:	697b      	ldr	r3, [r7, #20]
 8014d40:	693a      	ldr	r2, [r7, #16]
 8014d42:	601a      	str	r2, [r3, #0]
        break;
 8014d44:	e007      	b.n	8014d56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	617b      	str	r3, [r7, #20]
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d1e1      	bne.n	8014d16 <sys_timeout_abs+0x86>
 8014d52:	e000      	b.n	8014d56 <sys_timeout_abs+0xc6>
    return;
 8014d54:	bf00      	nop
      }
    }
  }
}
 8014d56:	3718      	adds	r7, #24
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	bd80      	pop	{r7, pc}
 8014d5c:	0801c4e8 	.word	0x0801c4e8
 8014d60:	0801c51c 	.word	0x0801c51c
 8014d64:	0801c55c 	.word	0x0801c55c
 8014d68:	2000f160 	.word	0x2000f160

08014d6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	4798      	blx	r3

  now = sys_now();
 8014d7e:	f7f1 fb39 	bl	80063f4 <sys_now>
 8014d82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	4b0f      	ldr	r3, [pc, #60]	@ (8014dc8 <lwip_cyclic_timer+0x5c>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4413      	add	r3, r2
 8014d8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	0fdb      	lsrs	r3, r3, #31
 8014d98:	f003 0301 	and.w	r3, r3, #1
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d009      	beq.n	8014db6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	681a      	ldr	r2, [r3, #0]
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	4413      	add	r3, r2
 8014daa:	687a      	ldr	r2, [r7, #4]
 8014dac:	4907      	ldr	r1, [pc, #28]	@ (8014dcc <lwip_cyclic_timer+0x60>)
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7ff ff6e 	bl	8014c90 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014db4:	e004      	b.n	8014dc0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	4904      	ldr	r1, [pc, #16]	@ (8014dcc <lwip_cyclic_timer+0x60>)
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f7ff ff68 	bl	8014c90 <sys_timeout_abs>
}
 8014dc0:	bf00      	nop
 8014dc2:	3718      	adds	r7, #24
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	2000f164 	.word	0x2000f164
 8014dcc:	08014d6d 	.word	0x08014d6d

08014dd0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	607b      	str	r3, [r7, #4]
 8014dda:	e00e      	b.n	8014dfa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8014e0c <sys_timeouts_init+0x3c>)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	00db      	lsls	r3, r3, #3
 8014de8:	4a08      	ldr	r2, [pc, #32]	@ (8014e0c <sys_timeouts_init+0x3c>)
 8014dea:	4413      	add	r3, r2
 8014dec:	461a      	mov	r2, r3
 8014dee:	4908      	ldr	r1, [pc, #32]	@ (8014e10 <sys_timeouts_init+0x40>)
 8014df0:	f000 f810 	bl	8014e14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	3301      	adds	r3, #1
 8014df8:	607b      	str	r3, [r7, #4]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2b02      	cmp	r3, #2
 8014dfe:	d9ed      	bls.n	8014ddc <sys_timeouts_init+0xc>
  }
}
 8014e00:	bf00      	nop
 8014e02:	bf00      	nop
 8014e04:	3708      	adds	r7, #8
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}
 8014e0a:	bf00      	nop
 8014e0c:	0801ddd8 	.word	0x0801ddd8
 8014e10:	08014d6d 	.word	0x08014d6d

08014e14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b086      	sub	sp, #24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014e26:	d306      	bcc.n	8014e36 <sys_timeout+0x22>
 8014e28:	4b0a      	ldr	r3, [pc, #40]	@ (8014e54 <sys_timeout+0x40>)
 8014e2a:	f240 1229 	movw	r2, #297	@ 0x129
 8014e2e:	490a      	ldr	r1, [pc, #40]	@ (8014e58 <sys_timeout+0x44>)
 8014e30:	480a      	ldr	r0, [pc, #40]	@ (8014e5c <sys_timeout+0x48>)
 8014e32:	f003 fb19 	bl	8018468 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014e36:	f7f1 fadd 	bl	80063f4 <sys_now>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	4413      	add	r3, r2
 8014e40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	6978      	ldr	r0, [r7, #20]
 8014e48:	f7ff ff22 	bl	8014c90 <sys_timeout_abs>
#endif
}
 8014e4c:	bf00      	nop
 8014e4e:	3718      	adds	r7, #24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	0801c4e8 	.word	0x0801c4e8
 8014e58:	0801c584 	.word	0x0801c584
 8014e5c:	0801c55c 	.word	0x0801c55c

08014e60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014e66:	f7f1 fac5 	bl	80063f4 <sys_now>
 8014e6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014e6c:	4b17      	ldr	r3, [pc, #92]	@ (8014ecc <sys_check_timeouts+0x6c>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d022      	beq.n	8014ebe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	68fa      	ldr	r2, [r7, #12]
 8014e7e:	1ad3      	subs	r3, r2, r3
 8014e80:	0fdb      	lsrs	r3, r3, #31
 8014e82:	f003 0301 	and.w	r3, r3, #1
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d11a      	bne.n	8014ec2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	4a0e      	ldr	r2, [pc, #56]	@ (8014ecc <sys_check_timeouts+0x6c>)
 8014e92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	689b      	ldr	r3, [r3, #8]
 8014e98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	685b      	ldr	r3, [r3, #4]
 8014ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8014ed0 <sys_check_timeouts+0x70>)
 8014ea6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ea8:	68b9      	ldr	r1, [r7, #8]
 8014eaa:	200a      	movs	r0, #10
 8014eac:	f7f8 fcd0 	bl	800d850 <memp_free>
    if (handler != NULL) {
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d0da      	beq.n	8014e6c <sys_check_timeouts+0xc>
      handler(arg);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6838      	ldr	r0, [r7, #0]
 8014eba:	4798      	blx	r3
  do {
 8014ebc:	e7d6      	b.n	8014e6c <sys_check_timeouts+0xc>
      return;
 8014ebe:	bf00      	nop
 8014ec0:	e000      	b.n	8014ec4 <sys_check_timeouts+0x64>
      return;
 8014ec2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	2000f160 	.word	0x2000f160
 8014ed0:	2000f164 	.word	0x2000f164

08014ed4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014eda:	4b16      	ldr	r3, [pc, #88]	@ (8014f34 <sys_timeouts_sleeptime+0x60>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d102      	bne.n	8014ee8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ee6:	e020      	b.n	8014f2a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014ee8:	f7f1 fa84 	bl	80063f4 <sys_now>
 8014eec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014eee:	4b11      	ldr	r3, [pc, #68]	@ (8014f34 <sys_timeouts_sleeptime+0x60>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	1ad3      	subs	r3, r2, r3
 8014ef8:	0fdb      	lsrs	r3, r3, #31
 8014efa:	f003 0301 	and.w	r3, r3, #1
 8014efe:	b2db      	uxtb	r3, r3
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d001      	beq.n	8014f08 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014f04:	2300      	movs	r3, #0
 8014f06:	e010      	b.n	8014f2a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014f08:	4b0a      	ldr	r3, [pc, #40]	@ (8014f34 <sys_timeouts_sleeptime+0x60>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	685a      	ldr	r2, [r3, #4]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	da06      	bge.n	8014f28 <sys_timeouts_sleeptime+0x54>
 8014f1a:	4b07      	ldr	r3, [pc, #28]	@ (8014f38 <sys_timeouts_sleeptime+0x64>)
 8014f1c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014f20:	4906      	ldr	r1, [pc, #24]	@ (8014f3c <sys_timeouts_sleeptime+0x68>)
 8014f22:	4807      	ldr	r0, [pc, #28]	@ (8014f40 <sys_timeouts_sleeptime+0x6c>)
 8014f24:	f003 faa0 	bl	8018468 <iprintf>
    return ret;
 8014f28:	683b      	ldr	r3, [r7, #0]
  }
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	2000f160 	.word	0x2000f160
 8014f38:	0801c4e8 	.word	0x0801c4e8
 8014f3c:	0801c5bc 	.word	0x0801c5bc
 8014f40:	0801c55c 	.word	0x0801c55c

08014f44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014f48:	f003 f98e 	bl	8018268 <rand>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014f54:	b29b      	uxth	r3, r3
 8014f56:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	4b01      	ldr	r3, [pc, #4]	@ (8014f64 <udp_init+0x20>)
 8014f5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	2000002c 	.word	0x2000002c

08014f68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014f68:	b480      	push	{r7}
 8014f6a:	b083      	sub	sp, #12
 8014f6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014f72:	4b17      	ldr	r3, [pc, #92]	@ (8014fd0 <udp_new_port+0x68>)
 8014f74:	881b      	ldrh	r3, [r3, #0]
 8014f76:	1c5a      	adds	r2, r3, #1
 8014f78:	b291      	uxth	r1, r2
 8014f7a:	4a15      	ldr	r2, [pc, #84]	@ (8014fd0 <udp_new_port+0x68>)
 8014f7c:	8011      	strh	r1, [r2, #0]
 8014f7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d103      	bne.n	8014f8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014f86:	4b12      	ldr	r3, [pc, #72]	@ (8014fd0 <udp_new_port+0x68>)
 8014f88:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014f8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f8e:	4b11      	ldr	r3, [pc, #68]	@ (8014fd4 <udp_new_port+0x6c>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	603b      	str	r3, [r7, #0]
 8014f94:	e011      	b.n	8014fba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	8a5a      	ldrh	r2, [r3, #18]
 8014f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8014fd0 <udp_new_port+0x68>)
 8014f9c:	881b      	ldrh	r3, [r3, #0]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d108      	bne.n	8014fb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014fa2:	88fb      	ldrh	r3, [r7, #6]
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	80fb      	strh	r3, [r7, #6]
 8014fa8:	88fb      	ldrh	r3, [r7, #6]
 8014faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014fae:	d3e0      	bcc.n	8014f72 <udp_new_port+0xa>
        return 0;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	e007      	b.n	8014fc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	603b      	str	r3, [r7, #0]
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d1ea      	bne.n	8014f96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014fc0:	4b03      	ldr	r3, [pc, #12]	@ (8014fd0 <udp_new_port+0x68>)
 8014fc2:	881b      	ldrh	r3, [r3, #0]
}
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	370c      	adds	r7, #12
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fce:	4770      	bx	lr
 8014fd0:	2000002c 	.word	0x2000002c
 8014fd4:	2000f16c 	.word	0x2000f16c

08014fd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b084      	sub	sp, #16
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d105      	bne.n	8014ff8 <udp_input_local_match+0x20>
 8014fec:	4b27      	ldr	r3, [pc, #156]	@ (801508c <udp_input_local_match+0xb4>)
 8014fee:	2287      	movs	r2, #135	@ 0x87
 8014ff0:	4927      	ldr	r1, [pc, #156]	@ (8015090 <udp_input_local_match+0xb8>)
 8014ff2:	4828      	ldr	r0, [pc, #160]	@ (8015094 <udp_input_local_match+0xbc>)
 8014ff4:	f003 fa38 	bl	8018468 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d105      	bne.n	801500a <udp_input_local_match+0x32>
 8014ffe:	4b23      	ldr	r3, [pc, #140]	@ (801508c <udp_input_local_match+0xb4>)
 8015000:	2288      	movs	r2, #136	@ 0x88
 8015002:	4925      	ldr	r1, [pc, #148]	@ (8015098 <udp_input_local_match+0xc0>)
 8015004:	4823      	ldr	r0, [pc, #140]	@ (8015094 <udp_input_local_match+0xbc>)
 8015006:	f003 fa2f 	bl	8018468 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	7a1b      	ldrb	r3, [r3, #8]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00b      	beq.n	801502a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	7a1a      	ldrb	r2, [r3, #8]
 8015016:	4b21      	ldr	r3, [pc, #132]	@ (801509c <udp_input_local_match+0xc4>)
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801501e:	3301      	adds	r3, #1
 8015020:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015022:	429a      	cmp	r2, r3
 8015024:	d001      	beq.n	801502a <udp_input_local_match+0x52>
    return 0;
 8015026:	2300      	movs	r3, #0
 8015028:	e02b      	b.n	8015082 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801502a:	79fb      	ldrb	r3, [r7, #7]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d018      	beq.n	8015062 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d013      	beq.n	801505e <udp_input_local_match+0x86>
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d00f      	beq.n	801505e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801503e:	4b17      	ldr	r3, [pc, #92]	@ (801509c <udp_input_local_match+0xc4>)
 8015040:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015046:	d00a      	beq.n	801505e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	4b13      	ldr	r3, [pc, #76]	@ (801509c <udp_input_local_match+0xc4>)
 801504e:	695b      	ldr	r3, [r3, #20]
 8015050:	405a      	eors	r2, r3
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	3308      	adds	r3, #8
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801505a:	2b00      	cmp	r3, #0
 801505c:	d110      	bne.n	8015080 <udp_input_local_match+0xa8>
          return 1;
 801505e:	2301      	movs	r3, #1
 8015060:	e00f      	b.n	8015082 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d009      	beq.n	801507c <udp_input_local_match+0xa4>
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d005      	beq.n	801507c <udp_input_local_match+0xa4>
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	681a      	ldr	r2, [r3, #0]
 8015074:	4b09      	ldr	r3, [pc, #36]	@ (801509c <udp_input_local_match+0xc4>)
 8015076:	695b      	ldr	r3, [r3, #20]
 8015078:	429a      	cmp	r2, r3
 801507a:	d101      	bne.n	8015080 <udp_input_local_match+0xa8>
        return 1;
 801507c:	2301      	movs	r3, #1
 801507e:	e000      	b.n	8015082 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	3710      	adds	r7, #16
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	0801c5d0 	.word	0x0801c5d0
 8015090:	0801c600 	.word	0x0801c600
 8015094:	0801c624 	.word	0x0801c624
 8015098:	0801c64c 	.word	0x0801c64c
 801509c:	2000b9bc 	.word	0x2000b9bc

080150a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80150a0:	b590      	push	{r4, r7, lr}
 80150a2:	b08d      	sub	sp, #52	@ 0x34
 80150a4:	af02      	add	r7, sp, #8
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80150aa:	2300      	movs	r3, #0
 80150ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d105      	bne.n	80150c0 <udp_input+0x20>
 80150b4:	4b7c      	ldr	r3, [pc, #496]	@ (80152a8 <udp_input+0x208>)
 80150b6:	22cf      	movs	r2, #207	@ 0xcf
 80150b8:	497c      	ldr	r1, [pc, #496]	@ (80152ac <udp_input+0x20c>)
 80150ba:	487d      	ldr	r0, [pc, #500]	@ (80152b0 <udp_input+0x210>)
 80150bc:	f003 f9d4 	bl	8018468 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <udp_input+0x32>
 80150c6:	4b78      	ldr	r3, [pc, #480]	@ (80152a8 <udp_input+0x208>)
 80150c8:	22d0      	movs	r2, #208	@ 0xd0
 80150ca:	497a      	ldr	r1, [pc, #488]	@ (80152b4 <udp_input+0x214>)
 80150cc:	4878      	ldr	r0, [pc, #480]	@ (80152b0 <udp_input+0x210>)
 80150ce:	f003 f9cb 	bl	8018468 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	895b      	ldrh	r3, [r3, #10]
 80150d6:	2b07      	cmp	r3, #7
 80150d8:	d803      	bhi.n	80150e2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80150da:	6878      	ldr	r0, [r7, #4]
 80150dc:	f7f9 fa5c 	bl	800e598 <pbuf_free>
    goto end;
 80150e0:	e0de      	b.n	80152a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80150e8:	4b73      	ldr	r3, [pc, #460]	@ (80152b8 <udp_input+0x218>)
 80150ea:	695b      	ldr	r3, [r3, #20]
 80150ec:	4a72      	ldr	r2, [pc, #456]	@ (80152b8 <udp_input+0x218>)
 80150ee:	6812      	ldr	r2, [r2, #0]
 80150f0:	4611      	mov	r1, r2
 80150f2:	4618      	mov	r0, r3
 80150f4:	f001 ff80 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 80150f8:	4603      	mov	r3, r0
 80150fa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	b29b      	uxth	r3, r3
 8015102:	4618      	mov	r0, r3
 8015104:	f7f7 fe20 	bl	800cd48 <lwip_htons>
 8015108:	4603      	mov	r3, r0
 801510a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	885b      	ldrh	r3, [r3, #2]
 8015110:	b29b      	uxth	r3, r3
 8015112:	4618      	mov	r0, r3
 8015114:	f7f7 fe18 	bl	800cd48 <lwip_htons>
 8015118:	4603      	mov	r3, r0
 801511a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801511c:	2300      	movs	r3, #0
 801511e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8015120:	2300      	movs	r3, #0
 8015122:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015124:	2300      	movs	r3, #0
 8015126:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015128:	4b64      	ldr	r3, [pc, #400]	@ (80152bc <udp_input+0x21c>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	627b      	str	r3, [r7, #36]	@ 0x24
 801512e:	e054      	b.n	80151da <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015132:	8a5b      	ldrh	r3, [r3, #18]
 8015134:	89fa      	ldrh	r2, [r7, #14]
 8015136:	429a      	cmp	r2, r3
 8015138:	d14a      	bne.n	80151d0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801513a:	7cfb      	ldrb	r3, [r7, #19]
 801513c:	461a      	mov	r2, r3
 801513e:	6839      	ldr	r1, [r7, #0]
 8015140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015142:	f7ff ff49 	bl	8014fd8 <udp_input_local_match>
 8015146:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015148:	2b00      	cmp	r3, #0
 801514a:	d041      	beq.n	80151d0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514e:	7c1b      	ldrb	r3, [r3, #16]
 8015150:	f003 0304 	and.w	r3, r3, #4
 8015154:	2b00      	cmp	r3, #0
 8015156:	d11d      	bne.n	8015194 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d102      	bne.n	8015164 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015160:	61fb      	str	r3, [r7, #28]
 8015162:	e017      	b.n	8015194 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015164:	7cfb      	ldrb	r3, [r7, #19]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d014      	beq.n	8015194 <udp_input+0xf4>
 801516a:	4b53      	ldr	r3, [pc, #332]	@ (80152b8 <udp_input+0x218>)
 801516c:	695b      	ldr	r3, [r3, #20]
 801516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015172:	d10f      	bne.n	8015194 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	3304      	adds	r3, #4
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	429a      	cmp	r2, r3
 8015180:	d008      	beq.n	8015194 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015184:	681a      	ldr	r2, [r3, #0]
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	3304      	adds	r3, #4
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	429a      	cmp	r2, r3
 801518e:	d101      	bne.n	8015194 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015192:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015196:	8a9b      	ldrh	r3, [r3, #20]
 8015198:	8a3a      	ldrh	r2, [r7, #16]
 801519a:	429a      	cmp	r2, r3
 801519c:	d118      	bne.n	80151d0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d005      	beq.n	80151b2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80151a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a8:	685a      	ldr	r2, [r3, #4]
 80151aa:	4b43      	ldr	r3, [pc, #268]	@ (80152b8 <udp_input+0x218>)
 80151ac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d10e      	bne.n	80151d0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80151b2:	6a3b      	ldr	r3, [r7, #32]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d014      	beq.n	80151e2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80151b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ba:	68da      	ldr	r2, [r3, #12]
 80151bc:	6a3b      	ldr	r3, [r7, #32]
 80151be:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80151c0:	4b3e      	ldr	r3, [pc, #248]	@ (80152bc <udp_input+0x21c>)
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80151c8:	4a3c      	ldr	r2, [pc, #240]	@ (80152bc <udp_input+0x21c>)
 80151ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151cc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80151ce:	e008      	b.n	80151e2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80151d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80151d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80151da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1a7      	bne.n	8015130 <udp_input+0x90>
 80151e0:	e000      	b.n	80151e4 <udp_input+0x144>
        break;
 80151e2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80151e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d101      	bne.n	80151ee <udp_input+0x14e>
    pcb = uncon_pcb;
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80151ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d002      	beq.n	80151fa <udp_input+0x15a>
    for_us = 1;
 80151f4:	2301      	movs	r3, #1
 80151f6:	76fb      	strb	r3, [r7, #27]
 80151f8:	e00a      	b.n	8015210 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	3304      	adds	r3, #4
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	4b2d      	ldr	r3, [pc, #180]	@ (80152b8 <udp_input+0x218>)
 8015202:	695b      	ldr	r3, [r3, #20]
 8015204:	429a      	cmp	r2, r3
 8015206:	bf0c      	ite	eq
 8015208:	2301      	moveq	r3, #1
 801520a:	2300      	movne	r3, #0
 801520c:	b2db      	uxtb	r3, r3
 801520e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015210:	7efb      	ldrb	r3, [r7, #27]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d041      	beq.n	801529a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015216:	2108      	movs	r1, #8
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7f9 f937 	bl	800e48c <pbuf_remove_header>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d00a      	beq.n	801523a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015224:	4b20      	ldr	r3, [pc, #128]	@ (80152a8 <udp_input+0x208>)
 8015226:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801522a:	4925      	ldr	r1, [pc, #148]	@ (80152c0 <udp_input+0x220>)
 801522c:	4820      	ldr	r0, [pc, #128]	@ (80152b0 <udp_input+0x210>)
 801522e:	f003 f91b 	bl	8018468 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f7f9 f9b0 	bl	800e598 <pbuf_free>
      goto end;
 8015238:	e032      	b.n	80152a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523c:	2b00      	cmp	r3, #0
 801523e:	d012      	beq.n	8015266 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015242:	699b      	ldr	r3, [r3, #24]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d00a      	beq.n	801525e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801524a:	699c      	ldr	r4, [r3, #24]
 801524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801524e:	69d8      	ldr	r0, [r3, #28]
 8015250:	8a3b      	ldrh	r3, [r7, #16]
 8015252:	9300      	str	r3, [sp, #0]
 8015254:	4b1b      	ldr	r3, [pc, #108]	@ (80152c4 <udp_input+0x224>)
 8015256:	687a      	ldr	r2, [r7, #4]
 8015258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801525a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801525c:	e021      	b.n	80152a2 <udp_input+0x202>
        pbuf_free(p);
 801525e:	6878      	ldr	r0, [r7, #4]
 8015260:	f7f9 f99a 	bl	800e598 <pbuf_free>
        goto end;
 8015264:	e01c      	b.n	80152a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015266:	7cfb      	ldrb	r3, [r7, #19]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d112      	bne.n	8015292 <udp_input+0x1f2>
 801526c:	4b12      	ldr	r3, [pc, #72]	@ (80152b8 <udp_input+0x218>)
 801526e:	695b      	ldr	r3, [r3, #20]
 8015270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015274:	2be0      	cmp	r3, #224	@ 0xe0
 8015276:	d00c      	beq.n	8015292 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015278:	4b0f      	ldr	r3, [pc, #60]	@ (80152b8 <udp_input+0x218>)
 801527a:	899b      	ldrh	r3, [r3, #12]
 801527c:	3308      	adds	r3, #8
 801527e:	b29b      	uxth	r3, r3
 8015280:	b21b      	sxth	r3, r3
 8015282:	4619      	mov	r1, r3
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7f9 f974 	bl	800e572 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801528a:	2103      	movs	r1, #3
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f001 fb93 	bl	80169b8 <icmp_dest_unreach>
      pbuf_free(p);
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f7f9 f980 	bl	800e598 <pbuf_free>
  return;
 8015298:	e003      	b.n	80152a2 <udp_input+0x202>
    pbuf_free(p);
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f7f9 f97c 	bl	800e598 <pbuf_free>
  return;
 80152a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80152a2:	372c      	adds	r7, #44	@ 0x2c
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd90      	pop	{r4, r7, pc}
 80152a8:	0801c5d0 	.word	0x0801c5d0
 80152ac:	0801c674 	.word	0x0801c674
 80152b0:	0801c624 	.word	0x0801c624
 80152b4:	0801c68c 	.word	0x0801c68c
 80152b8:	2000b9bc 	.word	0x2000b9bc
 80152bc:	2000f16c 	.word	0x2000f16c
 80152c0:	0801c6a8 	.word	0x0801c6a8
 80152c4:	2000b9cc 	.word	0x2000b9cc

080152c8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d109      	bne.n	80152ec <udp_send+0x24>
 80152d8:	4b11      	ldr	r3, [pc, #68]	@ (8015320 <udp_send+0x58>)
 80152da:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80152de:	4911      	ldr	r1, [pc, #68]	@ (8015324 <udp_send+0x5c>)
 80152e0:	4811      	ldr	r0, [pc, #68]	@ (8015328 <udp_send+0x60>)
 80152e2:	f003 f8c1 	bl	8018468 <iprintf>
 80152e6:	f06f 030f 	mvn.w	r3, #15
 80152ea:	e015      	b.n	8015318 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d109      	bne.n	8015306 <udp_send+0x3e>
 80152f2:	4b0b      	ldr	r3, [pc, #44]	@ (8015320 <udp_send+0x58>)
 80152f4:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80152f8:	490c      	ldr	r1, [pc, #48]	@ (801532c <udp_send+0x64>)
 80152fa:	480b      	ldr	r0, [pc, #44]	@ (8015328 <udp_send+0x60>)
 80152fc:	f003 f8b4 	bl	8018468 <iprintf>
 8015300:	f06f 030f 	mvn.w	r3, #15
 8015304:	e008      	b.n	8015318 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	1d1a      	adds	r2, r3, #4
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8a9b      	ldrh	r3, [r3, #20]
 801530e:	6839      	ldr	r1, [r7, #0]
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f000 f80d 	bl	8015330 <udp_sendto>
 8015316:	4603      	mov	r3, r0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	0801c5d0 	.word	0x0801c5d0
 8015324:	0801c6c4 	.word	0x0801c6c4
 8015328:	0801c624 	.word	0x0801c624
 801532c:	0801c6dc 	.word	0x0801c6dc

08015330 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b088      	sub	sp, #32
 8015334:	af02      	add	r7, sp, #8
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
 801533c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d109      	bne.n	8015358 <udp_sendto+0x28>
 8015344:	4b23      	ldr	r3, [pc, #140]	@ (80153d4 <udp_sendto+0xa4>)
 8015346:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801534a:	4923      	ldr	r1, [pc, #140]	@ (80153d8 <udp_sendto+0xa8>)
 801534c:	4823      	ldr	r0, [pc, #140]	@ (80153dc <udp_sendto+0xac>)
 801534e:	f003 f88b 	bl	8018468 <iprintf>
 8015352:	f06f 030f 	mvn.w	r3, #15
 8015356:	e038      	b.n	80153ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d109      	bne.n	8015372 <udp_sendto+0x42>
 801535e:	4b1d      	ldr	r3, [pc, #116]	@ (80153d4 <udp_sendto+0xa4>)
 8015360:	f240 2219 	movw	r2, #537	@ 0x219
 8015364:	491e      	ldr	r1, [pc, #120]	@ (80153e0 <udp_sendto+0xb0>)
 8015366:	481d      	ldr	r0, [pc, #116]	@ (80153dc <udp_sendto+0xac>)
 8015368:	f003 f87e 	bl	8018468 <iprintf>
 801536c:	f06f 030f 	mvn.w	r3, #15
 8015370:	e02b      	b.n	80153ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d109      	bne.n	801538c <udp_sendto+0x5c>
 8015378:	4b16      	ldr	r3, [pc, #88]	@ (80153d4 <udp_sendto+0xa4>)
 801537a:	f240 221a 	movw	r2, #538	@ 0x21a
 801537e:	4919      	ldr	r1, [pc, #100]	@ (80153e4 <udp_sendto+0xb4>)
 8015380:	4816      	ldr	r0, [pc, #88]	@ (80153dc <udp_sendto+0xac>)
 8015382:	f003 f871 	bl	8018468 <iprintf>
 8015386:	f06f 030f 	mvn.w	r3, #15
 801538a:	e01e      	b.n	80153ca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	7a1b      	ldrb	r3, [r3, #8]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d006      	beq.n	80153a2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	7a1b      	ldrb	r3, [r3, #8]
 8015398:	4618      	mov	r0, r3
 801539a:	f7f8 fd6f 	bl	800de7c <netif_get_by_index>
 801539e:	6178      	str	r0, [r7, #20]
 80153a0:	e003      	b.n	80153aa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f001 fb92 	bl	8016acc <ip4_route>
 80153a8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d102      	bne.n	80153b6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80153b0:	f06f 0303 	mvn.w	r3, #3
 80153b4:	e009      	b.n	80153ca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80153b6:	887a      	ldrh	r2, [r7, #2]
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	4613      	mov	r3, r2
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	68b9      	ldr	r1, [r7, #8]
 80153c2:	68f8      	ldr	r0, [r7, #12]
 80153c4:	f000 f810 	bl	80153e8 <udp_sendto_if>
 80153c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3718      	adds	r7, #24
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	0801c5d0 	.word	0x0801c5d0
 80153d8:	0801c6f4 	.word	0x0801c6f4
 80153dc:	0801c624 	.word	0x0801c624
 80153e0:	0801c70c 	.word	0x0801c70c
 80153e4:	0801c728 	.word	0x0801c728

080153e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b088      	sub	sp, #32
 80153ec:	af02      	add	r7, sp, #8
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
 80153f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d109      	bne.n	8015410 <udp_sendto_if+0x28>
 80153fc:	4b2e      	ldr	r3, [pc, #184]	@ (80154b8 <udp_sendto_if+0xd0>)
 80153fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015402:	492e      	ldr	r1, [pc, #184]	@ (80154bc <udp_sendto_if+0xd4>)
 8015404:	482e      	ldr	r0, [pc, #184]	@ (80154c0 <udp_sendto_if+0xd8>)
 8015406:	f003 f82f 	bl	8018468 <iprintf>
 801540a:	f06f 030f 	mvn.w	r3, #15
 801540e:	e04f      	b.n	80154b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d109      	bne.n	801542a <udp_sendto_if+0x42>
 8015416:	4b28      	ldr	r3, [pc, #160]	@ (80154b8 <udp_sendto_if+0xd0>)
 8015418:	f240 2281 	movw	r2, #641	@ 0x281
 801541c:	4929      	ldr	r1, [pc, #164]	@ (80154c4 <udp_sendto_if+0xdc>)
 801541e:	4828      	ldr	r0, [pc, #160]	@ (80154c0 <udp_sendto_if+0xd8>)
 8015420:	f003 f822 	bl	8018468 <iprintf>
 8015424:	f06f 030f 	mvn.w	r3, #15
 8015428:	e042      	b.n	80154b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d109      	bne.n	8015444 <udp_sendto_if+0x5c>
 8015430:	4b21      	ldr	r3, [pc, #132]	@ (80154b8 <udp_sendto_if+0xd0>)
 8015432:	f240 2282 	movw	r2, #642	@ 0x282
 8015436:	4924      	ldr	r1, [pc, #144]	@ (80154c8 <udp_sendto_if+0xe0>)
 8015438:	4821      	ldr	r0, [pc, #132]	@ (80154c0 <udp_sendto_if+0xd8>)
 801543a:	f003 f815 	bl	8018468 <iprintf>
 801543e:	f06f 030f 	mvn.w	r3, #15
 8015442:	e035      	b.n	80154b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d109      	bne.n	801545e <udp_sendto_if+0x76>
 801544a:	4b1b      	ldr	r3, [pc, #108]	@ (80154b8 <udp_sendto_if+0xd0>)
 801544c:	f240 2283 	movw	r2, #643	@ 0x283
 8015450:	491e      	ldr	r1, [pc, #120]	@ (80154cc <udp_sendto_if+0xe4>)
 8015452:	481b      	ldr	r0, [pc, #108]	@ (80154c0 <udp_sendto_if+0xd8>)
 8015454:	f003 f808 	bl	8018468 <iprintf>
 8015458:	f06f 030f 	mvn.w	r3, #15
 801545c:	e028      	b.n	80154b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d009      	beq.n	8015478 <udp_sendto_if+0x90>
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d005      	beq.n	8015478 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015474:	2be0      	cmp	r3, #224	@ 0xe0
 8015476:	d103      	bne.n	8015480 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015478:	6a3b      	ldr	r3, [r7, #32]
 801547a:	3304      	adds	r3, #4
 801547c:	617b      	str	r3, [r7, #20]
 801547e:	e00b      	b.n	8015498 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	6a3b      	ldr	r3, [r7, #32]
 8015486:	3304      	adds	r3, #4
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	429a      	cmp	r2, r3
 801548c:	d002      	beq.n	8015494 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801548e:	f06f 0303 	mvn.w	r3, #3
 8015492:	e00d      	b.n	80154b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015498:	887a      	ldrh	r2, [r7, #2]
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	9301      	str	r3, [sp, #4]
 801549e:	6a3b      	ldr	r3, [r7, #32]
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	4613      	mov	r3, r2
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	68b9      	ldr	r1, [r7, #8]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f000 f811 	bl	80154d0 <udp_sendto_if_src>
 80154ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154b0:	4618      	mov	r0, r3
 80154b2:	3718      	adds	r7, #24
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	0801c5d0 	.word	0x0801c5d0
 80154bc:	0801c744 	.word	0x0801c744
 80154c0:	0801c624 	.word	0x0801c624
 80154c4:	0801c760 	.word	0x0801c760
 80154c8:	0801c77c 	.word	0x0801c77c
 80154cc:	0801c79c 	.word	0x0801c79c

080154d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b08c      	sub	sp, #48	@ 0x30
 80154d4:	af04      	add	r7, sp, #16
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
 80154dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d109      	bne.n	80154f8 <udp_sendto_if_src+0x28>
 80154e4:	4b65      	ldr	r3, [pc, #404]	@ (801567c <udp_sendto_if_src+0x1ac>)
 80154e6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80154ea:	4965      	ldr	r1, [pc, #404]	@ (8015680 <udp_sendto_if_src+0x1b0>)
 80154ec:	4865      	ldr	r0, [pc, #404]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 80154ee:	f002 ffbb 	bl	8018468 <iprintf>
 80154f2:	f06f 030f 	mvn.w	r3, #15
 80154f6:	e0bc      	b.n	8015672 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <udp_sendto_if_src+0x42>
 80154fe:	4b5f      	ldr	r3, [pc, #380]	@ (801567c <udp_sendto_if_src+0x1ac>)
 8015500:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015504:	4960      	ldr	r1, [pc, #384]	@ (8015688 <udp_sendto_if_src+0x1b8>)
 8015506:	485f      	ldr	r0, [pc, #380]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 8015508:	f002 ffae 	bl	8018468 <iprintf>
 801550c:	f06f 030f 	mvn.w	r3, #15
 8015510:	e0af      	b.n	8015672 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d109      	bne.n	801552c <udp_sendto_if_src+0x5c>
 8015518:	4b58      	ldr	r3, [pc, #352]	@ (801567c <udp_sendto_if_src+0x1ac>)
 801551a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801551e:	495b      	ldr	r1, [pc, #364]	@ (801568c <udp_sendto_if_src+0x1bc>)
 8015520:	4858      	ldr	r0, [pc, #352]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 8015522:	f002 ffa1 	bl	8018468 <iprintf>
 8015526:	f06f 030f 	mvn.w	r3, #15
 801552a:	e0a2      	b.n	8015672 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801552c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552e:	2b00      	cmp	r3, #0
 8015530:	d109      	bne.n	8015546 <udp_sendto_if_src+0x76>
 8015532:	4b52      	ldr	r3, [pc, #328]	@ (801567c <udp_sendto_if_src+0x1ac>)
 8015534:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015538:	4955      	ldr	r1, [pc, #340]	@ (8015690 <udp_sendto_if_src+0x1c0>)
 801553a:	4852      	ldr	r0, [pc, #328]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 801553c:	f002 ff94 	bl	8018468 <iprintf>
 8015540:	f06f 030f 	mvn.w	r3, #15
 8015544:	e095      	b.n	8015672 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015548:	2b00      	cmp	r3, #0
 801554a:	d109      	bne.n	8015560 <udp_sendto_if_src+0x90>
 801554c:	4b4b      	ldr	r3, [pc, #300]	@ (801567c <udp_sendto_if_src+0x1ac>)
 801554e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015552:	4950      	ldr	r1, [pc, #320]	@ (8015694 <udp_sendto_if_src+0x1c4>)
 8015554:	484b      	ldr	r0, [pc, #300]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 8015556:	f002 ff87 	bl	8018468 <iprintf>
 801555a:	f06f 030f 	mvn.w	r3, #15
 801555e:	e088      	b.n	8015672 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	8a5b      	ldrh	r3, [r3, #18]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d10f      	bne.n	8015588 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015568:	68f9      	ldr	r1, [r7, #12]
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	8a5b      	ldrh	r3, [r3, #18]
 801556e:	461a      	mov	r2, r3
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	f000 f893 	bl	801569c <udp_bind>
 8015576:	4603      	mov	r3, r0
 8015578:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801557a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d002      	beq.n	8015588 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015582:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015586:	e074      	b.n	8015672 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	891b      	ldrh	r3, [r3, #8]
 801558c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015590:	4293      	cmp	r3, r2
 8015592:	d902      	bls.n	801559a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015594:	f04f 33ff 	mov.w	r3, #4294967295
 8015598:	e06b      	b.n	8015672 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801559a:	2108      	movs	r1, #8
 801559c:	68b8      	ldr	r0, [r7, #8]
 801559e:	f7f8 ff65 	bl	800e46c <pbuf_add_header>
 80155a2:	4603      	mov	r3, r0
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d015      	beq.n	80155d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80155a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80155ac:	2108      	movs	r1, #8
 80155ae:	2022      	movs	r0, #34	@ 0x22
 80155b0:	f7f8 fd0e 	bl	800dfd0 <pbuf_alloc>
 80155b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80155b6:	69fb      	ldr	r3, [r7, #28]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d102      	bne.n	80155c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80155bc:	f04f 33ff 	mov.w	r3, #4294967295
 80155c0:	e057      	b.n	8015672 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	891b      	ldrh	r3, [r3, #8]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d006      	beq.n	80155d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80155ca:	68b9      	ldr	r1, [r7, #8]
 80155cc:	69f8      	ldr	r0, [r7, #28]
 80155ce:	f7f9 f907 	bl	800e7e0 <pbuf_chain>
 80155d2:	e001      	b.n	80155d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	895b      	ldrh	r3, [r3, #10]
 80155dc:	2b07      	cmp	r3, #7
 80155de:	d806      	bhi.n	80155ee <udp_sendto_if_src+0x11e>
 80155e0:	4b26      	ldr	r3, [pc, #152]	@ (801567c <udp_sendto_if_src+0x1ac>)
 80155e2:	f240 320d 	movw	r2, #781	@ 0x30d
 80155e6:	492c      	ldr	r1, [pc, #176]	@ (8015698 <udp_sendto_if_src+0x1c8>)
 80155e8:	4826      	ldr	r0, [pc, #152]	@ (8015684 <udp_sendto_if_src+0x1b4>)
 80155ea:	f002 ff3d 	bl	8018468 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	685b      	ldr	r3, [r3, #4]
 80155f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	8a5b      	ldrh	r3, [r3, #18]
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7f7 fba5 	bl	800cd48 <lwip_htons>
 80155fe:	4603      	mov	r3, r0
 8015600:	461a      	mov	r2, r3
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015606:	887b      	ldrh	r3, [r7, #2]
 8015608:	4618      	mov	r0, r3
 801560a:	f7f7 fb9d 	bl	800cd48 <lwip_htons>
 801560e:	4603      	mov	r3, r0
 8015610:	461a      	mov	r2, r3
 8015612:	697b      	ldr	r3, [r7, #20]
 8015614:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	2200      	movs	r2, #0
 801561a:	719a      	strb	r2, [r3, #6]
 801561c:	2200      	movs	r2, #0
 801561e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	891b      	ldrh	r3, [r3, #8]
 8015624:	4618      	mov	r0, r3
 8015626:	f7f7 fb8f 	bl	800cd48 <lwip_htons>
 801562a:	4603      	mov	r3, r0
 801562c:	461a      	mov	r2, r3
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015632:	2311      	movs	r3, #17
 8015634:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	7adb      	ldrb	r3, [r3, #11]
 801563a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	7a9b      	ldrb	r3, [r3, #10]
 8015640:	7cb9      	ldrb	r1, [r7, #18]
 8015642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015644:	9202      	str	r2, [sp, #8]
 8015646:	7cfa      	ldrb	r2, [r7, #19]
 8015648:	9201      	str	r2, [sp, #4]
 801564a:	9300      	str	r3, [sp, #0]
 801564c:	460b      	mov	r3, r1
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015652:	69f8      	ldr	r0, [r7, #28]
 8015654:	f001 fc22 	bl	8016e9c <ip4_output_if_src>
 8015658:	4603      	mov	r3, r0
 801565a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801565c:	69fa      	ldr	r2, [r7, #28]
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	429a      	cmp	r2, r3
 8015662:	d004      	beq.n	801566e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015664:	69f8      	ldr	r0, [r7, #28]
 8015666:	f7f8 ff97 	bl	800e598 <pbuf_free>
    q = NULL;
 801566a:	2300      	movs	r3, #0
 801566c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801566e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015672:	4618      	mov	r0, r3
 8015674:	3720      	adds	r7, #32
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
 801567a:	bf00      	nop
 801567c:	0801c5d0 	.word	0x0801c5d0
 8015680:	0801c7bc 	.word	0x0801c7bc
 8015684:	0801c624 	.word	0x0801c624
 8015688:	0801c7dc 	.word	0x0801c7dc
 801568c:	0801c7fc 	.word	0x0801c7fc
 8015690:	0801c820 	.word	0x0801c820
 8015694:	0801c844 	.word	0x0801c844
 8015698:	0801c868 	.word	0x0801c868

0801569c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b086      	sub	sp, #24
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	60f8      	str	r0, [r7, #12]
 80156a4:	60b9      	str	r1, [r7, #8]
 80156a6:	4613      	mov	r3, r2
 80156a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d101      	bne.n	80156b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80156b0:	4b39      	ldr	r3, [pc, #228]	@ (8015798 <udp_bind+0xfc>)
 80156b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d109      	bne.n	80156ce <udp_bind+0x32>
 80156ba:	4b38      	ldr	r3, [pc, #224]	@ (801579c <udp_bind+0x100>)
 80156bc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80156c0:	4937      	ldr	r1, [pc, #220]	@ (80157a0 <udp_bind+0x104>)
 80156c2:	4838      	ldr	r0, [pc, #224]	@ (80157a4 <udp_bind+0x108>)
 80156c4:	f002 fed0 	bl	8018468 <iprintf>
 80156c8:	f06f 030f 	mvn.w	r3, #15
 80156cc:	e060      	b.n	8015790 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80156ce:	2300      	movs	r3, #0
 80156d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156d2:	4b35      	ldr	r3, [pc, #212]	@ (80157a8 <udp_bind+0x10c>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	617b      	str	r3, [r7, #20]
 80156d8:	e009      	b.n	80156ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80156da:	68fa      	ldr	r2, [r7, #12]
 80156dc:	697b      	ldr	r3, [r7, #20]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d102      	bne.n	80156e8 <udp_bind+0x4c>
      rebind = 1;
 80156e2:	2301      	movs	r3, #1
 80156e4:	74fb      	strb	r3, [r7, #19]
      break;
 80156e6:	e005      	b.n	80156f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	617b      	str	r3, [r7, #20]
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d1f2      	bne.n	80156da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80156f4:	88fb      	ldrh	r3, [r7, #6]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d109      	bne.n	801570e <udp_bind+0x72>
    port = udp_new_port();
 80156fa:	f7ff fc35 	bl	8014f68 <udp_new_port>
 80156fe:	4603      	mov	r3, r0
 8015700:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015702:	88fb      	ldrh	r3, [r7, #6]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d12c      	bne.n	8015762 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015708:	f06f 0307 	mvn.w	r3, #7
 801570c:	e040      	b.n	8015790 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801570e:	4b26      	ldr	r3, [pc, #152]	@ (80157a8 <udp_bind+0x10c>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	617b      	str	r3, [r7, #20]
 8015714:	e022      	b.n	801575c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015716:	68fa      	ldr	r2, [r7, #12]
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	429a      	cmp	r2, r3
 801571c:	d01b      	beq.n	8015756 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	8a5b      	ldrh	r3, [r3, #18]
 8015722:	88fa      	ldrh	r2, [r7, #6]
 8015724:	429a      	cmp	r2, r3
 8015726:	d116      	bne.n	8015756 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015730:	429a      	cmp	r2, r3
 8015732:	d00d      	beq.n	8015750 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d00a      	beq.n	8015750 <udp_bind+0xb4>
 801573a:	68bb      	ldr	r3, [r7, #8]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d006      	beq.n	8015750 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015742:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015744:	2b00      	cmp	r3, #0
 8015746:	d003      	beq.n	8015750 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d102      	bne.n	8015756 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015750:	f06f 0307 	mvn.w	r3, #7
 8015754:	e01c      	b.n	8015790 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	68db      	ldr	r3, [r3, #12]
 801575a:	617b      	str	r3, [r7, #20]
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d1d9      	bne.n	8015716 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d002      	beq.n	801576e <udp_bind+0xd2>
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	e000      	b.n	8015770 <udp_bind+0xd4>
 801576e:	2300      	movs	r3, #0
 8015770:	68fa      	ldr	r2, [r7, #12]
 8015772:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	88fa      	ldrh	r2, [r7, #6]
 8015778:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801577a:	7cfb      	ldrb	r3, [r7, #19]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d106      	bne.n	801578e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015780:	4b09      	ldr	r3, [pc, #36]	@ (80157a8 <udp_bind+0x10c>)
 8015782:	681a      	ldr	r2, [r3, #0]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015788:	4a07      	ldr	r2, [pc, #28]	@ (80157a8 <udp_bind+0x10c>)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801578e:	2300      	movs	r3, #0
}
 8015790:	4618      	mov	r0, r3
 8015792:	3718      	adds	r7, #24
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}
 8015798:	0801ddf0 	.word	0x0801ddf0
 801579c:	0801c5d0 	.word	0x0801c5d0
 80157a0:	0801c898 	.word	0x0801c898
 80157a4:	0801c624 	.word	0x0801c624
 80157a8:	2000f16c 	.word	0x2000f16c

080157ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d107      	bne.n	80157ce <udp_recv+0x22>
 80157be:	4b08      	ldr	r3, [pc, #32]	@ (80157e0 <udp_recv+0x34>)
 80157c0:	f240 428a 	movw	r2, #1162	@ 0x48a
 80157c4:	4907      	ldr	r1, [pc, #28]	@ (80157e4 <udp_recv+0x38>)
 80157c6:	4808      	ldr	r0, [pc, #32]	@ (80157e8 <udp_recv+0x3c>)
 80157c8:	f002 fe4e 	bl	8018468 <iprintf>
 80157cc:	e005      	b.n	80157da <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	61da      	str	r2, [r3, #28]
}
 80157da:	3710      	adds	r7, #16
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}
 80157e0:	0801c5d0 	.word	0x0801c5d0
 80157e4:	0801c904 	.word	0x0801c904
 80157e8:	0801c624 	.word	0x0801c624

080157ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d107      	bne.n	801580a <udp_remove+0x1e>
 80157fa:	4b19      	ldr	r3, [pc, #100]	@ (8015860 <udp_remove+0x74>)
 80157fc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8015800:	4918      	ldr	r1, [pc, #96]	@ (8015864 <udp_remove+0x78>)
 8015802:	4819      	ldr	r0, [pc, #100]	@ (8015868 <udp_remove+0x7c>)
 8015804:	f002 fe30 	bl	8018468 <iprintf>
 8015808:	e026      	b.n	8015858 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801580a:	4b18      	ldr	r3, [pc, #96]	@ (801586c <udp_remove+0x80>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	429a      	cmp	r2, r3
 8015812:	d105      	bne.n	8015820 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015814:	4b15      	ldr	r3, [pc, #84]	@ (801586c <udp_remove+0x80>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	68db      	ldr	r3, [r3, #12]
 801581a:	4a14      	ldr	r2, [pc, #80]	@ (801586c <udp_remove+0x80>)
 801581c:	6013      	str	r3, [r2, #0]
 801581e:	e017      	b.n	8015850 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015820:	4b12      	ldr	r3, [pc, #72]	@ (801586c <udp_remove+0x80>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	60fb      	str	r3, [r7, #12]
 8015826:	e010      	b.n	801584a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d009      	beq.n	8015844 <udp_remove+0x58>
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	429a      	cmp	r2, r3
 8015838:	d104      	bne.n	8015844 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	68da      	ldr	r2, [r3, #12]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	60da      	str	r2, [r3, #12]
        break;
 8015842:	e005      	b.n	8015850 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	68db      	ldr	r3, [r3, #12]
 8015848:	60fb      	str	r3, [r7, #12]
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d1eb      	bne.n	8015828 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	2000      	movs	r0, #0
 8015854:	f7f7 fffc 	bl	800d850 <memp_free>
}
 8015858:	3710      	adds	r7, #16
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	0801c5d0 	.word	0x0801c5d0
 8015864:	0801c91c 	.word	0x0801c91c
 8015868:	0801c624 	.word	0x0801c624
 801586c:	2000f16c 	.word	0x2000f16c

08015870 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015876:	2000      	movs	r0, #0
 8015878:	f7f7 ff74 	bl	800d764 <memp_malloc>
 801587c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d007      	beq.n	8015894 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015884:	2220      	movs	r2, #32
 8015886:	2100      	movs	r1, #0
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	f002 fe8c 	bl	80185a6 <memset>
    pcb->ttl = UDP_TTL;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	22ff      	movs	r2, #255	@ 0xff
 8015892:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015894:	687b      	ldr	r3, [r7, #4]
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b084      	sub	sp, #16
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	4603      	mov	r3, r0
 80158a6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80158a8:	f7ff ffe2 	bl	8015870 <udp_new>
 80158ac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80158ae:	68fb      	ldr	r3, [r7, #12]
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b085      	sub	sp, #20
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d01e      	beq.n	8015906 <udp_netif_ip_addr_changed+0x4e>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d01a      	beq.n	8015906 <udp_netif_ip_addr_changed+0x4e>
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d017      	beq.n	8015906 <udp_netif_ip_addr_changed+0x4e>
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d013      	beq.n	8015906 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80158de:	4b0d      	ldr	r3, [pc, #52]	@ (8015914 <udp_netif_ip_addr_changed+0x5c>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	60fb      	str	r3, [r7, #12]
 80158e4:	e00c      	b.n	8015900 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d103      	bne.n	80158fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	681a      	ldr	r2, [r3, #0]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	68db      	ldr	r3, [r3, #12]
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d1ef      	bne.n	80158e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015906:	bf00      	nop
 8015908:	3714      	adds	r7, #20
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr
 8015912:	bf00      	nop
 8015914:	2000f16c 	.word	0x2000f16c

08015918 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015920:	4915      	ldr	r1, [pc, #84]	@ (8015978 <etharp_free_entry+0x60>)
 8015922:	687a      	ldr	r2, [r7, #4]
 8015924:	4613      	mov	r3, r2
 8015926:	005b      	lsls	r3, r3, #1
 8015928:	4413      	add	r3, r2
 801592a:	00db      	lsls	r3, r3, #3
 801592c:	440b      	add	r3, r1
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d013      	beq.n	801595c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015934:	4910      	ldr	r1, [pc, #64]	@ (8015978 <etharp_free_entry+0x60>)
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	4613      	mov	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	4413      	add	r3, r2
 801593e:	00db      	lsls	r3, r3, #3
 8015940:	440b      	add	r3, r1
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	4618      	mov	r0, r3
 8015946:	f7f8 fe27 	bl	800e598 <pbuf_free>
    arp_table[i].q = NULL;
 801594a:	490b      	ldr	r1, [pc, #44]	@ (8015978 <etharp_free_entry+0x60>)
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	4613      	mov	r3, r2
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	440b      	add	r3, r1
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801595c:	4906      	ldr	r1, [pc, #24]	@ (8015978 <etharp_free_entry+0x60>)
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	4613      	mov	r3, r2
 8015962:	005b      	lsls	r3, r3, #1
 8015964:	4413      	add	r3, r2
 8015966:	00db      	lsls	r3, r3, #3
 8015968:	440b      	add	r3, r1
 801596a:	3314      	adds	r3, #20
 801596c:	2200      	movs	r2, #0
 801596e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015970:	bf00      	nop
 8015972:	3708      	adds	r7, #8
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}
 8015978:	2000f170 	.word	0x2000f170

0801597c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015982:	2300      	movs	r3, #0
 8015984:	607b      	str	r3, [r7, #4]
 8015986:	e096      	b.n	8015ab6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015988:	494f      	ldr	r1, [pc, #316]	@ (8015ac8 <etharp_tmr+0x14c>)
 801598a:	687a      	ldr	r2, [r7, #4]
 801598c:	4613      	mov	r3, r2
 801598e:	005b      	lsls	r3, r3, #1
 8015990:	4413      	add	r3, r2
 8015992:	00db      	lsls	r3, r3, #3
 8015994:	440b      	add	r3, r1
 8015996:	3314      	adds	r3, #20
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801599c:	78fb      	ldrb	r3, [r7, #3]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f000 8086 	beq.w	8015ab0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80159a4:	4948      	ldr	r1, [pc, #288]	@ (8015ac8 <etharp_tmr+0x14c>)
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	4613      	mov	r3, r2
 80159aa:	005b      	lsls	r3, r3, #1
 80159ac:	4413      	add	r3, r2
 80159ae:	00db      	lsls	r3, r3, #3
 80159b0:	440b      	add	r3, r1
 80159b2:	3312      	adds	r3, #18
 80159b4:	881b      	ldrh	r3, [r3, #0]
 80159b6:	3301      	adds	r3, #1
 80159b8:	b298      	uxth	r0, r3
 80159ba:	4943      	ldr	r1, [pc, #268]	@ (8015ac8 <etharp_tmr+0x14c>)
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	4613      	mov	r3, r2
 80159c0:	005b      	lsls	r3, r3, #1
 80159c2:	4413      	add	r3, r2
 80159c4:	00db      	lsls	r3, r3, #3
 80159c6:	440b      	add	r3, r1
 80159c8:	3312      	adds	r3, #18
 80159ca:	4602      	mov	r2, r0
 80159cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80159ce:	493e      	ldr	r1, [pc, #248]	@ (8015ac8 <etharp_tmr+0x14c>)
 80159d0:	687a      	ldr	r2, [r7, #4]
 80159d2:	4613      	mov	r3, r2
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4413      	add	r3, r2
 80159d8:	00db      	lsls	r3, r3, #3
 80159da:	440b      	add	r3, r1
 80159dc:	3312      	adds	r3, #18
 80159de:	881b      	ldrh	r3, [r3, #0]
 80159e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80159e4:	d215      	bcs.n	8015a12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80159e6:	4938      	ldr	r1, [pc, #224]	@ (8015ac8 <etharp_tmr+0x14c>)
 80159e8:	687a      	ldr	r2, [r7, #4]
 80159ea:	4613      	mov	r3, r2
 80159ec:	005b      	lsls	r3, r3, #1
 80159ee:	4413      	add	r3, r2
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	440b      	add	r3, r1
 80159f4:	3314      	adds	r3, #20
 80159f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d10e      	bne.n	8015a1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80159fc:	4932      	ldr	r1, [pc, #200]	@ (8015ac8 <etharp_tmr+0x14c>)
 80159fe:	687a      	ldr	r2, [r7, #4]
 8015a00:	4613      	mov	r3, r2
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	4413      	add	r3, r2
 8015a06:	00db      	lsls	r3, r3, #3
 8015a08:	440b      	add	r3, r1
 8015a0a:	3312      	adds	r3, #18
 8015a0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015a0e:	2b04      	cmp	r3, #4
 8015a10:	d903      	bls.n	8015a1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ff ff80 	bl	8015918 <etharp_free_entry>
 8015a18:	e04a      	b.n	8015ab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015a1a:	492b      	ldr	r1, [pc, #172]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a1c:	687a      	ldr	r2, [r7, #4]
 8015a1e:	4613      	mov	r3, r2
 8015a20:	005b      	lsls	r3, r3, #1
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	3314      	adds	r3, #20
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	2b03      	cmp	r3, #3
 8015a2e:	d10a      	bne.n	8015a46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015a30:	4925      	ldr	r1, [pc, #148]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	4613      	mov	r3, r2
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	4413      	add	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	440b      	add	r3, r1
 8015a3e:	3314      	adds	r3, #20
 8015a40:	2204      	movs	r2, #4
 8015a42:	701a      	strb	r2, [r3, #0]
 8015a44:	e034      	b.n	8015ab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015a46:	4920      	ldr	r1, [pc, #128]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	4413      	add	r3, r2
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	440b      	add	r3, r1
 8015a54:	3314      	adds	r3, #20
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2b04      	cmp	r3, #4
 8015a5a:	d10a      	bne.n	8015a72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015a5c:	491a      	ldr	r1, [pc, #104]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	4613      	mov	r3, r2
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	4413      	add	r3, r2
 8015a66:	00db      	lsls	r3, r3, #3
 8015a68:	440b      	add	r3, r1
 8015a6a:	3314      	adds	r3, #20
 8015a6c:	2202      	movs	r2, #2
 8015a6e:	701a      	strb	r2, [r3, #0]
 8015a70:	e01e      	b.n	8015ab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015a72:	4915      	ldr	r1, [pc, #84]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	4613      	mov	r3, r2
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	4413      	add	r3, r2
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	440b      	add	r3, r1
 8015a80:	3314      	adds	r3, #20
 8015a82:	781b      	ldrb	r3, [r3, #0]
 8015a84:	2b01      	cmp	r3, #1
 8015a86:	d113      	bne.n	8015ab0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015a88:	490f      	ldr	r1, [pc, #60]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	005b      	lsls	r3, r3, #1
 8015a90:	4413      	add	r3, r2
 8015a92:	00db      	lsls	r3, r3, #3
 8015a94:	440b      	add	r3, r1
 8015a96:	3308      	adds	r3, #8
 8015a98:	6818      	ldr	r0, [r3, #0]
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	005b      	lsls	r3, r3, #1
 8015aa0:	4413      	add	r3, r2
 8015aa2:	00db      	lsls	r3, r3, #3
 8015aa4:	4a08      	ldr	r2, [pc, #32]	@ (8015ac8 <etharp_tmr+0x14c>)
 8015aa6:	4413      	add	r3, r2
 8015aa8:	3304      	adds	r3, #4
 8015aaa:	4619      	mov	r1, r3
 8015aac:	f000 fe6e 	bl	801678c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	607b      	str	r3, [r7, #4]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2b09      	cmp	r3, #9
 8015aba:	f77f af65 	ble.w	8015988 <etharp_tmr+0xc>
      }
    }
  }
}
 8015abe:	bf00      	nop
 8015ac0:	bf00      	nop
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	2000f170 	.word	0x2000f170

08015acc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b08a      	sub	sp, #40	@ 0x28
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	60f8      	str	r0, [r7, #12]
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	607a      	str	r2, [r7, #4]
 8015ad8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015ada:	230a      	movs	r3, #10
 8015adc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015ade:	230a      	movs	r3, #10
 8015ae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015ae2:	230a      	movs	r3, #10
 8015ae4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015aea:	230a      	movs	r3, #10
 8015aec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015aee:	2300      	movs	r3, #0
 8015af0:	83bb      	strh	r3, [r7, #28]
 8015af2:	2300      	movs	r3, #0
 8015af4:	837b      	strh	r3, [r7, #26]
 8015af6:	2300      	movs	r3, #0
 8015af8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015afa:	2300      	movs	r3, #0
 8015afc:	843b      	strh	r3, [r7, #32]
 8015afe:	e0ae      	b.n	8015c5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b04:	49a6      	ldr	r1, [pc, #664]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015b06:	4613      	mov	r3, r2
 8015b08:	005b      	lsls	r3, r3, #1
 8015b0a:	4413      	add	r3, r2
 8015b0c:	00db      	lsls	r3, r3, #3
 8015b0e:	440b      	add	r3, r1
 8015b10:	3314      	adds	r3, #20
 8015b12:	781b      	ldrb	r3, [r3, #0]
 8015b14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015b16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015b1a:	2b0a      	cmp	r3, #10
 8015b1c:	d105      	bne.n	8015b2a <etharp_find_entry+0x5e>
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d102      	bne.n	8015b2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015b24:	8c3b      	ldrh	r3, [r7, #32]
 8015b26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8015b28:	e095      	b.n	8015c56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015b2a:	7dfb      	ldrb	r3, [r7, #23]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f000 8092 	beq.w	8015c56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015b32:	7dfb      	ldrb	r3, [r7, #23]
 8015b34:	2b01      	cmp	r3, #1
 8015b36:	d009      	beq.n	8015b4c <etharp_find_entry+0x80>
 8015b38:	7dfb      	ldrb	r3, [r7, #23]
 8015b3a:	2b01      	cmp	r3, #1
 8015b3c:	d806      	bhi.n	8015b4c <etharp_find_entry+0x80>
 8015b3e:	4b99      	ldr	r3, [pc, #612]	@ (8015da4 <etharp_find_entry+0x2d8>)
 8015b40:	f240 1223 	movw	r2, #291	@ 0x123
 8015b44:	4998      	ldr	r1, [pc, #608]	@ (8015da8 <etharp_find_entry+0x2dc>)
 8015b46:	4899      	ldr	r0, [pc, #612]	@ (8015dac <etharp_find_entry+0x2e0>)
 8015b48:	f002 fc8e 	bl	8018468 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d020      	beq.n	8015b94 <etharp_find_entry+0xc8>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	6819      	ldr	r1, [r3, #0]
 8015b56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b5a:	4891      	ldr	r0, [pc, #580]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	005b      	lsls	r3, r3, #1
 8015b60:	4413      	add	r3, r2
 8015b62:	00db      	lsls	r3, r3, #3
 8015b64:	4403      	add	r3, r0
 8015b66:	3304      	adds	r3, #4
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	4299      	cmp	r1, r3
 8015b6c:	d112      	bne.n	8015b94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d00c      	beq.n	8015b8e <etharp_find_entry+0xc2>
 8015b74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b78:	4989      	ldr	r1, [pc, #548]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	4413      	add	r3, r2
 8015b80:	00db      	lsls	r3, r3, #3
 8015b82:	440b      	add	r3, r1
 8015b84:	3308      	adds	r3, #8
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d102      	bne.n	8015b94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015b8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015b92:	e100      	b.n	8015d96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015b94:	7dfb      	ldrb	r3, [r7, #23]
 8015b96:	2b01      	cmp	r3, #1
 8015b98:	d140      	bne.n	8015c1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015b9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015b9e:	4980      	ldr	r1, [pc, #512]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	005b      	lsls	r3, r3, #1
 8015ba4:	4413      	add	r3, r2
 8015ba6:	00db      	lsls	r3, r3, #3
 8015ba8:	440b      	add	r3, r1
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d01a      	beq.n	8015be6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015bb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bb4:	497a      	ldr	r1, [pc, #488]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	005b      	lsls	r3, r3, #1
 8015bba:	4413      	add	r3, r2
 8015bbc:	00db      	lsls	r3, r3, #3
 8015bbe:	440b      	add	r3, r1
 8015bc0:	3312      	adds	r3, #18
 8015bc2:	881b      	ldrh	r3, [r3, #0]
 8015bc4:	8bba      	ldrh	r2, [r7, #28]
 8015bc6:	429a      	cmp	r2, r3
 8015bc8:	d845      	bhi.n	8015c56 <etharp_find_entry+0x18a>
            old_queue = i;
 8015bca:	8c3b      	ldrh	r3, [r7, #32]
 8015bcc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bd2:	4973      	ldr	r1, [pc, #460]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4413      	add	r3, r2
 8015bda:	00db      	lsls	r3, r3, #3
 8015bdc:	440b      	add	r3, r1
 8015bde:	3312      	adds	r3, #18
 8015be0:	881b      	ldrh	r3, [r3, #0]
 8015be2:	83bb      	strh	r3, [r7, #28]
 8015be4:	e037      	b.n	8015c56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015be6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015bea:	496d      	ldr	r1, [pc, #436]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015bec:	4613      	mov	r3, r2
 8015bee:	005b      	lsls	r3, r3, #1
 8015bf0:	4413      	add	r3, r2
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	440b      	add	r3, r1
 8015bf6:	3312      	adds	r3, #18
 8015bf8:	881b      	ldrh	r3, [r3, #0]
 8015bfa:	8b7a      	ldrh	r2, [r7, #26]
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d82a      	bhi.n	8015c56 <etharp_find_entry+0x18a>
            old_pending = i;
 8015c00:	8c3b      	ldrh	r3, [r7, #32]
 8015c02:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8015c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c08:	4965      	ldr	r1, [pc, #404]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	005b      	lsls	r3, r3, #1
 8015c0e:	4413      	add	r3, r2
 8015c10:	00db      	lsls	r3, r3, #3
 8015c12:	440b      	add	r3, r1
 8015c14:	3312      	adds	r3, #18
 8015c16:	881b      	ldrh	r3, [r3, #0]
 8015c18:	837b      	strh	r3, [r7, #26]
 8015c1a:	e01c      	b.n	8015c56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015c1c:	7dfb      	ldrb	r3, [r7, #23]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d919      	bls.n	8015c56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c26:	495e      	ldr	r1, [pc, #376]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015c28:	4613      	mov	r3, r2
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	4413      	add	r3, r2
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	440b      	add	r3, r1
 8015c32:	3312      	adds	r3, #18
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	8b3a      	ldrh	r2, [r7, #24]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d80c      	bhi.n	8015c56 <etharp_find_entry+0x18a>
            old_stable = i;
 8015c3c:	8c3b      	ldrh	r3, [r7, #32]
 8015c3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c44:	4956      	ldr	r1, [pc, #344]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015c46:	4613      	mov	r3, r2
 8015c48:	005b      	lsls	r3, r3, #1
 8015c4a:	4413      	add	r3, r2
 8015c4c:	00db      	lsls	r3, r3, #3
 8015c4e:	440b      	add	r3, r1
 8015c50:	3312      	adds	r3, #18
 8015c52:	881b      	ldrh	r3, [r3, #0]
 8015c54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c56:	8c3b      	ldrh	r3, [r7, #32]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	843b      	strh	r3, [r7, #32]
 8015c5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c62:	2b09      	cmp	r3, #9
 8015c64:	f77f af4c 	ble.w	8015b00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015c68:	7afb      	ldrb	r3, [r7, #11]
 8015c6a:	f003 0302 	and.w	r3, r3, #2
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d108      	bne.n	8015c84 <etharp_find_entry+0x1b8>
 8015c72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015c76:	2b0a      	cmp	r3, #10
 8015c78:	d107      	bne.n	8015c8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015c7a:	7afb      	ldrb	r3, [r7, #11]
 8015c7c:	f003 0301 	and.w	r3, r3, #1
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d102      	bne.n	8015c8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015c84:	f04f 33ff 	mov.w	r3, #4294967295
 8015c88:	e085      	b.n	8015d96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015c8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015c8e:	2b09      	cmp	r3, #9
 8015c90:	dc02      	bgt.n	8015c98 <etharp_find_entry+0x1cc>
    i = empty;
 8015c92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015c94:	843b      	strh	r3, [r7, #32]
 8015c96:	e039      	b.n	8015d0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015c9c:	2b09      	cmp	r3, #9
 8015c9e:	dc14      	bgt.n	8015cca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015ca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015ca2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015ca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ca8:	493d      	ldr	r1, [pc, #244]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015caa:	4613      	mov	r3, r2
 8015cac:	005b      	lsls	r3, r3, #1
 8015cae:	4413      	add	r3, r2
 8015cb0:	00db      	lsls	r3, r3, #3
 8015cb2:	440b      	add	r3, r1
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d018      	beq.n	8015cec <etharp_find_entry+0x220>
 8015cba:	4b3a      	ldr	r3, [pc, #232]	@ (8015da4 <etharp_find_entry+0x2d8>)
 8015cbc:	f240 126d 	movw	r2, #365	@ 0x16d
 8015cc0:	493b      	ldr	r1, [pc, #236]	@ (8015db0 <etharp_find_entry+0x2e4>)
 8015cc2:	483a      	ldr	r0, [pc, #232]	@ (8015dac <etharp_find_entry+0x2e0>)
 8015cc4:	f002 fbd0 	bl	8018468 <iprintf>
 8015cc8:	e010      	b.n	8015cec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015cca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015cce:	2b09      	cmp	r3, #9
 8015cd0:	dc02      	bgt.n	8015cd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015cd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015cd4:	843b      	strh	r3, [r7, #32]
 8015cd6:	e009      	b.n	8015cec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015cd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015cdc:	2b09      	cmp	r3, #9
 8015cde:	dc02      	bgt.n	8015ce6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015ce0:	8bfb      	ldrh	r3, [r7, #30]
 8015ce2:	843b      	strh	r3, [r7, #32]
 8015ce4:	e002      	b.n	8015cec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8015cea:	e054      	b.n	8015d96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015cec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cf0:	2b09      	cmp	r3, #9
 8015cf2:	dd06      	ble.n	8015d02 <etharp_find_entry+0x236>
 8015cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8015da4 <etharp_find_entry+0x2d8>)
 8015cf6:	f240 127f 	movw	r2, #383	@ 0x17f
 8015cfa:	492e      	ldr	r1, [pc, #184]	@ (8015db4 <etharp_find_entry+0x2e8>)
 8015cfc:	482b      	ldr	r0, [pc, #172]	@ (8015dac <etharp_find_entry+0x2e0>)
 8015cfe:	f002 fbb3 	bl	8018468 <iprintf>
    etharp_free_entry(i);
 8015d02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7ff fe06 	bl	8015918 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015d0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d10:	2b09      	cmp	r3, #9
 8015d12:	dd06      	ble.n	8015d22 <etharp_find_entry+0x256>
 8015d14:	4b23      	ldr	r3, [pc, #140]	@ (8015da4 <etharp_find_entry+0x2d8>)
 8015d16:	f240 1283 	movw	r2, #387	@ 0x183
 8015d1a:	4926      	ldr	r1, [pc, #152]	@ (8015db4 <etharp_find_entry+0x2e8>)
 8015d1c:	4823      	ldr	r0, [pc, #140]	@ (8015dac <etharp_find_entry+0x2e0>)
 8015d1e:	f002 fba3 	bl	8018468 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d26:	491e      	ldr	r1, [pc, #120]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015d28:	4613      	mov	r3, r2
 8015d2a:	005b      	lsls	r3, r3, #1
 8015d2c:	4413      	add	r3, r2
 8015d2e:	00db      	lsls	r3, r3, #3
 8015d30:	440b      	add	r3, r1
 8015d32:	3314      	adds	r3, #20
 8015d34:	781b      	ldrb	r3, [r3, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d006      	beq.n	8015d48 <etharp_find_entry+0x27c>
 8015d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8015da4 <etharp_find_entry+0x2d8>)
 8015d3c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015d40:	491d      	ldr	r1, [pc, #116]	@ (8015db8 <etharp_find_entry+0x2ec>)
 8015d42:	481a      	ldr	r0, [pc, #104]	@ (8015dac <etharp_find_entry+0x2e0>)
 8015d44:	f002 fb90 	bl	8018468 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d00b      	beq.n	8015d66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015d4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	6819      	ldr	r1, [r3, #0]
 8015d56:	4812      	ldr	r0, [pc, #72]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015d58:	4613      	mov	r3, r2
 8015d5a:	005b      	lsls	r3, r3, #1
 8015d5c:	4413      	add	r3, r2
 8015d5e:	00db      	lsls	r3, r3, #3
 8015d60:	4403      	add	r3, r0
 8015d62:	3304      	adds	r3, #4
 8015d64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015d66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d6a:	490d      	ldr	r1, [pc, #52]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	005b      	lsls	r3, r3, #1
 8015d70:	4413      	add	r3, r2
 8015d72:	00db      	lsls	r3, r3, #3
 8015d74:	440b      	add	r3, r1
 8015d76:	3312      	adds	r3, #18
 8015d78:	2200      	movs	r2, #0
 8015d7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d80:	4907      	ldr	r1, [pc, #28]	@ (8015da0 <etharp_find_entry+0x2d4>)
 8015d82:	4613      	mov	r3, r2
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	4413      	add	r3, r2
 8015d88:	00db      	lsls	r3, r3, #3
 8015d8a:	440b      	add	r3, r1
 8015d8c:	3308      	adds	r3, #8
 8015d8e:	687a      	ldr	r2, [r7, #4]
 8015d90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3728      	adds	r7, #40	@ 0x28
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}
 8015d9e:	bf00      	nop
 8015da0:	2000f170 	.word	0x2000f170
 8015da4:	0801c934 	.word	0x0801c934
 8015da8:	0801c96c 	.word	0x0801c96c
 8015dac:	0801c9ac 	.word	0x0801c9ac
 8015db0:	0801c9d4 	.word	0x0801c9d4
 8015db4:	0801c9ec 	.word	0x0801c9ec
 8015db8:	0801ca00 	.word	0x0801ca00

08015dbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b088      	sub	sp, #32
 8015dc0:	af02      	add	r7, sp, #8
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
 8015dc8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015dd0:	2b06      	cmp	r3, #6
 8015dd2:	d006      	beq.n	8015de2 <etharp_update_arp_entry+0x26>
 8015dd4:	4b48      	ldr	r3, [pc, #288]	@ (8015ef8 <etharp_update_arp_entry+0x13c>)
 8015dd6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015dda:	4948      	ldr	r1, [pc, #288]	@ (8015efc <etharp_update_arp_entry+0x140>)
 8015ddc:	4848      	ldr	r0, [pc, #288]	@ (8015f00 <etharp_update_arp_entry+0x144>)
 8015dde:	f002 fb43 	bl	8018468 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d012      	beq.n	8015e0e <etharp_update_arp_entry+0x52>
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d00e      	beq.n	8015e0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	68f9      	ldr	r1, [r7, #12]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f001 f8fe 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8015dfc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d105      	bne.n	8015e0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e0a:	2be0      	cmp	r3, #224	@ 0xe0
 8015e0c:	d102      	bne.n	8015e14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e0e:	f06f 030f 	mvn.w	r3, #15
 8015e12:	e06c      	b.n	8015eee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015e14:	78fb      	ldrb	r3, [r7, #3]
 8015e16:	68fa      	ldr	r2, [r7, #12]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	68b8      	ldr	r0, [r7, #8]
 8015e1c:	f7ff fe56 	bl	8015acc <etharp_find_entry>
 8015e20:	4603      	mov	r3, r0
 8015e22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015e24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	da02      	bge.n	8015e32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015e2c:	8afb      	ldrh	r3, [r7, #22]
 8015e2e:	b25b      	sxtb	r3, r3
 8015e30:	e05d      	b.n	8015eee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015e32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e36:	4933      	ldr	r1, [pc, #204]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	4413      	add	r3, r2
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	440b      	add	r3, r1
 8015e42:	3314      	adds	r3, #20
 8015e44:	2202      	movs	r2, #2
 8015e46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015e48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e4c:	492d      	ldr	r1, [pc, #180]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015e4e:	4613      	mov	r3, r2
 8015e50:	005b      	lsls	r3, r3, #1
 8015e52:	4413      	add	r3, r2
 8015e54:	00db      	lsls	r3, r3, #3
 8015e56:	440b      	add	r3, r1
 8015e58:	3308      	adds	r3, #8
 8015e5a:	68fa      	ldr	r2, [r7, #12]
 8015e5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015e5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e62:	4613      	mov	r3, r2
 8015e64:	005b      	lsls	r3, r3, #1
 8015e66:	4413      	add	r3, r2
 8015e68:	00db      	lsls	r3, r3, #3
 8015e6a:	3308      	adds	r3, #8
 8015e6c:	4a25      	ldr	r2, [pc, #148]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015e6e:	4413      	add	r3, r2
 8015e70:	3304      	adds	r3, #4
 8015e72:	2206      	movs	r2, #6
 8015e74:	6879      	ldr	r1, [r7, #4]
 8015e76:	4618      	mov	r0, r3
 8015e78:	f002 fc7f 	bl	801877a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015e7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e80:	4920      	ldr	r1, [pc, #128]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015e82:	4613      	mov	r3, r2
 8015e84:	005b      	lsls	r3, r3, #1
 8015e86:	4413      	add	r3, r2
 8015e88:	00db      	lsls	r3, r3, #3
 8015e8a:	440b      	add	r3, r1
 8015e8c:	3312      	adds	r3, #18
 8015e8e:	2200      	movs	r2, #0
 8015e90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015e92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015e96:	491b      	ldr	r1, [pc, #108]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015e98:	4613      	mov	r3, r2
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	4413      	add	r3, r2
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	440b      	add	r3, r1
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d021      	beq.n	8015eec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015ea8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015eac:	4915      	ldr	r1, [pc, #84]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015eae:	4613      	mov	r3, r2
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	4413      	add	r3, r2
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	440b      	add	r3, r1
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015ebc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ec0:	4910      	ldr	r1, [pc, #64]	@ (8015f04 <etharp_update_arp_entry+0x148>)
 8015ec2:	4613      	mov	r3, r2
 8015ec4:	005b      	lsls	r3, r3, #1
 8015ec6:	4413      	add	r3, r2
 8015ec8:	00db      	lsls	r3, r3, #3
 8015eca:	440b      	add	r3, r1
 8015ecc:	2200      	movs	r2, #0
 8015ece:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015ed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015eda:	9300      	str	r3, [sp, #0]
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6939      	ldr	r1, [r7, #16]
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f001 ff97 	bl	8017e14 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015ee6:	6938      	ldr	r0, [r7, #16]
 8015ee8:	f7f8 fb56 	bl	800e598 <pbuf_free>
  }
  return ERR_OK;
 8015eec:	2300      	movs	r3, #0
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3718      	adds	r7, #24
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	0801c934 	.word	0x0801c934
 8015efc:	0801ca2c 	.word	0x0801ca2c
 8015f00:	0801c9ac 	.word	0x0801c9ac
 8015f04:	2000f170 	.word	0x2000f170

08015f08 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f10:	2300      	movs	r3, #0
 8015f12:	60fb      	str	r3, [r7, #12]
 8015f14:	e01e      	b.n	8015f54 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015f16:	4913      	ldr	r1, [pc, #76]	@ (8015f64 <etharp_cleanup_netif+0x5c>)
 8015f18:	68fa      	ldr	r2, [r7, #12]
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	005b      	lsls	r3, r3, #1
 8015f1e:	4413      	add	r3, r2
 8015f20:	00db      	lsls	r3, r3, #3
 8015f22:	440b      	add	r3, r1
 8015f24:	3314      	adds	r3, #20
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015f2a:	7afb      	ldrb	r3, [r7, #11]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d00e      	beq.n	8015f4e <etharp_cleanup_netif+0x46>
 8015f30:	490c      	ldr	r1, [pc, #48]	@ (8015f64 <etharp_cleanup_netif+0x5c>)
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	4613      	mov	r3, r2
 8015f36:	005b      	lsls	r3, r3, #1
 8015f38:	4413      	add	r3, r2
 8015f3a:	00db      	lsls	r3, r3, #3
 8015f3c:	440b      	add	r3, r1
 8015f3e:	3308      	adds	r3, #8
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	687a      	ldr	r2, [r7, #4]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d102      	bne.n	8015f4e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7ff fce5 	bl	8015918 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3301      	adds	r3, #1
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b09      	cmp	r3, #9
 8015f58:	dddd      	ble.n	8015f16 <etharp_cleanup_netif+0xe>
    }
  }
}
 8015f5a:	bf00      	nop
 8015f5c:	bf00      	nop
 8015f5e:	3710      	adds	r7, #16
 8015f60:	46bd      	mov	sp, r7
 8015f62:	bd80      	pop	{r7, pc}
 8015f64:	2000f170 	.word	0x2000f170

08015f68 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015f68:	b5b0      	push	{r4, r5, r7, lr}
 8015f6a:	b08a      	sub	sp, #40	@ 0x28
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d107      	bne.n	8015f88 <etharp_input+0x20>
 8015f78:	4b3d      	ldr	r3, [pc, #244]	@ (8016070 <etharp_input+0x108>)
 8015f7a:	f240 228a 	movw	r2, #650	@ 0x28a
 8015f7e:	493d      	ldr	r1, [pc, #244]	@ (8016074 <etharp_input+0x10c>)
 8015f80:	483d      	ldr	r0, [pc, #244]	@ (8016078 <etharp_input+0x110>)
 8015f82:	f002 fa71 	bl	8018468 <iprintf>
 8015f86:	e06f      	b.n	8016068 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	881b      	ldrh	r3, [r3, #0]
 8015f92:	b29b      	uxth	r3, r3
 8015f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015f98:	d10c      	bne.n	8015fb4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015f9e:	2b06      	cmp	r3, #6
 8015fa0:	d108      	bne.n	8015fb4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015fa2:	693b      	ldr	r3, [r7, #16]
 8015fa4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015fa6:	2b04      	cmp	r3, #4
 8015fa8:	d104      	bne.n	8015fb4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	885b      	ldrh	r3, [r3, #2]
 8015fae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015fb0:	2b08      	cmp	r3, #8
 8015fb2:	d003      	beq.n	8015fbc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f7f8 faef 	bl	800e598 <pbuf_free>
    return;
 8015fba:	e055      	b.n	8016068 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	330e      	adds	r3, #14
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	3318      	adds	r3, #24
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	3304      	adds	r3, #4
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d102      	bne.n	8015fdc <etharp_input+0x74>
    for_us = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	75fb      	strb	r3, [r7, #23]
 8015fda:	e009      	b.n	8015ff0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	3304      	adds	r3, #4
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	bf0c      	ite	eq
 8015fe8:	2301      	moveq	r3, #1
 8015fea:	2300      	movne	r3, #0
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	f103 0208 	add.w	r2, r3, #8
 8015ff6:	7dfb      	ldrb	r3, [r7, #23]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d001      	beq.n	8016000 <etharp_input+0x98>
 8015ffc:	2301      	movs	r3, #1
 8015ffe:	e000      	b.n	8016002 <etharp_input+0x9a>
 8016000:	2302      	movs	r3, #2
 8016002:	f107 010c 	add.w	r1, r7, #12
 8016006:	6838      	ldr	r0, [r7, #0]
 8016008:	f7ff fed8 	bl	8015dbc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	88db      	ldrh	r3, [r3, #6]
 8016010:	b29b      	uxth	r3, r3
 8016012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016016:	d003      	beq.n	8016020 <etharp_input+0xb8>
 8016018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801601c:	d01e      	beq.n	801605c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801601e:	e020      	b.n	8016062 <etharp_input+0xfa>
      if (for_us) {
 8016020:	7dfb      	ldrb	r3, [r7, #23]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d01c      	beq.n	8016060 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801603c:	693a      	ldr	r2, [r7, #16]
 801603e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016040:	2102      	movs	r1, #2
 8016042:	9103      	str	r1, [sp, #12]
 8016044:	f107 010c 	add.w	r1, r7, #12
 8016048:	9102      	str	r1, [sp, #8]
 801604a:	9201      	str	r2, [sp, #4]
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	462b      	mov	r3, r5
 8016050:	4622      	mov	r2, r4
 8016052:	4601      	mov	r1, r0
 8016054:	6838      	ldr	r0, [r7, #0]
 8016056:	f000 faeb 	bl	8016630 <etharp_raw>
      break;
 801605a:	e001      	b.n	8016060 <etharp_input+0xf8>
      break;
 801605c:	bf00      	nop
 801605e:	e000      	b.n	8016062 <etharp_input+0xfa>
      break;
 8016060:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f7f8 fa98 	bl	800e598 <pbuf_free>
}
 8016068:	3718      	adds	r7, #24
 801606a:	46bd      	mov	sp, r7
 801606c:	bdb0      	pop	{r4, r5, r7, pc}
 801606e:	bf00      	nop
 8016070:	0801c934 	.word	0x0801c934
 8016074:	0801ca84 	.word	0x0801ca84
 8016078:	0801c9ac 	.word	0x0801c9ac

0801607c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b086      	sub	sp, #24
 8016080:	af02      	add	r7, sp, #8
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	4613      	mov	r3, r2
 8016088:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801608a:	79fa      	ldrb	r2, [r7, #7]
 801608c:	4944      	ldr	r1, [pc, #272]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 801608e:	4613      	mov	r3, r2
 8016090:	005b      	lsls	r3, r3, #1
 8016092:	4413      	add	r3, r2
 8016094:	00db      	lsls	r3, r3, #3
 8016096:	440b      	add	r3, r1
 8016098:	3314      	adds	r3, #20
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	2b01      	cmp	r3, #1
 801609e:	d806      	bhi.n	80160ae <etharp_output_to_arp_index+0x32>
 80160a0:	4b40      	ldr	r3, [pc, #256]	@ (80161a4 <etharp_output_to_arp_index+0x128>)
 80160a2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80160a6:	4940      	ldr	r1, [pc, #256]	@ (80161a8 <etharp_output_to_arp_index+0x12c>)
 80160a8:	4840      	ldr	r0, [pc, #256]	@ (80161ac <etharp_output_to_arp_index+0x130>)
 80160aa:	f002 f9dd 	bl	8018468 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80160ae:	79fa      	ldrb	r2, [r7, #7]
 80160b0:	493b      	ldr	r1, [pc, #236]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 80160b2:	4613      	mov	r3, r2
 80160b4:	005b      	lsls	r3, r3, #1
 80160b6:	4413      	add	r3, r2
 80160b8:	00db      	lsls	r3, r3, #3
 80160ba:	440b      	add	r3, r1
 80160bc:	3314      	adds	r3, #20
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d153      	bne.n	801616c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80160c4:	79fa      	ldrb	r2, [r7, #7]
 80160c6:	4936      	ldr	r1, [pc, #216]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 80160c8:	4613      	mov	r3, r2
 80160ca:	005b      	lsls	r3, r3, #1
 80160cc:	4413      	add	r3, r2
 80160ce:	00db      	lsls	r3, r3, #3
 80160d0:	440b      	add	r3, r1
 80160d2:	3312      	adds	r3, #18
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80160da:	d919      	bls.n	8016110 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80160dc:	79fa      	ldrb	r2, [r7, #7]
 80160de:	4613      	mov	r3, r2
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	4413      	add	r3, r2
 80160e4:	00db      	lsls	r3, r3, #3
 80160e6:	4a2e      	ldr	r2, [pc, #184]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 80160e8:	4413      	add	r3, r2
 80160ea:	3304      	adds	r3, #4
 80160ec:	4619      	mov	r1, r3
 80160ee:	68f8      	ldr	r0, [r7, #12]
 80160f0:	f000 fb4c 	bl	801678c <etharp_request>
 80160f4:	4603      	mov	r3, r0
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d138      	bne.n	801616c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80160fa:	79fa      	ldrb	r2, [r7, #7]
 80160fc:	4928      	ldr	r1, [pc, #160]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 80160fe:	4613      	mov	r3, r2
 8016100:	005b      	lsls	r3, r3, #1
 8016102:	4413      	add	r3, r2
 8016104:	00db      	lsls	r3, r3, #3
 8016106:	440b      	add	r3, r1
 8016108:	3314      	adds	r3, #20
 801610a:	2203      	movs	r2, #3
 801610c:	701a      	strb	r2, [r3, #0]
 801610e:	e02d      	b.n	801616c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016110:	79fa      	ldrb	r2, [r7, #7]
 8016112:	4923      	ldr	r1, [pc, #140]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 8016114:	4613      	mov	r3, r2
 8016116:	005b      	lsls	r3, r3, #1
 8016118:	4413      	add	r3, r2
 801611a:	00db      	lsls	r3, r3, #3
 801611c:	440b      	add	r3, r1
 801611e:	3312      	adds	r3, #18
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016126:	d321      	bcc.n	801616c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016128:	79fa      	ldrb	r2, [r7, #7]
 801612a:	4613      	mov	r3, r2
 801612c:	005b      	lsls	r3, r3, #1
 801612e:	4413      	add	r3, r2
 8016130:	00db      	lsls	r3, r3, #3
 8016132:	4a1b      	ldr	r2, [pc, #108]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 8016134:	4413      	add	r3, r2
 8016136:	1d19      	adds	r1, r3, #4
 8016138:	79fa      	ldrb	r2, [r7, #7]
 801613a:	4613      	mov	r3, r2
 801613c:	005b      	lsls	r3, r3, #1
 801613e:	4413      	add	r3, r2
 8016140:	00db      	lsls	r3, r3, #3
 8016142:	3308      	adds	r3, #8
 8016144:	4a16      	ldr	r2, [pc, #88]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 8016146:	4413      	add	r3, r2
 8016148:	3304      	adds	r3, #4
 801614a:	461a      	mov	r2, r3
 801614c:	68f8      	ldr	r0, [r7, #12]
 801614e:	f000 fafb 	bl	8016748 <etharp_request_dst>
 8016152:	4603      	mov	r3, r0
 8016154:	2b00      	cmp	r3, #0
 8016156:	d109      	bne.n	801616c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016158:	79fa      	ldrb	r2, [r7, #7]
 801615a:	4911      	ldr	r1, [pc, #68]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 801615c:	4613      	mov	r3, r2
 801615e:	005b      	lsls	r3, r3, #1
 8016160:	4413      	add	r3, r2
 8016162:	00db      	lsls	r3, r3, #3
 8016164:	440b      	add	r3, r1
 8016166:	3314      	adds	r3, #20
 8016168:	2203      	movs	r2, #3
 801616a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8016172:	79fa      	ldrb	r2, [r7, #7]
 8016174:	4613      	mov	r3, r2
 8016176:	005b      	lsls	r3, r3, #1
 8016178:	4413      	add	r3, r2
 801617a:	00db      	lsls	r3, r3, #3
 801617c:	3308      	adds	r3, #8
 801617e:	4a08      	ldr	r2, [pc, #32]	@ (80161a0 <etharp_output_to_arp_index+0x124>)
 8016180:	4413      	add	r3, r2
 8016182:	3304      	adds	r3, #4
 8016184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016188:	9200      	str	r2, [sp, #0]
 801618a:	460a      	mov	r2, r1
 801618c:	68b9      	ldr	r1, [r7, #8]
 801618e:	68f8      	ldr	r0, [r7, #12]
 8016190:	f001 fe40 	bl	8017e14 <ethernet_output>
 8016194:	4603      	mov	r3, r0
}
 8016196:	4618      	mov	r0, r3
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	2000f170 	.word	0x2000f170
 80161a4:	0801c934 	.word	0x0801c934
 80161a8:	0801caa4 	.word	0x0801caa4
 80161ac:	0801c9ac 	.word	0x0801c9ac

080161b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b08a      	sub	sp, #40	@ 0x28
 80161b4:	af02      	add	r7, sp, #8
 80161b6:	60f8      	str	r0, [r7, #12]
 80161b8:	60b9      	str	r1, [r7, #8]
 80161ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d106      	bne.n	80161d4 <etharp_output+0x24>
 80161c6:	4b73      	ldr	r3, [pc, #460]	@ (8016394 <etharp_output+0x1e4>)
 80161c8:	f240 321e 	movw	r2, #798	@ 0x31e
 80161cc:	4972      	ldr	r1, [pc, #456]	@ (8016398 <etharp_output+0x1e8>)
 80161ce:	4873      	ldr	r0, [pc, #460]	@ (801639c <etharp_output+0x1ec>)
 80161d0:	f002 f94a 	bl	8018468 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d106      	bne.n	80161e8 <etharp_output+0x38>
 80161da:	4b6e      	ldr	r3, [pc, #440]	@ (8016394 <etharp_output+0x1e4>)
 80161dc:	f240 321f 	movw	r2, #799	@ 0x31f
 80161e0:	496f      	ldr	r1, [pc, #444]	@ (80163a0 <etharp_output+0x1f0>)
 80161e2:	486e      	ldr	r0, [pc, #440]	@ (801639c <etharp_output+0x1ec>)
 80161e4:	f002 f940 	bl	8018468 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d106      	bne.n	80161fc <etharp_output+0x4c>
 80161ee:	4b69      	ldr	r3, [pc, #420]	@ (8016394 <etharp_output+0x1e4>)
 80161f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80161f4:	496b      	ldr	r1, [pc, #428]	@ (80163a4 <etharp_output+0x1f4>)
 80161f6:	4869      	ldr	r0, [pc, #420]	@ (801639c <etharp_output+0x1ec>)
 80161f8:	f002 f936 	bl	8018468 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	68f9      	ldr	r1, [r7, #12]
 8016202:	4618      	mov	r0, r3
 8016204:	f000 fef8 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d002      	beq.n	8016214 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801620e:	4b66      	ldr	r3, [pc, #408]	@ (80163a8 <etharp_output+0x1f8>)
 8016210:	61fb      	str	r3, [r7, #28]
 8016212:	e0af      	b.n	8016374 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801621c:	2be0      	cmp	r3, #224	@ 0xe0
 801621e:	d118      	bne.n	8016252 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016220:	2301      	movs	r3, #1
 8016222:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016224:	2300      	movs	r3, #0
 8016226:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016228:	235e      	movs	r3, #94	@ 0x5e
 801622a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	3301      	adds	r3, #1
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016236:	b2db      	uxtb	r3, r3
 8016238:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	3302      	adds	r3, #2
 801623e:	781b      	ldrb	r3, [r3, #0]
 8016240:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	3303      	adds	r3, #3
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801624a:	f107 0310 	add.w	r3, r7, #16
 801624e:	61fb      	str	r3, [r7, #28]
 8016250:	e090      	b.n	8016374 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681a      	ldr	r2, [r3, #0]
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	3304      	adds	r3, #4
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	405a      	eors	r2, r3
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3308      	adds	r3, #8
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	4013      	ands	r3, r2
 8016266:	2b00      	cmp	r3, #0
 8016268:	d012      	beq.n	8016290 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016270:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016274:	4293      	cmp	r3, r2
 8016276:	d00b      	beq.n	8016290 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	330c      	adds	r3, #12
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d003      	beq.n	801628a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	330c      	adds	r3, #12
 8016286:	61bb      	str	r3, [r7, #24]
 8016288:	e002      	b.n	8016290 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801628a:	f06f 0303 	mvn.w	r3, #3
 801628e:	e07d      	b.n	801638c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016290:	4b46      	ldr	r3, [pc, #280]	@ (80163ac <etharp_output+0x1fc>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	4619      	mov	r1, r3
 8016296:	4a46      	ldr	r2, [pc, #280]	@ (80163b0 <etharp_output+0x200>)
 8016298:	460b      	mov	r3, r1
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	440b      	add	r3, r1
 801629e:	00db      	lsls	r3, r3, #3
 80162a0:	4413      	add	r3, r2
 80162a2:	3314      	adds	r3, #20
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d925      	bls.n	80162f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80162aa:	4b40      	ldr	r3, [pc, #256]	@ (80163ac <etharp_output+0x1fc>)
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	4619      	mov	r1, r3
 80162b0:	4a3f      	ldr	r2, [pc, #252]	@ (80163b0 <etharp_output+0x200>)
 80162b2:	460b      	mov	r3, r1
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	440b      	add	r3, r1
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	4413      	add	r3, r2
 80162bc:	3308      	adds	r3, #8
 80162be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d117      	bne.n	80162f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	4b38      	ldr	r3, [pc, #224]	@ (80163ac <etharp_output+0x1fc>)
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	4618      	mov	r0, r3
 80162d0:	4937      	ldr	r1, [pc, #220]	@ (80163b0 <etharp_output+0x200>)
 80162d2:	4603      	mov	r3, r0
 80162d4:	005b      	lsls	r3, r3, #1
 80162d6:	4403      	add	r3, r0
 80162d8:	00db      	lsls	r3, r3, #3
 80162da:	440b      	add	r3, r1
 80162dc:	3304      	adds	r3, #4
 80162de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d108      	bne.n	80162f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80162e4:	4b31      	ldr	r3, [pc, #196]	@ (80163ac <etharp_output+0x1fc>)
 80162e6:	781b      	ldrb	r3, [r3, #0]
 80162e8:	461a      	mov	r2, r3
 80162ea:	68b9      	ldr	r1, [r7, #8]
 80162ec:	68f8      	ldr	r0, [r7, #12]
 80162ee:	f7ff fec5 	bl	801607c <etharp_output_to_arp_index>
 80162f2:	4603      	mov	r3, r0
 80162f4:	e04a      	b.n	801638c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80162f6:	2300      	movs	r3, #0
 80162f8:	75fb      	strb	r3, [r7, #23]
 80162fa:	e031      	b.n	8016360 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80162fc:	7dfa      	ldrb	r2, [r7, #23]
 80162fe:	492c      	ldr	r1, [pc, #176]	@ (80163b0 <etharp_output+0x200>)
 8016300:	4613      	mov	r3, r2
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	4413      	add	r3, r2
 8016306:	00db      	lsls	r3, r3, #3
 8016308:	440b      	add	r3, r1
 801630a:	3314      	adds	r3, #20
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	2b01      	cmp	r3, #1
 8016310:	d923      	bls.n	801635a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016312:	7dfa      	ldrb	r2, [r7, #23]
 8016314:	4926      	ldr	r1, [pc, #152]	@ (80163b0 <etharp_output+0x200>)
 8016316:	4613      	mov	r3, r2
 8016318:	005b      	lsls	r3, r3, #1
 801631a:	4413      	add	r3, r2
 801631c:	00db      	lsls	r3, r3, #3
 801631e:	440b      	add	r3, r1
 8016320:	3308      	adds	r3, #8
 8016322:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	429a      	cmp	r2, r3
 8016328:	d117      	bne.n	801635a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	6819      	ldr	r1, [r3, #0]
 801632e:	7dfa      	ldrb	r2, [r7, #23]
 8016330:	481f      	ldr	r0, [pc, #124]	@ (80163b0 <etharp_output+0x200>)
 8016332:	4613      	mov	r3, r2
 8016334:	005b      	lsls	r3, r3, #1
 8016336:	4413      	add	r3, r2
 8016338:	00db      	lsls	r3, r3, #3
 801633a:	4403      	add	r3, r0
 801633c:	3304      	adds	r3, #4
 801633e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016340:	4299      	cmp	r1, r3
 8016342:	d10a      	bne.n	801635a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016344:	4a19      	ldr	r2, [pc, #100]	@ (80163ac <etharp_output+0x1fc>)
 8016346:	7dfb      	ldrb	r3, [r7, #23]
 8016348:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801634a:	7dfb      	ldrb	r3, [r7, #23]
 801634c:	461a      	mov	r2, r3
 801634e:	68b9      	ldr	r1, [r7, #8]
 8016350:	68f8      	ldr	r0, [r7, #12]
 8016352:	f7ff fe93 	bl	801607c <etharp_output_to_arp_index>
 8016356:	4603      	mov	r3, r0
 8016358:	e018      	b.n	801638c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801635a:	7dfb      	ldrb	r3, [r7, #23]
 801635c:	3301      	adds	r3, #1
 801635e:	75fb      	strb	r3, [r7, #23]
 8016360:	7dfb      	ldrb	r3, [r7, #23]
 8016362:	2b09      	cmp	r3, #9
 8016364:	d9ca      	bls.n	80162fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016366:	68ba      	ldr	r2, [r7, #8]
 8016368:	69b9      	ldr	r1, [r7, #24]
 801636a:	68f8      	ldr	r0, [r7, #12]
 801636c:	f000 f822 	bl	80163b4 <etharp_query>
 8016370:	4603      	mov	r3, r0
 8016372:	e00b      	b.n	801638c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801637a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	68b9      	ldr	r1, [r7, #8]
 8016384:	68f8      	ldr	r0, [r7, #12]
 8016386:	f001 fd45 	bl	8017e14 <ethernet_output>
 801638a:	4603      	mov	r3, r0
}
 801638c:	4618      	mov	r0, r3
 801638e:	3720      	adds	r7, #32
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	0801c934 	.word	0x0801c934
 8016398:	0801ca84 	.word	0x0801ca84
 801639c:	0801c9ac 	.word	0x0801c9ac
 80163a0:	0801cad4 	.word	0x0801cad4
 80163a4:	0801ca74 	.word	0x0801ca74
 80163a8:	0801ddf4 	.word	0x0801ddf4
 80163ac:	2000f260 	.word	0x2000f260
 80163b0:	2000f170 	.word	0x2000f170

080163b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b08c      	sub	sp, #48	@ 0x30
 80163b8:	af02      	add	r7, sp, #8
 80163ba:	60f8      	str	r0, [r7, #12]
 80163bc:	60b9      	str	r1, [r7, #8]
 80163be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	3326      	adds	r3, #38	@ 0x26
 80163c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80163c6:	23ff      	movs	r3, #255	@ 0xff
 80163c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80163cc:	2300      	movs	r3, #0
 80163ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	68f9      	ldr	r1, [r7, #12]
 80163d6:	4618      	mov	r0, r3
 80163d8:	f000 fe0e 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d10c      	bne.n	80163fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80163ea:	2be0      	cmp	r3, #224	@ 0xe0
 80163ec:	d006      	beq.n	80163fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80163ee:	68bb      	ldr	r3, [r7, #8]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d003      	beq.n	80163fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d102      	bne.n	8016402 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80163fc:	f06f 030f 	mvn.w	r3, #15
 8016400:	e101      	b.n	8016606 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016402:	68fa      	ldr	r2, [r7, #12]
 8016404:	2101      	movs	r1, #1
 8016406:	68b8      	ldr	r0, [r7, #8]
 8016408:	f7ff fb60 	bl	8015acc <etharp_find_entry>
 801640c:	4603      	mov	r3, r0
 801640e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016414:	2b00      	cmp	r3, #0
 8016416:	da02      	bge.n	801641e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016418:	8a7b      	ldrh	r3, [r7, #18]
 801641a:	b25b      	sxtb	r3, r3
 801641c:	e0f3      	b.n	8016606 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801641e:	8a7b      	ldrh	r3, [r7, #18]
 8016420:	2b7e      	cmp	r3, #126	@ 0x7e
 8016422:	d906      	bls.n	8016432 <etharp_query+0x7e>
 8016424:	4b7a      	ldr	r3, [pc, #488]	@ (8016610 <etharp_query+0x25c>)
 8016426:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801642a:	497a      	ldr	r1, [pc, #488]	@ (8016614 <etharp_query+0x260>)
 801642c:	487a      	ldr	r0, [pc, #488]	@ (8016618 <etharp_query+0x264>)
 801642e:	f002 f81b 	bl	8018468 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016432:	8a7b      	ldrh	r3, [r7, #18]
 8016434:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016436:	7c7a      	ldrb	r2, [r7, #17]
 8016438:	4978      	ldr	r1, [pc, #480]	@ (801661c <etharp_query+0x268>)
 801643a:	4613      	mov	r3, r2
 801643c:	005b      	lsls	r3, r3, #1
 801643e:	4413      	add	r3, r2
 8016440:	00db      	lsls	r3, r3, #3
 8016442:	440b      	add	r3, r1
 8016444:	3314      	adds	r3, #20
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d115      	bne.n	8016478 <etharp_query+0xc4>
    is_new_entry = 1;
 801644c:	2301      	movs	r3, #1
 801644e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016450:	7c7a      	ldrb	r2, [r7, #17]
 8016452:	4972      	ldr	r1, [pc, #456]	@ (801661c <etharp_query+0x268>)
 8016454:	4613      	mov	r3, r2
 8016456:	005b      	lsls	r3, r3, #1
 8016458:	4413      	add	r3, r2
 801645a:	00db      	lsls	r3, r3, #3
 801645c:	440b      	add	r3, r1
 801645e:	3314      	adds	r3, #20
 8016460:	2201      	movs	r2, #1
 8016462:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016464:	7c7a      	ldrb	r2, [r7, #17]
 8016466:	496d      	ldr	r1, [pc, #436]	@ (801661c <etharp_query+0x268>)
 8016468:	4613      	mov	r3, r2
 801646a:	005b      	lsls	r3, r3, #1
 801646c:	4413      	add	r3, r2
 801646e:	00db      	lsls	r3, r3, #3
 8016470:	440b      	add	r3, r1
 8016472:	3308      	adds	r3, #8
 8016474:	68fa      	ldr	r2, [r7, #12]
 8016476:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016478:	7c7a      	ldrb	r2, [r7, #17]
 801647a:	4968      	ldr	r1, [pc, #416]	@ (801661c <etharp_query+0x268>)
 801647c:	4613      	mov	r3, r2
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	4413      	add	r3, r2
 8016482:	00db      	lsls	r3, r3, #3
 8016484:	440b      	add	r3, r1
 8016486:	3314      	adds	r3, #20
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	2b01      	cmp	r3, #1
 801648c:	d011      	beq.n	80164b2 <etharp_query+0xfe>
 801648e:	7c7a      	ldrb	r2, [r7, #17]
 8016490:	4962      	ldr	r1, [pc, #392]	@ (801661c <etharp_query+0x268>)
 8016492:	4613      	mov	r3, r2
 8016494:	005b      	lsls	r3, r3, #1
 8016496:	4413      	add	r3, r2
 8016498:	00db      	lsls	r3, r3, #3
 801649a:	440b      	add	r3, r1
 801649c:	3314      	adds	r3, #20
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d806      	bhi.n	80164b2 <etharp_query+0xfe>
 80164a4:	4b5a      	ldr	r3, [pc, #360]	@ (8016610 <etharp_query+0x25c>)
 80164a6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80164aa:	495d      	ldr	r1, [pc, #372]	@ (8016620 <etharp_query+0x26c>)
 80164ac:	485a      	ldr	r0, [pc, #360]	@ (8016618 <etharp_query+0x264>)
 80164ae:	f001 ffdb 	bl	8018468 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80164b2:	6a3b      	ldr	r3, [r7, #32]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d102      	bne.n	80164be <etharp_query+0x10a>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d10c      	bne.n	80164d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80164be:	68b9      	ldr	r1, [r7, #8]
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	f000 f963 	bl	801678c <etharp_request>
 80164c6:	4603      	mov	r3, r0
 80164c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d102      	bne.n	80164d8 <etharp_query+0x124>
      return result;
 80164d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80164d6:	e096      	b.n	8016606 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d106      	bne.n	80164ec <etharp_query+0x138>
 80164de:	4b4c      	ldr	r3, [pc, #304]	@ (8016610 <etharp_query+0x25c>)
 80164e0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80164e4:	494f      	ldr	r1, [pc, #316]	@ (8016624 <etharp_query+0x270>)
 80164e6:	484c      	ldr	r0, [pc, #304]	@ (8016618 <etharp_query+0x264>)
 80164e8:	f001 ffbe 	bl	8018468 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80164ec:	7c7a      	ldrb	r2, [r7, #17]
 80164ee:	494b      	ldr	r1, [pc, #300]	@ (801661c <etharp_query+0x268>)
 80164f0:	4613      	mov	r3, r2
 80164f2:	005b      	lsls	r3, r3, #1
 80164f4:	4413      	add	r3, r2
 80164f6:	00db      	lsls	r3, r3, #3
 80164f8:	440b      	add	r3, r1
 80164fa:	3314      	adds	r3, #20
 80164fc:	781b      	ldrb	r3, [r3, #0]
 80164fe:	2b01      	cmp	r3, #1
 8016500:	d917      	bls.n	8016532 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016502:	4a49      	ldr	r2, [pc, #292]	@ (8016628 <etharp_query+0x274>)
 8016504:	7c7b      	ldrb	r3, [r7, #17]
 8016506:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016508:	7c7a      	ldrb	r2, [r7, #17]
 801650a:	4613      	mov	r3, r2
 801650c:	005b      	lsls	r3, r3, #1
 801650e:	4413      	add	r3, r2
 8016510:	00db      	lsls	r3, r3, #3
 8016512:	3308      	adds	r3, #8
 8016514:	4a41      	ldr	r2, [pc, #260]	@ (801661c <etharp_query+0x268>)
 8016516:	4413      	add	r3, r2
 8016518:	3304      	adds	r3, #4
 801651a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801651e:	9200      	str	r2, [sp, #0]
 8016520:	697a      	ldr	r2, [r7, #20]
 8016522:	6879      	ldr	r1, [r7, #4]
 8016524:	68f8      	ldr	r0, [r7, #12]
 8016526:	f001 fc75 	bl	8017e14 <ethernet_output>
 801652a:	4603      	mov	r3, r0
 801652c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016530:	e067      	b.n	8016602 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016532:	7c7a      	ldrb	r2, [r7, #17]
 8016534:	4939      	ldr	r1, [pc, #228]	@ (801661c <etharp_query+0x268>)
 8016536:	4613      	mov	r3, r2
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	4413      	add	r3, r2
 801653c:	00db      	lsls	r3, r3, #3
 801653e:	440b      	add	r3, r1
 8016540:	3314      	adds	r3, #20
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d15c      	bne.n	8016602 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016548:	2300      	movs	r3, #0
 801654a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016550:	e01c      	b.n	801658c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016552:	69fb      	ldr	r3, [r7, #28]
 8016554:	895a      	ldrh	r2, [r3, #10]
 8016556:	69fb      	ldr	r3, [r7, #28]
 8016558:	891b      	ldrh	r3, [r3, #8]
 801655a:	429a      	cmp	r2, r3
 801655c:	d10a      	bne.n	8016574 <etharp_query+0x1c0>
 801655e:	69fb      	ldr	r3, [r7, #28]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d006      	beq.n	8016574 <etharp_query+0x1c0>
 8016566:	4b2a      	ldr	r3, [pc, #168]	@ (8016610 <etharp_query+0x25c>)
 8016568:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801656c:	492f      	ldr	r1, [pc, #188]	@ (801662c <etharp_query+0x278>)
 801656e:	482a      	ldr	r0, [pc, #168]	@ (8016618 <etharp_query+0x264>)
 8016570:	f001 ff7a 	bl	8018468 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	7b1b      	ldrb	r3, [r3, #12]
 8016578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801657c:	2b00      	cmp	r3, #0
 801657e:	d002      	beq.n	8016586 <etharp_query+0x1d2>
        copy_needed = 1;
 8016580:	2301      	movs	r3, #1
 8016582:	61bb      	str	r3, [r7, #24]
        break;
 8016584:	e005      	b.n	8016592 <etharp_query+0x1de>
      }
      p = p->next;
 8016586:	69fb      	ldr	r3, [r7, #28]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801658c:	69fb      	ldr	r3, [r7, #28]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d1df      	bne.n	8016552 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d007      	beq.n	80165a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016598:	687a      	ldr	r2, [r7, #4]
 801659a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801659e:	200e      	movs	r0, #14
 80165a0:	f7f8 fa72 	bl	800ea88 <pbuf_clone>
 80165a4:	61f8      	str	r0, [r7, #28]
 80165a6:	e004      	b.n	80165b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80165ac:	69f8      	ldr	r0, [r7, #28]
 80165ae:	f7f8 f899 	bl	800e6e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d021      	beq.n	80165fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80165b8:	7c7a      	ldrb	r2, [r7, #17]
 80165ba:	4918      	ldr	r1, [pc, #96]	@ (801661c <etharp_query+0x268>)
 80165bc:	4613      	mov	r3, r2
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	4413      	add	r3, r2
 80165c2:	00db      	lsls	r3, r3, #3
 80165c4:	440b      	add	r3, r1
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d00a      	beq.n	80165e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80165cc:	7c7a      	ldrb	r2, [r7, #17]
 80165ce:	4913      	ldr	r1, [pc, #76]	@ (801661c <etharp_query+0x268>)
 80165d0:	4613      	mov	r3, r2
 80165d2:	005b      	lsls	r3, r3, #1
 80165d4:	4413      	add	r3, r2
 80165d6:	00db      	lsls	r3, r3, #3
 80165d8:	440b      	add	r3, r1
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	4618      	mov	r0, r3
 80165de:	f7f7 ffdb 	bl	800e598 <pbuf_free>
      }
      arp_table[i].q = p;
 80165e2:	7c7a      	ldrb	r2, [r7, #17]
 80165e4:	490d      	ldr	r1, [pc, #52]	@ (801661c <etharp_query+0x268>)
 80165e6:	4613      	mov	r3, r2
 80165e8:	005b      	lsls	r3, r3, #1
 80165ea:	4413      	add	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	440b      	add	r3, r1
 80165f0:	69fa      	ldr	r2, [r7, #28]
 80165f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80165f4:	2300      	movs	r3, #0
 80165f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80165fa:	e002      	b.n	8016602 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80165fc:	23ff      	movs	r3, #255	@ 0xff
 80165fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016602:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016606:	4618      	mov	r0, r3
 8016608:	3728      	adds	r7, #40	@ 0x28
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	0801c934 	.word	0x0801c934
 8016614:	0801cae0 	.word	0x0801cae0
 8016618:	0801c9ac 	.word	0x0801c9ac
 801661c:	2000f170 	.word	0x2000f170
 8016620:	0801caf0 	.word	0x0801caf0
 8016624:	0801cad4 	.word	0x0801cad4
 8016628:	2000f260 	.word	0x2000f260
 801662c:	0801cb18 	.word	0x0801cb18

08016630 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	b08a      	sub	sp, #40	@ 0x28
 8016634:	af02      	add	r7, sp, #8
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
 801663c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801663e:	2300      	movs	r3, #0
 8016640:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d106      	bne.n	8016656 <etharp_raw+0x26>
 8016648:	4b3a      	ldr	r3, [pc, #232]	@ (8016734 <etharp_raw+0x104>)
 801664a:	f240 4257 	movw	r2, #1111	@ 0x457
 801664e:	493a      	ldr	r1, [pc, #232]	@ (8016738 <etharp_raw+0x108>)
 8016650:	483a      	ldr	r0, [pc, #232]	@ (801673c <etharp_raw+0x10c>)
 8016652:	f001 ff09 	bl	8018468 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801665a:	211c      	movs	r1, #28
 801665c:	200e      	movs	r0, #14
 801665e:	f7f7 fcb7 	bl	800dfd0 <pbuf_alloc>
 8016662:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016664:	69bb      	ldr	r3, [r7, #24]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d102      	bne.n	8016670 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801666a:	f04f 33ff 	mov.w	r3, #4294967295
 801666e:	e05d      	b.n	801672c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	895b      	ldrh	r3, [r3, #10]
 8016674:	2b1b      	cmp	r3, #27
 8016676:	d806      	bhi.n	8016686 <etharp_raw+0x56>
 8016678:	4b2e      	ldr	r3, [pc, #184]	@ (8016734 <etharp_raw+0x104>)
 801667a:	f240 4262 	movw	r2, #1122	@ 0x462
 801667e:	4930      	ldr	r1, [pc, #192]	@ (8016740 <etharp_raw+0x110>)
 8016680:	482e      	ldr	r0, [pc, #184]	@ (801673c <etharp_raw+0x10c>)
 8016682:	f001 fef1 	bl	8018468 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	685b      	ldr	r3, [r3, #4]
 801668a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801668c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801668e:	4618      	mov	r0, r3
 8016690:	f7f6 fb5a 	bl	800cd48 <lwip_htons>
 8016694:	4603      	mov	r3, r0
 8016696:	461a      	mov	r2, r3
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80166a2:	2b06      	cmp	r3, #6
 80166a4:	d006      	beq.n	80166b4 <etharp_raw+0x84>
 80166a6:	4b23      	ldr	r3, [pc, #140]	@ (8016734 <etharp_raw+0x104>)
 80166a8:	f240 4269 	movw	r2, #1129	@ 0x469
 80166ac:	4925      	ldr	r1, [pc, #148]	@ (8016744 <etharp_raw+0x114>)
 80166ae:	4823      	ldr	r0, [pc, #140]	@ (801673c <etharp_raw+0x10c>)
 80166b0:	f001 feda 	bl	8018468 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	3308      	adds	r3, #8
 80166b8:	2206      	movs	r2, #6
 80166ba:	6839      	ldr	r1, [r7, #0]
 80166bc:	4618      	mov	r0, r3
 80166be:	f002 f85c 	bl	801877a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80166c2:	697b      	ldr	r3, [r7, #20]
 80166c4:	3312      	adds	r3, #18
 80166c6:	2206      	movs	r2, #6
 80166c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166ca:	4618      	mov	r0, r3
 80166cc:	f002 f855 	bl	801877a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	330e      	adds	r3, #14
 80166d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80166d6:	6812      	ldr	r2, [r2, #0]
 80166d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	3318      	adds	r3, #24
 80166de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166e0:	6812      	ldr	r2, [r2, #0]
 80166e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	2200      	movs	r2, #0
 80166e8:	701a      	strb	r2, [r3, #0]
 80166ea:	2200      	movs	r2, #0
 80166ec:	f042 0201 	orr.w	r2, r2, #1
 80166f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	2200      	movs	r2, #0
 80166f6:	f042 0208 	orr.w	r2, r2, #8
 80166fa:	709a      	strb	r2, [r3, #2]
 80166fc:	2200      	movs	r2, #0
 80166fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2206      	movs	r2, #6
 8016704:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	2204      	movs	r2, #4
 801670a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801670c:	f640 0306 	movw	r3, #2054	@ 0x806
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	68ba      	ldr	r2, [r7, #8]
 8016716:	69b9      	ldr	r1, [r7, #24]
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f001 fb7b 	bl	8017e14 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801671e:	69b8      	ldr	r0, [r7, #24]
 8016720:	f7f7 ff3a 	bl	800e598 <pbuf_free>
  p = NULL;
 8016724:	2300      	movs	r3, #0
 8016726:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016728:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801672c:	4618      	mov	r0, r3
 801672e:	3720      	adds	r7, #32
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	0801c934 	.word	0x0801c934
 8016738:	0801ca84 	.word	0x0801ca84
 801673c:	0801c9ac 	.word	0x0801c9ac
 8016740:	0801cb34 	.word	0x0801cb34
 8016744:	0801cb68 	.word	0x0801cb68

08016748 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b088      	sub	sp, #32
 801674c:	af04      	add	r7, sp, #16
 801674e:	60f8      	str	r0, [r7, #12]
 8016750:	60b9      	str	r1, [r7, #8]
 8016752:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016764:	2201      	movs	r2, #1
 8016766:	9203      	str	r2, [sp, #12]
 8016768:	68ba      	ldr	r2, [r7, #8]
 801676a:	9202      	str	r2, [sp, #8]
 801676c:	4a06      	ldr	r2, [pc, #24]	@ (8016788 <etharp_request_dst+0x40>)
 801676e:	9201      	str	r2, [sp, #4]
 8016770:	9300      	str	r3, [sp, #0]
 8016772:	4603      	mov	r3, r0
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	68f8      	ldr	r0, [r7, #12]
 8016778:	f7ff ff5a 	bl	8016630 <etharp_raw>
 801677c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801677e:	4618      	mov	r0, r3
 8016780:	3710      	adds	r7, #16
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	0801ddfc 	.word	0x0801ddfc

0801678c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016796:	4a05      	ldr	r2, [pc, #20]	@ (80167ac <etharp_request+0x20>)
 8016798:	6839      	ldr	r1, [r7, #0]
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7ff ffd4 	bl	8016748 <etharp_request_dst>
 80167a0:	4603      	mov	r3, r0
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3708      	adds	r7, #8
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}
 80167aa:	bf00      	nop
 80167ac:	0801ddf4 	.word	0x0801ddf4

080167b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b08e      	sub	sp, #56	@ 0x38
 80167b4:	af04      	add	r7, sp, #16
 80167b6:	6078      	str	r0, [r7, #4]
 80167b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80167ba:	4b79      	ldr	r3, [pc, #484]	@ (80169a0 <icmp_input+0x1f0>)
 80167bc:	689b      	ldr	r3, [r3, #8]
 80167be:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80167c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	f003 030f 	and.w	r3, r3, #15
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	009b      	lsls	r3, r3, #2
 80167cc:	b2db      	uxtb	r3, r3
 80167ce:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80167d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80167d2:	2b13      	cmp	r3, #19
 80167d4:	f240 80cd 	bls.w	8016972 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	895b      	ldrh	r3, [r3, #10]
 80167dc:	2b03      	cmp	r3, #3
 80167de:	f240 80ca 	bls.w	8016976 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80167ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f000 80b7 	beq.w	8016964 <icmp_input+0x1b4>
 80167f6:	2b08      	cmp	r3, #8
 80167f8:	f040 80b7 	bne.w	801696a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80167fc:	4b69      	ldr	r3, [pc, #420]	@ (80169a4 <icmp_input+0x1f4>)
 80167fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016800:	4b67      	ldr	r3, [pc, #412]	@ (80169a0 <icmp_input+0x1f0>)
 8016802:	695b      	ldr	r3, [r3, #20]
 8016804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016808:	2be0      	cmp	r3, #224	@ 0xe0
 801680a:	f000 80bb 	beq.w	8016984 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801680e:	4b64      	ldr	r3, [pc, #400]	@ (80169a0 <icmp_input+0x1f0>)
 8016810:	695b      	ldr	r3, [r3, #20]
 8016812:	4a63      	ldr	r2, [pc, #396]	@ (80169a0 <icmp_input+0x1f0>)
 8016814:	6812      	ldr	r2, [r2, #0]
 8016816:	4611      	mov	r1, r2
 8016818:	4618      	mov	r0, r3
 801681a:	f000 fbed 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	f040 80b1 	bne.w	8016988 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	891b      	ldrh	r3, [r3, #8]
 801682a:	2b07      	cmp	r3, #7
 801682c:	f240 80a5 	bls.w	801697a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016830:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016832:	330e      	adds	r3, #14
 8016834:	4619      	mov	r1, r3
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f7f7 fe18 	bl	800e46c <pbuf_add_header>
 801683c:	4603      	mov	r3, r0
 801683e:	2b00      	cmp	r3, #0
 8016840:	d04b      	beq.n	80168da <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	891a      	ldrh	r2, [r3, #8]
 8016846:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016848:	4413      	add	r3, r2
 801684a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	891b      	ldrh	r3, [r3, #8]
 8016850:	8b7a      	ldrh	r2, [r7, #26]
 8016852:	429a      	cmp	r2, r3
 8016854:	f0c0 809a 	bcc.w	801698c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016858:	8b7b      	ldrh	r3, [r7, #26]
 801685a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801685e:	4619      	mov	r1, r3
 8016860:	200e      	movs	r0, #14
 8016862:	f7f7 fbb5 	bl	800dfd0 <pbuf_alloc>
 8016866:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	2b00      	cmp	r3, #0
 801686c:	f000 8090 	beq.w	8016990 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016870:	697b      	ldr	r3, [r7, #20]
 8016872:	895b      	ldrh	r3, [r3, #10]
 8016874:	461a      	mov	r2, r3
 8016876:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016878:	3308      	adds	r3, #8
 801687a:	429a      	cmp	r2, r3
 801687c:	d203      	bcs.n	8016886 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801687e:	6978      	ldr	r0, [r7, #20]
 8016880:	f7f7 fe8a 	bl	800e598 <pbuf_free>
          goto icmperr;
 8016884:	e085      	b.n	8016992 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801688c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801688e:	4618      	mov	r0, r3
 8016890:	f001 ff73 	bl	801877a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016894:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016896:	4619      	mov	r1, r3
 8016898:	6978      	ldr	r0, [r7, #20]
 801689a:	f7f7 fdf7 	bl	800e48c <pbuf_remove_header>
 801689e:	4603      	mov	r3, r0
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d009      	beq.n	80168b8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80168a4:	4b40      	ldr	r3, [pc, #256]	@ (80169a8 <icmp_input+0x1f8>)
 80168a6:	22b6      	movs	r2, #182	@ 0xb6
 80168a8:	4940      	ldr	r1, [pc, #256]	@ (80169ac <icmp_input+0x1fc>)
 80168aa:	4841      	ldr	r0, [pc, #260]	@ (80169b0 <icmp_input+0x200>)
 80168ac:	f001 fddc 	bl	8018468 <iprintf>
          pbuf_free(r);
 80168b0:	6978      	ldr	r0, [r7, #20]
 80168b2:	f7f7 fe71 	bl	800e598 <pbuf_free>
          goto icmperr;
 80168b6:	e06c      	b.n	8016992 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80168b8:	6879      	ldr	r1, [r7, #4]
 80168ba:	6978      	ldr	r0, [r7, #20]
 80168bc:	f7f7 ffa0 	bl	800e800 <pbuf_copy>
 80168c0:	4603      	mov	r3, r0
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d003      	beq.n	80168ce <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80168c6:	6978      	ldr	r0, [r7, #20]
 80168c8:	f7f7 fe66 	bl	800e598 <pbuf_free>
          goto icmperr;
 80168cc:	e061      	b.n	8016992 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7f7 fe62 	bl	800e598 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	607b      	str	r3, [r7, #4]
 80168d8:	e00f      	b.n	80168fa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80168da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168dc:	330e      	adds	r3, #14
 80168de:	4619      	mov	r1, r3
 80168e0:	6878      	ldr	r0, [r7, #4]
 80168e2:	f7f7 fdd3 	bl	800e48c <pbuf_remove_header>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d006      	beq.n	80168fa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80168ec:	4b2e      	ldr	r3, [pc, #184]	@ (80169a8 <icmp_input+0x1f8>)
 80168ee:	22c7      	movs	r2, #199	@ 0xc7
 80168f0:	4930      	ldr	r1, [pc, #192]	@ (80169b4 <icmp_input+0x204>)
 80168f2:	482f      	ldr	r0, [pc, #188]	@ (80169b0 <icmp_input+0x200>)
 80168f4:	f001 fdb8 	bl	8018468 <iprintf>
          goto icmperr;
 80168f8:	e04b      	b.n	8016992 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016900:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016902:	4619      	mov	r1, r3
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f7f7 fdb1 	bl	800e46c <pbuf_add_header>
 801690a:	4603      	mov	r3, r0
 801690c:	2b00      	cmp	r3, #0
 801690e:	d12b      	bne.n	8016968 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016916:	69fb      	ldr	r3, [r7, #28]
 8016918:	681a      	ldr	r2, [r3, #0]
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801691e:	4b20      	ldr	r3, [pc, #128]	@ (80169a0 <icmp_input+0x1f0>)
 8016920:	691a      	ldr	r2, [r3, #16]
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	2200      	movs	r2, #0
 801692a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	2200      	movs	r2, #0
 8016930:	709a      	strb	r2, [r3, #2]
 8016932:	2200      	movs	r2, #0
 8016934:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	22ff      	movs	r2, #255	@ 0xff
 801693a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2200      	movs	r2, #0
 8016940:	729a      	strb	r2, [r3, #10]
 8016942:	2200      	movs	r2, #0
 8016944:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	9302      	str	r3, [sp, #8]
 801694a:	2301      	movs	r3, #1
 801694c:	9301      	str	r3, [sp, #4]
 801694e:	2300      	movs	r3, #0
 8016950:	9300      	str	r3, [sp, #0]
 8016952:	23ff      	movs	r3, #255	@ 0xff
 8016954:	2200      	movs	r2, #0
 8016956:	69f9      	ldr	r1, [r7, #28]
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 fa75 	bl	8016e48 <ip4_output_if>
 801695e:	4603      	mov	r3, r0
 8016960:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016962:	e001      	b.n	8016968 <icmp_input+0x1b8>
      break;
 8016964:	bf00      	nop
 8016966:	e000      	b.n	801696a <icmp_input+0x1ba>
      break;
 8016968:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f7f7 fe14 	bl	800e598 <pbuf_free>
  return;
 8016970:	e013      	b.n	801699a <icmp_input+0x1ea>
    goto lenerr;
 8016972:	bf00      	nop
 8016974:	e002      	b.n	801697c <icmp_input+0x1cc>
    goto lenerr;
 8016976:	bf00      	nop
 8016978:	e000      	b.n	801697c <icmp_input+0x1cc>
        goto lenerr;
 801697a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f7f7 fe0b 	bl	800e598 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016982:	e00a      	b.n	801699a <icmp_input+0x1ea>
        goto icmperr;
 8016984:	bf00      	nop
 8016986:	e004      	b.n	8016992 <icmp_input+0x1e2>
        goto icmperr;
 8016988:	bf00      	nop
 801698a:	e002      	b.n	8016992 <icmp_input+0x1e2>
          goto icmperr;
 801698c:	bf00      	nop
 801698e:	e000      	b.n	8016992 <icmp_input+0x1e2>
          goto icmperr;
 8016990:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	f7f7 fe00 	bl	800e598 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016998:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801699a:	3728      	adds	r7, #40	@ 0x28
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}
 80169a0:	2000b9bc 	.word	0x2000b9bc
 80169a4:	2000b9d0 	.word	0x2000b9d0
 80169a8:	0801cbac 	.word	0x0801cbac
 80169ac:	0801cbe4 	.word	0x0801cbe4
 80169b0:	0801cc1c 	.word	0x0801cc1c
 80169b4:	0801cc44 	.word	0x0801cc44

080169b8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	460b      	mov	r3, r1
 80169c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80169c4:	78fb      	ldrb	r3, [r7, #3]
 80169c6:	461a      	mov	r2, r3
 80169c8:	2103      	movs	r1, #3
 80169ca:	6878      	ldr	r0, [r7, #4]
 80169cc:	f000 f814 	bl	80169f8 <icmp_send_response>
}
 80169d0:	bf00      	nop
 80169d2:	3708      	adds	r7, #8
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}

080169d8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	460b      	mov	r3, r1
 80169e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80169e4:	78fb      	ldrb	r3, [r7, #3]
 80169e6:	461a      	mov	r2, r3
 80169e8:	210b      	movs	r1, #11
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f000 f804 	bl	80169f8 <icmp_send_response>
}
 80169f0:	bf00      	nop
 80169f2:	3708      	adds	r7, #8
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b08c      	sub	sp, #48	@ 0x30
 80169fc:	af04      	add	r7, sp, #16
 80169fe:	6078      	str	r0, [r7, #4]
 8016a00:	460b      	mov	r3, r1
 8016a02:	70fb      	strb	r3, [r7, #3]
 8016a04:	4613      	mov	r3, r2
 8016a06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016a08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016a0c:	2124      	movs	r1, #36	@ 0x24
 8016a0e:	2022      	movs	r0, #34	@ 0x22
 8016a10:	f7f7 fade 	bl	800dfd0 <pbuf_alloc>
 8016a14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d04c      	beq.n	8016ab6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	895b      	ldrh	r3, [r3, #10]
 8016a20:	2b23      	cmp	r3, #35	@ 0x23
 8016a22:	d806      	bhi.n	8016a32 <icmp_send_response+0x3a>
 8016a24:	4b26      	ldr	r3, [pc, #152]	@ (8016ac0 <icmp_send_response+0xc8>)
 8016a26:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016a2a:	4926      	ldr	r1, [pc, #152]	@ (8016ac4 <icmp_send_response+0xcc>)
 8016a2c:	4826      	ldr	r0, [pc, #152]	@ (8016ac8 <icmp_send_response+0xd0>)
 8016a2e:	f001 fd1b 	bl	8018468 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	78fa      	ldrb	r2, [r7, #3]
 8016a42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016a44:	697b      	ldr	r3, [r7, #20]
 8016a46:	78ba      	ldrb	r2, [r7, #2]
 8016a48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	711a      	strb	r2, [r3, #4]
 8016a50:	2200      	movs	r2, #0
 8016a52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016a54:	697b      	ldr	r3, [r7, #20]
 8016a56:	2200      	movs	r2, #0
 8016a58:	719a      	strb	r2, [r3, #6]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	f103 0008 	add.w	r0, r3, #8
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	221c      	movs	r2, #28
 8016a6c:	4619      	mov	r1, r3
 8016a6e:	f001 fe84 	bl	801877a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	68db      	ldr	r3, [r3, #12]
 8016a76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016a78:	f107 030c 	add.w	r3, r7, #12
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f000 f825 	bl	8016acc <ip4_route>
 8016a82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016a84:	693b      	ldr	r3, [r7, #16]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d011      	beq.n	8016aae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	709a      	strb	r2, [r3, #2]
 8016a90:	2200      	movs	r2, #0
 8016a92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016a94:	f107 020c 	add.w	r2, r7, #12
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	9302      	str	r3, [sp, #8]
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	9301      	str	r3, [sp, #4]
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	9300      	str	r3, [sp, #0]
 8016aa4:	23ff      	movs	r3, #255	@ 0xff
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	69f8      	ldr	r0, [r7, #28]
 8016aaa:	f000 f9cd 	bl	8016e48 <ip4_output_if>
  }
  pbuf_free(q);
 8016aae:	69f8      	ldr	r0, [r7, #28]
 8016ab0:	f7f7 fd72 	bl	800e598 <pbuf_free>
 8016ab4:	e000      	b.n	8016ab8 <icmp_send_response+0xc0>
    return;
 8016ab6:	bf00      	nop
}
 8016ab8:	3720      	adds	r7, #32
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
 8016abe:	bf00      	nop
 8016ac0:	0801cbac 	.word	0x0801cbac
 8016ac4:	0801cc78 	.word	0x0801cc78
 8016ac8:	0801cc1c 	.word	0x0801cc1c

08016acc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016acc:	b480      	push	{r7}
 8016ace:	b085      	sub	sp, #20
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016ad4:	4b33      	ldr	r3, [pc, #204]	@ (8016ba4 <ip4_route+0xd8>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	60fb      	str	r3, [r7, #12]
 8016ada:	e036      	b.n	8016b4a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016ae2:	f003 0301 	and.w	r3, r3, #1
 8016ae6:	b2db      	uxtb	r3, r3
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d02b      	beq.n	8016b44 <ip4_route+0x78>
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016af2:	089b      	lsrs	r3, r3, #2
 8016af4:	f003 0301 	and.w	r3, r3, #1
 8016af8:	b2db      	uxtb	r3, r3
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d022      	beq.n	8016b44 <ip4_route+0x78>
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	3304      	adds	r3, #4
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d01d      	beq.n	8016b44 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	405a      	eors	r2, r3
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	3308      	adds	r3, #8
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4013      	ands	r3, r2
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d101      	bne.n	8016b24 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	e038      	b.n	8016b96 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b2a:	f003 0302 	and.w	r3, r3, #2
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d108      	bne.n	8016b44 <ip4_route+0x78>
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	330c      	adds	r3, #12
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d101      	bne.n	8016b44 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	e028      	b.n	8016b96 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	60fb      	str	r3, [r7, #12]
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d1c5      	bne.n	8016adc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b50:	4b15      	ldr	r3, [pc, #84]	@ (8016ba8 <ip4_route+0xdc>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d01a      	beq.n	8016b8e <ip4_route+0xc2>
 8016b58:	4b13      	ldr	r3, [pc, #76]	@ (8016ba8 <ip4_route+0xdc>)
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b60:	f003 0301 	and.w	r3, r3, #1
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d012      	beq.n	8016b8e <ip4_route+0xc2>
 8016b68:	4b0f      	ldr	r3, [pc, #60]	@ (8016ba8 <ip4_route+0xdc>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b70:	f003 0304 	and.w	r3, r3, #4
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d00a      	beq.n	8016b8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b78:	4b0b      	ldr	r3, [pc, #44]	@ (8016ba8 <ip4_route+0xdc>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d004      	beq.n	8016b8e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8016b8c:	d101      	bne.n	8016b92 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	e001      	b.n	8016b96 <ip4_route+0xca>
  }

  return netif_default;
 8016b92:	4b05      	ldr	r3, [pc, #20]	@ (8016ba8 <ip4_route+0xdc>)
 8016b94:	681b      	ldr	r3, [r3, #0]
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3714      	adds	r7, #20
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	2000f104 	.word	0x2000f104
 8016ba8:	2000f108 	.word	0x2000f108

08016bac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b082      	sub	sp, #8
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016bba:	f003 0301 	and.w	r3, r3, #1
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d016      	beq.n	8016bf2 <ip4_input_accept+0x46>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	3304      	adds	r3, #4
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d011      	beq.n	8016bf2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016bce:	4b0b      	ldr	r3, [pc, #44]	@ (8016bfc <ip4_input_accept+0x50>)
 8016bd0:	695a      	ldr	r2, [r3, #20]
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	3304      	adds	r3, #4
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d008      	beq.n	8016bee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016bdc:	4b07      	ldr	r3, [pc, #28]	@ (8016bfc <ip4_input_accept+0x50>)
 8016bde:	695b      	ldr	r3, [r3, #20]
 8016be0:	6879      	ldr	r1, [r7, #4]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f000 fa08 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8016be8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d001      	beq.n	8016bf2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016bee:	2301      	movs	r3, #1
 8016bf0:	e000      	b.n	8016bf4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016bf2:	2300      	movs	r3, #0
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	2000b9bc 	.word	0x2000b9bc

08016c00 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b086      	sub	sp, #24
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	091b      	lsrs	r3, r3, #4
 8016c16:	b2db      	uxtb	r3, r3
 8016c18:	2b04      	cmp	r3, #4
 8016c1a:	d004      	beq.n	8016c26 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7f7 fcbb 	bl	800e598 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016c22:	2300      	movs	r3, #0
 8016c24:	e107      	b.n	8016e36 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016c26:	697b      	ldr	r3, [r7, #20]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	f003 030f 	and.w	r3, r3, #15
 8016c2e:	b2db      	uxtb	r3, r3
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	885b      	ldrh	r3, [r3, #2]
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7f6 f883 	bl	800cd48 <lwip_htons>
 8016c42:	4603      	mov	r3, r0
 8016c44:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	891b      	ldrh	r3, [r3, #8]
 8016c4a:	89ba      	ldrh	r2, [r7, #12]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d204      	bcs.n	8016c5a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016c50:	89bb      	ldrh	r3, [r7, #12]
 8016c52:	4619      	mov	r1, r3
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f7f7 fb19 	bl	800e28c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	895b      	ldrh	r3, [r3, #10]
 8016c5e:	89fa      	ldrh	r2, [r7, #14]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d807      	bhi.n	8016c74 <ip4_input+0x74>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	891b      	ldrh	r3, [r3, #8]
 8016c68:	89ba      	ldrh	r2, [r7, #12]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d802      	bhi.n	8016c74 <ip4_input+0x74>
 8016c6e:	89fb      	ldrh	r3, [r7, #14]
 8016c70:	2b13      	cmp	r3, #19
 8016c72:	d804      	bhi.n	8016c7e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f7f7 fc8f 	bl	800e598 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	e0db      	b.n	8016e36 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	691b      	ldr	r3, [r3, #16]
 8016c82:	4a6f      	ldr	r2, [pc, #444]	@ (8016e40 <ip4_input+0x240>)
 8016c84:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	68db      	ldr	r3, [r3, #12]
 8016c8a:	4a6d      	ldr	r2, [pc, #436]	@ (8016e40 <ip4_input+0x240>)
 8016c8c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8016e40 <ip4_input+0x240>)
 8016c90:	695b      	ldr	r3, [r3, #20]
 8016c92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016c96:	2be0      	cmp	r3, #224	@ 0xe0
 8016c98:	d112      	bne.n	8016cc0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016ca0:	f003 0301 	and.w	r3, r3, #1
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d007      	beq.n	8016cba <ip4_input+0xba>
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	3304      	adds	r3, #4
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d002      	beq.n	8016cba <ip4_input+0xba>
      netif = inp;
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	613b      	str	r3, [r7, #16]
 8016cb8:	e02a      	b.n	8016d10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	613b      	str	r3, [r7, #16]
 8016cbe:	e027      	b.n	8016d10 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016cc0:	6838      	ldr	r0, [r7, #0]
 8016cc2:	f7ff ff73 	bl	8016bac <ip4_input_accept>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d002      	beq.n	8016cd2 <ip4_input+0xd2>
      netif = inp;
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	613b      	str	r3, [r7, #16]
 8016cd0:	e01e      	b.n	8016d10 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8016e40 <ip4_input+0x240>)
 8016cd8:	695b      	ldr	r3, [r3, #20]
 8016cda:	b2db      	uxtb	r3, r3
 8016cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8016cde:	d017      	beq.n	8016d10 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016ce0:	4b58      	ldr	r3, [pc, #352]	@ (8016e44 <ip4_input+0x244>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	613b      	str	r3, [r7, #16]
 8016ce6:	e00e      	b.n	8016d06 <ip4_input+0x106>
          if (netif == inp) {
 8016ce8:	693a      	ldr	r2, [r7, #16]
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d006      	beq.n	8016cfe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016cf0:	6938      	ldr	r0, [r7, #16]
 8016cf2:	f7ff ff5b 	bl	8016bac <ip4_input_accept>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d108      	bne.n	8016d0e <ip4_input+0x10e>
 8016cfc:	e000      	b.n	8016d00 <ip4_input+0x100>
            continue;
 8016cfe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	613b      	str	r3, [r7, #16]
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d1ed      	bne.n	8016ce8 <ip4_input+0xe8>
 8016d0c:	e000      	b.n	8016d10 <ip4_input+0x110>
            break;
 8016d0e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d10:	4b4b      	ldr	r3, [pc, #300]	@ (8016e40 <ip4_input+0x240>)
 8016d12:	691b      	ldr	r3, [r3, #16]
 8016d14:	6839      	ldr	r1, [r7, #0]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f000 f96e 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d105      	bne.n	8016d2e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016d22:	4b47      	ldr	r3, [pc, #284]	@ (8016e40 <ip4_input+0x240>)
 8016d24:	691b      	ldr	r3, [r3, #16]
 8016d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016d2a:	2be0      	cmp	r3, #224	@ 0xe0
 8016d2c:	d104      	bne.n	8016d38 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016d2e:	6878      	ldr	r0, [r7, #4]
 8016d30:	f7f7 fc32 	bl	800e598 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016d34:	2300      	movs	r3, #0
 8016d36:	e07e      	b.n	8016e36 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d104      	bne.n	8016d48 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f7f7 fc2a 	bl	800e598 <pbuf_free>
    return ERR_OK;
 8016d44:	2300      	movs	r3, #0
 8016d46:	e076      	b.n	8016e36 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	88db      	ldrh	r3, [r3, #6]
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	461a      	mov	r2, r3
 8016d50:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016d54:	4013      	ands	r3, r2
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d00b      	beq.n	8016d72 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	f000 fc92 	bl	8017684 <ip4_reass>
 8016d60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d101      	bne.n	8016d6c <ip4_input+0x16c>
      return ERR_OK;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	e064      	b.n	8016e36 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	685b      	ldr	r3, [r3, #4]
 8016d70:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016d72:	4a33      	ldr	r2, [pc, #204]	@ (8016e40 <ip4_input+0x240>)
 8016d74:	693b      	ldr	r3, [r7, #16]
 8016d76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016d78:	4a31      	ldr	r2, [pc, #196]	@ (8016e40 <ip4_input+0x240>)
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016d7e:	4a30      	ldr	r2, [pc, #192]	@ (8016e40 <ip4_input+0x240>)
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	f003 030f 	and.w	r3, r3, #15
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	b2db      	uxtb	r3, r3
 8016d92:	461a      	mov	r2, r3
 8016d94:	4b2a      	ldr	r3, [pc, #168]	@ (8016e40 <ip4_input+0x240>)
 8016d96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016d98:	89fb      	ldrh	r3, [r7, #14]
 8016d9a:	4619      	mov	r1, r3
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f7f7 fb75 	bl	800e48c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	7a5b      	ldrb	r3, [r3, #9]
 8016da6:	2b11      	cmp	r3, #17
 8016da8:	d006      	beq.n	8016db8 <ip4_input+0x1b8>
 8016daa:	2b11      	cmp	r3, #17
 8016dac:	dc13      	bgt.n	8016dd6 <ip4_input+0x1d6>
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	d00c      	beq.n	8016dcc <ip4_input+0x1cc>
 8016db2:	2b06      	cmp	r3, #6
 8016db4:	d005      	beq.n	8016dc2 <ip4_input+0x1c2>
 8016db6:	e00e      	b.n	8016dd6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016db8:	6839      	ldr	r1, [r7, #0]
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f7fe f970 	bl	80150a0 <udp_input>
        break;
 8016dc0:	e026      	b.n	8016e10 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016dc2:	6839      	ldr	r1, [r7, #0]
 8016dc4:	6878      	ldr	r0, [r7, #4]
 8016dc6:	f7f9 fd2f 	bl	8010828 <tcp_input>
        break;
 8016dca:	e021      	b.n	8016e10 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016dcc:	6839      	ldr	r1, [r7, #0]
 8016dce:	6878      	ldr	r0, [r7, #4]
 8016dd0:	f7ff fcee 	bl	80167b0 <icmp_input>
        break;
 8016dd4:	e01c      	b.n	8016e10 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8016e40 <ip4_input+0x240>)
 8016dd8:	695b      	ldr	r3, [r3, #20]
 8016dda:	6939      	ldr	r1, [r7, #16]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 f90b 	bl	8016ff8 <ip4_addr_isbroadcast_u32>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d10f      	bne.n	8016e08 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016de8:	4b15      	ldr	r3, [pc, #84]	@ (8016e40 <ip4_input+0x240>)
 8016dea:	695b      	ldr	r3, [r3, #20]
 8016dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016df0:	2be0      	cmp	r3, #224	@ 0xe0
 8016df2:	d009      	beq.n	8016e08 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f7f7 fbb9 	bl	800e572 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016e00:	2102      	movs	r1, #2
 8016e02:	6878      	ldr	r0, [r7, #4]
 8016e04:	f7ff fdd8 	bl	80169b8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f7f7 fbc5 	bl	800e598 <pbuf_free>
        break;
 8016e0e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016e10:	4b0b      	ldr	r3, [pc, #44]	@ (8016e40 <ip4_input+0x240>)
 8016e12:	2200      	movs	r2, #0
 8016e14:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016e16:	4b0a      	ldr	r3, [pc, #40]	@ (8016e40 <ip4_input+0x240>)
 8016e18:	2200      	movs	r2, #0
 8016e1a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016e1c:	4b08      	ldr	r3, [pc, #32]	@ (8016e40 <ip4_input+0x240>)
 8016e1e:	2200      	movs	r2, #0
 8016e20:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016e22:	4b07      	ldr	r3, [pc, #28]	@ (8016e40 <ip4_input+0x240>)
 8016e24:	2200      	movs	r2, #0
 8016e26:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016e28:	4b05      	ldr	r3, [pc, #20]	@ (8016e40 <ip4_input+0x240>)
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016e2e:	4b04      	ldr	r3, [pc, #16]	@ (8016e40 <ip4_input+0x240>)
 8016e30:	2200      	movs	r2, #0
 8016e32:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016e34:	2300      	movs	r3, #0
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3718      	adds	r7, #24
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	2000b9bc 	.word	0x2000b9bc
 8016e44:	2000f104 	.word	0x2000f104

08016e48 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b08a      	sub	sp, #40	@ 0x28
 8016e4c:	af04      	add	r7, sp, #16
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	607a      	str	r2, [r7, #4]
 8016e54:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d009      	beq.n	8016e74 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d003      	beq.n	8016e6e <ip4_output_if+0x26>
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d102      	bne.n	8016e74 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e70:	3304      	adds	r3, #4
 8016e72:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016e74:	78fa      	ldrb	r2, [r7, #3]
 8016e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e78:	9302      	str	r3, [sp, #8]
 8016e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016e7e:	9301      	str	r3, [sp, #4]
 8016e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	4613      	mov	r3, r2
 8016e88:	687a      	ldr	r2, [r7, #4]
 8016e8a:	6979      	ldr	r1, [r7, #20]
 8016e8c:	68f8      	ldr	r0, [r7, #12]
 8016e8e:	f000 f805 	bl	8016e9c <ip4_output_if_src>
 8016e92:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3718      	adds	r7, #24
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	bd80      	pop	{r7, pc}

08016e9c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b088      	sub	sp, #32
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
 8016ea8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	7b9b      	ldrb	r3, [r3, #14]
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d006      	beq.n	8016ec0 <ip4_output_if_src+0x24>
 8016eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8016fe0 <ip4_output_if_src+0x144>)
 8016eb4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016eb8:	494a      	ldr	r1, [pc, #296]	@ (8016fe4 <ip4_output_if_src+0x148>)
 8016eba:	484b      	ldr	r0, [pc, #300]	@ (8016fe8 <ip4_output_if_src+0x14c>)
 8016ebc:	f001 fad4 	bl	8018468 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d060      	beq.n	8016f88 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016ec6:	2314      	movs	r3, #20
 8016ec8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016eca:	2114      	movs	r1, #20
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f7f7 facd 	bl	800e46c <pbuf_add_header>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d002      	beq.n	8016ede <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016ed8:	f06f 0301 	mvn.w	r3, #1
 8016edc:	e07c      	b.n	8016fd8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	895b      	ldrh	r3, [r3, #10]
 8016ee8:	2b13      	cmp	r3, #19
 8016eea:	d806      	bhi.n	8016efa <ip4_output_if_src+0x5e>
 8016eec:	4b3c      	ldr	r3, [pc, #240]	@ (8016fe0 <ip4_output_if_src+0x144>)
 8016eee:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016ef2:	493e      	ldr	r1, [pc, #248]	@ (8016fec <ip4_output_if_src+0x150>)
 8016ef4:	483c      	ldr	r0, [pc, #240]	@ (8016fe8 <ip4_output_if_src+0x14c>)
 8016ef6:	f001 fab7 	bl	8018468 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016efa:	69fb      	ldr	r3, [r7, #28]
 8016efc:	78fa      	ldrb	r2, [r7, #3]
 8016efe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016f00:	69fb      	ldr	r3, [r7, #28]
 8016f02:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016f06:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681a      	ldr	r2, [r3, #0]
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016f10:	8b7b      	ldrh	r3, [r7, #26]
 8016f12:	089b      	lsrs	r3, r3, #2
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	b2db      	uxtb	r3, r3
 8016f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f1c:	b2da      	uxtb	r2, r3
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016f22:	69fb      	ldr	r3, [r7, #28]
 8016f24:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016f28:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	891b      	ldrh	r3, [r3, #8]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7f5 ff0a 	bl	800cd48 <lwip_htons>
 8016f34:	4603      	mov	r3, r0
 8016f36:	461a      	mov	r2, r3
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	2200      	movs	r2, #0
 8016f40:	719a      	strb	r2, [r3, #6]
 8016f42:	2200      	movs	r2, #0
 8016f44:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016f46:	4b2a      	ldr	r3, [pc, #168]	@ (8016ff0 <ip4_output_if_src+0x154>)
 8016f48:	881b      	ldrh	r3, [r3, #0]
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7f5 fefc 	bl	800cd48 <lwip_htons>
 8016f50:	4603      	mov	r3, r0
 8016f52:	461a      	mov	r2, r3
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016f58:	4b25      	ldr	r3, [pc, #148]	@ (8016ff0 <ip4_output_if_src+0x154>)
 8016f5a:	881b      	ldrh	r3, [r3, #0]
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	b29a      	uxth	r2, r3
 8016f60:	4b23      	ldr	r3, [pc, #140]	@ (8016ff0 <ip4_output_if_src+0x154>)
 8016f62:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d104      	bne.n	8016f74 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016f6a:	4b22      	ldr	r3, [pc, #136]	@ (8016ff4 <ip4_output_if_src+0x158>)
 8016f6c:	681a      	ldr	r2, [r3, #0]
 8016f6e:	69fb      	ldr	r3, [r7, #28]
 8016f70:	60da      	str	r2, [r3, #12]
 8016f72:	e003      	b.n	8016f7c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016f74:	68bb      	ldr	r3, [r7, #8]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	729a      	strb	r2, [r3, #10]
 8016f82:	2200      	movs	r2, #0
 8016f84:	72da      	strb	r2, [r3, #11]
 8016f86:	e00f      	b.n	8016fa8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	895b      	ldrh	r3, [r3, #10]
 8016f8c:	2b13      	cmp	r3, #19
 8016f8e:	d802      	bhi.n	8016f96 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016f90:	f06f 0301 	mvn.w	r3, #1
 8016f94:	e020      	b.n	8016fd8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	691b      	ldr	r3, [r3, #16]
 8016fa0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016fa2:	f107 0314 	add.w	r3, r7, #20
 8016fa6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016faa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d00c      	beq.n	8016fca <ip4_output_if_src+0x12e>
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	891a      	ldrh	r2, [r3, #8]
 8016fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	d906      	bls.n	8016fca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016fc0:	68f8      	ldr	r0, [r7, #12]
 8016fc2:	f000 fd53 	bl	8017a6c <ip4_frag>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	e006      	b.n	8016fd8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fcc:	695b      	ldr	r3, [r3, #20]
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	68f9      	ldr	r1, [r7, #12]
 8016fd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016fd4:	4798      	blx	r3
 8016fd6:	4603      	mov	r3, r0
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3720      	adds	r7, #32
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	0801cca4 	.word	0x0801cca4
 8016fe4:	0801ccd8 	.word	0x0801ccd8
 8016fe8:	0801cce4 	.word	0x0801cce4
 8016fec:	0801cd0c 	.word	0x0801cd0c
 8016ff0:	2000f262 	.word	0x2000f262
 8016ff4:	0801ddf0 	.word	0x0801ddf0

08016ff8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016ff8:	b480      	push	{r7}
 8016ffa:	b085      	sub	sp, #20
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
 8017000:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700c:	d002      	beq.n	8017014 <ip4_addr_isbroadcast_u32+0x1c>
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d101      	bne.n	8017018 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017014:	2301      	movs	r3, #1
 8017016:	e02a      	b.n	801706e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801701e:	f003 0302 	and.w	r3, r3, #2
 8017022:	2b00      	cmp	r3, #0
 8017024:	d101      	bne.n	801702a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017026:	2300      	movs	r3, #0
 8017028:	e021      	b.n	801706e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	3304      	adds	r3, #4
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	687a      	ldr	r2, [r7, #4]
 8017032:	429a      	cmp	r2, r3
 8017034:	d101      	bne.n	801703a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017036:	2300      	movs	r3, #0
 8017038:	e019      	b.n	801706e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801703a:	68fa      	ldr	r2, [r7, #12]
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	3304      	adds	r3, #4
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	405a      	eors	r2, r3
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	3308      	adds	r3, #8
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	4013      	ands	r3, r2
 801704c:	2b00      	cmp	r3, #0
 801704e:	d10d      	bne.n	801706c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	3308      	adds	r3, #8
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	43da      	mvns	r2, r3
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801705c:	683b      	ldr	r3, [r7, #0]
 801705e:	3308      	adds	r3, #8
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017064:	429a      	cmp	r2, r3
 8017066:	d101      	bne.n	801706c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017068:	2301      	movs	r3, #1
 801706a:	e000      	b.n	801706e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801706c:	2300      	movs	r3, #0
  }
}
 801706e:	4618      	mov	r0, r3
 8017070:	3714      	adds	r7, #20
 8017072:	46bd      	mov	sp, r7
 8017074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017078:	4770      	bx	lr
	...

0801707c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b084      	sub	sp, #16
 8017080:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017082:	2300      	movs	r3, #0
 8017084:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017086:	4b12      	ldr	r3, [pc, #72]	@ (80170d0 <ip_reass_tmr+0x54>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801708c:	e018      	b.n	80170c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	7fdb      	ldrb	r3, [r3, #31]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00b      	beq.n	80170ae <ip_reass_tmr+0x32>
      r->timer--;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	7fdb      	ldrb	r3, [r3, #31]
 801709a:	3b01      	subs	r3, #1
 801709c:	b2da      	uxtb	r2, r3
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	60fb      	str	r3, [r7, #12]
 80170ac:	e008      	b.n	80170c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80170b8:	68b9      	ldr	r1, [r7, #8]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 f80a 	bl	80170d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d1e3      	bne.n	801708e <ip_reass_tmr+0x12>
    }
  }
}
 80170c6:	bf00      	nop
 80170c8:	bf00      	nop
 80170ca:	3710      	adds	r7, #16
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}
 80170d0:	2000f264 	.word	0x2000f264

080170d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b088      	sub	sp, #32
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
 80170dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80170e2:	683a      	ldr	r2, [r7, #0]
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d105      	bne.n	80170f6 <ip_reass_free_complete_datagram+0x22>
 80170ea:	4b45      	ldr	r3, [pc, #276]	@ (8017200 <ip_reass_free_complete_datagram+0x12c>)
 80170ec:	22ab      	movs	r2, #171	@ 0xab
 80170ee:	4945      	ldr	r1, [pc, #276]	@ (8017204 <ip_reass_free_complete_datagram+0x130>)
 80170f0:	4845      	ldr	r0, [pc, #276]	@ (8017208 <ip_reass_free_complete_datagram+0x134>)
 80170f2:	f001 f9b9 	bl	8018468 <iprintf>
  if (prev != NULL) {
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d00a      	beq.n	8017112 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	687a      	ldr	r2, [r7, #4]
 8017102:	429a      	cmp	r2, r3
 8017104:	d005      	beq.n	8017112 <ip_reass_free_complete_datagram+0x3e>
 8017106:	4b3e      	ldr	r3, [pc, #248]	@ (8017200 <ip_reass_free_complete_datagram+0x12c>)
 8017108:	22ad      	movs	r2, #173	@ 0xad
 801710a:	4940      	ldr	r1, [pc, #256]	@ (801720c <ip_reass_free_complete_datagram+0x138>)
 801710c:	483e      	ldr	r0, [pc, #248]	@ (8017208 <ip_reass_free_complete_datagram+0x134>)
 801710e:	f001 f9ab 	bl	8018468 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	889b      	ldrh	r3, [r3, #4]
 801711e:	b29b      	uxth	r3, r3
 8017120:	2b00      	cmp	r3, #0
 8017122:	d12a      	bne.n	801717a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017132:	69bb      	ldr	r3, [r7, #24]
 8017134:	6858      	ldr	r0, [r3, #4]
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	3308      	adds	r3, #8
 801713a:	2214      	movs	r2, #20
 801713c:	4619      	mov	r1, r3
 801713e:	f001 fb1c 	bl	801877a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017142:	2101      	movs	r1, #1
 8017144:	69b8      	ldr	r0, [r7, #24]
 8017146:	f7ff fc47 	bl	80169d8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801714a:	69b8      	ldr	r0, [r7, #24]
 801714c:	f7f7 fab2 	bl	800e6b4 <pbuf_clen>
 8017150:	4603      	mov	r3, r0
 8017152:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017154:	8bfa      	ldrh	r2, [r7, #30]
 8017156:	8a7b      	ldrh	r3, [r7, #18]
 8017158:	4413      	add	r3, r2
 801715a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801715e:	db05      	blt.n	801716c <ip_reass_free_complete_datagram+0x98>
 8017160:	4b27      	ldr	r3, [pc, #156]	@ (8017200 <ip_reass_free_complete_datagram+0x12c>)
 8017162:	22bc      	movs	r2, #188	@ 0xbc
 8017164:	492a      	ldr	r1, [pc, #168]	@ (8017210 <ip_reass_free_complete_datagram+0x13c>)
 8017166:	4828      	ldr	r0, [pc, #160]	@ (8017208 <ip_reass_free_complete_datagram+0x134>)
 8017168:	f001 f97e 	bl	8018468 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801716c:	8bfa      	ldrh	r2, [r7, #30]
 801716e:	8a7b      	ldrh	r3, [r7, #18]
 8017170:	4413      	add	r3, r2
 8017172:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017174:	69b8      	ldr	r0, [r7, #24]
 8017176:	f7f7 fa0f 	bl	800e598 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	685b      	ldr	r3, [r3, #4]
 801717e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017180:	e01f      	b.n	80171c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017182:	69bb      	ldr	r3, [r7, #24]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017188:	69bb      	ldr	r3, [r7, #24]
 801718a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017192:	68f8      	ldr	r0, [r7, #12]
 8017194:	f7f7 fa8e 	bl	800e6b4 <pbuf_clen>
 8017198:	4603      	mov	r3, r0
 801719a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801719c:	8bfa      	ldrh	r2, [r7, #30]
 801719e:	8a7b      	ldrh	r3, [r7, #18]
 80171a0:	4413      	add	r3, r2
 80171a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80171a6:	db05      	blt.n	80171b4 <ip_reass_free_complete_datagram+0xe0>
 80171a8:	4b15      	ldr	r3, [pc, #84]	@ (8017200 <ip_reass_free_complete_datagram+0x12c>)
 80171aa:	22cc      	movs	r2, #204	@ 0xcc
 80171ac:	4918      	ldr	r1, [pc, #96]	@ (8017210 <ip_reass_free_complete_datagram+0x13c>)
 80171ae:	4816      	ldr	r0, [pc, #88]	@ (8017208 <ip_reass_free_complete_datagram+0x134>)
 80171b0:	f001 f95a 	bl	8018468 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80171b4:	8bfa      	ldrh	r2, [r7, #30]
 80171b6:	8a7b      	ldrh	r3, [r7, #18]
 80171b8:	4413      	add	r3, r2
 80171ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80171bc:	68f8      	ldr	r0, [r7, #12]
 80171be:	f7f7 f9eb 	bl	800e598 <pbuf_free>
  while (p != NULL) {
 80171c2:	69bb      	ldr	r3, [r7, #24]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d1dc      	bne.n	8017182 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80171c8:	6839      	ldr	r1, [r7, #0]
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f000 f8c2 	bl	8017354 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80171d0:	4b10      	ldr	r3, [pc, #64]	@ (8017214 <ip_reass_free_complete_datagram+0x140>)
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	8bfa      	ldrh	r2, [r7, #30]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d905      	bls.n	80171e6 <ip_reass_free_complete_datagram+0x112>
 80171da:	4b09      	ldr	r3, [pc, #36]	@ (8017200 <ip_reass_free_complete_datagram+0x12c>)
 80171dc:	22d2      	movs	r2, #210	@ 0xd2
 80171de:	490e      	ldr	r1, [pc, #56]	@ (8017218 <ip_reass_free_complete_datagram+0x144>)
 80171e0:	4809      	ldr	r0, [pc, #36]	@ (8017208 <ip_reass_free_complete_datagram+0x134>)
 80171e2:	f001 f941 	bl	8018468 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80171e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017214 <ip_reass_free_complete_datagram+0x140>)
 80171e8:	881a      	ldrh	r2, [r3, #0]
 80171ea:	8bfb      	ldrh	r3, [r7, #30]
 80171ec:	1ad3      	subs	r3, r2, r3
 80171ee:	b29a      	uxth	r2, r3
 80171f0:	4b08      	ldr	r3, [pc, #32]	@ (8017214 <ip_reass_free_complete_datagram+0x140>)
 80171f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80171f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3720      	adds	r7, #32
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	0801cd3c 	.word	0x0801cd3c
 8017204:	0801cd78 	.word	0x0801cd78
 8017208:	0801cd84 	.word	0x0801cd84
 801720c:	0801cdac 	.word	0x0801cdac
 8017210:	0801cdc0 	.word	0x0801cdc0
 8017214:	2000f268 	.word	0x2000f268
 8017218:	0801cde0 	.word	0x0801cde0

0801721c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b08a      	sub	sp, #40	@ 0x28
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017226:	2300      	movs	r3, #0
 8017228:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801722a:	2300      	movs	r3, #0
 801722c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801722e:	2300      	movs	r3, #0
 8017230:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017232:	2300      	movs	r3, #0
 8017234:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017236:	2300      	movs	r3, #0
 8017238:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801723a:	4b28      	ldr	r3, [pc, #160]	@ (80172dc <ip_reass_remove_oldest_datagram+0xc0>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017240:	e030      	b.n	80172a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017244:	695a      	ldr	r2, [r3, #20]
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	68db      	ldr	r3, [r3, #12]
 801724a:	429a      	cmp	r2, r3
 801724c:	d10c      	bne.n	8017268 <ip_reass_remove_oldest_datagram+0x4c>
 801724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017250:	699a      	ldr	r2, [r3, #24]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	691b      	ldr	r3, [r3, #16]
 8017256:	429a      	cmp	r2, r3
 8017258:	d106      	bne.n	8017268 <ip_reass_remove_oldest_datagram+0x4c>
 801725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801725c:	899a      	ldrh	r2, [r3, #12]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	889b      	ldrh	r3, [r3, #4]
 8017262:	b29b      	uxth	r3, r3
 8017264:	429a      	cmp	r2, r3
 8017266:	d014      	beq.n	8017292 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	3301      	adds	r3, #1
 801726c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801726e:	6a3b      	ldr	r3, [r7, #32]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d104      	bne.n	801727e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017276:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	61bb      	str	r3, [r7, #24]
 801727c:	e009      	b.n	8017292 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017280:	7fda      	ldrb	r2, [r3, #31]
 8017282:	6a3b      	ldr	r3, [r7, #32]
 8017284:	7fdb      	ldrb	r3, [r3, #31]
 8017286:	429a      	cmp	r2, r3
 8017288:	d803      	bhi.n	8017292 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801728c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d001      	beq.n	801729e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801729a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801729c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80172a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d1cb      	bne.n	8017242 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80172aa:	6a3b      	ldr	r3, [r7, #32]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d008      	beq.n	80172c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80172b0:	69b9      	ldr	r1, [r7, #24]
 80172b2:	6a38      	ldr	r0, [r7, #32]
 80172b4:	f7ff ff0e 	bl	80170d4 <ip_reass_free_complete_datagram>
 80172b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80172ba:	697a      	ldr	r2, [r7, #20]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	4413      	add	r3, r2
 80172c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80172c2:	697a      	ldr	r2, [r7, #20]
 80172c4:	683b      	ldr	r3, [r7, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	da02      	bge.n	80172d0 <ip_reass_remove_oldest_datagram+0xb4>
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	2b01      	cmp	r3, #1
 80172ce:	dcac      	bgt.n	801722a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80172d0:	697b      	ldr	r3, [r7, #20]
}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3728      	adds	r7, #40	@ 0x28
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	2000f264 	.word	0x2000f264

080172e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b084      	sub	sp, #16
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80172ea:	2004      	movs	r0, #4
 80172ec:	f7f6 fa3a 	bl	800d764 <memp_malloc>
 80172f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d110      	bne.n	801731a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80172f8:	6839      	ldr	r1, [r7, #0]
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f7ff ff8e 	bl	801721c <ip_reass_remove_oldest_datagram>
 8017300:	4602      	mov	r2, r0
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	4293      	cmp	r3, r2
 8017306:	dc03      	bgt.n	8017310 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017308:	2004      	movs	r0, #4
 801730a:	f7f6 fa2b 	bl	800d764 <memp_malloc>
 801730e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d101      	bne.n	801731a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017316:	2300      	movs	r3, #0
 8017318:	e016      	b.n	8017348 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801731a:	2220      	movs	r2, #32
 801731c:	2100      	movs	r1, #0
 801731e:	68f8      	ldr	r0, [r7, #12]
 8017320:	f001 f941 	bl	80185a6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	220f      	movs	r2, #15
 8017328:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801732a:	4b09      	ldr	r3, [pc, #36]	@ (8017350 <ip_reass_enqueue_new_datagram+0x70>)
 801732c:	681a      	ldr	r2, [r3, #0]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017332:	4a07      	ldr	r2, [pc, #28]	@ (8017350 <ip_reass_enqueue_new_datagram+0x70>)
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	3308      	adds	r3, #8
 801733c:	2214      	movs	r2, #20
 801733e:	6879      	ldr	r1, [r7, #4]
 8017340:	4618      	mov	r0, r3
 8017342:	f001 fa1a 	bl	801877a <memcpy>
  return ipr;
 8017346:	68fb      	ldr	r3, [r7, #12]
}
 8017348:	4618      	mov	r0, r3
 801734a:	3710      	adds	r7, #16
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	2000f264 	.word	0x2000f264

08017354 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b082      	sub	sp, #8
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
 801735c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801735e:	4b10      	ldr	r3, [pc, #64]	@ (80173a0 <ip_reass_dequeue_datagram+0x4c>)
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	687a      	ldr	r2, [r7, #4]
 8017364:	429a      	cmp	r2, r3
 8017366:	d104      	bne.n	8017372 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	4a0c      	ldr	r2, [pc, #48]	@ (80173a0 <ip_reass_dequeue_datagram+0x4c>)
 801736e:	6013      	str	r3, [r2, #0]
 8017370:	e00d      	b.n	801738e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d106      	bne.n	8017386 <ip_reass_dequeue_datagram+0x32>
 8017378:	4b0a      	ldr	r3, [pc, #40]	@ (80173a4 <ip_reass_dequeue_datagram+0x50>)
 801737a:	f240 1245 	movw	r2, #325	@ 0x145
 801737e:	490a      	ldr	r1, [pc, #40]	@ (80173a8 <ip_reass_dequeue_datagram+0x54>)
 8017380:	480a      	ldr	r0, [pc, #40]	@ (80173ac <ip_reass_dequeue_datagram+0x58>)
 8017382:	f001 f871 	bl	8018468 <iprintf>
    prev->next = ipr->next;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801738e:	6879      	ldr	r1, [r7, #4]
 8017390:	2004      	movs	r0, #4
 8017392:	f7f6 fa5d 	bl	800d850 <memp_free>
}
 8017396:	bf00      	nop
 8017398:	3708      	adds	r7, #8
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	2000f264 	.word	0x2000f264
 80173a4:	0801cd3c 	.word	0x0801cd3c
 80173a8:	0801ce04 	.word	0x0801ce04
 80173ac:	0801cd84 	.word	0x0801cd84

080173b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b08c      	sub	sp, #48	@ 0x30
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80173bc:	2300      	movs	r3, #0
 80173be:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80173c0:	2301      	movs	r3, #1
 80173c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	885b      	ldrh	r3, [r3, #2]
 80173ce:	b29b      	uxth	r3, r3
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7f5 fcb9 	bl	800cd48 <lwip_htons>
 80173d6:	4603      	mov	r3, r0
 80173d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	f003 030f 	and.w	r3, r3, #15
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80173e8:	7e7b      	ldrb	r3, [r7, #25]
 80173ea:	b29b      	uxth	r3, r3
 80173ec:	8b7a      	ldrh	r2, [r7, #26]
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d202      	bcs.n	80173f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80173f2:	f04f 33ff 	mov.w	r3, #4294967295
 80173f6:	e135      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80173f8:	7e7b      	ldrb	r3, [r7, #25]
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	8b7a      	ldrh	r2, [r7, #26]
 80173fe:	1ad3      	subs	r3, r2, r3
 8017400:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	88db      	ldrh	r3, [r3, #6]
 8017406:	b29b      	uxth	r3, r3
 8017408:	4618      	mov	r0, r3
 801740a:	f7f5 fc9d 	bl	800cd48 <lwip_htons>
 801740e:	4603      	mov	r3, r0
 8017410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017414:	b29b      	uxth	r3, r3
 8017416:	00db      	lsls	r3, r3, #3
 8017418:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017422:	2200      	movs	r2, #0
 8017424:	701a      	strb	r2, [r3, #0]
 8017426:	2200      	movs	r2, #0
 8017428:	705a      	strb	r2, [r3, #1]
 801742a:	2200      	movs	r2, #0
 801742c:	709a      	strb	r2, [r3, #2]
 801742e:	2200      	movs	r2, #0
 8017430:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017434:	8afa      	ldrh	r2, [r7, #22]
 8017436:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017438:	8afa      	ldrh	r2, [r7, #22]
 801743a:	8b7b      	ldrh	r3, [r7, #26]
 801743c:	4413      	add	r3, r2
 801743e:	b29a      	uxth	r2, r3
 8017440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017442:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017446:	88db      	ldrh	r3, [r3, #6]
 8017448:	b29b      	uxth	r3, r3
 801744a:	8afa      	ldrh	r2, [r7, #22]
 801744c:	429a      	cmp	r2, r3
 801744e:	d902      	bls.n	8017456 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017450:	f04f 33ff 	mov.w	r3, #4294967295
 8017454:	e106      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	685b      	ldr	r3, [r3, #4]
 801745a:	627b      	str	r3, [r7, #36]	@ 0x24
 801745c:	e068      	b.n	8017530 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017466:	889b      	ldrh	r3, [r3, #4]
 8017468:	b29a      	uxth	r2, r3
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	889b      	ldrh	r3, [r3, #4]
 801746e:	b29b      	uxth	r3, r3
 8017470:	429a      	cmp	r2, r3
 8017472:	d235      	bcs.n	80174e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017478:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801747c:	2b00      	cmp	r3, #0
 801747e:	d020      	beq.n	80174c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017482:	889b      	ldrh	r3, [r3, #4]
 8017484:	b29a      	uxth	r2, r3
 8017486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017488:	88db      	ldrh	r3, [r3, #6]
 801748a:	b29b      	uxth	r3, r3
 801748c:	429a      	cmp	r2, r3
 801748e:	d307      	bcc.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017492:	88db      	ldrh	r3, [r3, #6]
 8017494:	b29a      	uxth	r2, r3
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	889b      	ldrh	r3, [r3, #4]
 801749a:	b29b      	uxth	r3, r3
 801749c:	429a      	cmp	r2, r3
 801749e:	d902      	bls.n	80174a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174a0:	f04f 33ff 	mov.w	r3, #4294967295
 80174a4:	e0de      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80174a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174a8:	68ba      	ldr	r2, [r7, #8]
 80174aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80174ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ae:	88db      	ldrh	r3, [r3, #6]
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174b4:	889b      	ldrh	r3, [r3, #4]
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d03d      	beq.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80174bc:	2300      	movs	r3, #0
 80174be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80174c0:	e03a      	b.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80174c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c4:	88db      	ldrh	r3, [r3, #6]
 80174c6:	b29a      	uxth	r2, r3
 80174c8:	693b      	ldr	r3, [r7, #16]
 80174ca:	889b      	ldrh	r3, [r3, #4]
 80174cc:	b29b      	uxth	r3, r3
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d902      	bls.n	80174d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174d2:	f04f 33ff 	mov.w	r3, #4294967295
 80174d6:	e0c5      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	68ba      	ldr	r2, [r7, #8]
 80174dc:	605a      	str	r2, [r3, #4]
      break;
 80174de:	e02b      	b.n	8017538 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80174e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e2:	889b      	ldrh	r3, [r3, #4]
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	889b      	ldrh	r3, [r3, #4]
 80174ea:	b29b      	uxth	r3, r3
 80174ec:	429a      	cmp	r2, r3
 80174ee:	d102      	bne.n	80174f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80174f0:	f04f 33ff 	mov.w	r3, #4294967295
 80174f4:	e0b6      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80174f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174f8:	889b      	ldrh	r3, [r3, #4]
 80174fa:	b29a      	uxth	r2, r3
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	88db      	ldrh	r3, [r3, #6]
 8017500:	b29b      	uxth	r3, r3
 8017502:	429a      	cmp	r2, r3
 8017504:	d202      	bcs.n	801750c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017506:	f04f 33ff 	mov.w	r3, #4294967295
 801750a:	e0ab      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801750e:	2b00      	cmp	r3, #0
 8017510:	d009      	beq.n	8017526 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017514:	88db      	ldrh	r3, [r3, #6]
 8017516:	b29a      	uxth	r2, r3
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	889b      	ldrh	r3, [r3, #4]
 801751c:	b29b      	uxth	r3, r3
 801751e:	429a      	cmp	r2, r3
 8017520:	d001      	beq.n	8017526 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017522:	2300      	movs	r3, #0
 8017524:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017532:	2b00      	cmp	r3, #0
 8017534:	d193      	bne.n	801745e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017536:	e000      	b.n	801753a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017538:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801753c:	2b00      	cmp	r3, #0
 801753e:	d12d      	bne.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017542:	2b00      	cmp	r3, #0
 8017544:	d01c      	beq.n	8017580 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017548:	88db      	ldrh	r3, [r3, #6]
 801754a:	b29a      	uxth	r2, r3
 801754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801754e:	889b      	ldrh	r3, [r3, #4]
 8017550:	b29b      	uxth	r3, r3
 8017552:	429a      	cmp	r2, r3
 8017554:	d906      	bls.n	8017564 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017556:	4b45      	ldr	r3, [pc, #276]	@ (801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017558:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801755c:	4944      	ldr	r1, [pc, #272]	@ (8017670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801755e:	4845      	ldr	r0, [pc, #276]	@ (8017674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017560:	f000 ff82 	bl	8018468 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017566:	68ba      	ldr	r2, [r7, #8]
 8017568:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801756c:	88db      	ldrh	r3, [r3, #6]
 801756e:	b29a      	uxth	r2, r3
 8017570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017572:	889b      	ldrh	r3, [r3, #4]
 8017574:	b29b      	uxth	r3, r3
 8017576:	429a      	cmp	r2, r3
 8017578:	d010      	beq.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801757a:	2300      	movs	r3, #0
 801757c:	623b      	str	r3, [r7, #32]
 801757e:	e00d      	b.n	801759c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d006      	beq.n	8017596 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017588:	4b38      	ldr	r3, [pc, #224]	@ (801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801758a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801758e:	493a      	ldr	r1, [pc, #232]	@ (8017678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017590:	4838      	ldr	r0, [pc, #224]	@ (8017674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017592:	f000 ff69 	bl	8018468 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	68ba      	ldr	r2, [r7, #8]
 801759a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d105      	bne.n	80175ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	7f9b      	ldrb	r3, [r3, #30]
 80175a6:	f003 0301 	and.w	r3, r3, #1
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d059      	beq.n	8017662 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80175ae:	6a3b      	ldr	r3, [r7, #32]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d04f      	beq.n	8017654 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	685b      	ldr	r3, [r3, #4]
 80175c2:	889b      	ldrh	r3, [r3, #4]
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d002      	beq.n	80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80175ca:	2300      	movs	r3, #0
 80175cc:	623b      	str	r3, [r7, #32]
 80175ce:	e041      	b.n	8017654 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80175d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80175d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80175da:	e012      	b.n	8017602 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80175dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80175e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175e4:	88db      	ldrh	r3, [r3, #6]
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ea:	889b      	ldrh	r3, [r3, #4]
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d002      	beq.n	80175f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	623b      	str	r3, [r7, #32]
            break;
 80175f6:	e007      	b.n	8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80175f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175fa:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80175fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017604:	2b00      	cmp	r3, #0
 8017606:	d1e9      	bne.n	80175dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017608:	6a3b      	ldr	r3, [r7, #32]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d022      	beq.n	8017654 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	685b      	ldr	r3, [r3, #4]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d106      	bne.n	8017624 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017616:	4b15      	ldr	r3, [pc, #84]	@ (801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017618:	f240 12df 	movw	r2, #479	@ 0x1df
 801761c:	4917      	ldr	r1, [pc, #92]	@ (801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801761e:	4815      	ldr	r0, [pc, #84]	@ (8017674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017620:	f000 ff22 	bl	8018468 <iprintf>
          LWIP_ASSERT("sanity check",
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801762c:	429a      	cmp	r2, r3
 801762e:	d106      	bne.n	801763e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017630:	4b0e      	ldr	r3, [pc, #56]	@ (801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017632:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017636:	4911      	ldr	r1, [pc, #68]	@ (801767c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017638:	480e      	ldr	r0, [pc, #56]	@ (8017674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801763a:	f000 ff15 	bl	8018468 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d006      	beq.n	8017654 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017646:	4b09      	ldr	r3, [pc, #36]	@ (801766c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017648:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801764c:	490c      	ldr	r1, [pc, #48]	@ (8017680 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801764e:	4809      	ldr	r0, [pc, #36]	@ (8017674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017650:	f000 ff0a 	bl	8018468 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017654:	6a3b      	ldr	r3, [r7, #32]
 8017656:	2b00      	cmp	r3, #0
 8017658:	bf14      	ite	ne
 801765a:	2301      	movne	r3, #1
 801765c:	2300      	moveq	r3, #0
 801765e:	b2db      	uxtb	r3, r3
 8017660:	e000      	b.n	8017664 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017662:	2300      	movs	r3, #0
}
 8017664:	4618      	mov	r0, r3
 8017666:	3730      	adds	r7, #48	@ 0x30
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}
 801766c:	0801cd3c 	.word	0x0801cd3c
 8017670:	0801ce20 	.word	0x0801ce20
 8017674:	0801cd84 	.word	0x0801cd84
 8017678:	0801ce40 	.word	0x0801ce40
 801767c:	0801ce78 	.word	0x0801ce78
 8017680:	0801ce88 	.word	0x0801ce88

08017684 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b08e      	sub	sp, #56	@ 0x38
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	685b      	ldr	r3, [r3, #4]
 8017690:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	f003 030f 	and.w	r3, r3, #15
 801769a:	b2db      	uxtb	r3, r3
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	2b14      	cmp	r3, #20
 80176a2:	f040 8171 	bne.w	8017988 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80176a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176a8:	88db      	ldrh	r3, [r3, #6]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7f5 fb4b 	bl	800cd48 <lwip_htons>
 80176b2:	4603      	mov	r3, r0
 80176b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176b8:	b29b      	uxth	r3, r3
 80176ba:	00db      	lsls	r3, r3, #3
 80176bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80176be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176c0:	885b      	ldrh	r3, [r3, #2]
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7f5 fb3f 	bl	800cd48 <lwip_htons>
 80176ca:	4603      	mov	r3, r0
 80176cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80176ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	f003 030f 	and.w	r3, r3, #15
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	009b      	lsls	r3, r3, #2
 80176da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80176de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80176e6:	429a      	cmp	r2, r3
 80176e8:	f0c0 8150 	bcc.w	801798c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80176ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80176f4:	1ad3      	subs	r3, r2, r3
 80176f6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f7f6 ffdb 	bl	800e6b4 <pbuf_clen>
 80176fe:	4603      	mov	r3, r0
 8017700:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017702:	4b8c      	ldr	r3, [pc, #560]	@ (8017934 <ip4_reass+0x2b0>)
 8017704:	881b      	ldrh	r3, [r3, #0]
 8017706:	461a      	mov	r2, r3
 8017708:	8c3b      	ldrh	r3, [r7, #32]
 801770a:	4413      	add	r3, r2
 801770c:	2b0a      	cmp	r3, #10
 801770e:	dd10      	ble.n	8017732 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017710:	8c3b      	ldrh	r3, [r7, #32]
 8017712:	4619      	mov	r1, r3
 8017714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017716:	f7ff fd81 	bl	801721c <ip_reass_remove_oldest_datagram>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	f000 8137 	beq.w	8017990 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017722:	4b84      	ldr	r3, [pc, #528]	@ (8017934 <ip4_reass+0x2b0>)
 8017724:	881b      	ldrh	r3, [r3, #0]
 8017726:	461a      	mov	r2, r3
 8017728:	8c3b      	ldrh	r3, [r7, #32]
 801772a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801772c:	2b0a      	cmp	r3, #10
 801772e:	f300 812f 	bgt.w	8017990 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017732:	4b81      	ldr	r3, [pc, #516]	@ (8017938 <ip4_reass+0x2b4>)
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	633b      	str	r3, [r7, #48]	@ 0x30
 8017738:	e015      	b.n	8017766 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801773c:	695a      	ldr	r2, [r3, #20]
 801773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017740:	68db      	ldr	r3, [r3, #12]
 8017742:	429a      	cmp	r2, r3
 8017744:	d10c      	bne.n	8017760 <ip4_reass+0xdc>
 8017746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017748:	699a      	ldr	r2, [r3, #24]
 801774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801774c:	691b      	ldr	r3, [r3, #16]
 801774e:	429a      	cmp	r2, r3
 8017750:	d106      	bne.n	8017760 <ip4_reass+0xdc>
 8017752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017754:	899a      	ldrh	r2, [r3, #12]
 8017756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017758:	889b      	ldrh	r3, [r3, #4]
 801775a:	b29b      	uxth	r3, r3
 801775c:	429a      	cmp	r2, r3
 801775e:	d006      	beq.n	801776e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	633b      	str	r3, [r7, #48]	@ 0x30
 8017766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017768:	2b00      	cmp	r3, #0
 801776a:	d1e6      	bne.n	801773a <ip4_reass+0xb6>
 801776c:	e000      	b.n	8017770 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801776e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017772:	2b00      	cmp	r3, #0
 8017774:	d109      	bne.n	801778a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017776:	8c3b      	ldrh	r3, [r7, #32]
 8017778:	4619      	mov	r1, r3
 801777a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801777c:	f7ff fdb0 	bl	80172e0 <ip_reass_enqueue_new_datagram>
 8017780:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017784:	2b00      	cmp	r3, #0
 8017786:	d11c      	bne.n	80177c2 <ip4_reass+0x13e>
      goto nullreturn;
 8017788:	e105      	b.n	8017996 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801778c:	88db      	ldrh	r3, [r3, #6]
 801778e:	b29b      	uxth	r3, r3
 8017790:	4618      	mov	r0, r3
 8017792:	f7f5 fad9 	bl	800cd48 <lwip_htons>
 8017796:	4603      	mov	r3, r0
 8017798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801779c:	2b00      	cmp	r3, #0
 801779e:	d110      	bne.n	80177c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80177a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177a2:	89db      	ldrh	r3, [r3, #14]
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7f5 facf 	bl	800cd48 <lwip_htons>
 80177aa:	4603      	mov	r3, r0
 80177ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d006      	beq.n	80177c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80177b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177b6:	3308      	adds	r3, #8
 80177b8:	2214      	movs	r2, #20
 80177ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80177bc:	4618      	mov	r0, r3
 80177be:	f000 ffdc 	bl	801877a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80177c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177c4:	88db      	ldrh	r3, [r3, #6]
 80177c6:	b29b      	uxth	r3, r3
 80177c8:	f003 0320 	and.w	r3, r3, #32
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	bf0c      	ite	eq
 80177d0:	2301      	moveq	r3, #1
 80177d2:	2300      	movne	r3, #0
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d00e      	beq.n	80177fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80177de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80177e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80177e2:	4413      	add	r3, r2
 80177e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80177e6:	8b7a      	ldrh	r2, [r7, #26]
 80177e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80177ea:	429a      	cmp	r2, r3
 80177ec:	f0c0 80a0 	bcc.w	8017930 <ip4_reass+0x2ac>
 80177f0:	8b7b      	ldrh	r3, [r7, #26]
 80177f2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80177f6:	4293      	cmp	r3, r2
 80177f8:	f200 809a 	bhi.w	8017930 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80177fc:	69fa      	ldr	r2, [r7, #28]
 80177fe:	6879      	ldr	r1, [r7, #4]
 8017800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017802:	f7ff fdd5 	bl	80173b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8017806:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801780e:	f000 809b 	beq.w	8017948 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017812:	4b48      	ldr	r3, [pc, #288]	@ (8017934 <ip4_reass+0x2b0>)
 8017814:	881a      	ldrh	r2, [r3, #0]
 8017816:	8c3b      	ldrh	r3, [r7, #32]
 8017818:	4413      	add	r3, r2
 801781a:	b29a      	uxth	r2, r3
 801781c:	4b45      	ldr	r3, [pc, #276]	@ (8017934 <ip4_reass+0x2b0>)
 801781e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017820:	69fb      	ldr	r3, [r7, #28]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d00d      	beq.n	8017842 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017826:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801782a:	4413      	add	r3, r2
 801782c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017830:	8a7a      	ldrh	r2, [r7, #18]
 8017832:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017836:	7f9b      	ldrb	r3, [r3, #30]
 8017838:	f043 0301 	orr.w	r3, r3, #1
 801783c:	b2da      	uxtb	r2, r3
 801783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017840:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	2b01      	cmp	r3, #1
 8017846:	d171      	bne.n	801792c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801784a:	8b9b      	ldrh	r3, [r3, #28]
 801784c:	3314      	adds	r3, #20
 801784e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017864:	3308      	adds	r3, #8
 8017866:	2214      	movs	r2, #20
 8017868:	4619      	mov	r1, r3
 801786a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801786c:	f000 ff85 	bl	801877a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017870:	8a3b      	ldrh	r3, [r7, #16]
 8017872:	4618      	mov	r0, r3
 8017874:	f7f5 fa68 	bl	800cd48 <lwip_htons>
 8017878:	4603      	mov	r3, r0
 801787a:	461a      	mov	r2, r3
 801787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801787e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017882:	2200      	movs	r2, #0
 8017884:	719a      	strb	r2, [r3, #6]
 8017886:	2200      	movs	r2, #0
 8017888:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801788a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801788c:	2200      	movs	r2, #0
 801788e:	729a      	strb	r2, [r3, #10]
 8017890:	2200      	movs	r2, #0
 8017892:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801789a:	e00d      	b.n	80178b8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801789e:	685b      	ldr	r3, [r3, #4]
 80178a0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80178a2:	2114      	movs	r1, #20
 80178a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80178a6:	f7f6 fdf1 	bl	800e48c <pbuf_remove_header>
      pbuf_cat(p, r);
 80178aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80178ac:	6878      	ldr	r0, [r7, #4]
 80178ae:	f7f6 ff41 	bl	800e734 <pbuf_cat>
      r = iprh->next_pbuf;
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80178b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d1ee      	bne.n	801789c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80178be:	4b1e      	ldr	r3, [pc, #120]	@ (8017938 <ip4_reass+0x2b4>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d102      	bne.n	80178ce <ip4_reass+0x24a>
      ipr_prev = NULL;
 80178c8:	2300      	movs	r3, #0
 80178ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178cc:	e010      	b.n	80178f0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178ce:	4b1a      	ldr	r3, [pc, #104]	@ (8017938 <ip4_reass+0x2b4>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178d4:	e007      	b.n	80178e6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80178d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178dc:	429a      	cmp	r2, r3
 80178de:	d006      	beq.n	80178ee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80178e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80178e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d1f4      	bne.n	80178d6 <ip4_reass+0x252>
 80178ec:	e000      	b.n	80178f0 <ip4_reass+0x26c>
          break;
 80178ee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80178f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80178f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178f4:	f7ff fd2e 	bl	8017354 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f7f6 fedb 	bl	800e6b4 <pbuf_clen>
 80178fe:	4603      	mov	r3, r0
 8017900:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017902:	4b0c      	ldr	r3, [pc, #48]	@ (8017934 <ip4_reass+0x2b0>)
 8017904:	881b      	ldrh	r3, [r3, #0]
 8017906:	8c3a      	ldrh	r2, [r7, #32]
 8017908:	429a      	cmp	r2, r3
 801790a:	d906      	bls.n	801791a <ip4_reass+0x296>
 801790c:	4b0b      	ldr	r3, [pc, #44]	@ (801793c <ip4_reass+0x2b8>)
 801790e:	f240 229b 	movw	r2, #667	@ 0x29b
 8017912:	490b      	ldr	r1, [pc, #44]	@ (8017940 <ip4_reass+0x2bc>)
 8017914:	480b      	ldr	r0, [pc, #44]	@ (8017944 <ip4_reass+0x2c0>)
 8017916:	f000 fda7 	bl	8018468 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801791a:	4b06      	ldr	r3, [pc, #24]	@ (8017934 <ip4_reass+0x2b0>)
 801791c:	881a      	ldrh	r2, [r3, #0]
 801791e:	8c3b      	ldrh	r3, [r7, #32]
 8017920:	1ad3      	subs	r3, r2, r3
 8017922:	b29a      	uxth	r2, r3
 8017924:	4b03      	ldr	r3, [pc, #12]	@ (8017934 <ip4_reass+0x2b0>)
 8017926:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	e038      	b.n	801799e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801792c:	2300      	movs	r3, #0
 801792e:	e036      	b.n	801799e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017930:	bf00      	nop
 8017932:	e00a      	b.n	801794a <ip4_reass+0x2c6>
 8017934:	2000f268 	.word	0x2000f268
 8017938:	2000f264 	.word	0x2000f264
 801793c:	0801cd3c 	.word	0x0801cd3c
 8017940:	0801ceac 	.word	0x0801ceac
 8017944:	0801cd84 	.word	0x0801cd84
    goto nullreturn_ipr;
 8017948:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801794c:	2b00      	cmp	r3, #0
 801794e:	d106      	bne.n	801795e <ip4_reass+0x2da>
 8017950:	4b15      	ldr	r3, [pc, #84]	@ (80179a8 <ip4_reass+0x324>)
 8017952:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8017956:	4915      	ldr	r1, [pc, #84]	@ (80179ac <ip4_reass+0x328>)
 8017958:	4815      	ldr	r0, [pc, #84]	@ (80179b0 <ip4_reass+0x32c>)
 801795a:	f000 fd85 	bl	8018468 <iprintf>
  if (ipr->p == NULL) {
 801795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017960:	685b      	ldr	r3, [r3, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d116      	bne.n	8017994 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017966:	4b13      	ldr	r3, [pc, #76]	@ (80179b4 <ip4_reass+0x330>)
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801796c:	429a      	cmp	r2, r3
 801796e:	d006      	beq.n	801797e <ip4_reass+0x2fa>
 8017970:	4b0d      	ldr	r3, [pc, #52]	@ (80179a8 <ip4_reass+0x324>)
 8017972:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017976:	4910      	ldr	r1, [pc, #64]	@ (80179b8 <ip4_reass+0x334>)
 8017978:	480d      	ldr	r0, [pc, #52]	@ (80179b0 <ip4_reass+0x32c>)
 801797a:	f000 fd75 	bl	8018468 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801797e:	2100      	movs	r1, #0
 8017980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017982:	f7ff fce7 	bl	8017354 <ip_reass_dequeue_datagram>
 8017986:	e006      	b.n	8017996 <ip4_reass+0x312>
    goto nullreturn;
 8017988:	bf00      	nop
 801798a:	e004      	b.n	8017996 <ip4_reass+0x312>
    goto nullreturn;
 801798c:	bf00      	nop
 801798e:	e002      	b.n	8017996 <ip4_reass+0x312>
      goto nullreturn;
 8017990:	bf00      	nop
 8017992:	e000      	b.n	8017996 <ip4_reass+0x312>
  }

nullreturn:
 8017994:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017996:	6878      	ldr	r0, [r7, #4]
 8017998:	f7f6 fdfe 	bl	800e598 <pbuf_free>
  return NULL;
 801799c:	2300      	movs	r3, #0
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3738      	adds	r7, #56	@ 0x38
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}
 80179a6:	bf00      	nop
 80179a8:	0801cd3c 	.word	0x0801cd3c
 80179ac:	0801cec8 	.word	0x0801cec8
 80179b0:	0801cd84 	.word	0x0801cd84
 80179b4:	2000f264 	.word	0x2000f264
 80179b8:	0801ced4 	.word	0x0801ced4

080179bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80179c0:	2005      	movs	r0, #5
 80179c2:	f7f5 fecf 	bl	800d764 <memp_malloc>
 80179c6:	4603      	mov	r3, r0
}
 80179c8:	4618      	mov	r0, r3
 80179ca:	bd80      	pop	{r7, pc}

080179cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d106      	bne.n	80179e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80179da:	4b07      	ldr	r3, [pc, #28]	@ (80179f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80179dc:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80179e0:	4906      	ldr	r1, [pc, #24]	@ (80179fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80179e2:	4807      	ldr	r0, [pc, #28]	@ (8017a00 <ip_frag_free_pbuf_custom_ref+0x34>)
 80179e4:	f000 fd40 	bl	8018468 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80179e8:	6879      	ldr	r1, [r7, #4]
 80179ea:	2005      	movs	r0, #5
 80179ec:	f7f5 ff30 	bl	800d850 <memp_free>
}
 80179f0:	bf00      	nop
 80179f2:	3708      	adds	r7, #8
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	0801cd3c 	.word	0x0801cd3c
 80179fc:	0801cef4 	.word	0x0801cef4
 8017a00:	0801cd84 	.word	0x0801cd84

08017a04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d106      	bne.n	8017a24 <ipfrag_free_pbuf_custom+0x20>
 8017a16:	4b11      	ldr	r3, [pc, #68]	@ (8017a5c <ipfrag_free_pbuf_custom+0x58>)
 8017a18:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017a1c:	4910      	ldr	r1, [pc, #64]	@ (8017a60 <ipfrag_free_pbuf_custom+0x5c>)
 8017a1e:	4811      	ldr	r0, [pc, #68]	@ (8017a64 <ipfrag_free_pbuf_custom+0x60>)
 8017a20:	f000 fd22 	bl	8018468 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017a24:	68fa      	ldr	r2, [r7, #12]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d006      	beq.n	8017a3a <ipfrag_free_pbuf_custom+0x36>
 8017a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8017a5c <ipfrag_free_pbuf_custom+0x58>)
 8017a2e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8017a32:	490d      	ldr	r1, [pc, #52]	@ (8017a68 <ipfrag_free_pbuf_custom+0x64>)
 8017a34:	480b      	ldr	r0, [pc, #44]	@ (8017a64 <ipfrag_free_pbuf_custom+0x60>)
 8017a36:	f000 fd17 	bl	8018468 <iprintf>
  if (pcr->original != NULL) {
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	695b      	ldr	r3, [r3, #20]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d004      	beq.n	8017a4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	695b      	ldr	r3, [r3, #20]
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7f6 fda6 	bl	800e598 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017a4c:	68f8      	ldr	r0, [r7, #12]
 8017a4e:	f7ff ffbd 	bl	80179cc <ip_frag_free_pbuf_custom_ref>
}
 8017a52:	bf00      	nop
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	0801cd3c 	.word	0x0801cd3c
 8017a60:	0801cf00 	.word	0x0801cf00
 8017a64:	0801cd84 	.word	0x0801cd84
 8017a68:	0801cf0c 	.word	0x0801cf0c

08017a6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b094      	sub	sp, #80	@ 0x50
 8017a70:	af02      	add	r7, sp, #8
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017a82:	3b14      	subs	r3, #20
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	da00      	bge.n	8017a8a <ip4_frag+0x1e>
 8017a88:	3307      	adds	r3, #7
 8017a8a:	10db      	asrs	r3, r3, #3
 8017a8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017a8e:	2314      	movs	r3, #20
 8017a90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8017a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a9e:	781b      	ldrb	r3, [r3, #0]
 8017aa0:	f003 030f 	and.w	r3, r3, #15
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	009b      	lsls	r3, r3, #2
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	2b14      	cmp	r3, #20
 8017aac:	d002      	beq.n	8017ab4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017aae:	f06f 0305 	mvn.w	r3, #5
 8017ab2:	e110      	b.n	8017cd6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	895b      	ldrh	r3, [r3, #10]
 8017ab8:	2b13      	cmp	r3, #19
 8017aba:	d809      	bhi.n	8017ad0 <ip4_frag+0x64>
 8017abc:	4b88      	ldr	r3, [pc, #544]	@ (8017ce0 <ip4_frag+0x274>)
 8017abe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8017ac2:	4988      	ldr	r1, [pc, #544]	@ (8017ce4 <ip4_frag+0x278>)
 8017ac4:	4888      	ldr	r0, [pc, #544]	@ (8017ce8 <ip4_frag+0x27c>)
 8017ac6:	f000 fccf 	bl	8018468 <iprintf>
 8017aca:	f06f 0305 	mvn.w	r3, #5
 8017ace:	e102      	b.n	8017cd6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ad2:	88db      	ldrh	r3, [r3, #6]
 8017ad4:	b29b      	uxth	r3, r3
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7f5 f936 	bl	800cd48 <lwip_htons>
 8017adc:	4603      	mov	r3, r0
 8017ade:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017ae0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ae6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017aea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017af0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	891b      	ldrh	r3, [r3, #8]
 8017af6:	3b14      	subs	r3, #20
 8017af8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017afc:	e0e1      	b.n	8017cc2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017afe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017b00:	00db      	lsls	r3, r3, #3
 8017b02:	b29b      	uxth	r3, r3
 8017b04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b08:	4293      	cmp	r3, r2
 8017b0a:	bf28      	it	cs
 8017b0c:	4613      	movcs	r3, r2
 8017b0e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017b10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b14:	2114      	movs	r1, #20
 8017b16:	200e      	movs	r0, #14
 8017b18:	f7f6 fa5a 	bl	800dfd0 <pbuf_alloc>
 8017b1c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 80d5 	beq.w	8017cd0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b28:	895b      	ldrh	r3, [r3, #10]
 8017b2a:	2b13      	cmp	r3, #19
 8017b2c:	d806      	bhi.n	8017b3c <ip4_frag+0xd0>
 8017b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8017ce0 <ip4_frag+0x274>)
 8017b30:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8017b34:	496d      	ldr	r1, [pc, #436]	@ (8017cec <ip4_frag+0x280>)
 8017b36:	486c      	ldr	r0, [pc, #432]	@ (8017ce8 <ip4_frag+0x27c>)
 8017b38:	f000 fc96 	bl	8018468 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b3e:	685b      	ldr	r3, [r3, #4]
 8017b40:	2214      	movs	r2, #20
 8017b42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017b44:	4618      	mov	r0, r3
 8017b46:	f000 fe18 	bl	801877a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b4c:	685b      	ldr	r3, [r3, #4]
 8017b4e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017b50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017b52:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8017b56:	e064      	b.n	8017c22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	895a      	ldrh	r2, [r3, #10]
 8017b5c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017b5e:	1ad3      	subs	r3, r2, r3
 8017b60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	895b      	ldrh	r3, [r3, #10]
 8017b66:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d906      	bls.n	8017b7a <ip4_frag+0x10e>
 8017b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8017ce0 <ip4_frag+0x274>)
 8017b6e:	f240 322d 	movw	r2, #813	@ 0x32d
 8017b72:	495f      	ldr	r1, [pc, #380]	@ (8017cf0 <ip4_frag+0x284>)
 8017b74:	485c      	ldr	r0, [pc, #368]	@ (8017ce8 <ip4_frag+0x27c>)
 8017b76:	f000 fc77 	bl	8018468 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017b7a:	8bfa      	ldrh	r2, [r7, #30]
 8017b7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017b80:	4293      	cmp	r3, r2
 8017b82:	bf28      	it	cs
 8017b84:	4613      	movcs	r3, r2
 8017b86:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017b8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d105      	bne.n	8017b9e <ip4_frag+0x132>
        poff = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	60fb      	str	r3, [r7, #12]
        continue;
 8017b9c:	e041      	b.n	8017c22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017b9e:	f7ff ff0d 	bl	80179bc <ip_frag_alloc_pbuf_custom_ref>
 8017ba2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017ba4:	69bb      	ldr	r3, [r7, #24]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d103      	bne.n	8017bb2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017baa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017bac:	f7f6 fcf4 	bl	800e598 <pbuf_free>
        goto memerr;
 8017bb0:	e08f      	b.n	8017cd2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017bb2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017bb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017bba:	4413      	add	r3, r2
 8017bbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017bc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017bc4:	9201      	str	r2, [sp, #4]
 8017bc6:	9300      	str	r3, [sp, #0]
 8017bc8:	4603      	mov	r3, r0
 8017bca:	2241      	movs	r2, #65	@ 0x41
 8017bcc:	2000      	movs	r0, #0
 8017bce:	f7f6 fb29 	bl	800e224 <pbuf_alloced_custom>
 8017bd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d106      	bne.n	8017be8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017bda:	69b8      	ldr	r0, [r7, #24]
 8017bdc:	f7ff fef6 	bl	80179cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017be0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017be2:	f7f6 fcd9 	bl	800e598 <pbuf_free>
        goto memerr;
 8017be6:	e074      	b.n	8017cd2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017be8:	68f8      	ldr	r0, [r7, #12]
 8017bea:	f7f6 fd7b 	bl	800e6e4 <pbuf_ref>
      pcr->original = p;
 8017bee:	69bb      	ldr	r3, [r7, #24]
 8017bf0:	68fa      	ldr	r2, [r7, #12]
 8017bf2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017bf4:	69bb      	ldr	r3, [r7, #24]
 8017bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8017cf4 <ip4_frag+0x288>)
 8017bf8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017bfa:	6979      	ldr	r1, [r7, #20]
 8017bfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017bfe:	f7f6 fd99 	bl	800e734 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017c02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017c06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017c0a:	1ad3      	subs	r3, r2, r3
 8017c0c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017c10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d004      	beq.n	8017c22 <ip4_frag+0x1b6>
        poff = 0;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017c22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d196      	bne.n	8017b58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017c2a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017c30:	4413      	add	r3, r2
 8017c32:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017c38:	f1a3 0213 	sub.w	r2, r3, #19
 8017c3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c40:	429a      	cmp	r2, r3
 8017c42:	bfcc      	ite	gt
 8017c44:	2301      	movgt	r3, #1
 8017c46:	2300      	movle	r3, #0
 8017c48:	b2db      	uxtb	r3, r3
 8017c4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017c4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8017c56:	6a3b      	ldr	r3, [r7, #32]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d002      	beq.n	8017c62 <ip4_frag+0x1f6>
 8017c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d003      	beq.n	8017c6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017c62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017c68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017c6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7f5 f86b 	bl	800cd48 <lwip_htons>
 8017c72:	4603      	mov	r3, r0
 8017c74:	461a      	mov	r2, r3
 8017c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017c7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017c7c:	3314      	adds	r3, #20
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7f5 f861 	bl	800cd48 <lwip_htons>
 8017c86:	4603      	mov	r3, r0
 8017c88:	461a      	mov	r2, r3
 8017c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c90:	2200      	movs	r2, #0
 8017c92:	729a      	strb	r2, [r3, #10]
 8017c94:	2200      	movs	r2, #0
 8017c96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	695b      	ldr	r3, [r3, #20]
 8017c9c:	687a      	ldr	r2, [r7, #4]
 8017c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017ca0:	68b8      	ldr	r0, [r7, #8]
 8017ca2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ca6:	f7f6 fc77 	bl	800e598 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017caa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017cae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017cb0:	1ad3      	subs	r3, r2, r3
 8017cb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8017cb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017cba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017cbc:	4413      	add	r3, r2
 8017cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8017cc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	f47f af19 	bne.w	8017afe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	e002      	b.n	8017cd6 <ip4_frag+0x26a>
      goto memerr;
 8017cd0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	3748      	adds	r7, #72	@ 0x48
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	bf00      	nop
 8017ce0:	0801cd3c 	.word	0x0801cd3c
 8017ce4:	0801cf18 	.word	0x0801cf18
 8017ce8:	0801cd84 	.word	0x0801cd84
 8017cec:	0801cf34 	.word	0x0801cf34
 8017cf0:	0801cf54 	.word	0x0801cf54
 8017cf4:	08017a05 	.word	0x08017a05

08017cf8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b086      	sub	sp, #24
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017d02:	230e      	movs	r3, #14
 8017d04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	895b      	ldrh	r3, [r3, #10]
 8017d0a:	2b0e      	cmp	r3, #14
 8017d0c:	d96e      	bls.n	8017dec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	7bdb      	ldrb	r3, [r3, #15]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d106      	bne.n	8017d24 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	b2da      	uxtb	r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017d2a:	693b      	ldr	r3, [r7, #16]
 8017d2c:	7b1a      	ldrb	r2, [r3, #12]
 8017d2e:	7b5b      	ldrb	r3, [r3, #13]
 8017d30:	021b      	lsls	r3, r3, #8
 8017d32:	4313      	orrs	r3, r2
 8017d34:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017d36:	693b      	ldr	r3, [r7, #16]
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	f003 0301 	and.w	r3, r3, #1
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d023      	beq.n	8017d8a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	781b      	ldrb	r3, [r3, #0]
 8017d46:	2b01      	cmp	r3, #1
 8017d48:	d10f      	bne.n	8017d6a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	785b      	ldrb	r3, [r3, #1]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d11b      	bne.n	8017d8a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017d56:	2b5e      	cmp	r3, #94	@ 0x5e
 8017d58:	d117      	bne.n	8017d8a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	7b5b      	ldrb	r3, [r3, #13]
 8017d5e:	f043 0310 	orr.w	r3, r3, #16
 8017d62:	b2da      	uxtb	r2, r3
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	735a      	strb	r2, [r3, #13]
 8017d68:	e00f      	b.n	8017d8a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017d6a:	693b      	ldr	r3, [r7, #16]
 8017d6c:	2206      	movs	r2, #6
 8017d6e:	4928      	ldr	r1, [pc, #160]	@ (8017e10 <ethernet_input+0x118>)
 8017d70:	4618      	mov	r0, r3
 8017d72:	f000 fbee 	bl	8018552 <memcmp>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d106      	bne.n	8017d8a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	7b5b      	ldrb	r3, [r3, #13]
 8017d80:	f043 0308 	orr.w	r3, r3, #8
 8017d84:	b2da      	uxtb	r2, r3
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017d8a:	89fb      	ldrh	r3, [r7, #14]
 8017d8c:	2b08      	cmp	r3, #8
 8017d8e:	d003      	beq.n	8017d98 <ethernet_input+0xa0>
 8017d90:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8017d94:	d014      	beq.n	8017dc0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017d96:	e032      	b.n	8017dfe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d9e:	f003 0308 	and.w	r3, r3, #8
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d024      	beq.n	8017df0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017da6:	8afb      	ldrh	r3, [r7, #22]
 8017da8:	4619      	mov	r1, r3
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f7f6 fb6e 	bl	800e48c <pbuf_remove_header>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d11e      	bne.n	8017df4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017db6:	6839      	ldr	r1, [r7, #0]
 8017db8:	6878      	ldr	r0, [r7, #4]
 8017dba:	f7fe ff21 	bl	8016c00 <ip4_input>
      break;
 8017dbe:	e013      	b.n	8017de8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017dc6:	f003 0308 	and.w	r3, r3, #8
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d014      	beq.n	8017df8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017dce:	8afb      	ldrh	r3, [r7, #22]
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f7f6 fb5a 	bl	800e48c <pbuf_remove_header>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d10e      	bne.n	8017dfc <ethernet_input+0x104>
        etharp_input(p, netif);
 8017dde:	6839      	ldr	r1, [r7, #0]
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f7fe f8c1 	bl	8015f68 <etharp_input>
      break;
 8017de6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017de8:	2300      	movs	r3, #0
 8017dea:	e00c      	b.n	8017e06 <ethernet_input+0x10e>
    goto free_and_return;
 8017dec:	bf00      	nop
 8017dee:	e006      	b.n	8017dfe <ethernet_input+0x106>
        goto free_and_return;
 8017df0:	bf00      	nop
 8017df2:	e004      	b.n	8017dfe <ethernet_input+0x106>
        goto free_and_return;
 8017df4:	bf00      	nop
 8017df6:	e002      	b.n	8017dfe <ethernet_input+0x106>
        goto free_and_return;
 8017df8:	bf00      	nop
 8017dfa:	e000      	b.n	8017dfe <ethernet_input+0x106>
        goto free_and_return;
 8017dfc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017dfe:	6878      	ldr	r0, [r7, #4]
 8017e00:	f7f6 fbca 	bl	800e598 <pbuf_free>
  return ERR_OK;
 8017e04:	2300      	movs	r3, #0
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3718      	adds	r7, #24
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	0801ddf4 	.word	0x0801ddf4

08017e14 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b086      	sub	sp, #24
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
 8017e20:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017e22:	8c3b      	ldrh	r3, [r7, #32]
 8017e24:	4618      	mov	r0, r3
 8017e26:	f7f4 ff8f 	bl	800cd48 <lwip_htons>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017e2e:	210e      	movs	r1, #14
 8017e30:	68b8      	ldr	r0, [r7, #8]
 8017e32:	f7f6 fb1b 	bl	800e46c <pbuf_add_header>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d125      	bne.n	8017e88 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017e3c:	68bb      	ldr	r3, [r7, #8]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017e42:	693b      	ldr	r3, [r7, #16]
 8017e44:	8afa      	ldrh	r2, [r7, #22]
 8017e46:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017e48:	693b      	ldr	r3, [r7, #16]
 8017e4a:	2206      	movs	r2, #6
 8017e4c:	6839      	ldr	r1, [r7, #0]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f000 fc93 	bl	801877a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017e54:	693b      	ldr	r3, [r7, #16]
 8017e56:	3306      	adds	r3, #6
 8017e58:	2206      	movs	r2, #6
 8017e5a:	6879      	ldr	r1, [r7, #4]
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f000 fc8c 	bl	801877a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017e68:	2b06      	cmp	r3, #6
 8017e6a:	d006      	beq.n	8017e7a <ethernet_output+0x66>
 8017e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8017e98 <ethernet_output+0x84>)
 8017e6e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8017e72:	490a      	ldr	r1, [pc, #40]	@ (8017e9c <ethernet_output+0x88>)
 8017e74:	480a      	ldr	r0, [pc, #40]	@ (8017ea0 <ethernet_output+0x8c>)
 8017e76:	f000 faf7 	bl	8018468 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	699b      	ldr	r3, [r3, #24]
 8017e7e:	68b9      	ldr	r1, [r7, #8]
 8017e80:	68f8      	ldr	r0, [r7, #12]
 8017e82:	4798      	blx	r3
 8017e84:	4603      	mov	r3, r0
 8017e86:	e002      	b.n	8017e8e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017e88:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017e8a:	f06f 0301 	mvn.w	r3, #1
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3718      	adds	r7, #24
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}
 8017e96:	bf00      	nop
 8017e98:	0801cf64 	.word	0x0801cf64
 8017e9c:	0801cf9c 	.word	0x0801cf9c
 8017ea0:	0801cfd0 	.word	0x0801cfd0

08017ea4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017ea4:	b580      	push	{r7, lr}
 8017ea6:	b086      	sub	sp, #24
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
 8017eac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	60bb      	str	r3, [r7, #8]
 8017eb2:	2304      	movs	r3, #4
 8017eb4:	60fb      	str	r3, [r7, #12]
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	613b      	str	r3, [r7, #16]
 8017eba:	2300      	movs	r3, #0
 8017ebc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017ebe:	f107 0308 	add.w	r3, r7, #8
 8017ec2:	2100      	movs	r1, #0
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7ee febc 	bl	8006c42 <osMessageCreate>
 8017eca:	4602      	mov	r2, r0
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d102      	bne.n	8017ede <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8017edc:	e000      	b.n	8017ee0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017ede:	2300      	movs	r3, #0
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3718      	adds	r7, #24
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}

08017ee8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7ee ff81 	bl	8006dfc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7ee ff92 	bl	8006e28 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017f04:	bf00      	nop
 8017f06:	3708      	adds	r7, #8
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	bd80      	pop	{r7, pc}

08017f0c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b084      	sub	sp, #16
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
 8017f14:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	6839      	ldr	r1, [r7, #0]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7ee feb8 	bl	8006c94 <osMessagePut>
 8017f24:	4603      	mov	r3, r0
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d102      	bne.n	8017f30 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	73fb      	strb	r3, [r7, #15]
 8017f2e:	e001      	b.n	8017f34 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017f30:	23ff      	movs	r3, #255	@ 0xff
 8017f32:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b08c      	sub	sp, #48	@ 0x30
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	61f8      	str	r0, [r7, #28]
 8017f48:	61b9      	str	r1, [r7, #24]
 8017f4a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017f4c:	f7ee fca4 	bl	8006898 <osKernelSysTick>
 8017f50:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d017      	beq.n	8017f88 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	6819      	ldr	r1, [r3, #0]
 8017f5c:	f107 0320 	add.w	r3, r7, #32
 8017f60:	697a      	ldr	r2, [r7, #20]
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7ee fed6 	bl	8006d14 <osMessageGet>

    if(event.status == osEventMessage)
 8017f68:	6a3b      	ldr	r3, [r7, #32]
 8017f6a:	2b10      	cmp	r3, #16
 8017f6c:	d109      	bne.n	8017f82 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f70:	461a      	mov	r2, r3
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017f76:	f7ee fc8f 	bl	8006898 <osKernelSysTick>
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f7e:	1ad3      	subs	r3, r2, r3
 8017f80:	e019      	b.n	8017fb6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017f82:	f04f 33ff 	mov.w	r3, #4294967295
 8017f86:	e016      	b.n	8017fb6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017f88:	69fb      	ldr	r3, [r7, #28]
 8017f8a:	6819      	ldr	r1, [r3, #0]
 8017f8c:	463b      	mov	r3, r7
 8017f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7ee febe 	bl	8006d14 <osMessageGet>
 8017f98:	f107 0320 	add.w	r3, r7, #32
 8017f9c:	463a      	mov	r2, r7
 8017f9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	69bb      	ldr	r3, [r7, #24]
 8017faa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017fac:	f7ee fc74 	bl	8006898 <osKernelSysTick>
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fb4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3730      	adds	r7, #48	@ 0x30
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}

08017fbe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017fbe:	b580      	push	{r7, lr}
 8017fc0:	b086      	sub	sp, #24
 8017fc2:	af00      	add	r7, sp, #0
 8017fc4:	6078      	str	r0, [r7, #4]
 8017fc6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6819      	ldr	r1, [r3, #0]
 8017fcc:	f107 030c 	add.w	r3, r7, #12
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ee fe9e 	bl	8006d14 <osMessageGet>

  if(event.status == osEventMessage)
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	2b10      	cmp	r3, #16
 8017fdc:	d105      	bne.n	8017fea <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	e001      	b.n	8017fee <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017fea:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3718      	adds	r7, #24
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}

08017ff6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017ff6:	b480      	push	{r7}
 8017ff8:	b083      	sub	sp, #12
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d101      	bne.n	801800a <sys_mbox_valid+0x14>
    return 0;
 8018006:	2300      	movs	r3, #0
 8018008:	e000      	b.n	801800c <sys_mbox_valid+0x16>
  else
    return 1;
 801800a:	2301      	movs	r3, #1
}
 801800c:	4618      	mov	r0, r3
 801800e:	370c      	adds	r7, #12
 8018010:	46bd      	mov	sp, r7
 8018012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018016:	4770      	bx	lr

08018018 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018018:	b480      	push	{r7}
 801801a:	b083      	sub	sp, #12
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2200      	movs	r2, #0
 8018024:	601a      	str	r2, [r3, #0]
}
 8018026:	bf00      	nop
 8018028:	370c      	adds	r7, #12
 801802a:	46bd      	mov	sp, r7
 801802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018030:	4770      	bx	lr

08018032 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018032:	b580      	push	{r7, lr}
 8018034:	b084      	sub	sp, #16
 8018036:	af00      	add	r7, sp, #0
 8018038:	6078      	str	r0, [r7, #4]
 801803a:	460b      	mov	r3, r1
 801803c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801803e:	2300      	movs	r3, #0
 8018040:	60bb      	str	r3, [r7, #8]
 8018042:	2300      	movs	r3, #0
 8018044:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018046:	f107 0308 	add.w	r3, r7, #8
 801804a:	2101      	movs	r1, #1
 801804c:	4618      	mov	r0, r3
 801804e:	f7ee fd2f 	bl	8006ab0 <osSemaphoreCreate>
 8018052:	4602      	mov	r2, r0
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d102      	bne.n	8018066 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018060:	f04f 33ff 	mov.w	r3, #4294967295
 8018064:	e009      	b.n	801807a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018066:	78fb      	ldrb	r3, [r7, #3]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d105      	bne.n	8018078 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	2100      	movs	r1, #0
 8018072:	4618      	mov	r0, r3
 8018074:	f7ee fd4e 	bl	8006b14 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018078:	2300      	movs	r3, #0
}
 801807a:	4618      	mov	r0, r3
 801807c:	3710      	adds	r7, #16
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}

08018082 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018082:	b580      	push	{r7, lr}
 8018084:	b084      	sub	sp, #16
 8018086:	af00      	add	r7, sp, #0
 8018088:	6078      	str	r0, [r7, #4]
 801808a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801808c:	f7ee fc04 	bl	8006898 <osKernelSysTick>
 8018090:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	2b00      	cmp	r3, #0
 8018096:	d011      	beq.n	80180bc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	6839      	ldr	r1, [r7, #0]
 801809e:	4618      	mov	r0, r3
 80180a0:	f7ee fd38 	bl	8006b14 <osSemaphoreWait>
 80180a4:	4603      	mov	r3, r0
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d105      	bne.n	80180b6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80180aa:	f7ee fbf5 	bl	8006898 <osKernelSysTick>
 80180ae:	4602      	mov	r2, r0
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	1ad3      	subs	r3, r2, r3
 80180b4:	e012      	b.n	80180dc <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80180b6:	f04f 33ff 	mov.w	r3, #4294967295
 80180ba:	e00f      	b.n	80180dc <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80180bc:	bf00      	nop
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f04f 31ff 	mov.w	r1, #4294967295
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7ee fd24 	bl	8006b14 <osSemaphoreWait>
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d1f5      	bne.n	80180be <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80180d2:	f7ee fbe1 	bl	8006898 <osKernelSysTick>
 80180d6:	4602      	mov	r2, r0
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80180dc:	4618      	mov	r0, r3
 80180de:	3710      	adds	r7, #16
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7ee fd5d 	bl	8006bb0 <osSemaphoreRelease>
}
 80180f6:	bf00      	nop
 80180f8:	3708      	adds	r7, #8
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}

080180fe <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80180fe:	b580      	push	{r7, lr}
 8018100:	b082      	sub	sp, #8
 8018102:	af00      	add	r7, sp, #0
 8018104:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	4618      	mov	r0, r3
 801810c:	f7ee fd86 	bl	8006c1c <osSemaphoreDelete>
}
 8018110:	bf00      	nop
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018118:	b480      	push	{r7}
 801811a:	b083      	sub	sp, #12
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d101      	bne.n	801812c <sys_sem_valid+0x14>
    return 0;
 8018128:	2300      	movs	r3, #0
 801812a:	e000      	b.n	801812e <sys_sem_valid+0x16>
  else
    return 1;
 801812c:	2301      	movs	r3, #1
}
 801812e:	4618      	mov	r0, r3
 8018130:	370c      	adds	r7, #12
 8018132:	46bd      	mov	sp, r7
 8018134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018138:	4770      	bx	lr

0801813a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801813a:	b480      	push	{r7}
 801813c:	b083      	sub	sp, #12
 801813e:	af00      	add	r7, sp, #0
 8018140:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	2200      	movs	r2, #0
 8018146:	601a      	str	r2, [r3, #0]
}
 8018148:	bf00      	nop
 801814a:	370c      	adds	r7, #12
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr

08018154 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018158:	4803      	ldr	r0, [pc, #12]	@ (8018168 <sys_init+0x14>)
 801815a:	f7ee fc0d 	bl	8006978 <osMutexCreate>
 801815e:	4603      	mov	r3, r0
 8018160:	4a02      	ldr	r2, [pc, #8]	@ (801816c <sys_init+0x18>)
 8018162:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018164:	bf00      	nop
 8018166:	bd80      	pop	{r7, pc}
 8018168:	0801de04 	.word	0x0801de04
 801816c:	2000f26c 	.word	0x2000f26c

08018170 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018178:	2300      	movs	r3, #0
 801817a:	60bb      	str	r3, [r7, #8]
 801817c:	2300      	movs	r3, #0
 801817e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018180:	f107 0308 	add.w	r3, r7, #8
 8018184:	4618      	mov	r0, r3
 8018186:	f7ee fbf7 	bl	8006978 <osMutexCreate>
 801818a:	4602      	mov	r2, r0
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d102      	bne.n	801819e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018198:	f04f 33ff 	mov.w	r3, #4294967295
 801819c:	e000      	b.n	80181a0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801819e:	2300      	movs	r3, #0
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}

080181a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b082      	sub	sp, #8
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	f04f 31ff 	mov.w	r1, #4294967295
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7ee fbf5 	bl	80069a8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80181be:	bf00      	nop
 80181c0:	3708      	adds	r7, #8
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bd80      	pop	{r7, pc}

080181c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80181c6:	b580      	push	{r7, lr}
 80181c8:	b082      	sub	sp, #8
 80181ca:	af00      	add	r7, sp, #0
 80181cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7ee fc36 	bl	8006a44 <osMutexRelease>
}
 80181d8:	bf00      	nop
 80181da:	3708      	adds	r7, #8
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}

080181e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b08c      	sub	sp, #48	@ 0x30
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	60b9      	str	r1, [r7, #8]
 80181ea:	607a      	str	r2, [r7, #4]
 80181ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80181ee:	f107 0314 	add.w	r3, r7, #20
 80181f2:	2200      	movs	r2, #0
 80181f4:	601a      	str	r2, [r3, #0]
 80181f6:	605a      	str	r2, [r3, #4]
 80181f8:	609a      	str	r2, [r3, #8]
 80181fa:	60da      	str	r2, [r3, #12]
 80181fc:	611a      	str	r2, [r3, #16]
 80181fe:	615a      	str	r2, [r3, #20]
 8018200:	619a      	str	r2, [r3, #24]
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	617b      	str	r3, [r7, #20]
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	61bb      	str	r3, [r7, #24]
 801820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801820c:	b21b      	sxth	r3, r3
 801820e:	83bb      	strh	r3, [r7, #28]
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018214:	f107 0314 	add.w	r3, r7, #20
 8018218:	6879      	ldr	r1, [r7, #4]
 801821a:	4618      	mov	r0, r3
 801821c:	f7ee fb4c 	bl	80068b8 <osThreadCreate>
 8018220:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018222:	4618      	mov	r0, r3
 8018224:	3730      	adds	r7, #48	@ 0x30
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
	...

0801822c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018230:	4b04      	ldr	r3, [pc, #16]	@ (8018244 <sys_arch_protect+0x18>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f04f 31ff 	mov.w	r1, #4294967295
 8018238:	4618      	mov	r0, r3
 801823a:	f7ee fbb5 	bl	80069a8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801823e:	2301      	movs	r3, #1
}
 8018240:	4618      	mov	r0, r3
 8018242:	bd80      	pop	{r7, pc}
 8018244:	2000f26c 	.word	0x2000f26c

08018248 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b082      	sub	sp, #8
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018250:	4b04      	ldr	r3, [pc, #16]	@ (8018264 <sys_arch_unprotect+0x1c>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	4618      	mov	r0, r3
 8018256:	f7ee fbf5 	bl	8006a44 <osMutexRelease>
}
 801825a:	bf00      	nop
 801825c:	3708      	adds	r7, #8
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}
 8018262:	bf00      	nop
 8018264:	2000f26c 	.word	0x2000f26c

08018268 <rand>:
 8018268:	4b16      	ldr	r3, [pc, #88]	@ (80182c4 <rand+0x5c>)
 801826a:	b510      	push	{r4, lr}
 801826c:	681c      	ldr	r4, [r3, #0]
 801826e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018270:	b9b3      	cbnz	r3, 80182a0 <rand+0x38>
 8018272:	2018      	movs	r0, #24
 8018274:	f000 faf8 	bl	8018868 <malloc>
 8018278:	4602      	mov	r2, r0
 801827a:	6320      	str	r0, [r4, #48]	@ 0x30
 801827c:	b920      	cbnz	r0, 8018288 <rand+0x20>
 801827e:	4b12      	ldr	r3, [pc, #72]	@ (80182c8 <rand+0x60>)
 8018280:	4812      	ldr	r0, [pc, #72]	@ (80182cc <rand+0x64>)
 8018282:	2152      	movs	r1, #82	@ 0x52
 8018284:	f000 fa88 	bl	8018798 <__assert_func>
 8018288:	4911      	ldr	r1, [pc, #68]	@ (80182d0 <rand+0x68>)
 801828a:	4b12      	ldr	r3, [pc, #72]	@ (80182d4 <rand+0x6c>)
 801828c:	e9c0 1300 	strd	r1, r3, [r0]
 8018290:	4b11      	ldr	r3, [pc, #68]	@ (80182d8 <rand+0x70>)
 8018292:	6083      	str	r3, [r0, #8]
 8018294:	230b      	movs	r3, #11
 8018296:	8183      	strh	r3, [r0, #12]
 8018298:	2100      	movs	r1, #0
 801829a:	2001      	movs	r0, #1
 801829c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80182a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80182a2:	480e      	ldr	r0, [pc, #56]	@ (80182dc <rand+0x74>)
 80182a4:	690b      	ldr	r3, [r1, #16]
 80182a6:	694c      	ldr	r4, [r1, #20]
 80182a8:	4a0d      	ldr	r2, [pc, #52]	@ (80182e0 <rand+0x78>)
 80182aa:	4358      	muls	r0, r3
 80182ac:	fb02 0004 	mla	r0, r2, r4, r0
 80182b0:	fba3 3202 	umull	r3, r2, r3, r2
 80182b4:	3301      	adds	r3, #1
 80182b6:	eb40 0002 	adc.w	r0, r0, r2
 80182ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80182be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80182c2:	bd10      	pop	{r4, pc}
 80182c4:	2000003c 	.word	0x2000003c
 80182c8:	0801de0c 	.word	0x0801de0c
 80182cc:	0801de23 	.word	0x0801de23
 80182d0:	abcd330e 	.word	0xabcd330e
 80182d4:	e66d1234 	.word	0xe66d1234
 80182d8:	0005deec 	.word	0x0005deec
 80182dc:	5851f42d 	.word	0x5851f42d
 80182e0:	4c957f2d 	.word	0x4c957f2d

080182e4 <std>:
 80182e4:	2300      	movs	r3, #0
 80182e6:	b510      	push	{r4, lr}
 80182e8:	4604      	mov	r4, r0
 80182ea:	e9c0 3300 	strd	r3, r3, [r0]
 80182ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80182f2:	6083      	str	r3, [r0, #8]
 80182f4:	8181      	strh	r1, [r0, #12]
 80182f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80182f8:	81c2      	strh	r2, [r0, #14]
 80182fa:	6183      	str	r3, [r0, #24]
 80182fc:	4619      	mov	r1, r3
 80182fe:	2208      	movs	r2, #8
 8018300:	305c      	adds	r0, #92	@ 0x5c
 8018302:	f000 f950 	bl	80185a6 <memset>
 8018306:	4b0d      	ldr	r3, [pc, #52]	@ (801833c <std+0x58>)
 8018308:	6263      	str	r3, [r4, #36]	@ 0x24
 801830a:	4b0d      	ldr	r3, [pc, #52]	@ (8018340 <std+0x5c>)
 801830c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801830e:	4b0d      	ldr	r3, [pc, #52]	@ (8018344 <std+0x60>)
 8018310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018312:	4b0d      	ldr	r3, [pc, #52]	@ (8018348 <std+0x64>)
 8018314:	6323      	str	r3, [r4, #48]	@ 0x30
 8018316:	4b0d      	ldr	r3, [pc, #52]	@ (801834c <std+0x68>)
 8018318:	6224      	str	r4, [r4, #32]
 801831a:	429c      	cmp	r4, r3
 801831c:	d006      	beq.n	801832c <std+0x48>
 801831e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018322:	4294      	cmp	r4, r2
 8018324:	d002      	beq.n	801832c <std+0x48>
 8018326:	33d0      	adds	r3, #208	@ 0xd0
 8018328:	429c      	cmp	r4, r3
 801832a:	d105      	bne.n	8018338 <std+0x54>
 801832c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018334:	f000 ba1e 	b.w	8018774 <__retarget_lock_init_recursive>
 8018338:	bd10      	pop	{r4, pc}
 801833a:	bf00      	nop
 801833c:	080184cd 	.word	0x080184cd
 8018340:	080184ef 	.word	0x080184ef
 8018344:	08018527 	.word	0x08018527
 8018348:	0801854b 	.word	0x0801854b
 801834c:	2000f270 	.word	0x2000f270

08018350 <stdio_exit_handler>:
 8018350:	4a02      	ldr	r2, [pc, #8]	@ (801835c <stdio_exit_handler+0xc>)
 8018352:	4903      	ldr	r1, [pc, #12]	@ (8018360 <stdio_exit_handler+0x10>)
 8018354:	4803      	ldr	r0, [pc, #12]	@ (8018364 <stdio_exit_handler+0x14>)
 8018356:	f000 b869 	b.w	801842c <_fwalk_sglue>
 801835a:	bf00      	nop
 801835c:	20000030 	.word	0x20000030
 8018360:	0801932d 	.word	0x0801932d
 8018364:	20000040 	.word	0x20000040

08018368 <cleanup_stdio>:
 8018368:	6841      	ldr	r1, [r0, #4]
 801836a:	4b0c      	ldr	r3, [pc, #48]	@ (801839c <cleanup_stdio+0x34>)
 801836c:	4299      	cmp	r1, r3
 801836e:	b510      	push	{r4, lr}
 8018370:	4604      	mov	r4, r0
 8018372:	d001      	beq.n	8018378 <cleanup_stdio+0x10>
 8018374:	f000 ffda 	bl	801932c <_fflush_r>
 8018378:	68a1      	ldr	r1, [r4, #8]
 801837a:	4b09      	ldr	r3, [pc, #36]	@ (80183a0 <cleanup_stdio+0x38>)
 801837c:	4299      	cmp	r1, r3
 801837e:	d002      	beq.n	8018386 <cleanup_stdio+0x1e>
 8018380:	4620      	mov	r0, r4
 8018382:	f000 ffd3 	bl	801932c <_fflush_r>
 8018386:	68e1      	ldr	r1, [r4, #12]
 8018388:	4b06      	ldr	r3, [pc, #24]	@ (80183a4 <cleanup_stdio+0x3c>)
 801838a:	4299      	cmp	r1, r3
 801838c:	d004      	beq.n	8018398 <cleanup_stdio+0x30>
 801838e:	4620      	mov	r0, r4
 8018390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018394:	f000 bfca 	b.w	801932c <_fflush_r>
 8018398:	bd10      	pop	{r4, pc}
 801839a:	bf00      	nop
 801839c:	2000f270 	.word	0x2000f270
 80183a0:	2000f2d8 	.word	0x2000f2d8
 80183a4:	2000f340 	.word	0x2000f340

080183a8 <global_stdio_init.part.0>:
 80183a8:	b510      	push	{r4, lr}
 80183aa:	4b0b      	ldr	r3, [pc, #44]	@ (80183d8 <global_stdio_init.part.0+0x30>)
 80183ac:	4c0b      	ldr	r4, [pc, #44]	@ (80183dc <global_stdio_init.part.0+0x34>)
 80183ae:	4a0c      	ldr	r2, [pc, #48]	@ (80183e0 <global_stdio_init.part.0+0x38>)
 80183b0:	601a      	str	r2, [r3, #0]
 80183b2:	4620      	mov	r0, r4
 80183b4:	2200      	movs	r2, #0
 80183b6:	2104      	movs	r1, #4
 80183b8:	f7ff ff94 	bl	80182e4 <std>
 80183bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80183c0:	2201      	movs	r2, #1
 80183c2:	2109      	movs	r1, #9
 80183c4:	f7ff ff8e 	bl	80182e4 <std>
 80183c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80183cc:	2202      	movs	r2, #2
 80183ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183d2:	2112      	movs	r1, #18
 80183d4:	f7ff bf86 	b.w	80182e4 <std>
 80183d8:	2000f3a8 	.word	0x2000f3a8
 80183dc:	2000f270 	.word	0x2000f270
 80183e0:	08018351 	.word	0x08018351

080183e4 <__sfp_lock_acquire>:
 80183e4:	4801      	ldr	r0, [pc, #4]	@ (80183ec <__sfp_lock_acquire+0x8>)
 80183e6:	f000 b9c6 	b.w	8018776 <__retarget_lock_acquire_recursive>
 80183ea:	bf00      	nop
 80183ec:	2000f3b1 	.word	0x2000f3b1

080183f0 <__sfp_lock_release>:
 80183f0:	4801      	ldr	r0, [pc, #4]	@ (80183f8 <__sfp_lock_release+0x8>)
 80183f2:	f000 b9c1 	b.w	8018778 <__retarget_lock_release_recursive>
 80183f6:	bf00      	nop
 80183f8:	2000f3b1 	.word	0x2000f3b1

080183fc <__sinit>:
 80183fc:	b510      	push	{r4, lr}
 80183fe:	4604      	mov	r4, r0
 8018400:	f7ff fff0 	bl	80183e4 <__sfp_lock_acquire>
 8018404:	6a23      	ldr	r3, [r4, #32]
 8018406:	b11b      	cbz	r3, 8018410 <__sinit+0x14>
 8018408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801840c:	f7ff bff0 	b.w	80183f0 <__sfp_lock_release>
 8018410:	4b04      	ldr	r3, [pc, #16]	@ (8018424 <__sinit+0x28>)
 8018412:	6223      	str	r3, [r4, #32]
 8018414:	4b04      	ldr	r3, [pc, #16]	@ (8018428 <__sinit+0x2c>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d1f5      	bne.n	8018408 <__sinit+0xc>
 801841c:	f7ff ffc4 	bl	80183a8 <global_stdio_init.part.0>
 8018420:	e7f2      	b.n	8018408 <__sinit+0xc>
 8018422:	bf00      	nop
 8018424:	08018369 	.word	0x08018369
 8018428:	2000f3a8 	.word	0x2000f3a8

0801842c <_fwalk_sglue>:
 801842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018430:	4607      	mov	r7, r0
 8018432:	4688      	mov	r8, r1
 8018434:	4614      	mov	r4, r2
 8018436:	2600      	movs	r6, #0
 8018438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801843c:	f1b9 0901 	subs.w	r9, r9, #1
 8018440:	d505      	bpl.n	801844e <_fwalk_sglue+0x22>
 8018442:	6824      	ldr	r4, [r4, #0]
 8018444:	2c00      	cmp	r4, #0
 8018446:	d1f7      	bne.n	8018438 <_fwalk_sglue+0xc>
 8018448:	4630      	mov	r0, r6
 801844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801844e:	89ab      	ldrh	r3, [r5, #12]
 8018450:	2b01      	cmp	r3, #1
 8018452:	d907      	bls.n	8018464 <_fwalk_sglue+0x38>
 8018454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018458:	3301      	adds	r3, #1
 801845a:	d003      	beq.n	8018464 <_fwalk_sglue+0x38>
 801845c:	4629      	mov	r1, r5
 801845e:	4638      	mov	r0, r7
 8018460:	47c0      	blx	r8
 8018462:	4306      	orrs	r6, r0
 8018464:	3568      	adds	r5, #104	@ 0x68
 8018466:	e7e9      	b.n	801843c <_fwalk_sglue+0x10>

08018468 <iprintf>:
 8018468:	b40f      	push	{r0, r1, r2, r3}
 801846a:	b507      	push	{r0, r1, r2, lr}
 801846c:	4906      	ldr	r1, [pc, #24]	@ (8018488 <iprintf+0x20>)
 801846e:	ab04      	add	r3, sp, #16
 8018470:	6808      	ldr	r0, [r1, #0]
 8018472:	f853 2b04 	ldr.w	r2, [r3], #4
 8018476:	6881      	ldr	r1, [r0, #8]
 8018478:	9301      	str	r3, [sp, #4]
 801847a:	f000 fc2d 	bl	8018cd8 <_vfiprintf_r>
 801847e:	b003      	add	sp, #12
 8018480:	f85d eb04 	ldr.w	lr, [sp], #4
 8018484:	b004      	add	sp, #16
 8018486:	4770      	bx	lr
 8018488:	2000003c 	.word	0x2000003c

0801848c <siprintf>:
 801848c:	b40e      	push	{r1, r2, r3}
 801848e:	b500      	push	{lr}
 8018490:	b09c      	sub	sp, #112	@ 0x70
 8018492:	ab1d      	add	r3, sp, #116	@ 0x74
 8018494:	9002      	str	r0, [sp, #8]
 8018496:	9006      	str	r0, [sp, #24]
 8018498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801849c:	4809      	ldr	r0, [pc, #36]	@ (80184c4 <siprintf+0x38>)
 801849e:	9107      	str	r1, [sp, #28]
 80184a0:	9104      	str	r1, [sp, #16]
 80184a2:	4909      	ldr	r1, [pc, #36]	@ (80184c8 <siprintf+0x3c>)
 80184a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184a8:	9105      	str	r1, [sp, #20]
 80184aa:	6800      	ldr	r0, [r0, #0]
 80184ac:	9301      	str	r3, [sp, #4]
 80184ae:	a902      	add	r1, sp, #8
 80184b0:	f000 faec 	bl	8018a8c <_svfiprintf_r>
 80184b4:	9b02      	ldr	r3, [sp, #8]
 80184b6:	2200      	movs	r2, #0
 80184b8:	701a      	strb	r2, [r3, #0]
 80184ba:	b01c      	add	sp, #112	@ 0x70
 80184bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80184c0:	b003      	add	sp, #12
 80184c2:	4770      	bx	lr
 80184c4:	2000003c 	.word	0x2000003c
 80184c8:	ffff0208 	.word	0xffff0208

080184cc <__sread>:
 80184cc:	b510      	push	{r4, lr}
 80184ce:	460c      	mov	r4, r1
 80184d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184d4:	f000 f906 	bl	80186e4 <_read_r>
 80184d8:	2800      	cmp	r0, #0
 80184da:	bfab      	itete	ge
 80184dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80184de:	89a3      	ldrhlt	r3, [r4, #12]
 80184e0:	181b      	addge	r3, r3, r0
 80184e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80184e6:	bfac      	ite	ge
 80184e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80184ea:	81a3      	strhlt	r3, [r4, #12]
 80184ec:	bd10      	pop	{r4, pc}

080184ee <__swrite>:
 80184ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184f2:	461f      	mov	r7, r3
 80184f4:	898b      	ldrh	r3, [r1, #12]
 80184f6:	05db      	lsls	r3, r3, #23
 80184f8:	4605      	mov	r5, r0
 80184fa:	460c      	mov	r4, r1
 80184fc:	4616      	mov	r6, r2
 80184fe:	d505      	bpl.n	801850c <__swrite+0x1e>
 8018500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018504:	2302      	movs	r3, #2
 8018506:	2200      	movs	r2, #0
 8018508:	f000 f8da 	bl	80186c0 <_lseek_r>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	4632      	mov	r2, r6
 801851a:	463b      	mov	r3, r7
 801851c:	4628      	mov	r0, r5
 801851e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018522:	f000 b8f1 	b.w	8018708 <_write_r>

08018526 <__sseek>:
 8018526:	b510      	push	{r4, lr}
 8018528:	460c      	mov	r4, r1
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 f8c7 	bl	80186c0 <_lseek_r>
 8018532:	1c43      	adds	r3, r0, #1
 8018534:	89a3      	ldrh	r3, [r4, #12]
 8018536:	bf15      	itete	ne
 8018538:	6560      	strne	r0, [r4, #84]	@ 0x54
 801853a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801853e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018542:	81a3      	strheq	r3, [r4, #12]
 8018544:	bf18      	it	ne
 8018546:	81a3      	strhne	r3, [r4, #12]
 8018548:	bd10      	pop	{r4, pc}

0801854a <__sclose>:
 801854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801854e:	f000 b851 	b.w	80185f4 <_close_r>

08018552 <memcmp>:
 8018552:	b510      	push	{r4, lr}
 8018554:	3901      	subs	r1, #1
 8018556:	4402      	add	r2, r0
 8018558:	4290      	cmp	r0, r2
 801855a:	d101      	bne.n	8018560 <memcmp+0xe>
 801855c:	2000      	movs	r0, #0
 801855e:	e005      	b.n	801856c <memcmp+0x1a>
 8018560:	7803      	ldrb	r3, [r0, #0]
 8018562:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018566:	42a3      	cmp	r3, r4
 8018568:	d001      	beq.n	801856e <memcmp+0x1c>
 801856a:	1b18      	subs	r0, r3, r4
 801856c:	bd10      	pop	{r4, pc}
 801856e:	3001      	adds	r0, #1
 8018570:	e7f2      	b.n	8018558 <memcmp+0x6>

08018572 <memmove>:
 8018572:	4288      	cmp	r0, r1
 8018574:	b510      	push	{r4, lr}
 8018576:	eb01 0402 	add.w	r4, r1, r2
 801857a:	d902      	bls.n	8018582 <memmove+0x10>
 801857c:	4284      	cmp	r4, r0
 801857e:	4623      	mov	r3, r4
 8018580:	d807      	bhi.n	8018592 <memmove+0x20>
 8018582:	1e43      	subs	r3, r0, #1
 8018584:	42a1      	cmp	r1, r4
 8018586:	d008      	beq.n	801859a <memmove+0x28>
 8018588:	f811 2b01 	ldrb.w	r2, [r1], #1
 801858c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018590:	e7f8      	b.n	8018584 <memmove+0x12>
 8018592:	4402      	add	r2, r0
 8018594:	4601      	mov	r1, r0
 8018596:	428a      	cmp	r2, r1
 8018598:	d100      	bne.n	801859c <memmove+0x2a>
 801859a:	bd10      	pop	{r4, pc}
 801859c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185a4:	e7f7      	b.n	8018596 <memmove+0x24>

080185a6 <memset>:
 80185a6:	4402      	add	r2, r0
 80185a8:	4603      	mov	r3, r0
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d100      	bne.n	80185b0 <memset+0xa>
 80185ae:	4770      	bx	lr
 80185b0:	f803 1b01 	strb.w	r1, [r3], #1
 80185b4:	e7f9      	b.n	80185aa <memset+0x4>

080185b6 <strchr>:
 80185b6:	b2c9      	uxtb	r1, r1
 80185b8:	4603      	mov	r3, r0
 80185ba:	4618      	mov	r0, r3
 80185bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185c0:	b112      	cbz	r2, 80185c8 <strchr+0x12>
 80185c2:	428a      	cmp	r2, r1
 80185c4:	d1f9      	bne.n	80185ba <strchr+0x4>
 80185c6:	4770      	bx	lr
 80185c8:	2900      	cmp	r1, #0
 80185ca:	bf18      	it	ne
 80185cc:	2000      	movne	r0, #0
 80185ce:	4770      	bx	lr

080185d0 <strncmp>:
 80185d0:	b510      	push	{r4, lr}
 80185d2:	b16a      	cbz	r2, 80185f0 <strncmp+0x20>
 80185d4:	3901      	subs	r1, #1
 80185d6:	1884      	adds	r4, r0, r2
 80185d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d103      	bne.n	80185ec <strncmp+0x1c>
 80185e4:	42a0      	cmp	r0, r4
 80185e6:	d001      	beq.n	80185ec <strncmp+0x1c>
 80185e8:	2a00      	cmp	r2, #0
 80185ea:	d1f5      	bne.n	80185d8 <strncmp+0x8>
 80185ec:	1ad0      	subs	r0, r2, r3
 80185ee:	bd10      	pop	{r4, pc}
 80185f0:	4610      	mov	r0, r2
 80185f2:	e7fc      	b.n	80185ee <strncmp+0x1e>

080185f4 <_close_r>:
 80185f4:	b538      	push	{r3, r4, r5, lr}
 80185f6:	4d06      	ldr	r5, [pc, #24]	@ (8018610 <_close_r+0x1c>)
 80185f8:	2300      	movs	r3, #0
 80185fa:	4604      	mov	r4, r0
 80185fc:	4608      	mov	r0, r1
 80185fe:	602b      	str	r3, [r5, #0]
 8018600:	f7e8 fe02 	bl	8001208 <_close>
 8018604:	1c43      	adds	r3, r0, #1
 8018606:	d102      	bne.n	801860e <_close_r+0x1a>
 8018608:	682b      	ldr	r3, [r5, #0]
 801860a:	b103      	cbz	r3, 801860e <_close_r+0x1a>
 801860c:	6023      	str	r3, [r4, #0]
 801860e:	bd38      	pop	{r3, r4, r5, pc}
 8018610:	2000f3ac 	.word	0x2000f3ac

08018614 <_reclaim_reent>:
 8018614:	4b29      	ldr	r3, [pc, #164]	@ (80186bc <_reclaim_reent+0xa8>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	4283      	cmp	r3, r0
 801861a:	b570      	push	{r4, r5, r6, lr}
 801861c:	4604      	mov	r4, r0
 801861e:	d04b      	beq.n	80186b8 <_reclaim_reent+0xa4>
 8018620:	69c3      	ldr	r3, [r0, #28]
 8018622:	b1ab      	cbz	r3, 8018650 <_reclaim_reent+0x3c>
 8018624:	68db      	ldr	r3, [r3, #12]
 8018626:	b16b      	cbz	r3, 8018644 <_reclaim_reent+0x30>
 8018628:	2500      	movs	r5, #0
 801862a:	69e3      	ldr	r3, [r4, #28]
 801862c:	68db      	ldr	r3, [r3, #12]
 801862e:	5959      	ldr	r1, [r3, r5]
 8018630:	2900      	cmp	r1, #0
 8018632:	d13b      	bne.n	80186ac <_reclaim_reent+0x98>
 8018634:	3504      	adds	r5, #4
 8018636:	2d80      	cmp	r5, #128	@ 0x80
 8018638:	d1f7      	bne.n	801862a <_reclaim_reent+0x16>
 801863a:	69e3      	ldr	r3, [r4, #28]
 801863c:	4620      	mov	r0, r4
 801863e:	68d9      	ldr	r1, [r3, #12]
 8018640:	f000 f8c8 	bl	80187d4 <_free_r>
 8018644:	69e3      	ldr	r3, [r4, #28]
 8018646:	6819      	ldr	r1, [r3, #0]
 8018648:	b111      	cbz	r1, 8018650 <_reclaim_reent+0x3c>
 801864a:	4620      	mov	r0, r4
 801864c:	f000 f8c2 	bl	80187d4 <_free_r>
 8018650:	6961      	ldr	r1, [r4, #20]
 8018652:	b111      	cbz	r1, 801865a <_reclaim_reent+0x46>
 8018654:	4620      	mov	r0, r4
 8018656:	f000 f8bd 	bl	80187d4 <_free_r>
 801865a:	69e1      	ldr	r1, [r4, #28]
 801865c:	b111      	cbz	r1, 8018664 <_reclaim_reent+0x50>
 801865e:	4620      	mov	r0, r4
 8018660:	f000 f8b8 	bl	80187d4 <_free_r>
 8018664:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018666:	b111      	cbz	r1, 801866e <_reclaim_reent+0x5a>
 8018668:	4620      	mov	r0, r4
 801866a:	f000 f8b3 	bl	80187d4 <_free_r>
 801866e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018670:	b111      	cbz	r1, 8018678 <_reclaim_reent+0x64>
 8018672:	4620      	mov	r0, r4
 8018674:	f000 f8ae 	bl	80187d4 <_free_r>
 8018678:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801867a:	b111      	cbz	r1, 8018682 <_reclaim_reent+0x6e>
 801867c:	4620      	mov	r0, r4
 801867e:	f000 f8a9 	bl	80187d4 <_free_r>
 8018682:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018684:	b111      	cbz	r1, 801868c <_reclaim_reent+0x78>
 8018686:	4620      	mov	r0, r4
 8018688:	f000 f8a4 	bl	80187d4 <_free_r>
 801868c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801868e:	b111      	cbz	r1, 8018696 <_reclaim_reent+0x82>
 8018690:	4620      	mov	r0, r4
 8018692:	f000 f89f 	bl	80187d4 <_free_r>
 8018696:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018698:	b111      	cbz	r1, 80186a0 <_reclaim_reent+0x8c>
 801869a:	4620      	mov	r0, r4
 801869c:	f000 f89a 	bl	80187d4 <_free_r>
 80186a0:	6a23      	ldr	r3, [r4, #32]
 80186a2:	b14b      	cbz	r3, 80186b8 <_reclaim_reent+0xa4>
 80186a4:	4620      	mov	r0, r4
 80186a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186aa:	4718      	bx	r3
 80186ac:	680e      	ldr	r6, [r1, #0]
 80186ae:	4620      	mov	r0, r4
 80186b0:	f000 f890 	bl	80187d4 <_free_r>
 80186b4:	4631      	mov	r1, r6
 80186b6:	e7bb      	b.n	8018630 <_reclaim_reent+0x1c>
 80186b8:	bd70      	pop	{r4, r5, r6, pc}
 80186ba:	bf00      	nop
 80186bc:	2000003c 	.word	0x2000003c

080186c0 <_lseek_r>:
 80186c0:	b538      	push	{r3, r4, r5, lr}
 80186c2:	4d07      	ldr	r5, [pc, #28]	@ (80186e0 <_lseek_r+0x20>)
 80186c4:	4604      	mov	r4, r0
 80186c6:	4608      	mov	r0, r1
 80186c8:	4611      	mov	r1, r2
 80186ca:	2200      	movs	r2, #0
 80186cc:	602a      	str	r2, [r5, #0]
 80186ce:	461a      	mov	r2, r3
 80186d0:	f7e8 fdc1 	bl	8001256 <_lseek>
 80186d4:	1c43      	adds	r3, r0, #1
 80186d6:	d102      	bne.n	80186de <_lseek_r+0x1e>
 80186d8:	682b      	ldr	r3, [r5, #0]
 80186da:	b103      	cbz	r3, 80186de <_lseek_r+0x1e>
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	bd38      	pop	{r3, r4, r5, pc}
 80186e0:	2000f3ac 	.word	0x2000f3ac

080186e4 <_read_r>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4d07      	ldr	r5, [pc, #28]	@ (8018704 <_read_r+0x20>)
 80186e8:	4604      	mov	r4, r0
 80186ea:	4608      	mov	r0, r1
 80186ec:	4611      	mov	r1, r2
 80186ee:	2200      	movs	r2, #0
 80186f0:	602a      	str	r2, [r5, #0]
 80186f2:	461a      	mov	r2, r3
 80186f4:	f7e8 fd4f 	bl	8001196 <_read>
 80186f8:	1c43      	adds	r3, r0, #1
 80186fa:	d102      	bne.n	8018702 <_read_r+0x1e>
 80186fc:	682b      	ldr	r3, [r5, #0]
 80186fe:	b103      	cbz	r3, 8018702 <_read_r+0x1e>
 8018700:	6023      	str	r3, [r4, #0]
 8018702:	bd38      	pop	{r3, r4, r5, pc}
 8018704:	2000f3ac 	.word	0x2000f3ac

08018708 <_write_r>:
 8018708:	b538      	push	{r3, r4, r5, lr}
 801870a:	4d07      	ldr	r5, [pc, #28]	@ (8018728 <_write_r+0x20>)
 801870c:	4604      	mov	r4, r0
 801870e:	4608      	mov	r0, r1
 8018710:	4611      	mov	r1, r2
 8018712:	2200      	movs	r2, #0
 8018714:	602a      	str	r2, [r5, #0]
 8018716:	461a      	mov	r2, r3
 8018718:	f7e8 fd5a 	bl	80011d0 <_write>
 801871c:	1c43      	adds	r3, r0, #1
 801871e:	d102      	bne.n	8018726 <_write_r+0x1e>
 8018720:	682b      	ldr	r3, [r5, #0]
 8018722:	b103      	cbz	r3, 8018726 <_write_r+0x1e>
 8018724:	6023      	str	r3, [r4, #0]
 8018726:	bd38      	pop	{r3, r4, r5, pc}
 8018728:	2000f3ac 	.word	0x2000f3ac

0801872c <__libc_init_array>:
 801872c:	b570      	push	{r4, r5, r6, lr}
 801872e:	4d0d      	ldr	r5, [pc, #52]	@ (8018764 <__libc_init_array+0x38>)
 8018730:	4c0d      	ldr	r4, [pc, #52]	@ (8018768 <__libc_init_array+0x3c>)
 8018732:	1b64      	subs	r4, r4, r5
 8018734:	10a4      	asrs	r4, r4, #2
 8018736:	2600      	movs	r6, #0
 8018738:	42a6      	cmp	r6, r4
 801873a:	d109      	bne.n	8018750 <__libc_init_array+0x24>
 801873c:	4d0b      	ldr	r5, [pc, #44]	@ (801876c <__libc_init_array+0x40>)
 801873e:	4c0c      	ldr	r4, [pc, #48]	@ (8018770 <__libc_init_array+0x44>)
 8018740:	f000 ffd8 	bl	80196f4 <_init>
 8018744:	1b64      	subs	r4, r4, r5
 8018746:	10a4      	asrs	r4, r4, #2
 8018748:	2600      	movs	r6, #0
 801874a:	42a6      	cmp	r6, r4
 801874c:	d105      	bne.n	801875a <__libc_init_array+0x2e>
 801874e:	bd70      	pop	{r4, r5, r6, pc}
 8018750:	f855 3b04 	ldr.w	r3, [r5], #4
 8018754:	4798      	blx	r3
 8018756:	3601      	adds	r6, #1
 8018758:	e7ee      	b.n	8018738 <__libc_init_array+0xc>
 801875a:	f855 3b04 	ldr.w	r3, [r5], #4
 801875e:	4798      	blx	r3
 8018760:	3601      	adds	r6, #1
 8018762:	e7f2      	b.n	801874a <__libc_init_array+0x1e>
 8018764:	0801def4 	.word	0x0801def4
 8018768:	0801def4 	.word	0x0801def4
 801876c:	0801def4 	.word	0x0801def4
 8018770:	0801def8 	.word	0x0801def8

08018774 <__retarget_lock_init_recursive>:
 8018774:	4770      	bx	lr

08018776 <__retarget_lock_acquire_recursive>:
 8018776:	4770      	bx	lr

08018778 <__retarget_lock_release_recursive>:
 8018778:	4770      	bx	lr

0801877a <memcpy>:
 801877a:	440a      	add	r2, r1
 801877c:	4291      	cmp	r1, r2
 801877e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018782:	d100      	bne.n	8018786 <memcpy+0xc>
 8018784:	4770      	bx	lr
 8018786:	b510      	push	{r4, lr}
 8018788:	f811 4b01 	ldrb.w	r4, [r1], #1
 801878c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018790:	4291      	cmp	r1, r2
 8018792:	d1f9      	bne.n	8018788 <memcpy+0xe>
 8018794:	bd10      	pop	{r4, pc}
	...

08018798 <__assert_func>:
 8018798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801879a:	4614      	mov	r4, r2
 801879c:	461a      	mov	r2, r3
 801879e:	4b09      	ldr	r3, [pc, #36]	@ (80187c4 <__assert_func+0x2c>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	4605      	mov	r5, r0
 80187a4:	68d8      	ldr	r0, [r3, #12]
 80187a6:	b954      	cbnz	r4, 80187be <__assert_func+0x26>
 80187a8:	4b07      	ldr	r3, [pc, #28]	@ (80187c8 <__assert_func+0x30>)
 80187aa:	461c      	mov	r4, r3
 80187ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187b0:	9100      	str	r1, [sp, #0]
 80187b2:	462b      	mov	r3, r5
 80187b4:	4905      	ldr	r1, [pc, #20]	@ (80187cc <__assert_func+0x34>)
 80187b6:	f000 fde1 	bl	801937c <fiprintf>
 80187ba:	f000 fe95 	bl	80194e8 <abort>
 80187be:	4b04      	ldr	r3, [pc, #16]	@ (80187d0 <__assert_func+0x38>)
 80187c0:	e7f4      	b.n	80187ac <__assert_func+0x14>
 80187c2:	bf00      	nop
 80187c4:	2000003c 	.word	0x2000003c
 80187c8:	0801deb6 	.word	0x0801deb6
 80187cc:	0801de88 	.word	0x0801de88
 80187d0:	0801de7b 	.word	0x0801de7b

080187d4 <_free_r>:
 80187d4:	b538      	push	{r3, r4, r5, lr}
 80187d6:	4605      	mov	r5, r0
 80187d8:	2900      	cmp	r1, #0
 80187da:	d041      	beq.n	8018860 <_free_r+0x8c>
 80187dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187e0:	1f0c      	subs	r4, r1, #4
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	bfb8      	it	lt
 80187e6:	18e4      	addlt	r4, r4, r3
 80187e8:	f000 f8e8 	bl	80189bc <__malloc_lock>
 80187ec:	4a1d      	ldr	r2, [pc, #116]	@ (8018864 <_free_r+0x90>)
 80187ee:	6813      	ldr	r3, [r2, #0]
 80187f0:	b933      	cbnz	r3, 8018800 <_free_r+0x2c>
 80187f2:	6063      	str	r3, [r4, #4]
 80187f4:	6014      	str	r4, [r2, #0]
 80187f6:	4628      	mov	r0, r5
 80187f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187fc:	f000 b8e4 	b.w	80189c8 <__malloc_unlock>
 8018800:	42a3      	cmp	r3, r4
 8018802:	d908      	bls.n	8018816 <_free_r+0x42>
 8018804:	6820      	ldr	r0, [r4, #0]
 8018806:	1821      	adds	r1, r4, r0
 8018808:	428b      	cmp	r3, r1
 801880a:	bf01      	itttt	eq
 801880c:	6819      	ldreq	r1, [r3, #0]
 801880e:	685b      	ldreq	r3, [r3, #4]
 8018810:	1809      	addeq	r1, r1, r0
 8018812:	6021      	streq	r1, [r4, #0]
 8018814:	e7ed      	b.n	80187f2 <_free_r+0x1e>
 8018816:	461a      	mov	r2, r3
 8018818:	685b      	ldr	r3, [r3, #4]
 801881a:	b10b      	cbz	r3, 8018820 <_free_r+0x4c>
 801881c:	42a3      	cmp	r3, r4
 801881e:	d9fa      	bls.n	8018816 <_free_r+0x42>
 8018820:	6811      	ldr	r1, [r2, #0]
 8018822:	1850      	adds	r0, r2, r1
 8018824:	42a0      	cmp	r0, r4
 8018826:	d10b      	bne.n	8018840 <_free_r+0x6c>
 8018828:	6820      	ldr	r0, [r4, #0]
 801882a:	4401      	add	r1, r0
 801882c:	1850      	adds	r0, r2, r1
 801882e:	4283      	cmp	r3, r0
 8018830:	6011      	str	r1, [r2, #0]
 8018832:	d1e0      	bne.n	80187f6 <_free_r+0x22>
 8018834:	6818      	ldr	r0, [r3, #0]
 8018836:	685b      	ldr	r3, [r3, #4]
 8018838:	6053      	str	r3, [r2, #4]
 801883a:	4408      	add	r0, r1
 801883c:	6010      	str	r0, [r2, #0]
 801883e:	e7da      	b.n	80187f6 <_free_r+0x22>
 8018840:	d902      	bls.n	8018848 <_free_r+0x74>
 8018842:	230c      	movs	r3, #12
 8018844:	602b      	str	r3, [r5, #0]
 8018846:	e7d6      	b.n	80187f6 <_free_r+0x22>
 8018848:	6820      	ldr	r0, [r4, #0]
 801884a:	1821      	adds	r1, r4, r0
 801884c:	428b      	cmp	r3, r1
 801884e:	bf04      	itt	eq
 8018850:	6819      	ldreq	r1, [r3, #0]
 8018852:	685b      	ldreq	r3, [r3, #4]
 8018854:	6063      	str	r3, [r4, #4]
 8018856:	bf04      	itt	eq
 8018858:	1809      	addeq	r1, r1, r0
 801885a:	6021      	streq	r1, [r4, #0]
 801885c:	6054      	str	r4, [r2, #4]
 801885e:	e7ca      	b.n	80187f6 <_free_r+0x22>
 8018860:	bd38      	pop	{r3, r4, r5, pc}
 8018862:	bf00      	nop
 8018864:	2000f3b8 	.word	0x2000f3b8

08018868 <malloc>:
 8018868:	4b02      	ldr	r3, [pc, #8]	@ (8018874 <malloc+0xc>)
 801886a:	4601      	mov	r1, r0
 801886c:	6818      	ldr	r0, [r3, #0]
 801886e:	f000 b825 	b.w	80188bc <_malloc_r>
 8018872:	bf00      	nop
 8018874:	2000003c 	.word	0x2000003c

08018878 <sbrk_aligned>:
 8018878:	b570      	push	{r4, r5, r6, lr}
 801887a:	4e0f      	ldr	r6, [pc, #60]	@ (80188b8 <sbrk_aligned+0x40>)
 801887c:	460c      	mov	r4, r1
 801887e:	6831      	ldr	r1, [r6, #0]
 8018880:	4605      	mov	r5, r0
 8018882:	b911      	cbnz	r1, 801888a <sbrk_aligned+0x12>
 8018884:	f000 fe20 	bl	80194c8 <_sbrk_r>
 8018888:	6030      	str	r0, [r6, #0]
 801888a:	4621      	mov	r1, r4
 801888c:	4628      	mov	r0, r5
 801888e:	f000 fe1b 	bl	80194c8 <_sbrk_r>
 8018892:	1c43      	adds	r3, r0, #1
 8018894:	d103      	bne.n	801889e <sbrk_aligned+0x26>
 8018896:	f04f 34ff 	mov.w	r4, #4294967295
 801889a:	4620      	mov	r0, r4
 801889c:	bd70      	pop	{r4, r5, r6, pc}
 801889e:	1cc4      	adds	r4, r0, #3
 80188a0:	f024 0403 	bic.w	r4, r4, #3
 80188a4:	42a0      	cmp	r0, r4
 80188a6:	d0f8      	beq.n	801889a <sbrk_aligned+0x22>
 80188a8:	1a21      	subs	r1, r4, r0
 80188aa:	4628      	mov	r0, r5
 80188ac:	f000 fe0c 	bl	80194c8 <_sbrk_r>
 80188b0:	3001      	adds	r0, #1
 80188b2:	d1f2      	bne.n	801889a <sbrk_aligned+0x22>
 80188b4:	e7ef      	b.n	8018896 <sbrk_aligned+0x1e>
 80188b6:	bf00      	nop
 80188b8:	2000f3b4 	.word	0x2000f3b4

080188bc <_malloc_r>:
 80188bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188c0:	1ccd      	adds	r5, r1, #3
 80188c2:	f025 0503 	bic.w	r5, r5, #3
 80188c6:	3508      	adds	r5, #8
 80188c8:	2d0c      	cmp	r5, #12
 80188ca:	bf38      	it	cc
 80188cc:	250c      	movcc	r5, #12
 80188ce:	2d00      	cmp	r5, #0
 80188d0:	4606      	mov	r6, r0
 80188d2:	db01      	blt.n	80188d8 <_malloc_r+0x1c>
 80188d4:	42a9      	cmp	r1, r5
 80188d6:	d904      	bls.n	80188e2 <_malloc_r+0x26>
 80188d8:	230c      	movs	r3, #12
 80188da:	6033      	str	r3, [r6, #0]
 80188dc:	2000      	movs	r0, #0
 80188de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80189b8 <_malloc_r+0xfc>
 80188e6:	f000 f869 	bl	80189bc <__malloc_lock>
 80188ea:	f8d8 3000 	ldr.w	r3, [r8]
 80188ee:	461c      	mov	r4, r3
 80188f0:	bb44      	cbnz	r4, 8018944 <_malloc_r+0x88>
 80188f2:	4629      	mov	r1, r5
 80188f4:	4630      	mov	r0, r6
 80188f6:	f7ff ffbf 	bl	8018878 <sbrk_aligned>
 80188fa:	1c43      	adds	r3, r0, #1
 80188fc:	4604      	mov	r4, r0
 80188fe:	d158      	bne.n	80189b2 <_malloc_r+0xf6>
 8018900:	f8d8 4000 	ldr.w	r4, [r8]
 8018904:	4627      	mov	r7, r4
 8018906:	2f00      	cmp	r7, #0
 8018908:	d143      	bne.n	8018992 <_malloc_r+0xd6>
 801890a:	2c00      	cmp	r4, #0
 801890c:	d04b      	beq.n	80189a6 <_malloc_r+0xea>
 801890e:	6823      	ldr	r3, [r4, #0]
 8018910:	4639      	mov	r1, r7
 8018912:	4630      	mov	r0, r6
 8018914:	eb04 0903 	add.w	r9, r4, r3
 8018918:	f000 fdd6 	bl	80194c8 <_sbrk_r>
 801891c:	4581      	cmp	r9, r0
 801891e:	d142      	bne.n	80189a6 <_malloc_r+0xea>
 8018920:	6821      	ldr	r1, [r4, #0]
 8018922:	1a6d      	subs	r5, r5, r1
 8018924:	4629      	mov	r1, r5
 8018926:	4630      	mov	r0, r6
 8018928:	f7ff ffa6 	bl	8018878 <sbrk_aligned>
 801892c:	3001      	adds	r0, #1
 801892e:	d03a      	beq.n	80189a6 <_malloc_r+0xea>
 8018930:	6823      	ldr	r3, [r4, #0]
 8018932:	442b      	add	r3, r5
 8018934:	6023      	str	r3, [r4, #0]
 8018936:	f8d8 3000 	ldr.w	r3, [r8]
 801893a:	685a      	ldr	r2, [r3, #4]
 801893c:	bb62      	cbnz	r2, 8018998 <_malloc_r+0xdc>
 801893e:	f8c8 7000 	str.w	r7, [r8]
 8018942:	e00f      	b.n	8018964 <_malloc_r+0xa8>
 8018944:	6822      	ldr	r2, [r4, #0]
 8018946:	1b52      	subs	r2, r2, r5
 8018948:	d420      	bmi.n	801898c <_malloc_r+0xd0>
 801894a:	2a0b      	cmp	r2, #11
 801894c:	d917      	bls.n	801897e <_malloc_r+0xc2>
 801894e:	1961      	adds	r1, r4, r5
 8018950:	42a3      	cmp	r3, r4
 8018952:	6025      	str	r5, [r4, #0]
 8018954:	bf18      	it	ne
 8018956:	6059      	strne	r1, [r3, #4]
 8018958:	6863      	ldr	r3, [r4, #4]
 801895a:	bf08      	it	eq
 801895c:	f8c8 1000 	streq.w	r1, [r8]
 8018960:	5162      	str	r2, [r4, r5]
 8018962:	604b      	str	r3, [r1, #4]
 8018964:	4630      	mov	r0, r6
 8018966:	f000 f82f 	bl	80189c8 <__malloc_unlock>
 801896a:	f104 000b 	add.w	r0, r4, #11
 801896e:	1d23      	adds	r3, r4, #4
 8018970:	f020 0007 	bic.w	r0, r0, #7
 8018974:	1ac2      	subs	r2, r0, r3
 8018976:	bf1c      	itt	ne
 8018978:	1a1b      	subne	r3, r3, r0
 801897a:	50a3      	strne	r3, [r4, r2]
 801897c:	e7af      	b.n	80188de <_malloc_r+0x22>
 801897e:	6862      	ldr	r2, [r4, #4]
 8018980:	42a3      	cmp	r3, r4
 8018982:	bf0c      	ite	eq
 8018984:	f8c8 2000 	streq.w	r2, [r8]
 8018988:	605a      	strne	r2, [r3, #4]
 801898a:	e7eb      	b.n	8018964 <_malloc_r+0xa8>
 801898c:	4623      	mov	r3, r4
 801898e:	6864      	ldr	r4, [r4, #4]
 8018990:	e7ae      	b.n	80188f0 <_malloc_r+0x34>
 8018992:	463c      	mov	r4, r7
 8018994:	687f      	ldr	r7, [r7, #4]
 8018996:	e7b6      	b.n	8018906 <_malloc_r+0x4a>
 8018998:	461a      	mov	r2, r3
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	42a3      	cmp	r3, r4
 801899e:	d1fb      	bne.n	8018998 <_malloc_r+0xdc>
 80189a0:	2300      	movs	r3, #0
 80189a2:	6053      	str	r3, [r2, #4]
 80189a4:	e7de      	b.n	8018964 <_malloc_r+0xa8>
 80189a6:	230c      	movs	r3, #12
 80189a8:	6033      	str	r3, [r6, #0]
 80189aa:	4630      	mov	r0, r6
 80189ac:	f000 f80c 	bl	80189c8 <__malloc_unlock>
 80189b0:	e794      	b.n	80188dc <_malloc_r+0x20>
 80189b2:	6005      	str	r5, [r0, #0]
 80189b4:	e7d6      	b.n	8018964 <_malloc_r+0xa8>
 80189b6:	bf00      	nop
 80189b8:	2000f3b8 	.word	0x2000f3b8

080189bc <__malloc_lock>:
 80189bc:	4801      	ldr	r0, [pc, #4]	@ (80189c4 <__malloc_lock+0x8>)
 80189be:	f7ff beda 	b.w	8018776 <__retarget_lock_acquire_recursive>
 80189c2:	bf00      	nop
 80189c4:	2000f3b0 	.word	0x2000f3b0

080189c8 <__malloc_unlock>:
 80189c8:	4801      	ldr	r0, [pc, #4]	@ (80189d0 <__malloc_unlock+0x8>)
 80189ca:	f7ff bed5 	b.w	8018778 <__retarget_lock_release_recursive>
 80189ce:	bf00      	nop
 80189d0:	2000f3b0 	.word	0x2000f3b0

080189d4 <__ssputs_r>:
 80189d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189d8:	688e      	ldr	r6, [r1, #8]
 80189da:	461f      	mov	r7, r3
 80189dc:	42be      	cmp	r6, r7
 80189de:	680b      	ldr	r3, [r1, #0]
 80189e0:	4682      	mov	sl, r0
 80189e2:	460c      	mov	r4, r1
 80189e4:	4690      	mov	r8, r2
 80189e6:	d82d      	bhi.n	8018a44 <__ssputs_r+0x70>
 80189e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80189ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80189f0:	d026      	beq.n	8018a40 <__ssputs_r+0x6c>
 80189f2:	6965      	ldr	r5, [r4, #20]
 80189f4:	6909      	ldr	r1, [r1, #16]
 80189f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189fa:	eba3 0901 	sub.w	r9, r3, r1
 80189fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018a02:	1c7b      	adds	r3, r7, #1
 8018a04:	444b      	add	r3, r9
 8018a06:	106d      	asrs	r5, r5, #1
 8018a08:	429d      	cmp	r5, r3
 8018a0a:	bf38      	it	cc
 8018a0c:	461d      	movcc	r5, r3
 8018a0e:	0553      	lsls	r3, r2, #21
 8018a10:	d527      	bpl.n	8018a62 <__ssputs_r+0x8e>
 8018a12:	4629      	mov	r1, r5
 8018a14:	f7ff ff52 	bl	80188bc <_malloc_r>
 8018a18:	4606      	mov	r6, r0
 8018a1a:	b360      	cbz	r0, 8018a76 <__ssputs_r+0xa2>
 8018a1c:	6921      	ldr	r1, [r4, #16]
 8018a1e:	464a      	mov	r2, r9
 8018a20:	f7ff feab 	bl	801877a <memcpy>
 8018a24:	89a3      	ldrh	r3, [r4, #12]
 8018a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a2e:	81a3      	strh	r3, [r4, #12]
 8018a30:	6126      	str	r6, [r4, #16]
 8018a32:	6165      	str	r5, [r4, #20]
 8018a34:	444e      	add	r6, r9
 8018a36:	eba5 0509 	sub.w	r5, r5, r9
 8018a3a:	6026      	str	r6, [r4, #0]
 8018a3c:	60a5      	str	r5, [r4, #8]
 8018a3e:	463e      	mov	r6, r7
 8018a40:	42be      	cmp	r6, r7
 8018a42:	d900      	bls.n	8018a46 <__ssputs_r+0x72>
 8018a44:	463e      	mov	r6, r7
 8018a46:	6820      	ldr	r0, [r4, #0]
 8018a48:	4632      	mov	r2, r6
 8018a4a:	4641      	mov	r1, r8
 8018a4c:	f7ff fd91 	bl	8018572 <memmove>
 8018a50:	68a3      	ldr	r3, [r4, #8]
 8018a52:	1b9b      	subs	r3, r3, r6
 8018a54:	60a3      	str	r3, [r4, #8]
 8018a56:	6823      	ldr	r3, [r4, #0]
 8018a58:	4433      	add	r3, r6
 8018a5a:	6023      	str	r3, [r4, #0]
 8018a5c:	2000      	movs	r0, #0
 8018a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a62:	462a      	mov	r2, r5
 8018a64:	f000 fd47 	bl	80194f6 <_realloc_r>
 8018a68:	4606      	mov	r6, r0
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d1e0      	bne.n	8018a30 <__ssputs_r+0x5c>
 8018a6e:	6921      	ldr	r1, [r4, #16]
 8018a70:	4650      	mov	r0, sl
 8018a72:	f7ff feaf 	bl	80187d4 <_free_r>
 8018a76:	230c      	movs	r3, #12
 8018a78:	f8ca 3000 	str.w	r3, [sl]
 8018a7c:	89a3      	ldrh	r3, [r4, #12]
 8018a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018a82:	81a3      	strh	r3, [r4, #12]
 8018a84:	f04f 30ff 	mov.w	r0, #4294967295
 8018a88:	e7e9      	b.n	8018a5e <__ssputs_r+0x8a>
	...

08018a8c <_svfiprintf_r>:
 8018a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a90:	4698      	mov	r8, r3
 8018a92:	898b      	ldrh	r3, [r1, #12]
 8018a94:	061b      	lsls	r3, r3, #24
 8018a96:	b09d      	sub	sp, #116	@ 0x74
 8018a98:	4607      	mov	r7, r0
 8018a9a:	460d      	mov	r5, r1
 8018a9c:	4614      	mov	r4, r2
 8018a9e:	d510      	bpl.n	8018ac2 <_svfiprintf_r+0x36>
 8018aa0:	690b      	ldr	r3, [r1, #16]
 8018aa2:	b973      	cbnz	r3, 8018ac2 <_svfiprintf_r+0x36>
 8018aa4:	2140      	movs	r1, #64	@ 0x40
 8018aa6:	f7ff ff09 	bl	80188bc <_malloc_r>
 8018aaa:	6028      	str	r0, [r5, #0]
 8018aac:	6128      	str	r0, [r5, #16]
 8018aae:	b930      	cbnz	r0, 8018abe <_svfiprintf_r+0x32>
 8018ab0:	230c      	movs	r3, #12
 8018ab2:	603b      	str	r3, [r7, #0]
 8018ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab8:	b01d      	add	sp, #116	@ 0x74
 8018aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018abe:	2340      	movs	r3, #64	@ 0x40
 8018ac0:	616b      	str	r3, [r5, #20]
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ac6:	2320      	movs	r3, #32
 8018ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ad0:	2330      	movs	r3, #48	@ 0x30
 8018ad2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018c70 <_svfiprintf_r+0x1e4>
 8018ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018ada:	f04f 0901 	mov.w	r9, #1
 8018ade:	4623      	mov	r3, r4
 8018ae0:	469a      	mov	sl, r3
 8018ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ae6:	b10a      	cbz	r2, 8018aec <_svfiprintf_r+0x60>
 8018ae8:	2a25      	cmp	r2, #37	@ 0x25
 8018aea:	d1f9      	bne.n	8018ae0 <_svfiprintf_r+0x54>
 8018aec:	ebba 0b04 	subs.w	fp, sl, r4
 8018af0:	d00b      	beq.n	8018b0a <_svfiprintf_r+0x7e>
 8018af2:	465b      	mov	r3, fp
 8018af4:	4622      	mov	r2, r4
 8018af6:	4629      	mov	r1, r5
 8018af8:	4638      	mov	r0, r7
 8018afa:	f7ff ff6b 	bl	80189d4 <__ssputs_r>
 8018afe:	3001      	adds	r0, #1
 8018b00:	f000 80a7 	beq.w	8018c52 <_svfiprintf_r+0x1c6>
 8018b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b06:	445a      	add	r2, fp
 8018b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	f000 809f 	beq.w	8018c52 <_svfiprintf_r+0x1c6>
 8018b14:	2300      	movs	r3, #0
 8018b16:	f04f 32ff 	mov.w	r2, #4294967295
 8018b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b1e:	f10a 0a01 	add.w	sl, sl, #1
 8018b22:	9304      	str	r3, [sp, #16]
 8018b24:	9307      	str	r3, [sp, #28]
 8018b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8018b2c:	4654      	mov	r4, sl
 8018b2e:	2205      	movs	r2, #5
 8018b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b34:	484e      	ldr	r0, [pc, #312]	@ (8018c70 <_svfiprintf_r+0x1e4>)
 8018b36:	f7e7 fb83 	bl	8000240 <memchr>
 8018b3a:	9a04      	ldr	r2, [sp, #16]
 8018b3c:	b9d8      	cbnz	r0, 8018b76 <_svfiprintf_r+0xea>
 8018b3e:	06d0      	lsls	r0, r2, #27
 8018b40:	bf44      	itt	mi
 8018b42:	2320      	movmi	r3, #32
 8018b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b48:	0711      	lsls	r1, r2, #28
 8018b4a:	bf44      	itt	mi
 8018b4c:	232b      	movmi	r3, #43	@ 0x2b
 8018b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018b52:	f89a 3000 	ldrb.w	r3, [sl]
 8018b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b58:	d015      	beq.n	8018b86 <_svfiprintf_r+0xfa>
 8018b5a:	9a07      	ldr	r2, [sp, #28]
 8018b5c:	4654      	mov	r4, sl
 8018b5e:	2000      	movs	r0, #0
 8018b60:	f04f 0c0a 	mov.w	ip, #10
 8018b64:	4621      	mov	r1, r4
 8018b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b6a:	3b30      	subs	r3, #48	@ 0x30
 8018b6c:	2b09      	cmp	r3, #9
 8018b6e:	d94b      	bls.n	8018c08 <_svfiprintf_r+0x17c>
 8018b70:	b1b0      	cbz	r0, 8018ba0 <_svfiprintf_r+0x114>
 8018b72:	9207      	str	r2, [sp, #28]
 8018b74:	e014      	b.n	8018ba0 <_svfiprintf_r+0x114>
 8018b76:	eba0 0308 	sub.w	r3, r0, r8
 8018b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	9304      	str	r3, [sp, #16]
 8018b82:	46a2      	mov	sl, r4
 8018b84:	e7d2      	b.n	8018b2c <_svfiprintf_r+0xa0>
 8018b86:	9b03      	ldr	r3, [sp, #12]
 8018b88:	1d19      	adds	r1, r3, #4
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	9103      	str	r1, [sp, #12]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	bfbb      	ittet	lt
 8018b92:	425b      	neglt	r3, r3
 8018b94:	f042 0202 	orrlt.w	r2, r2, #2
 8018b98:	9307      	strge	r3, [sp, #28]
 8018b9a:	9307      	strlt	r3, [sp, #28]
 8018b9c:	bfb8      	it	lt
 8018b9e:	9204      	strlt	r2, [sp, #16]
 8018ba0:	7823      	ldrb	r3, [r4, #0]
 8018ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8018ba4:	d10a      	bne.n	8018bbc <_svfiprintf_r+0x130>
 8018ba6:	7863      	ldrb	r3, [r4, #1]
 8018ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8018baa:	d132      	bne.n	8018c12 <_svfiprintf_r+0x186>
 8018bac:	9b03      	ldr	r3, [sp, #12]
 8018bae:	1d1a      	adds	r2, r3, #4
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	9203      	str	r2, [sp, #12]
 8018bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018bb8:	3402      	adds	r4, #2
 8018bba:	9305      	str	r3, [sp, #20]
 8018bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018c80 <_svfiprintf_r+0x1f4>
 8018bc0:	7821      	ldrb	r1, [r4, #0]
 8018bc2:	2203      	movs	r2, #3
 8018bc4:	4650      	mov	r0, sl
 8018bc6:	f7e7 fb3b 	bl	8000240 <memchr>
 8018bca:	b138      	cbz	r0, 8018bdc <_svfiprintf_r+0x150>
 8018bcc:	9b04      	ldr	r3, [sp, #16]
 8018bce:	eba0 000a 	sub.w	r0, r0, sl
 8018bd2:	2240      	movs	r2, #64	@ 0x40
 8018bd4:	4082      	lsls	r2, r0
 8018bd6:	4313      	orrs	r3, r2
 8018bd8:	3401      	adds	r4, #1
 8018bda:	9304      	str	r3, [sp, #16]
 8018bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018be0:	4824      	ldr	r0, [pc, #144]	@ (8018c74 <_svfiprintf_r+0x1e8>)
 8018be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018be6:	2206      	movs	r2, #6
 8018be8:	f7e7 fb2a 	bl	8000240 <memchr>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d036      	beq.n	8018c5e <_svfiprintf_r+0x1d2>
 8018bf0:	4b21      	ldr	r3, [pc, #132]	@ (8018c78 <_svfiprintf_r+0x1ec>)
 8018bf2:	bb1b      	cbnz	r3, 8018c3c <_svfiprintf_r+0x1b0>
 8018bf4:	9b03      	ldr	r3, [sp, #12]
 8018bf6:	3307      	adds	r3, #7
 8018bf8:	f023 0307 	bic.w	r3, r3, #7
 8018bfc:	3308      	adds	r3, #8
 8018bfe:	9303      	str	r3, [sp, #12]
 8018c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c02:	4433      	add	r3, r6
 8018c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c06:	e76a      	b.n	8018ade <_svfiprintf_r+0x52>
 8018c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c0c:	460c      	mov	r4, r1
 8018c0e:	2001      	movs	r0, #1
 8018c10:	e7a8      	b.n	8018b64 <_svfiprintf_r+0xd8>
 8018c12:	2300      	movs	r3, #0
 8018c14:	3401      	adds	r4, #1
 8018c16:	9305      	str	r3, [sp, #20]
 8018c18:	4619      	mov	r1, r3
 8018c1a:	f04f 0c0a 	mov.w	ip, #10
 8018c1e:	4620      	mov	r0, r4
 8018c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c24:	3a30      	subs	r2, #48	@ 0x30
 8018c26:	2a09      	cmp	r2, #9
 8018c28:	d903      	bls.n	8018c32 <_svfiprintf_r+0x1a6>
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d0c6      	beq.n	8018bbc <_svfiprintf_r+0x130>
 8018c2e:	9105      	str	r1, [sp, #20]
 8018c30:	e7c4      	b.n	8018bbc <_svfiprintf_r+0x130>
 8018c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c36:	4604      	mov	r4, r0
 8018c38:	2301      	movs	r3, #1
 8018c3a:	e7f0      	b.n	8018c1e <_svfiprintf_r+0x192>
 8018c3c:	ab03      	add	r3, sp, #12
 8018c3e:	9300      	str	r3, [sp, #0]
 8018c40:	462a      	mov	r2, r5
 8018c42:	4b0e      	ldr	r3, [pc, #56]	@ (8018c7c <_svfiprintf_r+0x1f0>)
 8018c44:	a904      	add	r1, sp, #16
 8018c46:	4638      	mov	r0, r7
 8018c48:	f3af 8000 	nop.w
 8018c4c:	1c42      	adds	r2, r0, #1
 8018c4e:	4606      	mov	r6, r0
 8018c50:	d1d6      	bne.n	8018c00 <_svfiprintf_r+0x174>
 8018c52:	89ab      	ldrh	r3, [r5, #12]
 8018c54:	065b      	lsls	r3, r3, #25
 8018c56:	f53f af2d 	bmi.w	8018ab4 <_svfiprintf_r+0x28>
 8018c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018c5c:	e72c      	b.n	8018ab8 <_svfiprintf_r+0x2c>
 8018c5e:	ab03      	add	r3, sp, #12
 8018c60:	9300      	str	r3, [sp, #0]
 8018c62:	462a      	mov	r2, r5
 8018c64:	4b05      	ldr	r3, [pc, #20]	@ (8018c7c <_svfiprintf_r+0x1f0>)
 8018c66:	a904      	add	r1, sp, #16
 8018c68:	4638      	mov	r0, r7
 8018c6a:	f000 f9bb 	bl	8018fe4 <_printf_i>
 8018c6e:	e7ed      	b.n	8018c4c <_svfiprintf_r+0x1c0>
 8018c70:	0801deb7 	.word	0x0801deb7
 8018c74:	0801dec1 	.word	0x0801dec1
 8018c78:	00000000 	.word	0x00000000
 8018c7c:	080189d5 	.word	0x080189d5
 8018c80:	0801debd 	.word	0x0801debd

08018c84 <__sfputc_r>:
 8018c84:	6893      	ldr	r3, [r2, #8]
 8018c86:	3b01      	subs	r3, #1
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	b410      	push	{r4}
 8018c8c:	6093      	str	r3, [r2, #8]
 8018c8e:	da08      	bge.n	8018ca2 <__sfputc_r+0x1e>
 8018c90:	6994      	ldr	r4, [r2, #24]
 8018c92:	42a3      	cmp	r3, r4
 8018c94:	db01      	blt.n	8018c9a <__sfputc_r+0x16>
 8018c96:	290a      	cmp	r1, #10
 8018c98:	d103      	bne.n	8018ca2 <__sfputc_r+0x1e>
 8018c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c9e:	f000 bb7f 	b.w	80193a0 <__swbuf_r>
 8018ca2:	6813      	ldr	r3, [r2, #0]
 8018ca4:	1c58      	adds	r0, r3, #1
 8018ca6:	6010      	str	r0, [r2, #0]
 8018ca8:	7019      	strb	r1, [r3, #0]
 8018caa:	4608      	mov	r0, r1
 8018cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cb0:	4770      	bx	lr

08018cb2 <__sfputs_r>:
 8018cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cb4:	4606      	mov	r6, r0
 8018cb6:	460f      	mov	r7, r1
 8018cb8:	4614      	mov	r4, r2
 8018cba:	18d5      	adds	r5, r2, r3
 8018cbc:	42ac      	cmp	r4, r5
 8018cbe:	d101      	bne.n	8018cc4 <__sfputs_r+0x12>
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	e007      	b.n	8018cd4 <__sfputs_r+0x22>
 8018cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cc8:	463a      	mov	r2, r7
 8018cca:	4630      	mov	r0, r6
 8018ccc:	f7ff ffda 	bl	8018c84 <__sfputc_r>
 8018cd0:	1c43      	adds	r3, r0, #1
 8018cd2:	d1f3      	bne.n	8018cbc <__sfputs_r+0xa>
 8018cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018cd8 <_vfiprintf_r>:
 8018cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cdc:	460d      	mov	r5, r1
 8018cde:	b09d      	sub	sp, #116	@ 0x74
 8018ce0:	4614      	mov	r4, r2
 8018ce2:	4698      	mov	r8, r3
 8018ce4:	4606      	mov	r6, r0
 8018ce6:	b118      	cbz	r0, 8018cf0 <_vfiprintf_r+0x18>
 8018ce8:	6a03      	ldr	r3, [r0, #32]
 8018cea:	b90b      	cbnz	r3, 8018cf0 <_vfiprintf_r+0x18>
 8018cec:	f7ff fb86 	bl	80183fc <__sinit>
 8018cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cf2:	07d9      	lsls	r1, r3, #31
 8018cf4:	d405      	bmi.n	8018d02 <_vfiprintf_r+0x2a>
 8018cf6:	89ab      	ldrh	r3, [r5, #12]
 8018cf8:	059a      	lsls	r2, r3, #22
 8018cfa:	d402      	bmi.n	8018d02 <_vfiprintf_r+0x2a>
 8018cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018cfe:	f7ff fd3a 	bl	8018776 <__retarget_lock_acquire_recursive>
 8018d02:	89ab      	ldrh	r3, [r5, #12]
 8018d04:	071b      	lsls	r3, r3, #28
 8018d06:	d501      	bpl.n	8018d0c <_vfiprintf_r+0x34>
 8018d08:	692b      	ldr	r3, [r5, #16]
 8018d0a:	b99b      	cbnz	r3, 8018d34 <_vfiprintf_r+0x5c>
 8018d0c:	4629      	mov	r1, r5
 8018d0e:	4630      	mov	r0, r6
 8018d10:	f000 fb84 	bl	801941c <__swsetup_r>
 8018d14:	b170      	cbz	r0, 8018d34 <_vfiprintf_r+0x5c>
 8018d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d18:	07dc      	lsls	r4, r3, #31
 8018d1a:	d504      	bpl.n	8018d26 <_vfiprintf_r+0x4e>
 8018d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d20:	b01d      	add	sp, #116	@ 0x74
 8018d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d26:	89ab      	ldrh	r3, [r5, #12]
 8018d28:	0598      	lsls	r0, r3, #22
 8018d2a:	d4f7      	bmi.n	8018d1c <_vfiprintf_r+0x44>
 8018d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d2e:	f7ff fd23 	bl	8018778 <__retarget_lock_release_recursive>
 8018d32:	e7f3      	b.n	8018d1c <_vfiprintf_r+0x44>
 8018d34:	2300      	movs	r3, #0
 8018d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d38:	2320      	movs	r3, #32
 8018d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d42:	2330      	movs	r3, #48	@ 0x30
 8018d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018ef4 <_vfiprintf_r+0x21c>
 8018d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d4c:	f04f 0901 	mov.w	r9, #1
 8018d50:	4623      	mov	r3, r4
 8018d52:	469a      	mov	sl, r3
 8018d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d58:	b10a      	cbz	r2, 8018d5e <_vfiprintf_r+0x86>
 8018d5a:	2a25      	cmp	r2, #37	@ 0x25
 8018d5c:	d1f9      	bne.n	8018d52 <_vfiprintf_r+0x7a>
 8018d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8018d62:	d00b      	beq.n	8018d7c <_vfiprintf_r+0xa4>
 8018d64:	465b      	mov	r3, fp
 8018d66:	4622      	mov	r2, r4
 8018d68:	4629      	mov	r1, r5
 8018d6a:	4630      	mov	r0, r6
 8018d6c:	f7ff ffa1 	bl	8018cb2 <__sfputs_r>
 8018d70:	3001      	adds	r0, #1
 8018d72:	f000 80a7 	beq.w	8018ec4 <_vfiprintf_r+0x1ec>
 8018d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d78:	445a      	add	r2, fp
 8018d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	f000 809f 	beq.w	8018ec4 <_vfiprintf_r+0x1ec>
 8018d86:	2300      	movs	r3, #0
 8018d88:	f04f 32ff 	mov.w	r2, #4294967295
 8018d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d90:	f10a 0a01 	add.w	sl, sl, #1
 8018d94:	9304      	str	r3, [sp, #16]
 8018d96:	9307      	str	r3, [sp, #28]
 8018d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8018d9e:	4654      	mov	r4, sl
 8018da0:	2205      	movs	r2, #5
 8018da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018da6:	4853      	ldr	r0, [pc, #332]	@ (8018ef4 <_vfiprintf_r+0x21c>)
 8018da8:	f7e7 fa4a 	bl	8000240 <memchr>
 8018dac:	9a04      	ldr	r2, [sp, #16]
 8018dae:	b9d8      	cbnz	r0, 8018de8 <_vfiprintf_r+0x110>
 8018db0:	06d1      	lsls	r1, r2, #27
 8018db2:	bf44      	itt	mi
 8018db4:	2320      	movmi	r3, #32
 8018db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dba:	0713      	lsls	r3, r2, #28
 8018dbc:	bf44      	itt	mi
 8018dbe:	232b      	movmi	r3, #43	@ 0x2b
 8018dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8018dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8018dca:	d015      	beq.n	8018df8 <_vfiprintf_r+0x120>
 8018dcc:	9a07      	ldr	r2, [sp, #28]
 8018dce:	4654      	mov	r4, sl
 8018dd0:	2000      	movs	r0, #0
 8018dd2:	f04f 0c0a 	mov.w	ip, #10
 8018dd6:	4621      	mov	r1, r4
 8018dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ddc:	3b30      	subs	r3, #48	@ 0x30
 8018dde:	2b09      	cmp	r3, #9
 8018de0:	d94b      	bls.n	8018e7a <_vfiprintf_r+0x1a2>
 8018de2:	b1b0      	cbz	r0, 8018e12 <_vfiprintf_r+0x13a>
 8018de4:	9207      	str	r2, [sp, #28]
 8018de6:	e014      	b.n	8018e12 <_vfiprintf_r+0x13a>
 8018de8:	eba0 0308 	sub.w	r3, r0, r8
 8018dec:	fa09 f303 	lsl.w	r3, r9, r3
 8018df0:	4313      	orrs	r3, r2
 8018df2:	9304      	str	r3, [sp, #16]
 8018df4:	46a2      	mov	sl, r4
 8018df6:	e7d2      	b.n	8018d9e <_vfiprintf_r+0xc6>
 8018df8:	9b03      	ldr	r3, [sp, #12]
 8018dfa:	1d19      	adds	r1, r3, #4
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	9103      	str	r1, [sp, #12]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	bfbb      	ittet	lt
 8018e04:	425b      	neglt	r3, r3
 8018e06:	f042 0202 	orrlt.w	r2, r2, #2
 8018e0a:	9307      	strge	r3, [sp, #28]
 8018e0c:	9307      	strlt	r3, [sp, #28]
 8018e0e:	bfb8      	it	lt
 8018e10:	9204      	strlt	r2, [sp, #16]
 8018e12:	7823      	ldrb	r3, [r4, #0]
 8018e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e16:	d10a      	bne.n	8018e2e <_vfiprintf_r+0x156>
 8018e18:	7863      	ldrb	r3, [r4, #1]
 8018e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e1c:	d132      	bne.n	8018e84 <_vfiprintf_r+0x1ac>
 8018e1e:	9b03      	ldr	r3, [sp, #12]
 8018e20:	1d1a      	adds	r2, r3, #4
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	9203      	str	r2, [sp, #12]
 8018e26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e2a:	3402      	adds	r4, #2
 8018e2c:	9305      	str	r3, [sp, #20]
 8018e2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018f04 <_vfiprintf_r+0x22c>
 8018e32:	7821      	ldrb	r1, [r4, #0]
 8018e34:	2203      	movs	r2, #3
 8018e36:	4650      	mov	r0, sl
 8018e38:	f7e7 fa02 	bl	8000240 <memchr>
 8018e3c:	b138      	cbz	r0, 8018e4e <_vfiprintf_r+0x176>
 8018e3e:	9b04      	ldr	r3, [sp, #16]
 8018e40:	eba0 000a 	sub.w	r0, r0, sl
 8018e44:	2240      	movs	r2, #64	@ 0x40
 8018e46:	4082      	lsls	r2, r0
 8018e48:	4313      	orrs	r3, r2
 8018e4a:	3401      	adds	r4, #1
 8018e4c:	9304      	str	r3, [sp, #16]
 8018e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e52:	4829      	ldr	r0, [pc, #164]	@ (8018ef8 <_vfiprintf_r+0x220>)
 8018e54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e58:	2206      	movs	r2, #6
 8018e5a:	f7e7 f9f1 	bl	8000240 <memchr>
 8018e5e:	2800      	cmp	r0, #0
 8018e60:	d03f      	beq.n	8018ee2 <_vfiprintf_r+0x20a>
 8018e62:	4b26      	ldr	r3, [pc, #152]	@ (8018efc <_vfiprintf_r+0x224>)
 8018e64:	bb1b      	cbnz	r3, 8018eae <_vfiprintf_r+0x1d6>
 8018e66:	9b03      	ldr	r3, [sp, #12]
 8018e68:	3307      	adds	r3, #7
 8018e6a:	f023 0307 	bic.w	r3, r3, #7
 8018e6e:	3308      	adds	r3, #8
 8018e70:	9303      	str	r3, [sp, #12]
 8018e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e74:	443b      	add	r3, r7
 8018e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e78:	e76a      	b.n	8018d50 <_vfiprintf_r+0x78>
 8018e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e7e:	460c      	mov	r4, r1
 8018e80:	2001      	movs	r0, #1
 8018e82:	e7a8      	b.n	8018dd6 <_vfiprintf_r+0xfe>
 8018e84:	2300      	movs	r3, #0
 8018e86:	3401      	adds	r4, #1
 8018e88:	9305      	str	r3, [sp, #20]
 8018e8a:	4619      	mov	r1, r3
 8018e8c:	f04f 0c0a 	mov.w	ip, #10
 8018e90:	4620      	mov	r0, r4
 8018e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e96:	3a30      	subs	r2, #48	@ 0x30
 8018e98:	2a09      	cmp	r2, #9
 8018e9a:	d903      	bls.n	8018ea4 <_vfiprintf_r+0x1cc>
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d0c6      	beq.n	8018e2e <_vfiprintf_r+0x156>
 8018ea0:	9105      	str	r1, [sp, #20]
 8018ea2:	e7c4      	b.n	8018e2e <_vfiprintf_r+0x156>
 8018ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ea8:	4604      	mov	r4, r0
 8018eaa:	2301      	movs	r3, #1
 8018eac:	e7f0      	b.n	8018e90 <_vfiprintf_r+0x1b8>
 8018eae:	ab03      	add	r3, sp, #12
 8018eb0:	9300      	str	r3, [sp, #0]
 8018eb2:	462a      	mov	r2, r5
 8018eb4:	4b12      	ldr	r3, [pc, #72]	@ (8018f00 <_vfiprintf_r+0x228>)
 8018eb6:	a904      	add	r1, sp, #16
 8018eb8:	4630      	mov	r0, r6
 8018eba:	f3af 8000 	nop.w
 8018ebe:	4607      	mov	r7, r0
 8018ec0:	1c78      	adds	r0, r7, #1
 8018ec2:	d1d6      	bne.n	8018e72 <_vfiprintf_r+0x19a>
 8018ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ec6:	07d9      	lsls	r1, r3, #31
 8018ec8:	d405      	bmi.n	8018ed6 <_vfiprintf_r+0x1fe>
 8018eca:	89ab      	ldrh	r3, [r5, #12]
 8018ecc:	059a      	lsls	r2, r3, #22
 8018ece:	d402      	bmi.n	8018ed6 <_vfiprintf_r+0x1fe>
 8018ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ed2:	f7ff fc51 	bl	8018778 <__retarget_lock_release_recursive>
 8018ed6:	89ab      	ldrh	r3, [r5, #12]
 8018ed8:	065b      	lsls	r3, r3, #25
 8018eda:	f53f af1f 	bmi.w	8018d1c <_vfiprintf_r+0x44>
 8018ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ee0:	e71e      	b.n	8018d20 <_vfiprintf_r+0x48>
 8018ee2:	ab03      	add	r3, sp, #12
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	462a      	mov	r2, r5
 8018ee8:	4b05      	ldr	r3, [pc, #20]	@ (8018f00 <_vfiprintf_r+0x228>)
 8018eea:	a904      	add	r1, sp, #16
 8018eec:	4630      	mov	r0, r6
 8018eee:	f000 f879 	bl	8018fe4 <_printf_i>
 8018ef2:	e7e4      	b.n	8018ebe <_vfiprintf_r+0x1e6>
 8018ef4:	0801deb7 	.word	0x0801deb7
 8018ef8:	0801dec1 	.word	0x0801dec1
 8018efc:	00000000 	.word	0x00000000
 8018f00:	08018cb3 	.word	0x08018cb3
 8018f04:	0801debd 	.word	0x0801debd

08018f08 <_printf_common>:
 8018f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f0c:	4616      	mov	r6, r2
 8018f0e:	4698      	mov	r8, r3
 8018f10:	688a      	ldr	r2, [r1, #8]
 8018f12:	690b      	ldr	r3, [r1, #16]
 8018f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018f18:	4293      	cmp	r3, r2
 8018f1a:	bfb8      	it	lt
 8018f1c:	4613      	movlt	r3, r2
 8018f1e:	6033      	str	r3, [r6, #0]
 8018f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018f24:	4607      	mov	r7, r0
 8018f26:	460c      	mov	r4, r1
 8018f28:	b10a      	cbz	r2, 8018f2e <_printf_common+0x26>
 8018f2a:	3301      	adds	r3, #1
 8018f2c:	6033      	str	r3, [r6, #0]
 8018f2e:	6823      	ldr	r3, [r4, #0]
 8018f30:	0699      	lsls	r1, r3, #26
 8018f32:	bf42      	ittt	mi
 8018f34:	6833      	ldrmi	r3, [r6, #0]
 8018f36:	3302      	addmi	r3, #2
 8018f38:	6033      	strmi	r3, [r6, #0]
 8018f3a:	6825      	ldr	r5, [r4, #0]
 8018f3c:	f015 0506 	ands.w	r5, r5, #6
 8018f40:	d106      	bne.n	8018f50 <_printf_common+0x48>
 8018f42:	f104 0a19 	add.w	sl, r4, #25
 8018f46:	68e3      	ldr	r3, [r4, #12]
 8018f48:	6832      	ldr	r2, [r6, #0]
 8018f4a:	1a9b      	subs	r3, r3, r2
 8018f4c:	42ab      	cmp	r3, r5
 8018f4e:	dc26      	bgt.n	8018f9e <_printf_common+0x96>
 8018f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018f54:	6822      	ldr	r2, [r4, #0]
 8018f56:	3b00      	subs	r3, #0
 8018f58:	bf18      	it	ne
 8018f5a:	2301      	movne	r3, #1
 8018f5c:	0692      	lsls	r2, r2, #26
 8018f5e:	d42b      	bmi.n	8018fb8 <_printf_common+0xb0>
 8018f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018f64:	4641      	mov	r1, r8
 8018f66:	4638      	mov	r0, r7
 8018f68:	47c8      	blx	r9
 8018f6a:	3001      	adds	r0, #1
 8018f6c:	d01e      	beq.n	8018fac <_printf_common+0xa4>
 8018f6e:	6823      	ldr	r3, [r4, #0]
 8018f70:	6922      	ldr	r2, [r4, #16]
 8018f72:	f003 0306 	and.w	r3, r3, #6
 8018f76:	2b04      	cmp	r3, #4
 8018f78:	bf02      	ittt	eq
 8018f7a:	68e5      	ldreq	r5, [r4, #12]
 8018f7c:	6833      	ldreq	r3, [r6, #0]
 8018f7e:	1aed      	subeq	r5, r5, r3
 8018f80:	68a3      	ldr	r3, [r4, #8]
 8018f82:	bf0c      	ite	eq
 8018f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f88:	2500      	movne	r5, #0
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	bfc4      	itt	gt
 8018f8e:	1a9b      	subgt	r3, r3, r2
 8018f90:	18ed      	addgt	r5, r5, r3
 8018f92:	2600      	movs	r6, #0
 8018f94:	341a      	adds	r4, #26
 8018f96:	42b5      	cmp	r5, r6
 8018f98:	d11a      	bne.n	8018fd0 <_printf_common+0xc8>
 8018f9a:	2000      	movs	r0, #0
 8018f9c:	e008      	b.n	8018fb0 <_printf_common+0xa8>
 8018f9e:	2301      	movs	r3, #1
 8018fa0:	4652      	mov	r2, sl
 8018fa2:	4641      	mov	r1, r8
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	47c8      	blx	r9
 8018fa8:	3001      	adds	r0, #1
 8018faa:	d103      	bne.n	8018fb4 <_printf_common+0xac>
 8018fac:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fb4:	3501      	adds	r5, #1
 8018fb6:	e7c6      	b.n	8018f46 <_printf_common+0x3e>
 8018fb8:	18e1      	adds	r1, r4, r3
 8018fba:	1c5a      	adds	r2, r3, #1
 8018fbc:	2030      	movs	r0, #48	@ 0x30
 8018fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018fc2:	4422      	add	r2, r4
 8018fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018fcc:	3302      	adds	r3, #2
 8018fce:	e7c7      	b.n	8018f60 <_printf_common+0x58>
 8018fd0:	2301      	movs	r3, #1
 8018fd2:	4622      	mov	r2, r4
 8018fd4:	4641      	mov	r1, r8
 8018fd6:	4638      	mov	r0, r7
 8018fd8:	47c8      	blx	r9
 8018fda:	3001      	adds	r0, #1
 8018fdc:	d0e6      	beq.n	8018fac <_printf_common+0xa4>
 8018fde:	3601      	adds	r6, #1
 8018fe0:	e7d9      	b.n	8018f96 <_printf_common+0x8e>
	...

08018fe4 <_printf_i>:
 8018fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe8:	7e0f      	ldrb	r7, [r1, #24]
 8018fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018fec:	2f78      	cmp	r7, #120	@ 0x78
 8018fee:	4691      	mov	r9, r2
 8018ff0:	4680      	mov	r8, r0
 8018ff2:	460c      	mov	r4, r1
 8018ff4:	469a      	mov	sl, r3
 8018ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018ffa:	d807      	bhi.n	801900c <_printf_i+0x28>
 8018ffc:	2f62      	cmp	r7, #98	@ 0x62
 8018ffe:	d80a      	bhi.n	8019016 <_printf_i+0x32>
 8019000:	2f00      	cmp	r7, #0
 8019002:	f000 80d2 	beq.w	80191aa <_printf_i+0x1c6>
 8019006:	2f58      	cmp	r7, #88	@ 0x58
 8019008:	f000 80b9 	beq.w	801917e <_printf_i+0x19a>
 801900c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019014:	e03a      	b.n	801908c <_printf_i+0xa8>
 8019016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801901a:	2b15      	cmp	r3, #21
 801901c:	d8f6      	bhi.n	801900c <_printf_i+0x28>
 801901e:	a101      	add	r1, pc, #4	@ (adr r1, 8019024 <_printf_i+0x40>)
 8019020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019024:	0801907d 	.word	0x0801907d
 8019028:	08019091 	.word	0x08019091
 801902c:	0801900d 	.word	0x0801900d
 8019030:	0801900d 	.word	0x0801900d
 8019034:	0801900d 	.word	0x0801900d
 8019038:	0801900d 	.word	0x0801900d
 801903c:	08019091 	.word	0x08019091
 8019040:	0801900d 	.word	0x0801900d
 8019044:	0801900d 	.word	0x0801900d
 8019048:	0801900d 	.word	0x0801900d
 801904c:	0801900d 	.word	0x0801900d
 8019050:	08019191 	.word	0x08019191
 8019054:	080190bb 	.word	0x080190bb
 8019058:	0801914b 	.word	0x0801914b
 801905c:	0801900d 	.word	0x0801900d
 8019060:	0801900d 	.word	0x0801900d
 8019064:	080191b3 	.word	0x080191b3
 8019068:	0801900d 	.word	0x0801900d
 801906c:	080190bb 	.word	0x080190bb
 8019070:	0801900d 	.word	0x0801900d
 8019074:	0801900d 	.word	0x0801900d
 8019078:	08019153 	.word	0x08019153
 801907c:	6833      	ldr	r3, [r6, #0]
 801907e:	1d1a      	adds	r2, r3, #4
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	6032      	str	r2, [r6, #0]
 8019084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801908c:	2301      	movs	r3, #1
 801908e:	e09d      	b.n	80191cc <_printf_i+0x1e8>
 8019090:	6833      	ldr	r3, [r6, #0]
 8019092:	6820      	ldr	r0, [r4, #0]
 8019094:	1d19      	adds	r1, r3, #4
 8019096:	6031      	str	r1, [r6, #0]
 8019098:	0606      	lsls	r6, r0, #24
 801909a:	d501      	bpl.n	80190a0 <_printf_i+0xbc>
 801909c:	681d      	ldr	r5, [r3, #0]
 801909e:	e003      	b.n	80190a8 <_printf_i+0xc4>
 80190a0:	0645      	lsls	r5, r0, #25
 80190a2:	d5fb      	bpl.n	801909c <_printf_i+0xb8>
 80190a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80190a8:	2d00      	cmp	r5, #0
 80190aa:	da03      	bge.n	80190b4 <_printf_i+0xd0>
 80190ac:	232d      	movs	r3, #45	@ 0x2d
 80190ae:	426d      	negs	r5, r5
 80190b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80190b4:	4859      	ldr	r0, [pc, #356]	@ (801921c <_printf_i+0x238>)
 80190b6:	230a      	movs	r3, #10
 80190b8:	e011      	b.n	80190de <_printf_i+0xfa>
 80190ba:	6821      	ldr	r1, [r4, #0]
 80190bc:	6833      	ldr	r3, [r6, #0]
 80190be:	0608      	lsls	r0, r1, #24
 80190c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80190c4:	d402      	bmi.n	80190cc <_printf_i+0xe8>
 80190c6:	0649      	lsls	r1, r1, #25
 80190c8:	bf48      	it	mi
 80190ca:	b2ad      	uxthmi	r5, r5
 80190cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80190ce:	4853      	ldr	r0, [pc, #332]	@ (801921c <_printf_i+0x238>)
 80190d0:	6033      	str	r3, [r6, #0]
 80190d2:	bf14      	ite	ne
 80190d4:	230a      	movne	r3, #10
 80190d6:	2308      	moveq	r3, #8
 80190d8:	2100      	movs	r1, #0
 80190da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80190de:	6866      	ldr	r6, [r4, #4]
 80190e0:	60a6      	str	r6, [r4, #8]
 80190e2:	2e00      	cmp	r6, #0
 80190e4:	bfa2      	ittt	ge
 80190e6:	6821      	ldrge	r1, [r4, #0]
 80190e8:	f021 0104 	bicge.w	r1, r1, #4
 80190ec:	6021      	strge	r1, [r4, #0]
 80190ee:	b90d      	cbnz	r5, 80190f4 <_printf_i+0x110>
 80190f0:	2e00      	cmp	r6, #0
 80190f2:	d04b      	beq.n	801918c <_printf_i+0x1a8>
 80190f4:	4616      	mov	r6, r2
 80190f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80190fa:	fb03 5711 	mls	r7, r3, r1, r5
 80190fe:	5dc7      	ldrb	r7, [r0, r7]
 8019100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019104:	462f      	mov	r7, r5
 8019106:	42bb      	cmp	r3, r7
 8019108:	460d      	mov	r5, r1
 801910a:	d9f4      	bls.n	80190f6 <_printf_i+0x112>
 801910c:	2b08      	cmp	r3, #8
 801910e:	d10b      	bne.n	8019128 <_printf_i+0x144>
 8019110:	6823      	ldr	r3, [r4, #0]
 8019112:	07df      	lsls	r7, r3, #31
 8019114:	d508      	bpl.n	8019128 <_printf_i+0x144>
 8019116:	6923      	ldr	r3, [r4, #16]
 8019118:	6861      	ldr	r1, [r4, #4]
 801911a:	4299      	cmp	r1, r3
 801911c:	bfde      	ittt	le
 801911e:	2330      	movle	r3, #48	@ 0x30
 8019120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019128:	1b92      	subs	r2, r2, r6
 801912a:	6122      	str	r2, [r4, #16]
 801912c:	f8cd a000 	str.w	sl, [sp]
 8019130:	464b      	mov	r3, r9
 8019132:	aa03      	add	r2, sp, #12
 8019134:	4621      	mov	r1, r4
 8019136:	4640      	mov	r0, r8
 8019138:	f7ff fee6 	bl	8018f08 <_printf_common>
 801913c:	3001      	adds	r0, #1
 801913e:	d14a      	bne.n	80191d6 <_printf_i+0x1f2>
 8019140:	f04f 30ff 	mov.w	r0, #4294967295
 8019144:	b004      	add	sp, #16
 8019146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801914a:	6823      	ldr	r3, [r4, #0]
 801914c:	f043 0320 	orr.w	r3, r3, #32
 8019150:	6023      	str	r3, [r4, #0]
 8019152:	4833      	ldr	r0, [pc, #204]	@ (8019220 <_printf_i+0x23c>)
 8019154:	2778      	movs	r7, #120	@ 0x78
 8019156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801915a:	6823      	ldr	r3, [r4, #0]
 801915c:	6831      	ldr	r1, [r6, #0]
 801915e:	061f      	lsls	r7, r3, #24
 8019160:	f851 5b04 	ldr.w	r5, [r1], #4
 8019164:	d402      	bmi.n	801916c <_printf_i+0x188>
 8019166:	065f      	lsls	r7, r3, #25
 8019168:	bf48      	it	mi
 801916a:	b2ad      	uxthmi	r5, r5
 801916c:	6031      	str	r1, [r6, #0]
 801916e:	07d9      	lsls	r1, r3, #31
 8019170:	bf44      	itt	mi
 8019172:	f043 0320 	orrmi.w	r3, r3, #32
 8019176:	6023      	strmi	r3, [r4, #0]
 8019178:	b11d      	cbz	r5, 8019182 <_printf_i+0x19e>
 801917a:	2310      	movs	r3, #16
 801917c:	e7ac      	b.n	80190d8 <_printf_i+0xf4>
 801917e:	4827      	ldr	r0, [pc, #156]	@ (801921c <_printf_i+0x238>)
 8019180:	e7e9      	b.n	8019156 <_printf_i+0x172>
 8019182:	6823      	ldr	r3, [r4, #0]
 8019184:	f023 0320 	bic.w	r3, r3, #32
 8019188:	6023      	str	r3, [r4, #0]
 801918a:	e7f6      	b.n	801917a <_printf_i+0x196>
 801918c:	4616      	mov	r6, r2
 801918e:	e7bd      	b.n	801910c <_printf_i+0x128>
 8019190:	6833      	ldr	r3, [r6, #0]
 8019192:	6825      	ldr	r5, [r4, #0]
 8019194:	6961      	ldr	r1, [r4, #20]
 8019196:	1d18      	adds	r0, r3, #4
 8019198:	6030      	str	r0, [r6, #0]
 801919a:	062e      	lsls	r6, r5, #24
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	d501      	bpl.n	80191a4 <_printf_i+0x1c0>
 80191a0:	6019      	str	r1, [r3, #0]
 80191a2:	e002      	b.n	80191aa <_printf_i+0x1c6>
 80191a4:	0668      	lsls	r0, r5, #25
 80191a6:	d5fb      	bpl.n	80191a0 <_printf_i+0x1bc>
 80191a8:	8019      	strh	r1, [r3, #0]
 80191aa:	2300      	movs	r3, #0
 80191ac:	6123      	str	r3, [r4, #16]
 80191ae:	4616      	mov	r6, r2
 80191b0:	e7bc      	b.n	801912c <_printf_i+0x148>
 80191b2:	6833      	ldr	r3, [r6, #0]
 80191b4:	1d1a      	adds	r2, r3, #4
 80191b6:	6032      	str	r2, [r6, #0]
 80191b8:	681e      	ldr	r6, [r3, #0]
 80191ba:	6862      	ldr	r2, [r4, #4]
 80191bc:	2100      	movs	r1, #0
 80191be:	4630      	mov	r0, r6
 80191c0:	f7e7 f83e 	bl	8000240 <memchr>
 80191c4:	b108      	cbz	r0, 80191ca <_printf_i+0x1e6>
 80191c6:	1b80      	subs	r0, r0, r6
 80191c8:	6060      	str	r0, [r4, #4]
 80191ca:	6863      	ldr	r3, [r4, #4]
 80191cc:	6123      	str	r3, [r4, #16]
 80191ce:	2300      	movs	r3, #0
 80191d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80191d4:	e7aa      	b.n	801912c <_printf_i+0x148>
 80191d6:	6923      	ldr	r3, [r4, #16]
 80191d8:	4632      	mov	r2, r6
 80191da:	4649      	mov	r1, r9
 80191dc:	4640      	mov	r0, r8
 80191de:	47d0      	blx	sl
 80191e0:	3001      	adds	r0, #1
 80191e2:	d0ad      	beq.n	8019140 <_printf_i+0x15c>
 80191e4:	6823      	ldr	r3, [r4, #0]
 80191e6:	079b      	lsls	r3, r3, #30
 80191e8:	d413      	bmi.n	8019212 <_printf_i+0x22e>
 80191ea:	68e0      	ldr	r0, [r4, #12]
 80191ec:	9b03      	ldr	r3, [sp, #12]
 80191ee:	4298      	cmp	r0, r3
 80191f0:	bfb8      	it	lt
 80191f2:	4618      	movlt	r0, r3
 80191f4:	e7a6      	b.n	8019144 <_printf_i+0x160>
 80191f6:	2301      	movs	r3, #1
 80191f8:	4632      	mov	r2, r6
 80191fa:	4649      	mov	r1, r9
 80191fc:	4640      	mov	r0, r8
 80191fe:	47d0      	blx	sl
 8019200:	3001      	adds	r0, #1
 8019202:	d09d      	beq.n	8019140 <_printf_i+0x15c>
 8019204:	3501      	adds	r5, #1
 8019206:	68e3      	ldr	r3, [r4, #12]
 8019208:	9903      	ldr	r1, [sp, #12]
 801920a:	1a5b      	subs	r3, r3, r1
 801920c:	42ab      	cmp	r3, r5
 801920e:	dcf2      	bgt.n	80191f6 <_printf_i+0x212>
 8019210:	e7eb      	b.n	80191ea <_printf_i+0x206>
 8019212:	2500      	movs	r5, #0
 8019214:	f104 0619 	add.w	r6, r4, #25
 8019218:	e7f5      	b.n	8019206 <_printf_i+0x222>
 801921a:	bf00      	nop
 801921c:	0801dec8 	.word	0x0801dec8
 8019220:	0801ded9 	.word	0x0801ded9

08019224 <__sflush_r>:
 8019224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801922c:	0716      	lsls	r6, r2, #28
 801922e:	4605      	mov	r5, r0
 8019230:	460c      	mov	r4, r1
 8019232:	d454      	bmi.n	80192de <__sflush_r+0xba>
 8019234:	684b      	ldr	r3, [r1, #4]
 8019236:	2b00      	cmp	r3, #0
 8019238:	dc02      	bgt.n	8019240 <__sflush_r+0x1c>
 801923a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801923c:	2b00      	cmp	r3, #0
 801923e:	dd48      	ble.n	80192d2 <__sflush_r+0xae>
 8019240:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019242:	2e00      	cmp	r6, #0
 8019244:	d045      	beq.n	80192d2 <__sflush_r+0xae>
 8019246:	2300      	movs	r3, #0
 8019248:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801924c:	682f      	ldr	r7, [r5, #0]
 801924e:	6a21      	ldr	r1, [r4, #32]
 8019250:	602b      	str	r3, [r5, #0]
 8019252:	d030      	beq.n	80192b6 <__sflush_r+0x92>
 8019254:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019256:	89a3      	ldrh	r3, [r4, #12]
 8019258:	0759      	lsls	r1, r3, #29
 801925a:	d505      	bpl.n	8019268 <__sflush_r+0x44>
 801925c:	6863      	ldr	r3, [r4, #4]
 801925e:	1ad2      	subs	r2, r2, r3
 8019260:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019262:	b10b      	cbz	r3, 8019268 <__sflush_r+0x44>
 8019264:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019266:	1ad2      	subs	r2, r2, r3
 8019268:	2300      	movs	r3, #0
 801926a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801926c:	6a21      	ldr	r1, [r4, #32]
 801926e:	4628      	mov	r0, r5
 8019270:	47b0      	blx	r6
 8019272:	1c43      	adds	r3, r0, #1
 8019274:	89a3      	ldrh	r3, [r4, #12]
 8019276:	d106      	bne.n	8019286 <__sflush_r+0x62>
 8019278:	6829      	ldr	r1, [r5, #0]
 801927a:	291d      	cmp	r1, #29
 801927c:	d82b      	bhi.n	80192d6 <__sflush_r+0xb2>
 801927e:	4a2a      	ldr	r2, [pc, #168]	@ (8019328 <__sflush_r+0x104>)
 8019280:	410a      	asrs	r2, r1
 8019282:	07d6      	lsls	r6, r2, #31
 8019284:	d427      	bmi.n	80192d6 <__sflush_r+0xb2>
 8019286:	2200      	movs	r2, #0
 8019288:	6062      	str	r2, [r4, #4]
 801928a:	04d9      	lsls	r1, r3, #19
 801928c:	6922      	ldr	r2, [r4, #16]
 801928e:	6022      	str	r2, [r4, #0]
 8019290:	d504      	bpl.n	801929c <__sflush_r+0x78>
 8019292:	1c42      	adds	r2, r0, #1
 8019294:	d101      	bne.n	801929a <__sflush_r+0x76>
 8019296:	682b      	ldr	r3, [r5, #0]
 8019298:	b903      	cbnz	r3, 801929c <__sflush_r+0x78>
 801929a:	6560      	str	r0, [r4, #84]	@ 0x54
 801929c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801929e:	602f      	str	r7, [r5, #0]
 80192a0:	b1b9      	cbz	r1, 80192d2 <__sflush_r+0xae>
 80192a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80192a6:	4299      	cmp	r1, r3
 80192a8:	d002      	beq.n	80192b0 <__sflush_r+0x8c>
 80192aa:	4628      	mov	r0, r5
 80192ac:	f7ff fa92 	bl	80187d4 <_free_r>
 80192b0:	2300      	movs	r3, #0
 80192b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80192b4:	e00d      	b.n	80192d2 <__sflush_r+0xae>
 80192b6:	2301      	movs	r3, #1
 80192b8:	4628      	mov	r0, r5
 80192ba:	47b0      	blx	r6
 80192bc:	4602      	mov	r2, r0
 80192be:	1c50      	adds	r0, r2, #1
 80192c0:	d1c9      	bne.n	8019256 <__sflush_r+0x32>
 80192c2:	682b      	ldr	r3, [r5, #0]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d0c6      	beq.n	8019256 <__sflush_r+0x32>
 80192c8:	2b1d      	cmp	r3, #29
 80192ca:	d001      	beq.n	80192d0 <__sflush_r+0xac>
 80192cc:	2b16      	cmp	r3, #22
 80192ce:	d11e      	bne.n	801930e <__sflush_r+0xea>
 80192d0:	602f      	str	r7, [r5, #0]
 80192d2:	2000      	movs	r0, #0
 80192d4:	e022      	b.n	801931c <__sflush_r+0xf8>
 80192d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80192da:	b21b      	sxth	r3, r3
 80192dc:	e01b      	b.n	8019316 <__sflush_r+0xf2>
 80192de:	690f      	ldr	r7, [r1, #16]
 80192e0:	2f00      	cmp	r7, #0
 80192e2:	d0f6      	beq.n	80192d2 <__sflush_r+0xae>
 80192e4:	0793      	lsls	r3, r2, #30
 80192e6:	680e      	ldr	r6, [r1, #0]
 80192e8:	bf08      	it	eq
 80192ea:	694b      	ldreq	r3, [r1, #20]
 80192ec:	600f      	str	r7, [r1, #0]
 80192ee:	bf18      	it	ne
 80192f0:	2300      	movne	r3, #0
 80192f2:	eba6 0807 	sub.w	r8, r6, r7
 80192f6:	608b      	str	r3, [r1, #8]
 80192f8:	f1b8 0f00 	cmp.w	r8, #0
 80192fc:	dde9      	ble.n	80192d2 <__sflush_r+0xae>
 80192fe:	6a21      	ldr	r1, [r4, #32]
 8019300:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019302:	4643      	mov	r3, r8
 8019304:	463a      	mov	r2, r7
 8019306:	4628      	mov	r0, r5
 8019308:	47b0      	blx	r6
 801930a:	2800      	cmp	r0, #0
 801930c:	dc08      	bgt.n	8019320 <__sflush_r+0xfc>
 801930e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019316:	81a3      	strh	r3, [r4, #12]
 8019318:	f04f 30ff 	mov.w	r0, #4294967295
 801931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019320:	4407      	add	r7, r0
 8019322:	eba8 0800 	sub.w	r8, r8, r0
 8019326:	e7e7      	b.n	80192f8 <__sflush_r+0xd4>
 8019328:	dfbffffe 	.word	0xdfbffffe

0801932c <_fflush_r>:
 801932c:	b538      	push	{r3, r4, r5, lr}
 801932e:	690b      	ldr	r3, [r1, #16]
 8019330:	4605      	mov	r5, r0
 8019332:	460c      	mov	r4, r1
 8019334:	b913      	cbnz	r3, 801933c <_fflush_r+0x10>
 8019336:	2500      	movs	r5, #0
 8019338:	4628      	mov	r0, r5
 801933a:	bd38      	pop	{r3, r4, r5, pc}
 801933c:	b118      	cbz	r0, 8019346 <_fflush_r+0x1a>
 801933e:	6a03      	ldr	r3, [r0, #32]
 8019340:	b90b      	cbnz	r3, 8019346 <_fflush_r+0x1a>
 8019342:	f7ff f85b 	bl	80183fc <__sinit>
 8019346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d0f3      	beq.n	8019336 <_fflush_r+0xa>
 801934e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019350:	07d0      	lsls	r0, r2, #31
 8019352:	d404      	bmi.n	801935e <_fflush_r+0x32>
 8019354:	0599      	lsls	r1, r3, #22
 8019356:	d402      	bmi.n	801935e <_fflush_r+0x32>
 8019358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801935a:	f7ff fa0c 	bl	8018776 <__retarget_lock_acquire_recursive>
 801935e:	4628      	mov	r0, r5
 8019360:	4621      	mov	r1, r4
 8019362:	f7ff ff5f 	bl	8019224 <__sflush_r>
 8019366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019368:	07da      	lsls	r2, r3, #31
 801936a:	4605      	mov	r5, r0
 801936c:	d4e4      	bmi.n	8019338 <_fflush_r+0xc>
 801936e:	89a3      	ldrh	r3, [r4, #12]
 8019370:	059b      	lsls	r3, r3, #22
 8019372:	d4e1      	bmi.n	8019338 <_fflush_r+0xc>
 8019374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019376:	f7ff f9ff 	bl	8018778 <__retarget_lock_release_recursive>
 801937a:	e7dd      	b.n	8019338 <_fflush_r+0xc>

0801937c <fiprintf>:
 801937c:	b40e      	push	{r1, r2, r3}
 801937e:	b503      	push	{r0, r1, lr}
 8019380:	4601      	mov	r1, r0
 8019382:	ab03      	add	r3, sp, #12
 8019384:	4805      	ldr	r0, [pc, #20]	@ (801939c <fiprintf+0x20>)
 8019386:	f853 2b04 	ldr.w	r2, [r3], #4
 801938a:	6800      	ldr	r0, [r0, #0]
 801938c:	9301      	str	r3, [sp, #4]
 801938e:	f7ff fca3 	bl	8018cd8 <_vfiprintf_r>
 8019392:	b002      	add	sp, #8
 8019394:	f85d eb04 	ldr.w	lr, [sp], #4
 8019398:	b003      	add	sp, #12
 801939a:	4770      	bx	lr
 801939c:	2000003c 	.word	0x2000003c

080193a0 <__swbuf_r>:
 80193a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193a2:	460e      	mov	r6, r1
 80193a4:	4614      	mov	r4, r2
 80193a6:	4605      	mov	r5, r0
 80193a8:	b118      	cbz	r0, 80193b2 <__swbuf_r+0x12>
 80193aa:	6a03      	ldr	r3, [r0, #32]
 80193ac:	b90b      	cbnz	r3, 80193b2 <__swbuf_r+0x12>
 80193ae:	f7ff f825 	bl	80183fc <__sinit>
 80193b2:	69a3      	ldr	r3, [r4, #24]
 80193b4:	60a3      	str	r3, [r4, #8]
 80193b6:	89a3      	ldrh	r3, [r4, #12]
 80193b8:	071a      	lsls	r2, r3, #28
 80193ba:	d501      	bpl.n	80193c0 <__swbuf_r+0x20>
 80193bc:	6923      	ldr	r3, [r4, #16]
 80193be:	b943      	cbnz	r3, 80193d2 <__swbuf_r+0x32>
 80193c0:	4621      	mov	r1, r4
 80193c2:	4628      	mov	r0, r5
 80193c4:	f000 f82a 	bl	801941c <__swsetup_r>
 80193c8:	b118      	cbz	r0, 80193d2 <__swbuf_r+0x32>
 80193ca:	f04f 37ff 	mov.w	r7, #4294967295
 80193ce:	4638      	mov	r0, r7
 80193d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193d2:	6823      	ldr	r3, [r4, #0]
 80193d4:	6922      	ldr	r2, [r4, #16]
 80193d6:	1a98      	subs	r0, r3, r2
 80193d8:	6963      	ldr	r3, [r4, #20]
 80193da:	b2f6      	uxtb	r6, r6
 80193dc:	4283      	cmp	r3, r0
 80193de:	4637      	mov	r7, r6
 80193e0:	dc05      	bgt.n	80193ee <__swbuf_r+0x4e>
 80193e2:	4621      	mov	r1, r4
 80193e4:	4628      	mov	r0, r5
 80193e6:	f7ff ffa1 	bl	801932c <_fflush_r>
 80193ea:	2800      	cmp	r0, #0
 80193ec:	d1ed      	bne.n	80193ca <__swbuf_r+0x2a>
 80193ee:	68a3      	ldr	r3, [r4, #8]
 80193f0:	3b01      	subs	r3, #1
 80193f2:	60a3      	str	r3, [r4, #8]
 80193f4:	6823      	ldr	r3, [r4, #0]
 80193f6:	1c5a      	adds	r2, r3, #1
 80193f8:	6022      	str	r2, [r4, #0]
 80193fa:	701e      	strb	r6, [r3, #0]
 80193fc:	6962      	ldr	r2, [r4, #20]
 80193fe:	1c43      	adds	r3, r0, #1
 8019400:	429a      	cmp	r2, r3
 8019402:	d004      	beq.n	801940e <__swbuf_r+0x6e>
 8019404:	89a3      	ldrh	r3, [r4, #12]
 8019406:	07db      	lsls	r3, r3, #31
 8019408:	d5e1      	bpl.n	80193ce <__swbuf_r+0x2e>
 801940a:	2e0a      	cmp	r6, #10
 801940c:	d1df      	bne.n	80193ce <__swbuf_r+0x2e>
 801940e:	4621      	mov	r1, r4
 8019410:	4628      	mov	r0, r5
 8019412:	f7ff ff8b 	bl	801932c <_fflush_r>
 8019416:	2800      	cmp	r0, #0
 8019418:	d0d9      	beq.n	80193ce <__swbuf_r+0x2e>
 801941a:	e7d6      	b.n	80193ca <__swbuf_r+0x2a>

0801941c <__swsetup_r>:
 801941c:	b538      	push	{r3, r4, r5, lr}
 801941e:	4b29      	ldr	r3, [pc, #164]	@ (80194c4 <__swsetup_r+0xa8>)
 8019420:	4605      	mov	r5, r0
 8019422:	6818      	ldr	r0, [r3, #0]
 8019424:	460c      	mov	r4, r1
 8019426:	b118      	cbz	r0, 8019430 <__swsetup_r+0x14>
 8019428:	6a03      	ldr	r3, [r0, #32]
 801942a:	b90b      	cbnz	r3, 8019430 <__swsetup_r+0x14>
 801942c:	f7fe ffe6 	bl	80183fc <__sinit>
 8019430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019434:	0719      	lsls	r1, r3, #28
 8019436:	d422      	bmi.n	801947e <__swsetup_r+0x62>
 8019438:	06da      	lsls	r2, r3, #27
 801943a:	d407      	bmi.n	801944c <__swsetup_r+0x30>
 801943c:	2209      	movs	r2, #9
 801943e:	602a      	str	r2, [r5, #0]
 8019440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019444:	81a3      	strh	r3, [r4, #12]
 8019446:	f04f 30ff 	mov.w	r0, #4294967295
 801944a:	e033      	b.n	80194b4 <__swsetup_r+0x98>
 801944c:	0758      	lsls	r0, r3, #29
 801944e:	d512      	bpl.n	8019476 <__swsetup_r+0x5a>
 8019450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019452:	b141      	cbz	r1, 8019466 <__swsetup_r+0x4a>
 8019454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019458:	4299      	cmp	r1, r3
 801945a:	d002      	beq.n	8019462 <__swsetup_r+0x46>
 801945c:	4628      	mov	r0, r5
 801945e:	f7ff f9b9 	bl	80187d4 <_free_r>
 8019462:	2300      	movs	r3, #0
 8019464:	6363      	str	r3, [r4, #52]	@ 0x34
 8019466:	89a3      	ldrh	r3, [r4, #12]
 8019468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801946c:	81a3      	strh	r3, [r4, #12]
 801946e:	2300      	movs	r3, #0
 8019470:	6063      	str	r3, [r4, #4]
 8019472:	6923      	ldr	r3, [r4, #16]
 8019474:	6023      	str	r3, [r4, #0]
 8019476:	89a3      	ldrh	r3, [r4, #12]
 8019478:	f043 0308 	orr.w	r3, r3, #8
 801947c:	81a3      	strh	r3, [r4, #12]
 801947e:	6923      	ldr	r3, [r4, #16]
 8019480:	b94b      	cbnz	r3, 8019496 <__swsetup_r+0x7a>
 8019482:	89a3      	ldrh	r3, [r4, #12]
 8019484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801948c:	d003      	beq.n	8019496 <__swsetup_r+0x7a>
 801948e:	4621      	mov	r1, r4
 8019490:	4628      	mov	r0, r5
 8019492:	f000 f884 	bl	801959e <__smakebuf_r>
 8019496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801949a:	f013 0201 	ands.w	r2, r3, #1
 801949e:	d00a      	beq.n	80194b6 <__swsetup_r+0x9a>
 80194a0:	2200      	movs	r2, #0
 80194a2:	60a2      	str	r2, [r4, #8]
 80194a4:	6962      	ldr	r2, [r4, #20]
 80194a6:	4252      	negs	r2, r2
 80194a8:	61a2      	str	r2, [r4, #24]
 80194aa:	6922      	ldr	r2, [r4, #16]
 80194ac:	b942      	cbnz	r2, 80194c0 <__swsetup_r+0xa4>
 80194ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80194b2:	d1c5      	bne.n	8019440 <__swsetup_r+0x24>
 80194b4:	bd38      	pop	{r3, r4, r5, pc}
 80194b6:	0799      	lsls	r1, r3, #30
 80194b8:	bf58      	it	pl
 80194ba:	6962      	ldrpl	r2, [r4, #20]
 80194bc:	60a2      	str	r2, [r4, #8]
 80194be:	e7f4      	b.n	80194aa <__swsetup_r+0x8e>
 80194c0:	2000      	movs	r0, #0
 80194c2:	e7f7      	b.n	80194b4 <__swsetup_r+0x98>
 80194c4:	2000003c 	.word	0x2000003c

080194c8 <_sbrk_r>:
 80194c8:	b538      	push	{r3, r4, r5, lr}
 80194ca:	4d06      	ldr	r5, [pc, #24]	@ (80194e4 <_sbrk_r+0x1c>)
 80194cc:	2300      	movs	r3, #0
 80194ce:	4604      	mov	r4, r0
 80194d0:	4608      	mov	r0, r1
 80194d2:	602b      	str	r3, [r5, #0]
 80194d4:	f7e7 fecc 	bl	8001270 <_sbrk>
 80194d8:	1c43      	adds	r3, r0, #1
 80194da:	d102      	bne.n	80194e2 <_sbrk_r+0x1a>
 80194dc:	682b      	ldr	r3, [r5, #0]
 80194de:	b103      	cbz	r3, 80194e2 <_sbrk_r+0x1a>
 80194e0:	6023      	str	r3, [r4, #0]
 80194e2:	bd38      	pop	{r3, r4, r5, pc}
 80194e4:	2000f3ac 	.word	0x2000f3ac

080194e8 <abort>:
 80194e8:	b508      	push	{r3, lr}
 80194ea:	2006      	movs	r0, #6
 80194ec:	f000 f8bc 	bl	8019668 <raise>
 80194f0:	2001      	movs	r0, #1
 80194f2:	f7e7 fe45 	bl	8001180 <_exit>

080194f6 <_realloc_r>:
 80194f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194fa:	4680      	mov	r8, r0
 80194fc:	4615      	mov	r5, r2
 80194fe:	460c      	mov	r4, r1
 8019500:	b921      	cbnz	r1, 801950c <_realloc_r+0x16>
 8019502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019506:	4611      	mov	r1, r2
 8019508:	f7ff b9d8 	b.w	80188bc <_malloc_r>
 801950c:	b92a      	cbnz	r2, 801951a <_realloc_r+0x24>
 801950e:	f7ff f961 	bl	80187d4 <_free_r>
 8019512:	2400      	movs	r4, #0
 8019514:	4620      	mov	r0, r4
 8019516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801951a:	f000 f8e3 	bl	80196e4 <_malloc_usable_size_r>
 801951e:	4285      	cmp	r5, r0
 8019520:	4606      	mov	r6, r0
 8019522:	d802      	bhi.n	801952a <_realloc_r+0x34>
 8019524:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019528:	d8f4      	bhi.n	8019514 <_realloc_r+0x1e>
 801952a:	4629      	mov	r1, r5
 801952c:	4640      	mov	r0, r8
 801952e:	f7ff f9c5 	bl	80188bc <_malloc_r>
 8019532:	4607      	mov	r7, r0
 8019534:	2800      	cmp	r0, #0
 8019536:	d0ec      	beq.n	8019512 <_realloc_r+0x1c>
 8019538:	42b5      	cmp	r5, r6
 801953a:	462a      	mov	r2, r5
 801953c:	4621      	mov	r1, r4
 801953e:	bf28      	it	cs
 8019540:	4632      	movcs	r2, r6
 8019542:	f7ff f91a 	bl	801877a <memcpy>
 8019546:	4621      	mov	r1, r4
 8019548:	4640      	mov	r0, r8
 801954a:	f7ff f943 	bl	80187d4 <_free_r>
 801954e:	463c      	mov	r4, r7
 8019550:	e7e0      	b.n	8019514 <_realloc_r+0x1e>

08019552 <__swhatbuf_r>:
 8019552:	b570      	push	{r4, r5, r6, lr}
 8019554:	460c      	mov	r4, r1
 8019556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801955a:	2900      	cmp	r1, #0
 801955c:	b096      	sub	sp, #88	@ 0x58
 801955e:	4615      	mov	r5, r2
 8019560:	461e      	mov	r6, r3
 8019562:	da0d      	bge.n	8019580 <__swhatbuf_r+0x2e>
 8019564:	89a3      	ldrh	r3, [r4, #12]
 8019566:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801956a:	f04f 0100 	mov.w	r1, #0
 801956e:	bf14      	ite	ne
 8019570:	2340      	movne	r3, #64	@ 0x40
 8019572:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019576:	2000      	movs	r0, #0
 8019578:	6031      	str	r1, [r6, #0]
 801957a:	602b      	str	r3, [r5, #0]
 801957c:	b016      	add	sp, #88	@ 0x58
 801957e:	bd70      	pop	{r4, r5, r6, pc}
 8019580:	466a      	mov	r2, sp
 8019582:	f000 f879 	bl	8019678 <_fstat_r>
 8019586:	2800      	cmp	r0, #0
 8019588:	dbec      	blt.n	8019564 <__swhatbuf_r+0x12>
 801958a:	9901      	ldr	r1, [sp, #4]
 801958c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019590:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019594:	4259      	negs	r1, r3
 8019596:	4159      	adcs	r1, r3
 8019598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801959c:	e7eb      	b.n	8019576 <__swhatbuf_r+0x24>

0801959e <__smakebuf_r>:
 801959e:	898b      	ldrh	r3, [r1, #12]
 80195a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195a2:	079d      	lsls	r5, r3, #30
 80195a4:	4606      	mov	r6, r0
 80195a6:	460c      	mov	r4, r1
 80195a8:	d507      	bpl.n	80195ba <__smakebuf_r+0x1c>
 80195aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80195ae:	6023      	str	r3, [r4, #0]
 80195b0:	6123      	str	r3, [r4, #16]
 80195b2:	2301      	movs	r3, #1
 80195b4:	6163      	str	r3, [r4, #20]
 80195b6:	b003      	add	sp, #12
 80195b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195ba:	ab01      	add	r3, sp, #4
 80195bc:	466a      	mov	r2, sp
 80195be:	f7ff ffc8 	bl	8019552 <__swhatbuf_r>
 80195c2:	9f00      	ldr	r7, [sp, #0]
 80195c4:	4605      	mov	r5, r0
 80195c6:	4639      	mov	r1, r7
 80195c8:	4630      	mov	r0, r6
 80195ca:	f7ff f977 	bl	80188bc <_malloc_r>
 80195ce:	b948      	cbnz	r0, 80195e4 <__smakebuf_r+0x46>
 80195d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195d4:	059a      	lsls	r2, r3, #22
 80195d6:	d4ee      	bmi.n	80195b6 <__smakebuf_r+0x18>
 80195d8:	f023 0303 	bic.w	r3, r3, #3
 80195dc:	f043 0302 	orr.w	r3, r3, #2
 80195e0:	81a3      	strh	r3, [r4, #12]
 80195e2:	e7e2      	b.n	80195aa <__smakebuf_r+0xc>
 80195e4:	89a3      	ldrh	r3, [r4, #12]
 80195e6:	6020      	str	r0, [r4, #0]
 80195e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195ec:	81a3      	strh	r3, [r4, #12]
 80195ee:	9b01      	ldr	r3, [sp, #4]
 80195f0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80195f4:	b15b      	cbz	r3, 801960e <__smakebuf_r+0x70>
 80195f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195fa:	4630      	mov	r0, r6
 80195fc:	f000 f84e 	bl	801969c <_isatty_r>
 8019600:	b128      	cbz	r0, 801960e <__smakebuf_r+0x70>
 8019602:	89a3      	ldrh	r3, [r4, #12]
 8019604:	f023 0303 	bic.w	r3, r3, #3
 8019608:	f043 0301 	orr.w	r3, r3, #1
 801960c:	81a3      	strh	r3, [r4, #12]
 801960e:	89a3      	ldrh	r3, [r4, #12]
 8019610:	431d      	orrs	r5, r3
 8019612:	81a5      	strh	r5, [r4, #12]
 8019614:	e7cf      	b.n	80195b6 <__smakebuf_r+0x18>

08019616 <_raise_r>:
 8019616:	291f      	cmp	r1, #31
 8019618:	b538      	push	{r3, r4, r5, lr}
 801961a:	4605      	mov	r5, r0
 801961c:	460c      	mov	r4, r1
 801961e:	d904      	bls.n	801962a <_raise_r+0x14>
 8019620:	2316      	movs	r3, #22
 8019622:	6003      	str	r3, [r0, #0]
 8019624:	f04f 30ff 	mov.w	r0, #4294967295
 8019628:	bd38      	pop	{r3, r4, r5, pc}
 801962a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801962c:	b112      	cbz	r2, 8019634 <_raise_r+0x1e>
 801962e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019632:	b94b      	cbnz	r3, 8019648 <_raise_r+0x32>
 8019634:	4628      	mov	r0, r5
 8019636:	f000 f853 	bl	80196e0 <_getpid_r>
 801963a:	4622      	mov	r2, r4
 801963c:	4601      	mov	r1, r0
 801963e:	4628      	mov	r0, r5
 8019640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019644:	f000 b83a 	b.w	80196bc <_kill_r>
 8019648:	2b01      	cmp	r3, #1
 801964a:	d00a      	beq.n	8019662 <_raise_r+0x4c>
 801964c:	1c59      	adds	r1, r3, #1
 801964e:	d103      	bne.n	8019658 <_raise_r+0x42>
 8019650:	2316      	movs	r3, #22
 8019652:	6003      	str	r3, [r0, #0]
 8019654:	2001      	movs	r0, #1
 8019656:	e7e7      	b.n	8019628 <_raise_r+0x12>
 8019658:	2100      	movs	r1, #0
 801965a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801965e:	4620      	mov	r0, r4
 8019660:	4798      	blx	r3
 8019662:	2000      	movs	r0, #0
 8019664:	e7e0      	b.n	8019628 <_raise_r+0x12>
	...

08019668 <raise>:
 8019668:	4b02      	ldr	r3, [pc, #8]	@ (8019674 <raise+0xc>)
 801966a:	4601      	mov	r1, r0
 801966c:	6818      	ldr	r0, [r3, #0]
 801966e:	f7ff bfd2 	b.w	8019616 <_raise_r>
 8019672:	bf00      	nop
 8019674:	2000003c 	.word	0x2000003c

08019678 <_fstat_r>:
 8019678:	b538      	push	{r3, r4, r5, lr}
 801967a:	4d07      	ldr	r5, [pc, #28]	@ (8019698 <_fstat_r+0x20>)
 801967c:	2300      	movs	r3, #0
 801967e:	4604      	mov	r4, r0
 8019680:	4608      	mov	r0, r1
 8019682:	4611      	mov	r1, r2
 8019684:	602b      	str	r3, [r5, #0]
 8019686:	f7e7 fdcb 	bl	8001220 <_fstat>
 801968a:	1c43      	adds	r3, r0, #1
 801968c:	d102      	bne.n	8019694 <_fstat_r+0x1c>
 801968e:	682b      	ldr	r3, [r5, #0]
 8019690:	b103      	cbz	r3, 8019694 <_fstat_r+0x1c>
 8019692:	6023      	str	r3, [r4, #0]
 8019694:	bd38      	pop	{r3, r4, r5, pc}
 8019696:	bf00      	nop
 8019698:	2000f3ac 	.word	0x2000f3ac

0801969c <_isatty_r>:
 801969c:	b538      	push	{r3, r4, r5, lr}
 801969e:	4d06      	ldr	r5, [pc, #24]	@ (80196b8 <_isatty_r+0x1c>)
 80196a0:	2300      	movs	r3, #0
 80196a2:	4604      	mov	r4, r0
 80196a4:	4608      	mov	r0, r1
 80196a6:	602b      	str	r3, [r5, #0]
 80196a8:	f7e7 fdca 	bl	8001240 <_isatty>
 80196ac:	1c43      	adds	r3, r0, #1
 80196ae:	d102      	bne.n	80196b6 <_isatty_r+0x1a>
 80196b0:	682b      	ldr	r3, [r5, #0]
 80196b2:	b103      	cbz	r3, 80196b6 <_isatty_r+0x1a>
 80196b4:	6023      	str	r3, [r4, #0]
 80196b6:	bd38      	pop	{r3, r4, r5, pc}
 80196b8:	2000f3ac 	.word	0x2000f3ac

080196bc <_kill_r>:
 80196bc:	b538      	push	{r3, r4, r5, lr}
 80196be:	4d07      	ldr	r5, [pc, #28]	@ (80196dc <_kill_r+0x20>)
 80196c0:	2300      	movs	r3, #0
 80196c2:	4604      	mov	r4, r0
 80196c4:	4608      	mov	r0, r1
 80196c6:	4611      	mov	r1, r2
 80196c8:	602b      	str	r3, [r5, #0]
 80196ca:	f7e7 fd47 	bl	800115c <_kill>
 80196ce:	1c43      	adds	r3, r0, #1
 80196d0:	d102      	bne.n	80196d8 <_kill_r+0x1c>
 80196d2:	682b      	ldr	r3, [r5, #0]
 80196d4:	b103      	cbz	r3, 80196d8 <_kill_r+0x1c>
 80196d6:	6023      	str	r3, [r4, #0]
 80196d8:	bd38      	pop	{r3, r4, r5, pc}
 80196da:	bf00      	nop
 80196dc:	2000f3ac 	.word	0x2000f3ac

080196e0 <_getpid_r>:
 80196e0:	f7e7 bd34 	b.w	800114c <_getpid>

080196e4 <_malloc_usable_size_r>:
 80196e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196e8:	1f18      	subs	r0, r3, #4
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	bfbc      	itt	lt
 80196ee:	580b      	ldrlt	r3, [r1, r0]
 80196f0:	18c0      	addlt	r0, r0, r3
 80196f2:	4770      	bx	lr

080196f4 <_init>:
 80196f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196f6:	bf00      	nop
 80196f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196fa:	bc08      	pop	{r3}
 80196fc:	469e      	mov	lr, r3
 80196fe:	4770      	bx	lr

08019700 <_fini>:
 8019700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019702:	bf00      	nop
 8019704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019706:	bc08      	pop	{r3}
 8019708:	469e      	mov	lr, r3
 801970a:	4770      	bx	lr
