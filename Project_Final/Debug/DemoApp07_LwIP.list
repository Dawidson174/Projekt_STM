
DemoApp07_LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001896c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047b0  08018b3c  08018b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d2ec  0801d2ec  0001f1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801d2ec  0801d2ec  0001e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d2f4  0801d2f4  0001f1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d2f4  0801d2f4  0001e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d2f8  0801d2f8  0001e2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801d2fc  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801d388  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801d428  0001f12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f178  200001cc  0801d4c8  0001f1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000804  2000f344  0801d4c8  0001f344  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001f1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000349a6  00000000  00000000  0001f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000842f  00000000  00000000  00053ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002568  00000000  00000000  0005bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d8f  00000000  00000000  0005e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000395b7  00000000  00000000  000602cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d856  00000000  00000000  00099886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001171ca  00000000  00000000  000d70dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001ee2a6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a350  00000000  00000000  001ee2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  001f863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018b24 	.word	0x08018b24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08018b24 	.word	0x08018b24

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <vApplicationGetIdleTaskMemory+0x2c>)
 80005e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <vApplicationGetIdleTaskMemory+0x30>)
 80005e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2280      	movs	r2, #128	@ 0x80
 80005ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200001f4 	.word	0x200001f4
 8000600:	20000294 	.word	0x20000294

08000604 <StartHttpServerTask>:
  * @param  None
  * @retval None
  */

void StartHttpServerTask(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    // Wait for the network interface to be up
    while (!netif_is_up(&gnetif))
 800060c:	e002      	b.n	8000614 <StartHttpServerTask+0x10>
    {
        osDelay(100);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f005 fbb8 	bl	8005d84 <osDelay>
    while (!netif_is_up(&gnetif))
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <StartHttpServerTask+0x2c>)
 8000616:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f5      	beq.n	800060e <StartHttpServerTask+0xa>
    }

    // Start the HTTP server
    httpd_init();
 8000622:	f00b fd89 	bl	800c138 <httpd_init>

    // Keep the task running
    for (;;)
    {
        osDelay(1000);
 8000626:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062a:	f005 fbab 	bl	8005d84 <osDelay>
 800062e:	e7fa      	b.n	8000626 <StartHttpServerTask+0x22>
 8000630:	20000570 	.word	0x20000570

08000634 <MX_FREERTOS_Init>:
    }
}


void MX_FREERTOS_Init(void) {
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800063a:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <MX_FREERTOS_Init+0x9c>)
 800063c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000640:	461d      	mov	r5, r3
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 fb49 	bl	8005cec <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <MX_FREERTOS_Init+0xa0>)
 800065e:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_FREERTOS_Init+0xa4>)
 8000662:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 8000674:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fb36 	bl	8005cec <osThreadCreate>
 8000680:	4603      	mov	r3, r0
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <MX_FREERTOS_Init+0xa8>)
 8000684:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_FREERTOS_Init+0xac>)
 8000688:	f107 041c 	add.w	r4, r7, #28
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f005 fb23 	bl	8005cec <osThreadCreate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <MX_FREERTOS_Init+0xb0>)
 80006aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_FREERTOS_Init+0xb4>)
 80006ae:	463c      	mov	r4, r7
 80006b0:	461d      	mov	r5, r3
 80006b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 80006be:	463b      	mov	r3, r7
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fb12 	bl	8005cec <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	@ 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bdb0      	pop	{r4, r5, r7, pc}
 80006d0:	08018b48 	.word	0x08018b48
 80006d4:	200001e8 	.word	0x200001e8
 80006d8:	08018b70 	.word	0x08018b70
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	08018b98 	.word	0x08018b98
 80006e4:	200001f0 	.word	0x200001f0
 80006e8:	08018bc4 	.word	0x08018bc4

080006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80006f4:	f004 fc88 	bl	8005008 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006f8:	2101      	movs	r1, #1
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <StartDefaultTask+0x20>)
 80006fc:	f002 fbeb 	bl	8002ed6 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f005 fb3f 	bl	8005d84 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000706:	bf00      	nop
 8000708:	e7f6      	b.n	80006f8 <StartDefaultTask+0xc>
 800070a:	bf00      	nop
 800070c:	40020400 	.word	0x40020400

08000710 <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0a0      	sub	sp, #128	@ 0x80
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 800071c:	2064      	movs	r0, #100	@ 0x64
 800071e:	f005 fb31 	bl	8005d84 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2020      	movs	r0, #32
 8000728:	f008 fb56 	bl	8008dd8 <netconn_new_with_proto_and_callback>
 800072c:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 800072e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000730:	2b00      	cmp	r3, #0
 8000732:	d106      	bne.n	8000742 <StartUdpEcho+0x32>
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <StartUdpEcho+0xe0>)
 8000736:	22ce      	movs	r2, #206	@ 0xce
 8000738:	492e      	ldr	r1, [pc, #184]	@ (80007f4 <StartUdpEcho+0xe4>)
 800073a:	482f      	ldr	r0, [pc, #188]	@ (80007f8 <StartUdpEcho+0xe8>)
 800073c:	f017 f8ac 	bl	8017898 <iprintf>
 8000740:	e053      	b.n	80007ea <StartUdpEcho+0xda>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 8000742:	2208      	movs	r2, #8
 8000744:	492d      	ldr	r1, [pc, #180]	@ (80007fc <StartUdpEcho+0xec>)
 8000746:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000748:	f008 fc00 	bl	8008f4c <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 800074c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000750:	4619      	mov	r1, r3
 8000752:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000754:	f008 fe66 	bl	8009424 <netconn_recv>
 8000758:	4603      	mov	r3, r0
 800075a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 800075e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f2      	bne.n	800074c <StartUdpEcho+0x3c>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	4825      	ldr	r0, [pc, #148]	@ (8000800 <StartUdpEcho+0xf0>)
 800076c:	f002 fb9a 	bl	8002ea4 <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 8000770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000778:	2300      	movs	r3, #0
 800077a:	2220      	movs	r2, #32
 800077c:	f00d fb2a 	bl	800ddd4 <pbuf_copy_partial>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	891b      	ldrh	r3, [r3, #8]
 800078a:	429a      	cmp	r2, r3
 800078c:	d123      	bne.n	80007d6 <StartUdpEcho+0xc6>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 800078e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000790:	3301      	adds	r3, #1
 8000792:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 8000794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	891b      	ldrh	r3, [r3, #8]
 800079a:	3380      	adds	r3, #128	@ 0x80
 800079c:	443b      	add	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 80007a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a8:	f107 000c 	add.w	r0, r7, #12
 80007ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80007ae:	4915      	ldr	r1, [pc, #84]	@ (8000804 <StartUdpEcho+0xf4>)
 80007b0:	f017 f884 	bl	80178bc <siprintf>
 80007b4:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 80007b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80007ba:	b292      	uxth	r2, r2
 80007bc:	f107 010c 	add.w	r1, r7, #12
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00a fc43 	bl	800b04c <netbuf_ref>
		err = netconn_send(conn, buf);
 80007c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007c8:	4619      	mov	r1, r3
 80007ca:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80007cc:	f008 fea4 	bl	8009518 <netconn_send>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 80007d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007d8:	4618      	mov	r0, r3
 80007da:	f00a fc17 	bl	800b00c <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <StartUdpEcho+0xf0>)
 80007e4:	f002 fb5e 	bl	8002ea4 <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 80007e8:	e7b0      	b.n	800074c <StartUdpEcho+0x3c>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 80007ea:	3780      	adds	r7, #128	@ 0x80
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08018be0 	.word	0x08018be0
 80007f4:	08018bf8 	.word	0x08018bf8
 80007f8:	08018c10 	.word	0x08018c10
 80007fc:	0801d1f0 	.word	0x0801d1f0
 8000800:	40020400 	.word	0x40020400
 8000804:	08018c38 	.word	0x08018c38

08000808 <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	@ 0x58
 800080c:	af02      	add	r7, sp, #8
 800080e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8000814:	2064      	movs	r0, #100	@ 0x64
 8000816:	f005 fab5 	bl	8005d84 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2010      	movs	r0, #16
 8000820:	f008 fada 	bl	8008dd8 <netconn_new_with_proto_and_callback>
 8000824:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 8000826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000828:	2b00      	cmp	r3, #0
 800082a:	f000 8083 	beq.w	8000934 <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 800082e:	2207      	movs	r2, #7
 8000830:	2100      	movs	r1, #0
 8000832:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000834:	f008 fb8a 	bl	8008f4c <netconn_bind>
 8000838:	4603      	mov	r3, r0
 800083a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 800083e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000842:	2b00      	cmp	r3, #0
 8000844:	d172      	bne.n	800092c <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 8000846:	21ff      	movs	r1, #255	@ 0xff
 8000848:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800084a:	f008 fbb7 	bl	8008fbc <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 800084e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000852:	4619      	mov	r1, r3
 8000854:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000856:	f008 fbdd 	bl	8009014 <netconn_accept>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 8000860:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f2      	bne.n	800084e <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8000868:	e04d      	b.n	8000906 <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000870:	4832      	ldr	r0, [pc, #200]	@ (800093c <StartTcpEcho+0x134>)
 8000872:	f002 fb17 	bl	8002ea4 <HAL_GPIO_WritePin>
		    msg_cnt++;
 8000876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000878:	3301      	adds	r3, #1
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 800087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800087e:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000882:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000886:	4618      	mov	r0, r3
 8000888:	f00a fc2a 	bl	800b0e0 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000892:	492b      	ldr	r1, [pc, #172]	@ (8000940 <StartTcpEcho+0x138>)
 8000894:	4618      	mov	r0, r3
 8000896:	f017 f811 	bl	80178bc <siprintf>
 800089a:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 800089c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800089e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80008a0:	f107 010c 	add.w	r1, r7, #12
 80008a4:	2300      	movs	r3, #0
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	f008 fe63 	bl	8009574 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 80008ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80008b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80008b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80008b4:	461a      	mov	r2, r3
 80008b6:	2300      	movs	r3, #0
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2301      	movs	r3, #1
 80008bc:	f008 fe5a 	bl	8009574 <netconn_write_partly>
			  char postfix[] = "\r\n";
 80008c0:	4a20      	ldr	r2, [pc, #128]	@ (8000944 <StartTcpEcho+0x13c>)
 80008c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4611      	mov	r1, r2
 80008ca:	8019      	strh	r1, [r3, #0]
 80008cc:	3302      	adds	r3, #2
 80008ce:	0c12      	lsrs	r2, r2, #16
 80008d0:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 80008d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80008d4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80008d8:	2300      	movs	r3, #0
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2202      	movs	r2, #2
 80008e0:	f008 fe48 	bl	8009574 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 80008e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00a fc44 	bl	800b174 <netbuf_next>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dac4      	bge.n	800087c <StartTcpEcho+0x74>
            netbuf_delete(buf);
 80008f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00a fb89 	bl	800b00c <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000900:	480e      	ldr	r0, [pc, #56]	@ (800093c <StartTcpEcho+0x134>)
 8000902:	f002 facf 	bl	8002ea4 <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8000906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000908:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fd88 	bl	8009424 <netconn_recv>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0a7      	beq.n	800086a <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 800091a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800091c:	4618      	mov	r0, r3
 800091e:	f008 ff2b 	bl	8009778 <netconn_close>
		  netconn_delete(newconn);
 8000922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000924:	4618      	mov	r0, r3
 8000926:	f008 faf5 	bl	8008f14 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 800092a:	e790      	b.n	800084e <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 800092c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800092e:	4618      	mov	r0, r3
 8000930:	f008 faf0 	bl	8008f14 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 8000934:	bf00      	nop
 8000936:	3750      	adds	r7, #80	@ 0x50
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020400 	.word	0x40020400
 8000940:	08018c4c 	.word	0x08018c4c
 8000944:	08018c60 	.word	0x08018c60

08000948 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b56      	ldr	r3, [pc, #344]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a55      	ldr	r2, [pc, #340]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a49      	ldr	r2, [pc, #292]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b44      	ldr	r3, [pc, #272]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a43      	ldr	r2, [pc, #268]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a37      	ldr	r2, [pc, #220]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b35      	ldr	r3, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0x170>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009f4:	4831      	ldr	r0, [pc, #196]	@ (8000abc <MX_GPIO_Init+0x174>)
 80009f6:	f002 fa55 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	4830      	ldr	r0, [pc, #192]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a00:	f002 fa50 	bl	8002ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482a      	ldr	r0, [pc, #168]	@ (8000ac4 <MX_GPIO_Init+0x17c>)
 8000a1c:	f002 f896 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a20:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4820      	ldr	r0, [pc, #128]	@ (8000abc <MX_GPIO_Init+0x174>)
 8000a3a:	f002 f887 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a56:	f002 f879 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5a:	2380      	movs	r3, #128	@ 0x80
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x178>)
 8000a6e:	f002 f86d 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a72:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a84:	230a      	movs	r3, #10
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	@ (8000ac8 <MX_GPIO_Init+0x180>)
 8000a90:	f002 f85c 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4807      	ldr	r0, [pc, #28]	@ (8000ac8 <MX_GPIO_Init+0x180>)
 8000aaa:	f002 f84f 	bl	8002b4c <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	@ 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 fc5a 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f80a 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f7ff ff36 	bl	8000948 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000adc:	f000 fa3a 	bl	8000f54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ae0:	f7ff fda8 	bl	8000634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ae4:	f005 f8eb 	bl	8005cbe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <main+0x1c>

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	@ 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	@ 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f016 ff6b 	bl	80179d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b10:	f002 f9fc 	bl	8002f0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <SystemClock_Config+0xd4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xd4>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <SystemClock_Config+0xd4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2c:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a24      	ldr	r2, [pc, #144]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b48:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b5c:	23d8      	movs	r3, #216	@ 0xd8
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b64:	2303      	movs	r3, #3
 8000b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fa2d 	bl	8002fcc <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b78:	f000 f838 	bl	8000bec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b7c:	f002 f9d6 	bl	8002f2c <HAL_PWREx_EnableOverDrive>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b86:	f000 f831 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b96:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2107      	movs	r1, #7
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fcb3 	bl	8003514 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bb4:	f000 f81a 	bl	8000bec <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3750      	adds	r7, #80	@ 0x50
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bda:	f000 fbe3 	bl	80013a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40001000 	.word	0x40001000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	210f      	movs	r1, #15
 8000c32:	f06f 0001 	mvn.w	r0, #1
 8000c36:	f000 fcb1 	bl	800159c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	@ 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c58:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <HAL_InitTick+0xe0>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <HAL_InitTick+0xe0>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <HAL_InitTick+0xe0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c70:	f107 0210 	add.w	r2, r7, #16
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fe70 	bl	8003960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d103      	bne.n	8000c92 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c8a:	f002 fe41 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8000c8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c90:	e004      	b.n	8000c9c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c92:	f002 fe3d 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8000c96:	4603      	mov	r3, r0
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9e:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <HAL_InitTick+0xe4>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	0c9b      	lsrs	r3, r3, #18
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cac:	4a21      	ldr	r2, [pc, #132]	@ (8000d34 <HAL_InitTick+0xec>)
 8000cae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cd0:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000cd2:	f003 fa67 	bl	80041a4 <HAL_TIM_Base_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d11b      	bne.n	8000d1c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ce4:	4812      	ldr	r0, [pc, #72]	@ (8000d30 <HAL_InitTick+0xe8>)
 8000ce6:	f003 fabf 	bl	8004268 <HAL_TIM_Base_Start_IT>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d111      	bne.n	8000d1c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf8:	2036      	movs	r0, #54	@ 0x36
 8000cfa:	f000 fc6b 	bl	80015d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d808      	bhi.n	8000d16 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	2036      	movs	r0, #54	@ 0x36
 8000d0a:	f000 fc47 	bl	800159c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_InitTick+0xf0>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	e002      	b.n	8000d1c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3738      	adds	r7, #56	@ 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	20000494 	.word	0x20000494
 8000d34:	40001000 	.word	0x40001000
 8000d38:	20000004 	.word	0x20000004

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM6_DAC_IRQHandler+0x10>)
 8000d7a:	f003 faed 	bl	8004358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000494 	.word	0x20000494

08000d88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <ETH_IRQHandler+0x10>)
 8000d8e:	f001 f809 	bl	8001da4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20004f50 	.word	0x20004f50

08000d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_kill>:

int _kill(int pid, int sig)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000db6:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <_kill+0x20>)
 8000db8:	2216      	movs	r2, #22
 8000dba:	601a      	str	r2, [r3, #0]
	return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	2000f334 	.word	0x2000f334

08000dd0 <_exit>:

void _exit (int status)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe5 	bl	8000dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000de2:	bf00      	nop
 8000de4:	e7fd      	b.n	8000de2 <_exit+0x12>

08000de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e00a      	b.n	8000e0e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf0      	blt.n	8000df8 <_read+0x12>
	}

return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e009      	b.n	8000e46 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbf1      	blt.n	8000e32 <_write+0x12>
	}
	return len;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_close>:

int _close(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	605a      	str	r2, [r3, #4]
	return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_isatty>:

int _isatty(int file)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d205      	bcs.n	8000efc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <_sbrk+0x6c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20050000 	.word	0x20050000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200004e0 	.word	0x200004e0
 8000f28:	2000f348 	.word	0x2000f348
 8000f2c:	2000f334 	.word	0x2000f334

08000f30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f5a:	4a15      	ldr	r2, [pc, #84]	@ (8000fb0 <MX_USART3_UART_Init+0x5c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_USART3_UART_Init+0x58>)
 8000f98:	f003 fbe4 	bl	8004764 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fa2:	f7ff fe23 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200004e4 	.word	0x200004e4
 8000fb0:	40004800 	.word	0x40004800

08000fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0aa      	sub	sp, #168	@ 0xa8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2284      	movs	r2, #132	@ 0x84
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f016 fcfe 	bl	80179d6 <memset>
  if(uartHandle->Instance==USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <HAL_UART_MspInit+0xb4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d13c      	bne.n	800105e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fce6 	bl	80039c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffe:	f7ff fdf5 	bl	8000bec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_UART_MspInit+0xb8>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a19      	ldr	r2, [pc, #100]	@ (800106c <HAL_UART_MspInit+0xb8>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_UART_MspInit+0xb8>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_UART_MspInit+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_UART_MspInit+0xb8>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_UART_MspInit+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001032:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104c:	2307      	movs	r3, #7
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001052:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	@ (8001070 <HAL_UART_MspInit+0xbc>)
 800105a:	f001 fd77 	bl	8002b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	37a8      	adds	r7, #168	@ 0xa8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004800 	.word	0x40004800
 800106c:	40023800 	.word	0x40023800
 8001070:	40020c00 	.word	0x40020c00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	@ (80010b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	@ (80010c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109e:	f7ff ff47 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f016 fd5b 	bl	8017b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fd11 	bl	8000acc <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80010b8:	0801d2fc 	.word	0x0801d2fc
  ldr r2, =_sbss
 80010bc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80010c0:	2000f344 	.word	0x2000f344

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>

080010c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <LAN8742_RegisterBusIO+0x28>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <LAN8742_RegisterBusIO+0x28>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <LAN8742_RegisterBusIO+0x28>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e014      	b.n	800111e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d17c      	bne.n	8001244 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e01c      	b.n	800119e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2112      	movs	r1, #18
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	4798      	blx	r3
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	da03      	bge.n	8001180 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001178:	f06f 0304 	mvn.w	r3, #4
 800117c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800117e:	e00b      	b.n	8001198 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f003 031f 	and.w	r3, r3, #31
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	d105      	bne.n	8001198 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
         break;
 8001196:	e005      	b.n	80011a4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b1f      	cmp	r3, #31
 80011a2:	d9df      	bls.n	8001164 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b1f      	cmp	r3, #31
 80011aa:	d902      	bls.n	80011b2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011ac:	f06f 0302 	mvn.w	r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d145      	bne.n	8001244 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6810      	ldr	r0, [r2, #0]
 80011c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011c4:	2100      	movs	r1, #0
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db37      	blt.n	800123e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6810      	ldr	r0, [r2, #0]
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	2100      	movs	r1, #0
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db28      	blt.n	8001236 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4798      	blx	r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011ee:	e01c      	b.n	800122a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4798      	blx	r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001202:	d80e      	bhi.n	8001222 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6810      	ldr	r0, [r2, #0]
 800120c:	f107 0208 	add.w	r2, r7, #8
 8001210:	2100      	movs	r1, #0
 8001212:	4798      	blx	r3
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	da07      	bge.n	800122a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800121a:	f06f 0304 	mvn.w	r3, #4
 800121e:	613b      	str	r3, [r7, #16]
                 break;
 8001220:	e010      	b.n	8001244 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001222:	f06f 0301 	mvn.w	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
               break;
 8001228:	e00c      	b.n	8001244 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1dd      	bne.n	80011f0 <LAN8742_Init+0xc6>
 8001234:	e006      	b.n	8001244 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001236:	f06f 0304 	mvn.w	r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	e002      	b.n	8001244 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800123e:	f06f 0303 	mvn.w	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d112      	bne.n	8001270 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4798      	blx	r3
 8001250:	4603      	mov	r3, r0
 8001252:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001254:	bf00      	nop
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001268:	d9f5      	bls.n	8001256 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001270:	693b      	ldr	r3, [r7, #16]
 }
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6810      	ldr	r0, [r2, #0]
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	2101      	movs	r1, #1
 8001294:	4798      	blx	r3
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	da02      	bge.n	80012a2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800129c:	f06f 0304 	mvn.w	r3, #4
 80012a0:	e06e      	b.n	8001380 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	2101      	movs	r1, #1
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da02      	bge.n	80012be <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b8:	f06f 0304 	mvn.w	r3, #4
 80012bc:	e060      	b.n	8001380 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012c8:	2301      	movs	r3, #1
 80012ca:	e059      	b.n	8001380 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6810      	ldr	r0, [r2, #0]
 80012d4:	f107 020c 	add.w	r2, r7, #12
 80012d8:	2100      	movs	r1, #0
 80012da:	4798      	blx	r3
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da02      	bge.n	80012e8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012e2:	f06f 0304 	mvn.w	r3, #4
 80012e6:	e04b      	b.n	8001380 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11b      	bne.n	800132a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <LAN8742_GetLinkState+0x90>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001306:	2302      	movs	r3, #2
 8001308:	e03a      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001314:	2303      	movs	r3, #3
 8001316:	e033      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001322:	2304      	movs	r3, #4
 8001324:	e02c      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001326:	2305      	movs	r3, #5
 8001328:	e02a      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6810      	ldr	r0, [r2, #0]
 8001332:	f107 020c 	add.w	r2, r7, #12
 8001336:	211f      	movs	r1, #31
 8001338:	4798      	blx	r3
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	da02      	bge.n	8001346 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001340:	f06f 0304 	mvn.w	r3, #4
 8001344:	e01c      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001350:	2306      	movs	r3, #6
 8001352:	e015      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 031c 	and.w	r3, r3, #28
 800135a:	2b18      	cmp	r3, #24
 800135c:	d101      	bne.n	8001362 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800135e:	2302      	movs	r3, #2
 8001360:	e00e      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f003 031c 	and.w	r3, r3, #28
 8001368:	2b08      	cmp	r3, #8
 800136a:	d101      	bne.n	8001370 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800136c:	2303      	movs	r3, #3
 800136e:	e007      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 031c 	and.w	r3, r3, #28
 8001376:	2b14      	cmp	r3, #20
 8001378:	d101      	bne.n	800137e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800137a:	2304      	movs	r3, #4
 800137c:	e000      	b.n	8001380 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800137e:	2305      	movs	r3, #5
    }				
  }
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f8fa 	bl	8001586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f7ff fc58 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fc2e 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_IncTick+0x20>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_IncTick+0x24>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	2000056c 	.word	0x2000056c

080013cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b03      	ldr	r3, [pc, #12]	@ (80013e0 <HAL_GetTick+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000056c 	.word	0x2000056c

080013e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff ffee 	bl	80013cc <HAL_GetTick>
 80013f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fc:	d005      	beq.n	800140a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <HAL_Delay+0x44>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140a:	bf00      	nop
 800140c:	f7ff ffde 	bl	80013cc <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	429a      	cmp	r2, r3
 800141a:	d8f7      	bhi.n	800140c <HAL_Delay+0x28>
  {
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	05fa0000 	.word	0x05fa0000

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	@ (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	@ 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff4c 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ae:	f7ff ff61 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6978      	ldr	r0, [r7, #20]
 80015ba:	f7ff ffb1 	bl	8001520 <NVIC_EncodePriority>
 80015be:	4602      	mov	r2, r0
 80015c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff80 	bl	80014cc <__NVIC_SetPriority>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff54 	bl	8001490 <__NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06a      	b.n	80016d8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001608:	2b00      	cmp	r3, #0
 800160a:	d106      	bne.n	800161a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2223      	movs	r2, #35	@ 0x23
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f004 f90f 	bl	8005838 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_ETH_Init+0xf0>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a30      	ldr	r2, [pc, #192]	@ (80016e0 <HAL_ETH_Init+0xf0>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <HAL_ETH_Init+0xf0>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001632:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <HAL_ETH_Init+0xf4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <HAL_ETH_Init+0xf4>)
 8001638:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800163c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800163e:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <HAL_ETH_Init+0xf4>)
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4927      	ldr	r1, [pc, #156]	@ (80016e4 <HAL_ETH_Init+0xf4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <HAL_ETH_Init+0xf4>)
 800164e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff feb0 	bl	80013cc <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800166e:	e011      	b.n	8001694 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001670:	f7ff feac 	bl	80013cc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800167e:	d909      	bls.n	8001694 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	22e0      	movs	r2, #224	@ 0xe0
 800168c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e021      	b.n	80016d8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e4      	bne.n	8001670 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 ffac 	bl	8002604 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f001 f853 	bl	8002758 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f001 f8a9 	bl	800280a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	461a      	mov	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 f811 	bl	80026e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2210      	movs	r2, #16
 80016d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800

080016e8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d150      	bne.n	800179c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2223      	movs	r2, #35	@ 0x23
 80016fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2204      	movs	r2, #4
 8001706:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fa7b 	bl	8001c04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0208 	orr.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fe5c 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0204 	orr.w	r2, r2, #4
 8001742:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800174c:	2001      	movs	r0, #1
 800174e:	f7ff fe49 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fdf3 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001776:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2223      	movs	r2, #35	@ 0x23
 8001794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d17b      	bne.n	80018b2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2223      	movs	r2, #35	@ 0x23
 80017be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <HAL_ETH_Start_IT+0x114>)
 80017e6:	430b      	orrs	r3, r1
 80017e8:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80017fc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2204      	movs	r2, #4
 8001804:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f9fc 	bl	8001c04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0208 	orr.w	r2, r2, #8
 800181a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff fddd 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0204 	orr.w	r2, r2, #4
 8001840:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff fdca 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fd74 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001874:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800188c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001896:	69d9      	ldr	r1, [r3, #28]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_ETH_Start_IT+0x118>)
 800189e:	430b      	orrs	r3, r1
 80018a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2223      	movs	r2, #35	@ 0x23
 80018aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	00020060 	.word	0x00020060
 80018c0:	0001a0c1 	.word	0x0001a0c1

080018c4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018d2:	2b23      	cmp	r3, #35	@ 0x23
 80018d4:	d16e      	bne.n	80019b4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2223      	movs	r2, #35	@ 0x23
 80018da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <HAL_ETH_Stop_IT+0xfc>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018f4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f023 0302 	bic.w	r3, r3, #2
 8001920:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001924:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0204 	bic.w	r2, r2, #4
 8001934:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fd50 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fcfa 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff fd3a 	bl	80013e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e00e      	b.n	800199c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	3212      	adds	r2, #18
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d9ed      	bls.n	800197e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2210      	movs	r2, #16
 80019ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	fffe5f3e 	.word	0xfffe5f3e

080019c4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e045      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019ee:	2b23      	cmp	r3, #35	@ 0x23
 80019f0:	d13f      	bne.n	8001a72 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019fa:	2201      	movs	r2, #1
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 ff70 	bl	80028e4 <ETH_Prepare_Tx_Descriptors>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a10:	f043 0202 	orr.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e02a      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1e:	f3bf 8f4f 	dsb	sy
}
 8001a22:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d904      	bls.n	8001a40 <HAL_ETH_Transmit_IT+0x7c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3a:	1f1a      	subs	r2, r3, #4
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0a8      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aae:	2b23      	cmp	r3, #35	@ 0x23
 8001ab0:	d001      	beq.n	8001ab6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0a1      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	3212      	adds	r2, #18
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001acc:	f1c3 0304 	rsb	r3, r3, #4
 8001ad0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ad2:	e06a      	b.n	8001baa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_ETH_ReadData+0x88>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d040      	beq.n	8001b86 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b38:	3b04      	subs	r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b60:	461a      	mov	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f004 f833 	bl	8005bd0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d902      	bls.n	8001b98 <HAL_ETH_ReadData+0x11c>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b04      	subs	r3, #4
 8001b96:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	3212      	adds	r2, #18
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db06      	blt.n	8001bc0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d202      	bcs.n	8001bc0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d089      	beq.n	8001ad4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f815 	bl	8001c04 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c10:	2301      	movs	r3, #1
 8001c12:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c18:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	3212      	adds	r2, #18
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c2a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c2c:	e040      	b.n	8001cb0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 ff98 	bl	8005b70 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	74fb      	strb	r3, [r7, #19]
 8001c4a:	e007      	b.n	8001c5c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	461a      	mov	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d026      	beq.n	8001cb0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce8 <ETH_UpdateDescriptor+0xe4>)
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	e003      	b.n	8001c7a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8001c78:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c7a:	f3bf 8f5f 	dmb	sy
}
 8001c7e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d902      	bls.n	8001c9e <ETH_UpdateDescriptor+0x9a>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	3212      	adds	r2, #18
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <ETH_UpdateDescriptor+0xb8>
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1b8      	bne.n	8001c2e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d00c      	beq.n	8001ce0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	800045f8 	.word	0x800045f8

08001cec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d0a:	e03f      	b.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d028      	beq.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db1b      	blt.n	8001d88 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3304      	adds	r3, #4
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 ff79 	bl	8005c54 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	3304      	adds	r3, #4
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d86:	e001      	b.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_ETH_ReleaseTxPacket+0xac>
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1b9      	bne.n	8001d0c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dba:	2b40      	cmp	r3, #64	@ 0x40
 8001dbc:	d112      	bne.n	8001de4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dcc:	2b40      	cmp	r3, #64	@ 0x40
 8001dce:	d109      	bne.n	8001de4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b50      	ldr	r3, [pc, #320]	@ (8001f1c <HAL_ETH_IRQHandler+0x178>)
 8001ddc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f003 fa8e 	bl	8005300 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d113      	bne.n	8001e1e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10a      	bne.n	8001e1e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e10:	461a      	mov	r2, r3
 8001e12:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001e16:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f003 fa81 	bl	8005320 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e30:	d14c      	bne.n	8001ecc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e44:	d142      	bne.n	8001ecc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4c:	f043 0208 	orr.w	r2, r3, #8
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e68:	d11a      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	4b2a      	ldr	r3, [pc, #168]	@ (8001f20 <HAL_ETH_IRQHandler+0x17c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001e90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e94:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	22e0      	movs	r2, #224	@ 0xe0
 8001e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001e9e:	e012      	b.n	8001ec6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001ec4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f003 fa3a 	bl	8005340 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f81c 	bl	8001f28 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_ETH_IRQHandler+0x180>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f04:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <HAL_ETH_IRQHandler+0x180>)
 8001f06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f0a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f815 	bl	8001f3c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	00010040 	.word	0x00010040
 8001f20:	007e2000 	.word	0x007e2000
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 031c 	and.w	r3, r3, #28
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	02db      	lsls	r3, r3, #11
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001fa0:	f7ff fa14 	bl	80013cc <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fa6:	e00d      	b.n	8001fc4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001fa8:	f7ff fa10 	bl	80013cc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fb6:	d301      	bcc.n	8001fbc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ec      	bne.n	8001fa8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 031c 	and.w	r3, r3, #28
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	02db      	lsls	r3, r3, #11
 8002008:	b29b      	uxth	r3, r3
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff f9c4 	bl	80013cc <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002046:	e00d      	b.n	8002064 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002048:	f7ff f9c0 	bl	80013cc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002056:	d301      	bcc.n	800205c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e009      	b.n	8002070 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ec      	bne.n	8002048 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d9      	b.n	8002240 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	b29a      	uxth	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00b      	b.n	8002278 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002266:	2b10      	cmp	r3, #16
 8002268:	d105      	bne.n	8002276 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f88f 	bl	8002390 <ETH_SetMACConfig>

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 031c 	bic.w	r3, r3, #28
 8002296:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002298:	f001 fb2e 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 800229c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_ETH_SetMDIOClockRange+0x98>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d908      	bls.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x38>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d804      	bhi.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e027      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a18      	ldr	r2, [pc, #96]	@ (800231c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x52>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d204      	bcs.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f043 030c 	orr.w	r3, r3, #12
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e01a      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d303      	bcc.n	80022e2 <HAL_ETH_SetMDIOClockRange+0x62>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4a11      	ldr	r2, [pc, #68]	@ (8002324 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d911      	bls.n	8002306 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d908      	bls.n	80022fc <HAL_ETH_SetMDIOClockRange+0x7c>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d804      	bhi.n	80022fc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e005      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e000      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002306:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	611a      	str	r2, [r3, #16]
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	01312cff 	.word	0x01312cff
 800231c:	02160ebf 	.word	0x02160ebf
 8002320:	03938700 	.word	0x03938700
 8002324:	05f5e0ff 	.word	0x05f5e0ff
 8002328:	08f0d17f 	.word	0x08f0d17f

0800232c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002364:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002368:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff f834 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002386:	6193      	str	r3, [r2, #24]
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <ETH_SetMACConfig+0x15c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7c1b      	ldrb	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <ETH_SetMACConfig+0x28>
 80023b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023b6:	e000      	b.n	80023ba <ETH_SetMACConfig+0x2a>
 80023b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	7c5b      	ldrb	r3, [r3, #17]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <ETH_SetMACConfig+0x38>
 80023c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023c6:	e000      	b.n	80023ca <ETH_SetMACConfig+0x3a>
 80023c8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	7fdb      	ldrb	r3, [r3, #31]
 80023d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	7f92      	ldrb	r2, [r2, #30]
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d102      	bne.n	80023ee <ETH_SetMACConfig+0x5e>
 80023e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ec:	e000      	b.n	80023f0 <ETH_SetMACConfig+0x60>
 80023ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7f1b      	ldrb	r3, [r3, #28]
 80023f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002406:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800240e:	2a00      	cmp	r2, #0
 8002410:	d102      	bne.n	8002418 <ETH_SetMACConfig+0x88>
 8002412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002416:	e000      	b.n	800241a <ETH_SetMACConfig+0x8a>
 8002418:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7bdb      	ldrb	r3, [r3, #15]
 8002420:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002422:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002430:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002432:	4313      	orrs	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244a:	2001      	movs	r0, #1
 800244c:	f7fe ffca 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002476:	2a00      	cmp	r2, #0
 8002478:	d101      	bne.n	800247e <ETH_SetMACConfig+0xee>
 800247a:	2280      	movs	r2, #128	@ 0x80
 800247c:	e000      	b.n	8002480 <ETH_SetMACConfig+0xf0>
 800247e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002480:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002486:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800248e:	2a01      	cmp	r2, #1
 8002490:	d101      	bne.n	8002496 <ETH_SetMACConfig+0x106>
 8002492:	2208      	movs	r2, #8
 8002494:	e000      	b.n	8002498 <ETH_SetMACConfig+0x108>
 8002496:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002498:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80024a0:	2a01      	cmp	r2, #1
 80024a2:	d101      	bne.n	80024a8 <ETH_SetMACConfig+0x118>
 80024a4:	2204      	movs	r2, #4
 80024a6:	e000      	b.n	80024aa <ETH_SetMACConfig+0x11a>
 80024a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80024b2:	2a01      	cmp	r2, #1
 80024b4:	d101      	bne.n	80024ba <ETH_SetMACConfig+0x12a>
 80024b6:	2202      	movs	r2, #2
 80024b8:	e000      	b.n	80024bc <ETH_SetMACConfig+0x12c>
 80024ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024bc:	4313      	orrs	r3, r2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fe ff85 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	ff20810f 	.word	0xff20810f

080024f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <ETH_SetDMAConfig+0x110>)
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7b1b      	ldrb	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <ETH_SetDMAConfig+0x2c>
 8002516:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800251a:	e000      	b.n	800251e <ETH_SetDMAConfig+0x2e>
 800251c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7b5b      	ldrb	r3, [r3, #13]
 8002522:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002524:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	7f52      	ldrb	r2, [r2, #29]
 800252a:	2a00      	cmp	r2, #0
 800252c:	d102      	bne.n	8002534 <ETH_SetDMAConfig+0x44>
 800252e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002532:	e000      	b.n	8002536 <ETH_SetDMAConfig+0x46>
 8002534:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002536:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	7b9b      	ldrb	r3, [r3, #14]
 800253c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800253e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	7f1b      	ldrb	r3, [r3, #28]
 800254a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800254c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7f9b      	ldrb	r3, [r3, #30]
 8002552:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002554:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800255a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002562:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002564:	4313      	orrs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002574:	461a      	mov	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe ff2c 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002594:	461a      	mov	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7fe fefd 	bl	80013e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	f8de3f23 	.word	0xf8de3f23

08002604 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0a6      	sub	sp, #152	@ 0x98
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002618:	2300      	movs	r3, #0
 800261a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002640:	2300      	movs	r3, #0
 8002642:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002666:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800266c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002678:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fe86 	bl	8002390 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002684:	2301      	movs	r3, #1
 8002686:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002688:	2301      	movs	r3, #1
 800268a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002692:	2301      	movs	r3, #1
 8002694:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ff08 	bl	80024f0 <ETH_SetDMAConfig>
}
 80026e0:	bf00      	nop
 80026e2:	3798      	adds	r7, #152	@ 0x98
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3305      	adds	r3, #5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	3204      	adds	r2, #4
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <ETH_MACAddressConfig+0x68>)
 800270a:	4413      	add	r3, r2
 800270c:	461a      	mov	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3303      	adds	r3, #3
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	061a      	lsls	r2, r3, #24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3302      	adds	r3, #2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3301      	adds	r3, #1
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4313      	orrs	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	7812      	ldrb	r2, [r2, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <ETH_MACAddressConfig+0x6c>)
 800273a:	4413      	add	r3, r2
 800273c:	461a      	mov	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	6013      	str	r3, [r2, #0]
}
 8002742:	bf00      	nop
 8002744:	371c      	adds	r7, #28
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40028040 	.word	0x40028040
 8002754:	40028044 	.word	0x40028044

08002758 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e03e      	b.n	80027e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	3206      	adds	r2, #6
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d80c      	bhi.n	80027c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e004      	b.n	80027d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d9bd      	bls.n	8002766 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fc:	611a      	str	r2, [r3, #16]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e046      	b.n	80028a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002854:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 800285c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	3212      	adds	r2, #18
 8002872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d80c      	bhi.n	8002896 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6919      	ldr	r1, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	e004      	b.n	80028a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d9b5      	bls.n	8002818 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d6:	60da      	str	r2, [r3, #12]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b08d      	sub	sp, #52	@ 0x34
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3318      	adds	r3, #24
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002922:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002926:	d007      	beq.n	8002938 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292c:	3304      	adds	r3, #4
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	e0ff      	b.n	8002b3c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4b7d      	ldr	r3, [pc, #500]	@ (8002b48 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002952:	4013      	ands	r3, r2
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80029be:	f3bf 8f5f 	dmb	sy
}
 80029c2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80029d0:	e082      	b.n	8002ad8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e005      	b.n	80029fe <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	3301      	adds	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d902      	bls.n	8002a10 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	3b04      	subs	r3, #4
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a32:	d007      	beq.n	8002a44 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a38:	3304      	adds	r3, #4
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d029      	beq.n	8002a98 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a56:	e019      	b.n	8002a8c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a58:	f3bf 8f5f 	dmb	sy
}
 8002a5c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d902      	bls.n	8002a7c <ETH_Prepare_Tx_Descriptors+0x198>
 8002a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a78:	3b04      	subs	r3, #4
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a88:	3301      	adds	r3, #1
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3e1      	bcc.n	8002a58 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002a94:	2302      	movs	r3, #2
 8002a96:	e051      	b.n	8002b3c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	6852      	ldr	r2, [r2, #4]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ac6:	f3bf 8f5f 	dmb	sy
}
 8002aca:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af78 	bne.w	80029d2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	3304      	adds	r3, #4
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b22:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b36:	b662      	cpsie	i
}
 8002b38:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3734      	adds	r7, #52	@ 0x34
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	ffffe000 	.word	0xffffe000

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e175      	b.n	8002e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8164 	bne.w	8002e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x56>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80be 	beq.w	8002e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b66      	ldr	r3, [pc, #408]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a65      	ldr	r2, [pc, #404]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b63      	ldr	r3, [pc, #396]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cee:	4a61      	ldr	r2, [pc, #388]	@ (8002e74 <HAL_GPIO_Init+0x328>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	@ (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d037      	beq.n	8002d8a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	@ (8002e7c <HAL_GPIO_Init+0x330>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a56      	ldr	r2, [pc, #344]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a55      	ldr	r2, [pc, #340]	@ (8002e84 <HAL_GPIO_Init+0x338>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a54      	ldr	r2, [pc, #336]	@ (8002e88 <HAL_GPIO_Init+0x33c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a53      	ldr	r2, [pc, #332]	@ (8002e8c <HAL_GPIO_Init+0x340>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_GPIO_Init+0x344>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a51      	ldr	r2, [pc, #324]	@ (8002e94 <HAL_GPIO_Init+0x348>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a50      	ldr	r2, [pc, #320]	@ (8002e98 <HAL_GPIO_Init+0x34c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e9c <HAL_GPIO_Init+0x350>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d62:	2309      	movs	r3, #9
 8002d64:	e012      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d66:	230a      	movs	r3, #10
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	@ (8002e74 <HAL_GPIO_Init+0x328>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a29      	ldr	r2, [pc, #164]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ea0 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae86 	bls.w	8002b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	@ 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40022000 	.word	0x40022000
 8002e9c:	40022400 	.word	0x40022400
 8002ea0:	40013c00 	.word	0x40013c00

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	041a      	lsls	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	619a      	str	r2, [r3, #24]
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ee8:	887a      	ldrh	r2, [r7, #2]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	041a      	lsls	r2, r3, #16
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40007000 	.word	0x40007000

08002f2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5a:	f7fe fa37 	bl	80013cc <HAL_GetTick>
 8002f5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f60:	e009      	b.n	8002f76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f62:	f7fe fa33 	bl	80013cc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f70:	d901      	bls.n	8002f76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e022      	b.n	8002fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f82:	d1ee      	bne.n	8002f62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f84:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f90:	f7fe fa1c 	bl	80013cc <HAL_GetTick>
 8002f94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f96:	e009      	b.n	8002fac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f98:	f7fe fa18 	bl	80013cc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fa6:	d901      	bls.n	8002fac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e007      	b.n	8002fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e291      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8087 	beq.w	80030fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff0:	4b96      	ldr	r3, [pc, #600]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d00c      	beq.n	8003016 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffc:	4b93      	ldr	r3, [pc, #588]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d112      	bne.n	800302e <HAL_RCC_OscConfig+0x62>
 8003008:	4b90      	ldr	r3, [pc, #576]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003014:	d10b      	bne.n	800302e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	4b8d      	ldr	r3, [pc, #564]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d06c      	beq.n	80030fc <HAL_RCC_OscConfig+0x130>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d168      	bne.n	80030fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e26b      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x7a>
 8003038:	4b84      	ldr	r3, [pc, #528]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a83      	ldr	r2, [pc, #524]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e02e      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x9c>
 800304e:	4b7f      	ldr	r3, [pc, #508]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7e      	ldr	r2, [pc, #504]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b7c      	ldr	r3, [pc, #496]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7b      	ldr	r2, [pc, #492]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0xc0>
 8003072:	4b76      	ldr	r3, [pc, #472]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b73      	ldr	r3, [pc, #460]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xd8>
 800308c:	4b6f      	ldr	r3, [pc, #444]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6e      	ldr	r2, [pc, #440]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b6c      	ldr	r3, [pc, #432]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6b      	ldr	r2, [pc, #428]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f98e 	bl	80013cc <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fe f98a 	bl	80013cc <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e21f      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b61      	ldr	r3, [pc, #388]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fe f97a 	bl	80013cc <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fe f976 	bl	80013cc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	@ 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e20b      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	4b57      	ldr	r3, [pc, #348]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x110>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d069      	beq.n	80031de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310a:	4b50      	ldr	r3, [pc, #320]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b4d      	ldr	r3, [pc, #308]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d11c      	bne.n	800315c <HAL_RCC_OscConfig+0x190>
 8003122:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_RCC_OscConfig+0x17a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e1df      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b41      	ldr	r3, [pc, #260]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	493d      	ldr	r1, [pc, #244]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	e040      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d023      	beq.n	80031ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003164:	4b39      	ldr	r3, [pc, #228]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a38      	ldr	r2, [pc, #224]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe f92c 	bl	80013cc <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe f928 	bl	80013cc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1bd      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	4b30      	ldr	r3, [pc, #192]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4929      	ldr	r1, [pc, #164]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
 80031aa:	e018      	b.n	80031de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ac:	4b27      	ldr	r3, [pc, #156]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a26      	ldr	r2, [pc, #152]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe f908 	bl	80013cc <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe f904 	bl	80013cc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e199      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d038      	beq.n	800325c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b16      	ldr	r3, [pc, #88]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	4a15      	ldr	r2, [pc, #84]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe f8e5 	bl	80013cc <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003206:	f7fe f8e1 	bl	80013cc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e176      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800321a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x23a>
 8003224:	e01a      	b.n	800325c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <HAL_RCC_OscConfig+0x280>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fe f8cb 	bl	80013cc <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe f8c7 	bl	80013cc <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d903      	bls.n	8003250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e15c      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
 800324c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	4b91      	ldr	r3, [pc, #580]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1ee      	bne.n	800323a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a4 	beq.w	80033b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b8b      	ldr	r3, [pc, #556]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	4a87      	ldr	r2, [pc, #540]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	@ 0x40
 8003282:	4b85      	ldr	r3, [pc, #532]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003292:	4b82      	ldr	r3, [pc, #520]	@ (800349c <HAL_RCC_OscConfig+0x4d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329a:	2b00      	cmp	r3, #0
 800329c:	d118      	bne.n	80032d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800329e:	4b7f      	ldr	r3, [pc, #508]	@ (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7e      	ldr	r2, [pc, #504]	@ (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032aa:	f7fe f88f 	bl	80013cc <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b2:	f7fe f88b 	bl	80013cc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	@ 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e120      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c4:	4b75      	ldr	r3, [pc, #468]	@ (800349c <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x31a>
 80032d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e4:	e02d      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x33c>
 80032ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a69      	ldr	r2, [pc, #420]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	4b67      	ldr	r3, [pc, #412]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	4a66      	ldr	r2, [pc, #408]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	e01c      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d10c      	bne.n	800332a <HAL_RCC_OscConfig+0x35e>
 8003310:	4b61      	ldr	r3, [pc, #388]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003314:	4a60      	ldr	r2, [pc, #384]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	@ 0x70
 800331c:	4b5e      	ldr	r3, [pc, #376]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a5d      	ldr	r2, [pc, #372]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e00b      	b.n	8003342 <HAL_RCC_OscConfig+0x376>
 800332a:	4b5b      	ldr	r3, [pc, #364]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	4a5a      	ldr	r2, [pc, #360]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	@ 0x70
 8003336:	4b58      	ldr	r3, [pc, #352]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	4a57      	ldr	r2, [pc, #348]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d015      	beq.n	8003376 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334a:	f7fe f83f 	bl	80013cc <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003352:	f7fe f83b 	bl	80013cc <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0ce      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003368:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ee      	beq.n	8003352 <HAL_RCC_OscConfig+0x386>
 8003374:	e014      	b.n	80033a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fe f829 	bl	80013cc <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe f825 	bl	80013cc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0b8      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003394:	4b40      	ldr	r3, [pc, #256]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ee      	bne.n	800337e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a4 	beq.w	8003504 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d06b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d149      	bne.n	8003464 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a30      	ldr	r2, [pc, #192]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fff6 	bl	80013cc <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd fff2 	bl	80013cc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e087      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	3b01      	subs	r3, #1
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4313      	orrs	r3, r2
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800342a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800342e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a18      	ldr	r2, [pc, #96]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd ffc6 	bl	80013cc <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fd ffc2 	bl	80013cc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e057      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x478>
 8003462:	e04f      	b.n	8003504 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a0b      	ldr	r2, [pc, #44]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800346a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd ffac 	bl	80013cc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fd ffa8 	bl	80013cc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e03d      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_RCC_OscConfig+0x4cc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x4ac>
 8003496:	e035      	b.n	8003504 <HAL_RCC_OscConfig+0x538>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_RCC_OscConfig+0x544>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d028      	beq.n	8003500 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d121      	bne.n	8003500 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11a      	bne.n	8003500 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d8:	4293      	cmp	r3, r2
 80034da:	d111      	bne.n	8003500 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0d0      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b67      	ldr	r3, [pc, #412]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 020f 	bic.w	r2, r3, #15
 8003542:	4965      	ldr	r1, [pc, #404]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b8      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4a58      	ldr	r2, [pc, #352]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800357e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358c:	4b53      	ldr	r3, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003596:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b50      	ldr	r3, [pc, #320]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	494d      	ldr	r1, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d040      	beq.n	8003638 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b47      	ldr	r3, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e07f      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e073      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06b      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4936      	ldr	r1, [pc, #216]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fee0 	bl	80013cc <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fd fedc 	bl	80013cc <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e053      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d210      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	4922      	ldr	r1, [pc, #136]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e032      	b.n	80036ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4916      	ldr	r1, [pc, #88]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a6:	f000 f821 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	490a      	ldr	r1, [pc, #40]	@ (80036e0 <HAL_RCC_ClockConfig+0x1cc>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a09      	ldr	r2, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_ClockConfig+0x1d4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd fabe 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023c00 	.word	0x40023c00
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0801c3f8 	.word	0x0801c3f8
 80036e4:	20000000 	.word	0x20000000
 80036e8:	20000004 	.word	0x20000004

080036ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036f0:	b094      	sub	sp, #80	@ 0x50
 80036f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f8:	2300      	movs	r3, #0
 80036fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036fc:	2300      	movs	r3, #0
 80036fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003704:	4b79      	ldr	r3, [pc, #484]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d00d      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x40>
 8003710:	2b08      	cmp	r3, #8
 8003712:	f200 80e1 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x34>
 800371a:	2b04      	cmp	r3, #4
 800371c:	d003      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x3a>
 800371e:	e0db      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b73      	ldr	r3, [pc, #460]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003722:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003724:	e0db      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800372a:	e0d8      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b6f      	ldr	r3, [pc, #444]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003734:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003736:	4b6d      	ldr	r3, [pc, #436]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d063      	beq.n	800380a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b6a      	ldr	r3, [pc, #424]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800374c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003754:	633b      	str	r3, [r7, #48]	@ 0x30
 8003756:	2300      	movs	r3, #0
 8003758:	637b      	str	r3, [r7, #52]	@ 0x34
 800375a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003770:	0150      	lsls	r0, r2, #5
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4621      	mov	r1, r4
 8003778:	1a51      	subs	r1, r2, r1
 800377a:	6139      	str	r1, [r7, #16]
 800377c:	4629      	mov	r1, r5
 800377e:	eb63 0301 	sbc.w	r3, r3, r1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003790:	4659      	mov	r1, fp
 8003792:	018b      	lsls	r3, r1, #6
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800379a:	4651      	mov	r1, sl
 800379c:	018a      	lsls	r2, r1, #6
 800379e:	4651      	mov	r1, sl
 80037a0:	ebb2 0801 	subs.w	r8, r2, r1
 80037a4:	4659      	mov	r1, fp
 80037a6:	eb63 0901 	sbc.w	r9, r3, r1
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037be:	4690      	mov	r8, r2
 80037c0:	4699      	mov	r9, r3
 80037c2:	4623      	mov	r3, r4
 80037c4:	eb18 0303 	adds.w	r3, r8, r3
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	462b      	mov	r3, r5
 80037cc:	eb49 0303 	adc.w	r3, r9, r3
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037de:	4629      	mov	r1, r5
 80037e0:	024b      	lsls	r3, r1, #9
 80037e2:	4621      	mov	r1, r4
 80037e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e8:	4621      	mov	r1, r4
 80037ea:	024a      	lsls	r2, r1, #9
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f2:	2200      	movs	r2, #0
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037fc:	f7fc fd70 	bl	80002e0 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4613      	mov	r3, r2
 8003806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003808:	e058      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380a:	4b38      	ldr	r3, [pc, #224]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	2200      	movs	r2, #0
 8003812:	4618      	mov	r0, r3
 8003814:	4611      	mov	r1, r2
 8003816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	f04f 0000 	mov.w	r0, #0
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	0159      	lsls	r1, r3, #5
 8003832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003836:	0150      	lsls	r0, r2, #5
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4641      	mov	r1, r8
 800383e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003842:	4649      	mov	r1, r9
 8003844:	eb63 0b01 	sbc.w	fp, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800385c:	ebb2 040a 	subs.w	r4, r2, sl
 8003860:	eb63 050b 	sbc.w	r5, r3, fp
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	00eb      	lsls	r3, r5, #3
 800386e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003872:	00e2      	lsls	r2, r4, #3
 8003874:	4614      	mov	r4, r2
 8003876:	461d      	mov	r5, r3
 8003878:	4643      	mov	r3, r8
 800387a:	18e3      	adds	r3, r4, r3
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	464b      	mov	r3, r9
 8003880:	eb45 0303 	adc.w	r3, r5, r3
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003892:	4629      	mov	r1, r5
 8003894:	028b      	lsls	r3, r1, #10
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800389c:	4621      	mov	r1, r4
 800389e:	028a      	lsls	r2, r1, #10
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	61fa      	str	r2, [r7, #28]
 80038ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b0:	f7fc fd16 	bl	80002e0 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x200>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3750      	adds	r7, #80	@ 0x50
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200

080038f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4903      	ldr	r1, [pc, #12]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	0801c408 	.word	0x0801c408

08003938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800393c:	f7ff ffdc 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	0801c408 	.word	0x0801c408

08003960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	220f      	movs	r2, #15
 800396e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003970:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800397c:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003994:	4b09      	ldr	r3, [pc, #36]	@ (80039bc <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <HAL_RCC_GetClockConfig+0x60>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 020f 	and.w	r2, r3, #15
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40023c00 	.word	0x40023c00

080039c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039ec:	4b69      	ldr	r3, [pc, #420]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a68      	ldr	r2, [pc, #416]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	4b66      	ldr	r3, [pc, #408]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	4964      	ldr	r1, [pc, #400]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d017      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	4959      	ldr	r1, [pc, #356]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	494a      	ldr	r1, [pc, #296]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a96:	2301      	movs	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 808b 	beq.w	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	4a39      	ldr	r2, [pc, #228]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab4:	4b37      	ldr	r3, [pc, #220]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ac0:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a34      	ldr	r2, [pc, #208]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fd fc7e 	bl	80013cc <HAL_GetTick>
 8003ad0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fd fc7a 	bl	80013cc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	@ 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e357      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003af2:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d035      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d02e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b10:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b26:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b38:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d114      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fc42 	bl	80013cc <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fc3e 	bl	80013cc <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e319      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ee      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b7c:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b8a:	400b      	ands	r3, r1
 8003b8c:	4901      	ldr	r1, [pc, #4]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
 8003b92:	e00b      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	0ffffcff 	.word	0x0ffffcff
 8003ba0:	4baa      	ldr	r3, [pc, #680]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4aa9      	ldr	r2, [pc, #676]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003baa:	6093      	str	r3, [r2, #8]
 8003bac:	4ba7      	ldr	r3, [pc, #668]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb8:	49a4      	ldr	r1, [pc, #656]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bca:	4ba0      	ldr	r3, [pc, #640]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd0:	4a9e      	ldr	r2, [pc, #632]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bda:	4b9c      	ldr	r3, [pc, #624]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	4999      	ldr	r1, [pc, #612]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf8:	4b94      	ldr	r3, [pc, #592]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c06:	4991      	ldr	r1, [pc, #580]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1a:	4b8c      	ldr	r3, [pc, #560]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c28:	4988      	ldr	r1, [pc, #544]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c3c:	4b83      	ldr	r3, [pc, #524]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4a:	4980      	ldr	r1, [pc, #512]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4977      	ldr	r1, [pc, #476]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c80:	4b72      	ldr	r3, [pc, #456]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8e:	496f      	ldr	r1, [pc, #444]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca8:	f023 020c 	bic.w	r2, r3, #12
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb0:	4966      	ldr	r1, [pc, #408]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cc4:	4b61      	ldr	r3, [pc, #388]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd2:	495e      	ldr	r1, [pc, #376]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ce6:	4b59      	ldr	r3, [pc, #356]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	4955      	ldr	r1, [pc, #340]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d08:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	494d      	ldr	r1, [pc, #308]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d2a:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d38:	4944      	ldr	r1, [pc, #272]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	493c      	ldr	r1, [pc, #240]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d6e:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	4933      	ldr	r1, [pc, #204]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d90:	4b2e      	ldr	r3, [pc, #184]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d9e:	492b      	ldr	r1, [pc, #172]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d011      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003db2:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc0:	4922      	ldr	r1, [pc, #136]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003df2:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e00:	4912      	ldr	r1, [pc, #72]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e24:	4909      	ldr	r1, [pc, #36]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d006      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80d9 	beq.w	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e40:	4b02      	ldr	r3, [pc, #8]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a01      	ldr	r2, [pc, #4]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e4a:	e001      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e52:	f7fd fabb 	bl	80013cc <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e5a:	f7fd fab7 	bl	80013cc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	@ 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e194      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d021      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e8c:	4b64      	ldr	r3, [pc, #400]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e92:	0c1b      	lsrs	r3, r3, #16
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e9a:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea0:	0e1b      	lsrs	r3, r3, #24
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	019a      	lsls	r2, r3, #6
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	4957      	ldr	r1, [pc, #348]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d02e      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef2:	d129      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f08:	0f1b      	lsrs	r3, r3, #28
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	019a      	lsls	r2, r3, #6
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	071b      	lsls	r3, r3, #28
 8003f28:	493d      	ldr	r1, [pc, #244]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f36:	f023 021f 	bic.w	r2, r3, #31
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	4937      	ldr	r1, [pc, #220]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f54:	4b32      	ldr	r3, [pc, #200]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5a:	0e1b      	lsrs	r3, r3, #24
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f62:	4b2f      	ldr	r3, [pc, #188]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f68:	0f1b      	lsrs	r3, r3, #28
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	019a      	lsls	r2, r3, #6
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	071b      	lsls	r3, r3, #28
 8003f88:	4925      	ldr	r1, [pc, #148]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d011      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	019a      	lsls	r2, r3, #6
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4919      	ldr	r1, [pc, #100]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fc0:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7fd f9fe 	bl	80013cc <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fd4:	f7fd f9fa 	bl	80013cc <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	@ 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0d7      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	f040 80cd 	bne.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ffa:	4b09      	ldr	r3, [pc, #36]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a08      	ldr	r2, [pc, #32]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004006:	f7fd f9e1 	bl	80013cc <HAL_GetTick>
 800400a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800400e:	f7fd f9dd 	bl	80013cc <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	@ 0x64
 800401a:	d903      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0ba      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004020:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004024:	4b5e      	ldr	r3, [pc, #376]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004030:	d0ed      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02e      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d12a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800405a:	4b51      	ldr	r3, [pc, #324]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004068:	4b4d      	ldr	r3, [pc, #308]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406e:	0f1b      	lsrs	r3, r3, #28
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	019a      	lsls	r2, r3, #6
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	4944      	ldr	r1, [pc, #272]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004096:	4b42      	ldr	r3, [pc, #264]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800409c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	493d      	ldr	r1, [pc, #244]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c4:	d11d      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040c6:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040d4:	4b32      	ldr	r3, [pc, #200]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	0f1b      	lsrs	r3, r3, #28
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	019a      	lsls	r2, r3, #6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	4929      	ldr	r1, [pc, #164]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d028      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800410e:	4b24      	ldr	r3, [pc, #144]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	019a      	lsls	r2, r3, #6
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	4917      	ldr	r1, [pc, #92]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800414a:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004150:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4911      	ldr	r1, [pc, #68]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004160:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416c:	f7fd f92e 	bl	80013cc <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004174:	f7fd f92a 	bl	80013cc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	@ 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e007      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004186:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004192:	d1ef      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e049      	b.n	800424a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f841 	bl	8004252 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f000 fa00 	bl	80045e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e054      	b.n	800432a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <HAL_TIM_Base_Start_IT+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	@ (800433c <HAL_TIM_Base_Start_IT+0xd4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	@ (8004340 <HAL_TIM_Base_Start_IT+0xd8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_TIM_Base_Start_IT+0xdc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_TIM_Base_Start_IT+0xe0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <HAL_TIM_Base_Start_IT+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x80>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <HAL_TIM_Base_Start_IT+0xe8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_TIM_Base_Start_IT+0xec>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIM_Base_Start_IT+0xbe>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40010000 	.word	0x40010000
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40000c00 	.word	0x40000c00
 8004348:	40010400 	.word	0x40010400
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800
 8004354:	00010007 	.word	0x00010007

08004358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0202 	mvn.w	r2, #2
 8004384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f905 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8f7 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f908 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0204 	mvn.w	r2, #4
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8db 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f8cd 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8de 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b08      	cmp	r3, #8
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0208 	mvn.w	r2, #8
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2204      	movs	r2, #4
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f8b1 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8a3 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f8b4 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b10      	cmp	r3, #16
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0210 	mvn.w	r2, #16
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2208      	movs	r2, #8
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f887 	bl	80045aa <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f879 	bl	8004596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f88a 	bl	80045be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10e      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d107      	bne.n	80044dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0201 	mvn.w	r2, #1
 80044d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fb76 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d10e      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f4:	2b80      	cmp	r3, #128	@ 0x80
 80044f6:	d107      	bne.n	8004508 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f91a 	bl	800473c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004516:	d10e      	bne.n	8004536 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d107      	bne.n	8004536 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800452e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f90d 	bl	8004750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d10e      	bne.n	8004562 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d107      	bne.n	8004562 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f838 	bl	80045d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b20      	cmp	r3, #32
 800456e:	d10e      	bne.n	800458e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b20      	cmp	r3, #32
 800457c:	d107      	bne.n	800458e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0220 	mvn.w	r2, #32
 8004586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f8cd 	bl	8004728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a40      	ldr	r2, [pc, #256]	@ (80046fc <TIM_Base_SetConfig+0x114>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d00f      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a3d      	ldr	r2, [pc, #244]	@ (8004700 <TIM_Base_SetConfig+0x118>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a3c      	ldr	r2, [pc, #240]	@ (8004704 <TIM_Base_SetConfig+0x11c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3b      	ldr	r2, [pc, #236]	@ (8004708 <TIM_Base_SetConfig+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3a      	ldr	r2, [pc, #232]	@ (800470c <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d108      	bne.n	800463a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a2f      	ldr	r2, [pc, #188]	@ (80046fc <TIM_Base_SetConfig+0x114>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d02b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004648:	d027      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <TIM_Base_SetConfig+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d023      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <TIM_Base_SetConfig+0x11c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2a      	ldr	r2, [pc, #168]	@ (8004708 <TIM_Base_SetConfig+0x120>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a29      	ldr	r2, [pc, #164]	@ (800470c <TIM_Base_SetConfig+0x124>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a28      	ldr	r2, [pc, #160]	@ (8004710 <TIM_Base_SetConfig+0x128>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a27      	ldr	r2, [pc, #156]	@ (8004714 <TIM_Base_SetConfig+0x12c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a26      	ldr	r2, [pc, #152]	@ (8004718 <TIM_Base_SetConfig+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a25      	ldr	r2, [pc, #148]	@ (800471c <TIM_Base_SetConfig+0x134>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a24      	ldr	r2, [pc, #144]	@ (8004720 <TIM_Base_SetConfig+0x138>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a23      	ldr	r2, [pc, #140]	@ (8004724 <TIM_Base_SetConfig+0x13c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a0c      	ldr	r2, [pc, #48]	@ (800470c <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	615a      	str	r2, [r3, #20]
}
 80046ee:	bf00      	nop
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40010400 	.word	0x40010400
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800
 800471c:	40001800 	.word	0x40001800
 8004720:	40001c00 	.word	0x40001c00
 8004724:	40002000 	.word	0x40002000

08004728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e040      	b.n	80047f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fc14 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	@ 0x24
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f82c 	bl	8004800 <UART_SetConfig>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e022      	b.n	80047f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa84 	bl	8004cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fb0b 	bl	8004e0c <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ac4 <UART_SetConfig+0x2c4>)
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6979      	ldr	r1, [r7, #20]
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	430a      	orrs	r2, r1
 8004870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a94      	ldr	r2, [pc, #592]	@ (8004ac8 <UART_SetConfig+0x2c8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d120      	bne.n	80048be <UART_SetConfig+0xbe>
 800487c:	4b93      	ldr	r3, [pc, #588]	@ (8004acc <UART_SetConfig+0x2cc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d816      	bhi.n	80048b8 <UART_SetConfig+0xb8>
 800488a:	a201      	add	r2, pc, #4	@ (adr r2, 8004890 <UART_SetConfig+0x90>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048a1 	.word	0x080048a1
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048a7 	.word	0x080048a7
 800489c:	080048b3 	.word	0x080048b3
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e150      	b.n	8004b48 <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e14d      	b.n	8004b48 <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e14a      	b.n	8004b48 <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e147      	b.n	8004b48 <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e144      	b.n	8004b48 <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a83      	ldr	r2, [pc, #524]	@ (8004ad0 <UART_SetConfig+0x2d0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d132      	bne.n	800492e <UART_SetConfig+0x12e>
 80048c8:	4b80      	ldr	r3, [pc, #512]	@ (8004acc <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d828      	bhi.n	8004928 <UART_SetConfig+0x128>
 80048d6:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0xdc>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004929 	.word	0x08004929
 80048e4:	08004929 	.word	0x08004929
 80048e8:	08004929 	.word	0x08004929
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	08004929 	.word	0x08004929
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004929 	.word	0x08004929
 80048fc:	08004917 	.word	0x08004917
 8004900:	08004929 	.word	0x08004929
 8004904:	08004929 	.word	0x08004929
 8004908:	08004929 	.word	0x08004929
 800490c:	08004923 	.word	0x08004923
 8004910:	2300      	movs	r3, #0
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e118      	b.n	8004b48 <UART_SetConfig+0x348>
 8004916:	2302      	movs	r3, #2
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e115      	b.n	8004b48 <UART_SetConfig+0x348>
 800491c:	2304      	movs	r3, #4
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e112      	b.n	8004b48 <UART_SetConfig+0x348>
 8004922:	2308      	movs	r3, #8
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e10f      	b.n	8004b48 <UART_SetConfig+0x348>
 8004928:	2310      	movs	r3, #16
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e10c      	b.n	8004b48 <UART_SetConfig+0x348>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a68      	ldr	r2, [pc, #416]	@ (8004ad4 <UART_SetConfig+0x2d4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d120      	bne.n	800497a <UART_SetConfig+0x17a>
 8004938:	4b64      	ldr	r3, [pc, #400]	@ (8004acc <UART_SetConfig+0x2cc>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004942:	2b30      	cmp	r3, #48	@ 0x30
 8004944:	d013      	beq.n	800496e <UART_SetConfig+0x16e>
 8004946:	2b30      	cmp	r3, #48	@ 0x30
 8004948:	d814      	bhi.n	8004974 <UART_SetConfig+0x174>
 800494a:	2b20      	cmp	r3, #32
 800494c:	d009      	beq.n	8004962 <UART_SetConfig+0x162>
 800494e:	2b20      	cmp	r3, #32
 8004950:	d810      	bhi.n	8004974 <UART_SetConfig+0x174>
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <UART_SetConfig+0x15c>
 8004956:	2b10      	cmp	r3, #16
 8004958:	d006      	beq.n	8004968 <UART_SetConfig+0x168>
 800495a:	e00b      	b.n	8004974 <UART_SetConfig+0x174>
 800495c:	2300      	movs	r3, #0
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e0f2      	b.n	8004b48 <UART_SetConfig+0x348>
 8004962:	2302      	movs	r3, #2
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e0ef      	b.n	8004b48 <UART_SetConfig+0x348>
 8004968:	2304      	movs	r3, #4
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e0ec      	b.n	8004b48 <UART_SetConfig+0x348>
 800496e:	2308      	movs	r3, #8
 8004970:	77fb      	strb	r3, [r7, #31]
 8004972:	e0e9      	b.n	8004b48 <UART_SetConfig+0x348>
 8004974:	2310      	movs	r3, #16
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e0e6      	b.n	8004b48 <UART_SetConfig+0x348>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a56      	ldr	r2, [pc, #344]	@ (8004ad8 <UART_SetConfig+0x2d8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d120      	bne.n	80049c6 <UART_SetConfig+0x1c6>
 8004984:	4b51      	ldr	r3, [pc, #324]	@ (8004acc <UART_SetConfig+0x2cc>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800498e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004990:	d013      	beq.n	80049ba <UART_SetConfig+0x1ba>
 8004992:	2bc0      	cmp	r3, #192	@ 0xc0
 8004994:	d814      	bhi.n	80049c0 <UART_SetConfig+0x1c0>
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d009      	beq.n	80049ae <UART_SetConfig+0x1ae>
 800499a:	2b80      	cmp	r3, #128	@ 0x80
 800499c:	d810      	bhi.n	80049c0 <UART_SetConfig+0x1c0>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <UART_SetConfig+0x1a8>
 80049a2:	2b40      	cmp	r3, #64	@ 0x40
 80049a4:	d006      	beq.n	80049b4 <UART_SetConfig+0x1b4>
 80049a6:	e00b      	b.n	80049c0 <UART_SetConfig+0x1c0>
 80049a8:	2300      	movs	r3, #0
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e0cc      	b.n	8004b48 <UART_SetConfig+0x348>
 80049ae:	2302      	movs	r3, #2
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e0c9      	b.n	8004b48 <UART_SetConfig+0x348>
 80049b4:	2304      	movs	r3, #4
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e0c6      	b.n	8004b48 <UART_SetConfig+0x348>
 80049ba:	2308      	movs	r3, #8
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e0c3      	b.n	8004b48 <UART_SetConfig+0x348>
 80049c0:	2310      	movs	r3, #16
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e0c0      	b.n	8004b48 <UART_SetConfig+0x348>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a44      	ldr	r2, [pc, #272]	@ (8004adc <UART_SetConfig+0x2dc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d125      	bne.n	8004a1c <UART_SetConfig+0x21c>
 80049d0:	4b3e      	ldr	r3, [pc, #248]	@ (8004acc <UART_SetConfig+0x2cc>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049de:	d017      	beq.n	8004a10 <UART_SetConfig+0x210>
 80049e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e4:	d817      	bhi.n	8004a16 <UART_SetConfig+0x216>
 80049e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ea:	d00b      	beq.n	8004a04 <UART_SetConfig+0x204>
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d811      	bhi.n	8004a16 <UART_SetConfig+0x216>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <UART_SetConfig+0x1fe>
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fa:	d006      	beq.n	8004a0a <UART_SetConfig+0x20a>
 80049fc:	e00b      	b.n	8004a16 <UART_SetConfig+0x216>
 80049fe:	2300      	movs	r3, #0
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e0a1      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a04:	2302      	movs	r3, #2
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e09e      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e09b      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a10:	2308      	movs	r3, #8
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e098      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a16:	2310      	movs	r3, #16
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e095      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae0 <UART_SetConfig+0x2e0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d125      	bne.n	8004a72 <UART_SetConfig+0x272>
 8004a26:	4b29      	ldr	r3, [pc, #164]	@ (8004acc <UART_SetConfig+0x2cc>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a34:	d017      	beq.n	8004a66 <UART_SetConfig+0x266>
 8004a36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a3a:	d817      	bhi.n	8004a6c <UART_SetConfig+0x26c>
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a40:	d00b      	beq.n	8004a5a <UART_SetConfig+0x25a>
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a46:	d811      	bhi.n	8004a6c <UART_SetConfig+0x26c>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <UART_SetConfig+0x254>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a50:	d006      	beq.n	8004a60 <UART_SetConfig+0x260>
 8004a52:	e00b      	b.n	8004a6c <UART_SetConfig+0x26c>
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e076      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e073      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a60:	2304      	movs	r3, #4
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e070      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a66:	2308      	movs	r3, #8
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e06d      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e06a      	b.n	8004b48 <UART_SetConfig+0x348>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <UART_SetConfig+0x2e4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d138      	bne.n	8004aee <UART_SetConfig+0x2ee>
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <UART_SetConfig+0x2cc>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a8a:	d017      	beq.n	8004abc <UART_SetConfig+0x2bc>
 8004a8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a90:	d82a      	bhi.n	8004ae8 <UART_SetConfig+0x2e8>
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a96:	d00b      	beq.n	8004ab0 <UART_SetConfig+0x2b0>
 8004a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a9c:	d824      	bhi.n	8004ae8 <UART_SetConfig+0x2e8>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <UART_SetConfig+0x2aa>
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa6:	d006      	beq.n	8004ab6 <UART_SetConfig+0x2b6>
 8004aa8:	e01e      	b.n	8004ae8 <UART_SetConfig+0x2e8>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e04b      	b.n	8004b48 <UART_SetConfig+0x348>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e048      	b.n	8004b48 <UART_SetConfig+0x348>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e045      	b.n	8004b48 <UART_SetConfig+0x348>
 8004abc:	2308      	movs	r3, #8
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e042      	b.n	8004b48 <UART_SetConfig+0x348>
 8004ac2:	bf00      	nop
 8004ac4:	efff69f3 	.word	0xefff69f3
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40004400 	.word	0x40004400
 8004ad4:	40004800 	.word	0x40004800
 8004ad8:	40004c00 	.word	0x40004c00
 8004adc:	40005000 	.word	0x40005000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	40007800 	.word	0x40007800
 8004ae8:	2310      	movs	r3, #16
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e02c      	b.n	8004b48 <UART_SetConfig+0x348>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a72      	ldr	r2, [pc, #456]	@ (8004cbc <UART_SetConfig+0x4bc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d125      	bne.n	8004b44 <UART_SetConfig+0x344>
 8004af8:	4b71      	ldr	r3, [pc, #452]	@ (8004cc0 <UART_SetConfig+0x4c0>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b02:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b06:	d017      	beq.n	8004b38 <UART_SetConfig+0x338>
 8004b08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b0c:	d817      	bhi.n	8004b3e <UART_SetConfig+0x33e>
 8004b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b12:	d00b      	beq.n	8004b2c <UART_SetConfig+0x32c>
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b18:	d811      	bhi.n	8004b3e <UART_SetConfig+0x33e>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <UART_SetConfig+0x326>
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b22:	d006      	beq.n	8004b32 <UART_SetConfig+0x332>
 8004b24:	e00b      	b.n	8004b3e <UART_SetConfig+0x33e>
 8004b26:	2300      	movs	r3, #0
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e00d      	b.n	8004b48 <UART_SetConfig+0x348>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e00a      	b.n	8004b48 <UART_SetConfig+0x348>
 8004b32:	2304      	movs	r3, #4
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e007      	b.n	8004b48 <UART_SetConfig+0x348>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e004      	b.n	8004b48 <UART_SetConfig+0x348>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e001      	b.n	8004b48 <UART_SetConfig+0x348>
 8004b44:	2310      	movs	r3, #16
 8004b46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b50:	d15b      	bne.n	8004c0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b52:	7ffb      	ldrb	r3, [r7, #31]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d828      	bhi.n	8004baa <UART_SetConfig+0x3aa>
 8004b58:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0x360>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b95 	.word	0x08004b95
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004bab 	.word	0x08004bab
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fe fec4 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004b88:	61b8      	str	r0, [r7, #24]
        break;
 8004b8a:	e013      	b.n	8004bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fed4 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004b90:	61b8      	str	r0, [r7, #24]
        break;
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc4 <UART_SetConfig+0x4c4>)
 8004b96:	61bb      	str	r3, [r7, #24]
        break;
 8004b98:	e00c      	b.n	8004bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fe fda7 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 8004b9e:	61b8      	str	r0, [r7, #24]
        break;
 8004ba0:	e008      	b.n	8004bb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba6:	61bb      	str	r3, [r7, #24]
        break;
 8004ba8:	e004      	b.n	8004bb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d074      	beq.n	8004ca4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	005a      	lsls	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d916      	bls.n	8004c04 <UART_SetConfig+0x404>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bdc:	d212      	bcs.n	8004c04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f023 030f 	bic.w	r3, r3, #15
 8004be6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	89fa      	ldrh	r2, [r7, #14]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e04f      	b.n	8004ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	77bb      	strb	r3, [r7, #30]
 8004c08:	e04c      	b.n	8004ca4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d828      	bhi.n	8004c62 <UART_SetConfig+0x462>
 8004c10:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <UART_SetConfig+0x418>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c53 	.word	0x08004c53
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c63 	.word	0x08004c63
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fe fe68 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004c40:	61b8      	str	r0, [r7, #24]
        break;
 8004c42:	e013      	b.n	8004c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fe fe78 	bl	8003938 <HAL_RCC_GetPCLK2Freq>
 8004c48:	61b8      	str	r0, [r7, #24]
        break;
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <UART_SetConfig+0x4c4>)
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fe fd4b 	bl	80036ec <HAL_RCC_GetSysClockFreq>
 8004c56:	61b8      	str	r0, [r7, #24]
        break;
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e004      	b.n	8004c6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	77bb      	strb	r3, [r7, #30]
        break;
 8004c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	085a      	lsrs	r2, r3, #1
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	441a      	add	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d909      	bls.n	8004ca0 <UART_SetConfig+0x4a0>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c92:	d205      	bcs.n	8004ca0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	e001      	b.n	8004ca4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40007c00 	.word	0x40007c00
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	00f42400 	.word	0x00f42400

08004cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01a      	beq.n	8004dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dc6:	d10a      	bne.n	8004dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
  }
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e1c:	f7fc fad6 	bl	80013cc <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d10e      	bne.n	8004e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f81b 	bl	8004e7a <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e011      	b.n	8004e72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b09c      	sub	sp, #112	@ 0x70
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8a:	e0a7      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	f000 80a3 	beq.w	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fc fa99 	bl	80013cc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <UART_WaitOnFlagUntilTimeout+0x32>
 8004ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d13f      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ebc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004ec0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ecc:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ed0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e6      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3308      	adds	r3, #8
 8004efc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004efe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e5      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e068      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d050      	beq.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f48:	d148      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f74:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e6      	bne.n	8004f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	613b      	str	r3, [r7, #16]
   return(result);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004fa6:	623a      	str	r2, [r7, #32]
 8004fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e010      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f43f af48 	beq.w	8004e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3770      	adds	r7, #112	@ 0x70
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005008:	b5b0      	push	{r4, r5, r7, lr}
 800500a:	b08c      	sub	sp, #48	@ 0x30
 800500c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800500e:	4b96      	ldr	r3, [pc, #600]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005010:	22c0      	movs	r2, #192	@ 0xc0
 8005012:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005014:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005016:	22a8      	movs	r2, #168	@ 0xa8
 8005018:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800501a:	4b93      	ldr	r3, [pc, #588]	@ (8005268 <MX_LWIP_Init+0x260>)
 800501c:	2201      	movs	r2, #1
 800501e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 8005020:	4b91      	ldr	r3, [pc, #580]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005022:	2242      	movs	r2, #66	@ 0x42
 8005024:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005026:	4b91      	ldr	r3, [pc, #580]	@ (800526c <MX_LWIP_Init+0x264>)
 8005028:	22ff      	movs	r2, #255	@ 0xff
 800502a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800502c:	4b8f      	ldr	r3, [pc, #572]	@ (800526c <MX_LWIP_Init+0x264>)
 800502e:	22ff      	movs	r2, #255	@ 0xff
 8005030:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005032:	4b8e      	ldr	r3, [pc, #568]	@ (800526c <MX_LWIP_Init+0x264>)
 8005034:	22ff      	movs	r2, #255	@ 0xff
 8005036:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005038:	4b8c      	ldr	r3, [pc, #560]	@ (800526c <MX_LWIP_Init+0x264>)
 800503a:	2200      	movs	r2, #0
 800503c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800503e:	4b8c      	ldr	r3, [pc, #560]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005040:	22c0      	movs	r2, #192	@ 0xc0
 8005042:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005044:	4b8a      	ldr	r3, [pc, #552]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005046:	22a8      	movs	r2, #168	@ 0xa8
 8005048:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800504a:	4b89      	ldr	r3, [pc, #548]	@ (8005270 <MX_LWIP_Init+0x268>)
 800504c:	2201      	movs	r2, #1
 800504e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005050:	4b87      	ldr	r3, [pc, #540]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005052:	2201      	movs	r2, #1
 8005054:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005056:	2100      	movs	r1, #0
 8005058:	2000      	movs	r0, #0
 800505a:	f006 fa29 	bl	800b4b0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800505e:	4b82      	ldr	r3, [pc, #520]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	061a      	lsls	r2, r3, #24
 8005064:	4b80      	ldr	r3, [pc, #512]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	431a      	orrs	r2, r3
 800506c:	4b7e      	ldr	r3, [pc, #504]	@ (8005268 <MX_LWIP_Init+0x260>)
 800506e:	789b      	ldrb	r3, [r3, #2]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	4313      	orrs	r3, r2
 8005074:	4a7c      	ldr	r2, [pc, #496]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005076:	78d2      	ldrb	r2, [r2, #3]
 8005078:	4313      	orrs	r3, r2
 800507a:	061a      	lsls	r2, r3, #24
 800507c:	4b7a      	ldr	r3, [pc, #488]	@ (8005268 <MX_LWIP_Init+0x260>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	0619      	lsls	r1, r3, #24
 8005082:	4b79      	ldr	r3, [pc, #484]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	4319      	orrs	r1, r3
 800508a:	4b77      	ldr	r3, [pc, #476]	@ (8005268 <MX_LWIP_Init+0x260>)
 800508c:	789b      	ldrb	r3, [r3, #2]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	430b      	orrs	r3, r1
 8005092:	4975      	ldr	r1, [pc, #468]	@ (8005268 <MX_LWIP_Init+0x260>)
 8005094:	78c9      	ldrb	r1, [r1, #3]
 8005096:	430b      	orrs	r3, r1
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800509e:	431a      	orrs	r2, r3
 80050a0:	4b71      	ldr	r3, [pc, #452]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	0619      	lsls	r1, r3, #24
 80050a6:	4b70      	ldr	r3, [pc, #448]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	4319      	orrs	r1, r3
 80050ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050b0:	789b      	ldrb	r3, [r3, #2]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	430b      	orrs	r3, r1
 80050b6:	496c      	ldr	r1, [pc, #432]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050b8:	78c9      	ldrb	r1, [r1, #3]
 80050ba:	430b      	orrs	r3, r1
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80050c2:	431a      	orrs	r2, r3
 80050c4:	4b68      	ldr	r3, [pc, #416]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	0619      	lsls	r1, r3, #24
 80050ca:	4b67      	ldr	r3, [pc, #412]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	4319      	orrs	r1, r3
 80050d2:	4b65      	ldr	r3, [pc, #404]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050d4:	789b      	ldrb	r3, [r3, #2]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	430b      	orrs	r3, r1
 80050da:	4963      	ldr	r1, [pc, #396]	@ (8005268 <MX_LWIP_Init+0x260>)
 80050dc:	78c9      	ldrb	r1, [r1, #3]
 80050de:	430b      	orrs	r3, r1
 80050e0:	0e1b      	lsrs	r3, r3, #24
 80050e2:	4313      	orrs	r3, r2
 80050e4:	4a63      	ldr	r2, [pc, #396]	@ (8005274 <MX_LWIP_Init+0x26c>)
 80050e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050e8:	4b60      	ldr	r3, [pc, #384]	@ (800526c <MX_LWIP_Init+0x264>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	061a      	lsls	r2, r3, #24
 80050ee:	4b5f      	ldr	r3, [pc, #380]	@ (800526c <MX_LWIP_Init+0x264>)
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	4b5d      	ldr	r3, [pc, #372]	@ (800526c <MX_LWIP_Init+0x264>)
 80050f8:	789b      	ldrb	r3, [r3, #2]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	4313      	orrs	r3, r2
 80050fe:	4a5b      	ldr	r2, [pc, #364]	@ (800526c <MX_LWIP_Init+0x264>)
 8005100:	78d2      	ldrb	r2, [r2, #3]
 8005102:	4313      	orrs	r3, r2
 8005104:	061a      	lsls	r2, r3, #24
 8005106:	4b59      	ldr	r3, [pc, #356]	@ (800526c <MX_LWIP_Init+0x264>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	0619      	lsls	r1, r3, #24
 800510c:	4b57      	ldr	r3, [pc, #348]	@ (800526c <MX_LWIP_Init+0x264>)
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	041b      	lsls	r3, r3, #16
 8005112:	4319      	orrs	r1, r3
 8005114:	4b55      	ldr	r3, [pc, #340]	@ (800526c <MX_LWIP_Init+0x264>)
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	430b      	orrs	r3, r1
 800511c:	4953      	ldr	r1, [pc, #332]	@ (800526c <MX_LWIP_Init+0x264>)
 800511e:	78c9      	ldrb	r1, [r1, #3]
 8005120:	430b      	orrs	r3, r1
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005128:	431a      	orrs	r2, r3
 800512a:	4b50      	ldr	r3, [pc, #320]	@ (800526c <MX_LWIP_Init+0x264>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	0619      	lsls	r1, r3, #24
 8005130:	4b4e      	ldr	r3, [pc, #312]	@ (800526c <MX_LWIP_Init+0x264>)
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	4319      	orrs	r1, r3
 8005138:	4b4c      	ldr	r3, [pc, #304]	@ (800526c <MX_LWIP_Init+0x264>)
 800513a:	789b      	ldrb	r3, [r3, #2]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	430b      	orrs	r3, r1
 8005140:	494a      	ldr	r1, [pc, #296]	@ (800526c <MX_LWIP_Init+0x264>)
 8005142:	78c9      	ldrb	r1, [r1, #3]
 8005144:	430b      	orrs	r3, r1
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800514c:	431a      	orrs	r2, r3
 800514e:	4b47      	ldr	r3, [pc, #284]	@ (800526c <MX_LWIP_Init+0x264>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	0619      	lsls	r1, r3, #24
 8005154:	4b45      	ldr	r3, [pc, #276]	@ (800526c <MX_LWIP_Init+0x264>)
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	4319      	orrs	r1, r3
 800515c:	4b43      	ldr	r3, [pc, #268]	@ (800526c <MX_LWIP_Init+0x264>)
 800515e:	789b      	ldrb	r3, [r3, #2]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	430b      	orrs	r3, r1
 8005164:	4941      	ldr	r1, [pc, #260]	@ (800526c <MX_LWIP_Init+0x264>)
 8005166:	78c9      	ldrb	r1, [r1, #3]
 8005168:	430b      	orrs	r3, r1
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	4313      	orrs	r3, r2
 800516e:	4a42      	ldr	r2, [pc, #264]	@ (8005278 <MX_LWIP_Init+0x270>)
 8005170:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005172:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	061a      	lsls	r2, r3, #24
 8005178:	4b3d      	ldr	r3, [pc, #244]	@ (8005270 <MX_LWIP_Init+0x268>)
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	041b      	lsls	r3, r3, #16
 800517e:	431a      	orrs	r2, r3
 8005180:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005182:	789b      	ldrb	r3, [r3, #2]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	4313      	orrs	r3, r2
 8005188:	4a39      	ldr	r2, [pc, #228]	@ (8005270 <MX_LWIP_Init+0x268>)
 800518a:	78d2      	ldrb	r2, [r2, #3]
 800518c:	4313      	orrs	r3, r2
 800518e:	061a      	lsls	r2, r3, #24
 8005190:	4b37      	ldr	r3, [pc, #220]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	0619      	lsls	r1, r3, #24
 8005196:	4b36      	ldr	r3, [pc, #216]	@ (8005270 <MX_LWIP_Init+0x268>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	4319      	orrs	r1, r3
 800519e:	4b34      	ldr	r3, [pc, #208]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051a0:	789b      	ldrb	r3, [r3, #2]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	430b      	orrs	r3, r1
 80051a6:	4932      	ldr	r1, [pc, #200]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051a8:	78c9      	ldrb	r1, [r1, #3]
 80051aa:	430b      	orrs	r3, r1
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051b2:	431a      	orrs	r2, r3
 80051b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	0619      	lsls	r1, r3, #24
 80051ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	4319      	orrs	r1, r3
 80051c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051c4:	789b      	ldrb	r3, [r3, #2]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	430b      	orrs	r3, r1
 80051ca:	4929      	ldr	r1, [pc, #164]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051cc:	78c9      	ldrb	r1, [r1, #3]
 80051ce:	430b      	orrs	r3, r1
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051d6:	431a      	orrs	r2, r3
 80051d8:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	0619      	lsls	r1, r3, #24
 80051de:	4b24      	ldr	r3, [pc, #144]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	4319      	orrs	r1, r3
 80051e6:	4b22      	ldr	r3, [pc, #136]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	430b      	orrs	r3, r1
 80051ee:	4920      	ldr	r1, [pc, #128]	@ (8005270 <MX_LWIP_Init+0x268>)
 80051f0:	78c9      	ldrb	r1, [r1, #3]
 80051f2:	430b      	orrs	r3, r1
 80051f4:	0e1b      	lsrs	r3, r3, #24
 80051f6:	4313      	orrs	r3, r2
 80051f8:	4a20      	ldr	r2, [pc, #128]	@ (800527c <MX_LWIP_Init+0x274>)
 80051fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80051fc:	4b20      	ldr	r3, [pc, #128]	@ (8005280 <MX_LWIP_Init+0x278>)
 80051fe:	9302      	str	r3, [sp, #8]
 8005200:	4b20      	ldr	r3, [pc, #128]	@ (8005284 <MX_LWIP_Init+0x27c>)
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	4b1c      	ldr	r3, [pc, #112]	@ (800527c <MX_LWIP_Init+0x274>)
 800520a:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <MX_LWIP_Init+0x270>)
 800520c:	4919      	ldr	r1, [pc, #100]	@ (8005274 <MX_LWIP_Init+0x26c>)
 800520e:	481e      	ldr	r0, [pc, #120]	@ (8005288 <MX_LWIP_Init+0x280>)
 8005210:	f007 fd68 	bl	800cce4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005214:	481c      	ldr	r0, [pc, #112]	@ (8005288 <MX_LWIP_Init+0x280>)
 8005216:	f007 ff17 	bl	800d048 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800521a:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <MX_LWIP_Init+0x280>)
 800521c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005220:	089b      	lsrs	r3, r3, #2
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800522c:	4816      	ldr	r0, [pc, #88]	@ (8005288 <MX_LWIP_Init+0x280>)
 800522e:	f007 ff1b 	bl	800d068 <netif_set_up>
 8005232:	e002      	b.n	800523a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005234:	4814      	ldr	r0, [pc, #80]	@ (8005288 <MX_LWIP_Init+0x280>)
 8005236:	f007 ff83 	bl	800d140 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800523a:	4914      	ldr	r1, [pc, #80]	@ (800528c <MX_LWIP_Init+0x284>)
 800523c:	4812      	ldr	r0, [pc, #72]	@ (8005288 <MX_LWIP_Init+0x280>)
 800523e:	f008 f815 	bl	800d26c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005242:	4b13      	ldr	r3, [pc, #76]	@ (8005290 <MX_LWIP_Init+0x288>)
 8005244:	1d3c      	adds	r4, r7, #4
 8005246:	461d      	mov	r5, r3
 8005248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800524a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800524c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	490c      	ldr	r1, [pc, #48]	@ (8005288 <MX_LWIP_Init+0x280>)
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd47 	bl	8005cec <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800525e:	bf00      	nop
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bdb0      	pop	{r4, r5, r7, pc}
 8005266:	bf00      	nop
 8005268:	200005b0 	.word	0x200005b0
 800526c:	200005b4 	.word	0x200005b4
 8005270:	200005b8 	.word	0x200005b8
 8005274:	200005a4 	.word	0x200005a4
 8005278:	200005a8 	.word	0x200005a8
 800527c:	200005ac 	.word	0x200005ac
 8005280:	0800b3c1 	.word	0x0800b3c1
 8005284:	0800578d 	.word	0x0800578d
 8005288:	20000570 	.word	0x20000570
 800528c:	08005295 	.word	0x08005295
 8005290:	08018c6c 	.word	0x08018c6c

08005294 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80052ba:	2320      	movs	r3, #32
 80052bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80052be:	f3bf 8f4f 	dsb	sy
}
 80052c2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80052c4:	e00b      	b.n	80052de <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80052c6:	4a0d      	ldr	r2, [pc, #52]	@ (80052fc <SCB_InvalidateDCache_by_Addr+0x54>)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dcf0      	bgt.n	80052c6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80052e4:	f3bf 8f4f 	dsb	sy
}
 80052e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052ea:	f3bf 8f6f 	isb	sy
}
 80052ee:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005308:	4b04      	ldr	r3, [pc, #16]	@ (800531c <HAL_ETH_RxCpltCallback+0x1c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fe69 	bl	8005fe4 <osSemaphoreRelease>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20004f48 	.word	0x20004f48

08005320 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <HAL_ETH_TxCpltCallback+0x1c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fe59 	bl	8005fe4 <osSemaphoreRelease>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20004f4c 	.word	0x20004f4c

08005340 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fc ffef 	bl	800232c <HAL_ETH_GetDMAError>
 800534e:	4603      	mov	r3, r0
 8005350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005354:	2b80      	cmp	r3, #128	@ 0x80
 8005356:	d104      	bne.n	8005362 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005358:	4b04      	ldr	r3, [pc, #16]	@ (800536c <HAL_ETH_ErrorCallback+0x2c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fe41 	bl	8005fe4 <osSemaphoreRelease>
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20004f48 	.word	0x20004f48

08005370 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b0a8      	sub	sp, #160	@ 0xa0
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800538a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800538e:	2264      	movs	r2, #100	@ 0x64
 8005390:	2100      	movs	r1, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f012 fb1f 	bl	80179d6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005398:	4b85      	ldr	r3, [pc, #532]	@ (80055b0 <low_level_init+0x240>)
 800539a:	4a86      	ldr	r2, [pc, #536]	@ (80055b4 <low_level_init+0x244>)
 800539c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800539e:	2300      	movs	r3, #0
 80053a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 80053aa:	23e1      	movs	r3, #225	@ 0xe1
 80053ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 80053c2:	4a7b      	ldr	r2, [pc, #492]	@ (80055b0 <low_level_init+0x240>)
 80053c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053c8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <low_level_init+0x240>)
 80053cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80053d0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80053d2:	4b77      	ldr	r3, [pc, #476]	@ (80055b0 <low_level_init+0x240>)
 80053d4:	4a78      	ldr	r2, [pc, #480]	@ (80055b8 <low_level_init+0x248>)
 80053d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80053d8:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <low_level_init+0x240>)
 80053da:	4a78      	ldr	r2, [pc, #480]	@ (80055bc <low_level_init+0x24c>)
 80053dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80053de:	4b74      	ldr	r3, [pc, #464]	@ (80055b0 <low_level_init+0x240>)
 80053e0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80053e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80053e6:	4872      	ldr	r0, [pc, #456]	@ (80055b0 <low_level_init+0x240>)
 80053e8:	f7fc f902 	bl	80015f0 <HAL_ETH_Init>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80053f2:	2238      	movs	r2, #56	@ 0x38
 80053f4:	2100      	movs	r1, #0
 80053f6:	4872      	ldr	r0, [pc, #456]	@ (80055c0 <low_level_init+0x250>)
 80053f8:	f012 faed 	bl	80179d6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80053fc:	4b70      	ldr	r3, [pc, #448]	@ (80055c0 <low_level_init+0x250>)
 80053fe:	2221      	movs	r2, #33	@ 0x21
 8005400:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005402:	4b6f      	ldr	r3, [pc, #444]	@ (80055c0 <low_level_init+0x250>)
 8005404:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005408:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <low_level_init+0x250>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005410:	486c      	ldr	r0, [pc, #432]	@ (80055c4 <low_level_init+0x254>)
 8005412:	f007 fb21 	bl	800ca58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2206      	movs	r2, #6
 800541a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800541e:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <low_level_init+0x240>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800542a:	4b61      	ldr	r3, [pc, #388]	@ (80055b0 <low_level_init+0x240>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	785a      	ldrb	r2, [r3, #1]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005436:	4b5e      	ldr	r3, [pc, #376]	@ (80055b0 <low_level_init+0x240>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	789a      	ldrb	r2, [r3, #2]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005442:	4b5b      	ldr	r3, [pc, #364]	@ (80055b0 <low_level_init+0x240>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	78da      	ldrb	r2, [r3, #3]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800544e:	4b58      	ldr	r3, [pc, #352]	@ (80055b0 <low_level_init+0x240>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	791a      	ldrb	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800545a:	4b55      	ldr	r3, [pc, #340]	@ (80055b0 <low_level_init+0x240>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	795a      	ldrb	r2, [r3, #5]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800546c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005474:	f043 030a 	orr.w	r3, r3, #10
 8005478:	b2da      	uxtb	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005480:	2203      	movs	r2, #3
 8005482:	2100      	movs	r1, #0
 8005484:	2001      	movs	r0, #1
 8005486:	f001 f8a4 	bl	80065d2 <xQueueGenericCreate>
 800548a:	4603      	mov	r3, r0
 800548c:	4a4e      	ldr	r2, [pc, #312]	@ (80055c8 <low_level_init+0x258>)
 800548e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005490:	2203      	movs	r2, #3
 8005492:	2100      	movs	r1, #0
 8005494:	2001      	movs	r0, #1
 8005496:	f001 f89c 	bl	80065d2 <xQueueGenericCreate>
 800549a:	4603      	mov	r3, r0
 800549c:	4a4b      	ldr	r2, [pc, #300]	@ (80055cc <low_level_init+0x25c>)
 800549e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80054a0:	4b4b      	ldr	r3, [pc, #300]	@ (80055d0 <low_level_init+0x260>)
 80054a2:	f107 0408 	add.w	r4, r7, #8
 80054a6:	461d      	mov	r5, r3
 80054a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fc16 	bl	8005cec <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80054c0:	4944      	ldr	r1, [pc, #272]	@ (80055d4 <low_level_init+0x264>)
 80054c2:	4845      	ldr	r0, [pc, #276]	@ (80055d8 <low_level_init+0x268>)
 80054c4:	f7fb fdff 	bl	80010c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80054c8:	4843      	ldr	r0, [pc, #268]	@ (80055d8 <low_level_init+0x268>)
 80054ca:	f7fb fe2e 	bl	800112a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80054ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d165      	bne.n	80055a2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054d6:	4840      	ldr	r0, [pc, #256]	@ (80055d8 <low_level_init+0x268>)
 80054d8:	f7fb fecf 	bl	800127a <LAN8742_GetLinkState>
 80054dc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80054e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	dc06      	bgt.n	80054f6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f007 fe8f 	bl	800d20c <netif_set_link_down>
      netif_set_down(netif);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f007 fe26 	bl	800d140 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80054f4:	e057      	b.n	80055a6 <low_level_init+0x236>
      switch (PHYLinkState)
 80054f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054fa:	3b02      	subs	r3, #2
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d82b      	bhi.n	8005558 <low_level_init+0x1e8>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <low_level_init+0x198>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	0800552b 	.word	0x0800552b
 8005510:	0800553b 	.word	0x0800553b
 8005514:	0800554b 	.word	0x0800554b
        duplex = ETH_FULLDUPLEX_MODE;
 8005518:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800551c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 8005520:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005528:	e01f      	b.n	800556a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 8005530:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005538:	e017      	b.n	800556a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800553a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800553e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 8005542:	2300      	movs	r3, #0
 8005544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005548:	e00f      	b.n	800556a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005556:	e008      	b.n	800556a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800555c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 8005560:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 8005568:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800556a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800556e:	4619      	mov	r1, r3
 8005570:	480f      	ldr	r0, [pc, #60]	@ (80055b0 <low_level_init+0x240>)
 8005572:	f7fc fd81 	bl	8002078 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800557a:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 800557c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005580:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005582:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005586:	4619      	mov	r1, r3
 8005588:	4809      	ldr	r0, [pc, #36]	@ (80055b0 <low_level_init+0x240>)
 800558a:	f7fc fe5f 	bl	800224c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800558e:	4808      	ldr	r0, [pc, #32]	@ (80055b0 <low_level_init+0x240>)
 8005590:	f7fc f90a 	bl	80017a8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f007 fd67 	bl	800d068 <netif_set_up>
    netif_set_link_up(netif);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f007 fe02 	bl	800d1a4 <netif_set_link_up>
}
 80055a0:	e001      	b.n	80055a6 <low_level_init+0x236>
    Error_Handler();
 80055a2:	f7fb fb23 	bl	8000bec <Error_Handler>
}
 80055a6:	bf00      	nop
 80055a8:	37a0      	adds	r7, #160	@ 0xa0
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bdb0      	pop	{r4, r5, r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20004f50 	.word	0x20004f50
 80055b4:	40028000 	.word	0x40028000
 80055b8:	2000012c 	.word	0x2000012c
 80055bc:	2000008c 	.word	0x2000008c
 80055c0:	20005000 	.word	0x20005000
 80055c4:	0801c410 	.word	0x0801c410
 80055c8:	20004f48 	.word	0x20004f48
 80055cc:	20004f4c 	.word	0x20004f4c
 80055d0:	08018c90 	.word	0x08018c90
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	20005038 	.word	0x20005038

080055dc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b092      	sub	sp, #72	@ 0x48
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	2230      	movs	r2, #48	@ 0x30
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f012 f9ea 	bl	80179d6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	2230      	movs	r2, #48	@ 0x30
 8005608:	2100      	movs	r1, #0
 800560a:	4618      	mov	r0, r3
 800560c:	f012 f9e3 	bl	80179d6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	643b      	str	r3, [r7, #64]	@ 0x40
 8005614:	e045      	b.n	80056a2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005618:	2b03      	cmp	r3, #3
 800561a:	d902      	bls.n	8005622 <low_level_output+0x46>
      return ERR_IF;
 800561c:	f06f 030b 	mvn.w	r3, #11
 8005620:	e065      	b.n	80056ee <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005628:	4613      	mov	r3, r2
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	3348      	adds	r3, #72	@ 0x48
 8005632:	443b      	add	r3, r7
 8005634:	3b3c      	subs	r3, #60	@ 0x3c
 8005636:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800563a:	895b      	ldrh	r3, [r3, #10]
 800563c:	4619      	mov	r1, r3
 800563e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	3348      	adds	r3, #72	@ 0x48
 800564a:	443b      	add	r3, r7
 800564c:	3b38      	subs	r3, #56	@ 0x38
 800564e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005652:	2b00      	cmp	r3, #0
 8005654:	d011      	beq.n	800567a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	f107 000c 	add.w	r0, r7, #12
 800565e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005660:	460b      	mov	r3, r1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	440b      	add	r3, r1
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	18c1      	adds	r1, r0, r3
 800566a:	4613      	mov	r3, r2
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	3348      	adds	r3, #72	@ 0x48
 8005674:	443b      	add	r3, r7
 8005676:	3b34      	subs	r3, #52	@ 0x34
 8005678:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800567a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	3348      	adds	r3, #72	@ 0x48
 800568e:	443b      	add	r3, r7
 8005690:	3b34      	subs	r3, #52	@ 0x34
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005698:	3301      	adds	r3, #1
 800569a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800569c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1b6      	bne.n	8005616 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	891b      	ldrh	r3, [r3, #8]
 80056ac:	461a      	mov	r2, r3
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <low_level_output+0x11c>)
 80056b0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80056b2:	4a11      	ldr	r2, [pc, #68]	@ (80056f8 <low_level_output+0x11c>)
 80056b4:	f107 030c 	add.w	r3, r7, #12
 80056b8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80056ba:	4a0f      	ldr	r2, [pc, #60]	@ (80056f8 <low_level_output+0x11c>)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80056c0:	6838      	ldr	r0, [r7, #0]
 80056c2:	f008 fa27 	bl	800db14 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80056c6:	490c      	ldr	r1, [pc, #48]	@ (80056f8 <low_level_output+0x11c>)
 80056c8:	480c      	ldr	r0, [pc, #48]	@ (80056fc <low_level_output+0x120>)
 80056ca:	f7fc f97b 	bl	80019c4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80056ce:	bf00      	nop
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <low_level_output+0x124>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f04f 31ff 	mov.w	r1, #4294967295
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fc35 	bl	8005f48 <osSemaphoreWait>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f5      	bne.n	80056d0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80056e4:	4805      	ldr	r0, [pc, #20]	@ (80056fc <low_level_output+0x120>)
 80056e6:	f7fc fb01 	bl	8001cec <HAL_ETH_ReleaseTxPacket>

  return errval;
 80056ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3748      	adds	r7, #72	@ 0x48
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20005000 	.word	0x20005000
 80056fc:	20004f50 	.word	0x20004f50
 8005700:	20004f4c 	.word	0x20004f4c

08005704 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005710:	4b07      	ldr	r3, [pc, #28]	@ (8005730 <low_level_input+0x2c>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d105      	bne.n	8005724 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005718:	f107 030c 	add.w	r3, r7, #12
 800571c:	4619      	mov	r1, r3
 800571e:	4805      	ldr	r0, [pc, #20]	@ (8005734 <low_level_input+0x30>)
 8005720:	f7fc f9ac 	bl	8001a7c <HAL_ETH_ReadData>
  }

  return p;
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20004f44 	.word	0x20004f44
 8005734:	20004f50 	.word	0x20004f50

08005738 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005748:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <ethernetif_input+0x50>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f04f 31ff 	mov.w	r1, #4294967295
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fbf9 	bl	8005f48 <osSemaphoreWait>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800575c:	68b8      	ldr	r0, [r7, #8]
 800575e:	f7ff ffd1 	bl	8005704 <low_level_input>
 8005762:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	68b9      	ldr	r1, [r7, #8]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	4798      	blx	r3
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f008 f924 	bl	800d9c8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ea      	bne.n	800575c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005786:	e7df      	b.n	8005748 <ethernetif_input+0x10>
 8005788:	20004f48 	.word	0x20004f48

0800578c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <ethernetif_init+0x1c>
 800579a:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <ethernetif_init+0x48>)
 800579c:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80057a0:	490d      	ldr	r1, [pc, #52]	@ (80057d8 <ethernetif_init+0x4c>)
 80057a2:	480e      	ldr	r0, [pc, #56]	@ (80057dc <ethernetif_init+0x50>)
 80057a4:	f012 f878 	bl	8017898 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2273      	movs	r2, #115	@ 0x73
 80057ac:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2274      	movs	r2, #116	@ 0x74
 80057b4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a09      	ldr	r2, [pc, #36]	@ (80057e0 <ethernetif_init+0x54>)
 80057bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <ethernetif_init+0x58>)
 80057c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff fdd3 	bl	8005370 <low_level_init>

  return ERR_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08018cac 	.word	0x08018cac
 80057d8:	08018cc8 	.word	0x08018cc8
 80057dc:	08018cd8 	.word	0x08018cd8
 80057e0:	080155e1 	.word	0x080155e1
 80057e4:	080055dd 	.word	0x080055dd

080057e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	4809      	ldr	r0, [pc, #36]	@ (800581c <pbuf_free_custom+0x34>)
 80057f8:	f007 fa1e 	bl	800cc38 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80057fc:	4b08      	ldr	r3, [pc, #32]	@ (8005820 <pbuf_free_custom+0x38>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d107      	bne.n	8005814 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <pbuf_free_custom+0x38>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800580a:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <pbuf_free_custom+0x3c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fbe8 	bl	8005fe4 <osSemaphoreRelease>
  }
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	0801c410 	.word	0x0801c410
 8005820:	20004f44 	.word	0x20004f44
 8005824:	20004f48 	.word	0x20004f48

08005828 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800582c:	f7fb fdce 	bl	80013cc <HAL_GetTick>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	@ 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a52      	ldr	r2, [pc, #328]	@ (80059a0 <HAL_ETH_MspInit+0x168>)
 8005856:	4293      	cmp	r3, r2
 8005858:	f040 809e 	bne.w	8005998 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800585c:	4b51      	ldr	r3, [pc, #324]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005860:	4a50      	ldr	r2, [pc, #320]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 8005862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005866:	6313      	str	r3, [r2, #48]	@ 0x30
 8005868:	4b4e      	ldr	r3, [pc, #312]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	4b4b      	ldr	r3, [pc, #300]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	4a4a      	ldr	r2, [pc, #296]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 800587a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800587e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005880:	4b48      	ldr	r3, [pc, #288]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4b45      	ldr	r3, [pc, #276]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	4a44      	ldr	r2, [pc, #272]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 8005892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005896:	6313      	str	r3, [r2, #48]	@ 0x30
 8005898:	4b42      	ldr	r3, [pc, #264]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a4:	4b3f      	ldr	r3, [pc, #252]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	4a3e      	ldr	r2, [pc, #248]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b0:	4b3c      	ldr	r3, [pc, #240]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058bc:	4b39      	ldr	r3, [pc, #228]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	4a38      	ldr	r2, [pc, #224]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80058c8:	4b36      	ldr	r3, [pc, #216]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d4:	4b33      	ldr	r3, [pc, #204]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058da:	f043 0302 	orr.w	r3, r3, #2
 80058de:	6313      	str	r3, [r2, #48]	@ 0x30
 80058e0:	4b30      	ldr	r3, [pc, #192]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80058ec:	4b2d      	ldr	r3, [pc, #180]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	4a2c      	ldr	r2, [pc, #176]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80058f8:	4b2a      	ldr	r3, [pc, #168]	@ (80059a4 <HAL_ETH_MspInit+0x16c>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005904:	2332      	movs	r3, #50	@ 0x32
 8005906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005908:	2302      	movs	r3, #2
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590c:	2300      	movs	r3, #0
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005910:	2303      	movs	r3, #3
 8005912:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005914:	230b      	movs	r3, #11
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800591c:	4619      	mov	r1, r3
 800591e:	4822      	ldr	r0, [pc, #136]	@ (80059a8 <HAL_ETH_MspInit+0x170>)
 8005920:	f7fd f914 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005924:	2386      	movs	r3, #134	@ 0x86
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005930:	2303      	movs	r3, #3
 8005932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005934:	230b      	movs	r3, #11
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800593c:	4619      	mov	r1, r3
 800593e:	481b      	ldr	r0, [pc, #108]	@ (80059ac <HAL_ETH_MspInit+0x174>)
 8005940:	f7fd f904 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594a:	2302      	movs	r3, #2
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594e:	2300      	movs	r3, #0
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005952:	2303      	movs	r3, #3
 8005954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005956:	230b      	movs	r3, #11
 8005958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800595a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595e:	4619      	mov	r1, r3
 8005960:	4813      	ldr	r0, [pc, #76]	@ (80059b0 <HAL_ETH_MspInit+0x178>)
 8005962:	f7fd f8f3 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005966:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596c:	2302      	movs	r3, #2
 800596e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005978:	230b      	movs	r3, #11
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800597c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005980:	4619      	mov	r1, r3
 8005982:	480c      	ldr	r0, [pc, #48]	@ (80059b4 <HAL_ETH_MspInit+0x17c>)
 8005984:	f7fd f8e2 	bl	8002b4c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005988:	2200      	movs	r2, #0
 800598a:	2105      	movs	r1, #5
 800598c:	203d      	movs	r0, #61	@ 0x3d
 800598e:	f7fb fe05 	bl	800159c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005992:	203d      	movs	r0, #61	@ 0x3d
 8005994:	f7fb fe1e 	bl	80015d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005998:	bf00      	nop
 800599a:	3738      	adds	r7, #56	@ 0x38
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40028000 	.word	0x40028000
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40020800 	.word	0x40020800
 80059ac:	40020000 	.word	0x40020000
 80059b0:	40020400 	.word	0x40020400
 80059b4:	40021800 	.word	0x40021800

080059b8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80059bc:	4802      	ldr	r0, [pc, #8]	@ (80059c8 <ETH_PHY_IO_Init+0x10>)
 80059be:	f7fc fc5f 	bl	8002280 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20004f50 	.word	0x20004f50

080059cc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return 0;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	4807      	ldr	r0, [pc, #28]	@ (8005a0c <ETH_PHY_IO_ReadReg+0x30>)
 80059f0:	f7fc faae 	bl	8001f50 <HAL_ETH_ReadPHYRegister>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	e000      	b.n	8005a02 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20004f50 	.word	0x20004f50

08005a10 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	4807      	ldr	r0, [pc, #28]	@ (8005a40 <ETH_PHY_IO_WriteReg+0x30>)
 8005a24:	f7fc fadf 	bl	8001fe6 <HAL_ETH_WritePHYRegister>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e000      	b.n	8005a36 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20004f50 	.word	0x20004f50

08005a44 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a48:	f7fb fcc0 	bl	80013cc <HAL_GetTick>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b0a0      	sub	sp, #128	@ 0x80
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005a5c:	f107 0308 	add.w	r3, r7, #8
 8005a60:	2264      	movs	r2, #100	@ 0x64
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f011 ffb6 	bl	80179d6 <memset>
  int32_t PHYLinkState = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a72:	2300      	movs	r3, #0
 8005a74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a76:	2300      	movs	r3, #0
 8005a78:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005a7e:	483a      	ldr	r0, [pc, #232]	@ (8005b68 <ethernet_link_thread+0x114>)
 8005a80:	f7fb fbfb 	bl	800127a <LAN8742_GetLinkState>
 8005a84:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <ethernet_link_thread+0x5e>
 8005a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	dc09      	bgt.n	8005ab2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005a9e:	4833      	ldr	r0, [pc, #204]	@ (8005b6c <ethernet_link_thread+0x118>)
 8005aa0:	f7fb ff10 	bl	80018c4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005aa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005aa6:	f007 fb4b 	bl	800d140 <netif_set_down>
    netif_set_link_down(netif);
 8005aaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005aac:	f007 fbae 	bl	800d20c <netif_set_link_down>
 8005ab0:	e055      	b.n	8005b5e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d14e      	bne.n	8005b5e <ethernet_link_thread+0x10a>
 8005ac0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	dd4b      	ble.n	8005b5e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005ac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac8:	3b02      	subs	r3, #2
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d82a      	bhi.n	8005b24 <ethernet_link_thread+0xd0>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <ethernet_link_thread+0x80>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005af7 	.word	0x08005af7
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b17 	.word	0x08005b17
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005ae4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005ae8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005aea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005aee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005af4:	e017      	b.n	8005b26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005afa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005afe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b00:	2301      	movs	r3, #1
 8005b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b04:	e00f      	b.n	8005b26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005b06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b0a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b14:	e007      	b.n	8005b26 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b22:	e000      	b.n	8005b26 <ethernet_link_thread+0xd2>
    default:
      break;
 8005b24:	bf00      	nop
    }

    if(linkchanged)
 8005b26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d018      	beq.n	8005b5e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005b2c:	f107 0308 	add.w	r3, r7, #8
 8005b30:	4619      	mov	r1, r3
 8005b32:	480e      	ldr	r0, [pc, #56]	@ (8005b6c <ethernet_link_thread+0x118>)
 8005b34:	f7fc faa0 	bl	8002078 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b3a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b3e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	4619      	mov	r1, r3
 8005b46:	4809      	ldr	r0, [pc, #36]	@ (8005b6c <ethernet_link_thread+0x118>)
 8005b48:	f7fc fb80 	bl	800224c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005b4c:	4807      	ldr	r0, [pc, #28]	@ (8005b6c <ethernet_link_thread+0x118>)
 8005b4e:	f7fb fdcb 	bl	80016e8 <HAL_ETH_Start>
      netif_set_up(netif);
 8005b52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b54:	f007 fa88 	bl	800d068 <netif_set_up>
      netif_set_link_up(netif);
 8005b58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b5a:	f007 fb23 	bl	800d1a4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005b5e:	2064      	movs	r0, #100	@ 0x64
 8005b60:	f000 f910 	bl	8005d84 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b64:	e78b      	b.n	8005a7e <ethernet_link_thread+0x2a>
 8005b66:	bf00      	nop
 8005b68:	20005038 	.word	0x20005038
 8005b6c:	20004f50 	.word	0x20004f50

08005b70 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af02      	add	r7, sp, #8
 8005b76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005b78:	4812      	ldr	r0, [pc, #72]	@ (8005bc4 <HAL_ETH_RxAllocateCallback+0x54>)
 8005b7a:	f006 ffe9 	bl	800cb50 <memp_malloc_pool>
 8005b7e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d014      	beq.n	8005bb0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f103 0220 	add.w	r2, r3, #32
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005b94:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005b9e:	9201      	str	r2, [sp, #4]
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2241      	movs	r2, #65	@ 0x41
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f007 fd53 	bl	800d654 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005bae:	e005      	b.n	8005bbc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <HAL_ETH_RxAllocateCallback+0x5c>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	0801c410 	.word	0x0801c410
 8005bc8:	080057e9 	.word	0x080057e9
 8005bcc:	20004f44 	.word	0x20004f44

08005bd0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3b20      	subs	r3, #32
 8005bee:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	887a      	ldrh	r2, [r7, #2]
 8005c00:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e003      	b.n	8005c1a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e009      	b.n	8005c3c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	891a      	ldrh	r2, [r3, #8]
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	4413      	add	r3, r2
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f2      	bne.n	8005c28 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005c42:	887b      	ldrh	r3, [r7, #2]
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fb2e 	bl	80052a8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005c4c:	bf00      	nop
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f007 feb3 	bl	800d9c8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	4603      	mov	r3, r0
 8005c72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7c:	2b84      	cmp	r3, #132	@ 0x84
 8005c7e:	d005      	beq.n	8005c8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	3303      	adds	r3, #3
 8005c8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca0:	f3ef 8305 	mrs	r3, IPSR
 8005ca4:	607b      	str	r3, [r7, #4]
  return(result);
 8005ca6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cc2:	f001 fdad 	bl	8007820 <vTaskStartScheduler>
  
  return osOK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005cd0:	f7ff ffe3 	bl	8005c9a <inHandlerMode>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005cda:	f001 fecd 	bl	8007a78 <xTaskGetTickCountFromISR>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	e002      	b.n	8005ce8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005ce2:	f001 feb9 	bl	8007a58 <xTaskGetTickCount>
 8005ce6:	4603      	mov	r3, r0
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}

08005cec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cee:	b089      	sub	sp, #36	@ 0x24
 8005cf0:	af04      	add	r7, sp, #16
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d020      	beq.n	8005d40 <osThreadCreate+0x54>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01c      	beq.n	8005d40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685c      	ldr	r4, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691e      	ldr	r6, [r3, #16]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ffa6 	bl	8005c6a <makeFreeRtosPriority>
 8005d1e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	9100      	str	r1, [sp, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4632      	mov	r2, r6
 8005d32:	4629      	mov	r1, r5
 8005d34:	4620      	mov	r0, r4
 8005d36:	f001 fb83 	bl	8007440 <xTaskCreateStatic>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e01c      	b.n	8005d7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685c      	ldr	r4, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d4c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff ff88 	bl	8005c6a <makeFreeRtosPriority>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	9200      	str	r2, [sp, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4632      	mov	r2, r6
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f001 fbce 	bl	800750c <xTaskCreate>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e000      	b.n	8005d7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d84 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <osDelay+0x16>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	e000      	b.n	8005d9c <osDelay+0x18>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f001 fd07 	bl	80077b0 <vTaskDelay>
  
  return osOK;
 8005da2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	f000 fc99 	bl	80066fa <xQueueCreateMutexStatic>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	e003      	b.n	8005dd4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f000 fc7c 	bl	80066ca <xQueueCreateMutex>
 8005dd2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <osMutexWait+0x18>
    return osErrorParameter;
 8005df0:	2380      	movs	r3, #128	@ 0x80
 8005df2:	e03a      	b.n	8005e6a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d103      	bne.n	8005e08 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e009      	b.n	8005e1c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d006      	beq.n	8005e1c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <osMutexWait+0x40>
      ticks = 1;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005e1c:	f7ff ff3d 	bl	8005c9a <inHandlerMode>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d017      	beq.n	8005e56 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e26:	f107 0308 	add.w	r3, r7, #8
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 f8c4 	bl	8006fbc <xQueueReceiveFromISR>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d001      	beq.n	8005e3e <osMutexWait+0x62>
      return osErrorOS;
 8005e3a:	23ff      	movs	r3, #255	@ 0xff
 8005e3c:	e015      	b.n	8005e6a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d011      	beq.n	8005e68 <osMutexWait+0x8c>
 8005e44:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <osMutexWait+0x98>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	e008      	b.n	8005e68 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 ff97 	bl	8006d8c <xQueueSemaphoreTake>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d001      	beq.n	8005e68 <osMutexWait+0x8c>
    return osErrorOS;
 8005e64:	23ff      	movs	r3, #255	@ 0xff
 8005e66:	e000      	b.n	8005e6a <osMutexWait+0x8e>
  }
  
  return osOK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005e88:	f7ff ff07 	bl	8005c9a <inHandlerMode>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fdf6 	bl	8006a8a <xQueueGiveFromISR>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d001      	beq.n	8005ea8 <osMutexRelease+0x30>
      return osErrorOS;
 8005ea4:	23ff      	movs	r3, #255	@ 0xff
 8005ea6:	e017      	b.n	8005ed8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d013      	beq.n	8005ed6 <osMutexRelease+0x5e>
 8005eae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee0 <osMutexRelease+0x68>)
 8005eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	e00a      	b.n	8005ed6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fc32 	bl	8006730 <xQueueGenericSend>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d001      	beq.n	8005ed6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005ed2:	23ff      	movs	r3, #255	@ 0xff
 8005ed4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d10a      	bne.n	8005f12 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2203      	movs	r2, #3
 8005f02:	9200      	str	r2, [sp, #0]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2100      	movs	r1, #0
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f000 fadb 	bl	80064c4 <xQueueGenericCreateStatic>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	e016      	b.n	8005f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e014      	b.n	8005f40 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d110      	bne.n	8005f3e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	2100      	movs	r1, #0
 8005f20:	2001      	movs	r0, #1
 8005f22:	f000 fb56 	bl	80065d2 <xQueueGenericCreate>
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <osSemaphoreCreate+0x56>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fbfb 	bl	8006730 <xQueueGenericSend>
      return sema;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	e000      	b.n	8005f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005f3e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	e03a      	b.n	8005fd6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d103      	bne.n	8005f74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e009      	b.n	8005f88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d006      	beq.n	8005f88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <osSemaphoreWait+0x40>
      ticks = 1;
 8005f84:	2301      	movs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f88:	f7ff fe87 	bl	8005c9a <inHandlerMode>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005f92:	f107 0308 	add.w	r3, r7, #8
 8005f96:	461a      	mov	r2, r3
 8005f98:	2100      	movs	r1, #0
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 f80e 	bl	8006fbc <xQueueReceiveFromISR>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d001      	beq.n	8005faa <osSemaphoreWait+0x62>
      return osErrorOS;
 8005fa6:	23ff      	movs	r3, #255	@ 0xff
 8005fa8:	e015      	b.n	8005fd6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d011      	beq.n	8005fd4 <osSemaphoreWait+0x8c>
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <osSemaphoreWait+0x98>)
 8005fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	e008      	b.n	8005fd4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fee1 	bl	8006d8c <xQueueSemaphoreTake>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005fd0:	23ff      	movs	r3, #255	@ 0xff
 8005fd2:	e000      	b.n	8005fd6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005ff4:	f7ff fe51 	bl	8005c9a <inHandlerMode>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fd40 	bl	8006a8a <xQueueGiveFromISR>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d001      	beq.n	8006014 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006010:	23ff      	movs	r3, #255	@ 0xff
 8006012:	e017      	b.n	8006044 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d013      	beq.n	8006042 <osSemaphoreRelease+0x5e>
 800601a:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <osSemaphoreRelease+0x68>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	e00a      	b.n	8006042 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800602c:	2300      	movs	r3, #0
 800602e:	2200      	movs	r2, #0
 8006030:	2100      	movs	r1, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb7c 	bl	8006730 <xQueueGenericSend>
 8006038:	4603      	mov	r3, r0
 800603a:	2b01      	cmp	r3, #1
 800603c:	d001      	beq.n	8006042 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800603e:	23ff      	movs	r3, #255	@ 0xff
 8006040:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	e000ed04 	.word	0xe000ed04

08006050 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006058:	f7ff fe1f 	bl	8005c9a <inHandlerMode>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8006062:	2382      	movs	r3, #130	@ 0x82
 8006064:	e003      	b.n	800606e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f872 	bl	8007150 <vQueueDelete>

  return osOK; 
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006076:	b590      	push	{r4, r7, lr}
 8006078:	b085      	sub	sp, #20
 800607a:	af02      	add	r7, sp, #8
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d011      	beq.n	80060ac <osMessageCreate+0x36>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2400      	movs	r4, #0
 80060a2:	9400      	str	r4, [sp, #0]
 80060a4:	f000 fa0e 	bl	80064c4 <xQueueGenericCreateStatic>
 80060a8:	4603      	mov	r3, r0
 80060aa:	e008      	b.n	80060be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	4619      	mov	r1, r3
 80060b8:	f000 fa8b 	bl	80065d2 <xQueueGenericCreate>
 80060bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
	...

080060c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <osMessagePut+0x1e>
    ticks = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80060e6:	f7ff fdd8 	bl	8005c9a <inHandlerMode>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d018      	beq.n	8006122 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80060f0:	f107 0210 	add.w	r2, r7, #16
 80060f4:	f107 0108 	add.w	r1, r7, #8
 80060f8:	2300      	movs	r3, #0
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fc22 	bl	8006944 <xQueueGenericSendFromISR>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d001      	beq.n	800610a <osMessagePut+0x42>
      return osErrorOS;
 8006106:	23ff      	movs	r3, #255	@ 0xff
 8006108:	e018      	b.n	800613c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d014      	beq.n	800613a <osMessagePut+0x72>
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <osMessagePut+0x7c>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e00b      	b.n	800613a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006122:	f107 0108 	add.w	r1, r7, #8
 8006126:	2300      	movs	r3, #0
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fb00 	bl	8006730 <xQueueGenericSend>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d001      	beq.n	800613a <osMessagePut+0x72>
      return osErrorOS;
 8006136:	23ff      	movs	r3, #255	@ 0xff
 8006138:	e000      	b.n	800613c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006148:	b590      	push	{r4, r7, lr}
 800614a:	b08b      	sub	sp, #44	@ 0x2c
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006162:	2380      	movs	r3, #128	@ 0x80
 8006164:	617b      	str	r3, [r7, #20]
    return event;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	461c      	mov	r4, r3
 800616a:	f107 0314 	add.w	r3, r7, #20
 800616e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006176:	e054      	b.n	8006222 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006186:	d103      	bne.n	8006190 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006188:	f04f 33ff 	mov.w	r3, #4294967295
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
 800618e:	e009      	b.n	80061a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d006      	beq.n	80061a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <osMessageGet+0x5c>
      ticks = 1;
 80061a0:	2301      	movs	r3, #1
 80061a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80061a4:	f7ff fd79 	bl	8005c9a <inHandlerMode>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01c      	beq.n	80061e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80061ae:	f107 0220 	add.w	r2, r7, #32
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	3304      	adds	r3, #4
 80061b8:	4619      	mov	r1, r3
 80061ba:	68b8      	ldr	r0, [r7, #8]
 80061bc:	f000 fefe 	bl	8006fbc <xQueueReceiveFromISR>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d102      	bne.n	80061cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80061c6:	2310      	movs	r3, #16
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	e001      	b.n	80061d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01d      	beq.n	8006212 <osMessageGet+0xca>
 80061d6:	4b15      	ldr	r3, [pc, #84]	@ (800622c <osMessageGet+0xe4>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	e014      	b.n	8006212 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80061e8:	f107 0314 	add.w	r3, r7, #20
 80061ec:	3304      	adds	r3, #4
 80061ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f0:	4619      	mov	r1, r3
 80061f2:	68b8      	ldr	r0, [r7, #8]
 80061f4:	f000 fce2 	bl	8006bbc <xQueueReceive>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d102      	bne.n	8006204 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80061fe:	2310      	movs	r3, #16
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	e006      	b.n	8006212 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <osMessageGet+0xc6>
 800620a:	2300      	movs	r3, #0
 800620c:	e000      	b.n	8006210 <osMessageGet+0xc8>
 800620e:	2340      	movs	r3, #64	@ 0x40
 8006210:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	461c      	mov	r4, r3
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800621e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	372c      	adds	r7, #44	@ 0x2c
 8006226:	46bd      	mov	sp, r7
 8006228:	bd90      	pop	{r4, r7, pc}
 800622a:	bf00      	nop
 800622c:	e000ed04 	.word	0xe000ed04

08006230 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006238:	f7ff fd2f 	bl	8005c9a <inHandlerMode>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 ff63 	bl	800710e <uxQueueMessagesWaitingFromISR>
 8006248:	4603      	mov	r3, r0
 800624a:	e003      	b.n	8006254 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 ff3d 	bl	80070cc <uxQueueMessagesWaiting>
 8006252:	4603      	mov	r3, r0
  }
}
 8006254:	4618      	mov	r0, r3
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006264:	f7ff fd19 	bl	8005c9a <inHandlerMode>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <osMessageDelete+0x16>
    return osErrorISR;
 800626e:	2382      	movs	r3, #130	@ 0x82
 8006270:	e003      	b.n	800627a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 ff6c 	bl	8007150 <vQueueDelete>

  return osOK; 
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f103 0208 	add.w	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 0208 	add.w	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f103 0208 	add.w	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d103      	bne.n	8006344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	e00c      	b.n	800635e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3308      	adds	r3, #8
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e002      	b.n	8006352 <vListInsert+0x2e>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d2f6      	bcs.n	800634c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d103      	bne.n	80063ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	1e5a      	subs	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006404:	b672      	cpsid	i
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	b662      	cpsie	i
 8006414:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800641c:	f002 f9a6 	bl	800876c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006428:	68f9      	ldr	r1, [r7, #12]
 800642a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644c:	3b01      	subs	r3, #1
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	441a      	add	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	22ff      	movs	r2, #255	@ 0xff
 8006460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	22ff      	movs	r2, #255	@ 0xff
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d114      	bne.n	800649c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01a      	beq.n	80064b0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3310      	adds	r3, #16
 800647e:	4618      	mov	r0, r3
 8006480:	f001 fc56 	bl	8007d30 <xTaskRemoveFromEventList>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800648a:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <xQueueGenericReset+0xd4>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	e009      	b.n	80064b0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3310      	adds	r3, #16
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff feee 	bl	8006282 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3324      	adds	r3, #36	@ 0x24
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fee9 	bl	8006282 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064b0:	f002 f992 	bl	80087d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064b4:	2301      	movs	r3, #1
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08e      	sub	sp, #56	@ 0x38
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10d      	bne.n	80064f4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	b672      	cpsid	i
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	b662      	cpsie	i
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10d      	bne.n	8006516 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	b672      	cpsid	i
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	b662      	cpsie	i
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <xQueueGenericCreateStatic+0x5e>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <xQueueGenericCreateStatic+0x62>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <xQueueGenericCreateStatic+0x64>
 8006526:	2300      	movs	r3, #0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10d      	bne.n	8006548 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	b672      	cpsid	i
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	b662      	cpsie	i
 8006540:	623b      	str	r3, [r7, #32]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <xQueueGenericCreateStatic+0x90>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <xQueueGenericCreateStatic+0x94>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <xQueueGenericCreateStatic+0x96>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	b672      	cpsid	i
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	b662      	cpsie	i
 8006572:	61fb      	str	r3, [r7, #28]
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	e7fd      	b.n	8006576 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800657a:	2348      	movs	r3, #72	@ 0x48
 800657c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b48      	cmp	r3, #72	@ 0x48
 8006582:	d00d      	beq.n	80065a0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	61bb      	str	r3, [r7, #24]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f848 	bl	8006658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3730      	adds	r7, #48	@ 0x30
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b08a      	sub	sp, #40	@ 0x28
 80065d6:	af02      	add	r7, sp, #8
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <xQueueGenericCreate+0x30>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	613b      	str	r3, [r7, #16]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	e004      	b.n	8006618 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	3348      	adds	r3, #72	@ 0x48
 800661c:	4618      	mov	r0, r3
 800661e:	f002 f9d3 	bl	80089c8 <pvPortMalloc>
 8006622:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	3348      	adds	r3, #72	@ 0x48
 8006632:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800663c:	79fa      	ldrb	r2, [r7, #7]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f805 	bl	8006658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800664e:	69bb      	ldr	r3, [r7, #24]
	}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e002      	b.n	800667a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006686:	2101      	movs	r1, #1
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f7ff feaf 	bl	80063ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00e      	beq.n	80066c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f837 	bl	8006730 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	4603      	mov	r3, r0
 80066d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066d4:	2301      	movs	r3, #1
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	461a      	mov	r2, r3
 80066e0:	6939      	ldr	r1, [r7, #16]
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff75 	bl	80065d2 <xQueueGenericCreate>
 80066e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ffd3 	bl	8006696 <prvInitialiseMutex>

		return xNewQueue;
 80066f0:	68fb      	ldr	r3, [r7, #12]
	}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b088      	sub	sp, #32
 80066fe:	af02      	add	r7, sp, #8
 8006700:	4603      	mov	r3, r0
 8006702:	6039      	str	r1, [r7, #0]
 8006704:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006706:	2301      	movs	r3, #1
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2200      	movs	r2, #0
 8006716:	6939      	ldr	r1, [r7, #16]
 8006718:	6978      	ldr	r0, [r7, #20]
 800671a:	f7ff fed3 	bl	80064c4 <xQueueGenericCreateStatic>
 800671e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ffb8 	bl	8006696 <prvInitialiseMutex>

		return xNewQueue;
 8006726:	68fb      	ldr	r3, [r7, #12]
	}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	@ 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800673e:	2300      	movs	r3, #0
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <xQueueGenericSend+0x38>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	b672      	cpsid	i
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	b662      	cpsie	i
 8006760:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <xQueueGenericSend+0x46>
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <xQueueGenericSend+0x4a>
 8006776:	2301      	movs	r3, #1
 8006778:	e000      	b.n	800677c <xQueueGenericSend+0x4c>
 800677a:	2300      	movs	r3, #0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <xQueueGenericSend+0x6c>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	b672      	cpsid	i
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	b662      	cpsie	i
 8006794:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d103      	bne.n	80067aa <xQueueGenericSend+0x7a>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <xQueueGenericSend+0x7e>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueGenericSend+0x80>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <xQueueGenericSend+0xa0>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b8:	b672      	cpsid	i
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	b662      	cpsie	i
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d0:	f001 fc7c 	bl	80080cc <xTaskGetSchedulerState>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <xQueueGenericSend+0xb0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xQueueGenericSend+0xb4>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <xQueueGenericSend+0xb6>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <xQueueGenericSend+0xd6>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	b672      	cpsid	i
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	b662      	cpsie	i
 80067fe:	61fb      	str	r3, [r7, #28]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006806:	f001 ffb1 	bl	800876c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xQueueGenericSend+0xec>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d129      	bne.n	8006870 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006822:	f000 fcd3 	bl	80071cc <prvCopyDataToQueue>
 8006826:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	3324      	adds	r3, #36	@ 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fa7b 	bl	8007d30 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d013      	beq.n	8006868 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006840:	4b3f      	ldr	r3, [pc, #252]	@ (8006940 <xQueueGenericSend+0x210>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e00a      	b.n	8006868 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b39      	ldr	r3, [pc, #228]	@ (8006940 <xQueueGenericSend+0x210>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006868:	f001 ffb6 	bl	80087d8 <vPortExitCritical>
				return pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	e063      	b.n	8006938 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006876:	f001 ffaf 	bl	80087d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e05c      	b.n	8006938 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fab7 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006892:	f001 ffa1 	bl	80087d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006896:	f001 f831 	bl	80078fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689a:	f001 ff67 	bl	800876c <vPortEnterCritical>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericSend+0x184>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x19a>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ca:	f001 ff85 	bl	80087d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 faa6 	bl	8007e28 <xTaskCheckForTimeOut>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d124      	bne.n	800692c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068e4:	f000 fd6a 	bl	80073bc <prvIsQueueFull>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f9f2 	bl	8007ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068fe:	f000 fcf5 	bl	80072ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006902:	f001 f809 	bl	8007918 <xTaskResumeAll>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f47f af7c 	bne.w	8006806 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800690e:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <xQueueGenericSend+0x210>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e772      	b.n	8006806 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006922:	f000 fce3 	bl	80072ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 fff7 	bl	8007918 <xTaskResumeAll>
 800692a:	e76c      	b.n	8006806 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800692c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800692e:	f000 fcdd 	bl	80072ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 fff1 	bl	8007918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	@ 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	@ 0x38
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10d      	bne.n	8006978 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	b672      	cpsid	i
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	b662      	cpsie	i
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <xQueueGenericSendFromISR+0x42>
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueGenericSendFromISR+0x46>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueGenericSendFromISR+0x48>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10d      	bne.n	80069ac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	623b      	str	r3, [r7, #32]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d103      	bne.n	80069ba <xQueueGenericSendFromISR+0x76>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <xQueueGenericSendFromISR+0x7a>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <xQueueGenericSendFromISR+0x7c>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10d      	bne.n	80069e0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	61fb      	str	r3, [r7, #28]
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	e7fd      	b.n	80069dc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069e0:	f001 ffac 	bl	800893c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069e4:	f3ef 8211 	mrs	r2, BASEPRI
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	b672      	cpsid	i
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	b662      	cpsie	i
 80069fc:	61ba      	str	r2, [r7, #24]
 80069fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a00:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d302      	bcc.n	8006a16 <xQueueGenericSendFromISR+0xd2>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d12c      	bne.n	8006a70 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a26:	f000 fbd1 	bl	80071cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d112      	bne.n	8006a5a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d016      	beq.n	8006a6a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3e:	3324      	adds	r3, #36	@ 0x24
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f975 	bl	8007d30 <xTaskRemoveFromEventList>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e007      	b.n	8006a6a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	b25a      	sxtb	r2, r3
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006a6e:	e001      	b.n	8006a74 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a76:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3738      	adds	r7, #56	@ 0x38
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b08e      	sub	sp, #56	@ 0x38
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <xQueueGiveFromISR+0x30>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	623b      	str	r3, [r7, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00d      	beq.n	8006ade <xQueueGiveFromISR+0x54>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	61fb      	str	r3, [r7, #28]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <xQueueGiveFromISR+0x64>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueGiveFromISR+0x68>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGiveFromISR+0x6a>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afc:	b672      	cpsid	i
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	b662      	cpsie	i
 8006b0c:	61bb      	str	r3, [r7, #24]
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b14:	f001 ff12 	bl	800893c <vPortValidateInterruptPriority>
	__asm volatile
 8006b18:	f3ef 8211 	mrs	r2, BASEPRI
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	b672      	cpsid	i
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	b662      	cpsie	i
 8006b30:	617a      	str	r2, [r7, #20]
 8006b32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b34:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d22b      	bcs.n	8006ba0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d112      	bne.n	8006b8a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	3324      	adds	r3, #36	@ 0x24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f8dd 	bl	8007d30 <xTaskRemoveFromEventList>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00e      	beq.n	8006b9a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e007      	b.n	8006b9a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	b25a      	sxtb	r2, r3
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9e:	e001      	b.n	8006ba4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f383 8811 	msr	BASEPRI, r3
}
 8006bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3738      	adds	r7, #56	@ 0x38
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	@ 0x30
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <xQueueReceive+0x36>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	b672      	cpsid	i
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	b662      	cpsie	i
 8006bea:	623b      	str	r3, [r7, #32]
}
 8006bec:	bf00      	nop
 8006bee:	bf00      	nop
 8006bf0:	e7fd      	b.n	8006bee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <xQueueReceive+0x44>
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <xQueueReceive+0x48>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <xQueueReceive+0x4a>
 8006c04:	2300      	movs	r3, #0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10d      	bne.n	8006c26 <xQueueReceive+0x6a>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	b672      	cpsid	i
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	b662      	cpsie	i
 8006c1e:	61fb      	str	r3, [r7, #28]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c26:	f001 fa51 	bl	80080cc <xTaskGetSchedulerState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xQueueReceive+0x7a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueReceive+0x7e>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueReceive+0x80>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <xQueueReceive+0xa0>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	61bb      	str	r3, [r7, #24]
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5c:	f001 fd86 	bl	800876c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01f      	beq.n	8006cac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c70:	f000 fb16 	bl	80072a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	1e5a      	subs	r2, r3, #1
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00f      	beq.n	8006ca4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	3310      	adds	r3, #16
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 f851 	bl	8007d30 <xTaskRemoveFromEventList>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c94:	4b3c      	ldr	r3, [pc, #240]	@ (8006d88 <xQueueReceive+0x1cc>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ca4:	f001 fd98 	bl	80087d8 <vPortExitCritical>
				return pdPASS;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e069      	b.n	8006d80 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cb2:	f001 fd91 	bl	80087d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e062      	b.n	8006d80 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cc0:	f107 0310 	add.w	r3, r7, #16
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 f899 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cce:	f001 fd83 	bl	80087d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cd2:	f000 fe13 	bl	80078fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd6:	f001 fd49 	bl	800876c <vPortEnterCritical>
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d103      	bne.n	8006cf0 <xQueueReceive+0x134>
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d103      	bne.n	8006d06 <xQueueReceive+0x14a>
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d06:	f001 fd67 	bl	80087d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d0a:	1d3a      	adds	r2, r7, #4
 8006d0c:	f107 0310 	add.w	r3, r7, #16
 8006d10:	4611      	mov	r1, r2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f888 	bl	8007e28 <xTaskCheckForTimeOut>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d123      	bne.n	8006d66 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d20:	f000 fb36 	bl	8007390 <prvIsQueueEmpty>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d017      	beq.n	8006d5a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2c:	3324      	adds	r3, #36	@ 0x24
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 ffd4 	bl	8007ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d3a:	f000 fad7 	bl	80072ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d3e:	f000 fdeb 	bl	8007918 <xTaskResumeAll>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d189      	bne.n	8006c5c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006d48:	4b0f      	ldr	r3, [pc, #60]	@ (8006d88 <xQueueReceive+0x1cc>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	e780      	b.n	8006c5c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d5c:	f000 fac6 	bl	80072ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d60:	f000 fdda 	bl	8007918 <xTaskResumeAll>
 8006d64:	e77a      	b.n	8006c5c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d68:	f000 fac0 	bl	80072ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d6c:	f000 fdd4 	bl	8007918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d72:	f000 fb0d 	bl	8007390 <prvIsQueueEmpty>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f43f af6f 	beq.w	8006c5c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3730      	adds	r7, #48	@ 0x30
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	@ 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dac:	b672      	cpsid	i
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	b662      	cpsie	i
 8006dbc:	623b      	str	r3, [r7, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	b672      	cpsid	i
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	b662      	cpsie	i
 8006de0:	61fb      	str	r3, [r7, #28]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006de8:	f001 f970 	bl	80080cc <xTaskGetSchedulerState>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <xQueueSemaphoreTake+0x6c>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <xQueueSemaphoreTake+0x70>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <xQueueSemaphoreTake+0x72>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	61bb      	str	r3, [r7, #24]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e1e:	f001 fca5 	bl	800876c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d024      	beq.n	8006e78 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	1e5a      	subs	r2, r3, #1
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e3e:	f001 fb0f 	bl	8008460 <pvTaskIncrementMutexHeldCount>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00f      	beq.n	8006e70 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e52:	3310      	adds	r3, #16
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 ff6b 	bl	8007d30 <xTaskRemoveFromEventList>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e60:	4b55      	ldr	r3, [pc, #340]	@ (8006fb8 <xQueueSemaphoreTake+0x22c>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e70:	f001 fcb2 	bl	80087d8 <vPortExitCritical>
				return pdPASS;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e09a      	b.n	8006fae <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d114      	bne.n	8006ea8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	617b      	str	r3, [r7, #20]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ea0:	f001 fc9a 	bl	80087d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e082      	b.n	8006fae <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eae:	f107 030c 	add.w	r3, r7, #12
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ffa2 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ebc:	f001 fc8c 	bl	80087d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec0:	f000 fd1c 	bl	80078fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec4:	f001 fc52 	bl	800876c <vPortEnterCritical>
 8006ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d103      	bne.n	8006ede <xQueueSemaphoreTake+0x152>
 8006ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ee4:	b25b      	sxtb	r3, r3
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d103      	bne.n	8006ef4 <xQueueSemaphoreTake+0x168>
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef4:	f001 fc70 	bl	80087d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef8:	463a      	mov	r2, r7
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 ff91 	bl	8007e28 <xTaskCheckForTimeOut>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d132      	bne.n	8006f72 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f0e:	f000 fa3f 	bl	8007390 <prvIsQueueEmpty>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d026      	beq.n	8006f66 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006f20:	f001 fc24 	bl	800876c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 f8ed 	bl	8008108 <xTaskPriorityInherit>
 8006f2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f30:	f001 fc52 	bl	80087d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	3324      	adds	r3, #36	@ 0x24
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fecf 	bl	8007ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f44:	f000 f9d2 	bl	80072ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f48:	f000 fce6 	bl	8007918 <xTaskResumeAll>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f47f af65 	bne.w	8006e1e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006f54:	4b18      	ldr	r3, [pc, #96]	@ (8006fb8 <xQueueSemaphoreTake+0x22c>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	e75b      	b.n	8006e1e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f68:	f000 f9c0 	bl	80072ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f6c:	f000 fcd4 	bl	8007918 <xTaskResumeAll>
 8006f70:	e755      	b.n	8006e1e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f74:	f000 f9ba 	bl	80072ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f78:	f000 fcce 	bl	8007918 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f7e:	f000 fa07 	bl	8007390 <prvIsQueueEmpty>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f43f af4a 	beq.w	8006e1e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00d      	beq.n	8006fac <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006f90:	f001 fbec 	bl	800876c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f96:	f000 f901 	bl	800719c <prvGetDisinheritPriorityAfterTimeout>
 8006f9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f9bc 	bl	8008320 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fa8:	f001 fc16 	bl	80087d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3738      	adds	r7, #56	@ 0x38
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08e      	sub	sp, #56	@ 0x38
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	623b      	str	r3, [r7, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <xQueueReceiveFromISR+0x40>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <xQueueReceiveFromISR+0x44>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e000      	b.n	8007002 <xQueueReceiveFromISR+0x46>
 8007000:	2300      	movs	r3, #0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700a:	b672      	cpsid	i
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	b662      	cpsie	i
 800701a:	61fb      	str	r3, [r7, #28]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007022:	f001 fc8b 	bl	800893c <vPortValidateInterruptPriority>
	__asm volatile
 8007026:	f3ef 8211 	mrs	r2, BASEPRI
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	b672      	cpsid	i
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	b662      	cpsie	i
 800703e:	61ba      	str	r2, [r7, #24]
 8007040:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007042:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d02f      	beq.n	80070b2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007060:	f000 f91e 	bl	80072a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	1e5a      	subs	r2, r3, #1
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800706c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d112      	bne.n	800709c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d016      	beq.n	80070ac <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	3310      	adds	r3, #16
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fe54 	bl	8007d30 <xTaskRemoveFromEventList>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00e      	beq.n	80070ac <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e007      	b.n	80070ac <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	b25a      	sxtb	r2, r3
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80070ac:	2301      	movs	r3, #1
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b0:	e001      	b.n	80070b6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f383 8811 	msr	BASEPRI, r3
}
 80070c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3738      	adds	r7, #56	@ 0x38
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10d      	bne.n	80070f6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	b672      	cpsid	i
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	b662      	cpsie	i
 80070ee:	60bb      	str	r3, [r7, #8]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80070f6:	f001 fb39 	bl	800876c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007100:	f001 fb6a 	bl	80087d8 <vPortExitCritical>

	return uxReturn;
 8007104:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	b672      	cpsid	i
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	b662      	cpsie	i
 8007134:	60fb      	str	r3, [r7, #12]
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	e7fd      	b.n	8007138 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007140:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007142:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <vQueueDelete+0x2e>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	b672      	cpsid	i
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	b662      	cpsie	i
 8007176:	60bb      	str	r3, [r7, #8]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f934 	bl	80073ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fce8 	bl	8008b64 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d006      	beq.n	80071ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1c3 0307 	rsb	r3, r3, #7
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e001      	b.n	80071be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071be:	68fb      	ldr	r3, [r7, #12]
	}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10d      	bne.n	8007206 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d14d      	bne.n	800728e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 f806 	bl	8008208 <xTaskPriorityDisinherit>
 80071fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	e043      	b.n	800728e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d119      	bne.n	8007240 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6858      	ldr	r0, [r3, #4]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	461a      	mov	r2, r3
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	f010 fcc7 	bl	8017baa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007224:	441a      	add	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	d32b      	bcc.n	800728e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	e026      	b.n	800728e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68d8      	ldr	r0, [r3, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007248:	461a      	mov	r2, r3
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	f010 fcad 	bl	8017baa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007258:	425b      	negs	r3, r3
 800725a:	441a      	add	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d207      	bcs.n	800727c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007274:	425b      	negs	r3, r3
 8007276:	441a      	add	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b02      	cmp	r3, #2
 8007280:	d105      	bne.n	800728e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	3b01      	subs	r3, #1
 800728c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007296:	697b      	ldr	r3, [r7, #20]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	441a      	add	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d303      	bcc.n	80072d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	461a      	mov	r2, r3
 80072de:	6838      	ldr	r0, [r7, #0]
 80072e0:	f010 fc63 	bl	8017baa <memcpy>
	}
}
 80072e4:	bf00      	nop
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072f4:	f001 fa3a 	bl	800876c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007300:	e011      	b.n	8007326 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d012      	beq.n	8007330 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3324      	adds	r3, #36	@ 0x24
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fd0e 	bl	8007d30 <xTaskRemoveFromEventList>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800731a:	f000 fded 	bl	8007ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	3b01      	subs	r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dce9      	bgt.n	8007302 <prvUnlockQueue+0x16>
 800732e:	e000      	b.n	8007332 <prvUnlockQueue+0x46>
					break;
 8007330:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	22ff      	movs	r2, #255	@ 0xff
 8007336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800733a:	f001 fa4d 	bl	80087d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800733e:	f001 fa15 	bl	800876c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007348:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800734a:	e011      	b.n	8007370 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d012      	beq.n	800737a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3310      	adds	r3, #16
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fce9 	bl	8007d30 <xTaskRemoveFromEventList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007364:	f000 fdc8 	bl	8007ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	3b01      	subs	r3, #1
 800736c:	b2db      	uxtb	r3, r3
 800736e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dce9      	bgt.n	800734c <prvUnlockQueue+0x60>
 8007378:	e000      	b.n	800737c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800737a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	22ff      	movs	r2, #255	@ 0xff
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007384:	f001 fa28 	bl	80087d8 <vPortExitCritical>
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007398:	f001 f9e8 	bl	800876c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e001      	b.n	80073ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ae:	f001 fa13 	bl	80087d8 <vPortExitCritical>

	return xReturn;
 80073b2:	68fb      	ldr	r3, [r7, #12]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c4:	f001 f9d2 	bl	800876c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d102      	bne.n	80073da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073d4:	2301      	movs	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e001      	b.n	80073de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073de:	f001 f9fb 	bl	80087d8 <vPortExitCritical>

	return xReturn;
 80073e2:	68fb      	ldr	r3, [r7, #12]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e016      	b.n	8007428 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80073fa:	4a10      	ldr	r2, [pc, #64]	@ (800743c <vQueueUnregisterQueue+0x50>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d10b      	bne.n	8007422 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800740a:	4a0c      	ldr	r2, [pc, #48]	@ (800743c <vQueueUnregisterQueue+0x50>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2100      	movs	r1, #0
 8007410:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007414:	4a09      	ldr	r2, [pc, #36]	@ (800743c <vQueueUnregisterQueue+0x50>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	2200      	movs	r2, #0
 800741e:	605a      	str	r2, [r3, #4]
				break;
 8007420:	e006      	b.n	8007430 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b07      	cmp	r3, #7
 800742c:	d9e5      	bls.n	80073fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20005058 	.word	0x20005058

08007440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	@ 0x38
 8007444:	af04      	add	r7, sp, #16
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10d      	bne.n	8007470 <xTaskCreateStatic+0x30>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	b672      	cpsid	i
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	b662      	cpsie	i
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10d      	bne.n	8007492 <xTaskCreateStatic+0x52>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	61fb      	str	r3, [r7, #28]
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	e7fd      	b.n	800748e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007492:	23a0      	movs	r3, #160	@ 0xa0
 8007494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2ba0      	cmp	r3, #160	@ 0xa0
 800749a:	d00d      	beq.n	80074b8 <xTaskCreateStatic+0x78>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a0:	b672      	cpsid	i
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	b662      	cpsie	i
 80074b0:	61bb      	str	r3, [r7, #24]
}
 80074b2:	bf00      	nop
 80074b4:	bf00      	nop
 80074b6:	e7fd      	b.n	80074b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01e      	beq.n	80074fe <xTaskCreateStatic+0xbe>
 80074c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01b      	beq.n	80074fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074d8:	2300      	movs	r3, #0
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f851 	bl	8007598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074f8:	f000 f8f0 	bl	80076dc <prvAddNewTaskToReadyList>
 80074fc:	e001      	b.n	8007502 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007502:	697b      	ldr	r3, [r7, #20]
	}
 8007504:	4618      	mov	r0, r3
 8007506:	3728      	adds	r7, #40	@ 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	@ 0x30
 8007510:	af04      	add	r7, sp, #16
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fa51 	bl	80089c8 <pvPortMalloc>
 8007526:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00e      	beq.n	800754c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800752e:	20a0      	movs	r0, #160	@ 0xa0
 8007530:	f001 fa4a 	bl	80089c8 <pvPortMalloc>
 8007534:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	631a      	str	r2, [r3, #48]	@ 0x30
 8007542:	e005      	b.n	8007550 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007544:	6978      	ldr	r0, [r7, #20]
 8007546:	f001 fb0d 	bl	8008b64 <vPortFree>
 800754a:	e001      	b.n	8007550 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d017      	beq.n	8007586 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	2300      	movs	r3, #0
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	9302      	str	r3, [sp, #8]
 8007568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f80f 	bl	8007598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800757a:	69f8      	ldr	r0, [r7, #28]
 800757c:	f000 f8ae 	bl	80076dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007580:	2301      	movs	r3, #1
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	e002      	b.n	800758c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800758c:	69bb      	ldr	r3, [r7, #24]
	}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80075b0:	440b      	add	r3, r1
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f023 0307 	bic.w	r3, r3, #7
 80075be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	617b      	str	r3, [r7, #20]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01f      	beq.n	800762c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ec:	2300      	movs	r3, #0
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e012      	b.n	8007618 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	7819      	ldrb	r1, [r3, #0]
 80075fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	4413      	add	r3, r2
 8007600:	3334      	adds	r3, #52	@ 0x34
 8007602:	460a      	mov	r2, r1
 8007604:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	4413      	add	r3, r2
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d006      	beq.n	8007620 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	3301      	adds	r3, #1
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2b0f      	cmp	r3, #15
 800761c:	d9e9      	bls.n	80075f2 <prvInitialiseNewTask+0x5a>
 800761e:	e000      	b.n	8007622 <prvInitialiseNewTask+0x8a>
			{
				break;
 8007620:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800762a:	e003      	b.n	8007634 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	2b06      	cmp	r3, #6
 8007638:	d901      	bls.n	800763e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800763a:	2306      	movs	r3, #6
 800763c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800763e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007642:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007648:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe fe34 	bl	80062c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	3318      	adds	r3, #24
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fe2f 	bl	80062c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007668:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766c:	f1c3 0207 	rsb	r2, r3, #7
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007678:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	2200      	movs	r2, #0
 800767e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	2200      	movs	r2, #0
 8007686:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	334c      	adds	r3, #76	@ 0x4c
 800768e:	224c      	movs	r2, #76	@ 0x4c
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f010 f99f 	bl	80179d6 <memset>
 8007698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769a:	4a0d      	ldr	r2, [pc, #52]	@ (80076d0 <prvInitialiseNewTask+0x138>)
 800769c:	651a      	str	r2, [r3, #80]	@ 0x50
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	4a0c      	ldr	r2, [pc, #48]	@ (80076d4 <prvInitialiseNewTask+0x13c>)
 80076a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <prvInitialiseNewTask+0x140>)
 80076a8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	68f9      	ldr	r1, [r7, #12]
 80076ae:	69b8      	ldr	r0, [r7, #24]
 80076b0:	f000 ff50 	bl	8008554 <pxPortInitialiseStack>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076c6:	bf00      	nop
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	2000f1f8 	.word	0x2000f1f8
 80076d4:	2000f260 	.word	0x2000f260
 80076d8:	2000f2c8 	.word	0x2000f2c8

080076dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076e4:	f001 f842 	bl	800876c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007794 <prvAddNewTaskToReadyList+0xb8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	4a29      	ldr	r2, [pc, #164]	@ (8007794 <prvAddNewTaskToReadyList+0xb8>)
 80076f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076f2:	4b29      	ldr	r3, [pc, #164]	@ (8007798 <prvAddNewTaskToReadyList+0xbc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d109      	bne.n	800770e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076fa:	4a27      	ldr	r2, [pc, #156]	@ (8007798 <prvAddNewTaskToReadyList+0xbc>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007700:	4b24      	ldr	r3, [pc, #144]	@ (8007794 <prvAddNewTaskToReadyList+0xb8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d110      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007708:	f000 fc1a 	bl	8007f40 <prvInitialiseTaskLists>
 800770c:	e00d      	b.n	800772a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800770e:	4b23      	ldr	r3, [pc, #140]	@ (800779c <prvAddNewTaskToReadyList+0xc0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007716:	4b20      	ldr	r3, [pc, #128]	@ (8007798 <prvAddNewTaskToReadyList+0xbc>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d802      	bhi.n	800772a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007724:	4a1c      	ldr	r2, [pc, #112]	@ (8007798 <prvAddNewTaskToReadyList+0xbc>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800772a:	4b1d      	ldr	r3, [pc, #116]	@ (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	4a1b      	ldr	r2, [pc, #108]	@ (80077a0 <prvAddNewTaskToReadyList+0xc4>)
 8007732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	2201      	movs	r2, #1
 800773a:	409a      	lsls	r2, r3
 800773c:	4b19      	ldr	r3, [pc, #100]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4313      	orrs	r3, r2
 8007742:	4a18      	ldr	r2, [pc, #96]	@ (80077a4 <prvAddNewTaskToReadyList+0xc8>)
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <prvAddNewTaskToReadyList+0xcc>)
 8007754:	441a      	add	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe fdbd 	bl	80062dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007762:	f001 f839 	bl	80087d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007766:	4b0d      	ldr	r3, [pc, #52]	@ (800779c <prvAddNewTaskToReadyList+0xc0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800776e:	4b0a      	ldr	r3, [pc, #40]	@ (8007798 <prvAddNewTaskToReadyList+0xbc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	429a      	cmp	r2, r3
 800777a:	d207      	bcs.n	800778c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800777c:	4b0b      	ldr	r3, [pc, #44]	@ (80077ac <prvAddNewTaskToReadyList+0xd0>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20005198 	.word	0x20005198
 8007798:	20005098 	.word	0x20005098
 800779c:	200051a4 	.word	0x200051a4
 80077a0:	200051b4 	.word	0x200051b4
 80077a4:	200051a0 	.word	0x200051a0
 80077a8:	2000509c 	.word	0x2000509c
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01a      	beq.n	80077f8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077c2:	4b15      	ldr	r3, [pc, #84]	@ (8007818 <vTaskDelay+0x68>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <vTaskDelay+0x36>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	b672      	cpsid	i
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	b662      	cpsie	i
 80077de:	60bb      	str	r3, [r7, #8]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80077e6:	f000 f889 	bl	80078fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077ea:	2100      	movs	r1, #0
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fe4b 	bl	8008488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077f2:	f000 f891 	bl	8007918 <xTaskResumeAll>
 80077f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80077fe:	4b07      	ldr	r3, [pc, #28]	@ (800781c <vTaskDelay+0x6c>)
 8007800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200051c0 	.word	0x200051c0
 800781c:	e000ed04 	.word	0xe000ed04

08007820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	@ 0x28
 8007824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800782e:	463a      	mov	r2, r7
 8007830:	1d39      	adds	r1, r7, #4
 8007832:	f107 0308 	add.w	r3, r7, #8
 8007836:	4618      	mov	r0, r3
 8007838:	f7f8 feca 	bl	80005d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	9202      	str	r2, [sp, #8]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	2300      	movs	r3, #0
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2300      	movs	r3, #0
 800784c:	460a      	mov	r2, r1
 800784e:	4923      	ldr	r1, [pc, #140]	@ (80078dc <vTaskStartScheduler+0xbc>)
 8007850:	4823      	ldr	r0, [pc, #140]	@ (80078e0 <vTaskStartScheduler+0xc0>)
 8007852:	f7ff fdf5 	bl	8007440 <xTaskCreateStatic>
 8007856:	4603      	mov	r3, r0
 8007858:	4a22      	ldr	r2, [pc, #136]	@ (80078e4 <vTaskStartScheduler+0xc4>)
 800785a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800785c:	4b21      	ldr	r3, [pc, #132]	@ (80078e4 <vTaskStartScheduler+0xc4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007864:	2301      	movs	r3, #1
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e001      	b.n	800786e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d11d      	bne.n	80078b0 <vTaskStartScheduler+0x90>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	b672      	cpsid	i
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	b662      	cpsie	i
 8007888:	613b      	str	r3, [r7, #16]
}
 800788a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800788c:	4b16      	ldr	r3, [pc, #88]	@ (80078e8 <vTaskStartScheduler+0xc8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	334c      	adds	r3, #76	@ 0x4c
 8007892:	4a16      	ldr	r2, [pc, #88]	@ (80078ec <vTaskStartScheduler+0xcc>)
 8007894:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007896:	4b16      	ldr	r3, [pc, #88]	@ (80078f0 <vTaskStartScheduler+0xd0>)
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800789e:	4b15      	ldr	r3, [pc, #84]	@ (80078f4 <vTaskStartScheduler+0xd4>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078a4:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <vTaskStartScheduler+0xd8>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078aa:	f000 fee1 	bl	8008670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ae:	e011      	b.n	80078d4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d10d      	bne.n	80078d4 <vTaskStartScheduler+0xb4>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078bc:	b672      	cpsid	i
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	b662      	cpsie	i
 80078cc:	60fb      	str	r3, [r7, #12]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <vTaskStartScheduler+0xb0>
}
 80078d4:	bf00      	nop
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	08018d00 	.word	0x08018d00
 80078e0:	08007f11 	.word	0x08007f11
 80078e4:	200051bc 	.word	0x200051bc
 80078e8:	20005098 	.word	0x20005098
 80078ec:	2000003c 	.word	0x2000003c
 80078f0:	200051b8 	.word	0x200051b8
 80078f4:	200051a4 	.word	0x200051a4
 80078f8:	2000519c 	.word	0x2000519c

080078fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007900:	4b04      	ldr	r3, [pc, #16]	@ (8007914 <vTaskSuspendAll+0x18>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	4a03      	ldr	r2, [pc, #12]	@ (8007914 <vTaskSuspendAll+0x18>)
 8007908:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800790a:	bf00      	nop
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	200051c0 	.word	0x200051c0

08007918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007926:	4b43      	ldr	r3, [pc, #268]	@ (8007a34 <xTaskResumeAll+0x11c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <xTaskResumeAll+0x32>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	b672      	cpsid	i
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	b662      	cpsie	i
 8007942:	603b      	str	r3, [r7, #0]
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	e7fd      	b.n	8007946 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800794a:	f000 ff0f 	bl	800876c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800794e:	4b39      	ldr	r3, [pc, #228]	@ (8007a34 <xTaskResumeAll+0x11c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	4a37      	ldr	r2, [pc, #220]	@ (8007a34 <xTaskResumeAll+0x11c>)
 8007956:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007958:	4b36      	ldr	r3, [pc, #216]	@ (8007a34 <xTaskResumeAll+0x11c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d161      	bne.n	8007a24 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007960:	4b35      	ldr	r3, [pc, #212]	@ (8007a38 <xTaskResumeAll+0x120>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d05d      	beq.n	8007a24 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007968:	e02e      	b.n	80079c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800796a:	4b34      	ldr	r3, [pc, #208]	@ (8007a3c <xTaskResumeAll+0x124>)
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3318      	adds	r3, #24
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fd0d 	bl	8006396 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fd08 	bl	8006396 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	2201      	movs	r2, #1
 800798c:	409a      	lsls	r2, r3
 800798e:	4b2c      	ldr	r3, [pc, #176]	@ (8007a40 <xTaskResumeAll+0x128>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4313      	orrs	r3, r2
 8007994:	4a2a      	ldr	r2, [pc, #168]	@ (8007a40 <xTaskResumeAll+0x128>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a27      	ldr	r2, [pc, #156]	@ (8007a44 <xTaskResumeAll+0x12c>)
 80079a6:	441a      	add	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fc94 	bl	80062dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b8:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <xTaskResumeAll+0x130>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	429a      	cmp	r2, r3
 80079c0:	d302      	bcc.n	80079c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80079c2:	4b22      	ldr	r3, [pc, #136]	@ (8007a4c <xTaskResumeAll+0x134>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079c8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a3c <xTaskResumeAll+0x124>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1cc      	bne.n	800796a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079d6:	f000 fb59 	bl	800808c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079da:	4b1d      	ldr	r3, [pc, #116]	@ (8007a50 <xTaskResumeAll+0x138>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079e6:	f000 f859 	bl	8007a9c <xTaskIncrementTick>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80079f0:	4b16      	ldr	r3, [pc, #88]	@ (8007a4c <xTaskResumeAll+0x134>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f1      	bne.n	80079e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007a02:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <xTaskResumeAll+0x138>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a08:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <xTaskResumeAll+0x134>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a14:	4b0f      	ldr	r3, [pc, #60]	@ (8007a54 <xTaskResumeAll+0x13c>)
 8007a16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a24:	f000 fed8 	bl	80087d8 <vPortExitCritical>

	return xAlreadyYielded;
 8007a28:	68bb      	ldr	r3, [r7, #8]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200051c0 	.word	0x200051c0
 8007a38:	20005198 	.word	0x20005198
 8007a3c:	20005158 	.word	0x20005158
 8007a40:	200051a0 	.word	0x200051a0
 8007a44:	2000509c 	.word	0x2000509c
 8007a48:	20005098 	.word	0x20005098
 8007a4c:	200051ac 	.word	0x200051ac
 8007a50:	200051a8 	.word	0x200051a8
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a5e:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <xTaskGetTickCount+0x1c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a64:	687b      	ldr	r3, [r7, #4]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000519c 	.word	0x2000519c

08007a78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a7e:	f000 ff5d 	bl	800893c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a82:	2300      	movs	r3, #0
 8007a84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a86:	4b04      	ldr	r3, [pc, #16]	@ (8007a98 <xTaskGetTickCountFromISR+0x20>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a8c:	683b      	ldr	r3, [r7, #0]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	2000519c 	.word	0x2000519c

08007a9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa6:	4b50      	ldr	r3, [pc, #320]	@ (8007be8 <xTaskIncrementTick+0x14c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 808b 	bne.w	8007bc6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8007bec <xTaskIncrementTick+0x150>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8007bec <xTaskIncrementTick+0x150>)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d123      	bne.n	8007b0c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf0 <xTaskIncrementTick+0x154>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00d      	beq.n	8007aea <xTaskIncrementTick+0x4e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	603b      	str	r3, [r7, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xTaskIncrementTick+0x4a>
 8007aea:	4b41      	ldr	r3, [pc, #260]	@ (8007bf0 <xTaskIncrementTick+0x154>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	4b40      	ldr	r3, [pc, #256]	@ (8007bf4 <xTaskIncrementTick+0x158>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf0 <xTaskIncrementTick+0x154>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf4 <xTaskIncrementTick+0x158>)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf8 <xTaskIncrementTick+0x15c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a3c      	ldr	r2, [pc, #240]	@ (8007bf8 <xTaskIncrementTick+0x15c>)
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	f000 fac0 	bl	800808c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8007bfc <xTaskIncrementTick+0x160>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d348      	bcc.n	8007ba8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	4b36      	ldr	r3, [pc, #216]	@ (8007bf0 <xTaskIncrementTick+0x154>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b20:	4b36      	ldr	r3, [pc, #216]	@ (8007bfc <xTaskIncrementTick+0x160>)
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295
 8007b26:	601a      	str	r2, [r3, #0]
					break;
 8007b28:	e03e      	b.n	8007ba8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2a:	4b31      	ldr	r3, [pc, #196]	@ (8007bf0 <xTaskIncrementTick+0x154>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d203      	bcs.n	8007b4a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b42:	4a2e      	ldr	r2, [pc, #184]	@ (8007bfc <xTaskIncrementTick+0x160>)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b48:	e02e      	b.n	8007ba8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fc21 	bl	8006396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d004      	beq.n	8007b66 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fc18 	bl	8006396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	409a      	lsls	r2, r3
 8007b6e:	4b24      	ldr	r3, [pc, #144]	@ (8007c00 <xTaskIncrementTick+0x164>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	4a22      	ldr	r2, [pc, #136]	@ (8007c00 <xTaskIncrementTick+0x164>)
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4a1f      	ldr	r2, [pc, #124]	@ (8007c04 <xTaskIncrementTick+0x168>)
 8007b86:	441a      	add	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fba4 	bl	80062dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <xTaskIncrementTick+0x16c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d3b9      	bcc.n	8007b16 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba6:	e7b6      	b.n	8007b16 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ba8:	4b17      	ldr	r3, [pc, #92]	@ (8007c08 <xTaskIncrementTick+0x16c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bae:	4915      	ldr	r1, [pc, #84]	@ (8007c04 <xTaskIncrementTick+0x168>)
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d907      	bls.n	8007bd0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	e004      	b.n	8007bd0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bc6:	4b11      	ldr	r3, [pc, #68]	@ (8007c0c <xTaskIncrementTick+0x170>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8007c0c <xTaskIncrementTick+0x170>)
 8007bce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c10 <xTaskIncrementTick+0x174>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007bdc:	697b      	ldr	r3, [r7, #20]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200051c0 	.word	0x200051c0
 8007bec:	2000519c 	.word	0x2000519c
 8007bf0:	20005150 	.word	0x20005150
 8007bf4:	20005154 	.word	0x20005154
 8007bf8:	200051b0 	.word	0x200051b0
 8007bfc:	200051b8 	.word	0x200051b8
 8007c00:	200051a0 	.word	0x200051a0
 8007c04:	2000509c 	.word	0x2000509c
 8007c08:	20005098 	.word	0x20005098
 8007c0c:	200051a8 	.word	0x200051a8
 8007c10:	200051ac 	.word	0x200051ac

08007c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc8 <vTaskSwitchContext+0xb4>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c22:	4b2a      	ldr	r3, [pc, #168]	@ (8007ccc <vTaskSwitchContext+0xb8>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c28:	e047      	b.n	8007cba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007c2a:	4b28      	ldr	r3, [pc, #160]	@ (8007ccc <vTaskSwitchContext+0xb8>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c30:	4b27      	ldr	r3, [pc, #156]	@ (8007cd0 <vTaskSwitchContext+0xbc>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	fab3 f383 	clz	r3, r3
 8007c3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	f1c3 031f 	rsb	r3, r3, #31
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	4923      	ldr	r1, [pc, #140]	@ (8007cd4 <vTaskSwitchContext+0xc0>)
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10d      	bne.n	8007c76 <vTaskSwitchContext+0x62>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	b672      	cpsid	i
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	b662      	cpsie	i
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <vTaskSwitchContext+0x5e>
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a14      	ldr	r2, [pc, #80]	@ (8007cd4 <vTaskSwitchContext+0xc0>)
 8007c82:	4413      	add	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3308      	adds	r3, #8
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d104      	bne.n	8007ca6 <vTaskSwitchContext+0x92>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <vTaskSwitchContext+0xc4>)
 8007cae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007cb0:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <vTaskSwitchContext+0xc4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	334c      	adds	r3, #76	@ 0x4c
 8007cb6:	4a09      	ldr	r2, [pc, #36]	@ (8007cdc <vTaskSwitchContext+0xc8>)
 8007cb8:	6013      	str	r3, [r2, #0]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	200051c0 	.word	0x200051c0
 8007ccc:	200051ac 	.word	0x200051ac
 8007cd0:	200051a0 	.word	0x200051a0
 8007cd4:	2000509c 	.word	0x2000509c
 8007cd8:	20005098 	.word	0x20005098
 8007cdc:	2000003c 	.word	0x2000003c

08007ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10d      	bne.n	8007d0c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	b672      	cpsid	i
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	b662      	cpsie	i
 8007d04:	60fb      	str	r3, [r7, #12]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d0c:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <vTaskPlaceOnEventList+0x4c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3318      	adds	r3, #24
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fe fb05 	bl	8006324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	6838      	ldr	r0, [r7, #0]
 8007d1e:	f000 fbb3 	bl	8008488 <prvAddCurrentTaskToDelayedList>
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20005098 	.word	0x20005098

08007d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10d      	bne.n	8007d62 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fb15 	bl	8006396 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <xTaskRemoveFromEventList+0xb4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11c      	bne.n	8007dae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fb0c 	bl	8006396 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d82:	2201      	movs	r2, #1
 8007d84:	409a      	lsls	r2, r3
 8007d86:	4b18      	ldr	r3, [pc, #96]	@ (8007de8 <xTaskRemoveFromEventList+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <xTaskRemoveFromEventList+0xb8>)
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4a13      	ldr	r2, [pc, #76]	@ (8007dec <xTaskRemoveFromEventList+0xbc>)
 8007d9e:	441a      	add	r2, r3
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f7fe fa98 	bl	80062dc <vListInsertEnd>
 8007dac:	e005      	b.n	8007dba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3318      	adds	r3, #24
 8007db2:	4619      	mov	r1, r3
 8007db4:	480e      	ldr	r0, [pc, #56]	@ (8007df0 <xTaskRemoveFromEventList+0xc0>)
 8007db6:	f7fe fa91 	bl	80062dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <xTaskRemoveFromEventList+0xc4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d905      	bls.n	8007dd4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007df8 <xTaskRemoveFromEventList+0xc8>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e001      	b.n	8007dd8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dd8:	697b      	ldr	r3, [r7, #20]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200051c0 	.word	0x200051c0
 8007de8:	200051a0 	.word	0x200051a0
 8007dec:	2000509c 	.word	0x2000509c
 8007df0:	20005158 	.word	0x20005158
 8007df4:	20005098 	.word	0x20005098
 8007df8:	200051ac 	.word	0x200051ac

08007dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <vTaskInternalSetTimeOutState+0x24>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <vTaskInternalSetTimeOutState+0x28>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	200051b0 	.word	0x200051b0
 8007e24:	2000519c 	.word	0x2000519c

08007e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10d      	bne.n	8007e54 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	b672      	cpsid	i
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	b662      	cpsie	i
 8007e4c:	613b      	str	r3, [r7, #16]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10d      	bne.n	8007e76 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	b672      	cpsid	i
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	b662      	cpsie	i
 8007e6e:	60fb      	str	r3, [r7, #12]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007e76:	f000 fc79 	bl	800876c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef0 <xTaskCheckForTimeOut+0xc8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d102      	bne.n	8007e9a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61fb      	str	r3, [r7, #28]
 8007e98:	e023      	b.n	8007ee2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	4b15      	ldr	r3, [pc, #84]	@ (8007ef4 <xTaskCheckForTimeOut+0xcc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d007      	beq.n	8007eb6 <xTaskCheckForTimeOut+0x8e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
 8007eb4:	e015      	b.n	8007ee2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d20b      	bcs.n	8007ed8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	1ad2      	subs	r2, r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff95 	bl	8007dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	e004      	b.n	8007ee2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ee2:	f000 fc79 	bl	80087d8 <vPortExitCritical>

	return xReturn;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3720      	adds	r7, #32
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	2000519c 	.word	0x2000519c
 8007ef4:	200051b0 	.word	0x200051b0

08007ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007efc:	4b03      	ldr	r3, [pc, #12]	@ (8007f0c <vTaskMissedYield+0x14>)
 8007efe:	2201      	movs	r2, #1
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	200051ac 	.word	0x200051ac

08007f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f18:	f000 f852 	bl	8007fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f1c:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <prvIdleTask+0x28>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d9f9      	bls.n	8007f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f24:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <prvIdleTask+0x2c>)
 8007f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f34:	e7f0      	b.n	8007f18 <prvIdleTask+0x8>
 8007f36:	bf00      	nop
 8007f38:	2000509c 	.word	0x2000509c
 8007f3c:	e000ed04 	.word	0xe000ed04

08007f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
 8007f4a:	e00c      	b.n	8007f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4a12      	ldr	r2, [pc, #72]	@ (8007fa0 <prvInitialiseTaskLists+0x60>)
 8007f58:	4413      	add	r3, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f991 	bl	8006282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3301      	adds	r3, #1
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b06      	cmp	r3, #6
 8007f6a:	d9ef      	bls.n	8007f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f6c:	480d      	ldr	r0, [pc, #52]	@ (8007fa4 <prvInitialiseTaskLists+0x64>)
 8007f6e:	f7fe f988 	bl	8006282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f72:	480d      	ldr	r0, [pc, #52]	@ (8007fa8 <prvInitialiseTaskLists+0x68>)
 8007f74:	f7fe f985 	bl	8006282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f78:	480c      	ldr	r0, [pc, #48]	@ (8007fac <prvInitialiseTaskLists+0x6c>)
 8007f7a:	f7fe f982 	bl	8006282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f7e:	480c      	ldr	r0, [pc, #48]	@ (8007fb0 <prvInitialiseTaskLists+0x70>)
 8007f80:	f7fe f97f 	bl	8006282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f84:	480b      	ldr	r0, [pc, #44]	@ (8007fb4 <prvInitialiseTaskLists+0x74>)
 8007f86:	f7fe f97c 	bl	8006282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb8 <prvInitialiseTaskLists+0x78>)
 8007f8c:	4a05      	ldr	r2, [pc, #20]	@ (8007fa4 <prvInitialiseTaskLists+0x64>)
 8007f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <prvInitialiseTaskLists+0x7c>)
 8007f92:	4a05      	ldr	r2, [pc, #20]	@ (8007fa8 <prvInitialiseTaskLists+0x68>)
 8007f94:	601a      	str	r2, [r3, #0]
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	2000509c 	.word	0x2000509c
 8007fa4:	20005128 	.word	0x20005128
 8007fa8:	2000513c 	.word	0x2000513c
 8007fac:	20005158 	.word	0x20005158
 8007fb0:	2000516c 	.word	0x2000516c
 8007fb4:	20005184 	.word	0x20005184
 8007fb8:	20005150 	.word	0x20005150
 8007fbc:	20005154 	.word	0x20005154

08007fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fc6:	e019      	b.n	8007ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fc8:	f000 fbd0 	bl	800876c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b10      	ldr	r3, [pc, #64]	@ (8008010 <prvCheckTasksWaitingTermination+0x50>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe f9dc 	bl	8006396 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <prvCheckTasksWaitingTermination+0x54>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8008014 <prvCheckTasksWaitingTermination+0x54>)
 8007fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8008018 <prvCheckTasksWaitingTermination+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	4a0a      	ldr	r2, [pc, #40]	@ (8008018 <prvCheckTasksWaitingTermination+0x58>)
 8007ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ff2:	f000 fbf1 	bl	80087d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f810 	bl	800801c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ffc:	4b06      	ldr	r3, [pc, #24]	@ (8008018 <prvCheckTasksWaitingTermination+0x58>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e1      	bne.n	8007fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	2000516c 	.word	0x2000516c
 8008014:	20005198 	.word	0x20005198
 8008018:	20005180 	.word	0x20005180

0800801c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	334c      	adds	r3, #76	@ 0x4c
 8008028:	4618      	mov	r0, r3
 800802a:	f00f fd0b 	bl	8017a44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008034:	2b00      	cmp	r3, #0
 8008036:	d108      	bne.n	800804a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fd91 	bl	8008b64 <vPortFree>
				vPortFree( pxTCB );
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fd8e 	bl	8008b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008048:	e01b      	b.n	8008082 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008050:	2b01      	cmp	r3, #1
 8008052:	d103      	bne.n	800805c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fd85 	bl	8008b64 <vPortFree>
	}
 800805a:	e012      	b.n	8008082 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008062:	2b02      	cmp	r3, #2
 8008064:	d00d      	beq.n	8008082 <prvDeleteTCB+0x66>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	b672      	cpsid	i
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	b662      	cpsie	i
 800807a:	60fb      	str	r3, [r7, #12]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <prvDeleteTCB+0x62>
	}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 800809e:	f04f 32ff 	mov.w	r2, #4294967295
 80080a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080a4:	e008      	b.n	80080b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a04      	ldr	r2, [pc, #16]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	6013      	str	r3, [r2, #0]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	20005150 	.word	0x20005150
 80080c8:	200051b8 	.word	0x200051b8

080080cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <xTaskGetSchedulerState+0x34>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080da:	2301      	movs	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	e008      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e0:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <xTaskGetSchedulerState+0x38>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080e8:	2302      	movs	r3, #2
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	e001      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080f2:	687b      	ldr	r3, [r7, #4]
	}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	200051a4 	.word	0x200051a4
 8008104:	200051c0 	.word	0x200051c0

08008108 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d069      	beq.n	80081f2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008122:	4b36      	ldr	r3, [pc, #216]	@ (80081fc <xTaskPriorityInherit+0xf4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	429a      	cmp	r2, r3
 800812a:	d259      	bcs.n	80081e0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	2b00      	cmp	r3, #0
 8008132:	db06      	blt.n	8008142 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008134:	4b31      	ldr	r3, [pc, #196]	@ (80081fc <xTaskPriorityInherit+0xf4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813a:	f1c3 0207 	rsb	r2, r3, #7
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6959      	ldr	r1, [r3, #20]
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814a:	4613      	mov	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4a2b      	ldr	r2, [pc, #172]	@ (8008200 <xTaskPriorityInherit+0xf8>)
 8008154:	4413      	add	r3, r2
 8008156:	4299      	cmp	r1, r3
 8008158:	d13a      	bne.n	80081d0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	3304      	adds	r3, #4
 800815e:	4618      	mov	r0, r3
 8008160:	f7fe f919 	bl	8006396 <uxListRemove>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d115      	bne.n	8008196 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816e:	4924      	ldr	r1, [pc, #144]	@ (8008200 <xTaskPriorityInherit+0xf8>)
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <xTaskPriorityInherit+0x8e>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008184:	2201      	movs	r2, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	43da      	mvns	r2, r3
 800818c:	4b1d      	ldr	r3, [pc, #116]	@ (8008204 <xTaskPriorityInherit+0xfc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4013      	ands	r3, r2
 8008192:	4a1c      	ldr	r2, [pc, #112]	@ (8008204 <xTaskPriorityInherit+0xfc>)
 8008194:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008196:	4b19      	ldr	r3, [pc, #100]	@ (80081fc <xTaskPriorityInherit+0xf4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a4:	2201      	movs	r2, #1
 80081a6:	409a      	lsls	r2, r3
 80081a8:	4b16      	ldr	r3, [pc, #88]	@ (8008204 <xTaskPriorityInherit+0xfc>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	4a15      	ldr	r2, [pc, #84]	@ (8008204 <xTaskPriorityInherit+0xfc>)
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4a10      	ldr	r2, [pc, #64]	@ (8008200 <xTaskPriorityInherit+0xf8>)
 80081c0:	441a      	add	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f7fe f887 	bl	80062dc <vListInsertEnd>
 80081ce:	e004      	b.n	80081da <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <xTaskPriorityInherit+0xf4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081da:	2301      	movs	r3, #1
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	e008      	b.n	80081f2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081e4:	4b05      	ldr	r3, [pc, #20]	@ (80081fc <xTaskPriorityInherit+0xf4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d201      	bcs.n	80081f2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081f2:	68fb      	ldr	r3, [r7, #12]
	}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20005098 	.word	0x20005098
 8008200:	2000509c 	.word	0x2000509c
 8008204:	200051a0 	.word	0x200051a0

08008208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d074      	beq.n	8008308 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800821e:	4b3d      	ldr	r3, [pc, #244]	@ (8008314 <xTaskPriorityDisinherit+0x10c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	429a      	cmp	r2, r3
 8008226:	d00d      	beq.n	8008244 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	b672      	cpsid	i
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	b662      	cpsie	i
 800823c:	60fb      	str	r3, [r7, #12]
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10d      	bne.n	8008268 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008250:	b672      	cpsid	i
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	b662      	cpsie	i
 8008260:	60bb      	str	r3, [r7, #8]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	429a      	cmp	r2, r3
 800827c:	d044      	beq.n	8008308 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008282:	2b00      	cmp	r3, #0
 8008284:	d140      	bne.n	8008308 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe f883 	bl	8006396 <uxListRemove>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d115      	bne.n	80082c2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	491f      	ldr	r1, [pc, #124]	@ (8008318 <xTaskPriorityDisinherit+0x110>)
 800829c:	4613      	mov	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xTaskPriorityDisinherit+0xba>
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b0:	2201      	movs	r2, #1
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43da      	mvns	r2, r3
 80082b8:	4b18      	ldr	r3, [pc, #96]	@ (800831c <xTaskPriorityDisinherit+0x114>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4013      	ands	r3, r2
 80082be:	4a17      	ldr	r2, [pc, #92]	@ (800831c <xTaskPriorityDisinherit+0x114>)
 80082c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	f1c3 0207 	rsb	r2, r3, #7
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	2201      	movs	r2, #1
 80082dc:	409a      	lsls	r2, r3
 80082de:	4b0f      	ldr	r3, [pc, #60]	@ (800831c <xTaskPriorityDisinherit+0x114>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	4a0d      	ldr	r2, [pc, #52]	@ (800831c <xTaskPriorityDisinherit+0x114>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4a08      	ldr	r2, [pc, #32]	@ (8008318 <xTaskPriorityDisinherit+0x110>)
 80082f6:	441a      	add	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fd ffec 	bl	80062dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008308:	697b      	ldr	r3, [r7, #20]
	}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20005098 	.word	0x20005098
 8008318:	2000509c 	.word	0x2000509c
 800831c:	200051a0 	.word	0x200051a0

08008320 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800832e:	2301      	movs	r3, #1
 8008330:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8089 	beq.w	800844c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10d      	bne.n	800835e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	60fb      	str	r3, [r7, #12]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d902      	bls.n	800836e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e002      	b.n	8008374 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008372:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	429a      	cmp	r2, r3
 800837c:	d066      	beq.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d161      	bne.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008388:	4b32      	ldr	r3, [pc, #200]	@ (8008454 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	429a      	cmp	r2, r3
 8008390:	d10d      	bne.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	b672      	cpsid	i
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	b662      	cpsie	i
 80083a6:	60bb      	str	r3, [r7, #8]
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	e7fd      	b.n	80083aa <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	db04      	blt.n	80083cc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f1c3 0207 	rsb	r2, r3, #7
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	6959      	ldr	r1, [r3, #20]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a1f      	ldr	r2, [pc, #124]	@ (8008458 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083dc:	4413      	add	r3, r2
 80083de:	4299      	cmp	r1, r3
 80083e0:	d134      	bne.n	800844c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fd ffd5 	bl	8006396 <uxListRemove>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d115      	bne.n	800841e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f6:	4918      	ldr	r1, [pc, #96]	@ (8008458 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	2201      	movs	r2, #1
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43da      	mvns	r2, r3
 8008414:	4b11      	ldr	r3, [pc, #68]	@ (800845c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4013      	ands	r3, r2
 800841a:	4a10      	ldr	r2, [pc, #64]	@ (800845c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800841c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	2201      	movs	r2, #1
 8008424:	409a      	lsls	r2, r3
 8008426:	4b0d      	ldr	r3, [pc, #52]	@ (800845c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4313      	orrs	r3, r2
 800842c:	4a0b      	ldr	r2, [pc, #44]	@ (800845c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4a06      	ldr	r2, [pc, #24]	@ (8008458 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800843e:	441a      	add	r2, r3
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fd ff48 	bl	80062dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800844c:	bf00      	nop
 800844e:	3720      	adds	r7, #32
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	20005098 	.word	0x20005098
 8008458:	2000509c 	.word	0x2000509c
 800845c:	200051a0 	.word	0x200051a0

08008460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008464:	4b07      	ldr	r3, [pc, #28]	@ (8008484 <pvTaskIncrementMutexHeldCount+0x24>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800846c:	4b05      	ldr	r3, [pc, #20]	@ (8008484 <pvTaskIncrementMutexHeldCount+0x24>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008472:	3201      	adds	r2, #1
 8008474:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008476:	4b03      	ldr	r3, [pc, #12]	@ (8008484 <pvTaskIncrementMutexHeldCount+0x24>)
 8008478:	681b      	ldr	r3, [r3, #0]
	}
 800847a:	4618      	mov	r0, r3
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	20005098 	.word	0x20005098

08008488 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008492:	4b29      	ldr	r3, [pc, #164]	@ (8008538 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008498:	4b28      	ldr	r3, [pc, #160]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3304      	adds	r3, #4
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd ff79 	bl	8006396 <uxListRemove>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80084aa:	4b24      	ldr	r3, [pc, #144]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	2201      	movs	r2, #1
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43da      	mvns	r2, r3
 80084b8:	4b21      	ldr	r3, [pc, #132]	@ (8008540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4013      	ands	r3, r2
 80084be:	4a20      	ldr	r2, [pc, #128]	@ (8008540 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d10a      	bne.n	80084e0 <prvAddCurrentTaskToDelayedList+0x58>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d0:	4b1a      	ldr	r3, [pc, #104]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4619      	mov	r1, r3
 80084d8:	481a      	ldr	r0, [pc, #104]	@ (8008544 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084da:	f7fd feff 	bl	80062dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084de:	e026      	b.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4413      	add	r3, r2
 80084e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084e8:	4b14      	ldr	r3, [pc, #80]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d209      	bcs.n	800850c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f8:	4b13      	ldr	r3, [pc, #76]	@ (8008548 <prvAddCurrentTaskToDelayedList+0xc0>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	4b0f      	ldr	r3, [pc, #60]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fd ff0d 	bl	8006324 <vListInsert>
}
 800850a:	e010      	b.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <prvAddCurrentTaskToDelayedList+0xc4>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3304      	adds	r3, #4
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fd ff03 	bl	8006324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800851e:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	429a      	cmp	r2, r3
 8008526:	d202      	bcs.n	800852e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008528:	4a09      	ldr	r2, [pc, #36]	@ (8008550 <prvAddCurrentTaskToDelayedList+0xc8>)
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6013      	str	r3, [r2, #0]
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	2000519c 	.word	0x2000519c
 800853c:	20005098 	.word	0x20005098
 8008540:	200051a0 	.word	0x200051a0
 8008544:	20005184 	.word	0x20005184
 8008548:	20005154 	.word	0x20005154
 800854c:	20005150 	.word	0x20005150
 8008550:	200051b8 	.word	0x200051b8

08008554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3b04      	subs	r3, #4
 8008564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800856c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3b04      	subs	r3, #4
 8008572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0201 	bic.w	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3b04      	subs	r3, #4
 8008582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008584:	4a0c      	ldr	r2, [pc, #48]	@ (80085b8 <pxPortInitialiseStack+0x64>)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3b14      	subs	r3, #20
 800858e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b04      	subs	r3, #4
 800859a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f06f 0202 	mvn.w	r2, #2
 80085a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b20      	subs	r3, #32
 80085a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	080085bd 	.word	0x080085bd

080085bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085c6:	4b15      	ldr	r3, [pc, #84]	@ (800861c <prvTaskExitError+0x60>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d00d      	beq.n	80085ec <prvTaskExitError+0x30>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d4:	b672      	cpsid	i
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	b662      	cpsie	i
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	e7fd      	b.n	80085e8 <prvTaskExitError+0x2c>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f0:	b672      	cpsid	i
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	b662      	cpsie	i
 8008600:	60bb      	str	r3, [r7, #8]
}
 8008602:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008604:	bf00      	nop
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0fc      	beq.n	8008606 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	20000020 	.word	0x20000020

08008620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <pxCurrentTCBConst2>)
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	6808      	ldr	r0, [r1, #0]
 8008626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	f380 8809 	msr	PSP, r0
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8811 	msr	BASEPRI, r0
 800863a:	4770      	bx	lr
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst2>:
 8008640:	20005098 	.word	0x20005098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008648:	4808      	ldr	r0, [pc, #32]	@ (800866c <prvPortStartFirstTask+0x24>)
 800864a:	6800      	ldr	r0, [r0, #0]
 800864c:	6800      	ldr	r0, [r0, #0]
 800864e:	f380 8808 	msr	MSP, r0
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8814 	msr	CONTROL, r0
 800865a:	b662      	cpsie	i
 800865c:	b661      	cpsie	f
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	df00      	svc	0
 8008668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800866a:	bf00      	nop
 800866c:	e000ed08 	.word	0xe000ed08

08008670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008676:	4b37      	ldr	r3, [pc, #220]	@ (8008754 <xPortStartScheduler+0xe4>)
 8008678:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	22ff      	movs	r2, #255	@ 0xff
 8008686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008698:	b2da      	uxtb	r2, r3
 800869a:	4b2f      	ldr	r3, [pc, #188]	@ (8008758 <xPortStartScheduler+0xe8>)
 800869c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800869e:	4b2f      	ldr	r3, [pc, #188]	@ (800875c <xPortStartScheduler+0xec>)
 80086a0:	2207      	movs	r2, #7
 80086a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a4:	e009      	b.n	80086ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80086a6:	4b2d      	ldr	r3, [pc, #180]	@ (800875c <xPortStartScheduler+0xec>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	4a2b      	ldr	r2, [pc, #172]	@ (800875c <xPortStartScheduler+0xec>)
 80086ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c2:	2b80      	cmp	r3, #128	@ 0x80
 80086c4:	d0ef      	beq.n	80086a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086c6:	4b25      	ldr	r3, [pc, #148]	@ (800875c <xPortStartScheduler+0xec>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f1c3 0307 	rsb	r3, r3, #7
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d00d      	beq.n	80086ee <xPortStartScheduler+0x7e>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	60bb      	str	r3, [r7, #8]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ee:	4b1b      	ldr	r3, [pc, #108]	@ (800875c <xPortStartScheduler+0xec>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	4a19      	ldr	r2, [pc, #100]	@ (800875c <xPortStartScheduler+0xec>)
 80086f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086f8:	4b18      	ldr	r3, [pc, #96]	@ (800875c <xPortStartScheduler+0xec>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008700:	4a16      	ldr	r2, [pc, #88]	@ (800875c <xPortStartScheduler+0xec>)
 8008702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870c:	4b14      	ldr	r3, [pc, #80]	@ (8008760 <xPortStartScheduler+0xf0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a13      	ldr	r2, [pc, #76]	@ (8008760 <xPortStartScheduler+0xf0>)
 8008712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008718:	4b11      	ldr	r3, [pc, #68]	@ (8008760 <xPortStartScheduler+0xf0>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a10      	ldr	r2, [pc, #64]	@ (8008760 <xPortStartScheduler+0xf0>)
 800871e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008724:	f000 f8dc 	bl	80088e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008728:	4b0e      	ldr	r3, [pc, #56]	@ (8008764 <xPortStartScheduler+0xf4>)
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800872e:	f000 f8fb 	bl	8008928 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008732:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <xPortStartScheduler+0xf8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a0c      	ldr	r2, [pc, #48]	@ (8008768 <xPortStartScheduler+0xf8>)
 8008738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800873c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800873e:	f7ff ff83 	bl	8008648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008742:	f7ff fa67 	bl	8007c14 <vTaskSwitchContext>
	prvTaskExitError();
 8008746:	f7ff ff39 	bl	80085bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	e000e400 	.word	0xe000e400
 8008758:	200051c4 	.word	0x200051c4
 800875c:	200051c8 	.word	0x200051c8
 8008760:	e000ed20 	.word	0xe000ed20
 8008764:	20000020 	.word	0x20000020
 8008768:	e000ef34 	.word	0xe000ef34

0800876c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	b672      	cpsid	i
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	b662      	cpsie	i
 8008786:	607b      	str	r3, [r7, #4]
}
 8008788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800878a:	4b11      	ldr	r3, [pc, #68]	@ (80087d0 <vPortEnterCritical+0x64>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	4a0f      	ldr	r2, [pc, #60]	@ (80087d0 <vPortEnterCritical+0x64>)
 8008792:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008794:	4b0e      	ldr	r3, [pc, #56]	@ (80087d0 <vPortEnterCritical+0x64>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d112      	bne.n	80087c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800879c:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <vPortEnterCritical+0x68>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <vPortEnterCritical+0x56>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	b672      	cpsid	i
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	b662      	cpsie	i
 80087ba:	603b      	str	r3, [r7, #0]
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	e7fd      	b.n	80087be <vPortEnterCritical+0x52>
	}
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000020 	.word	0x20000020
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087de:	4b13      	ldr	r3, [pc, #76]	@ (800882c <vPortExitCritical+0x54>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10d      	bne.n	8008802 <vPortExitCritical+0x2a>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	b672      	cpsid	i
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	b662      	cpsie	i
 80087fa:	607b      	str	r3, [r7, #4]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <vPortExitCritical+0x54>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3b01      	subs	r3, #1
 8008808:	4a08      	ldr	r2, [pc, #32]	@ (800882c <vPortExitCritical+0x54>)
 800880a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800880c:	4b07      	ldr	r3, [pc, #28]	@ (800882c <vPortExitCritical+0x54>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d105      	bne.n	8008820 <vPortExitCritical+0x48>
 8008814:	2300      	movs	r3, #0
 8008816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f383 8811 	msr	BASEPRI, r3
}
 800881e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000020 	.word	0x20000020

08008830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008830:	f3ef 8009 	mrs	r0, PSP
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	4b15      	ldr	r3, [pc, #84]	@ (8008890 <pxCurrentTCBConst>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	f01e 0f10 	tst.w	lr, #16
 8008840:	bf08      	it	eq
 8008842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884a:	6010      	str	r0, [r2, #0]
 800884c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008854:	b672      	cpsid	i
 8008856:	f380 8811 	msr	BASEPRI, r0
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	b662      	cpsie	i
 8008864:	f7ff f9d6 	bl	8007c14 <vTaskSwitchContext>
 8008868:	f04f 0000 	mov.w	r0, #0
 800886c:	f380 8811 	msr	BASEPRI, r0
 8008870:	bc09      	pop	{r0, r3}
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6808      	ldr	r0, [r1, #0]
 8008876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887a:	f01e 0f10 	tst.w	lr, #16
 800887e:	bf08      	it	eq
 8008880:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008884:	f380 8809 	msr	PSP, r0
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop

08008890 <pxCurrentTCBConst>:
 8008890:	20005098 	.word	0x20005098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop

08008898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	b672      	cpsid	i
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	b662      	cpsie	i
 80088b2:	607b      	str	r3, [r7, #4]
}
 80088b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088b6:	f7ff f8f1 	bl	8007a9c <xTaskIncrementTick>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088c0:	4b06      	ldr	r3, [pc, #24]	@ (80088dc <SysTick_Handler+0x44>)
 80088c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	f383 8811 	msr	BASEPRI, r3
}
 80088d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <vPortSetupTimerInterrupt+0x34>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <vPortSetupTimerInterrupt+0x38>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088f0:	4b0a      	ldr	r3, [pc, #40]	@ (800891c <vPortSetupTimerInterrupt+0x3c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008920 <vPortSetupTimerInterrupt+0x40>)
 80088f6:	fba2 2303 	umull	r2, r3, r2, r3
 80088fa:	099b      	lsrs	r3, r3, #6
 80088fc:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <vPortSetupTimerInterrupt+0x44>)
 80088fe:	3b01      	subs	r3, #1
 8008900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008902:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <vPortSetupTimerInterrupt+0x34>)
 8008904:	2207      	movs	r2, #7
 8008906:	601a      	str	r2, [r3, #0]
}
 8008908:	bf00      	nop
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	e000e010 	.word	0xe000e010
 8008918:	e000e018 	.word	0xe000e018
 800891c:	20000000 	.word	0x20000000
 8008920:	10624dd3 	.word	0x10624dd3
 8008924:	e000e014 	.word	0xe000e014

08008928 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008928:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008938 <vPortEnableVFP+0x10>
 800892c:	6801      	ldr	r1, [r0, #0]
 800892e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008932:	6001      	str	r1, [r0, #0]
 8008934:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008936:	bf00      	nop
 8008938:	e000ed88 	.word	0xe000ed88

0800893c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008942:	f3ef 8305 	mrs	r3, IPSR
 8008946:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b0f      	cmp	r3, #15
 800894c:	d917      	bls.n	800897e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800894e:	4a1a      	ldr	r2, [pc, #104]	@ (80089b8 <vPortValidateInterruptPriority+0x7c>)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4413      	add	r3, r2
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008958:	4b18      	ldr	r3, [pc, #96]	@ (80089bc <vPortValidateInterruptPriority+0x80>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	7afa      	ldrb	r2, [r7, #11]
 800895e:	429a      	cmp	r2, r3
 8008960:	d20d      	bcs.n	800897e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	b672      	cpsid	i
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	b662      	cpsie	i
 8008976:	607b      	str	r3, [r7, #4]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800897e:	4b10      	ldr	r3, [pc, #64]	@ (80089c0 <vPortValidateInterruptPriority+0x84>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008986:	4b0f      	ldr	r3, [pc, #60]	@ (80089c4 <vPortValidateInterruptPriority+0x88>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d90d      	bls.n	80089aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	b672      	cpsid	i
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	b662      	cpsie	i
 80089a2:	603b      	str	r3, [r7, #0]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <vPortValidateInterruptPriority+0x6a>
	}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	e000e3f0 	.word	0xe000e3f0
 80089bc:	200051c4 	.word	0x200051c4
 80089c0:	e000ed0c 	.word	0xe000ed0c
 80089c4:	200051c8 	.word	0x200051c8

080089c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	@ 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80089d4:	f7fe ff92 	bl	80078fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80089d8:	4b5d      	ldr	r3, [pc, #372]	@ (8008b50 <pvPortMalloc+0x188>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80089e0:	f000 f920 	bl	8008c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80089e4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b54 <pvPortMalloc+0x18c>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 8094 	bne.w	8008b1a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d020      	beq.n	8008a3a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80089f8:	2208      	movs	r2, #8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4413      	add	r3, r2
 80089fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d017      	beq.n	8008a3a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f023 0307 	bic.w	r3, r3, #7
 8008a10:	3308      	adds	r3, #8
 8008a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00d      	beq.n	8008a3a <pvPortMalloc+0x72>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	b672      	cpsid	i
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	b662      	cpsie	i
 8008a32:	617b      	str	r3, [r7, #20]
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop
 8008a38:	e7fd      	b.n	8008a36 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d06c      	beq.n	8008b1a <pvPortMalloc+0x152>
 8008a40:	4b45      	ldr	r3, [pc, #276]	@ (8008b58 <pvPortMalloc+0x190>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d867      	bhi.n	8008b1a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a4a:	4b44      	ldr	r3, [pc, #272]	@ (8008b5c <pvPortMalloc+0x194>)
 8008a4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a4e:	4b43      	ldr	r3, [pc, #268]	@ (8008b5c <pvPortMalloc+0x194>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a54:	e004      	b.n	8008a60 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d903      	bls.n	8008a72 <pvPortMalloc+0xaa>
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1f1      	bne.n	8008a56 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a72:	4b37      	ldr	r3, [pc, #220]	@ (8008b50 <pvPortMalloc+0x188>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d04e      	beq.n	8008b1a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2208      	movs	r2, #8
 8008a82:	4413      	add	r3, r2
 8008a84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	1ad2      	subs	r2, r2, r3
 8008a96:	2308      	movs	r3, #8
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d922      	bls.n	8008ae4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00d      	beq.n	8008acc <pvPortMalloc+0x104>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab4:	b672      	cpsid	i
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	b662      	cpsie	i
 8008ac4:	613b      	str	r3, [r7, #16]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ade:	69b8      	ldr	r0, [r7, #24]
 8008ae0:	f000 f902 	bl	8008ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b58 <pvPortMalloc+0x190>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	4a1a      	ldr	r2, [pc, #104]	@ (8008b58 <pvPortMalloc+0x190>)
 8008af0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008af2:	4b19      	ldr	r3, [pc, #100]	@ (8008b58 <pvPortMalloc+0x190>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b60 <pvPortMalloc+0x198>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d203      	bcs.n	8008b06 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008afe:	4b16      	ldr	r3, [pc, #88]	@ (8008b58 <pvPortMalloc+0x190>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <pvPortMalloc+0x198>)
 8008b04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	4b12      	ldr	r3, [pc, #72]	@ (8008b54 <pvPortMalloc+0x18c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b1a:	f7fe fefd 	bl	8007918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00d      	beq.n	8008b44 <pvPortMalloc+0x17c>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2c:	b672      	cpsid	i
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	b662      	cpsie	i
 8008b3c:	60fb      	str	r3, [r7, #12]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <pvPortMalloc+0x178>
	return pvReturn;
 8008b44:	69fb      	ldr	r3, [r7, #28]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3728      	adds	r7, #40	@ 0x28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	2000b4e4 	.word	0x2000b4e4
 8008b54:	2000b4f0 	.word	0x2000b4f0
 8008b58:	2000b4e8 	.word	0x2000b4e8
 8008b5c:	2000b4dc 	.word	0x2000b4dc
 8008b60:	2000b4ec 	.word	0x2000b4ec

08008b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d04e      	beq.n	8008c14 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b76:	2308      	movs	r3, #8
 8008b78:	425b      	negs	r3, r3
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b24      	ldr	r3, [pc, #144]	@ (8008c1c <vPortFree+0xb8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10d      	bne.n	8008bae <vPortFree+0x4a>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	b672      	cpsid	i
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	b662      	cpsie	i
 8008ba6:	60fb      	str	r3, [r7, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00d      	beq.n	8008bd2 <vPortFree+0x6e>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	b672      	cpsid	i
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	b662      	cpsie	i
 8008bca:	60bb      	str	r3, [r7, #8]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	4b11      	ldr	r3, [pc, #68]	@ (8008c1c <vPortFree+0xb8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d019      	beq.n	8008c14 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d115      	bne.n	8008c14 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <vPortFree+0xb8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	401a      	ands	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008bf8:	f7fe fe80 	bl	80078fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <vPortFree+0xbc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4413      	add	r3, r2
 8008c06:	4a06      	ldr	r2, [pc, #24]	@ (8008c20 <vPortFree+0xbc>)
 8008c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c0a:	6938      	ldr	r0, [r7, #16]
 8008c0c:	f000 f86c 	bl	8008ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c10:	f7fe fe82 	bl	8007918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c14:	bf00      	nop
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	2000b4f0 	.word	0x2000b4f0
 8008c20:	2000b4e8 	.word	0x2000b4e8

08008c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c2a:	f246 3310 	movw	r3, #25360	@ 0x6310
 8008c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <prvHeapInit+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00c      	beq.n	8008c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3307      	adds	r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0307 	bic.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	4a1f      	ldr	r2, [pc, #124]	@ (8008cd0 <prvHeapInit+0xac>)
 8008c54:	4413      	add	r3, r2
 8008c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd4 <prvHeapInit+0xb0>)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c62:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <prvHeapInit+0xb0>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c70:	2208      	movs	r2, #8
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0307 	bic.w	r3, r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4a15      	ldr	r2, [pc, #84]	@ (8008cd8 <prvHeapInit+0xb4>)
 8008c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c86:	4b14      	ldr	r3, [pc, #80]	@ (8008cd8 <prvHeapInit+0xb4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c8e:	4b12      	ldr	r3, [pc, #72]	@ (8008cd8 <prvHeapInit+0xb4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <prvHeapInit+0xb4>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8008cdc <prvHeapInit+0xb8>)
 8008cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	4a09      	ldr	r2, [pc, #36]	@ (8008ce0 <prvHeapInit+0xbc>)
 8008cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cbc:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <prvHeapInit+0xc0>)
 8008cbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008cc2:	601a      	str	r2, [r3, #0]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	200051cc 	.word	0x200051cc
 8008cd4:	2000b4dc 	.word	0x2000b4dc
 8008cd8:	2000b4e4 	.word	0x2000b4e4
 8008cdc:	2000b4ec 	.word	0x2000b4ec
 8008ce0:	2000b4e8 	.word	0x2000b4e8
 8008ce4:	2000b4f0 	.word	0x2000b4f0

08008ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008cf0:	4b28      	ldr	r3, [pc, #160]	@ (8008d94 <prvInsertBlockIntoFreeList+0xac>)
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e002      	b.n	8008cfc <prvInsertBlockIntoFreeList+0x14>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d8f7      	bhi.n	8008cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d108      	bne.n	8008d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	441a      	add	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d118      	bne.n	8008d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b15      	ldr	r3, [pc, #84]	@ (8008d98 <prvInsertBlockIntoFreeList+0xb0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d00d      	beq.n	8008d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e008      	b.n	8008d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d66:	4b0c      	ldr	r3, [pc, #48]	@ (8008d98 <prvInsertBlockIntoFreeList+0xb0>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	e003      	b.n	8008d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d002      	beq.n	8008d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	2000b4dc 	.word	0x2000b4dc
 8008d98:	2000b4e4 	.word	0x2000b4e4

08008d9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	330c      	adds	r3, #12
 8008dac:	461a      	mov	r2, r3
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f002 fb67 	bl	800b484 <tcpip_send_msg_wait_sem>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <netconn_apimsg+0x2e>
    return apimsg->err;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008dc8:	e001      	b.n	8008dce <netconn_apimsg+0x32>
  }
  return err;
 8008dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08c      	sub	sp, #48	@ 0x30
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	603a      	str	r2, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	460b      	mov	r3, r1
 8008de6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 f951 	bl	800a094 <netconn_alloc>
 8008df2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d054      	beq.n	8008ea4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008dfa:	79bb      	ldrb	r3, [r7, #6]
 8008dfc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4619      	mov	r1, r3
 8008e08:	4829      	ldr	r0, [pc, #164]	@ (8008eb0 <netconn_new_with_proto_and_callback+0xd8>)
 8008e0a:	f7ff ffc7 	bl	8008d9c <netconn_apimsg>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008e14:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d043      	beq.n	8008ea4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <netconn_new_with_proto_and_callback+0x58>
 8008e24:	4b23      	ldr	r3, [pc, #140]	@ (8008eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8008e26:	22a3      	movs	r2, #163	@ 0xa3
 8008e28:	4923      	ldr	r1, [pc, #140]	@ (8008eb8 <netconn_new_with_proto_and_callback+0xe0>)
 8008e2a:	4824      	ldr	r0, [pc, #144]	@ (8008ebc <netconn_new_with_proto_and_callback+0xe4>)
 8008e2c:	f00e fd34 	bl	8017898 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	3310      	adds	r3, #16
 8008e34:	4618      	mov	r0, r3
 8008e36:	f00e faf6 	bl	8017426 <sys_mbox_valid>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <netconn_new_with_proto_and_callback+0x74>
 8008e40:	4b1c      	ldr	r3, [pc, #112]	@ (8008eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8008e42:	22a4      	movs	r2, #164	@ 0xa4
 8008e44:	491e      	ldr	r1, [pc, #120]	@ (8008ec0 <netconn_new_with_proto_and_callback+0xe8>)
 8008e46:	481d      	ldr	r0, [pc, #116]	@ (8008ebc <netconn_new_with_proto_and_callback+0xe4>)
 8008e48:	f00e fd26 	bl	8017898 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4e:	3314      	adds	r3, #20
 8008e50:	4618      	mov	r0, r3
 8008e52:	f00e fae8 	bl	8017426 <sys_mbox_valid>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d005      	beq.n	8008e68 <netconn_new_with_proto_and_callback+0x90>
 8008e5c:	4b15      	ldr	r3, [pc, #84]	@ (8008eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8008e5e:	22a6      	movs	r2, #166	@ 0xa6
 8008e60:	4918      	ldr	r1, [pc, #96]	@ (8008ec4 <netconn_new_with_proto_and_callback+0xec>)
 8008e62:	4816      	ldr	r0, [pc, #88]	@ (8008ebc <netconn_new_with_proto_and_callback+0xe4>)
 8008e64:	f00e fd18 	bl	8017898 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f00e fb6b 	bl	8017548 <sys_sem_valid>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d105      	bne.n	8008e84 <netconn_new_with_proto_and_callback+0xac>
 8008e78:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8008e7a:	22a9      	movs	r2, #169	@ 0xa9
 8008e7c:	4912      	ldr	r1, [pc, #72]	@ (8008ec8 <netconn_new_with_proto_and_callback+0xf0>)
 8008e7e:	480f      	ldr	r0, [pc, #60]	@ (8008ebc <netconn_new_with_proto_and_callback+0xe4>)
 8008e80:	f00e fd0a 	bl	8017898 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e86:	330c      	adds	r3, #12
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f00e fb50 	bl	801752e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	3310      	adds	r3, #16
 8008e92:	4618      	mov	r0, r3
 8008e94:	f00e fa40 	bl	8017318 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008e98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e9a:	2007      	movs	r0, #7
 8008e9c:	f003 fef0 	bl	800cc80 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e000      	b.n	8008ea6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3730      	adds	r7, #48	@ 0x30
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	0800a069 	.word	0x0800a069
 8008eb4:	08018d08 	.word	0x08018d08
 8008eb8:	08018d3c 	.word	0x08018d3c
 8008ebc:	08018d60 	.word	0x08018d60
 8008ec0:	08018d88 	.word	0x08018d88
 8008ec4:	08018da0 	.word	0x08018da0
 8008ec8:	08018dc4 	.word	0x08018dc4

08008ecc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	@ 0x30
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	e014      	b.n	8008f08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008ee2:	2329      	movs	r3, #41	@ 0x29
 8008ee4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	4619      	mov	r1, r3
 8008eec:	4808      	ldr	r0, [pc, #32]	@ (8008f10 <netconn_prepare_delete+0x44>)
 8008eee:	f7ff ff55 	bl	8008d9c <netconn_apimsg>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <netconn_prepare_delete+0x3a>
    return err;
 8008f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008f04:	e000      	b.n	8008f08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3730      	adds	r7, #48	@ 0x30
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	0800a5d5 	.word	0x0800a5d5

08008f14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <netconn_delete+0x12>
    return ERR_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e00d      	b.n	8008f42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff ffd0 	bl	8008ecc <netconn_prepare_delete>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <netconn_delete+0x2a>
    netconn_free(conn);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 f919 	bl	800a170 <netconn_free>
  }
  return err;
 8008f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08e      	sub	sp, #56	@ 0x38
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d109      	bne.n	8008f74 <netconn_bind+0x28>
 8008f60:	4b11      	ldr	r3, [pc, #68]	@ (8008fa8 <netconn_bind+0x5c>)
 8008f62:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008f66:	4911      	ldr	r1, [pc, #68]	@ (8008fac <netconn_bind+0x60>)
 8008f68:	4811      	ldr	r0, [pc, #68]	@ (8008fb0 <netconn_bind+0x64>)
 8008f6a:	f00e fc95 	bl	8017898 <iprintf>
 8008f6e:	f06f 030f 	mvn.w	r3, #15
 8008f72:	e015      	b.n	8008fa0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb4 <netconn_bind+0x68>)
 8008f7c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f86:	88fb      	ldrh	r3, [r7, #6]
 8008f88:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4809      	ldr	r0, [pc, #36]	@ (8008fb8 <netconn_bind+0x6c>)
 8008f92:	f7ff ff03 	bl	8008d9c <netconn_apimsg>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3738      	adds	r7, #56	@ 0x38
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	08018d08 	.word	0x08018d08
 8008fac:	08018e40 	.word	0x08018e40
 8008fb0:	08018d60 	.word	0x08018d60
 8008fb4:	0801d1f0 	.word	0x0801d1f0
 8008fb8:	0800a79d 	.word	0x0800a79d

08008fbc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08c      	sub	sp, #48	@ 0x30
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d109      	bne.n	8008fe2 <netconn_listen_with_backlog+0x26>
 8008fce:	4b0d      	ldr	r3, [pc, #52]	@ (8009004 <netconn_listen_with_backlog+0x48>)
 8008fd0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008fd4:	490c      	ldr	r1, [pc, #48]	@ (8009008 <netconn_listen_with_backlog+0x4c>)
 8008fd6:	480d      	ldr	r0, [pc, #52]	@ (800900c <netconn_listen_with_backlog+0x50>)
 8008fd8:	f00e fc5e 	bl	8017898 <iprintf>
 8008fdc:	f06f 030f 	mvn.w	r3, #15
 8008fe0:	e00c      	b.n	8008ffc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008fe6:	f107 030c 	add.w	r3, r7, #12
 8008fea:	4619      	mov	r1, r3
 8008fec:	4808      	ldr	r0, [pc, #32]	@ (8009010 <netconn_listen_with_backlog+0x54>)
 8008fee:	f7ff fed5 	bl	8008d9c <netconn_apimsg>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008ff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3730      	adds	r7, #48	@ 0x30
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	08018d08 	.word	0x08018d08
 8009008:	08018ec0 	.word	0x08018ec0
 800900c:	08018d60 	.word	0x08018d60
 8009010:	0800a811 	.word	0x0800a811

08009014 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d109      	bne.n	8009038 <netconn_accept+0x24>
 8009024:	4b3d      	ldr	r3, [pc, #244]	@ (800911c <netconn_accept+0x108>)
 8009026:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800902a:	493d      	ldr	r1, [pc, #244]	@ (8009120 <netconn_accept+0x10c>)
 800902c:	483d      	ldr	r0, [pc, #244]	@ (8009124 <netconn_accept+0x110>)
 800902e:	f00e fc33 	bl	8017898 <iprintf>
 8009032:	f06f 030f 	mvn.w	r3, #15
 8009036:	e06c      	b.n	8009112 <netconn_accept+0xfe>
  *new_conn = NULL;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d109      	bne.n	8009058 <netconn_accept+0x44>
 8009044:	4b35      	ldr	r3, [pc, #212]	@ (800911c <netconn_accept+0x108>)
 8009046:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800904a:	4937      	ldr	r1, [pc, #220]	@ (8009128 <netconn_accept+0x114>)
 800904c:	4835      	ldr	r0, [pc, #212]	@ (8009124 <netconn_accept+0x110>)
 800904e:	f00e fc23 	bl	8017898 <iprintf>
 8009052:	f06f 030f 	mvn.w	r3, #15
 8009056:	e05c      	b.n	8009112 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb9a 	bl	8009792 <netconn_err>
 800905e:	4603      	mov	r3, r0
 8009060:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800906a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800906e:	e050      	b.n	8009112 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3314      	adds	r3, #20
 8009074:	4618      	mov	r0, r3
 8009076:	f00e f9d6 	bl	8017426 <sys_mbox_valid>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <netconn_accept+0x78>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7f1b      	ldrb	r3, [r3, #28]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d002      	beq.n	8009092 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800908c:	f06f 030e 	mvn.w	r3, #14
 8009090:	e03f      	b.n	8009112 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	7f1b      	ldrb	r3, [r3, #28]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3314      	adds	r3, #20
 80090a2:	f107 020c 	add.w	r2, r7, #12
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f00e f9a0 	bl	80173ee <sys_arch_mbox_tryfetch>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d10a      	bne.n	80090cc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80090b6:	f06f 0306 	mvn.w	r3, #6
 80090ba:	e02a      	b.n	8009112 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3314      	adds	r3, #20
 80090c0:	f107 010c 	add.w	r1, r7, #12
 80090c4:	2200      	movs	r2, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f00e f952 	bl	8017370 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <netconn_accept+0xcc>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	2200      	movs	r2, #0
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f107 0213 	add.w	r2, r7, #19
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fba3 	bl	8009834 <lwip_netconn_is_err_msg>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80090f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090f8:	e00b      	b.n	8009112 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009100:	f06f 030e 	mvn.w	r3, #14
 8009104:	e005      	b.n	8009112 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009110:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08018d08 	.word	0x08018d08
 8009120:	08018ee0 	.word	0x08018ee0
 8009124:	08018d60 	.word	0x08018d60
 8009128:	08018f00 	.word	0x08018f00

0800912c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <netconn_recv_data+0x2c>
 8009144:	4b58      	ldr	r3, [pc, #352]	@ (80092a8 <netconn_recv_data+0x17c>)
 8009146:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800914a:	4958      	ldr	r1, [pc, #352]	@ (80092ac <netconn_recv_data+0x180>)
 800914c:	4858      	ldr	r0, [pc, #352]	@ (80092b0 <netconn_recv_data+0x184>)
 800914e:	f00e fba3 	bl	8017898 <iprintf>
 8009152:	f06f 030f 	mvn.w	r3, #15
 8009156:	e0a2      	b.n	800929e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <netconn_recv_data+0x4c>
 8009164:	4b50      	ldr	r3, [pc, #320]	@ (80092a8 <netconn_recv_data+0x17c>)
 8009166:	f240 224a 	movw	r2, #586	@ 0x24a
 800916a:	4952      	ldr	r1, [pc, #328]	@ (80092b4 <netconn_recv_data+0x188>)
 800916c:	4850      	ldr	r0, [pc, #320]	@ (80092b0 <netconn_recv_data+0x184>)
 800916e:	f00e fb93 	bl	8017898 <iprintf>
 8009172:	f06f 030f 	mvn.w	r3, #15
 8009176:	e092      	b.n	800929e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f00e f952 	bl	8017426 <sys_mbox_valid>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10e      	bne.n	80091a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f000 fb02 	bl	8009792 <netconn_err>
 800918e:	4603      	mov	r3, r0
 8009190:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009192:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800919a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800919e:	e07e      	b.n	800929e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80091a0:	f06f 030a 	mvn.w	r3, #10
 80091a4:	e07b      	b.n	800929e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	7f1b      	ldrb	r3, [r3, #28]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10f      	bne.n	80091d2 <netconn_recv_data+0xa6>
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7f1b      	ldrb	r3, [r3, #28]
 80091c0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d023      	beq.n	800921a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3310      	adds	r3, #16
 80091d6:	f107 0218 	add.w	r2, r7, #24
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f00e f906 	bl	80173ee <sys_arch_mbox_tryfetch>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d11f      	bne.n	800922a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 fad1 	bl	8009792 <netconn_err>
 80091f0:	4603      	mov	r3, r0
 80091f2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80091f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80091fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009200:	e04d      	b.n	800929e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	7f1b      	ldrb	r3, [r3, #28]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800920e:	f06f 030a 	mvn.w	r3, #10
 8009212:	e044      	b.n	800929e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009214:	f06f 0306 	mvn.w	r3, #6
 8009218:	e041      	b.n	800929e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3310      	adds	r3, #16
 800921e:	f107 0118 	add.w	r1, r7, #24
 8009222:	2200      	movs	r2, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f00e f8a3 	bl	8017370 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009232:	2b10      	cmp	r3, #16
 8009234:	d117      	bne.n	8009266 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f107 0217 	add.w	r2, r7, #23
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f000 faf8 	bl	8009834 <lwip_netconn_is_err_msg>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800924a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800924e:	f113 0f0f 	cmn.w	r3, #15
 8009252:	d101      	bne.n	8009258 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	e022      	b.n	800929e <netconn_recv_data+0x172>
      }
      return err;
 8009258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800925c:	e01f      	b.n	800929e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	891b      	ldrh	r3, [r3, #8]
 8009262:	83fb      	strh	r3, [r7, #30]
 8009264:	e00d      	b.n	8009282 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <netconn_recv_data+0x14e>
 800926c:	4b0e      	ldr	r3, [pc, #56]	@ (80092a8 <netconn_recv_data+0x17c>)
 800926e:	f240 2291 	movw	r2, #657	@ 0x291
 8009272:	4911      	ldr	r1, [pc, #68]	@ (80092b8 <netconn_recv_data+0x18c>)
 8009274:	480e      	ldr	r0, [pc, #56]	@ (80092b0 <netconn_recv_data+0x184>)
 8009276:	f00e fb0f 	bl	8017898 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	891b      	ldrh	r3, [r3, #8]
 8009280:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	d005      	beq.n	8009296 <netconn_recv_data+0x16a>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800928e:	8bfa      	ldrh	r2, [r7, #30]
 8009290:	2101      	movs	r1, #1
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	08018d08 	.word	0x08018d08
 80092ac:	08018f20 	.word	0x08018f20
 80092b0:	08018d60 	.word	0x08018d60
 80092b4:	08018f40 	.word	0x08018f40
 80092b8:	08018f5c 	.word	0x08018f5c

080092bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <netconn_tcp_recvd_msg+0x1e>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d009      	beq.n	80092ee <netconn_tcp_recvd_msg+0x32>
 80092da:	4b0c      	ldr	r3, [pc, #48]	@ (800930c <netconn_tcp_recvd_msg+0x50>)
 80092dc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80092e0:	490b      	ldr	r1, [pc, #44]	@ (8009310 <netconn_tcp_recvd_msg+0x54>)
 80092e2:	480c      	ldr	r0, [pc, #48]	@ (8009314 <netconn_tcp_recvd_msg+0x58>)
 80092e4:	f00e fad8 	bl	8017898 <iprintf>
 80092e8:	f06f 030f 	mvn.w	r3, #15
 80092ec:	e00a      	b.n	8009304 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	4806      	ldr	r0, [pc, #24]	@ (8009318 <netconn_tcp_recvd_msg+0x5c>)
 80092fe:	f7ff fd4d 	bl	8008d9c <netconn_apimsg>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	08018d08 	.word	0x08018d08
 8009310:	08018f68 	.word	0x08018f68
 8009314:	08018d60 	.word	0x08018d60
 8009318:	0800a9db 	.word	0x0800a9db

0800931c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b090      	sub	sp, #64	@ 0x40
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3310      	adds	r3, #16
 800932e:	4618      	mov	r0, r3
 8009330:	f00e f879 	bl	8017426 <sys_mbox_valid>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800933a:	f06f 030a 	mvn.w	r3, #10
 800933e:	e06d      	b.n	800941c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	7f1b      	ldrb	r3, [r3, #28]
 8009344:	b25b      	sxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	da07      	bge.n	800935a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	7f1b      	ldrb	r3, [r3, #28]
 800934e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009352:	b2da      	uxtb	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009358:	e039      	b.n	80093ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	461a      	mov	r2, r3
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff fee3 	bl	800912c <netconn_recv_data>
 8009366:	4603      	mov	r3, r0
 8009368:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800936c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009374:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009378:	e050      	b.n	800941c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10e      	bne.n	80093a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <netconn_recv_data_tcp+0x7a>
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	e000      	b.n	8009398 <netconn_recv_data_tcp+0x7c>
 8009396:	2301      	movs	r3, #1
 8009398:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800939a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800939c:	f107 0214 	add.w	r2, r7, #20
 80093a0:	4619      	mov	r1, r3
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ff8a 	bl	80092bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d134      	bne.n	8009418 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	f003 0310 	and.w	r3, r3, #16
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	7f1b      	ldrb	r3, [r3, #28]
 80093bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80093c6:	f06f 0306 	mvn.w	r3, #6
 80093ca:	e027      	b.n	800941c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80093cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <netconn_recv_data_tcp+0xc6>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093da:	2200      	movs	r2, #0
 80093dc:	2101      	movs	r1, #1
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10f      	bne.n	800940a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f9d1 	bl	8009792 <netconn_err>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80093f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <netconn_recv_data_tcp+0xe8>
          return err;
 80093fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009402:	e00b      	b.n	800941c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009404:	f06f 030d 	mvn.w	r3, #13
 8009408:	e008      	b.n	800941c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800940a:	2101      	movs	r1, #1
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 f983 	bl	8009718 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009412:	f06f 030e 	mvn.w	r3, #14
 8009416:	e001      	b.n	800941c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009418:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800941c:	4618      	mov	r0, r3
 800941e:	3740      	adds	r7, #64	@ 0x40
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d109      	bne.n	800944c <netconn_recv+0x28>
 8009438:	4b32      	ldr	r3, [pc, #200]	@ (8009504 <netconn_recv+0xe0>)
 800943a:	f240 3263 	movw	r2, #867	@ 0x363
 800943e:	4932      	ldr	r1, [pc, #200]	@ (8009508 <netconn_recv+0xe4>)
 8009440:	4832      	ldr	r0, [pc, #200]	@ (800950c <netconn_recv+0xe8>)
 8009442:	f00e fa29 	bl	8017898 <iprintf>
 8009446:	f06f 030f 	mvn.w	r3, #15
 800944a:	e056      	b.n	80094fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <netconn_recv+0x48>
 8009458:	4b2a      	ldr	r3, [pc, #168]	@ (8009504 <netconn_recv+0xe0>)
 800945a:	f240 3265 	movw	r2, #869	@ 0x365
 800945e:	492c      	ldr	r1, [pc, #176]	@ (8009510 <netconn_recv+0xec>)
 8009460:	482a      	ldr	r0, [pc, #168]	@ (800950c <netconn_recv+0xe8>)
 8009462:	f00e fa19 	bl	8017898 <iprintf>
 8009466:	f06f 030f 	mvn.w	r3, #15
 800946a:	e046      	b.n	80094fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009474:	2b10      	cmp	r3, #16
 8009476:	d13a      	bne.n	80094ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800947c:	2006      	movs	r0, #6
 800947e:	f003 fb89 	bl	800cb94 <memp_malloc>
 8009482:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <netconn_recv+0x6c>
      return ERR_MEM;
 800948a:	f04f 33ff 	mov.w	r3, #4294967295
 800948e:	e034      	b.n	80094fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009490:	f107 030c 	add.w	r3, r7, #12
 8009494:	2200      	movs	r2, #0
 8009496:	4619      	mov	r1, r3
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7ff ff3f 	bl	800931c <netconn_recv_data_tcp>
 800949e:	4603      	mov	r3, r0
 80094a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80094a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d006      	beq.n	80094b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80094aa:	6979      	ldr	r1, [r7, #20]
 80094ac:	2006      	movs	r0, #6
 80094ae:	f003 fbe7 	bl	800cc80 <memp_free>
      return err;
 80094b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094b6:	e020      	b.n	80094fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <netconn_recv+0xa8>
 80094be:	4b11      	ldr	r3, [pc, #68]	@ (8009504 <netconn_recv+0xe0>)
 80094c0:	f240 3279 	movw	r2, #889	@ 0x379
 80094c4:	4913      	ldr	r1, [pc, #76]	@ (8009514 <netconn_recv+0xf0>)
 80094c6:	4811      	ldr	r0, [pc, #68]	@ (800950c <netconn_recv+0xe8>)
 80094c8:	f00e f9e6 	bl	8017898 <iprintf>

    buf->p = p;
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e005      	b.n	80094fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80094ee:	2200      	movs	r2, #0
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7ff fe1a 	bl	800912c <netconn_recv_data>
 80094f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	08018d08 	.word	0x08018d08
 8009508:	08018f20 	.word	0x08018f20
 800950c:	08018d60 	.word	0x08018d60
 8009510:	08018f40 	.word	0x08018f40
 8009514:	08018fb8 	.word	0x08018fb8

08009518 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08c      	sub	sp, #48	@ 0x30
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <netconn_send+0x24>
 8009528:	4b0e      	ldr	r3, [pc, #56]	@ (8009564 <netconn_send+0x4c>)
 800952a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800952e:	490e      	ldr	r1, [pc, #56]	@ (8009568 <netconn_send+0x50>)
 8009530:	480e      	ldr	r0, [pc, #56]	@ (800956c <netconn_send+0x54>)
 8009532:	f00e f9b1 	bl	8017898 <iprintf>
 8009536:	f06f 030f 	mvn.w	r3, #15
 800953a:	e00e      	b.n	800955a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009544:	f107 030c 	add.w	r3, r7, #12
 8009548:	4619      	mov	r1, r3
 800954a:	4809      	ldr	r0, [pc, #36]	@ (8009570 <netconn_send+0x58>)
 800954c:	f7ff fc26 	bl	8008d9c <netconn_apimsg>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009556:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800955a:	4618      	mov	r0, r3
 800955c:	3730      	adds	r7, #48	@ 0x30
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	08018d08 	.word	0x08018d08
 8009568:	08018fc4 	.word	0x08018fc4
 800956c:	08018d60 	.word	0x08018d60
 8009570:	0800a941 	.word	0x0800a941

08009574 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af02      	add	r7, sp, #8
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800958a:	78fa      	ldrb	r2, [r7, #3]
 800958c:	f107 0110 	add.w	r1, r7, #16
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	4613      	mov	r3, r2
 8009596:	2201      	movs	r2, #1
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f805 	bl	80095a8 <netconn_write_vectors_partly>
 800959e:	4603      	mov	r3, r0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b092      	sub	sp, #72	@ 0x48
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4611      	mov	r1, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	460b      	mov	r3, r1
 80095b8:	80fb      	strh	r3, [r7, #6]
 80095ba:	4613      	mov	r3, r2
 80095bc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d109      	bne.n	80095d8 <netconn_write_vectors_partly+0x30>
 80095c4:	4b4e      	ldr	r3, [pc, #312]	@ (8009700 <netconn_write_vectors_partly+0x158>)
 80095c6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80095ca:	494e      	ldr	r1, [pc, #312]	@ (8009704 <netconn_write_vectors_partly+0x15c>)
 80095cc:	484e      	ldr	r0, [pc, #312]	@ (8009708 <netconn_write_vectors_partly+0x160>)
 80095ce:	f00e f963 	bl	8017898 <iprintf>
 80095d2:	f06f 030f 	mvn.w	r3, #15
 80095d6:	e08e      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d009      	beq.n	80095f8 <netconn_write_vectors_partly+0x50>
 80095e4:	4b46      	ldr	r3, [pc, #280]	@ (8009700 <netconn_write_vectors_partly+0x158>)
 80095e6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80095ea:	4948      	ldr	r1, [pc, #288]	@ (800970c <netconn_write_vectors_partly+0x164>)
 80095ec:	4846      	ldr	r0, [pc, #280]	@ (8009708 <netconn_write_vectors_partly+0x160>)
 80095ee:	f00e f953 	bl	8017898 <iprintf>
 80095f2:	f06f 0305 	mvn.w	r3, #5
 80095f6:	e07e      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	7f1b      	ldrb	r3, [r3, #28]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d104      	bne.n	800960e <netconn_write_vectors_partly+0x66>
 8009604:	797b      	ldrb	r3, [r7, #5]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <netconn_write_vectors_partly+0x6a>
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <netconn_write_vectors_partly+0x6c>
 8009612:	2300      	movs	r3, #0
 8009614:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009618:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <netconn_write_vectors_partly+0x84>
 8009620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009626:	f06f 0305 	mvn.w	r3, #5
 800962a:	e064      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009630:	2300      	movs	r3, #0
 8009632:	643b      	str	r3, [r7, #64]	@ 0x40
 8009634:	e015      	b.n	8009662 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009642:	4413      	add	r3, r2
 8009644:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4413      	add	r3, r2
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009652:	429a      	cmp	r2, r3
 8009654:	d202      	bcs.n	800965c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009656:	f06f 0305 	mvn.w	r3, #5
 800965a:	e04c      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800965c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800965e:	3301      	adds	r3, #1
 8009660:	643b      	str	r3, [r7, #64]	@ 0x40
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009666:	429a      	cmp	r2, r3
 8009668:	dbe5      	blt.n	8009636 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800966a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	e040      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009676:	2b00      	cmp	r3, #0
 8009678:	da0a      	bge.n	8009690 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800967a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009680:	f06f 0305 	mvn.w	r3, #5
 8009684:	e037      	b.n	80096f6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009686:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800968a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80096a0:	797b      	ldrb	r3, [r7, #5]
 80096a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80096a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	4619      	mov	r1, r3
 80096b4:	4816      	ldr	r0, [pc, #88]	@ (8009710 <netconn_write_vectors_partly+0x168>)
 80096b6:	f7ff fb71 	bl	8008d9c <netconn_apimsg>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80096c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d114      	bne.n	80096f2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80096c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80096ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80096d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d006      	beq.n	80096f2 <netconn_write_vectors_partly+0x14a>
 80096e4:	4b06      	ldr	r3, [pc, #24]	@ (8009700 <netconn_write_vectors_partly+0x158>)
 80096e6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80096ea:	490a      	ldr	r1, [pc, #40]	@ (8009714 <netconn_write_vectors_partly+0x16c>)
 80096ec:	4806      	ldr	r0, [pc, #24]	@ (8009708 <netconn_write_vectors_partly+0x160>)
 80096ee:	f00e f8d3 	bl	8017898 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80096f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3748      	adds	r7, #72	@ 0x48
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	08018d08 	.word	0x08018d08
 8009704:	08018fe0 	.word	0x08018fe0
 8009708:	08018d60 	.word	0x08018d60
 800970c:	08018ffc 	.word	0x08018ffc
 8009710:	0800addd 	.word	0x0800addd
 8009714:	08019020 	.word	0x08019020

08009718 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08c      	sub	sp, #48	@ 0x30
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <netconn_close_shutdown+0x26>
 800972a:	4b0f      	ldr	r3, [pc, #60]	@ (8009768 <netconn_close_shutdown+0x50>)
 800972c:	f240 4247 	movw	r2, #1095	@ 0x447
 8009730:	490e      	ldr	r1, [pc, #56]	@ (800976c <netconn_close_shutdown+0x54>)
 8009732:	480f      	ldr	r0, [pc, #60]	@ (8009770 <netconn_close_shutdown+0x58>)
 8009734:	f00e f8b0 	bl	8017898 <iprintf>
 8009738:	f06f 030f 	mvn.w	r3, #15
 800973c:	e010      	b.n	8009760 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009746:	2329      	movs	r3, #41	@ 0x29
 8009748:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4619      	mov	r1, r3
 8009750:	4808      	ldr	r0, [pc, #32]	@ (8009774 <netconn_close_shutdown+0x5c>)
 8009752:	f7ff fb23 	bl	8008d9c <netconn_apimsg>
 8009756:	4603      	mov	r3, r0
 8009758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800975c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009760:	4618      	mov	r0, r3
 8009762:	3730      	adds	r7, #48	@ 0x30
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08018d08 	.word	0x08018d08
 800976c:	08019044 	.word	0x08019044
 8009770:	08018d60 	.word	0x08018d60
 8009774:	0800aef5 	.word	0x0800aef5

08009778 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009780:	2103      	movs	r1, #3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7ff ffc8 	bl	8009718 <netconn_close_shutdown>
 8009788:	4603      	mov	r3, r0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <netconn_err+0x12>
    return ERR_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	e00d      	b.n	80097c0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80097a4:	f00d ff5a 	bl	801765c <sys_arch_protect>
 80097a8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7a1b      	ldrb	r3, [r3, #8]
 80097ae:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f00d ff5e 	bl	8017678 <sys_arch_unprotect>
  return err;
 80097bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80097d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d6:	f113 0f0d 	cmn.w	r3, #13
 80097da:	d009      	beq.n	80097f0 <lwip_netconn_err_to_msg+0x28>
 80097dc:	f113 0f0d 	cmn.w	r3, #13
 80097e0:	dc0c      	bgt.n	80097fc <lwip_netconn_err_to_msg+0x34>
 80097e2:	f113 0f0f 	cmn.w	r3, #15
 80097e6:	d007      	beq.n	80097f8 <lwip_netconn_err_to_msg+0x30>
 80097e8:	f113 0f0e 	cmn.w	r3, #14
 80097ec:	d002      	beq.n	80097f4 <lwip_netconn_err_to_msg+0x2c>
 80097ee:	e005      	b.n	80097fc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80097f0:	4b0a      	ldr	r3, [pc, #40]	@ (800981c <lwip_netconn_err_to_msg+0x54>)
 80097f2:	e00e      	b.n	8009812 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80097f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009820 <lwip_netconn_err_to_msg+0x58>)
 80097f6:	e00c      	b.n	8009812 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80097f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009824 <lwip_netconn_err_to_msg+0x5c>)
 80097fa:	e00a      	b.n	8009812 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80097fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <lwip_netconn_err_to_msg+0x48>
 8009804:	4b08      	ldr	r3, [pc, #32]	@ (8009828 <lwip_netconn_err_to_msg+0x60>)
 8009806:	227d      	movs	r2, #125	@ 0x7d
 8009808:	4908      	ldr	r1, [pc, #32]	@ (800982c <lwip_netconn_err_to_msg+0x64>)
 800980a:	4809      	ldr	r0, [pc, #36]	@ (8009830 <lwip_netconn_err_to_msg+0x68>)
 800980c:	f00e f844 	bl	8017898 <iprintf>
      return NULL;
 8009810:	2300      	movs	r3, #0
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	0801c41c 	.word	0x0801c41c
 8009820:	0801c41d 	.word	0x0801c41d
 8009824:	0801c41e 	.word	0x0801c41e
 8009828:	08019060 	.word	0x08019060
 800982c:	08019094 	.word	0x08019094
 8009830:	080190a4 	.word	0x080190a4

08009834 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <lwip_netconn_is_err_msg+0x1c>
 8009844:	4b12      	ldr	r3, [pc, #72]	@ (8009890 <lwip_netconn_is_err_msg+0x5c>)
 8009846:	2285      	movs	r2, #133	@ 0x85
 8009848:	4912      	ldr	r1, [pc, #72]	@ (8009894 <lwip_netconn_is_err_msg+0x60>)
 800984a:	4813      	ldr	r0, [pc, #76]	@ (8009898 <lwip_netconn_is_err_msg+0x64>)
 800984c:	f00e f824 	bl	8017898 <iprintf>

  if (msg == &netconn_aborted) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a12      	ldr	r2, [pc, #72]	@ (800989c <lwip_netconn_is_err_msg+0x68>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d104      	bne.n	8009862 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	22f3      	movs	r2, #243	@ 0xf3
 800985c:	701a      	strb	r2, [r3, #0]
    return 1;
 800985e:	2301      	movs	r3, #1
 8009860:	e012      	b.n	8009888 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a0e      	ldr	r2, [pc, #56]	@ (80098a0 <lwip_netconn_is_err_msg+0x6c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d104      	bne.n	8009874 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	22f2      	movs	r2, #242	@ 0xf2
 800986e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009870:	2301      	movs	r3, #1
 8009872:	e009      	b.n	8009888 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a0b      	ldr	r2, [pc, #44]	@ (80098a4 <lwip_netconn_is_err_msg+0x70>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d104      	bne.n	8009886 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	22f1      	movs	r2, #241	@ 0xf1
 8009880:	701a      	strb	r2, [r3, #0]
    return 1;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	08019060 	.word	0x08019060
 8009894:	080190cc 	.word	0x080190cc
 8009898:	080190a4 	.word	0x080190a4
 800989c:	0801c41c 	.word	0x0801c41c
 80098a0:	0801c41d 	.word	0x0801c41d
 80098a4:	0801c41e 	.word	0x0801c41e

080098a8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <recv_udp+0x20>
 80098bc:	4b34      	ldr	r3, [pc, #208]	@ (8009990 <recv_udp+0xe8>)
 80098be:	22e5      	movs	r2, #229	@ 0xe5
 80098c0:	4934      	ldr	r1, [pc, #208]	@ (8009994 <recv_udp+0xec>)
 80098c2:	4835      	ldr	r0, [pc, #212]	@ (8009998 <recv_udp+0xf0>)
 80098c4:	f00d ffe8 	bl	8017898 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d105      	bne.n	80098da <recv_udp+0x32>
 80098ce:	4b30      	ldr	r3, [pc, #192]	@ (8009990 <recv_udp+0xe8>)
 80098d0:	22e6      	movs	r2, #230	@ 0xe6
 80098d2:	4932      	ldr	r1, [pc, #200]	@ (800999c <recv_udp+0xf4>)
 80098d4:	4830      	ldr	r0, [pc, #192]	@ (8009998 <recv_udp+0xf0>)
 80098d6:	f00d ffdf 	bl	8017898 <iprintf>
  conn = (struct netconn *)arg;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <recv_udp+0x44>
    pbuf_free(p);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f004 f86f 	bl	800d9c8 <pbuf_free>
    return;
 80098ea:	e04d      	b.n	8009988 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d005      	beq.n	8009902 <recv_udp+0x5a>
 80098f6:	4b26      	ldr	r3, [pc, #152]	@ (8009990 <recv_udp+0xe8>)
 80098f8:	22ee      	movs	r2, #238	@ 0xee
 80098fa:	4929      	ldr	r1, [pc, #164]	@ (80099a0 <recv_udp+0xf8>)
 80098fc:	4826      	ldr	r0, [pc, #152]	@ (8009998 <recv_udp+0xf0>)
 80098fe:	f00d ffcb 	bl	8017898 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	3310      	adds	r3, #16
 8009906:	4618      	mov	r0, r3
 8009908:	f00d fd8d 	bl	8017426 <sys_mbox_valid>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d103      	bne.n	800991a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f004 f858 	bl	800d9c8 <pbuf_free>
    return;
 8009918:	e036      	b.n	8009988 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800991a:	2006      	movs	r0, #6
 800991c:	f003 f93a 	bl	800cb94 <memp_malloc>
 8009920:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <recv_udp+0x88>
    pbuf_free(p);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f004 f84d 	bl	800d9c8 <pbuf_free>
    return;
 800992e:	e02b      	b.n	8009988 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <recv_udp+0xa0>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	e000      	b.n	800994a <recv_udp+0xa2>
 8009948:	2300      	movs	r3, #0
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009952:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	891b      	ldrh	r3, [r3, #8]
 8009958:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3310      	adds	r3, #16
 800995e:	69b9      	ldr	r1, [r7, #24]
 8009960:	4618      	mov	r0, r3
 8009962:	f00d fceb 	bl	801733c <sys_mbox_trypost>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <recv_udp+0xcc>
    netbuf_delete(buf);
 800996c:	69b8      	ldr	r0, [r7, #24]
 800996e:	f001 fb4d 	bl	800b00c <netbuf_delete>
    return;
 8009972:	e009      	b.n	8009988 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009978:	2b00      	cmp	r3, #0
 800997a:	d005      	beq.n	8009988 <recv_udp+0xe0>
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009980:	8afa      	ldrh	r2, [r7, #22]
 8009982:	2100      	movs	r1, #0
 8009984:	69f8      	ldr	r0, [r7, #28]
 8009986:	4798      	blx	r3
  }
}
 8009988:	3720      	adds	r7, #32
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	08019060 	.word	0x08019060
 8009994:	080190d8 	.word	0x080190d8
 8009998:	080190a4 	.word	0x080190a4
 800999c:	080190fc 	.word	0x080190fc
 80099a0:	0801911c 	.word	0x0801911c

080099a4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <recv_tcp+0x22>
 80099b8:	4b36      	ldr	r3, [pc, #216]	@ (8009a94 <recv_tcp+0xf0>)
 80099ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80099be:	4936      	ldr	r1, [pc, #216]	@ (8009a98 <recv_tcp+0xf4>)
 80099c0:	4836      	ldr	r0, [pc, #216]	@ (8009a9c <recv_tcp+0xf8>)
 80099c2:	f00d ff69 	bl	8017898 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <recv_tcp+0x36>
 80099cc:	4b31      	ldr	r3, [pc, #196]	@ (8009a94 <recv_tcp+0xf0>)
 80099ce:	f240 122d 	movw	r2, #301	@ 0x12d
 80099d2:	4933      	ldr	r1, [pc, #204]	@ (8009aa0 <recv_tcp+0xfc>)
 80099d4:	4831      	ldr	r0, [pc, #196]	@ (8009a9c <recv_tcp+0xf8>)
 80099d6:	f00d ff5f 	bl	8017898 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80099da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d006      	beq.n	80099f0 <recv_tcp+0x4c>
 80099e2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a94 <recv_tcp+0xf0>)
 80099e4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80099e8:	492e      	ldr	r1, [pc, #184]	@ (8009aa4 <recv_tcp+0x100>)
 80099ea:	482c      	ldr	r0, [pc, #176]	@ (8009a9c <recv_tcp+0xf8>)
 80099ec:	f00d ff54 	bl	8017898 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <recv_tcp+0x5c>
    return ERR_VAL;
 80099fa:	f06f 0305 	mvn.w	r3, #5
 80099fe:	e045      	b.n	8009a8c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d006      	beq.n	8009a18 <recv_tcp+0x74>
 8009a0a:	4b22      	ldr	r3, [pc, #136]	@ (8009a94 <recv_tcp+0xf0>)
 8009a0c:	f240 1235 	movw	r2, #309	@ 0x135
 8009a10:	4925      	ldr	r1, [pc, #148]	@ (8009aa8 <recv_tcp+0x104>)
 8009a12:	4822      	ldr	r0, [pc, #136]	@ (8009a9c <recv_tcp+0xf8>)
 8009a14:	f00d ff40 	bl	8017898 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3310      	adds	r3, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f00d fd02 	bl	8017426 <sys_mbox_valid>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10d      	bne.n	8009a44 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d008      	beq.n	8009a40 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	891b      	ldrh	r3, [r3, #8]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68b8      	ldr	r0, [r7, #8]
 8009a36:	f004 ffa1 	bl	800e97c <tcp_recved>
      pbuf_free(p);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f003 ffc4 	bl	800d9c8 <pbuf_free>
    }
    return ERR_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	e023      	b.n	8009a8c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d005      	beq.n	8009a56 <recv_tcp+0xb2>
    msg = p;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	891b      	ldrh	r3, [r3, #8]
 8009a52:	83fb      	strh	r3, [r7, #30]
 8009a54:	e003      	b.n	8009a5e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009a56:	4b15      	ldr	r3, [pc, #84]	@ (8009aac <recv_tcp+0x108>)
 8009a58:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	3310      	adds	r3, #16
 8009a62:	69b9      	ldr	r1, [r7, #24]
 8009a64:	4618      	mov	r0, r3
 8009a66:	f00d fc69 	bl	801733c <sys_mbox_trypost>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009a70:	f04f 33ff 	mov.w	r3, #4294967295
 8009a74:	e00a      	b.n	8009a8c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <recv_tcp+0xe6>
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a82:	8bfa      	ldrh	r2, [r7, #30]
 8009a84:	2100      	movs	r1, #0
 8009a86:	6978      	ldr	r0, [r7, #20]
 8009a88:	4798      	blx	r3
  }

  return ERR_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	08019060 	.word	0x08019060
 8009a98:	0801913c 	.word	0x0801913c
 8009a9c:	080190a4 	.word	0x080190a4
 8009aa0:	08019160 	.word	0x08019160
 8009aa4:	08019180 	.word	0x08019180
 8009aa8:	08019198 	.word	0x08019198
 8009aac:	0801c41e 	.word	0x0801c41e

08009ab0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d106      	bne.n	8009ad2 <poll_tcp+0x22>
 8009ac4:	4b29      	ldr	r3, [pc, #164]	@ (8009b6c <poll_tcp+0xbc>)
 8009ac6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009aca:	4929      	ldr	r1, [pc, #164]	@ (8009b70 <poll_tcp+0xc0>)
 8009acc:	4829      	ldr	r0, [pc, #164]	@ (8009b74 <poll_tcp+0xc4>)
 8009ace:	f00d fee3 	bl	8017898 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d104      	bne.n	8009ae4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ada:	2101      	movs	r1, #1
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 ffb1 	bl	800aa44 <lwip_netconn_do_writemore>
 8009ae2:	e016      	b.n	8009b12 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d112      	bne.n	8009b12 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <poll_tcp+0x5a>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	7a5b      	ldrb	r3, [r3, #9]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	7a5a      	ldrb	r2, [r3, #9]
 8009b04:	3a01      	subs	r2, #1
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 fbf7 	bl	800a300 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	7f1b      	ldrb	r3, [r3, #28]
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d021      	beq.n	8009b62 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01d      	beq.n	8009b62 <poll_tcp+0xb2>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009b2e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009b32:	d316      	bcc.n	8009b62 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d810      	bhi.n	8009b62 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	7f1b      	ldrb	r3, [r3, #28]
 8009b44:	f023 0310 	bic.w	r3, r3, #16
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d005      	beq.n	8009b62 <poll_tcp+0xb2>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2102      	movs	r1, #2
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	08019060 	.word	0x08019060
 8009b70:	080191b8 	.word	0x080191b8
 8009b74:	080190a4 	.word	0x080190a4

08009b78 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	4613      	mov	r3, r2
 8009b84:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d106      	bne.n	8009b9e <sent_tcp+0x26>
 8009b90:	4b20      	ldr	r3, [pc, #128]	@ (8009c14 <sent_tcp+0x9c>)
 8009b92:	f240 1293 	movw	r2, #403	@ 0x193
 8009b96:	4920      	ldr	r1, [pc, #128]	@ (8009c18 <sent_tcp+0xa0>)
 8009b98:	4820      	ldr	r0, [pc, #128]	@ (8009c1c <sent_tcp+0xa4>)
 8009b9a:	f00d fe7d 	bl	8017898 <iprintf>

  if (conn) {
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d032      	beq.n	8009c0a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	785b      	ldrb	r3, [r3, #1]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d104      	bne.n	8009bb6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009bac:	2101      	movs	r1, #1
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	f000 ff48 	bl	800aa44 <lwip_netconn_do_writemore>
 8009bb4:	e007      	b.n	8009bc6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	785b      	ldrb	r3, [r3, #1]
 8009bba:	2b04      	cmp	r3, #4
 8009bbc:	d103      	bne.n	8009bc6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	6978      	ldr	r0, [r7, #20]
 8009bc2:	f000 fb9d 	bl	800a300 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01d      	beq.n	8009c0a <sent_tcp+0x92>
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009bd6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009bda:	d316      	bcc.n	8009c0a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d810      	bhi.n	8009c0a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	7f1b      	ldrb	r3, [r3, #28]
 8009bec:	f023 0310 	bic.w	r3, r3, #16
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <sent_tcp+0x92>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c02:	88fa      	ldrh	r2, [r7, #6]
 8009c04:	2102      	movs	r1, #2
 8009c06:	6978      	ldr	r0, [r7, #20]
 8009c08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	08019060 	.word	0x08019060
 8009c18:	080191b8 	.word	0x080191b8
 8009c1c:	080190a4 	.word	0x080190a4

08009c20 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d106      	bne.n	8009c44 <err_tcp+0x24>
 8009c36:	4b5f      	ldr	r3, [pc, #380]	@ (8009db4 <err_tcp+0x194>)
 8009c38:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009c3c:	495e      	ldr	r1, [pc, #376]	@ (8009db8 <err_tcp+0x198>)
 8009c3e:	485f      	ldr	r0, [pc, #380]	@ (8009dbc <err_tcp+0x19c>)
 8009c40:	f00d fe2a 	bl	8017898 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009c44:	f00d fd0a 	bl	801765c <sys_arch_protect>
 8009c48:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	78fa      	ldrb	r2, [r7, #3]
 8009c54:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	7f1b      	ldrb	r3, [r3, #28]
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	785b      	ldrb	r3, [r3, #1]
 8009c68:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009c70:	69b8      	ldr	r0, [r7, #24]
 8009c72:	f00d fd01 	bl	8017678 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <err_tcp+0x6a>
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c82:	2200      	movs	r2, #0
 8009c84:	2104      	movs	r1, #4
 8009c86:	69f8      	ldr	r0, [r7, #28]
 8009c88:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <err_tcp+0x7e>
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c96:	2200      	movs	r2, #0
 8009c98:	2100      	movs	r1, #0
 8009c9a:	69f8      	ldr	r0, [r7, #28]
 8009c9c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d005      	beq.n	8009cb2 <err_tcp+0x92>
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009caa:	2200      	movs	r2, #0
 8009cac:	2102      	movs	r1, #2
 8009cae:	69f8      	ldr	r0, [r7, #28]
 8009cb0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fd86 	bl	80097c8 <lwip_netconn_err_to_msg>
 8009cbc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	3310      	adds	r3, #16
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00d fbaf 	bl	8017426 <sys_mbox_valid>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	6939      	ldr	r1, [r7, #16]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f00d fb31 	bl	801733c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f00d fba1 	bl	8017426 <sys_mbox_valid>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3314      	adds	r3, #20
 8009cee:	6939      	ldr	r1, [r7, #16]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f00d fb23 	bl	801733c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d005      	beq.n	8009d08 <err_tcp+0xe8>
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d002      	beq.n	8009d08 <err_tcp+0xe8>
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d143      	bne.n	8009d90 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	7f1b      	ldrb	r3, [r3, #28]
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf14      	ite	ne
 8009d14:	2301      	movne	r3, #1
 8009d16:	2300      	moveq	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	7f1b      	ldrb	r3, [r3, #28]
 8009d20:	f023 0304 	bic.w	r3, r3, #4
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d13b      	bne.n	8009da8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <err_tcp+0x126>
 8009d38:	4b1e      	ldr	r3, [pc, #120]	@ (8009db4 <err_tcp+0x194>)
 8009d3a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009d3e:	4920      	ldr	r1, [pc, #128]	@ (8009dc0 <err_tcp+0x1a0>)
 8009d40:	481e      	ldr	r0, [pc, #120]	@ (8009dbc <err_tcp+0x19c>)
 8009d42:	f00d fda9 	bl	8017898 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d104      	bne.n	8009d56 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	2200      	movs	r2, #0
 8009d52:	711a      	strb	r2, [r3, #4]
 8009d54:	e003      	b.n	8009d5e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	330c      	adds	r3, #12
 8009d66:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f00d fbed 	bl	8017548 <sys_sem_valid>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d106      	bne.n	8009d82 <err_tcp+0x162>
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <err_tcp+0x194>)
 8009d76:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009d7a:	4912      	ldr	r1, [pc, #72]	@ (8009dc4 <err_tcp+0x1a4>)
 8009d7c:	480f      	ldr	r0, [pc, #60]	@ (8009dbc <err_tcp+0x19c>)
 8009d7e:	f00d fd8b 	bl	8017898 <iprintf>
      conn->current_msg = NULL;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	2200      	movs	r2, #0
 8009d86:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009d88:	68b8      	ldr	r0, [r7, #8]
 8009d8a:	f00d fbc3 	bl	8017514 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009d8e:	e00b      	b.n	8009da8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <err_tcp+0x18a>
 8009d98:	4b06      	ldr	r3, [pc, #24]	@ (8009db4 <err_tcp+0x194>)
 8009d9a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009d9e:	490a      	ldr	r1, [pc, #40]	@ (8009dc8 <err_tcp+0x1a8>)
 8009da0:	4806      	ldr	r0, [pc, #24]	@ (8009dbc <err_tcp+0x19c>)
 8009da2:	f00d fd79 	bl	8017898 <iprintf>
  }
}
 8009da6:	e000      	b.n	8009daa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009da8:	bf00      	nop
}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	08019060 	.word	0x08019060
 8009db8:	080191b8 	.word	0x080191b8
 8009dbc:	080190a4 	.word	0x080190a4
 8009dc0:	080191c8 	.word	0x080191c8
 8009dc4:	080191e4 	.word	0x080191e4
 8009dc8:	08019200 	.word	0x08019200

08009dcc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f005 fcb3 	bl	800f748 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009de2:	490a      	ldr	r1, [pc, #40]	@ (8009e0c <setup_tcp+0x40>)
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f005 fcc1 	bl	800f76c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009dea:	4909      	ldr	r1, [pc, #36]	@ (8009e10 <setup_tcp+0x44>)
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f005 fcdf 	bl	800f7b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009df2:	2202      	movs	r2, #2
 8009df4:	4907      	ldr	r1, [pc, #28]	@ (8009e14 <setup_tcp+0x48>)
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f005 fd36 	bl	800f868 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009dfc:	4906      	ldr	r1, [pc, #24]	@ (8009e18 <setup_tcp+0x4c>)
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f005 fcf8 	bl	800f7f4 <tcp_err>
}
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	080099a5 	.word	0x080099a5
 8009e10:	08009b79 	.word	0x08009b79
 8009e14:	08009ab1 	.word	0x08009ab1
 8009e18:	08009c21 	.word	0x08009c21

08009e1c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009e1c:	b590      	push	{r4, r7, lr}
 8009e1e:	b089      	sub	sp, #36	@ 0x24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <accept_function+0x1e>
    return ERR_VAL;
 8009e34:	f06f 0305 	mvn.w	r3, #5
 8009e38:	e0a1      	b.n	8009f7e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	3314      	adds	r3, #20
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f00d faf1 	bl	8017426 <sys_mbox_valid>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009e4a:	f06f 0305 	mvn.w	r3, #5
 8009e4e:	e096      	b.n	8009f7e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d11b      	bne.n	8009e8e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f103 0414 	add.w	r4, r3, #20
 8009e5c:	f06f 000c 	mvn.w	r0, #12
 8009e60:	f7ff fcb2 	bl	80097c8 <lwip_netconn_err_to_msg>
 8009e64:	4603      	mov	r3, r0
 8009e66:	4619      	mov	r1, r3
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f00d fa67 	bl	801733c <sys_mbox_trypost>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <accept_function+0x6c>
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e80:	2200      	movs	r2, #0
 8009e82:	2100      	movs	r1, #0
 8009e84:	69f8      	ldr	r0, [r7, #28]
 8009e86:	4798      	blx	r3
    }
    return ERR_VAL;
 8009e88:	f06f 0305 	mvn.w	r3, #5
 8009e8c:	e077      	b.n	8009f7e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <accept_function+0x88>
 8009e96:	4b3c      	ldr	r3, [pc, #240]	@ (8009f88 <accept_function+0x16c>)
 8009e98:	f240 222a 	movw	r2, #554	@ 0x22a
 8009e9c:	493b      	ldr	r1, [pc, #236]	@ (8009f8c <accept_function+0x170>)
 8009e9e:	483c      	ldr	r0, [pc, #240]	@ (8009f90 <accept_function+0x174>)
 8009ea0:	f00d fcfa 	bl	8017898 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eac:	4619      	mov	r1, r3
 8009eae:	4610      	mov	r0, r2
 8009eb0:	f000 f8f0 	bl	800a094 <netconn_alloc>
 8009eb4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d11b      	bne.n	8009ef4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f103 0414 	add.w	r4, r3, #20
 8009ec2:	f06f 000c 	mvn.w	r0, #12
 8009ec6:	f7ff fc7f 	bl	80097c8 <lwip_netconn_err_to_msg>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f00d fa34 	bl	801733c <sys_mbox_trypost>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d109      	bne.n	8009eee <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <accept_function+0xd2>
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2100      	movs	r1, #0
 8009eea:	69f8      	ldr	r0, [r7, #28]
 8009eec:	4798      	blx	r3
    }
    return ERR_MEM;
 8009eee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef2:	e044      	b.n	8009f7e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009efa:	69b8      	ldr	r0, [r7, #24]
 8009efc:	f7ff ff66 	bl	8009dcc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	3314      	adds	r3, #20
 8009f04:	69b9      	ldr	r1, [r7, #24]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f00d fa18 	bl	801733c <sys_mbox_trypost>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d02a      	beq.n	8009f68 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009f18:	2100      	movs	r1, #0
 8009f1a:	6978      	ldr	r0, [r7, #20]
 8009f1c:	f005 fc14 	bl	800f748 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009f20:	2100      	movs	r1, #0
 8009f22:	6978      	ldr	r0, [r7, #20]
 8009f24:	f005 fc22 	bl	800f76c <tcp_recv>
    tcp_sent(pcb, NULL);
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6978      	ldr	r0, [r7, #20]
 8009f2c:	f005 fc40 	bl	800f7b0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	6978      	ldr	r0, [r7, #20]
 8009f36:	f005 fc97 	bl	800f868 <tcp_poll>
    tcp_err(pcb, NULL);
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	6978      	ldr	r0, [r7, #20]
 8009f3e:	f005 fc59 	bl	800f7f4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2200      	movs	r2, #0
 8009f46:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	3310      	adds	r3, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f00d f9e3 	bl	8017318 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	3310      	adds	r3, #16
 8009f56:	4618      	mov	r0, r3
 8009f58:	f00d fa76 	bl	8017448 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009f5c:	69b8      	ldr	r0, [r7, #24]
 8009f5e:	f000 f907 	bl	800a170 <netconn_free>
    return ERR_MEM;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	e00a      	b.n	8009f7e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d005      	beq.n	8009f7c <accept_function+0x160>
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f74:	2200      	movs	r2, #0
 8009f76:	2100      	movs	r1, #0
 8009f78:	69f8      	ldr	r0, [r7, #28]
 8009f7a:	4798      	blx	r3
  }

  return ERR_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3724      	adds	r7, #36	@ 0x24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd90      	pop	{r4, r7, pc}
 8009f86:	bf00      	nop
 8009f88:	08019060 	.word	0x08019060
 8009f8c:	0801921c 	.word	0x0801921c
 8009f90:	080190a4 	.word	0x080190a4

08009f94 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009f94:	b590      	push	{r4, r7, lr}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d006      	beq.n	8009fb8 <pcb_new+0x24>
 8009faa:	4b2b      	ldr	r3, [pc, #172]	@ (800a058 <pcb_new+0xc4>)
 8009fac:	f240 2265 	movw	r2, #613	@ 0x265
 8009fb0:	492a      	ldr	r1, [pc, #168]	@ (800a05c <pcb_new+0xc8>)
 8009fb2:	482b      	ldr	r0, [pc, #172]	@ (800a060 <pcb_new+0xcc>)
 8009fb4:	f00d fc70 	bl	8017898 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fc2:	2b10      	cmp	r3, #16
 8009fc4:	d022      	beq.n	800a00c <pcb_new+0x78>
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d133      	bne.n	800a032 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681c      	ldr	r4, [r3, #0]
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f00a fe7c 	bl	8014cce <udp_new_ip_type>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02a      	beq.n	800a03a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b22      	cmp	r3, #34	@ 0x22
 8009fec:	d104      	bne.n	8009ff8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6858      	ldr	r0, [r3, #4]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	4917      	ldr	r1, [pc, #92]	@ (800a064 <pcb_new+0xd0>)
 800a006:	f00a fde9 	bl	8014bdc <udp_recv>
      }
      break;
 800a00a:	e016      	b.n	800a03a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681c      	ldr	r4, [r3, #0]
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4618      	mov	r0, r3
 800a014:	f005 fb8a 	bl	800f72c <tcp_new_ip_type>
 800a018:	4603      	mov	r3, r0
 800a01a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fece 	bl	8009dcc <setup_tcp>
      }
      break;
 800a030:	e005      	b.n	800a03e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	22fa      	movs	r2, #250	@ 0xfa
 800a036:	711a      	strb	r2, [r3, #4]
      return;
 800a038:	e00a      	b.n	800a050 <pcb_new+0xbc>
      break;
 800a03a:	bf00      	nop
 800a03c:	e000      	b.n	800a040 <pcb_new+0xac>
      break;
 800a03e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d102      	bne.n	800a050 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	22ff      	movs	r2, #255	@ 0xff
 800a04e:	711a      	strb	r2, [r3, #4]
  }
}
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	bd90      	pop	{r4, r7, pc}
 800a056:	bf00      	nop
 800a058:	08019060 	.word	0x08019060
 800a05c:	08019244 	.word	0x08019244
 800a060:	080190a4 	.word	0x080190a4
 800a064:	080098a9 	.word	0x080098a9

0800a068 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff ff85 	bl	8009f94 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a08a:	bf00      	nop
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a0a4:	2007      	movs	r0, #7
 800a0a6:	f002 fd75 	bl	800cb94 <memp_malloc>
 800a0aa:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <netconn_alloc+0x22>
    return NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e052      	b.n	800a15c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	79fa      	ldrb	r2, [r7, #7]
 800a0c0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d004      	beq.n	800a0dc <netconn_alloc+0x48>
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d105      	bne.n	800a0e2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a0d6:	2306      	movs	r3, #6
 800a0d8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a0da:	e00a      	b.n	800a0f2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a0dc:	2306      	movs	r3, #6
 800a0de:	617b      	str	r3, [r7, #20]
      break;
 800a0e0:	e007      	b.n	800a0f2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a0e2:	4b20      	ldr	r3, [pc, #128]	@ (800a164 <netconn_alloc+0xd0>)
 800a0e4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a0e8:	491f      	ldr	r1, [pc, #124]	@ (800a168 <netconn_alloc+0xd4>)
 800a0ea:	4820      	ldr	r0, [pc, #128]	@ (800a16c <netconn_alloc+0xd8>)
 800a0ec:	f00d fbd4 	bl	8017898 <iprintf>
      goto free_and_return;
 800a0f0:	e02f      	b.n	800a152 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3310      	adds	r3, #16
 800a0f6:	6979      	ldr	r1, [r7, #20]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f00d f8eb 	bl	80172d4 <sys_mbox_new>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d125      	bne.n	800a150 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	330c      	adds	r3, #12
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f00d f9a9 	bl	8017462 <sys_sem_new>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3310      	adds	r3, #16
 800a11a:	4618      	mov	r0, r3
 800a11c:	f00d f8fc 	bl	8017318 <sys_mbox_free>
    goto free_and_return;
 800a120:	e017      	b.n	800a152 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3314      	adds	r3, #20
 800a126:	4618      	mov	r0, r3
 800a128:	f00d f98e 	bl	8017448 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f04f 32ff 	mov.w	r2, #4294967295
 800a138:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	7cfa      	ldrb	r2, [r7, #19]
 800a14a:	771a      	strb	r2, [r3, #28]
  return conn;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e005      	b.n	800a15c <netconn_alloc+0xc8>
    goto free_and_return;
 800a150:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	2007      	movs	r0, #7
 800a156:	f002 fd93 	bl	800cc80 <memp_free>
  return NULL;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	08019060 	.word	0x08019060
 800a168:	08019264 	.word	0x08019264
 800a16c:	080190a4 	.word	0x080190a4

0800a170 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d006      	beq.n	800a18e <netconn_free+0x1e>
 800a180:	4b1b      	ldr	r3, [pc, #108]	@ (800a1f0 <netconn_free+0x80>)
 800a182:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a186:	491b      	ldr	r1, [pc, #108]	@ (800a1f4 <netconn_free+0x84>)
 800a188:	481b      	ldr	r0, [pc, #108]	@ (800a1f8 <netconn_free+0x88>)
 800a18a:	f00d fb85 	bl	8017898 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3310      	adds	r3, #16
 800a192:	4618      	mov	r0, r3
 800a194:	f00d f947 	bl	8017426 <sys_mbox_valid>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d006      	beq.n	800a1ac <netconn_free+0x3c>
 800a19e:	4b14      	ldr	r3, [pc, #80]	@ (800a1f0 <netconn_free+0x80>)
 800a1a0:	f240 3223 	movw	r2, #803	@ 0x323
 800a1a4:	4915      	ldr	r1, [pc, #84]	@ (800a1fc <netconn_free+0x8c>)
 800a1a6:	4814      	ldr	r0, [pc, #80]	@ (800a1f8 <netconn_free+0x88>)
 800a1a8:	f00d fb76 	bl	8017898 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f00d f938 	bl	8017426 <sys_mbox_valid>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <netconn_free+0x5a>
 800a1bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f0 <netconn_free+0x80>)
 800a1be:	f240 3226 	movw	r2, #806	@ 0x326
 800a1c2:	490f      	ldr	r1, [pc, #60]	@ (800a200 <netconn_free+0x90>)
 800a1c4:	480c      	ldr	r0, [pc, #48]	@ (800a1f8 <netconn_free+0x88>)
 800a1c6:	f00d fb67 	bl	8017898 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	330c      	adds	r3, #12
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f00d f9ad 	bl	801752e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f00d f9c6 	bl	801756a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	2007      	movs	r0, #7
 800a1e2:	f002 fd4d 	bl	800cc80 <memp_free>
}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08019060 	.word	0x08019060
 800a1f4:	0801928c 	.word	0x0801928c
 800a1f8:	080190a4 	.word	0x080190a4
 800a1fc:	080192bc 	.word	0x080192bc
 800a200:	080192f8 	.word	0x080192f8

0800a204 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3310      	adds	r3, #16
 800a210:	4618      	mov	r0, r3
 800a212:	f00d f908 	bl	8017426 <sys_mbox_valid>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d02f      	beq.n	800a27c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a21c:	e018      	b.n	800a250 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a226:	2b10      	cmp	r3, #16
 800a228:	d10e      	bne.n	800a248 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f107 020f 	add.w	r2, r7, #15
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fafe 	bl	8009834 <lwip_netconn_is_err_msg>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d108      	bne.n	800a250 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4618      	mov	r0, r3
 800a242:	f003 fbc1 	bl	800d9c8 <pbuf_free>
 800a246:	e003      	b.n	800a250 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fede 	bl	800b00c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3310      	adds	r3, #16
 800a254:	f107 0210 	add.w	r2, r7, #16
 800a258:	4611      	mov	r1, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f00d f8c7 	bl	80173ee <sys_arch_mbox_tryfetch>
 800a260:	4603      	mov	r3, r0
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a266:	d1da      	bne.n	800a21e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3310      	adds	r3, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	f00d f853 	bl	8017318 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3310      	adds	r3, #16
 800a276:	4618      	mov	r0, r3
 800a278:	f00d f8e6 	bl	8017448 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3314      	adds	r3, #20
 800a280:	4618      	mov	r0, r3
 800a282:	f00d f8d0 	bl	8017426 <sys_mbox_valid>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d034      	beq.n	800a2f6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a28c:	e01d      	b.n	800a2ca <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f107 020e 	add.w	r2, r7, #14
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff facc 	bl	8009834 <lwip_netconn_is_err_msg>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d113      	bne.n	800a2ca <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a2a6:	6978      	ldr	r0, [r7, #20]
 800a2a8:	f7ff ffac 	bl	800a204 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d007      	beq.n	800a2c4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f004 f985 	bl	800e5c8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a2c4:	6978      	ldr	r0, [r7, #20]
 800a2c6:	f7ff ff53 	bl	800a170 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	f107 0210 	add.w	r2, r7, #16
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00d f88a 	bl	80173ee <sys_arch_mbox_tryfetch>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d1d5      	bne.n	800a28e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f00d f816 	bl	8017318 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3314      	adds	r3, #20
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f00d f8a9 	bl	8017448 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a2f6:	bf00      	nop
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <lwip_netconn_do_close_internal+0x24>
 800a316:	4b87      	ldr	r3, [pc, #540]	@ (800a534 <lwip_netconn_do_close_internal+0x234>)
 800a318:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a31c:	4986      	ldr	r1, [pc, #536]	@ (800a538 <lwip_netconn_do_close_internal+0x238>)
 800a31e:	4887      	ldr	r0, [pc, #540]	@ (800a53c <lwip_netconn_do_close_internal+0x23c>)
 800a320:	f00d faba 	bl	8017898 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d006      	beq.n	800a33e <lwip_netconn_do_close_internal+0x3e>
 800a330:	4b80      	ldr	r3, [pc, #512]	@ (800a534 <lwip_netconn_do_close_internal+0x234>)
 800a332:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a336:	4982      	ldr	r1, [pc, #520]	@ (800a540 <lwip_netconn_do_close_internal+0x240>)
 800a338:	4880      	ldr	r0, [pc, #512]	@ (800a53c <lwip_netconn_do_close_internal+0x23c>)
 800a33a:	f00d faad 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	785b      	ldrb	r3, [r3, #1]
 800a342:	2b04      	cmp	r3, #4
 800a344:	d006      	beq.n	800a354 <lwip_netconn_do_close_internal+0x54>
 800a346:	4b7b      	ldr	r3, [pc, #492]	@ (800a534 <lwip_netconn_do_close_internal+0x234>)
 800a348:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a34c:	497d      	ldr	r1, [pc, #500]	@ (800a544 <lwip_netconn_do_close_internal+0x244>)
 800a34e:	487b      	ldr	r0, [pc, #492]	@ (800a53c <lwip_netconn_do_close_internal+0x23c>)
 800a350:	f00d faa2 	bl	8017898 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d106      	bne.n	800a36a <lwip_netconn_do_close_internal+0x6a>
 800a35c:	4b75      	ldr	r3, [pc, #468]	@ (800a534 <lwip_netconn_do_close_internal+0x234>)
 800a35e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a362:	4979      	ldr	r1, [pc, #484]	@ (800a548 <lwip_netconn_do_close_internal+0x248>)
 800a364:	4875      	ldr	r0, [pc, #468]	@ (800a53c <lwip_netconn_do_close_internal+0x23c>)
 800a366:	f00d fa97 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <lwip_netconn_do_close_internal+0x80>
 800a372:	4b70      	ldr	r3, [pc, #448]	@ (800a534 <lwip_netconn_do_close_internal+0x234>)
 800a374:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a378:	4974      	ldr	r1, [pc, #464]	@ (800a54c <lwip_netconn_do_close_internal+0x24c>)
 800a37a:	4870      	ldr	r0, [pc, #448]	@ (800a53c <lwip_netconn_do_close_internal+0x23c>)
 800a37c:	f00d fa8c 	bl	8017898 <iprintf>

  tpcb = conn->pcb.tcp;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	7a1b      	ldrb	r3, [r3, #8]
 800a38c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d102      	bne.n	800a3aa <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75bb      	strb	r3, [r7, #22]
 800a3a8:	e01f      	b.n	800a3ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a3aa:	7bbb      	ldrb	r3, [r7, #14]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00e      	beq.n	800a3ce <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a3b4:	2b05      	cmp	r3, #5
 800a3b6:	d007      	beq.n	800a3c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a3bc:	2b06      	cmp	r3, #6
 800a3be:	d003      	beq.n	800a3c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d102      	bne.n	800a3ce <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	75bb      	strb	r3, [r7, #22]
 800a3cc:	e00d      	b.n	800a3ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a3ce:	7b7b      	ldrb	r3, [r7, #13]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d008      	beq.n	800a3e6 <lwip_netconn_do_close_internal+0xe6>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	8b5b      	ldrh	r3, [r3, #26]
 800a3d8:	f003 0310 	and.w	r3, r3, #16
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75bb      	strb	r3, [r7, #22]
 800a3e4:	e001      	b.n	800a3ea <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	6938      	ldr	r0, [r7, #16]
 800a3f4:	f005 f9a8 	bl	800f748 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	7d1b      	ldrb	r3, [r3, #20]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d104      	bne.n	800a40a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a400:	2100      	movs	r1, #0
 800a402:	6938      	ldr	r0, [r7, #16]
 800a404:	f005 fa18 	bl	800f838 <tcp_accept>
 800a408:	e01d      	b.n	800a446 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a40a:	7bbb      	ldrb	r3, [r7, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a410:	2100      	movs	r1, #0
 800a412:	6938      	ldr	r0, [r7, #16]
 800a414:	f005 f9aa 	bl	800f76c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a418:	2100      	movs	r1, #0
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f005 fa0c 	bl	800f838 <tcp_accept>
    }
    if (shut_tx) {
 800a420:	7b7b      	ldrb	r3, [r7, #13]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a426:	2100      	movs	r1, #0
 800a428:	6938      	ldr	r0, [r7, #16]
 800a42a:	f005 f9c1 	bl	800f7b0 <tcp_sent>
    }
    if (shut_close) {
 800a42e:	7dbb      	ldrb	r3, [r7, #22]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a434:	2200      	movs	r2, #0
 800a436:	2100      	movs	r1, #0
 800a438:	6938      	ldr	r0, [r7, #16]
 800a43a:	f005 fa15 	bl	800f868 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a43e:	2100      	movs	r1, #0
 800a440:	6938      	ldr	r0, [r7, #16]
 800a442:	f005 f9d7 	bl	800f7f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a446:	7dbb      	ldrb	r3, [r7, #22]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a44c:	6938      	ldr	r0, [r7, #16]
 800a44e:	f003 ff75 	bl	800e33c <tcp_close>
 800a452:	4603      	mov	r3, r0
 800a454:	75fb      	strb	r3, [r7, #23]
 800a456:	e007      	b.n	800a468 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	7b7a      	ldrb	r2, [r7, #13]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6938      	ldr	r0, [r7, #16]
 800a460:	f003 ff98 	bl	800e394 <tcp_shutdown>
 800a464:	4603      	mov	r3, r0
 800a466:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d102      	bne.n	800a476 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a470:	2301      	movs	r3, #1
 800a472:	757b      	strb	r3, [r7, #21]
 800a474:	e016      	b.n	800a4a4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d10f      	bne.n	800a4a0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	7a5b      	ldrb	r3, [r3, #9]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10c      	bne.n	800a4a4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a48a:	2301      	movs	r3, #1
 800a48c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a48e:	7dbb      	ldrb	r3, [r7, #22]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a494:	6938      	ldr	r0, [r7, #16]
 800a496:	f004 f897 	bl	800e5c8 <tcp_abort>
          err = ERR_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
 800a49e:	e001      	b.n	800a4a4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a4a4:	7d7b      	ldrb	r3, [r7, #21]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d052      	beq.n	800a550 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	330c      	adds	r3, #12
 800a4b2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	7dfa      	ldrb	r2, [r7, #23]
 800a4ba:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a4c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d129      	bne.n	800a524 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a4d0:	7dbb      	ldrb	r3, [r7, #22]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <lwip_netconn_do_close_internal+0x1f0>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2104      	movs	r1, #4
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
      }
      if (shut_rx) {
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d009      	beq.n	800a50a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d005      	beq.n	800a50a <lwip_netconn_do_close_internal+0x20a>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a502:	2200      	movs	r2, #0
 800a504:	2100      	movs	r1, #0
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	4798      	blx	r3
      }
      if (shut_tx) {
 800a50a:	7b7b      	ldrb	r3, [r7, #13]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <lwip_netconn_do_close_internal+0x224>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51c:	2200      	movs	r2, #0
 800a51e:	2102      	movs	r1, #2
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d002      	beq.n	800a530 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a52a:	68b8      	ldr	r0, [r7, #8]
 800a52c:	f00c fff2 	bl	8017514 <sys_sem_signal>
    }
    return ERR_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	e03c      	b.n	800a5ae <lwip_netconn_do_close_internal+0x2ae>
 800a534:	08019060 	.word	0x08019060
 800a538:	08019334 	.word	0x08019334
 800a53c:	080190a4 	.word	0x080190a4
 800a540:	08019344 	.word	0x08019344
 800a544:	08019364 	.word	0x08019364
 800a548:	08019388 	.word	0x08019388
 800a54c:	080191c8 	.word	0x080191c8
  }
  if (!close_finished) {
 800a550:	7d7b      	ldrb	r3, [r7, #21]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d11e      	bne.n	800a594 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	7d1b      	ldrb	r3, [r3, #20]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d106      	bne.n	800a56c <lwip_netconn_do_close_internal+0x26c>
 800a55e:	4b16      	ldr	r3, [pc, #88]	@ (800a5b8 <lwip_netconn_do_close_internal+0x2b8>)
 800a560:	f240 4241 	movw	r2, #1089	@ 0x441
 800a564:	4915      	ldr	r1, [pc, #84]	@ (800a5bc <lwip_netconn_do_close_internal+0x2bc>)
 800a566:	4816      	ldr	r0, [pc, #88]	@ (800a5c0 <lwip_netconn_do_close_internal+0x2c0>)
 800a568:	f00d f996 	bl	8017898 <iprintf>
    if (shut_tx) {
 800a56c:	7b7b      	ldrb	r3, [r7, #13]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a572:	4914      	ldr	r1, [pc, #80]	@ (800a5c4 <lwip_netconn_do_close_internal+0x2c4>)
 800a574:	6938      	ldr	r0, [r7, #16]
 800a576:	f005 f91b 	bl	800f7b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a57a:	2201      	movs	r2, #1
 800a57c:	4912      	ldr	r1, [pc, #72]	@ (800a5c8 <lwip_netconn_do_close_internal+0x2c8>)
 800a57e:	6938      	ldr	r0, [r7, #16]
 800a580:	f005 f972 	bl	800f868 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a584:	4911      	ldr	r1, [pc, #68]	@ (800a5cc <lwip_netconn_do_close_internal+0x2cc>)
 800a586:	6938      	ldr	r0, [r7, #16]
 800a588:	f005 f934 	bl	800f7f4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	6938      	ldr	r0, [r7, #16]
 800a590:	f005 f8da 	bl	800f748 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <lwip_netconn_do_close_internal+0x2aa>
 800a59c:	4b06      	ldr	r3, [pc, #24]	@ (800a5b8 <lwip_netconn_do_close_internal+0x2b8>)
 800a59e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a5a2:	490b      	ldr	r1, [pc, #44]	@ (800a5d0 <lwip_netconn_do_close_internal+0x2d0>)
 800a5a4:	4806      	ldr	r0, [pc, #24]	@ (800a5c0 <lwip_netconn_do_close_internal+0x2c0>)
 800a5a6:	f00d f977 	bl	8017898 <iprintf>
  return err;
 800a5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3718      	adds	r7, #24
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	08019060 	.word	0x08019060
 800a5bc:	0801939c 	.word	0x0801939c
 800a5c0:	080190a4 	.word	0x080190a4
 800a5c4:	08009b79 	.word	0x08009b79
 800a5c8:	08009ab1 	.word	0x08009ab1
 800a5cc:	08009c21 	.word	0x08009c21
 800a5d0:	080193c0 	.word	0x080193c0

0800a5d4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00d      	beq.n	800a60a <lwip_netconn_do_delconn+0x36>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5f8:	2b10      	cmp	r3, #16
 800a5fa:	d006      	beq.n	800a60a <lwip_netconn_do_delconn+0x36>
 800a5fc:	4b60      	ldr	r3, [pc, #384]	@ (800a780 <lwip_netconn_do_delconn+0x1ac>)
 800a5fe:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a602:	4960      	ldr	r1, [pc, #384]	@ (800a784 <lwip_netconn_do_delconn+0x1b0>)
 800a604:	4860      	ldr	r0, [pc, #384]	@ (800a788 <lwip_netconn_do_delconn+0x1b4>)
 800a606:	f00d f947 	bl	8017898 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a60a:	7afb      	ldrb	r3, [r7, #11]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <lwip_netconn_do_delconn+0x48>
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d002      	beq.n	800a61c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d109      	bne.n	800a630 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d10a      	bne.n	800a638 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	7f1b      	ldrb	r3, [r3, #28]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	22fb      	movs	r2, #251	@ 0xfb
 800a634:	711a      	strb	r2, [r3, #4]
 800a636:	e097      	b.n	800a768 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a638:	7afb      	ldrb	r3, [r7, #11]
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d10d      	bne.n	800a65a <lwip_netconn_do_delconn+0x86>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	7f1b      	ldrb	r3, [r3, #28]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <lwip_netconn_do_delconn+0x86>
 800a64c:	4b4c      	ldr	r3, [pc, #304]	@ (800a780 <lwip_netconn_do_delconn+0x1ac>)
 800a64e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a652:	494e      	ldr	r1, [pc, #312]	@ (800a78c <lwip_netconn_do_delconn+0x1b8>)
 800a654:	484c      	ldr	r0, [pc, #304]	@ (800a788 <lwip_netconn_do_delconn+0x1b4>)
 800a656:	f00d f91f 	bl	8017898 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff fdcd 	bl	800a204 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d05f      	beq.n	800a734 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d00d      	beq.n	800a69e <lwip_netconn_do_delconn+0xca>
 800a682:	2b20      	cmp	r3, #32
 800a684:	d151      	bne.n	800a72a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	4618      	mov	r0, r3
 800a698:	f00a fac0 	bl	8014c1c <udp_remove>
          break;
 800a69c:	e046      	b.n	800a72c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d006      	beq.n	800a6b6 <lwip_netconn_do_delconn+0xe2>
 800a6a8:	4b35      	ldr	r3, [pc, #212]	@ (800a780 <lwip_netconn_do_delconn+0x1ac>)
 800a6aa:	f240 4294 	movw	r2, #1172	@ 0x494
 800a6ae:	4938      	ldr	r1, [pc, #224]	@ (800a790 <lwip_netconn_do_delconn+0x1bc>)
 800a6b0:	4835      	ldr	r0, [pc, #212]	@ (800a788 <lwip_netconn_do_delconn+0x1b4>)
 800a6b2:	f00d f8f1 	bl	8017898 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fe14 	bl	800a300 <lwip_netconn_do_close_internal>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d04b      	beq.n	800a776 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d006      	beq.n	800a6f6 <lwip_netconn_do_delconn+0x122>
 800a6e8:	4b25      	ldr	r3, [pc, #148]	@ (800a780 <lwip_netconn_do_delconn+0x1ac>)
 800a6ea:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a6ee:	4929      	ldr	r1, [pc, #164]	@ (800a794 <lwip_netconn_do_delconn+0x1c0>)
 800a6f0:	4825      	ldr	r0, [pc, #148]	@ (800a788 <lwip_netconn_do_delconn+0x1b4>)
 800a6f2:	f00d f8d1 	bl	8017898 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a6f6:	4828      	ldr	r0, [pc, #160]	@ (800a798 <lwip_netconn_do_delconn+0x1c4>)
 800a6f8:	f00c ff7d 	bl	80175f6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	330c      	adds	r3, #12
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f00c fed4 	bl	80174b2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a70a:	4823      	ldr	r0, [pc, #140]	@ (800a798 <lwip_netconn_do_delconn+0x1c4>)
 800a70c:	f00c ff64 	bl	80175d8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	785b      	ldrb	r3, [r3, #1]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d02d      	beq.n	800a776 <lwip_netconn_do_delconn+0x1a2>
 800a71a:	4b19      	ldr	r3, [pc, #100]	@ (800a780 <lwip_netconn_do_delconn+0x1ac>)
 800a71c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a720:	491c      	ldr	r1, [pc, #112]	@ (800a794 <lwip_netconn_do_delconn+0x1c0>)
 800a722:	4819      	ldr	r0, [pc, #100]	@ (800a788 <lwip_netconn_do_delconn+0x1b4>)
 800a724:	f00d f8b8 	bl	8017898 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a728:	e025      	b.n	800a776 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a72a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2200      	movs	r2, #0
 800a732:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <lwip_netconn_do_delconn+0x17a>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	6810      	ldr	r0, [r2, #0]
 800a748:	2200      	movs	r2, #0
 800a74a:	2100      	movs	r1, #0
 800a74c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <lwip_netconn_do_delconn+0x194>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	6810      	ldr	r0, [r2, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	2102      	movs	r1, #2
 800a766:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	330c      	adds	r3, #12
 800a76e:	4618      	mov	r0, r3
 800a770:	f00c feea 	bl	8017548 <sys_sem_valid>
 800a774:	e000      	b.n	800a778 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a776:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	08019060 	.word	0x08019060
 800a784:	080193d0 	.word	0x080193d0
 800a788:	080190a4 	.word	0x080190a4
 800a78c:	080193e4 	.word	0x080193e4
 800a790:	08019404 	.word	0x08019404
 800a794:	08019420 	.word	0x08019420
 800a798:	2000b500 	.word	0x2000b500

0800a79c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d025      	beq.n	800a7fe <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d00e      	beq.n	800a7de <lwip_netconn_do_bind+0x42>
 800a7c0:	2b20      	cmp	r3, #32
 800a7c2:	d119      	bne.n	800a7f8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6858      	ldr	r0, [r3, #4]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	6899      	ldr	r1, [r3, #8]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	899b      	ldrh	r3, [r3, #12]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f00a f97a 	bl	8014acc <udp_bind>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
        break;
 800a7dc:	e011      	b.n	800a802 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6858      	ldr	r0, [r3, #4]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	6899      	ldr	r1, [r3, #8]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	899b      	ldrh	r3, [r3, #12]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f003 fef7 	bl	800e5e0 <tcp_bind>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73fb      	strb	r3, [r7, #15]
        break;
 800a7f6:	e004      	b.n	800a802 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a7f8:	23fa      	movs	r3, #250	@ 0xfa
 800a7fa:	73fb      	strb	r3, [r7, #15]
        break;
 800a7fc:	e001      	b.n	800a802 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a7fe:	23fa      	movs	r3, #250	@ 0xfa
 800a800:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	7bfa      	ldrb	r2, [r7, #15]
 800a806:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d07f      	beq.n	800a926 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a830:	2b10      	cmp	r3, #16
 800a832:	d175      	bne.n	800a920 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d165      	bne.n	800a90a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	7d1b      	ldrb	r3, [r3, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a84a:	23fa      	movs	r3, #250	@ 0xfa
 800a84c:	72fb      	strb	r3, [r7, #11]
 800a84e:	e06c      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a850:	23ff      	movs	r3, #255	@ 0xff
 800a852:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f107 020b 	add.w	r2, r7, #11
 800a85e:	7cf9      	ldrb	r1, [r7, #19]
 800a860:	4618      	mov	r0, r3
 800a862:	f003 ff87 	bl	800e774 <tcp_listen_with_backlog_and_err>
 800a866:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d05d      	beq.n	800a92a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3310      	adds	r3, #16
 800a874:	4618      	mov	r0, r3
 800a876:	f00c fdd6 	bl	8017426 <sys_mbox_valid>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3310      	adds	r3, #16
 800a886:	4618      	mov	r0, r3
 800a888:	f00c fd46 	bl	8017318 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3310      	adds	r3, #16
 800a892:	4618      	mov	r0, r3
 800a894:	f00c fdd8 	bl	8017448 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f00c fdbf 	bl	8017426 <sys_mbox_valid>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d108      	bne.n	800a8c0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3314      	adds	r3, #20
 800a8b4:	2106      	movs	r1, #6
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f00c fd0c 	bl	80172d4 <sys_mbox_new>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a8c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d118      	bne.n	800a8fa <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f004 ff2f 	bl	800f748 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4912      	ldr	r1, [pc, #72]	@ (800a93c <lwip_netconn_do_listen+0x12c>)
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f004 ffa0 	bl	800f838 <tcp_accept>
 800a8f8:	e017      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f003 fd1e 	bl	800e33c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2200      	movs	r2, #0
 800a906:	605a      	str	r2, [r3, #4]
 800a908:	e00f      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d102      	bne.n	800a91a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	72fb      	strb	r3, [r7, #11]
 800a918:	e007      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a91a:	23f5      	movs	r3, #245	@ 0xf5
 800a91c:	72fb      	strb	r3, [r7, #11]
 800a91e:	e004      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a920:	23f0      	movs	r3, #240	@ 0xf0
 800a922:	72fb      	strb	r3, [r7, #11]
 800a924:	e001      	b.n	800a92a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a926:	23f5      	movs	r3, #245	@ 0xf5
 800a928:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a92a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a932:	bf00      	nop
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	08009e1d 	.word	0x08009e1d

0800a940 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe ff1e 	bl	8009792 <netconn_err>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d134      	bne.n	800a9cc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d02d      	beq.n	800a9c8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a976:	2b20      	cmp	r3, #32
 800a978:	d123      	bne.n	800a9c2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10c      	bne.n	800a99e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f009 feb0 	bl	80146f8 <udp_send>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800a99c:	e016      	b.n	800a9cc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6858      	ldr	r0, [r3, #4]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	6819      	ldr	r1, [r3, #0]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f103 0208 	add.w	r2, r3, #8
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	899b      	ldrh	r3, [r3, #12]
 800a9b8:	f009 fed2 	bl	8014760 <udp_sendto>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
          break;
 800a9c0:	e004      	b.n	800a9cc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800a9c2:	23f5      	movs	r3, #245	@ 0xf5
 800a9c4:	73fb      	strb	r3, [r7, #15]
          break;
 800a9c6:	e001      	b.n	800a9cc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800a9c8:	23f5      	movs	r3, #245	@ 0xf5
 800a9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	7bfa      	ldrb	r2, [r7, #15]
 800a9d0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b086      	sub	sp, #24
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d022      	beq.n	800aa3c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d11b      	bne.n	800aa3c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa10:	d202      	bcs.n	800aa18 <lwip_netconn_do_recv+0x3e>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	e001      	b.n	800aa1c <lwip_netconn_do_recv+0x42>
 800aa18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa1c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	89fa      	ldrh	r2, [r7, #14]
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f003 ffa7 	bl	800e97c <tcp_recved>
        remaining -= recved;
 800aa2e:	89fb      	ldrh	r3, [r7, #14]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e6      	bne.n	800aa0a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aa3c:	bf00      	nop
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <lwip_netconn_do_writemore+0x24>
 800aa5a:	4b96      	ldr	r3, [pc, #600]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aa5c:	f240 6273 	movw	r2, #1651	@ 0x673
 800aa60:	4995      	ldr	r1, [pc, #596]	@ (800acb8 <lwip_netconn_do_writemore+0x274>)
 800aa62:	4896      	ldr	r0, [pc, #600]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aa64:	f00c ff18 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d006      	beq.n	800aa7e <lwip_netconn_do_writemore+0x3a>
 800aa70:	4b90      	ldr	r3, [pc, #576]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aa72:	f240 6274 	movw	r2, #1652	@ 0x674
 800aa76:	4992      	ldr	r1, [pc, #584]	@ (800acc0 <lwip_netconn_do_writemore+0x27c>)
 800aa78:	4890      	ldr	r0, [pc, #576]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aa7a:	f00c ff0d 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <lwip_netconn_do_writemore+0x50>
 800aa86:	4b8b      	ldr	r3, [pc, #556]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aa88:	f240 6275 	movw	r2, #1653	@ 0x675
 800aa8c:	498d      	ldr	r1, [pc, #564]	@ (800acc4 <lwip_netconn_do_writemore+0x280>)
 800aa8e:	488b      	ldr	r0, [pc, #556]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aa90:	f00c ff02 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <lwip_netconn_do_writemore+0x66>
 800aa9c:	4b85      	ldr	r3, [pc, #532]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aa9e:	f240 6276 	movw	r2, #1654	@ 0x676
 800aaa2:	4989      	ldr	r1, [pc, #548]	@ (800acc8 <lwip_netconn_do_writemore+0x284>)
 800aaa4:	4885      	ldr	r0, [pc, #532]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aaa6:	f00c fef7 	bl	8017898 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d306      	bcc.n	800aac8 <lwip_netconn_do_writemore+0x84>
 800aaba:	4b7e      	ldr	r3, [pc, #504]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aabc:	f240 6277 	movw	r2, #1655	@ 0x677
 800aac0:	4982      	ldr	r1, [pc, #520]	@ (800accc <lwip_netconn_do_writemore+0x288>)
 800aac2:	487e      	ldr	r0, [pc, #504]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aac4:	f00c fee8 	bl	8017898 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	899b      	ldrh	r3, [r3, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d106      	bne.n	800aae0 <lwip_netconn_do_writemore+0x9c>
 800aad2:	4b78      	ldr	r3, [pc, #480]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800aad4:	f240 6279 	movw	r2, #1657	@ 0x679
 800aad8:	497d      	ldr	r1, [pc, #500]	@ (800acd0 <lwip_netconn_do_writemore+0x28c>)
 800aada:	4878      	ldr	r0, [pc, #480]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aadc:	f00c fedc 	bl	8017898 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a1b      	ldr	r3, [r3, #32]
 800aae4:	7f1b      	ldrb	r3, [r3, #28]
 800aae6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7f1b      	ldrb	r3, [r3, #28]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <lwip_netconn_do_writemore+0xba>
 800aaf4:	7ebb      	ldrb	r3, [r7, #26]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <lwip_netconn_do_writemore+0xbe>
 800aafe:	2301      	movs	r3, #1
 800ab00:	e000      	b.n	800ab04 <lwip_netconn_do_writemore+0xc0>
 800ab02:	2300      	movs	r3, #0
 800ab04:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	4413      	add	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab30:	d307      	bcc.n	800ab42 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ab32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab36:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ab38:	7ebb      	ldrb	r3, [r7, #26]
 800ab3a:	f043 0302 	orr.w	r3, r3, #2
 800ab3e:	76bb      	strb	r3, [r7, #26]
 800ab40:	e001      	b.n	800ab46 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ab4e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ab50:	89fa      	ldrh	r2, [r7, #14]
 800ab52:	8bbb      	ldrh	r3, [r7, #28]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d216      	bcs.n	800ab86 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ab58:	89fb      	ldrh	r3, [r7, #14]
 800ab5a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ab5c:	7e3b      	ldrb	r3, [r7, #24]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00d      	beq.n	800ab7e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ab62:	8bbb      	ldrh	r3, [r7, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10e      	bne.n	800ab86 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a1b      	ldr	r3, [r3, #32]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <lwip_netconn_do_writemore+0x134>
 800ab72:	f06f 0306 	mvn.w	r3, #6
 800ab76:	e000      	b.n	800ab7a <lwip_netconn_do_writemore+0x136>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ab7c:	e07d      	b.n	800ac7a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ab7e:	7ebb      	ldrb	r3, [r7, #26]
 800ab80:	f043 0302 	orr.w	r3, r3, #2
 800ab84:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	8bbb      	ldrh	r3, [r7, #28]
 800ab8e:	441a      	add	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d906      	bls.n	800abaa <lwip_netconn_do_writemore+0x166>
 800ab9c:	4b45      	ldr	r3, [pc, #276]	@ (800acb4 <lwip_netconn_do_writemore+0x270>)
 800ab9e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800aba2:	494c      	ldr	r1, [pc, #304]	@ (800acd4 <lwip_netconn_do_writemore+0x290>)
 800aba4:	4845      	ldr	r0, [pc, #276]	@ (800acbc <lwip_netconn_do_writemore+0x278>)
 800aba6:	f00c fe77 	bl	8017898 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abaa:	8bbb      	ldrh	r3, [r7, #28]
 800abac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d103      	bne.n	800abbc <lwip_netconn_do_writemore+0x178>
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abba:	d209      	bcs.n	800abd0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abc0:	8bba      	ldrh	r2, [r7, #28]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d10b      	bne.n	800abde <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	899b      	ldrh	r3, [r3, #12]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d906      	bls.n	800abde <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800abd0:	2301      	movs	r3, #1
 800abd2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800abd4:	7ebb      	ldrb	r3, [r7, #26]
 800abd6:	f043 0302 	orr.w	r3, r3, #2
 800abda:	76bb      	strb	r3, [r7, #26]
 800abdc:	e001      	b.n	800abe2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6858      	ldr	r0, [r3, #4]
 800abe6:	7ebb      	ldrb	r3, [r7, #26]
 800abe8:	8bba      	ldrh	r2, [r7, #28]
 800abea:	6979      	ldr	r1, [r7, #20]
 800abec:	f007 fce8 	bl	80125c0 <tcp_write>
 800abf0:	4603      	mov	r3, r0
 800abf2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800abf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d12c      	bne.n	800ac56 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	6999      	ldr	r1, [r3, #24]
 800ac02:	8bba      	ldrh	r2, [r7, #28]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	440a      	add	r2, r1
 800ac0a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	6919      	ldr	r1, [r3, #16]
 800ac12:	8bba      	ldrh	r2, [r7, #28]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	440a      	add	r2, r1
 800ac1a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a1b      	ldr	r3, [r3, #32]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d113      	bne.n	800ac56 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	899a      	ldrh	r2, [r3, #12]
 800ac34:	3a01      	subs	r2, #1
 800ac36:	b292      	uxth	r2, r2
 800ac38:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	899b      	ldrh	r3, [r3, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d008      	beq.n	800ac56 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	689a      	ldr	r2, [r3, #8]
 800ac4a:	3208      	adds	r2, #8
 800ac4c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	2200      	movs	r2, #0
 800ac54:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ac56:	7e7b      	ldrb	r3, [r7, #25]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d004      	beq.n	800ac66 <lwip_netconn_do_writemore+0x222>
 800ac5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f af50 	beq.w	800ab06 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ac66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d004      	beq.n	800ac78 <lwip_netconn_do_writemore+0x234>
 800ac6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac76:	d146      	bne.n	800ad06 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ac78:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ac7a:	7e3b      	ldrb	r3, [r7, #24]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d02b      	beq.n	800acd8 <lwip_netconn_do_writemore+0x294>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d223      	bcs.n	800acd8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d005      	beq.n	800aca4 <lwip_netconn_do_writemore+0x260>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2103      	movs	r1, #3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	7f1b      	ldrb	r3, [r3, #28]
 800aca8:	f043 0310 	orr.w	r3, r3, #16
 800acac:	b2da      	uxtb	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	771a      	strb	r2, [r3, #28]
 800acb2:	e028      	b.n	800ad06 <lwip_netconn_do_writemore+0x2c2>
 800acb4:	08019060 	.word	0x08019060
 800acb8:	080191b8 	.word	0x080191b8
 800acbc:	080190a4 	.word	0x080190a4
 800acc0:	080194c0 	.word	0x080194c0
 800acc4:	080191c8 	.word	0x080191c8
 800acc8:	080194e0 	.word	0x080194e0
 800accc:	080194f8 	.word	0x080194f8
 800acd0:	08019538 	.word	0x08019538
 800acd4:	08019560 	.word	0x08019560
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ace0:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ace4:	d305      	bcc.n	800acf2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acee:	2b04      	cmp	r3, #4
 800acf0:	d909      	bls.n	800ad06 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <lwip_netconn_do_writemore+0x2c2>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfe:	2200      	movs	r2, #0
 800ad00:	2103      	movs	r1, #3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ad06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d11d      	bne.n	800ad4a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	699a      	ldr	r2, [r3, #24]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d002      	beq.n	800ad24 <lwip_netconn_do_writemore+0x2e0>
 800ad1e:	7e3b      	ldrb	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ad24:	2301      	movs	r3, #1
 800ad26:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f008 fa31 	bl	8013194 <tcp_output>
 800ad32:	4603      	mov	r3, r0
 800ad34:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ad36:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ad3a:	f113 0f04 	cmn.w	r3, #4
 800ad3e:	d12c      	bne.n	800ad9a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad40:	7b3b      	ldrb	r3, [r7, #12]
 800ad42:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad44:	2301      	movs	r3, #1
 800ad46:	76fb      	strb	r3, [r7, #27]
 800ad48:	e027      	b.n	800ad9a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ad4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad52:	d120      	bne.n	800ad96 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f008 fa1b 	bl	8013194 <tcp_output>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ad62:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ad66:	f113 0f04 	cmn.w	r3, #4
 800ad6a:	d104      	bne.n	800ad76 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad6c:	7b7b      	ldrb	r3, [r7, #13]
 800ad6e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad70:	2301      	movs	r3, #1
 800ad72:	76fb      	strb	r3, [r7, #27]
 800ad74:	e011      	b.n	800ad9a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ad76:	7e3b      	ldrb	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00e      	beq.n	800ad9a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <lwip_netconn_do_writemore+0x348>
 800ad86:	f06f 0306 	mvn.w	r3, #6
 800ad8a:	e000      	b.n	800ad8e <lwip_netconn_do_writemore+0x34a>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad90:	2301      	movs	r3, #1
 800ad92:	76fb      	strb	r3, [r7, #27]
 800ad94:	e001      	b.n	800ad9a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ad96:	2301      	movs	r3, #1
 800ad98:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ad9a:	7efb      	ldrb	r3, [r7, #27]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d015      	beq.n	800adcc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6a1b      	ldr	r3, [r3, #32]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	330c      	adds	r3, #12
 800ada8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	7ffa      	ldrb	r2, [r7, #31]
 800adb0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d006      	beq.n	800add2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800adc4:	68b8      	ldr	r0, [r7, #8]
 800adc6:	f00c fba5 	bl	8017514 <sys_sem_signal>
 800adca:	e002      	b.n	800add2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	e000      	b.n	800add4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe fcd0 	bl	8009792 <netconn_err>
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800adf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d166      	bne.n	800aecc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae08:	2b10      	cmp	r3, #16
 800ae0a:	d15d      	bne.n	800aec8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ae16:	23fb      	movs	r3, #251	@ 0xfb
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	e057      	b.n	800aecc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d04d      	beq.n	800aec2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d006      	beq.n	800ae46 <lwip_netconn_do_write+0x6a>
 800ae38:	4b28      	ldr	r3, [pc, #160]	@ (800aedc <lwip_netconn_do_write+0x100>)
 800ae3a:	f240 7223 	movw	r2, #1827	@ 0x723
 800ae3e:	4928      	ldr	r1, [pc, #160]	@ (800aee0 <lwip_netconn_do_write+0x104>)
 800ae40:	4828      	ldr	r0, [pc, #160]	@ (800aee4 <lwip_netconn_do_write+0x108>)
 800ae42:	f00c fd29 	bl	8017898 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d106      	bne.n	800ae5c <lwip_netconn_do_write+0x80>
 800ae4e:	4b23      	ldr	r3, [pc, #140]	@ (800aedc <lwip_netconn_do_write+0x100>)
 800ae50:	f240 7224 	movw	r2, #1828	@ 0x724
 800ae54:	4924      	ldr	r1, [pc, #144]	@ (800aee8 <lwip_netconn_do_write+0x10c>)
 800ae56:	4823      	ldr	r0, [pc, #140]	@ (800aee4 <lwip_netconn_do_write+0x108>)
 800ae58:	f00c fd1e 	bl	8017898 <iprintf>
        msg->conn->current_msg = msg;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2100      	movs	r1, #0
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fdea 	bl	800aa44 <lwip_netconn_do_writemore>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d02e      	beq.n	800aed4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d006      	beq.n	800ae8e <lwip_netconn_do_write+0xb2>
 800ae80:	4b16      	ldr	r3, [pc, #88]	@ (800aedc <lwip_netconn_do_write+0x100>)
 800ae82:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800ae86:	4919      	ldr	r1, [pc, #100]	@ (800aeec <lwip_netconn_do_write+0x110>)
 800ae88:	4816      	ldr	r0, [pc, #88]	@ (800aee4 <lwip_netconn_do_write+0x108>)
 800ae8a:	f00c fd05 	bl	8017898 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ae8e:	4818      	ldr	r0, [pc, #96]	@ (800aef0 <lwip_netconn_do_write+0x114>)
 800ae90:	f00c fbb1 	bl	80175f6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	330c      	adds	r3, #12
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f00c fb08 	bl	80174b2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800aea2:	4813      	ldr	r0, [pc, #76]	@ (800aef0 <lwip_netconn_do_write+0x114>)
 800aea4:	f00c fb98 	bl	80175d8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d110      	bne.n	800aed4 <lwip_netconn_do_write+0xf8>
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <lwip_netconn_do_write+0x100>)
 800aeb4:	f240 722c 	movw	r2, #1836	@ 0x72c
 800aeb8:	490c      	ldr	r1, [pc, #48]	@ (800aeec <lwip_netconn_do_write+0x110>)
 800aeba:	480a      	ldr	r0, [pc, #40]	@ (800aee4 <lwip_netconn_do_write+0x108>)
 800aebc:	f00c fcec 	bl	8017898 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800aec0:	e008      	b.n	800aed4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800aec2:	23f5      	movs	r3, #245	@ 0xf5
 800aec4:	73fb      	strb	r3, [r7, #15]
 800aec6:	e001      	b.n	800aecc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800aec8:	23fa      	movs	r3, #250	@ 0xfa
 800aeca:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	7bfa      	ldrb	r2, [r7, #15]
 800aed0:	711a      	strb	r2, [r3, #4]
 800aed2:	e000      	b.n	800aed6 <lwip_netconn_do_write+0xfa>
        return;
 800aed4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	08019060 	.word	0x08019060
 800aee0:	08019404 	.word	0x08019404
 800aee4:	080190a4 	.word	0x080190a4
 800aee8:	0801958c 	.word	0x0801958c
 800aeec:	08019420 	.word	0x08019420
 800aef0:	2000b500 	.word	0x2000b500

0800aef4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d069      	beq.n	800afe6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d162      	bne.n	800afe6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af24:	2b03      	cmp	r3, #3
 800af26:	d002      	beq.n	800af2e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d05b      	beq.n	800afe6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800af2e:	7afb      	ldrb	r3, [r7, #11]
 800af30:	2b03      	cmp	r3, #3
 800af32:	d103      	bne.n	800af3c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	22f5      	movs	r2, #245	@ 0xf5
 800af38:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af3a:	e059      	b.n	800aff0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800af3c:	7afb      	ldrb	r3, [r7, #11]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d103      	bne.n	800af4a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	22fb      	movs	r2, #251	@ 0xfb
 800af46:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af48:	e052      	b.n	800aff0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	7a1b      	ldrb	r3, [r3, #8]
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d004      	beq.n	800af60 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff f952 	bl	800a204 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <lwip_netconn_do_close+0x84>
 800af6a:	4b23      	ldr	r3, [pc, #140]	@ (800aff8 <lwip_netconn_do_close+0x104>)
 800af6c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800af70:	4922      	ldr	r1, [pc, #136]	@ (800affc <lwip_netconn_do_close+0x108>)
 800af72:	4823      	ldr	r0, [pc, #140]	@ (800b000 <lwip_netconn_do_close+0x10c>)
 800af74:	f00c fc90 	bl	8017898 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2204      	movs	r2, #4
 800af7e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2100      	movs	r1, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff f9b6 	bl	800a300 <lwip_netconn_do_close_internal>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d029      	beq.n	800afee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	785b      	ldrb	r3, [r3, #1]
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d006      	beq.n	800afb2 <lwip_netconn_do_close+0xbe>
 800afa4:	4b14      	ldr	r3, [pc, #80]	@ (800aff8 <lwip_netconn_do_close+0x104>)
 800afa6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800afaa:	4916      	ldr	r1, [pc, #88]	@ (800b004 <lwip_netconn_do_close+0x110>)
 800afac:	4814      	ldr	r0, [pc, #80]	@ (800b000 <lwip_netconn_do_close+0x10c>)
 800afae:	f00c fc73 	bl	8017898 <iprintf>
        UNLOCK_TCPIP_CORE();
 800afb2:	4815      	ldr	r0, [pc, #84]	@ (800b008 <lwip_netconn_do_close+0x114>)
 800afb4:	f00c fb1f 	bl	80175f6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	330c      	adds	r3, #12
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f00c fa76 	bl	80174b2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800afc6:	4810      	ldr	r0, [pc, #64]	@ (800b008 <lwip_netconn_do_close+0x114>)
 800afc8:	f00c fb06 	bl	80175d8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	785b      	ldrb	r3, [r3, #1]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00b      	beq.n	800afee <lwip_netconn_do_close+0xfa>
 800afd6:	4b08      	ldr	r3, [pc, #32]	@ (800aff8 <lwip_netconn_do_close+0x104>)
 800afd8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800afdc:	4909      	ldr	r1, [pc, #36]	@ (800b004 <lwip_netconn_do_close+0x110>)
 800afde:	4808      	ldr	r0, [pc, #32]	@ (800b000 <lwip_netconn_do_close+0x10c>)
 800afe0:	f00c fc5a 	bl	8017898 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800afe4:	e003      	b.n	800afee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	22f5      	movs	r2, #245	@ 0xf5
 800afea:	711a      	strb	r2, [r3, #4]
 800afec:	e000      	b.n	800aff0 <lwip_netconn_do_close+0xfc>
      return;
 800afee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	08019060 	.word	0x08019060
 800affc:	08019404 	.word	0x08019404
 800b000:	080190a4 	.word	0x080190a4
 800b004:	08019420 	.word	0x08019420
 800b008:	2000b500 	.word	0x2000b500

0800b00c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d013      	beq.n	800b042 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4618      	mov	r0, r3
 800b028:	f002 fcce 	bl	800d9c8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	605a      	str	r2, [r3, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	2006      	movs	r0, #6
 800b03e:	f001 fe1f 	bl	800cc80 <memp_free>
  }
}
 800b042:	bf00      	nop
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4613      	mov	r3, r2
 800b058:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d108      	bne.n	800b072 <netbuf_ref+0x26>
 800b060:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d4 <netbuf_ref+0x88>)
 800b062:	2299      	movs	r2, #153	@ 0x99
 800b064:	491c      	ldr	r1, [pc, #112]	@ (800b0d8 <netbuf_ref+0x8c>)
 800b066:	481d      	ldr	r0, [pc, #116]	@ (800b0dc <netbuf_ref+0x90>)
 800b068:	f00c fc16 	bl	8017898 <iprintf>
 800b06c:	f06f 030f 	mvn.w	r3, #15
 800b070:	e02b      	b.n	800b0ca <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d004      	beq.n	800b084 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f002 fca2 	bl	800d9c8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b084:	2241      	movs	r2, #65	@ 0x41
 800b086:	2100      	movs	r1, #0
 800b088:	2036      	movs	r0, #54	@ 0x36
 800b08a:	f002 f9b9 	bl	800d400 <pbuf_alloc>
 800b08e:	4602      	mov	r2, r0
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d105      	bne.n	800b0a8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a6:	e010      	b.n	800b0ca <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	88fa      	ldrh	r2, [r7, #6]
 800b0b6:	811a      	strh	r2, [r3, #8]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	6812      	ldr	r2, [r2, #0]
 800b0bc:	891b      	ldrh	r3, [r3, #8]
 800b0be:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	080195b8 	.word	0x080195b8
 800b0d8:	08019670 	.word	0x08019670
 800b0dc:	08019608 	.word	0x08019608

0800b0e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d108      	bne.n	800b104 <netbuf_data+0x24>
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b160 <netbuf_data+0x80>)
 800b0f4:	22c6      	movs	r2, #198	@ 0xc6
 800b0f6:	491b      	ldr	r1, [pc, #108]	@ (800b164 <netbuf_data+0x84>)
 800b0f8:	481b      	ldr	r0, [pc, #108]	@ (800b168 <netbuf_data+0x88>)
 800b0fa:	f00c fbcd 	bl	8017898 <iprintf>
 800b0fe:	f06f 030f 	mvn.w	r3, #15
 800b102:	e029      	b.n	800b158 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d108      	bne.n	800b11c <netbuf_data+0x3c>
 800b10a:	4b15      	ldr	r3, [pc, #84]	@ (800b160 <netbuf_data+0x80>)
 800b10c:	22c7      	movs	r2, #199	@ 0xc7
 800b10e:	4917      	ldr	r1, [pc, #92]	@ (800b16c <netbuf_data+0x8c>)
 800b110:	4815      	ldr	r0, [pc, #84]	@ (800b168 <netbuf_data+0x88>)
 800b112:	f00c fbc1 	bl	8017898 <iprintf>
 800b116:	f06f 030f 	mvn.w	r3, #15
 800b11a:	e01d      	b.n	800b158 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d108      	bne.n	800b134 <netbuf_data+0x54>
 800b122:	4b0f      	ldr	r3, [pc, #60]	@ (800b160 <netbuf_data+0x80>)
 800b124:	22c8      	movs	r2, #200	@ 0xc8
 800b126:	4912      	ldr	r1, [pc, #72]	@ (800b170 <netbuf_data+0x90>)
 800b128:	480f      	ldr	r0, [pc, #60]	@ (800b168 <netbuf_data+0x88>)
 800b12a:	f00c fbb5 	bl	8017898 <iprintf>
 800b12e:	f06f 030f 	mvn.w	r3, #15
 800b132:	e011      	b.n	800b158 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <netbuf_data+0x62>
    return ERR_BUF;
 800b13c:	f06f 0301 	mvn.w	r3, #1
 800b140:	e00a      	b.n	800b158 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	895a      	ldrh	r2, [r3, #10]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	080195b8 	.word	0x080195b8
 800b164:	080196c0 	.word	0x080196c0
 800b168:	08019608 	.word	0x08019608
 800b16c:	080196dc 	.word	0x080196dc
 800b170:	080196fc 	.word	0x080196fc

0800b174 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d108      	bne.n	800b194 <netbuf_next+0x20>
 800b182:	4b11      	ldr	r3, [pc, #68]	@ (800b1c8 <netbuf_next+0x54>)
 800b184:	22e0      	movs	r2, #224	@ 0xe0
 800b186:	4911      	ldr	r1, [pc, #68]	@ (800b1cc <netbuf_next+0x58>)
 800b188:	4811      	ldr	r0, [pc, #68]	@ (800b1d0 <netbuf_next+0x5c>)
 800b18a:	f00c fb85 	bl	8017898 <iprintf>
 800b18e:	f04f 33ff 	mov.w	r3, #4294967295
 800b192:	e014      	b.n	800b1be <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <netbuf_next+0x30>
    return -1;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	e00c      	b.n	800b1be <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <netbuf_next+0x48>
    return 1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e000      	b.n	800b1be <netbuf_next+0x4a>
  }
  return 0;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	080195b8 	.word	0x080195b8
 800b1cc:	08019718 	.word	0x08019718
 800b1d0:	08019608 	.word	0x08019608

0800b1d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b1de:	f009 f891 	bl	8014304 <sys_timeouts_sleeptime>
 800b1e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ea:	d10b      	bne.n	800b204 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b1ec:	4813      	ldr	r0, [pc, #76]	@ (800b23c <tcpip_timeouts_mbox_fetch+0x68>)
 800b1ee:	f00c fa02 	bl	80175f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f00c f8ba 	bl	8017370 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b1fc:	480f      	ldr	r0, [pc, #60]	@ (800b23c <tcpip_timeouts_mbox_fetch+0x68>)
 800b1fe:	f00c f9eb 	bl	80175d8 <sys_mutex_lock>
    return;
 800b202:	e018      	b.n	800b236 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b20a:	f009 f841 	bl	8014290 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b20e:	e7e6      	b.n	800b1de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b210:	480a      	ldr	r0, [pc, #40]	@ (800b23c <tcpip_timeouts_mbox_fetch+0x68>)
 800b212:	f00c f9f0 	bl	80175f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f00c f8a8 	bl	8017370 <sys_arch_mbox_fetch>
 800b220:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b222:	4806      	ldr	r0, [pc, #24]	@ (800b23c <tcpip_timeouts_mbox_fetch+0x68>)
 800b224:	f00c f9d8 	bl	80175d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	d102      	bne.n	800b236 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b230:	f009 f82e 	bl	8014290 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b234:	e7d3      	b.n	800b1de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	2000b500 	.word	0x2000b500

0800b240 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b248:	4810      	ldr	r0, [pc, #64]	@ (800b28c <tcpip_thread+0x4c>)
 800b24a:	f00c f9c5 	bl	80175d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b24e:	4b10      	ldr	r3, [pc, #64]	@ (800b290 <tcpip_thread+0x50>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b256:	4b0e      	ldr	r3, [pc, #56]	@ (800b290 <tcpip_thread+0x50>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a0e      	ldr	r2, [pc, #56]	@ (800b294 <tcpip_thread+0x54>)
 800b25c:	6812      	ldr	r2, [r2, #0]
 800b25e:	4610      	mov	r0, r2
 800b260:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b262:	f107 030c 	add.w	r3, r7, #12
 800b266:	4619      	mov	r1, r3
 800b268:	480b      	ldr	r0, [pc, #44]	@ (800b298 <tcpip_thread+0x58>)
 800b26a:	f7ff ffb3 	bl	800b1d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b274:	4b09      	ldr	r3, [pc, #36]	@ (800b29c <tcpip_thread+0x5c>)
 800b276:	2291      	movs	r2, #145	@ 0x91
 800b278:	4909      	ldr	r1, [pc, #36]	@ (800b2a0 <tcpip_thread+0x60>)
 800b27a:	480a      	ldr	r0, [pc, #40]	@ (800b2a4 <tcpip_thread+0x64>)
 800b27c:	f00c fb0c 	bl	8017898 <iprintf>
      continue;
 800b280:	e003      	b.n	800b28a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 f80f 	bl	800b2a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b28a:	e7ea      	b.n	800b262 <tcpip_thread+0x22>
 800b28c:	2000b500 	.word	0x2000b500
 800b290:	2000b4f4 	.word	0x2000b4f4
 800b294:	2000b4f8 	.word	0x2000b4f8
 800b298:	2000b4fc 	.word	0x2000b4fc
 800b29c:	08019750 	.word	0x08019750
 800b2a0:	08019780 	.word	0x08019780
 800b2a4:	080197a0 	.word	0x080197a0

0800b2a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d026      	beq.n	800b306 <tcpip_thread_handle_msg+0x5e>
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	dc2b      	bgt.n	800b314 <tcpip_thread_handle_msg+0x6c>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <tcpip_thread_handle_msg+0x1e>
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d015      	beq.n	800b2f0 <tcpip_thread_handle_msg+0x48>
 800b2c4:	e026      	b.n	800b314 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6850      	ldr	r0, [r2, #4]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6892      	ldr	r2, [r2, #8]
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4798      	blx	r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f002 fb71 	bl	800d9c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b2e6:	6879      	ldr	r1, [r7, #4]
 800b2e8:	2009      	movs	r0, #9
 800b2ea:	f001 fcc9 	bl	800cc80 <memp_free>
      break;
 800b2ee:	e018      	b.n	800b322 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6892      	ldr	r2, [r2, #8]
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	2008      	movs	r0, #8
 800b300:	f001 fcbe 	bl	800cc80 <memp_free>
      break;
 800b304:	e00d      	b.n	800b322 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6892      	ldr	r2, [r2, #8]
 800b30e:	4610      	mov	r0, r2
 800b310:	4798      	blx	r3
      break;
 800b312:	e006      	b.n	800b322 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b314:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <tcpip_thread_handle_msg+0x84>)
 800b316:	22cf      	movs	r2, #207	@ 0xcf
 800b318:	4905      	ldr	r1, [pc, #20]	@ (800b330 <tcpip_thread_handle_msg+0x88>)
 800b31a:	4806      	ldr	r0, [pc, #24]	@ (800b334 <tcpip_thread_handle_msg+0x8c>)
 800b31c:	f00c fabc 	bl	8017898 <iprintf>
      break;
 800b320:	bf00      	nop
  }
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	08019750 	.word	0x08019750
 800b330:	08019780 	.word	0x08019780
 800b334:	080197a0 	.word	0x080197a0

0800b338 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b344:	481a      	ldr	r0, [pc, #104]	@ (800b3b0 <tcpip_inpkt+0x78>)
 800b346:	f00c f86e 	bl	8017426 <sys_mbox_valid>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d105      	bne.n	800b35c <tcpip_inpkt+0x24>
 800b350:	4b18      	ldr	r3, [pc, #96]	@ (800b3b4 <tcpip_inpkt+0x7c>)
 800b352:	22fc      	movs	r2, #252	@ 0xfc
 800b354:	4918      	ldr	r1, [pc, #96]	@ (800b3b8 <tcpip_inpkt+0x80>)
 800b356:	4819      	ldr	r0, [pc, #100]	@ (800b3bc <tcpip_inpkt+0x84>)
 800b358:	f00c fa9e 	bl	8017898 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b35c:	2009      	movs	r0, #9
 800b35e:	f001 fc19 	bl	800cb94 <memp_malloc>
 800b362:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295
 800b36e:	e01a      	b.n	800b3a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2200      	movs	r2, #0
 800b374:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b388:	6979      	ldr	r1, [r7, #20]
 800b38a:	4809      	ldr	r0, [pc, #36]	@ (800b3b0 <tcpip_inpkt+0x78>)
 800b38c:	f00b ffd6 	bl	801733c <sys_mbox_trypost>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d006      	beq.n	800b3a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b396:	6979      	ldr	r1, [r7, #20]
 800b398:	2009      	movs	r0, #9
 800b39a:	f001 fc71 	bl	800cc80 <memp_free>
    return ERR_MEM;
 800b39e:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a2:	e000      	b.n	800b3a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b3a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000b4fc 	.word	0x2000b4fc
 800b3b4:	08019750 	.word	0x08019750
 800b3b8:	080197c8 	.word	0x080197c8
 800b3bc:	080197a0 	.word	0x080197a0

0800b3c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b3d0:	f003 0318 	and.w	r3, r3, #24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d006      	beq.n	800b3e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b3d8:	4a08      	ldr	r2, [pc, #32]	@ (800b3fc <tcpip_input+0x3c>)
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff ffab 	bl	800b338 <tcpip_inpkt>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	e005      	b.n	800b3f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b3e6:	4a06      	ldr	r2, [pc, #24]	@ (800b400 <tcpip_input+0x40>)
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff ffa4 	bl	800b338 <tcpip_inpkt>
 800b3f0:	4603      	mov	r3, r0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	08017129 	.word	0x08017129
 800b400:	08016031 	.word	0x08016031

0800b404 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b40e:	4819      	ldr	r0, [pc, #100]	@ (800b474 <tcpip_try_callback+0x70>)
 800b410:	f00c f809 	bl	8017426 <sys_mbox_valid>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <tcpip_try_callback+0x24>
 800b41a:	4b17      	ldr	r3, [pc, #92]	@ (800b478 <tcpip_try_callback+0x74>)
 800b41c:	f240 125d 	movw	r2, #349	@ 0x15d
 800b420:	4916      	ldr	r1, [pc, #88]	@ (800b47c <tcpip_try_callback+0x78>)
 800b422:	4817      	ldr	r0, [pc, #92]	@ (800b480 <tcpip_try_callback+0x7c>)
 800b424:	f00c fa38 	bl	8017898 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b428:	2008      	movs	r0, #8
 800b42a:	f001 fbb3 	bl	800cb94 <memp_malloc>
 800b42e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b436:	f04f 33ff 	mov.w	r3, #4294967295
 800b43a:	e017      	b.n	800b46c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2201      	movs	r2, #1
 800b440:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b44e:	68f9      	ldr	r1, [r7, #12]
 800b450:	4808      	ldr	r0, [pc, #32]	@ (800b474 <tcpip_try_callback+0x70>)
 800b452:	f00b ff73 	bl	801733c <sys_mbox_trypost>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d006      	beq.n	800b46a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b45c:	68f9      	ldr	r1, [r7, #12]
 800b45e:	2008      	movs	r0, #8
 800b460:	f001 fc0e 	bl	800cc80 <memp_free>
    return ERR_MEM;
 800b464:	f04f 33ff 	mov.w	r3, #4294967295
 800b468:	e000      	b.n	800b46c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	2000b4fc 	.word	0x2000b4fc
 800b478:	08019750 	.word	0x08019750
 800b47c:	080197c8 	.word	0x080197c8
 800b480:	080197a0 	.word	0x080197a0

0800b484 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b490:	4806      	ldr	r0, [pc, #24]	@ (800b4ac <tcpip_send_msg_wait_sem+0x28>)
 800b492:	f00c f8a1 	bl	80175d8 <sys_mutex_lock>
  fn(apimsg);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	68b8      	ldr	r0, [r7, #8]
 800b49a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b49c:	4803      	ldr	r0, [pc, #12]	@ (800b4ac <tcpip_send_msg_wait_sem+0x28>)
 800b49e:	f00c f8aa 	bl	80175f6 <sys_mutex_unlock>
  return ERR_OK;
 800b4a2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	2000b500 	.word	0x2000b500

0800b4b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b4ba:	f000 fec1 	bl	800c240 <lwip_init>

  tcpip_init_done = initfunc;
 800b4be:	4a17      	ldr	r2, [pc, #92]	@ (800b51c <tcpip_init+0x6c>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b4c4:	4a16      	ldr	r2, [pc, #88]	@ (800b520 <tcpip_init+0x70>)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b4ca:	2106      	movs	r1, #6
 800b4cc:	4815      	ldr	r0, [pc, #84]	@ (800b524 <tcpip_init+0x74>)
 800b4ce:	f00b ff01 	bl	80172d4 <sys_mbox_new>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b4d8:	4b13      	ldr	r3, [pc, #76]	@ (800b528 <tcpip_init+0x78>)
 800b4da:	f240 2261 	movw	r2, #609	@ 0x261
 800b4de:	4913      	ldr	r1, [pc, #76]	@ (800b52c <tcpip_init+0x7c>)
 800b4e0:	4813      	ldr	r0, [pc, #76]	@ (800b530 <tcpip_init+0x80>)
 800b4e2:	f00c f9d9 	bl	8017898 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b4e6:	4813      	ldr	r0, [pc, #76]	@ (800b534 <tcpip_init+0x84>)
 800b4e8:	f00c f85a 	bl	80175a0 <sys_mutex_new>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d006      	beq.n	800b500 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b528 <tcpip_init+0x78>)
 800b4f4:	f240 2265 	movw	r2, #613	@ 0x265
 800b4f8:	490f      	ldr	r1, [pc, #60]	@ (800b538 <tcpip_init+0x88>)
 800b4fa:	480d      	ldr	r0, [pc, #52]	@ (800b530 <tcpip_init+0x80>)
 800b4fc:	f00c f9cc 	bl	8017898 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b500:	2300      	movs	r3, #0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b508:	2200      	movs	r2, #0
 800b50a:	490c      	ldr	r1, [pc, #48]	@ (800b53c <tcpip_init+0x8c>)
 800b50c:	480c      	ldr	r0, [pc, #48]	@ (800b540 <tcpip_init+0x90>)
 800b50e:	f00c f87f 	bl	8017610 <sys_thread_new>
}
 800b512:	bf00      	nop
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	2000b4f4 	.word	0x2000b4f4
 800b520:	2000b4f8 	.word	0x2000b4f8
 800b524:	2000b4fc 	.word	0x2000b4fc
 800b528:	08019750 	.word	0x08019750
 800b52c:	080197d8 	.word	0x080197d8
 800b530:	080197a0 	.word	0x080197a0
 800b534:	2000b500 	.word	0x2000b500
 800b538:	080197fc 	.word	0x080197fc
 800b53c:	0800b241 	.word	0x0800b241
 800b540:	08019820 	.word	0x08019820

0800b544 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <fs_open+0x16>
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <fs_open+0x1c>
    return ERR_ARG;
 800b55a:	f06f 030f 	mvn.w	r3, #15
 800b55e:	e028      	b.n	800b5b2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b560:	4b16      	ldr	r3, [pc, #88]	@ (800b5bc <fs_open+0x78>)
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e020      	b.n	800b5a8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	4619      	mov	r1, r3
 800b56c:	6838      	ldr	r0, [r7, #0]
 800b56e:	f7f4 fe4f 	bl	8000210 <strcmp>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d114      	bne.n	800b5a2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	68da      	ldr	r2, [r3, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7c1a      	ldrb	r2, [r3, #16]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e007      	b.n	800b5b2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1db      	bne.n	800b566 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b5ae:	f06f 0305 	mvn.w	r3, #5
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0801d0a4 	.word	0x0801d0a4

0800b5c0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	1ad3      	subs	r3, r2, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	370c      	adds	r7, #12
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b082      	sub	sp, #8
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b5fa:	222c      	movs	r2, #44	@ 0x2c
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f00c f9e9 	bl	80179d6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b612:	202c      	movs	r0, #44	@ 0x2c
 800b614:	f001 f91a 	bl	800c84c <mem_malloc>
 800b618:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <http_state_alloc+0x1a>
    http_state_init(ret);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff ffe6 	bl	800b5f2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b626:	687b      	ldr	r3, [r7, #4]
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff ffbb 	bl	800b5c0 <fs_close>
    hs->handle = NULL;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 f9b3 	bl	800d9c8 <pbuf_free>
    hs->req = NULL;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <http_state_free+0x1a>
    http_state_eof(hs);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff ffd6 	bl	800b630 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 ff47 	bl	800c518 <mem_free>
  }
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d106      	bne.n	800b6b6 <http_write+0x22>
 800b6a8:	4b2c      	ldr	r3, [pc, #176]	@ (800b75c <http_write+0xc8>)
 800b6aa:	f240 2219 	movw	r2, #537	@ 0x219
 800b6ae:	492c      	ldr	r1, [pc, #176]	@ (800b760 <http_write+0xcc>)
 800b6b0:	482c      	ldr	r0, [pc, #176]	@ (800b764 <http_write+0xd0>)
 800b6b2:	f00c f8f1 	bl	8017898 <iprintf>
  len = *length;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b6bc:	8afb      	ldrh	r3, [r7, #22]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <http_write+0x32>
    return ERR_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e045      	b.n	800b752 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b6cc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b6ce:	8aba      	ldrh	r2, [r7, #20]
 800b6d0:	8afb      	ldrh	r3, [r7, #22]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d201      	bcs.n	800b6da <http_write+0x46>
    len = max_len;
 800b6d6:	8abb      	ldrh	r3, [r7, #20]
 800b6d8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b6e2:	8afa      	ldrh	r2, [r7, #22]
 800b6e4:	8abb      	ldrh	r3, [r7, #20]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d901      	bls.n	800b6ee <http_write+0x5a>
    len = max_len;
 800b6ea:	8abb      	ldrh	r3, [r7, #20]
 800b6ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	8afa      	ldrh	r2, [r7, #22]
 800b6f2:	68b9      	ldr	r1, [r7, #8]
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f006 ff63 	bl	80125c0 <tcp_write>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b6fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d10f      	bne.n	800b728 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d004      	beq.n	800b71c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b718:	2b08      	cmp	r3, #8
 800b71a:	d902      	bls.n	800b722 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b71c:	2301      	movs	r3, #1
 800b71e:	82fb      	strh	r3, [r7, #22]
 800b720:	e002      	b.n	800b728 <http_write+0x94>
      } else {
        len /= 2;
 800b722:	8afb      	ldrh	r3, [r7, #22]
 800b724:	085b      	lsrs	r3, r3, #1
 800b726:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b728:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b730:	d102      	bne.n	800b738 <http_write+0xa4>
 800b732:	8afb      	ldrh	r3, [r7, #22]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d8da      	bhi.n	800b6ee <http_write+0x5a>

  if (err == ERR_OK) {
 800b738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d103      	bne.n	800b748 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8afa      	ldrh	r2, [r7, #22]
 800b744:	801a      	strh	r2, [r3, #0]
 800b746:	e002      	b.n	800b74e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b74e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3718      	adds	r7, #24
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	08019870 	.word	0x08019870
 800b760:	080198a8 	.word	0x080198a8
 800b764:	080198b8 	.word	0x080198b8

0800b768 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4613      	mov	r3, r2
 800b774:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b776:	2100      	movs	r1, #0
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f003 ffe5 	bl	800f748 <tcp_arg>
  altcp_recv(pcb, NULL);
 800b77e:	2100      	movs	r1, #0
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f003 fff3 	bl	800f76c <tcp_recv>
  altcp_err(pcb, NULL);
 800b786:	2100      	movs	r1, #0
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f004 f833 	bl	800f7f4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b78e:	2200      	movs	r2, #0
 800b790:	2100      	movs	r1, #0
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f004 f868 	bl	800f868 <tcp_poll>
  altcp_sent(pcb, NULL);
 800b798:	2100      	movs	r1, #0
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f004 f808 	bl	800f7b0 <tcp_sent>
  if (hs != NULL) {
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800b7a6:	68b8      	ldr	r0, [r7, #8]
 800b7a8:	f7ff ff62 	bl	800b670 <http_state_free>
  }

  if (abort_conn) {
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d004      	beq.n	800b7bc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f002 ff08 	bl	800e5c8 <tcp_abort>
    return ERR_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e00f      	b.n	800b7dc <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f002 fdbd 	bl	800e33c <tcp_close>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b7c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d004      	beq.n	800b7d8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b7ce:	2204      	movs	r2, #4
 800b7d0:	4904      	ldr	r1, [pc, #16]	@ (800b7e4 <http_close_or_abort_conn+0x7c>)
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f004 f848 	bl	800f868 <tcp_poll>
  }
  return err;
 800b7d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	0800beab 	.word	0x0800beab

0800b7e8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff ffb6 	bl	800b768 <http_close_or_abort_conn>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
 800b80e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b810:	6839      	ldr	r1, [r7, #0]
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff ffe8 	bl	800b7e8 <http_close_conn>
  }
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d105      	bne.n	800b83e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff ffe6 	bl	800b806 <http_eof>
    return 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	e016      	b.n	800b86c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fec6 	bl	800b5d4 <fs_bytes_left>
 800b848:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dc05      	bgt.n	800b85c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b850:	6839      	ldr	r1, [r7, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff ffd7 	bl	800b806 <http_eof>
    return 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	e007      	b.n	800b86c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b85c:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <http_check_eof+0x54>)
 800b85e:	f240 429d 	movw	r2, #1181	@ 0x49d
 800b862:	4905      	ldr	r1, [pc, #20]	@ (800b878 <http_check_eof+0x58>)
 800b864:	4805      	ldr	r0, [pc, #20]	@ (800b87c <http_check_eof+0x5c>)
 800b866:	f00c f817 	bl	8017898 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b86a:	2301      	movs	r3, #1
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	08019870 	.word	0x08019870
 800b878:	080198e0 	.word	0x080198e0
 800b87c:	080198b8 	.word	0x080198b8

0800b880 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b892:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b896:	4293      	cmp	r3, r2
 800b898:	d803      	bhi.n	800b8a2 <http_send_data_nonssi+0x22>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	e001      	b.n	800b8a6 <http_send_data_nonssi+0x26>
 800b8a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8a6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	6999      	ldr	r1, [r3, #24]
 800b8ac:	f107 020c 	add.w	r2, r7, #12
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff feee 	bl	800b694 <http_write>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b8bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10d      	bne.n	800b8e0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	89ba      	ldrh	r2, [r7, #12]
 800b8ce:	441a      	add	r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d8:	89ba      	ldrh	r2, [r7, #12]
 800b8da:	1a9a      	subs	r2, r3, r2
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <http_send+0x18>
    return 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e025      	b.n	800b94e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b906:	2b00      	cmp	r3, #0
 800b908:	d108      	bne.n	800b91c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff ff87 	bl	800b820 <http_check_eof>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <http_send+0x32>
      return 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	e018      	b.n	800b94e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff ffae 	bl	800b880 <http_send_data_nonssi>
 800b924:	4603      	mov	r3, r0
 800b926:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10d      	bne.n	800b94c <http_send+0x62>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fe4d 	bl	800b5d4 <fs_bytes_left>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dc05      	bgt.n	800b94c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff ff5f 	bl	800b806 <http_eof>
    return 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	4a1c      	ldr	r2, [pc, #112]	@ (800b9d8 <http_get_404_file+0x80>)
 800b966:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7ff fde7 	bl	800b544 <fs_open>
 800b976:	4603      	mov	r3, r0
 800b978:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d024      	beq.n	800b9cc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	4a15      	ldr	r2, [pc, #84]	@ (800b9dc <http_get_404_file+0x84>)
 800b986:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7ff fdd7 	bl	800b544 <fs_open>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d014      	beq.n	800b9cc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	4a0e      	ldr	r2, [pc, #56]	@ (800b9e0 <http_get_404_file+0x88>)
 800b9a6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7ff fdc7 	bl	800b544 <fs_open>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d004      	beq.n	800b9cc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	601a      	str	r2, [r3, #0]
        return NULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e000      	b.n	800b9ce <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b9cc:	687b      	ldr	r3, [r7, #4]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	08019918 	.word	0x08019918
 800b9dc:	08019924 	.word	0x08019924
 800b9e0:	08019930 	.word	0x08019930

0800b9e4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	@ 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d106      	bne.n	800ba08 <http_parse_request+0x24>
 800b9fa:	4b65      	ldr	r3, [pc, #404]	@ (800bb90 <http_parse_request+0x1ac>)
 800b9fc:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800ba00:	4964      	ldr	r1, [pc, #400]	@ (800bb94 <http_parse_request+0x1b0>)
 800ba02:	4865      	ldr	r0, [pc, #404]	@ (800bb98 <http_parse_request+0x1b4>)
 800ba04:	f00b ff48 	bl	8017898 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <http_parse_request+0x38>
 800ba0e:	4b60      	ldr	r3, [pc, #384]	@ (800bb90 <http_parse_request+0x1ac>)
 800ba10:	f240 72af 	movw	r2, #1967	@ 0x7af
 800ba14:	4961      	ldr	r1, [pc, #388]	@ (800bb9c <http_parse_request+0x1b8>)
 800ba16:	4860      	ldr	r0, [pc, #384]	@ (800bb98 <http_parse_request+0x1b4>)
 800ba18:	f00b ff3e 	bl	8017898 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d103      	bne.n	800ba2c <http_parse_request+0x48>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ba2c:	f06f 0307 	mvn.w	r3, #7
 800ba30:	e0a9      	b.n	800bb86 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d103      	bne.n	800ba42 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba3e:	621a      	str	r2, [r3, #32]
 800ba40:	e005      	b.n	800ba4e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f002 f88b 	bl	800db64 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ba4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba50:	f002 f860 	bl	800db14 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d012      	beq.n	800ba84 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	891b      	ldrh	r3, [r3, #8]
 800ba64:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	bf28      	it	cs
 800ba6c:	4613      	movcs	r3, r2
 800ba6e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6a18      	ldr	r0, [r3, #32]
 800ba74:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ba76:	2300      	movs	r3, #0
 800ba78:	4949      	ldr	r1, [pc, #292]	@ (800bba0 <http_parse_request+0x1bc>)
 800ba7a:	f002 f9ab 	bl	800ddd4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ba7e:	4b48      	ldr	r3, [pc, #288]	@ (800bba0 <http_parse_request+0x1bc>)
 800ba80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba82:	e005      	b.n	800ba90 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8c:	895b      	ldrh	r3, [r3, #10]
 800ba8e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ba90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ba92:	2b06      	cmp	r3, #6
 800ba94:	d962      	bls.n	800bb5c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ba96:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4942      	ldr	r1, [pc, #264]	@ (800bba4 <http_parse_request+0x1c0>)
 800ba9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ba9e:	f000 fb99 	bl	800c1d4 <lwip_strnstr>
 800baa2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d058      	beq.n	800bb5c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800baae:	2204      	movs	r2, #4
 800bab0:	493d      	ldr	r1, [pc, #244]	@ (800bba8 <http_parse_request+0x1c4>)
 800bab2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bab4:	f00b ffa4 	bl	8017a00 <strncmp>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d116      	bne.n	800baec <http_parse_request+0x108>
        sp1 = data + 3;
 800babe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bac0:	3303      	adds	r3, #3
 800bac2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b29b      	uxth	r3, r3
 800bace:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	3301      	adds	r3, #1
 800bad8:	8b7a      	ldrh	r2, [r7, #26]
 800bada:	4934      	ldr	r1, [pc, #208]	@ (800bbac <http_parse_request+0x1c8>)
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fb79 	bl	800c1d4 <lwip_strnstr>
 800bae2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d111      	bne.n	800bb0e <http_parse_request+0x12a>
 800baea:	e006      	b.n	800bafa <http_parse_request+0x116>
        data[4] = 0;
 800baec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baee:	3304      	adds	r3, #4
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800baf4:	f06f 030f 	mvn.w	r3, #15
 800baf8:	e045      	b.n	800bb86 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	3301      	adds	r3, #1
 800bafe:	8b7a      	ldrh	r2, [r7, #26]
 800bb00:	4928      	ldr	r1, [pc, #160]	@ (800bba4 <http_parse_request+0x1c0>)
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 fb66 	bl	800c1d4 <lwip_strnstr>
 800bb08:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	3301      	adds	r3, #1
 800bb12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01e      	beq.n	800bb5c <http_parse_request+0x178>
 800bb1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d91a      	bls.n	800bb5c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800bb26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4921      	ldr	r1, [pc, #132]	@ (800bbb0 <http_parse_request+0x1cc>)
 800bb2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bb2e:	f000 fb51 	bl	800c1d4 <lwip_strnstr>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d011      	beq.n	800bb5c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	2200      	movs	r2, #0
 800bb42:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bb44:	8b3b      	ldrh	r3, [r7, #24]
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	4413      	add	r3, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bb4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb50:	6979      	ldr	r1, [r7, #20]
 800bb52:	68b8      	ldr	r0, [r7, #8]
 800bb54:	f000 f82e 	bl	800bbb4 <http_find_file>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	e014      	b.n	800bb86 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 ffbf 	bl	800dae4 <pbuf_clen>
 800bb66:	4603      	mov	r3, r0
 800bb68:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	891b      	ldrh	r3, [r3, #8]
 800bb70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb74:	d205      	bcs.n	800bb82 <http_parse_request+0x19e>
 800bb76:	8a7b      	ldrh	r3, [r7, #18]
 800bb78:	2b05      	cmp	r3, #5
 800bb7a:	d802      	bhi.n	800bb82 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bb7c:	f06f 0304 	mvn.w	r3, #4
 800bb80:	e001      	b.n	800bb86 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bb82:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3738      	adds	r7, #56	@ 0x38
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	08019870 	.word	0x08019870
 800bb94:	0801993c 	.word	0x0801993c
 800bb98:	080198b8 	.word	0x080198b8
 800bb9c:	08019948 	.word	0x08019948
 800bba0:	2000b504 	.word	0x2000b504
 800bba4:	08019954 	.word	0x08019954
 800bba8:	08019958 	.word	0x08019958
 800bbac:	08019960 	.word	0x08019960
 800bbb0:	08019964 	.word	0x08019964

0800bbb4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b092      	sub	sp, #72	@ 0x48
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f7f4 fb27 	bl	8000224 <strlen>
 800bbd6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d06b      	beq.n	800bcb6 <http_find_file+0x102>
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	4413      	add	r3, r2
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bbea:	d164      	bne.n	800bcb6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bbec:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bbee:	4a53      	ldr	r2, [pc, #332]	@ (800bd3c <http_find_file+0x188>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d102      	bne.n	800bbfa <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bbf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d15d      	bne.n	800bcb6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800bbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc00:	bf28      	it	cs
 800bc02:	233f      	movcs	r3, #63	@ 0x3f
 800bc04:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800bc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00a      	beq.n	800bc22 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc10:	4619      	mov	r1, r3
 800bc12:	484a      	ldr	r0, [pc, #296]	@ (800bd3c <http_find_file+0x188>)
 800bc14:	f00b ffc9 	bl	8017baa <memcpy>
      http_uri_buf[copy_len] = 0;
 800bc18:	4a48      	ldr	r2, [pc, #288]	@ (800bd3c <http_find_file+0x188>)
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1c:	4413      	add	r3, r2
 800bc1e:	2200      	movs	r2, #0
 800bc20:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bc22:	2300      	movs	r3, #0
 800bc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc26:	e043      	b.n	800bcb0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d028      	beq.n	800bc80 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc30:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800bc34:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01e      	beq.n	800bc7a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800bc3c:	4a40      	ldr	r2, [pc, #256]	@ (800bd40 <http_find_file+0x18c>)
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f4 faed 	bl	8000224 <strlen>
 800bc4a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800bc4c:	69fa      	ldr	r2, [r7, #28]
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	4293      	cmp	r3, r2
 800bc52:	bf28      	it	cs
 800bc54:	4613      	movcs	r3, r2
 800bc56:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	4a38      	ldr	r2, [pc, #224]	@ (800bd3c <http_find_file+0x188>)
 800bc5c:	1898      	adds	r0, r3, r2
 800bc5e:	4a38      	ldr	r2, [pc, #224]	@ (800bd40 <http_find_file+0x18c>)
 800bc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc66:	69ba      	ldr	r2, [r7, #24]
 800bc68:	4619      	mov	r1, r3
 800bc6a:	f00b ff9e 	bl	8017baa <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800bc6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	4413      	add	r3, r2
 800bc74:	4a31      	ldr	r2, [pc, #196]	@ (800bd3c <http_find_file+0x188>)
 800bc76:	2100      	movs	r1, #0
 800bc78:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800bc7a:	4b30      	ldr	r3, [pc, #192]	@ (800bd3c <http_find_file+0x188>)
 800bc7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc7e:	e004      	b.n	800bc8a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800bc80:	4a2f      	ldr	r2, [pc, #188]	@ (800bd40 <http_find_file+0x18c>)
 800bc82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc88:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fc58 	bl	800b544 <fs_open>
 800bc94:	4603      	mov	r3, r0
 800bc96:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800bc98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d104      	bne.n	800bcaa <http_find_file+0xf6>
        uri = file_name;
 800bca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800bca8:	e005      	b.n	800bcb6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bcaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcac:	3301      	adds	r3, #1
 800bcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d9b8      	bls.n	800bc28 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d124      	bne.n	800bd06 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	213f      	movs	r1, #63	@ 0x3f
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f00b fe90 	bl	80179e6 <strchr>
 800bcc6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d005      	beq.n	800bcda <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bcce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
      params++;
 800bcd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff fc2f 	bl	800b544 <fs_open>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800bcea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <http_find_file+0x144>
      file = &hs->file_handle;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcf6:	e006      	b.n	800bd06 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7ff fe2a 	bl	800b958 <http_get_404_file>
 800bd04:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800bd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800bd0c:	f107 0308 	add.w	r3, r7, #8
 800bd10:	4619      	mov	r1, r3
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff fe20 	bl	800b958 <http_get_404_file>
 800bd18:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd1e:	9301      	str	r3, [sp, #4]
 800bd20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	4613      	mov	r3, r2
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f809 	bl	800bd44 <http_init_file>
 800bd32:	4603      	mov	r3, r0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3740      	adds	r7, #64	@ 0x40
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	2000b904 	.word	0x2000b904
 800bd40:	0801d0b8 	.word	0x0801d0b8

0800bd44 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d05c      	beq.n	800be12 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d106      	bne.n	800bd6e <http_init_file+0x2a>
 800bd60:	4b35      	ldr	r3, [pc, #212]	@ (800be38 <http_init_file+0xf4>)
 800bd62:	f640 120b 	movw	r2, #2315	@ 0x90b
 800bd66:	4935      	ldr	r1, [pc, #212]	@ (800be3c <http_init_file+0xf8>)
 800bd68:	4835      	ldr	r0, [pc, #212]	@ (800be40 <http_init_file+0xfc>)
 800bd6a:	f00b fd95 	bl	8017898 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	da06      	bge.n	800bd92 <http_init_file+0x4e>
 800bd84:	4b2c      	ldr	r3, [pc, #176]	@ (800be38 <http_init_file+0xf4>)
 800bd86:	f640 1234 	movw	r2, #2356	@ 0x934
 800bd8a:	492e      	ldr	r1, [pc, #184]	@ (800be44 <http_init_file+0x100>)
 800bd8c:	482c      	ldr	r0, [pc, #176]	@ (800be40 <http_init_file+0xfc>)
 800bd8e:	f00b fd83 	bl	8017898 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	461a      	mov	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	7c1b      	ldrb	r3, [r3, #16]
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d106      	bne.n	800bdc0 <http_init_file+0x7c>
 800bdb2:	4b21      	ldr	r3, [pc, #132]	@ (800be38 <http_init_file+0xf4>)
 800bdb4:	f640 1243 	movw	r2, #2371	@ 0x943
 800bdb8:	4923      	ldr	r1, [pc, #140]	@ (800be48 <http_init_file+0x104>)
 800bdba:	4821      	ldr	r0, [pc, #132]	@ (800be40 <http_init_file+0xfc>)
 800bdbc:	f00b fd6c 	bl	8017898 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d032      	beq.n	800be2c <http_init_file+0xe8>
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	7c1b      	ldrb	r3, [r3, #16]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d02b      	beq.n	800be2c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6998      	ldr	r0, [r3, #24]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bddc:	461a      	mov	r2, r3
 800bdde:	491b      	ldr	r1, [pc, #108]	@ (800be4c <http_init_file+0x108>)
 800bde0:	f000 f9f8 	bl	800c1d4 <lwip_strnstr>
 800bde4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01f      	beq.n	800be2c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	1d1a      	adds	r2, r3, #4
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	699a      	ldr	r2, [r3, #24]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	441a      	add	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800be10:	e00c      	b.n	800be2c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	08019870 	.word	0x08019870
 800be3c:	0801996c 	.word	0x0801996c
 800be40:	080198b8 	.word	0x080198b8
 800be44:	08019980 	.word	0x08019980
 800be48:	080199a0 	.word	0x080199a0
 800be4c:	08019964 	.word	0x08019964

0800be50 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <http_err+0x1c>
    http_state_free(hs);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fc02 	bl	800b670 <http_state_free>
  }
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	4613      	mov	r3, r2
 800be80:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <http_sent+0x1c>
    return ERR_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e008      	b.n	800bea2 <http_sent+0x2e>
  }

  hs->retries = 0;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800be98:	6979      	ldr	r1, [r7, #20]
 800be9a:	68b8      	ldr	r0, [r7, #8]
 800be9c:	f7ff fd25 	bl	800b8ea <http_send>

  return ERR_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d107      	bne.n	800bece <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800bebe:	2100      	movs	r1, #0
 800bec0:	6838      	ldr	r0, [r7, #0]
 800bec2:	f7ff fc91 	bl	800b7e8 <http_close_conn>
 800bec6:	4603      	mov	r3, r0
 800bec8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e021      	b.n	800bf12 <http_poll+0x68>
  } else {
    hs->retries++;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bed4:	3301      	adds	r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	d105      	bne.n	800bef4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800bee8:	68f9      	ldr	r1, [r7, #12]
 800beea:	6838      	ldr	r0, [r7, #0]
 800beec:	f7ff fc7c 	bl	800b7e8 <http_close_conn>
      return ERR_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	e00e      	b.n	800bf12 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800befc:	68f9      	ldr	r1, [r7, #12]
 800befe:	6838      	ldr	r0, [r7, #0]
 800bf00:	f7ff fcf3 	bl	800b8ea <http_send>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800bf0a:	6838      	ldr	r0, [r7, #0]
 800bf0c:	f007 f942 	bl	8013194 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800bf2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d105      	bne.n	800bf42 <http_recv+0x26>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <http_recv+0x26>
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d111      	bne.n	800bf66 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d008      	beq.n	800bf5a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	891b      	ldrh	r3, [r3, #8]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	68b8      	ldr	r0, [r7, #8]
 800bf50:	f002 fd14 	bl	800e97c <tcp_recved>
      pbuf_free(p);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fd37 	bl	800d9c8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800bf5a:	6979      	ldr	r1, [r7, #20]
 800bf5c:	68b8      	ldr	r0, [r7, #8]
 800bf5e:	f7ff fc43 	bl	800b7e8 <http_close_conn>
    return ERR_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e055      	b.n	800c012 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	891b      	ldrh	r3, [r3, #8]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68b8      	ldr	r0, [r7, #8]
 800bf6e:	f002 fd05 	bl	800e97c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d147      	bne.n	800c00a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	6979      	ldr	r1, [r7, #20]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fd30 	bl	800b9e4 <http_parse_request>
 800bf84:	4603      	mov	r3, r0
 800bf86:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800bf88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d015      	beq.n	800bfbc <http_recv+0xa0>
 800bf90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf94:	f113 0f05 	cmn.w	r3, #5
 800bf98:	d010      	beq.n	800bfbc <http_recv+0xa0>
 800bf9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf9e:	f113 0f10 	cmn.w	r3, #16
 800bfa2:	d00b      	beq.n	800bfbc <http_recv+0xa0>
 800bfa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfa8:	f113 0f08 	cmn.w	r3, #8
 800bfac:	d006      	beq.n	800bfbc <http_recv+0xa0>
 800bfae:	4b1b      	ldr	r3, [pc, #108]	@ (800c01c <http_recv+0x100>)
 800bfb0:	f640 2204 	movw	r2, #2564	@ 0xa04
 800bfb4:	491a      	ldr	r1, [pc, #104]	@ (800c020 <http_recv+0x104>)
 800bfb6:	481b      	ldr	r0, [pc, #108]	@ (800c024 <http_recv+0x108>)
 800bfb8:	f00b fc6e 	bl	8017898 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800bfbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfc0:	f113 0f05 	cmn.w	r3, #5
 800bfc4:	d00b      	beq.n	800bfde <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d007      	beq.n	800bfde <http_recv+0xc2>
          pbuf_free(hs->req);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f001 fcf8 	bl	800d9c8 <pbuf_free>
          hs->req = NULL;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 fcf2 	bl	800d9c8 <pbuf_free>
      if (parsed == ERR_OK) {
 800bfe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d104      	bne.n	800bff6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800bfec:	6979      	ldr	r1, [r7, #20]
 800bfee:	68b8      	ldr	r0, [r7, #8]
 800bff0:	f7ff fc7b 	bl	800b8ea <http_send>
 800bff4:	e00c      	b.n	800c010 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800bff6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bffa:	f113 0f10 	cmn.w	r3, #16
 800bffe:	d107      	bne.n	800c010 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c000:	6979      	ldr	r1, [r7, #20]
 800c002:	68b8      	ldr	r0, [r7, #8]
 800c004:	f7ff fbf0 	bl	800b7e8 <http_close_conn>
 800c008:	e002      	b.n	800c010 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 fcdc 	bl	800d9c8 <pbuf_free>
    }
  }
  return ERR_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08019870 	.word	0x08019870
 800c020:	080199cc 	.word	0x080199cc
 800c024:	080198b8 	.word	0x080198b8

0800c028 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	4613      	mov	r3, r2
 800c034:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <http_accept+0x1c>
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <http_accept+0x22>
    return ERR_VAL;
 800c044:	f06f 0305 	mvn.w	r3, #5
 800c048:	e025      	b.n	800c096 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c04a:	2101      	movs	r1, #1
 800c04c:	68b8      	ldr	r0, [r7, #8]
 800c04e:	f003 f97b 	bl	800f348 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c052:	f7ff fadb 	bl	800b60c <http_state_alloc>
 800c056:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c05e:	f04f 33ff 	mov.w	r3, #4294967295
 800c062:	e018      	b.n	800c096 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c06a:	6979      	ldr	r1, [r7, #20]
 800c06c:	68b8      	ldr	r0, [r7, #8]
 800c06e:	f003 fb6b 	bl	800f748 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c072:	490b      	ldr	r1, [pc, #44]	@ (800c0a0 <http_accept+0x78>)
 800c074:	68b8      	ldr	r0, [r7, #8]
 800c076:	f003 fb79 	bl	800f76c <tcp_recv>
  altcp_err(pcb, http_err);
 800c07a:	490a      	ldr	r1, [pc, #40]	@ (800c0a4 <http_accept+0x7c>)
 800c07c:	68b8      	ldr	r0, [r7, #8]
 800c07e:	f003 fbb9 	bl	800f7f4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c082:	2204      	movs	r2, #4
 800c084:	4908      	ldr	r1, [pc, #32]	@ (800c0a8 <http_accept+0x80>)
 800c086:	68b8      	ldr	r0, [r7, #8]
 800c088:	f003 fbee 	bl	800f868 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c08c:	4907      	ldr	r1, [pc, #28]	@ (800c0ac <http_accept+0x84>)
 800c08e:	68b8      	ldr	r0, [r7, #8]
 800c090:	f003 fb8e 	bl	800f7b0 <tcp_sent>

  return ERR_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800bf1d 	.word	0x0800bf1d
 800c0a4:	0800be51 	.word	0x0800be51
 800c0a8:	0800beab 	.word	0x0800beab
 800c0ac:	0800be75 	.word	0x0800be75

0800c0b0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d029      	beq.n	800c116 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f003 f93f 	bl	800f348 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c0ca:	887b      	ldrh	r3, [r7, #2]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4914      	ldr	r1, [pc, #80]	@ (800c120 <httpd_init_pcb+0x70>)
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f002 fa85 	bl	800e5e0 <tcp_bind>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <httpd_init_pcb+0x40>
 800c0e2:	4b10      	ldr	r3, [pc, #64]	@ (800c124 <httpd_init_pcb+0x74>)
 800c0e4:	f640 2257 	movw	r2, #2647	@ 0xa57
 800c0e8:	490f      	ldr	r1, [pc, #60]	@ (800c128 <httpd_init_pcb+0x78>)
 800c0ea:	4810      	ldr	r0, [pc, #64]	@ (800c12c <httpd_init_pcb+0x7c>)
 800c0ec:	f00b fbd4 	bl	8017898 <iprintf>
    pcb = altcp_listen(pcb);
 800c0f0:	21ff      	movs	r1, #255	@ 0xff
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f002 fb2c 	bl	800e750 <tcp_listen_with_backlog>
 800c0f8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d106      	bne.n	800c10e <httpd_init_pcb+0x5e>
 800c100:	4b08      	ldr	r3, [pc, #32]	@ (800c124 <httpd_init_pcb+0x74>)
 800c102:	f640 2259 	movw	r2, #2649	@ 0xa59
 800c106:	490a      	ldr	r1, [pc, #40]	@ (800c130 <httpd_init_pcb+0x80>)
 800c108:	4808      	ldr	r0, [pc, #32]	@ (800c12c <httpd_init_pcb+0x7c>)
 800c10a:	f00b fbc5 	bl	8017898 <iprintf>
    altcp_accept(pcb, http_accept);
 800c10e:	4909      	ldr	r1, [pc, #36]	@ (800c134 <httpd_init_pcb+0x84>)
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f003 fb91 	bl	800f838 <tcp_accept>
  }
}
 800c116:	bf00      	nop
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	0801d1f0 	.word	0x0801d1f0
 800c124:	08019870 	.word	0x08019870
 800c128:	080199f8 	.word	0x080199f8
 800c12c:	080198b8 	.word	0x080198b8
 800c130:	08019a14 	.word	0x08019a14
 800c134:	0800c029 	.word	0x0800c029

0800c138 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c13e:	202e      	movs	r0, #46	@ 0x2e
 800c140:	f003 faf4 	bl	800f72c <tcp_new_ip_type>
 800c144:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d106      	bne.n	800c15a <httpd_init+0x22>
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <httpd_init+0x34>)
 800c14e:	f640 2272 	movw	r2, #2674	@ 0xa72
 800c152:	4907      	ldr	r1, [pc, #28]	@ (800c170 <httpd_init+0x38>)
 800c154:	4807      	ldr	r0, [pc, #28]	@ (800c174 <httpd_init+0x3c>)
 800c156:	f00b fb9f 	bl	8017898 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c15a:	2150      	movs	r1, #80	@ 0x50
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7ff ffa7 	bl	800c0b0 <httpd_init_pcb>
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	08019870 	.word	0x08019870
 800c170:	08019a34 	.word	0x08019a34
 800c174:	080198b8 	.word	0x080198b8

0800c178 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c182:	88fb      	ldrh	r3, [r7, #6]
 800c184:	021b      	lsls	r3, r3, #8
 800c186:	b21a      	sxth	r2, r3
 800c188:	88fb      	ldrh	r3, [r7, #6]
 800c18a:	0a1b      	lsrs	r3, r3, #8
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	b21b      	sxth	r3, r3
 800c190:	4313      	orrs	r3, r2
 800c192:	b21b      	sxth	r3, r3
 800c194:	b29b      	uxth	r3, r3
}
 800c196:	4618      	mov	r0, r3
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	061a      	lsls	r2, r3, #24
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	0e1b      	lsrs	r3, r3, #24
 800c1c6:	4313      	orrs	r3, r2
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c1e0:	68b8      	ldr	r0, [r7, #8]
 800c1e2:	f7f4 f81f 	bl	8000224 <strlen>
 800c1e6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	e022      	b.n	800c238 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	e012      	b.n	800c21e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d109      	bne.n	800c218 <lwip_strnstr+0x44>
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	6978      	ldr	r0, [r7, #20]
 800c20a:	f00b fbf9 	bl	8017a00 <strncmp>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	e00f      	b.n	800c238 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	3301      	adds	r3, #1
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d007      	beq.n	800c236 <lwip_strnstr+0x62>
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	441a      	add	r2, r3
 800c22c:	68f9      	ldr	r1, [r7, #12]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	440b      	add	r3, r1
 800c232:	429a      	cmp	r2, r3
 800c234:	d9e0      	bls.n	800c1f8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c24a:	f00b f99b 	bl	8017584 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c24e:	f000 f8d5 	bl	800c3fc <mem_init>
  memp_init();
 800c252:	f000 fc31 	bl	800cab8 <memp_init>
  pbuf_init();
  netif_init();
 800c256:	f000 fd3d 	bl	800ccd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c25a:	f008 f88b 	bl	8014374 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c25e:	f001 fe5d 	bl	800df1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c262:	f007 ffcd 	bl	8014200 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c266:	bf00      	nop
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c27a:	4b05      	ldr	r3, [pc, #20]	@ (800c290 <ptr_to_mem+0x20>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	88fb      	ldrh	r3, [r7, #6]
 800c280:	4413      	add	r3, r2
}
 800c282:	4618      	mov	r0, r3
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	2000bfb0 	.word	0x2000bfb0

0800c294 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c29c:	4b05      	ldr	r3, [pc, #20]	@ (800c2b4 <mem_to_ptr+0x20>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	b29b      	uxth	r3, r3
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	2000bfb0 	.word	0x2000bfb0

0800c2b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c2c0:	4b45      	ldr	r3, [pc, #276]	@ (800c3d8 <plug_holes+0x120>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d206      	bcs.n	800c2d8 <plug_holes+0x20>
 800c2ca:	4b44      	ldr	r3, [pc, #272]	@ (800c3dc <plug_holes+0x124>)
 800c2cc:	f240 12df 	movw	r2, #479	@ 0x1df
 800c2d0:	4943      	ldr	r1, [pc, #268]	@ (800c3e0 <plug_holes+0x128>)
 800c2d2:	4844      	ldr	r0, [pc, #272]	@ (800c3e4 <plug_holes+0x12c>)
 800c2d4:	f00b fae0 	bl	8017898 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c2d8:	4b43      	ldr	r3, [pc, #268]	@ (800c3e8 <plug_holes+0x130>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d306      	bcc.n	800c2f0 <plug_holes+0x38>
 800c2e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c3dc <plug_holes+0x124>)
 800c2e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c2e8:	4940      	ldr	r1, [pc, #256]	@ (800c3ec <plug_holes+0x134>)
 800c2ea:	483e      	ldr	r0, [pc, #248]	@ (800c3e4 <plug_holes+0x12c>)
 800c2ec:	f00b fad4 	bl	8017898 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	791b      	ldrb	r3, [r3, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d006      	beq.n	800c306 <plug_holes+0x4e>
 800c2f8:	4b38      	ldr	r3, [pc, #224]	@ (800c3dc <plug_holes+0x124>)
 800c2fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c2fe:	493c      	ldr	r1, [pc, #240]	@ (800c3f0 <plug_holes+0x138>)
 800c300:	4838      	ldr	r0, [pc, #224]	@ (800c3e4 <plug_holes+0x12c>)
 800c302:	f00b fac9 	bl	8017898 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c30e:	d906      	bls.n	800c31e <plug_holes+0x66>
 800c310:	4b32      	ldr	r3, [pc, #200]	@ (800c3dc <plug_holes+0x124>)
 800c312:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c316:	4937      	ldr	r1, [pc, #220]	@ (800c3f4 <plug_holes+0x13c>)
 800c318:	4832      	ldr	r0, [pc, #200]	@ (800c3e4 <plug_holes+0x12c>)
 800c31a:	f00b fabd 	bl	8017898 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff ffa4 	bl	800c270 <ptr_to_mem>
 800c328:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d024      	beq.n	800c37c <plug_holes+0xc4>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	791b      	ldrb	r3, [r3, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d120      	bne.n	800c37c <plug_holes+0xc4>
 800c33a:	4b2b      	ldr	r3, [pc, #172]	@ (800c3e8 <plug_holes+0x130>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	429a      	cmp	r2, r3
 800c342:	d01b      	beq.n	800c37c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c344:	4b2c      	ldr	r3, [pc, #176]	@ (800c3f8 <plug_holes+0x140>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d102      	bne.n	800c354 <plug_holes+0x9c>
      lfree = mem;
 800c34e:	4a2a      	ldr	r2, [pc, #168]	@ (800c3f8 <plug_holes+0x140>)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	881a      	ldrh	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c364:	d00a      	beq.n	800c37c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7ff ff80 	bl	800c270 <ptr_to_mem>
 800c370:	4604      	mov	r4, r0
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff ff8e 	bl	800c294 <mem_to_ptr>
 800c378:	4603      	mov	r3, r0
 800c37a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	885b      	ldrh	r3, [r3, #2]
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff ff75 	bl	800c270 <ptr_to_mem>
 800c386:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c388:	68ba      	ldr	r2, [r7, #8]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d01f      	beq.n	800c3d0 <plug_holes+0x118>
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	791b      	ldrb	r3, [r3, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11b      	bne.n	800c3d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c398:	4b17      	ldr	r3, [pc, #92]	@ (800c3f8 <plug_holes+0x140>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d102      	bne.n	800c3a8 <plug_holes+0xf0>
      lfree = pmem;
 800c3a2:	4a15      	ldr	r2, [pc, #84]	@ (800c3f8 <plug_holes+0x140>)
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	881a      	ldrh	r2, [r3, #0]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c3b8:	d00a      	beq.n	800c3d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7ff ff56 	bl	800c270 <ptr_to_mem>
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	68b8      	ldr	r0, [r7, #8]
 800c3c8:	f7ff ff64 	bl	800c294 <mem_to_ptr>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd90      	pop	{r4, r7, pc}
 800c3d8:	2000bfb0 	.word	0x2000bfb0
 800c3dc:	08019a50 	.word	0x08019a50
 800c3e0:	08019a80 	.word	0x08019a80
 800c3e4:	08019a98 	.word	0x08019a98
 800c3e8:	2000bfb4 	.word	0x2000bfb4
 800c3ec:	08019ac0 	.word	0x08019ac0
 800c3f0:	08019adc 	.word	0x08019adc
 800c3f4:	08019af8 	.word	0x08019af8
 800c3f8:	2000bfbc 	.word	0x2000bfbc

0800c3fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c402:	4b1f      	ldr	r3, [pc, #124]	@ (800c480 <mem_init+0x84>)
 800c404:	3303      	adds	r3, #3
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	461a      	mov	r2, r3
 800c40c:	4b1d      	ldr	r3, [pc, #116]	@ (800c484 <mem_init+0x88>)
 800c40e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c410:	4b1c      	ldr	r3, [pc, #112]	@ (800c484 <mem_init+0x88>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c41c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c42a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c42e:	f7ff ff1f 	bl	800c270 <ptr_to_mem>
 800c432:	4603      	mov	r3, r0
 800c434:	4a14      	ldr	r2, [pc, #80]	@ (800c488 <mem_init+0x8c>)
 800c436:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c438:	4b13      	ldr	r3, [pc, #76]	@ (800c488 <mem_init+0x8c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2201      	movs	r2, #1
 800c43e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c440:	4b11      	ldr	r3, [pc, #68]	@ (800c488 <mem_init+0x8c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c448:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c44a:	4b0f      	ldr	r3, [pc, #60]	@ (800c488 <mem_init+0x8c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c452:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c454:	4b0b      	ldr	r3, [pc, #44]	@ (800c484 <mem_init+0x88>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a0c      	ldr	r2, [pc, #48]	@ (800c48c <mem_init+0x90>)
 800c45a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c45c:	480c      	ldr	r0, [pc, #48]	@ (800c490 <mem_init+0x94>)
 800c45e:	f00b f89f 	bl	80175a0 <sys_mutex_new>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d006      	beq.n	800c476 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c468:	4b0a      	ldr	r3, [pc, #40]	@ (800c494 <mem_init+0x98>)
 800c46a:	f240 221f 	movw	r2, #543	@ 0x21f
 800c46e:	490a      	ldr	r1, [pc, #40]	@ (800c498 <mem_init+0x9c>)
 800c470:	480a      	ldr	r0, [pc, #40]	@ (800c49c <mem_init+0xa0>)
 800c472:	f00b fa11 	bl	8017898 <iprintf>
  }
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	2000b95c 	.word	0x2000b95c
 800c484:	2000bfb0 	.word	0x2000bfb0
 800c488:	2000bfb4 	.word	0x2000bfb4
 800c48c:	2000bfbc 	.word	0x2000bfbc
 800c490:	2000bfb8 	.word	0x2000bfb8
 800c494:	08019a50 	.word	0x08019a50
 800c498:	08019b24 	.word	0x08019b24
 800c49c:	08019a98 	.word	0x08019a98

0800c4a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7ff fef3 	bl	800c294 <mem_to_ptr>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff feda 	bl	800c270 <ptr_to_mem>
 800c4bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	885b      	ldrh	r3, [r3, #2]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff fed4 	bl	800c270 <ptr_to_mem>
 800c4c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c4d2:	d818      	bhi.n	800c506 <mem_link_valid+0x66>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c4dc:	d813      	bhi.n	800c506 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c4e2:	8afa      	ldrh	r2, [r7, #22]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d004      	beq.n	800c4f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	8afa      	ldrh	r2, [r7, #22]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d109      	bne.n	800c506 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c4f2:	4b08      	ldr	r3, [pc, #32]	@ (800c514 <mem_link_valid+0x74>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d006      	beq.n	800c50a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	885b      	ldrh	r3, [r3, #2]
 800c500:	8afa      	ldrh	r2, [r7, #22]
 800c502:	429a      	cmp	r2, r3
 800c504:	d001      	beq.n	800c50a <mem_link_valid+0x6a>
    return 0;
 800c506:	2300      	movs	r3, #0
 800c508:	e000      	b.n	800c50c <mem_link_valid+0x6c>
  }
  return 1;
 800c50a:	2301      	movs	r3, #1
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	2000bfb4 	.word	0x2000bfb4

0800c518 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d070      	beq.n	800c608 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00d      	beq.n	800c54c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c530:	4b37      	ldr	r3, [pc, #220]	@ (800c610 <mem_free+0xf8>)
 800c532:	f240 2273 	movw	r2, #627	@ 0x273
 800c536:	4937      	ldr	r1, [pc, #220]	@ (800c614 <mem_free+0xfc>)
 800c538:	4837      	ldr	r0, [pc, #220]	@ (800c618 <mem_free+0x100>)
 800c53a:	f00b f9ad 	bl	8017898 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c53e:	f00b f88d 	bl	801765c <sys_arch_protect>
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f00b f897 	bl	8017678 <sys_arch_unprotect>
    return;
 800c54a:	e05e      	b.n	800c60a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	3b08      	subs	r3, #8
 800c550:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c552:	4b32      	ldr	r3, [pc, #200]	@ (800c61c <mem_free+0x104>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	69fa      	ldr	r2, [r7, #28]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d306      	bcc.n	800c56a <mem_free+0x52>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f103 020c 	add.w	r2, r3, #12
 800c562:	4b2f      	ldr	r3, [pc, #188]	@ (800c620 <mem_free+0x108>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d90d      	bls.n	800c586 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c56a:	4b29      	ldr	r3, [pc, #164]	@ (800c610 <mem_free+0xf8>)
 800c56c:	f240 227f 	movw	r2, #639	@ 0x27f
 800c570:	492c      	ldr	r1, [pc, #176]	@ (800c624 <mem_free+0x10c>)
 800c572:	4829      	ldr	r0, [pc, #164]	@ (800c618 <mem_free+0x100>)
 800c574:	f00b f990 	bl	8017898 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c578:	f00b f870 	bl	801765c <sys_arch_protect>
 800c57c:	6138      	str	r0, [r7, #16]
 800c57e:	6938      	ldr	r0, [r7, #16]
 800c580:	f00b f87a 	bl	8017678 <sys_arch_unprotect>
    return;
 800c584:	e041      	b.n	800c60a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c586:	4828      	ldr	r0, [pc, #160]	@ (800c628 <mem_free+0x110>)
 800c588:	f00b f826 	bl	80175d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	791b      	ldrb	r3, [r3, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d110      	bne.n	800c5b6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c594:	4b1e      	ldr	r3, [pc, #120]	@ (800c610 <mem_free+0xf8>)
 800c596:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c59a:	4924      	ldr	r1, [pc, #144]	@ (800c62c <mem_free+0x114>)
 800c59c:	481e      	ldr	r0, [pc, #120]	@ (800c618 <mem_free+0x100>)
 800c59e:	f00b f97b 	bl	8017898 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c5a2:	4821      	ldr	r0, [pc, #132]	@ (800c628 <mem_free+0x110>)
 800c5a4:	f00b f827 	bl	80175f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5a8:	f00b f858 	bl	801765c <sys_arch_protect>
 800c5ac:	6178      	str	r0, [r7, #20]
 800c5ae:	6978      	ldr	r0, [r7, #20]
 800c5b0:	f00b f862 	bl	8017678 <sys_arch_unprotect>
    return;
 800c5b4:	e029      	b.n	800c60a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c5b6:	69f8      	ldr	r0, [r7, #28]
 800c5b8:	f7ff ff72 	bl	800c4a0 <mem_link_valid>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d110      	bne.n	800c5e4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c5c2:	4b13      	ldr	r3, [pc, #76]	@ (800c610 <mem_free+0xf8>)
 800c5c4:	f240 2295 	movw	r2, #661	@ 0x295
 800c5c8:	4919      	ldr	r1, [pc, #100]	@ (800c630 <mem_free+0x118>)
 800c5ca:	4813      	ldr	r0, [pc, #76]	@ (800c618 <mem_free+0x100>)
 800c5cc:	f00b f964 	bl	8017898 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c5d0:	4815      	ldr	r0, [pc, #84]	@ (800c628 <mem_free+0x110>)
 800c5d2:	f00b f810 	bl	80175f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c5d6:	f00b f841 	bl	801765c <sys_arch_protect>
 800c5da:	61b8      	str	r0, [r7, #24]
 800c5dc:	69b8      	ldr	r0, [r7, #24]
 800c5de:	f00b f84b 	bl	8017678 <sys_arch_unprotect>
    return;
 800c5e2:	e012      	b.n	800c60a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c5ea:	4b12      	ldr	r3, [pc, #72]	@ (800c634 <mem_free+0x11c>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d202      	bcs.n	800c5fa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c5f4:	4a0f      	ldr	r2, [pc, #60]	@ (800c634 <mem_free+0x11c>)
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c5fa:	69f8      	ldr	r0, [r7, #28]
 800c5fc:	f7ff fe5c 	bl	800c2b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c600:	4809      	ldr	r0, [pc, #36]	@ (800c628 <mem_free+0x110>)
 800c602:	f00a fff8 	bl	80175f6 <sys_mutex_unlock>
 800c606:	e000      	b.n	800c60a <mem_free+0xf2>
    return;
 800c608:	bf00      	nop
}
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08019a50 	.word	0x08019a50
 800c614:	08019b40 	.word	0x08019b40
 800c618:	08019a98 	.word	0x08019a98
 800c61c:	2000bfb0 	.word	0x2000bfb0
 800c620:	2000bfb4 	.word	0x2000bfb4
 800c624:	08019b64 	.word	0x08019b64
 800c628:	2000bfb8 	.word	0x2000bfb8
 800c62c:	08019b80 	.word	0x08019b80
 800c630:	08019ba8 	.word	0x08019ba8
 800c634:	2000bfbc 	.word	0x2000bfbc

0800c638 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c644:	887b      	ldrh	r3, [r7, #2]
 800c646:	3303      	adds	r3, #3
 800c648:	b29b      	uxth	r3, r3
 800c64a:	f023 0303 	bic.w	r3, r3, #3
 800c64e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c650:	8bfb      	ldrh	r3, [r7, #30]
 800c652:	2b0b      	cmp	r3, #11
 800c654:	d801      	bhi.n	800c65a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c656:	230c      	movs	r3, #12
 800c658:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c65a:	8bfb      	ldrh	r3, [r7, #30]
 800c65c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c660:	d803      	bhi.n	800c66a <mem_trim+0x32>
 800c662:	8bfa      	ldrh	r2, [r7, #30]
 800c664:	887b      	ldrh	r3, [r7, #2]
 800c666:	429a      	cmp	r2, r3
 800c668:	d201      	bcs.n	800c66e <mem_trim+0x36>
    return NULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e0d8      	b.n	800c820 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c66e:	4b6e      	ldr	r3, [pc, #440]	@ (800c828 <mem_trim+0x1f0>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	429a      	cmp	r2, r3
 800c676:	d304      	bcc.n	800c682 <mem_trim+0x4a>
 800c678:	4b6c      	ldr	r3, [pc, #432]	@ (800c82c <mem_trim+0x1f4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d306      	bcc.n	800c690 <mem_trim+0x58>
 800c682:	4b6b      	ldr	r3, [pc, #428]	@ (800c830 <mem_trim+0x1f8>)
 800c684:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c688:	496a      	ldr	r1, [pc, #424]	@ (800c834 <mem_trim+0x1fc>)
 800c68a:	486b      	ldr	r0, [pc, #428]	@ (800c838 <mem_trim+0x200>)
 800c68c:	f00b f904 	bl	8017898 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c690:	4b65      	ldr	r3, [pc, #404]	@ (800c828 <mem_trim+0x1f0>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d304      	bcc.n	800c6a4 <mem_trim+0x6c>
 800c69a:	4b64      	ldr	r3, [pc, #400]	@ (800c82c <mem_trim+0x1f4>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d307      	bcc.n	800c6b4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c6a4:	f00a ffda 	bl	801765c <sys_arch_protect>
 800c6a8:	60b8      	str	r0, [r7, #8]
 800c6aa:	68b8      	ldr	r0, [r7, #8]
 800c6ac:	f00a ffe4 	bl	8017678 <sys_arch_unprotect>
    return rmem;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	e0b5      	b.n	800c820 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3b08      	subs	r3, #8
 800c6b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c6ba:	69b8      	ldr	r0, [r7, #24]
 800c6bc:	f7ff fdea 	bl	800c294 <mem_to_ptr>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	881a      	ldrh	r2, [r3, #0]
 800c6c8:	8afb      	ldrh	r3, [r7, #22]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	3b08      	subs	r3, #8
 800c6d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c6d2:	8bfa      	ldrh	r2, [r7, #30]
 800c6d4:	8abb      	ldrh	r3, [r7, #20]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d906      	bls.n	800c6e8 <mem_trim+0xb0>
 800c6da:	4b55      	ldr	r3, [pc, #340]	@ (800c830 <mem_trim+0x1f8>)
 800c6dc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c6e0:	4956      	ldr	r1, [pc, #344]	@ (800c83c <mem_trim+0x204>)
 800c6e2:	4855      	ldr	r0, [pc, #340]	@ (800c838 <mem_trim+0x200>)
 800c6e4:	f00b f8d8 	bl	8017898 <iprintf>
  if (newsize > size) {
 800c6e8:	8bfa      	ldrh	r2, [r7, #30]
 800c6ea:	8abb      	ldrh	r3, [r7, #20]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d901      	bls.n	800c6f4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	e095      	b.n	800c820 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c6f4:	8bfa      	ldrh	r2, [r7, #30]
 800c6f6:	8abb      	ldrh	r3, [r7, #20]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d101      	bne.n	800c700 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	e08f      	b.n	800c820 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c700:	484f      	ldr	r0, [pc, #316]	@ (800c840 <mem_trim+0x208>)
 800c702:	f00a ff69 	bl	80175d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fdb0 	bl	800c270 <ptr_to_mem>
 800c710:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	791b      	ldrb	r3, [r3, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d13f      	bne.n	800c79a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c722:	d106      	bne.n	800c732 <mem_trim+0xfa>
 800c724:	4b42      	ldr	r3, [pc, #264]	@ (800c830 <mem_trim+0x1f8>)
 800c726:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c72a:	4946      	ldr	r1, [pc, #280]	@ (800c844 <mem_trim+0x20c>)
 800c72c:	4842      	ldr	r0, [pc, #264]	@ (800c838 <mem_trim+0x200>)
 800c72e:	f00b f8b3 	bl	8017898 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c738:	8afa      	ldrh	r2, [r7, #22]
 800c73a:	8bfb      	ldrh	r3, [r7, #30]
 800c73c:	4413      	add	r3, r2
 800c73e:	b29b      	uxth	r3, r3
 800c740:	3308      	adds	r3, #8
 800c742:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c744:	4b40      	ldr	r3, [pc, #256]	@ (800c848 <mem_trim+0x210>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d106      	bne.n	800c75c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c74e:	89fb      	ldrh	r3, [r7, #14]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fd8d 	bl	800c270 <ptr_to_mem>
 800c756:	4603      	mov	r3, r0
 800c758:	4a3b      	ldr	r2, [pc, #236]	@ (800c848 <mem_trim+0x210>)
 800c75a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c75c:	89fb      	ldrh	r3, [r7, #14]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff fd86 	bl	800c270 <ptr_to_mem>
 800c764:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2200      	movs	r2, #0
 800c76a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	89ba      	ldrh	r2, [r7, #12]
 800c770:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	8afa      	ldrh	r2, [r7, #22]
 800c776:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	89fa      	ldrh	r2, [r7, #14]
 800c77c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c786:	d047      	beq.n	800c818 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff fd6f 	bl	800c270 <ptr_to_mem>
 800c792:	4602      	mov	r2, r0
 800c794:	89fb      	ldrh	r3, [r7, #14]
 800c796:	8053      	strh	r3, [r2, #2]
 800c798:	e03e      	b.n	800c818 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c79a:	8bfb      	ldrh	r3, [r7, #30]
 800c79c:	f103 0214 	add.w	r2, r3, #20
 800c7a0:	8abb      	ldrh	r3, [r7, #20]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d838      	bhi.n	800c818 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7a6:	8afa      	ldrh	r2, [r7, #22]
 800c7a8:	8bfb      	ldrh	r3, [r7, #30]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c7ba:	d106      	bne.n	800c7ca <mem_trim+0x192>
 800c7bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c830 <mem_trim+0x1f8>)
 800c7be:	f240 3216 	movw	r2, #790	@ 0x316
 800c7c2:	4920      	ldr	r1, [pc, #128]	@ (800c844 <mem_trim+0x20c>)
 800c7c4:	481c      	ldr	r0, [pc, #112]	@ (800c838 <mem_trim+0x200>)
 800c7c6:	f00b f867 	bl	8017898 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c7ca:	89fb      	ldrh	r3, [r7, #14]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff fd4f 	bl	800c270 <ptr_to_mem>
 800c7d2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	@ (800c848 <mem_trim+0x210>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d202      	bcs.n	800c7e4 <mem_trim+0x1ac>
      lfree = mem2;
 800c7de:	4a1a      	ldr	r2, [pc, #104]	@ (800c848 <mem_trim+0x210>)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	881a      	ldrh	r2, [r3, #0]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	8afa      	ldrh	r2, [r7, #22]
 800c7f6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	89fa      	ldrh	r2, [r7, #14]
 800c7fc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c806:	d007      	beq.n	800c818 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fd2f 	bl	800c270 <ptr_to_mem>
 800c812:	4602      	mov	r2, r0
 800c814:	89fb      	ldrh	r3, [r7, #14]
 800c816:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c818:	4809      	ldr	r0, [pc, #36]	@ (800c840 <mem_trim+0x208>)
 800c81a:	f00a feec 	bl	80175f6 <sys_mutex_unlock>
  return rmem;
 800c81e:	687b      	ldr	r3, [r7, #4]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	2000bfb0 	.word	0x2000bfb0
 800c82c:	2000bfb4 	.word	0x2000bfb4
 800c830:	08019a50 	.word	0x08019a50
 800c834:	08019bdc 	.word	0x08019bdc
 800c838:	08019a98 	.word	0x08019a98
 800c83c:	08019bf4 	.word	0x08019bf4
 800c840:	2000bfb8 	.word	0x2000bfb8
 800c844:	08019c14 	.word	0x08019c14
 800c848:	2000bfbc 	.word	0x2000bfbc

0800c84c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b088      	sub	sp, #32
 800c850:	af00      	add	r7, sp, #0
 800c852:	4603      	mov	r3, r0
 800c854:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c856:	88fb      	ldrh	r3, [r7, #6]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <mem_malloc+0x14>
    return NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	e0e2      	b.n	800ca26 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c860:	88fb      	ldrh	r3, [r7, #6]
 800c862:	3303      	adds	r3, #3
 800c864:	b29b      	uxth	r3, r3
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c86c:	8bbb      	ldrh	r3, [r7, #28]
 800c86e:	2b0b      	cmp	r3, #11
 800c870:	d801      	bhi.n	800c876 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c872:	230c      	movs	r3, #12
 800c874:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c876:	8bbb      	ldrh	r3, [r7, #28]
 800c878:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c87c:	d803      	bhi.n	800c886 <mem_malloc+0x3a>
 800c87e:	8bba      	ldrh	r2, [r7, #28]
 800c880:	88fb      	ldrh	r3, [r7, #6]
 800c882:	429a      	cmp	r2, r3
 800c884:	d201      	bcs.n	800c88a <mem_malloc+0x3e>
    return NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	e0cd      	b.n	800ca26 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c88a:	4869      	ldr	r0, [pc, #420]	@ (800ca30 <mem_malloc+0x1e4>)
 800c88c:	f00a fea4 	bl	80175d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c890:	4b68      	ldr	r3, [pc, #416]	@ (800ca34 <mem_malloc+0x1e8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff fcfd 	bl	800c294 <mem_to_ptr>
 800c89a:	4603      	mov	r3, r0
 800c89c:	83fb      	strh	r3, [r7, #30]
 800c89e:	e0b7      	b.n	800ca10 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c8a0:	8bfb      	ldrh	r3, [r7, #30]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7ff fce4 	bl	800c270 <ptr_to_mem>
 800c8a8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	791b      	ldrb	r3, [r3, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f040 80a7 	bne.w	800ca02 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	8bfb      	ldrh	r3, [r7, #30]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	f1a3 0208 	sub.w	r2, r3, #8
 800c8c2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	f0c0 809c 	bcc.w	800ca02 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	8bfb      	ldrh	r3, [r7, #30]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	f1a3 0208 	sub.w	r2, r3, #8
 800c8d8:	8bbb      	ldrh	r3, [r7, #28]
 800c8da:	3314      	adds	r3, #20
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d333      	bcc.n	800c948 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c8e0:	8bfa      	ldrh	r2, [r7, #30]
 800c8e2:	8bbb      	ldrh	r3, [r7, #28]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c8ec:	8a7b      	ldrh	r3, [r7, #18]
 800c8ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c8f2:	d106      	bne.n	800c902 <mem_malloc+0xb6>
 800c8f4:	4b50      	ldr	r3, [pc, #320]	@ (800ca38 <mem_malloc+0x1ec>)
 800c8f6:	f240 3287 	movw	r2, #903	@ 0x387
 800c8fa:	4950      	ldr	r1, [pc, #320]	@ (800ca3c <mem_malloc+0x1f0>)
 800c8fc:	4850      	ldr	r0, [pc, #320]	@ (800ca40 <mem_malloc+0x1f4>)
 800c8fe:	f00a ffcb 	bl	8017898 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c902:	8a7b      	ldrh	r3, [r7, #18]
 800c904:	4618      	mov	r0, r3
 800c906:	f7ff fcb3 	bl	800c270 <ptr_to_mem>
 800c90a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	881a      	ldrh	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8bfa      	ldrh	r2, [r7, #30]
 800c91e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	8a7a      	ldrh	r2, [r7, #18]
 800c924:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	2201      	movs	r2, #1
 800c92a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c934:	d00b      	beq.n	800c94e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff fc98 	bl	800c270 <ptr_to_mem>
 800c940:	4602      	mov	r2, r0
 800c942:	8a7b      	ldrh	r3, [r7, #18]
 800c944:	8053      	strh	r3, [r2, #2]
 800c946:	e002      	b.n	800c94e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2201      	movs	r2, #1
 800c94c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c94e:	4b39      	ldr	r3, [pc, #228]	@ (800ca34 <mem_malloc+0x1e8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	429a      	cmp	r2, r3
 800c956:	d127      	bne.n	800c9a8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c958:	4b36      	ldr	r3, [pc, #216]	@ (800ca34 <mem_malloc+0x1e8>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c95e:	e005      	b.n	800c96c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fc83 	bl	800c270 <ptr_to_mem>
 800c96a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	791b      	ldrb	r3, [r3, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d004      	beq.n	800c97e <mem_malloc+0x132>
 800c974:	4b33      	ldr	r3, [pc, #204]	@ (800ca44 <mem_malloc+0x1f8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d1f0      	bne.n	800c960 <mem_malloc+0x114>
          }
          lfree = cur;
 800c97e:	4a2d      	ldr	r2, [pc, #180]	@ (800ca34 <mem_malloc+0x1e8>)
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c984:	4b2b      	ldr	r3, [pc, #172]	@ (800ca34 <mem_malloc+0x1e8>)
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	4b2e      	ldr	r3, [pc, #184]	@ (800ca44 <mem_malloc+0x1f8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d00b      	beq.n	800c9a8 <mem_malloc+0x15c>
 800c990:	4b28      	ldr	r3, [pc, #160]	@ (800ca34 <mem_malloc+0x1e8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	791b      	ldrb	r3, [r3, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d006      	beq.n	800c9a8 <mem_malloc+0x15c>
 800c99a:	4b27      	ldr	r3, [pc, #156]	@ (800ca38 <mem_malloc+0x1ec>)
 800c99c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c9a0:	4929      	ldr	r1, [pc, #164]	@ (800ca48 <mem_malloc+0x1fc>)
 800c9a2:	4827      	ldr	r0, [pc, #156]	@ (800ca40 <mem_malloc+0x1f4>)
 800c9a4:	f00a ff78 	bl	8017898 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c9a8:	4821      	ldr	r0, [pc, #132]	@ (800ca30 <mem_malloc+0x1e4>)
 800c9aa:	f00a fe24 	bl	80175f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c9ae:	8bba      	ldrh	r2, [r7, #28]
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	4a23      	ldr	r2, [pc, #140]	@ (800ca44 <mem_malloc+0x1f8>)
 800c9b8:	6812      	ldr	r2, [r2, #0]
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d906      	bls.n	800c9cc <mem_malloc+0x180>
 800c9be:	4b1e      	ldr	r3, [pc, #120]	@ (800ca38 <mem_malloc+0x1ec>)
 800c9c0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c9c4:	4921      	ldr	r1, [pc, #132]	@ (800ca4c <mem_malloc+0x200>)
 800c9c6:	481e      	ldr	r0, [pc, #120]	@ (800ca40 <mem_malloc+0x1f4>)
 800c9c8:	f00a ff66 	bl	8017898 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f003 0303 	and.w	r3, r3, #3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d006      	beq.n	800c9e4 <mem_malloc+0x198>
 800c9d6:	4b18      	ldr	r3, [pc, #96]	@ (800ca38 <mem_malloc+0x1ec>)
 800c9d8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c9dc:	491c      	ldr	r1, [pc, #112]	@ (800ca50 <mem_malloc+0x204>)
 800c9de:	4818      	ldr	r0, [pc, #96]	@ (800ca40 <mem_malloc+0x1f4>)
 800c9e0:	f00a ff5a 	bl	8017898 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d006      	beq.n	800c9fc <mem_malloc+0x1b0>
 800c9ee:	4b12      	ldr	r3, [pc, #72]	@ (800ca38 <mem_malloc+0x1ec>)
 800c9f0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c9f4:	4917      	ldr	r1, [pc, #92]	@ (800ca54 <mem_malloc+0x208>)
 800c9f6:	4812      	ldr	r0, [pc, #72]	@ (800ca40 <mem_malloc+0x1f4>)
 800c9f8:	f00a ff4e 	bl	8017898 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	3308      	adds	r3, #8
 800ca00:	e011      	b.n	800ca26 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ca02:	8bfb      	ldrh	r3, [r7, #30]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7ff fc33 	bl	800c270 <ptr_to_mem>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca10:	8bfa      	ldrh	r2, [r7, #30]
 800ca12:	8bbb      	ldrh	r3, [r7, #28]
 800ca14:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	f4ff af41 	bcc.w	800c8a0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ca1e:	4804      	ldr	r0, [pc, #16]	@ (800ca30 <mem_malloc+0x1e4>)
 800ca20:	f00a fde9 	bl	80175f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3720      	adds	r7, #32
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2000bfb8 	.word	0x2000bfb8
 800ca34:	2000bfbc 	.word	0x2000bfbc
 800ca38:	08019a50 	.word	0x08019a50
 800ca3c:	08019c14 	.word	0x08019c14
 800ca40:	08019a98 	.word	0x08019a98
 800ca44:	2000bfb4 	.word	0x2000bfb4
 800ca48:	08019c28 	.word	0x08019c28
 800ca4c:	08019c44 	.word	0x08019c44
 800ca50:	08019c74 	.word	0x08019c74
 800ca54:	08019ca4 	.word	0x08019ca4

0800ca58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	3303      	adds	r3, #3
 800ca6e:	f023 0303 	bic.w	r3, r3, #3
 800ca72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e011      	b.n	800ca9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	461a      	mov	r2, r3
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	4413      	add	r3, r2
 800ca96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	885b      	ldrh	r3, [r3, #2]
 800caa2:	461a      	mov	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4293      	cmp	r3, r2
 800caa8:	dbe7      	blt.n	800ca7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800caaa:	bf00      	nop
 800caac:	bf00      	nop
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cabe:	2300      	movs	r3, #0
 800cac0:	80fb      	strh	r3, [r7, #6]
 800cac2:	e009      	b.n	800cad8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	4a08      	ldr	r2, [pc, #32]	@ (800cae8 <memp_init+0x30>)
 800cac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cacc:	4618      	mov	r0, r3
 800cace:	f7ff ffc3 	bl	800ca58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cad2:	88fb      	ldrh	r3, [r7, #6]
 800cad4:	3301      	adds	r3, #1
 800cad6:	80fb      	strh	r3, [r7, #6]
 800cad8:	88fb      	ldrh	r3, [r7, #6]
 800cada:	2b0c      	cmp	r3, #12
 800cadc:	d9f2      	bls.n	800cac4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	0801d17c 	.word	0x0801d17c

0800caec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800caf4:	f00a fdb2 	bl	801765c <sys_arch_protect>
 800caf8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d015      	beq.n	800cb34 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	6812      	ldr	r2, [r2, #0]
 800cb10:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f003 0303 	and.w	r3, r3, #3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d006      	beq.n	800cb2a <do_memp_malloc_pool+0x3e>
 800cb1c:	4b09      	ldr	r3, [pc, #36]	@ (800cb44 <do_memp_malloc_pool+0x58>)
 800cb1e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cb22:	4909      	ldr	r1, [pc, #36]	@ (800cb48 <do_memp_malloc_pool+0x5c>)
 800cb24:	4809      	ldr	r0, [pc, #36]	@ (800cb4c <do_memp_malloc_pool+0x60>)
 800cb26:	f00a feb7 	bl	8017898 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f00a fda4 	bl	8017678 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	e003      	b.n	800cb3c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f00a fd9f 	bl	8017678 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	08019cc8 	.word	0x08019cc8
 800cb48:	08019cf8 	.word	0x08019cf8
 800cb4c:	08019d1c 	.word	0x08019d1c

0800cb50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <memp_malloc_pool+0x1c>
 800cb5e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb88 <memp_malloc_pool+0x38>)
 800cb60:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800cb64:	4909      	ldr	r1, [pc, #36]	@ (800cb8c <memp_malloc_pool+0x3c>)
 800cb66:	480a      	ldr	r0, [pc, #40]	@ (800cb90 <memp_malloc_pool+0x40>)
 800cb68:	f00a fe96 	bl	8017898 <iprintf>
  if (desc == NULL) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <memp_malloc_pool+0x26>
    return NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e003      	b.n	800cb7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff ffb8 	bl	800caec <do_memp_malloc_pool>
 800cb7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	08019cc8 	.word	0x08019cc8
 800cb8c:	08019d44 	.word	0x08019d44
 800cb90:	08019d1c 	.word	0x08019d1c

0800cb94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b0c      	cmp	r3, #12
 800cba2:	d908      	bls.n	800cbb6 <memp_malloc+0x22>
 800cba4:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <memp_malloc+0x3c>)
 800cba6:	f240 1257 	movw	r2, #343	@ 0x157
 800cbaa:	490a      	ldr	r1, [pc, #40]	@ (800cbd4 <memp_malloc+0x40>)
 800cbac:	480a      	ldr	r0, [pc, #40]	@ (800cbd8 <memp_malloc+0x44>)
 800cbae:	f00a fe73 	bl	8017898 <iprintf>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e008      	b.n	800cbc8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	4a08      	ldr	r2, [pc, #32]	@ (800cbdc <memp_malloc+0x48>)
 800cbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7ff ff94 	bl	800caec <do_memp_malloc_pool>
 800cbc4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3710      	adds	r7, #16
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	08019cc8 	.word	0x08019cc8
 800cbd4:	08019d58 	.word	0x08019d58
 800cbd8:	08019d1c 	.word	0x08019d1c
 800cbdc:	0801d17c 	.word	0x0801d17c

0800cbe0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d006      	beq.n	800cc02 <do_memp_free_pool+0x22>
 800cbf4:	4b0d      	ldr	r3, [pc, #52]	@ (800cc2c <do_memp_free_pool+0x4c>)
 800cbf6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cbfa:	490d      	ldr	r1, [pc, #52]	@ (800cc30 <do_memp_free_pool+0x50>)
 800cbfc:	480d      	ldr	r0, [pc, #52]	@ (800cc34 <do_memp_free_pool+0x54>)
 800cbfe:	f00a fe4b 	bl	8017898 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cc06:	f00a fd29 	bl	801765c <sys_arch_protect>
 800cc0a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	f00a fd2a 	bl	8017678 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cc24:	bf00      	nop
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	08019cc8 	.word	0x08019cc8
 800cc30:	08019d78 	.word	0x08019d78
 800cc34:	08019d1c 	.word	0x08019d1c

0800cc38 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d106      	bne.n	800cc56 <memp_free_pool+0x1e>
 800cc48:	4b0a      	ldr	r3, [pc, #40]	@ (800cc74 <memp_free_pool+0x3c>)
 800cc4a:	f240 1295 	movw	r2, #405	@ 0x195
 800cc4e:	490a      	ldr	r1, [pc, #40]	@ (800cc78 <memp_free_pool+0x40>)
 800cc50:	480a      	ldr	r0, [pc, #40]	@ (800cc7c <memp_free_pool+0x44>)
 800cc52:	f00a fe21 	bl	8017898 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <memp_free_pool+0x34>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ffbb 	bl	800cbe0 <do_memp_free_pool>
 800cc6a:	e000      	b.n	800cc6e <memp_free_pool+0x36>
    return;
 800cc6c:	bf00      	nop
}
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	08019cc8 	.word	0x08019cc8
 800cc78:	08019d44 	.word	0x08019d44
 800cc7c:	08019d1c 	.word	0x08019d1c

0800cc80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b0c      	cmp	r3, #12
 800cc90:	d907      	bls.n	800cca2 <memp_free+0x22>
 800cc92:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc4 <memp_free+0x44>)
 800cc94:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800cc98:	490b      	ldr	r1, [pc, #44]	@ (800ccc8 <memp_free+0x48>)
 800cc9a:	480c      	ldr	r0, [pc, #48]	@ (800cccc <memp_free+0x4c>)
 800cc9c:	f00a fdfc 	bl	8017898 <iprintf>
 800cca0:	e00c      	b.n	800ccbc <memp_free+0x3c>

  if (mem == NULL) {
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d008      	beq.n	800ccba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	4a09      	ldr	r2, [pc, #36]	@ (800ccd0 <memp_free+0x50>)
 800ccac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff ff94 	bl	800cbe0 <do_memp_free_pool>
 800ccb8:	e000      	b.n	800ccbc <memp_free+0x3c>
    return;
 800ccba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	08019cc8 	.word	0x08019cc8
 800ccc8:	08019d98 	.word	0x08019d98
 800cccc:	08019d1c 	.word	0x08019d1c
 800ccd0:	0801d17c 	.word	0x0801d17c

0800ccd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ccd8:	bf00      	nop
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
	...

0800cce4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d108      	bne.n	800cd0a <netif_add+0x26>
 800ccf8:	4b57      	ldr	r3, [pc, #348]	@ (800ce58 <netif_add+0x174>)
 800ccfa:	f240 1227 	movw	r2, #295	@ 0x127
 800ccfe:	4957      	ldr	r1, [pc, #348]	@ (800ce5c <netif_add+0x178>)
 800cd00:	4857      	ldr	r0, [pc, #348]	@ (800ce60 <netif_add+0x17c>)
 800cd02:	f00a fdc9 	bl	8017898 <iprintf>
 800cd06:	2300      	movs	r3, #0
 800cd08:	e0a2      	b.n	800ce50 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d108      	bne.n	800cd22 <netif_add+0x3e>
 800cd10:	4b51      	ldr	r3, [pc, #324]	@ (800ce58 <netif_add+0x174>)
 800cd12:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800cd16:	4953      	ldr	r1, [pc, #332]	@ (800ce64 <netif_add+0x180>)
 800cd18:	4851      	ldr	r0, [pc, #324]	@ (800ce60 <netif_add+0x17c>)
 800cd1a:	f00a fdbd 	bl	8017898 <iprintf>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e096      	b.n	800ce50 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd28:	4b4f      	ldr	r3, [pc, #316]	@ (800ce68 <netif_add+0x184>)
 800cd2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd32:	4b4d      	ldr	r3, [pc, #308]	@ (800ce68 <netif_add+0x184>)
 800cd34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd3c:	4b4a      	ldr	r3, [pc, #296]	@ (800ce68 <netif_add+0x184>)
 800cd3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	4a45      	ldr	r2, [pc, #276]	@ (800ce6c <netif_add+0x188>)
 800cd56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a3a      	ldr	r2, [r7, #32]
 800cd70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd72:	4b3f      	ldr	r3, [pc, #252]	@ (800ce70 <netif_add+0x18c>)
 800cd74:	781a      	ldrb	r2, [r3, #0]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f913 	bl	800cfb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	4798      	blx	r3
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <netif_add+0xba>
    return NULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e058      	b.n	800ce50 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cda4:	2bff      	cmp	r3, #255	@ 0xff
 800cda6:	d103      	bne.n	800cdb0 <netif_add+0xcc>
        netif->num = 0;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cdb4:	4b2f      	ldr	r3, [pc, #188]	@ (800ce74 <netif_add+0x190>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	617b      	str	r3, [r7, #20]
 800cdba:	e02b      	b.n	800ce14 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cdbc:	697a      	ldr	r2, [r7, #20]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d106      	bne.n	800cdd2 <netif_add+0xee>
 800cdc4:	4b24      	ldr	r3, [pc, #144]	@ (800ce58 <netif_add+0x174>)
 800cdc6:	f240 128b 	movw	r2, #395	@ 0x18b
 800cdca:	492b      	ldr	r1, [pc, #172]	@ (800ce78 <netif_add+0x194>)
 800cdcc:	4824      	ldr	r0, [pc, #144]	@ (800ce60 <netif_add+0x17c>)
 800cdce:	f00a fd63 	bl	8017898 <iprintf>
        num_netifs++;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	2bff      	cmp	r3, #255	@ 0xff
 800cddc:	dd06      	ble.n	800cdec <netif_add+0x108>
 800cdde:	4b1e      	ldr	r3, [pc, #120]	@ (800ce58 <netif_add+0x174>)
 800cde0:	f240 128d 	movw	r2, #397	@ 0x18d
 800cde4:	4925      	ldr	r1, [pc, #148]	@ (800ce7c <netif_add+0x198>)
 800cde6:	481e      	ldr	r0, [pc, #120]	@ (800ce60 <netif_add+0x17c>)
 800cde8:	f00a fd56 	bl	8017898 <iprintf>
        if (netif2->num == netif->num) {
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d108      	bne.n	800ce0e <netif_add+0x12a>
          netif->num++;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ce0c:	e005      	b.n	800ce1a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	617b      	str	r3, [r7, #20]
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1d0      	bne.n	800cdbc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1be      	bne.n	800cd9e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce26:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce28:	d103      	bne.n	800ce32 <netif_add+0x14e>
    netif_num = 0;
 800ce2a:	4b11      	ldr	r3, [pc, #68]	@ (800ce70 <netif_add+0x18c>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	701a      	strb	r2, [r3, #0]
 800ce30:	e006      	b.n	800ce40 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce38:	3301      	adds	r3, #1
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ce70 <netif_add+0x18c>)
 800ce3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ce40:	4b0c      	ldr	r3, [pc, #48]	@ (800ce74 <netif_add+0x190>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ce48:	4a0a      	ldr	r2, [pc, #40]	@ (800ce74 <netif_add+0x190>)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	08019db4 	.word	0x08019db4
 800ce5c:	08019e48 	.word	0x08019e48
 800ce60:	08019e04 	.word	0x08019e04
 800ce64:	08019e64 	.word	0x08019e64
 800ce68:	0801d1f0 	.word	0x0801d1f0
 800ce6c:	0800d28f 	.word	0x0800d28f
 800ce70:	2000f094 	.word	0x2000f094
 800ce74:	2000f08c 	.word	0x2000f08c
 800ce78:	08019e88 	.word	0x08019e88
 800ce7c:	08019e9c 	.word	0x08019e9c

0800ce80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 fe91 	bl	800fbb4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f007 ff27 	bl	8014ce8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d106      	bne.n	800cec4 <netif_do_set_ipaddr+0x20>
 800ceb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf2c <netif_do_set_ipaddr+0x88>)
 800ceb8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800cebc:	491c      	ldr	r1, [pc, #112]	@ (800cf30 <netif_do_set_ipaddr+0x8c>)
 800cebe:	481d      	ldr	r0, [pc, #116]	@ (800cf34 <netif_do_set_ipaddr+0x90>)
 800cec0:	f00a fcea 	bl	8017898 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <netif_do_set_ipaddr+0x34>
 800ceca:	4b18      	ldr	r3, [pc, #96]	@ (800cf2c <netif_do_set_ipaddr+0x88>)
 800cecc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ced0:	4917      	ldr	r1, [pc, #92]	@ (800cf30 <netif_do_set_ipaddr+0x8c>)
 800ced2:	4818      	ldr	r0, [pc, #96]	@ (800cf34 <netif_do_set_ipaddr+0x90>)
 800ced4:	f00a fce0 	bl	8017898 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3304      	adds	r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d01c      	beq.n	800cf20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3304      	adds	r3, #4
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cef6:	f107 0314 	add.w	r3, r7, #20
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff ffbf 	bl	800ce80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <netif_do_set_ipaddr+0x6a>
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	e000      	b.n	800cf10 <netif_do_set_ipaddr+0x6c>
 800cf0e:	2300      	movs	r3, #0
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cf14:	2101      	movs	r1, #1
 800cf16:	68f8      	ldr	r0, [r7, #12]
 800cf18:	f000 f8d2 	bl	800d0c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e000      	b.n	800cf22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	08019db4 	.word	0x08019db4
 800cf30:	08019ecc 	.word	0x08019ecc
 800cf34:	08019e04 	.word	0x08019e04

0800cf38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d00a      	beq.n	800cf68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <netif_do_set_netmask+0x26>
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	e000      	b.n	800cf60 <netif_do_set_netmask+0x28>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cf64:	2301      	movs	r3, #1
 800cf66:	e000      	b.n	800cf6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf76:	b480      	push	{r7}
 800cf78:	b085      	sub	sp, #20
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	60f8      	str	r0, [r7, #12]
 800cf7e:	60b9      	str	r1, [r7, #8]
 800cf80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	330c      	adds	r3, #12
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d00a      	beq.n	800cfa6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <netif_do_set_gw+0x26>
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	e000      	b.n	800cf9e <netif_do_set_gw+0x28>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e000      	b.n	800cfa8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3714      	adds	r7, #20
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cfd0:	4b1c      	ldr	r3, [pc, #112]	@ (800d044 <netif_set_addr+0x90>)
 800cfd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cfda:	4b1a      	ldr	r3, [pc, #104]	@ (800d044 <netif_set_addr+0x90>)
 800cfdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cfe4:	4b17      	ldr	r3, [pc, #92]	@ (800d044 <netif_set_addr+0x90>)
 800cfe6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <netif_set_addr+0x42>
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <netif_set_addr+0x46>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <netif_set_addr+0x48>
 800cffa:	2300      	movs	r3, #0
 800cffc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d006      	beq.n	800d012 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d004:	f107 0310 	add.w	r3, r7, #16
 800d008:	461a      	mov	r2, r3
 800d00a:	68b9      	ldr	r1, [r7, #8]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f7ff ff49 	bl	800cea4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d012:	69fa      	ldr	r2, [r7, #28]
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff ff8e 	bl	800cf38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d01c:	69ba      	ldr	r2, [r7, #24]
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7ff ffa8 	bl	800cf76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d106      	bne.n	800d03a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d02c:	f107 0310 	add.w	r3, r7, #16
 800d030:	461a      	mov	r2, r3
 800d032:	68b9      	ldr	r1, [r7, #8]
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff ff35 	bl	800cea4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d03a:	bf00      	nop
 800d03c:	3720      	adds	r7, #32
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	0801d1f0 	.word	0x0801d1f0

0800d048 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d050:	4a04      	ldr	r2, [pc, #16]	@ (800d064 <netif_set_default+0x1c>)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	2000f090 	.word	0x2000f090

0800d068 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d107      	bne.n	800d086 <netif_set_up+0x1e>
 800d076:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b4 <netif_set_up+0x4c>)
 800d078:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d07c:	490e      	ldr	r1, [pc, #56]	@ (800d0b8 <netif_set_up+0x50>)
 800d07e:	480f      	ldr	r0, [pc, #60]	@ (800d0bc <netif_set_up+0x54>)
 800d080:	f00a fc0a 	bl	8017898 <iprintf>
 800d084:	e013      	b.n	800d0ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10c      	bne.n	800d0ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d09a:	f043 0301 	orr.w	r3, r3, #1
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d0a6:	2103      	movs	r1, #3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f809 	bl	800d0c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	08019db4 	.word	0x08019db4
 800d0b8:	08019f3c 	.word	0x08019f3c
 800d0bc:	08019e04 	.word	0x08019e04

0800d0c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d106      	bne.n	800d0e0 <netif_issue_reports+0x20>
 800d0d2:	4b18      	ldr	r3, [pc, #96]	@ (800d134 <netif_issue_reports+0x74>)
 800d0d4:	f240 326d 	movw	r2, #877	@ 0x36d
 800d0d8:	4917      	ldr	r1, [pc, #92]	@ (800d138 <netif_issue_reports+0x78>)
 800d0da:	4818      	ldr	r0, [pc, #96]	@ (800d13c <netif_issue_reports+0x7c>)
 800d0dc:	f00a fbdc 	bl	8017898 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d01e      	beq.n	800d12c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d017      	beq.n	800d12c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d013      	beq.n	800d12e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3304      	adds	r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00e      	beq.n	800d12e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d116:	f003 0308 	and.w	r3, r3, #8
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d007      	beq.n	800d12e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	3304      	adds	r3, #4
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f008 fd49 	bl	8015bbc <etharp_request>
 800d12a:	e000      	b.n	800d12e <netif_issue_reports+0x6e>
    return;
 800d12c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	08019db4 	.word	0x08019db4
 800d138:	08019f58 	.word	0x08019f58
 800d13c:	08019e04 	.word	0x08019e04

0800d140 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d107      	bne.n	800d15e <netif_set_down+0x1e>
 800d14e:	4b12      	ldr	r3, [pc, #72]	@ (800d198 <netif_set_down+0x58>)
 800d150:	f240 329b 	movw	r2, #923	@ 0x39b
 800d154:	4911      	ldr	r1, [pc, #68]	@ (800d19c <netif_set_down+0x5c>)
 800d156:	4812      	ldr	r0, [pc, #72]	@ (800d1a0 <netif_set_down+0x60>)
 800d158:	f00a fb9e 	bl	8017898 <iprintf>
 800d15c:	e019      	b.n	800d192 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d012      	beq.n	800d192 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d172:	f023 0301 	bic.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d184:	f003 0308 	and.w	r3, r3, #8
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f008 f8d3 	bl	8015338 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	08019db4 	.word	0x08019db4
 800d19c:	08019f7c 	.word	0x08019f7c
 800d1a0:	08019e04 	.word	0x08019e04

0800d1a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d107      	bne.n	800d1c2 <netif_set_link_up+0x1e>
 800d1b2:	4b13      	ldr	r3, [pc, #76]	@ (800d200 <netif_set_link_up+0x5c>)
 800d1b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d1b8:	4912      	ldr	r1, [pc, #72]	@ (800d204 <netif_set_link_up+0x60>)
 800d1ba:	4813      	ldr	r0, [pc, #76]	@ (800d208 <netif_set_link_up+0x64>)
 800d1bc:	f00a fb6c 	bl	8017898 <iprintf>
 800d1c0:	e01b      	b.n	800d1fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d114      	bne.n	800d1fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1d6:	f043 0304 	orr.w	r3, r3, #4
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1e2:	2103      	movs	r1, #3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff ff6b 	bl	800d0c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	69db      	ldr	r3, [r3, #28]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <netif_set_link_up+0x56>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	08019db4 	.word	0x08019db4
 800d204:	08019f9c 	.word	0x08019f9c
 800d208:	08019e04 	.word	0x08019e04

0800d20c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d107      	bne.n	800d22a <netif_set_link_down+0x1e>
 800d21a:	4b11      	ldr	r3, [pc, #68]	@ (800d260 <netif_set_link_down+0x54>)
 800d21c:	f240 4206 	movw	r2, #1030	@ 0x406
 800d220:	4910      	ldr	r1, [pc, #64]	@ (800d264 <netif_set_link_down+0x58>)
 800d222:	4811      	ldr	r0, [pc, #68]	@ (800d268 <netif_set_link_down+0x5c>)
 800d224:	f00a fb38 	bl	8017898 <iprintf>
 800d228:	e017      	b.n	800d25a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d230:	f003 0304 	and.w	r3, r3, #4
 800d234:	2b00      	cmp	r3, #0
 800d236:	d010      	beq.n	800d25a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d23e:	f023 0304 	bic.w	r3, r3, #4
 800d242:	b2da      	uxtb	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d003      	beq.n	800d25a <netif_set_link_down+0x4e>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	08019db4 	.word	0x08019db4
 800d264:	08019fc0 	.word	0x08019fc0
 800d268:	08019e04 	.word	0x08019e04

0800d26c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	683a      	ldr	r2, [r7, #0]
 800d280:	61da      	str	r2, [r3, #28]
  }
}
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d28e:	b480      	push	{r7}
 800d290:	b085      	sub	sp, #20
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d29a:	f06f 030b 	mvn.w	r3, #11
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
	...

0800d2ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d013      	beq.n	800d2e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d2f4 <netif_get_by_index+0x48>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	e00c      	b.n	800d2de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	79fa      	ldrb	r2, [r7, #7]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d101      	bne.n	800d2d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	e006      	b.n	800d2e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1ef      	bne.n	800d2c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	2000f08c 	.word	0x2000f08c

0800d2f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d2fe:	f00a f9ad 	bl	801765c <sys_arch_protect>
 800d302:	6038      	str	r0, [r7, #0]
 800d304:	4b0d      	ldr	r3, [pc, #52]	@ (800d33c <pbuf_free_ooseq+0x44>)
 800d306:	2200      	movs	r2, #0
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	6838      	ldr	r0, [r7, #0]
 800d30c:	f00a f9b4 	bl	8017678 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d310:	4b0b      	ldr	r3, [pc, #44]	@ (800d340 <pbuf_free_ooseq+0x48>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	607b      	str	r3, [r7, #4]
 800d316:	e00a      	b.n	800d32e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f002 fc85 	bl	800fc30 <tcp_free_ooseq>
      return;
 800d326:	e005      	b.n	800d334 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	607b      	str	r3, [r7, #4]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1f1      	bne.n	800d318 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	2000f095 	.word	0x2000f095
 800d340:	2000f0a4 	.word	0x2000f0a4

0800d344 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d34c:	f7ff ffd4 	bl	800d2f8 <pbuf_free_ooseq>
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d35e:	f00a f97d 	bl	801765c <sys_arch_protect>
 800d362:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d364:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a4 <pbuf_pool_is_empty+0x4c>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d36a:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a4 <pbuf_pool_is_empty+0x4c>)
 800d36c:	2201      	movs	r2, #1
 800d36e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f00a f981 	bl	8017678 <sys_arch_unprotect>

  if (!queued) {
 800d376:	78fb      	ldrb	r3, [r7, #3]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d10f      	bne.n	800d39c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d37c:	2100      	movs	r1, #0
 800d37e:	480a      	ldr	r0, [pc, #40]	@ (800d3a8 <pbuf_pool_is_empty+0x50>)
 800d380:	f7fe f840 	bl	800b404 <tcpip_try_callback>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d008      	beq.n	800d39c <pbuf_pool_is_empty+0x44>
 800d38a:	f00a f967 	bl	801765c <sys_arch_protect>
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	4b04      	ldr	r3, [pc, #16]	@ (800d3a4 <pbuf_pool_is_empty+0x4c>)
 800d392:	2200      	movs	r2, #0
 800d394:	701a      	strb	r2, [r3, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f00a f96e 	bl	8017678 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	2000f095 	.word	0x2000f095
 800d3a8:	0800d345 	.word	0x0800d345

0800d3ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b085      	sub	sp, #20
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4611      	mov	r1, r2
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	80fb      	strh	r3, [r7, #6]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	88fa      	ldrh	r2, [r7, #6]
 800d3d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	88ba      	ldrh	r2, [r7, #4]
 800d3d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d3da:	8b3b      	ldrh	r3, [r7, #24]
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	7f3a      	ldrb	r2, [r7, #28]
 800d3e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	73da      	strb	r2, [r3, #15]
}
 800d3f4:	bf00      	nop
 800d3f6:	3714      	adds	r7, #20
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08c      	sub	sp, #48	@ 0x30
 800d404:	af02      	add	r7, sp, #8
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
 800d40a:	460b      	mov	r3, r1
 800d40c:	80bb      	strh	r3, [r7, #4]
 800d40e:	4613      	mov	r3, r2
 800d410:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d416:	887b      	ldrh	r3, [r7, #2]
 800d418:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d41c:	d07f      	beq.n	800d51e <pbuf_alloc+0x11e>
 800d41e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d422:	f300 80c8 	bgt.w	800d5b6 <pbuf_alloc+0x1b6>
 800d426:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d42a:	d010      	beq.n	800d44e <pbuf_alloc+0x4e>
 800d42c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d430:	f300 80c1 	bgt.w	800d5b6 <pbuf_alloc+0x1b6>
 800d434:	2b01      	cmp	r3, #1
 800d436:	d002      	beq.n	800d43e <pbuf_alloc+0x3e>
 800d438:	2b41      	cmp	r3, #65	@ 0x41
 800d43a:	f040 80bc 	bne.w	800d5b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d43e:	887a      	ldrh	r2, [r7, #2]
 800d440:	88bb      	ldrh	r3, [r7, #4]
 800d442:	4619      	mov	r1, r3
 800d444:	2000      	movs	r0, #0
 800d446:	f000 f8d1 	bl	800d5ec <pbuf_alloc_reference>
 800d44a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d44c:	e0bd      	b.n	800d5ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d456:	88bb      	ldrh	r3, [r7, #4]
 800d458:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d45a:	200c      	movs	r0, #12
 800d45c:	f7ff fb9a 	bl	800cb94 <memp_malloc>
 800d460:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d109      	bne.n	800d47c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d468:	f7ff ff76 	bl	800d358 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d002      	beq.n	800d478 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d474:	f000 faa8 	bl	800d9c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d478:	2300      	movs	r3, #0
 800d47a:	e0a7      	b.n	800d5cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d47c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d47e:	3303      	adds	r3, #3
 800d480:	b29b      	uxth	r3, r3
 800d482:	f023 0303 	bic.w	r3, r3, #3
 800d486:	b29b      	uxth	r3, r3
 800d488:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	8b7a      	ldrh	r2, [r7, #26]
 800d490:	4293      	cmp	r3, r2
 800d492:	bf28      	it	cs
 800d494:	4613      	movcs	r3, r2
 800d496:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d49a:	3310      	adds	r3, #16
 800d49c:	693a      	ldr	r2, [r7, #16]
 800d49e:	4413      	add	r3, r2
 800d4a0:	3303      	adds	r3, #3
 800d4a2:	f023 0303 	bic.w	r3, r3, #3
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	89f9      	ldrh	r1, [r7, #14]
 800d4aa:	8b7a      	ldrh	r2, [r7, #26]
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	887b      	ldrh	r3, [r7, #2]
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	6938      	ldr	r0, [r7, #16]
 800d4ba:	f7ff ff77 	bl	800d3ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	f003 0303 	and.w	r3, r3, #3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d006      	beq.n	800d4d8 <pbuf_alloc+0xd8>
 800d4ca:	4b42      	ldr	r3, [pc, #264]	@ (800d5d4 <pbuf_alloc+0x1d4>)
 800d4cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4d0:	4941      	ldr	r1, [pc, #260]	@ (800d5d8 <pbuf_alloc+0x1d8>)
 800d4d2:	4842      	ldr	r0, [pc, #264]	@ (800d5dc <pbuf_alloc+0x1dc>)
 800d4d4:	f00a f9e0 	bl	8017898 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d4d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4da:	3303      	adds	r3, #3
 800d4dc:	f023 0303 	bic.w	r3, r3, #3
 800d4e0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d4e4:	d106      	bne.n	800d4f4 <pbuf_alloc+0xf4>
 800d4e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d5d4 <pbuf_alloc+0x1d4>)
 800d4e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d4ec:	493c      	ldr	r1, [pc, #240]	@ (800d5e0 <pbuf_alloc+0x1e0>)
 800d4ee:	483b      	ldr	r0, [pc, #236]	@ (800d5dc <pbuf_alloc+0x1dc>)
 800d4f0:	f00a f9d2 	bl	8017898 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d102      	bne.n	800d500 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4fe:	e002      	b.n	800d506 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	693a      	ldr	r2, [r7, #16]
 800d504:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d50a:	8b7a      	ldrh	r2, [r7, #26]
 800d50c:	89fb      	ldrh	r3, [r7, #14]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d516:	8b7b      	ldrh	r3, [r7, #26]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d19e      	bne.n	800d45a <pbuf_alloc+0x5a>
      break;
 800d51c:	e055      	b.n	800d5ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d51e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d520:	3303      	adds	r3, #3
 800d522:	b29b      	uxth	r3, r3
 800d524:	f023 0303 	bic.w	r3, r3, #3
 800d528:	b29a      	uxth	r2, r3
 800d52a:	88bb      	ldrh	r3, [r7, #4]
 800d52c:	3303      	adds	r3, #3
 800d52e:	b29b      	uxth	r3, r3
 800d530:	f023 0303 	bic.w	r3, r3, #3
 800d534:	b29b      	uxth	r3, r3
 800d536:	4413      	add	r3, r2
 800d538:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d53a:	8b3b      	ldrh	r3, [r7, #24]
 800d53c:	3310      	adds	r3, #16
 800d53e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d540:	8b3a      	ldrh	r2, [r7, #24]
 800d542:	88bb      	ldrh	r3, [r7, #4]
 800d544:	3303      	adds	r3, #3
 800d546:	f023 0303 	bic.w	r3, r3, #3
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d306      	bcc.n	800d55c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d54e:	8afa      	ldrh	r2, [r7, #22]
 800d550:	88bb      	ldrh	r3, [r7, #4]
 800d552:	3303      	adds	r3, #3
 800d554:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d558:	429a      	cmp	r2, r3
 800d55a:	d201      	bcs.n	800d560 <pbuf_alloc+0x160>
        return NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	e035      	b.n	800d5cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d560:	8afb      	ldrh	r3, [r7, #22]
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff f972 	bl	800c84c <mem_malloc>
 800d568:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <pbuf_alloc+0x174>
        return NULL;
 800d570:	2300      	movs	r3, #0
 800d572:	e02b      	b.n	800d5cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d576:	3310      	adds	r3, #16
 800d578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d57a:	4413      	add	r3, r2
 800d57c:	3303      	adds	r3, #3
 800d57e:	f023 0303 	bic.w	r3, r3, #3
 800d582:	4618      	mov	r0, r3
 800d584:	88b9      	ldrh	r1, [r7, #4]
 800d586:	88ba      	ldrh	r2, [r7, #4]
 800d588:	2300      	movs	r3, #0
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	887b      	ldrh	r3, [r7, #2]
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	460b      	mov	r3, r1
 800d592:	4601      	mov	r1, r0
 800d594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d596:	f7ff ff09 	bl	800d3ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d010      	beq.n	800d5c8 <pbuf_alloc+0x1c8>
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d4 <pbuf_alloc+0x1d4>)
 800d5a8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d5ac:	490d      	ldr	r1, [pc, #52]	@ (800d5e4 <pbuf_alloc+0x1e4>)
 800d5ae:	480b      	ldr	r0, [pc, #44]	@ (800d5dc <pbuf_alloc+0x1dc>)
 800d5b0:	f00a f972 	bl	8017898 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d5b4:	e008      	b.n	800d5c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d5b6:	4b07      	ldr	r3, [pc, #28]	@ (800d5d4 <pbuf_alloc+0x1d4>)
 800d5b8:	f240 1227 	movw	r2, #295	@ 0x127
 800d5bc:	490a      	ldr	r1, [pc, #40]	@ (800d5e8 <pbuf_alloc+0x1e8>)
 800d5be:	4807      	ldr	r0, [pc, #28]	@ (800d5dc <pbuf_alloc+0x1dc>)
 800d5c0:	f00a f96a 	bl	8017898 <iprintf>
      return NULL;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e001      	b.n	800d5cc <pbuf_alloc+0x1cc>
      break;
 800d5c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3728      	adds	r7, #40	@ 0x28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	08019fe4 	.word	0x08019fe4
 800d5d8:	0801a014 	.word	0x0801a014
 800d5dc:	0801a044 	.word	0x0801a044
 800d5e0:	0801a06c 	.word	0x0801a06c
 800d5e4:	0801a0a0 	.word	0x0801a0a0
 800d5e8:	0801a0cc 	.word	0x0801a0cc

0800d5ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	807b      	strh	r3, [r7, #2]
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d5fc:	883b      	ldrh	r3, [r7, #0]
 800d5fe:	2b41      	cmp	r3, #65	@ 0x41
 800d600:	d009      	beq.n	800d616 <pbuf_alloc_reference+0x2a>
 800d602:	883b      	ldrh	r3, [r7, #0]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d006      	beq.n	800d616 <pbuf_alloc_reference+0x2a>
 800d608:	4b0f      	ldr	r3, [pc, #60]	@ (800d648 <pbuf_alloc_reference+0x5c>)
 800d60a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d60e:	490f      	ldr	r1, [pc, #60]	@ (800d64c <pbuf_alloc_reference+0x60>)
 800d610:	480f      	ldr	r0, [pc, #60]	@ (800d650 <pbuf_alloc_reference+0x64>)
 800d612:	f00a f941 	bl	8017898 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d616:	200b      	movs	r0, #11
 800d618:	f7ff fabc 	bl	800cb94 <memp_malloc>
 800d61c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d624:	2300      	movs	r3, #0
 800d626:	e00b      	b.n	800d640 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d628:	8879      	ldrh	r1, [r7, #2]
 800d62a:	887a      	ldrh	r2, [r7, #2]
 800d62c:	2300      	movs	r3, #0
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	883b      	ldrh	r3, [r7, #0]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	460b      	mov	r3, r1
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7ff feb7 	bl	800d3ac <pbuf_init_alloced_pbuf>
  return p;
 800d63e:	68fb      	ldr	r3, [r7, #12]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	08019fe4 	.word	0x08019fe4
 800d64c:	0801a0e8 	.word	0x0801a0e8
 800d650:	0801a044 	.word	0x0801a044

0800d654 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af02      	add	r7, sp, #8
 800d65a:	607b      	str	r3, [r7, #4]
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
 800d660:	460b      	mov	r3, r1
 800d662:	81bb      	strh	r3, [r7, #12]
 800d664:	4613      	mov	r3, r2
 800d666:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d66c:	8a7b      	ldrh	r3, [r7, #18]
 800d66e:	3303      	adds	r3, #3
 800d670:	f023 0203 	bic.w	r2, r3, #3
 800d674:	89bb      	ldrh	r3, [r7, #12]
 800d676:	441a      	add	r2, r3
 800d678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d901      	bls.n	800d682 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d67e:	2300      	movs	r3, #0
 800d680:	e018      	b.n	800d6b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d007      	beq.n	800d698 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d688:	8a7b      	ldrh	r3, [r7, #18]
 800d68a:	3303      	adds	r3, #3
 800d68c:	f023 0303 	bic.w	r3, r3, #3
 800d690:	6a3a      	ldr	r2, [r7, #32]
 800d692:	4413      	add	r3, r2
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	e001      	b.n	800d69c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	89b9      	ldrh	r1, [r7, #12]
 800d6a0:	89ba      	ldrh	r2, [r7, #12]
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	897b      	ldrh	r3, [r7, #10]
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	460b      	mov	r3, r1
 800d6ac:	6979      	ldr	r1, [r7, #20]
 800d6ae:	f7ff fe7d 	bl	800d3ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d6b2:	687b      	ldr	r3, [r7, #4]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <pbuf_realloc+0x20>
 800d6ce:	4b3a      	ldr	r3, [pc, #232]	@ (800d7b8 <pbuf_realloc+0xfc>)
 800d6d0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d6d4:	4939      	ldr	r1, [pc, #228]	@ (800d7bc <pbuf_realloc+0x100>)
 800d6d6:	483a      	ldr	r0, [pc, #232]	@ (800d7c0 <pbuf_realloc+0x104>)
 800d6d8:	f00a f8de 	bl	8017898 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	891b      	ldrh	r3, [r3, #8]
 800d6e0:	887a      	ldrh	r2, [r7, #2]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d263      	bcs.n	800d7ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	891a      	ldrh	r2, [r3, #8]
 800d6ea:	887b      	ldrh	r3, [r7, #2]
 800d6ec:	1ad3      	subs	r3, r2, r3
 800d6ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d6f0:	887b      	ldrh	r3, [r7, #2]
 800d6f2:	817b      	strh	r3, [r7, #10]
  q = p;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d6f8:	e018      	b.n	800d72c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	895b      	ldrh	r3, [r3, #10]
 800d6fe:	897a      	ldrh	r2, [r7, #10]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	891a      	ldrh	r2, [r3, #8]
 800d708:	893b      	ldrh	r3, [r7, #8]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <pbuf_realloc+0x70>
 800d71e:	4b26      	ldr	r3, [pc, #152]	@ (800d7b8 <pbuf_realloc+0xfc>)
 800d720:	f240 12af 	movw	r2, #431	@ 0x1af
 800d724:	4927      	ldr	r1, [pc, #156]	@ (800d7c4 <pbuf_realloc+0x108>)
 800d726:	4826      	ldr	r0, [pc, #152]	@ (800d7c0 <pbuf_realloc+0x104>)
 800d728:	f00a f8b6 	bl	8017898 <iprintf>
  while (rem_len > q->len) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	895b      	ldrh	r3, [r3, #10]
 800d730:	897a      	ldrh	r2, [r7, #10]
 800d732:	429a      	cmp	r2, r3
 800d734:	d8e1      	bhi.n	800d6fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	7b1b      	ldrb	r3, [r3, #12]
 800d73a:	f003 030f 	and.w	r3, r3, #15
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d121      	bne.n	800d786 <pbuf_realloc+0xca>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	895b      	ldrh	r3, [r3, #10]
 800d746:	897a      	ldrh	r2, [r7, #10]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d01c      	beq.n	800d786 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	7b5b      	ldrb	r3, [r3, #13]
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d116      	bne.n	800d786 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	b29a      	uxth	r2, r3
 800d762:	897b      	ldrh	r3, [r7, #10]
 800d764:	4413      	add	r3, r2
 800d766:	b29b      	uxth	r3, r3
 800d768:	4619      	mov	r1, r3
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f7fe ff64 	bl	800c638 <mem_trim>
 800d770:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <pbuf_realloc+0xca>
 800d778:	4b0f      	ldr	r3, [pc, #60]	@ (800d7b8 <pbuf_realloc+0xfc>)
 800d77a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d77e:	4912      	ldr	r1, [pc, #72]	@ (800d7c8 <pbuf_realloc+0x10c>)
 800d780:	480f      	ldr	r0, [pc, #60]	@ (800d7c0 <pbuf_realloc+0x104>)
 800d782:	f00a f889 	bl	8017898 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	897a      	ldrh	r2, [r7, #10]
 800d78a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	895a      	ldrh	r2, [r3, #10]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d004      	beq.n	800d7a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f911 	bl	800d9c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]
 800d7ac:	e000      	b.n	800d7b0 <pbuf_realloc+0xf4>
    return;
 800d7ae:	bf00      	nop

}
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	08019fe4 	.word	0x08019fe4
 800d7bc:	0801a0fc 	.word	0x0801a0fc
 800d7c0:	0801a044 	.word	0x0801a044
 800d7c4:	0801a114 	.word	0x0801a114
 800d7c8:	0801a12c 	.word	0x0801a12c

0800d7cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <pbuf_add_header_impl+0x22>
 800d7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800d890 <pbuf_add_header_impl+0xc4>)
 800d7e2:	f240 12df 	movw	r2, #479	@ 0x1df
 800d7e6:	492b      	ldr	r1, [pc, #172]	@ (800d894 <pbuf_add_header_impl+0xc8>)
 800d7e8:	482b      	ldr	r0, [pc, #172]	@ (800d898 <pbuf_add_header_impl+0xcc>)
 800d7ea:	f00a f855 	bl	8017898 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d003      	beq.n	800d7fc <pbuf_add_header_impl+0x30>
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7fa:	d301      	bcc.n	800d800 <pbuf_add_header_impl+0x34>
    return 1;
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e043      	b.n	800d888 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d101      	bne.n	800d80a <pbuf_add_header_impl+0x3e>
    return 0;
 800d806:	2300      	movs	r3, #0
 800d808:	e03e      	b.n	800d888 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	891a      	ldrh	r2, [r3, #8]
 800d812:	8a7b      	ldrh	r3, [r7, #18]
 800d814:	4413      	add	r3, r2
 800d816:	b29b      	uxth	r3, r3
 800d818:	8a7a      	ldrh	r2, [r7, #18]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d901      	bls.n	800d822 <pbuf_add_header_impl+0x56>
    return 1;
 800d81e:	2301      	movs	r3, #1
 800d820:	e032      	b.n	800d888 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	7b1b      	ldrb	r3, [r3, #12]
 800d826:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d828:	8a3b      	ldrh	r3, [r7, #16]
 800d82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00c      	beq.n	800d84c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	425b      	negs	r3, r3
 800d83a:	4413      	add	r3, r2
 800d83c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3310      	adds	r3, #16
 800d842:	697a      	ldr	r2, [r7, #20]
 800d844:	429a      	cmp	r2, r3
 800d846:	d20d      	bcs.n	800d864 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d848:	2301      	movs	r3, #1
 800d84a:	e01d      	b.n	800d888 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d84c:	79fb      	ldrb	r3, [r7, #7]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d006      	beq.n	800d860 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	425b      	negs	r3, r3
 800d85a:	4413      	add	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]
 800d85e:	e001      	b.n	800d864 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d860:	2301      	movs	r3, #1
 800d862:	e011      	b.n	800d888 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	895a      	ldrh	r2, [r3, #10]
 800d86e:	8a7b      	ldrh	r3, [r7, #18]
 800d870:	4413      	add	r3, r2
 800d872:	b29a      	uxth	r2, r3
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	891a      	ldrh	r2, [r3, #8]
 800d87c:	8a7b      	ldrh	r3, [r7, #18]
 800d87e:	4413      	add	r3, r2
 800d880:	b29a      	uxth	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	811a      	strh	r2, [r3, #8]


  return 0;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	08019fe4 	.word	0x08019fe4
 800d894:	0801a148 	.word	0x0801a148
 800d898:	0801a044 	.word	0x0801a044

0800d89c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f7ff ff8e 	bl	800d7cc <pbuf_add_header_impl>
 800d8b0:	4603      	mov	r3, r0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
	...

0800d8bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <pbuf_remove_header+0x1e>
 800d8cc:	4b20      	ldr	r3, [pc, #128]	@ (800d950 <pbuf_remove_header+0x94>)
 800d8ce:	f240 224b 	movw	r2, #587	@ 0x24b
 800d8d2:	4920      	ldr	r1, [pc, #128]	@ (800d954 <pbuf_remove_header+0x98>)
 800d8d4:	4820      	ldr	r0, [pc, #128]	@ (800d958 <pbuf_remove_header+0x9c>)
 800d8d6:	f009 ffdf 	bl	8017898 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <pbuf_remove_header+0x2c>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8e6:	d301      	bcc.n	800d8ec <pbuf_remove_header+0x30>
    return 1;
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e02c      	b.n	800d946 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <pbuf_remove_header+0x3a>
    return 0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e027      	b.n	800d946 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	895b      	ldrh	r3, [r3, #10]
 800d8fe:	89fa      	ldrh	r2, [r7, #14]
 800d900:	429a      	cmp	r2, r3
 800d902:	d908      	bls.n	800d916 <pbuf_remove_header+0x5a>
 800d904:	4b12      	ldr	r3, [pc, #72]	@ (800d950 <pbuf_remove_header+0x94>)
 800d906:	f240 2255 	movw	r2, #597	@ 0x255
 800d90a:	4914      	ldr	r1, [pc, #80]	@ (800d95c <pbuf_remove_header+0xa0>)
 800d90c:	4812      	ldr	r0, [pc, #72]	@ (800d958 <pbuf_remove_header+0x9c>)
 800d90e:	f009 ffc3 	bl	8017898 <iprintf>
 800d912:	2301      	movs	r3, #1
 800d914:	e017      	b.n	800d946 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	441a      	add	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	895a      	ldrh	r2, [r3, #10]
 800d92c:	89fb      	ldrh	r3, [r7, #14]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	891a      	ldrh	r2, [r3, #8]
 800d93a:	89fb      	ldrh	r3, [r7, #14]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	08019fe4 	.word	0x08019fe4
 800d954:	0801a148 	.word	0x0801a148
 800d958:	0801a044 	.word	0x0801a044
 800d95c:	0801a154 	.word	0x0801a154

0800d960 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	807b      	strh	r3, [r7, #2]
 800d96c:	4613      	mov	r3, r2
 800d96e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d974:	2b00      	cmp	r3, #0
 800d976:	da08      	bge.n	800d98a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d97c:	425b      	negs	r3, r3
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7ff ff9b 	bl	800d8bc <pbuf_remove_header>
 800d986:	4603      	mov	r3, r0
 800d988:	e007      	b.n	800d99a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d98a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d98e:	787a      	ldrb	r2, [r7, #1]
 800d990:	4619      	mov	r1, r3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff ff1a 	bl	800d7cc <pbuf_add_header_impl>
 800d998:	4603      	mov	r3, r0
  }
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d9ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff ffd2 	bl	800d960 <pbuf_header_impl>
 800d9bc:	4603      	mov	r3, r0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
	...

0800d9c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b088      	sub	sp, #32
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10b      	bne.n	800d9ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <pbuf_free+0x22>
 800d9dc:	4b3b      	ldr	r3, [pc, #236]	@ (800dacc <pbuf_free+0x104>)
 800d9de:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d9e2:	493b      	ldr	r1, [pc, #236]	@ (800dad0 <pbuf_free+0x108>)
 800d9e4:	483b      	ldr	r0, [pc, #236]	@ (800dad4 <pbuf_free+0x10c>)
 800d9e6:	f009 ff57 	bl	8017898 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e069      	b.n	800dac2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d9f2:	e062      	b.n	800daba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d9f4:	f009 fe32 	bl	801765c <sys_arch_protect>
 800d9f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7b9b      	ldrb	r3, [r3, #14]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <pbuf_free+0x48>
 800da02:	4b32      	ldr	r3, [pc, #200]	@ (800dacc <pbuf_free+0x104>)
 800da04:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800da08:	4933      	ldr	r1, [pc, #204]	@ (800dad8 <pbuf_free+0x110>)
 800da0a:	4832      	ldr	r0, [pc, #200]	@ (800dad4 <pbuf_free+0x10c>)
 800da0c:	f009 ff44 	bl	8017898 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	7b9b      	ldrb	r3, [r3, #14]
 800da14:	3b01      	subs	r3, #1
 800da16:	b2da      	uxtb	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	739a      	strb	r2, [r3, #14]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	7b9b      	ldrb	r3, [r3, #14]
 800da20:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800da22:	69b8      	ldr	r0, [r7, #24]
 800da24:	f009 fe28 	bl	8017678 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800da28:	7dfb      	ldrb	r3, [r7, #23]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d143      	bne.n	800dab6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	7b1b      	ldrb	r3, [r3, #12]
 800da38:	f003 030f 	and.w	r3, r3, #15
 800da3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7b5b      	ldrb	r3, [r3, #13]
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	2b00      	cmp	r3, #0
 800da48:	d011      	beq.n	800da6e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <pbuf_free+0x9c>
 800da56:	4b1d      	ldr	r3, [pc, #116]	@ (800dacc <pbuf_free+0x104>)
 800da58:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800da5c:	491f      	ldr	r1, [pc, #124]	@ (800dadc <pbuf_free+0x114>)
 800da5e:	481d      	ldr	r0, [pc, #116]	@ (800dad4 <pbuf_free+0x10c>)
 800da60:	f009 ff1a 	bl	8017898 <iprintf>
        pc->custom_free_function(p);
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	4798      	blx	r3
 800da6c:	e01d      	b.n	800daaa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
 800da70:	2b02      	cmp	r3, #2
 800da72:	d104      	bne.n	800da7e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800da74:	6879      	ldr	r1, [r7, #4]
 800da76:	200c      	movs	r0, #12
 800da78:	f7ff f902 	bl	800cc80 <memp_free>
 800da7c:	e015      	b.n	800daaa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d104      	bne.n	800da8e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800da84:	6879      	ldr	r1, [r7, #4]
 800da86:	200b      	movs	r0, #11
 800da88:	f7ff f8fa 	bl	800cc80 <memp_free>
 800da8c:	e00d      	b.n	800daaa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d103      	bne.n	800da9c <pbuf_free+0xd4>
          mem_free(p);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7fe fd3f 	bl	800c518 <mem_free>
 800da9a:	e006      	b.n	800daaa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800da9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <pbuf_free+0x104>)
 800da9e:	f240 320f 	movw	r2, #783	@ 0x30f
 800daa2:	490f      	ldr	r1, [pc, #60]	@ (800dae0 <pbuf_free+0x118>)
 800daa4:	480b      	ldr	r0, [pc, #44]	@ (800dad4 <pbuf_free+0x10c>)
 800daa6:	f009 fef7 	bl	8017898 <iprintf>
        }
      }
      count++;
 800daaa:	7ffb      	ldrb	r3, [r7, #31]
 800daac:	3301      	adds	r3, #1
 800daae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	607b      	str	r3, [r7, #4]
 800dab4:	e001      	b.n	800daba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d199      	bne.n	800d9f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dac0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3720      	adds	r7, #32
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08019fe4 	.word	0x08019fe4
 800dad0:	0801a148 	.word	0x0801a148
 800dad4:	0801a044 	.word	0x0801a044
 800dad8:	0801a174 	.word	0x0801a174
 800dadc:	0801a18c 	.word	0x0801a18c
 800dae0:	0801a1b0 	.word	0x0801a1b0

0800dae4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800daf0:	e005      	b.n	800dafe <pbuf_clen+0x1a>
    ++len;
 800daf2:	89fb      	ldrh	r3, [r7, #14]
 800daf4:	3301      	adds	r3, #1
 800daf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1f6      	bne.n	800daf2 <pbuf_clen+0xe>
  }
  return len;
 800db04:	89fb      	ldrh	r3, [r7, #14]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d016      	beq.n	800db50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800db22:	f009 fd9b 	bl	801765c <sys_arch_protect>
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7b9b      	ldrb	r3, [r3, #14]
 800db2c:	3301      	adds	r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	739a      	strb	r2, [r3, #14]
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f009 fd9f 	bl	8017678 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	7b9b      	ldrb	r3, [r3, #14]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <pbuf_ref+0x3c>
 800db42:	4b05      	ldr	r3, [pc, #20]	@ (800db58 <pbuf_ref+0x44>)
 800db44:	f240 3242 	movw	r2, #834	@ 0x342
 800db48:	4904      	ldr	r1, [pc, #16]	@ (800db5c <pbuf_ref+0x48>)
 800db4a:	4805      	ldr	r0, [pc, #20]	@ (800db60 <pbuf_ref+0x4c>)
 800db4c:	f009 fea4 	bl	8017898 <iprintf>
  }
}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	08019fe4 	.word	0x08019fe4
 800db5c:	0801a1c4 	.word	0x0801a1c4
 800db60:	0801a044 	.word	0x0801a044

0800db64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <pbuf_cat+0x16>
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d107      	bne.n	800db8a <pbuf_cat+0x26>
 800db7a:	4b20      	ldr	r3, [pc, #128]	@ (800dbfc <pbuf_cat+0x98>)
 800db7c:	f240 3259 	movw	r2, #857	@ 0x359
 800db80:	491f      	ldr	r1, [pc, #124]	@ (800dc00 <pbuf_cat+0x9c>)
 800db82:	4820      	ldr	r0, [pc, #128]	@ (800dc04 <pbuf_cat+0xa0>)
 800db84:	f009 fe88 	bl	8017898 <iprintf>
 800db88:	e034      	b.n	800dbf4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	e00a      	b.n	800dba6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	891a      	ldrh	r2, [r3, #8]
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	891b      	ldrh	r3, [r3, #8]
 800db98:	4413      	add	r3, r2
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1f0      	bne.n	800db90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	891a      	ldrh	r2, [r3, #8]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	895b      	ldrh	r3, [r3, #10]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d006      	beq.n	800dbc8 <pbuf_cat+0x64>
 800dbba:	4b10      	ldr	r3, [pc, #64]	@ (800dbfc <pbuf_cat+0x98>)
 800dbbc:	f240 3262 	movw	r2, #866	@ 0x362
 800dbc0:	4911      	ldr	r1, [pc, #68]	@ (800dc08 <pbuf_cat+0xa4>)
 800dbc2:	4810      	ldr	r0, [pc, #64]	@ (800dc04 <pbuf_cat+0xa0>)
 800dbc4:	f009 fe68 	bl	8017898 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d006      	beq.n	800dbde <pbuf_cat+0x7a>
 800dbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800dbfc <pbuf_cat+0x98>)
 800dbd2:	f240 3263 	movw	r2, #867	@ 0x363
 800dbd6:	490d      	ldr	r1, [pc, #52]	@ (800dc0c <pbuf_cat+0xa8>)
 800dbd8:	480a      	ldr	r0, [pc, #40]	@ (800dc04 <pbuf_cat+0xa0>)
 800dbda:	f009 fe5d 	bl	8017898 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	891a      	ldrh	r2, [r3, #8]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	891b      	ldrh	r3, [r3, #8]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	08019fe4 	.word	0x08019fe4
 800dc00:	0801a1d8 	.word	0x0801a1d8
 800dc04:	0801a044 	.word	0x0801a044
 800dc08:	0801a210 	.word	0x0801a210
 800dc0c:	0801a240 	.word	0x0801a240

0800dc10 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ffa1 	bl	800db64 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dc22:	6838      	ldr	r0, [r7, #0]
 800dc24:	f7ff ff76 	bl	800db14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dc28:	bf00      	nop
 800dc2a:	3708      	adds	r7, #8
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
 800dc3e:	2300      	movs	r3, #0
 800dc40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d008      	beq.n	800dc5a <pbuf_copy+0x2a>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <pbuf_copy+0x2a>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	891a      	ldrh	r2, [r3, #8]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	891b      	ldrh	r3, [r3, #8]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d209      	bcs.n	800dc6e <pbuf_copy+0x3e>
 800dc5a:	4b57      	ldr	r3, [pc, #348]	@ (800ddb8 <pbuf_copy+0x188>)
 800dc5c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800dc60:	4956      	ldr	r1, [pc, #344]	@ (800ddbc <pbuf_copy+0x18c>)
 800dc62:	4857      	ldr	r0, [pc, #348]	@ (800ddc0 <pbuf_copy+0x190>)
 800dc64:	f009 fe18 	bl	8017898 <iprintf>
 800dc68:	f06f 030f 	mvn.w	r3, #15
 800dc6c:	e09f      	b.n	800ddae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	895b      	ldrh	r3, [r3, #10]
 800dc72:	461a      	mov	r2, r3
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	1ad2      	subs	r2, r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	895b      	ldrh	r3, [r3, #10]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	1acb      	subs	r3, r1, r3
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d306      	bcc.n	800dc94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	895b      	ldrh	r3, [r3, #10]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	60fb      	str	r3, [r7, #12]
 800dc92:	e005      	b.n	800dca0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	895b      	ldrh	r3, [r3, #10]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	18d0      	adds	r0, r2, r3
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	4413      	add	r3, r2
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f009 ff79 	bl	8017baa <memcpy>
    offset_to += len;
 800dcb8:	697a      	ldr	r2, [r7, #20]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	895b      	ldrh	r3, [r3, #10]
 800dccc:	461a      	mov	r2, r3
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d906      	bls.n	800dce2 <pbuf_copy+0xb2>
 800dcd4:	4b38      	ldr	r3, [pc, #224]	@ (800ddb8 <pbuf_copy+0x188>)
 800dcd6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800dcda:	493a      	ldr	r1, [pc, #232]	@ (800ddc4 <pbuf_copy+0x194>)
 800dcdc:	4838      	ldr	r0, [pc, #224]	@ (800ddc0 <pbuf_copy+0x190>)
 800dcde:	f009 fddb 	bl	8017898 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	895b      	ldrh	r3, [r3, #10]
 800dce6:	461a      	mov	r2, r3
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d906      	bls.n	800dcfc <pbuf_copy+0xcc>
 800dcee:	4b32      	ldr	r3, [pc, #200]	@ (800ddb8 <pbuf_copy+0x188>)
 800dcf0:	f240 32da 	movw	r2, #986	@ 0x3da
 800dcf4:	4934      	ldr	r1, [pc, #208]	@ (800ddc8 <pbuf_copy+0x198>)
 800dcf6:	4832      	ldr	r0, [pc, #200]	@ (800ddc0 <pbuf_copy+0x190>)
 800dcf8:	f009 fdce 	bl	8017898 <iprintf>
    if (offset_from >= p_from->len) {
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	895b      	ldrh	r3, [r3, #10]
 800dd00:	461a      	mov	r2, r3
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d304      	bcc.n	800dd12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	895b      	ldrh	r3, [r3, #10]
 800dd16:	461a      	mov	r2, r3
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d114      	bne.n	800dd48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10c      	bne.n	800dd48 <pbuf_copy+0x118>
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d009      	beq.n	800dd48 <pbuf_copy+0x118>
 800dd34:	4b20      	ldr	r3, [pc, #128]	@ (800ddb8 <pbuf_copy+0x188>)
 800dd36:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800dd3a:	4924      	ldr	r1, [pc, #144]	@ (800ddcc <pbuf_copy+0x19c>)
 800dd3c:	4820      	ldr	r0, [pc, #128]	@ (800ddc0 <pbuf_copy+0x190>)
 800dd3e:	f009 fdab 	bl	8017898 <iprintf>
 800dd42:	f06f 030f 	mvn.w	r3, #15
 800dd46:	e032      	b.n	800ddae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d013      	beq.n	800dd76 <pbuf_copy+0x146>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	895a      	ldrh	r2, [r3, #10]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	891b      	ldrh	r3, [r3, #8]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d10d      	bne.n	800dd76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d009      	beq.n	800dd76 <pbuf_copy+0x146>
 800dd62:	4b15      	ldr	r3, [pc, #84]	@ (800ddb8 <pbuf_copy+0x188>)
 800dd64:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800dd68:	4919      	ldr	r1, [pc, #100]	@ (800ddd0 <pbuf_copy+0x1a0>)
 800dd6a:	4815      	ldr	r0, [pc, #84]	@ (800ddc0 <pbuf_copy+0x190>)
 800dd6c:	f009 fd94 	bl	8017898 <iprintf>
 800dd70:	f06f 0305 	mvn.w	r3, #5
 800dd74:	e01b      	b.n	800ddae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d013      	beq.n	800dda4 <pbuf_copy+0x174>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	895a      	ldrh	r2, [r3, #10]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	891b      	ldrh	r3, [r3, #8]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d10d      	bne.n	800dda4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d009      	beq.n	800dda4 <pbuf_copy+0x174>
 800dd90:	4b09      	ldr	r3, [pc, #36]	@ (800ddb8 <pbuf_copy+0x188>)
 800dd92:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800dd96:	490e      	ldr	r1, [pc, #56]	@ (800ddd0 <pbuf_copy+0x1a0>)
 800dd98:	4809      	ldr	r0, [pc, #36]	@ (800ddc0 <pbuf_copy+0x190>)
 800dd9a:	f009 fd7d 	bl	8017898 <iprintf>
 800dd9e:	f06f 0305 	mvn.w	r3, #5
 800dda2:	e004      	b.n	800ddae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f47f af61 	bne.w	800dc6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3718      	adds	r7, #24
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08019fe4 	.word	0x08019fe4
 800ddbc:	0801a28c 	.word	0x0801a28c
 800ddc0:	0801a044 	.word	0x0801a044
 800ddc4:	0801a2bc 	.word	0x0801a2bc
 800ddc8:	0801a2d4 	.word	0x0801a2d4
 800ddcc:	0801a2f0 	.word	0x0801a2f0
 800ddd0:	0801a300 	.word	0x0801a300

0800ddd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b088      	sub	sp, #32
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	4611      	mov	r1, r2
 800dde0:	461a      	mov	r2, r3
 800dde2:	460b      	mov	r3, r1
 800dde4:	80fb      	strh	r3, [r7, #6]
 800dde6:	4613      	mov	r3, r2
 800dde8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ddea:	2300      	movs	r3, #0
 800ddec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d108      	bne.n	800de0a <pbuf_copy_partial+0x36>
 800ddf8:	4b2b      	ldr	r3, [pc, #172]	@ (800dea8 <pbuf_copy_partial+0xd4>)
 800ddfa:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ddfe:	492b      	ldr	r1, [pc, #172]	@ (800deac <pbuf_copy_partial+0xd8>)
 800de00:	482b      	ldr	r0, [pc, #172]	@ (800deb0 <pbuf_copy_partial+0xdc>)
 800de02:	f009 fd49 	bl	8017898 <iprintf>
 800de06:	2300      	movs	r3, #0
 800de08:	e04a      	b.n	800dea0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d108      	bne.n	800de22 <pbuf_copy_partial+0x4e>
 800de10:	4b25      	ldr	r3, [pc, #148]	@ (800dea8 <pbuf_copy_partial+0xd4>)
 800de12:	f240 420b 	movw	r2, #1035	@ 0x40b
 800de16:	4927      	ldr	r1, [pc, #156]	@ (800deb4 <pbuf_copy_partial+0xe0>)
 800de18:	4825      	ldr	r0, [pc, #148]	@ (800deb0 <pbuf_copy_partial+0xdc>)
 800de1a:	f009 fd3d 	bl	8017898 <iprintf>
 800de1e:	2300      	movs	r3, #0
 800de20:	e03e      	b.n	800dea0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	61fb      	str	r3, [r7, #28]
 800de26:	e034      	b.n	800de92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800de28:	88bb      	ldrh	r3, [r7, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <pbuf_copy_partial+0x70>
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	895b      	ldrh	r3, [r3, #10]
 800de32:	88ba      	ldrh	r2, [r7, #4]
 800de34:	429a      	cmp	r2, r3
 800de36:	d305      	bcc.n	800de44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	88ba      	ldrh	r2, [r7, #4]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	80bb      	strh	r3, [r7, #4]
 800de42:	e023      	b.n	800de8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	895a      	ldrh	r2, [r3, #10]
 800de48:	88bb      	ldrh	r3, [r7, #4]
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800de4e:	8b3a      	ldrh	r2, [r7, #24]
 800de50:	88fb      	ldrh	r3, [r7, #6]
 800de52:	429a      	cmp	r2, r3
 800de54:	d901      	bls.n	800de5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800de56:	88fb      	ldrh	r3, [r7, #6]
 800de58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800de5a:	8b7b      	ldrh	r3, [r7, #26]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	18d0      	adds	r0, r2, r3
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	88bb      	ldrh	r3, [r7, #4]
 800de66:	4413      	add	r3, r2
 800de68:	8b3a      	ldrh	r2, [r7, #24]
 800de6a:	4619      	mov	r1, r3
 800de6c:	f009 fe9d 	bl	8017baa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800de70:	8afa      	ldrh	r2, [r7, #22]
 800de72:	8b3b      	ldrh	r3, [r7, #24]
 800de74:	4413      	add	r3, r2
 800de76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800de78:	8b7a      	ldrh	r2, [r7, #26]
 800de7a:	8b3b      	ldrh	r3, [r7, #24]
 800de7c:	4413      	add	r3, r2
 800de7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800de80:	88fa      	ldrh	r2, [r7, #6]
 800de82:	8b3b      	ldrh	r3, [r7, #24]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	61fb      	str	r3, [r7, #28]
 800de92:	88fb      	ldrh	r3, [r7, #6]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d002      	beq.n	800de9e <pbuf_copy_partial+0xca>
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1c4      	bne.n	800de28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800de9e:	8afb      	ldrh	r3, [r7, #22]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3720      	adds	r7, #32
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	08019fe4 	.word	0x08019fe4
 800deac:	0801a32c 	.word	0x0801a32c
 800deb0:	0801a044 	.word	0x0801a044
 800deb4:	0801a34c 	.word	0x0801a34c

0800deb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	603a      	str	r2, [r7, #0]
 800dec2:	71fb      	strb	r3, [r7, #7]
 800dec4:	460b      	mov	r3, r1
 800dec6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	8919      	ldrh	r1, [r3, #8]
 800decc:	88ba      	ldrh	r2, [r7, #4]
 800dece:	79fb      	ldrb	r3, [r7, #7]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7ff fa95 	bl	800d400 <pbuf_alloc>
 800ded6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d101      	bne.n	800dee2 <pbuf_clone+0x2a>
    return NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	e011      	b.n	800df06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f7ff fea3 	bl	800dc30 <pbuf_copy>
 800deea:	4603      	mov	r3, r0
 800deec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800deee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d006      	beq.n	800df04 <pbuf_clone+0x4c>
 800def6:	4b06      	ldr	r3, [pc, #24]	@ (800df10 <pbuf_clone+0x58>)
 800def8:	f240 5224 	movw	r2, #1316	@ 0x524
 800defc:	4905      	ldr	r1, [pc, #20]	@ (800df14 <pbuf_clone+0x5c>)
 800defe:	4806      	ldr	r0, [pc, #24]	@ (800df18 <pbuf_clone+0x60>)
 800df00:	f009 fcca 	bl	8017898 <iprintf>
  return q;
 800df04:	68fb      	ldr	r3, [r7, #12]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	08019fe4 	.word	0x08019fe4
 800df14:	0801a458 	.word	0x0801a458
 800df18:	0801a044 	.word	0x0801a044

0800df1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800df20:	f009 fbba 	bl	8017698 <rand>
 800df24:	4603      	mov	r3, r0
 800df26:	b29b      	uxth	r3, r3
 800df28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800df32:	b29a      	uxth	r2, r3
 800df34:	4b01      	ldr	r3, [pc, #4]	@ (800df3c <tcp_init+0x20>)
 800df36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800df38:	bf00      	nop
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20000024 	.word	0x20000024

0800df40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7d1b      	ldrb	r3, [r3, #20]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d105      	bne.n	800df5c <tcp_free+0x1c>
 800df50:	4b06      	ldr	r3, [pc, #24]	@ (800df6c <tcp_free+0x2c>)
 800df52:	22d4      	movs	r2, #212	@ 0xd4
 800df54:	4906      	ldr	r1, [pc, #24]	@ (800df70 <tcp_free+0x30>)
 800df56:	4807      	ldr	r0, [pc, #28]	@ (800df74 <tcp_free+0x34>)
 800df58:	f009 fc9e 	bl	8017898 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	2001      	movs	r0, #1
 800df60:	f7fe fe8e 	bl	800cc80 <memp_free>
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	0801a4e4 	.word	0x0801a4e4
 800df70:	0801a514 	.word	0x0801a514
 800df74:	0801a528 	.word	0x0801a528

0800df78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	7d1b      	ldrb	r3, [r3, #20]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d105      	bne.n	800df94 <tcp_free_listen+0x1c>
 800df88:	4b06      	ldr	r3, [pc, #24]	@ (800dfa4 <tcp_free_listen+0x2c>)
 800df8a:	22df      	movs	r2, #223	@ 0xdf
 800df8c:	4906      	ldr	r1, [pc, #24]	@ (800dfa8 <tcp_free_listen+0x30>)
 800df8e:	4807      	ldr	r0, [pc, #28]	@ (800dfac <tcp_free_listen+0x34>)
 800df90:	f009 fc82 	bl	8017898 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800df94:	6879      	ldr	r1, [r7, #4]
 800df96:	2002      	movs	r0, #2
 800df98:	f7fe fe72 	bl	800cc80 <memp_free>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	0801a4e4 	.word	0x0801a4e4
 800dfa8:	0801a550 	.word	0x0801a550
 800dfac:	0801a528 	.word	0x0801a528

0800dfb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dfb4:	f001 f8ba 	bl	800f12c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dfb8:	4b07      	ldr	r3, [pc, #28]	@ (800dfd8 <tcp_tmr+0x28>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	4b05      	ldr	r3, [pc, #20]	@ (800dfd8 <tcp_tmr+0x28>)
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	4b04      	ldr	r3, [pc, #16]	@ (800dfd8 <tcp_tmr+0x28>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dfd0:	f000 fd6a 	bl	800eaa8 <tcp_slowtmr>
  }
}
 800dfd4:	bf00      	nop
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	2000f0ad 	.word	0x2000f0ad

0800dfdc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d105      	bne.n	800dff8 <tcp_remove_listener+0x1c>
 800dfec:	4b0d      	ldr	r3, [pc, #52]	@ (800e024 <tcp_remove_listener+0x48>)
 800dfee:	22ff      	movs	r2, #255	@ 0xff
 800dff0:	490d      	ldr	r1, [pc, #52]	@ (800e028 <tcp_remove_listener+0x4c>)
 800dff2:	480e      	ldr	r0, [pc, #56]	@ (800e02c <tcp_remove_listener+0x50>)
 800dff4:	f009 fc50 	bl	8017898 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	e00a      	b.n	800e014 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	429a      	cmp	r2, r3
 800e006:	d102      	bne.n	800e00e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d1f1      	bne.n	800dffe <tcp_remove_listener+0x22>
    }
  }
}
 800e01a:	bf00      	nop
 800e01c:	bf00      	nop
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801a4e4 	.word	0x0801a4e4
 800e028:	0801a56c 	.word	0x0801a56c
 800e02c:	0801a528 	.word	0x0801a528

0800e030 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d106      	bne.n	800e04c <tcp_listen_closed+0x1c>
 800e03e:	4b14      	ldr	r3, [pc, #80]	@ (800e090 <tcp_listen_closed+0x60>)
 800e040:	f240 1211 	movw	r2, #273	@ 0x111
 800e044:	4913      	ldr	r1, [pc, #76]	@ (800e094 <tcp_listen_closed+0x64>)
 800e046:	4814      	ldr	r0, [pc, #80]	@ (800e098 <tcp_listen_closed+0x68>)
 800e048:	f009 fc26 	bl	8017898 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	7d1b      	ldrb	r3, [r3, #20]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d006      	beq.n	800e062 <tcp_listen_closed+0x32>
 800e054:	4b0e      	ldr	r3, [pc, #56]	@ (800e090 <tcp_listen_closed+0x60>)
 800e056:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e05a:	4910      	ldr	r1, [pc, #64]	@ (800e09c <tcp_listen_closed+0x6c>)
 800e05c:	480e      	ldr	r0, [pc, #56]	@ (800e098 <tcp_listen_closed+0x68>)
 800e05e:	f009 fc1b 	bl	8017898 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e062:	2301      	movs	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	e00b      	b.n	800e080 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e068:	4a0d      	ldr	r2, [pc, #52]	@ (800e0a0 <tcp_listen_closed+0x70>)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6879      	ldr	r1, [r7, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff ffb1 	bl	800dfdc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	3301      	adds	r3, #1
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b03      	cmp	r3, #3
 800e084:	d9f0      	bls.n	800e068 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	0801a4e4 	.word	0x0801a4e4
 800e094:	0801a594 	.word	0x0801a594
 800e098:	0801a528 	.word	0x0801a528
 800e09c:	0801a5a0 	.word	0x0801a5a0
 800e0a0:	0801d1c8 	.word	0x0801d1c8

0800e0a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e0a4:	b5b0      	push	{r4, r5, r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af04      	add	r7, sp, #16
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d106      	bne.n	800e0c4 <tcp_close_shutdown+0x20>
 800e0b6:	4b63      	ldr	r3, [pc, #396]	@ (800e244 <tcp_close_shutdown+0x1a0>)
 800e0b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e0bc:	4962      	ldr	r1, [pc, #392]	@ (800e248 <tcp_close_shutdown+0x1a4>)
 800e0be:	4863      	ldr	r0, [pc, #396]	@ (800e24c <tcp_close_shutdown+0x1a8>)
 800e0c0:	f009 fbea 	bl	8017898 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e0c4:	78fb      	ldrb	r3, [r7, #3]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d066      	beq.n	800e198 <tcp_close_shutdown+0xf4>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	7d1b      	ldrb	r3, [r3, #20]
 800e0ce:	2b04      	cmp	r3, #4
 800e0d0:	d003      	beq.n	800e0da <tcp_close_shutdown+0x36>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	7d1b      	ldrb	r3, [r3, #20]
 800e0d6:	2b07      	cmp	r3, #7
 800e0d8:	d15e      	bne.n	800e198 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d104      	bne.n	800e0ec <tcp_close_shutdown+0x48>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e0ea:	d055      	beq.n	800e198 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8b5b      	ldrh	r3, [r3, #26]
 800e0f0:	f003 0310 	and.w	r3, r3, #16
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d106      	bne.n	800e106 <tcp_close_shutdown+0x62>
 800e0f8:	4b52      	ldr	r3, [pc, #328]	@ (800e244 <tcp_close_shutdown+0x1a0>)
 800e0fa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e0fe:	4954      	ldr	r1, [pc, #336]	@ (800e250 <tcp_close_shutdown+0x1ac>)
 800e100:	4852      	ldr	r0, [pc, #328]	@ (800e24c <tcp_close_shutdown+0x1a8>)
 800e102:	f009 fbc9 	bl	8017898 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e10e:	687d      	ldr	r5, [r7, #4]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3304      	adds	r3, #4
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	8ad2      	ldrh	r2, [r2, #22]
 800e118:	6879      	ldr	r1, [r7, #4]
 800e11a:	8b09      	ldrh	r1, [r1, #24]
 800e11c:	9102      	str	r1, [sp, #8]
 800e11e:	9201      	str	r2, [sp, #4]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	462b      	mov	r3, r5
 800e124:	4622      	mov	r2, r4
 800e126:	4601      	mov	r1, r0
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f005 fde7 	bl	8013cfc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f001 fbca 	bl	800f8c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e134:	4b47      	ldr	r3, [pc, #284]	@ (800e254 <tcp_close_shutdown+0x1b0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d105      	bne.n	800e14a <tcp_close_shutdown+0xa6>
 800e13e:	4b45      	ldr	r3, [pc, #276]	@ (800e254 <tcp_close_shutdown+0x1b0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	4a43      	ldr	r2, [pc, #268]	@ (800e254 <tcp_close_shutdown+0x1b0>)
 800e146:	6013      	str	r3, [r2, #0]
 800e148:	e013      	b.n	800e172 <tcp_close_shutdown+0xce>
 800e14a:	4b42      	ldr	r3, [pc, #264]	@ (800e254 <tcp_close_shutdown+0x1b0>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	60fb      	str	r3, [r7, #12]
 800e150:	e00c      	b.n	800e16c <tcp_close_shutdown+0xc8>
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d104      	bne.n	800e166 <tcp_close_shutdown+0xc2>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	68da      	ldr	r2, [r3, #12]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	60da      	str	r2, [r3, #12]
 800e164:	e005      	b.n	800e172 <tcp_close_shutdown+0xce>
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1ef      	bne.n	800e152 <tcp_close_shutdown+0xae>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	60da      	str	r2, [r3, #12]
 800e178:	4b37      	ldr	r3, [pc, #220]	@ (800e258 <tcp_close_shutdown+0x1b4>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e17e:	4b37      	ldr	r3, [pc, #220]	@ (800e25c <tcp_close_shutdown+0x1b8>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	429a      	cmp	r2, r3
 800e186:	d102      	bne.n	800e18e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e188:	f004 f85e 	bl	8012248 <tcp_trigger_input_pcb_close>
 800e18c:	e002      	b.n	800e194 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff fed6 	bl	800df40 <tcp_free>
      }
      return ERR_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	e050      	b.n	800e23a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	7d1b      	ldrb	r3, [r3, #20]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d03b      	beq.n	800e218 <tcp_close_shutdown+0x174>
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	dc44      	bgt.n	800e22e <tcp_close_shutdown+0x18a>
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <tcp_close_shutdown+0x10a>
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d02a      	beq.n	800e202 <tcp_close_shutdown+0x15e>
 800e1ac:	e03f      	b.n	800e22e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8adb      	ldrh	r3, [r3, #22]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d021      	beq.n	800e1fa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e260 <tcp_close_shutdown+0x1bc>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d105      	bne.n	800e1cc <tcp_close_shutdown+0x128>
 800e1c0:	4b27      	ldr	r3, [pc, #156]	@ (800e260 <tcp_close_shutdown+0x1bc>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	4a26      	ldr	r2, [pc, #152]	@ (800e260 <tcp_close_shutdown+0x1bc>)
 800e1c8:	6013      	str	r3, [r2, #0]
 800e1ca:	e013      	b.n	800e1f4 <tcp_close_shutdown+0x150>
 800e1cc:	4b24      	ldr	r3, [pc, #144]	@ (800e260 <tcp_close_shutdown+0x1bc>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	60bb      	str	r3, [r7, #8]
 800e1d2:	e00c      	b.n	800e1ee <tcp_close_shutdown+0x14a>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d104      	bne.n	800e1e8 <tcp_close_shutdown+0x144>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	60da      	str	r2, [r3, #12]
 800e1e6:	e005      	b.n	800e1f4 <tcp_close_shutdown+0x150>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	60bb      	str	r3, [r7, #8]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1ef      	bne.n	800e1d4 <tcp_close_shutdown+0x130>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff fea0 	bl	800df40 <tcp_free>
      break;
 800e200:	e01a      	b.n	800e238 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff ff14 	bl	800e030 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	4816      	ldr	r0, [pc, #88]	@ (800e264 <tcp_close_shutdown+0x1c0>)
 800e20c:	f001 fbac 	bl	800f968 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff feb1 	bl	800df78 <tcp_free_listen>
      break;
 800e216:	e00f      	b.n	800e238 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e218:	6879      	ldr	r1, [r7, #4]
 800e21a:	480e      	ldr	r0, [pc, #56]	@ (800e254 <tcp_close_shutdown+0x1b0>)
 800e21c:	f001 fba4 	bl	800f968 <tcp_pcb_remove>
 800e220:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <tcp_close_shutdown+0x1b4>)
 800e222:	2201      	movs	r2, #1
 800e224:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff fe8a 	bl	800df40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e22c:	e004      	b.n	800e238 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f81a 	bl	800e268 <tcp_close_shutdown_fin>
 800e234:	4603      	mov	r3, r0
 800e236:	e000      	b.n	800e23a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bdb0      	pop	{r4, r5, r7, pc}
 800e242:	bf00      	nop
 800e244:	0801a4e4 	.word	0x0801a4e4
 800e248:	0801a5b8 	.word	0x0801a5b8
 800e24c:	0801a528 	.word	0x0801a528
 800e250:	0801a5d8 	.word	0x0801a5d8
 800e254:	2000f0a4 	.word	0x2000f0a4
 800e258:	2000f0ac 	.word	0x2000f0ac
 800e25c:	2000f0e4 	.word	0x2000f0e4
 800e260:	2000f09c 	.word	0x2000f09c
 800e264:	2000f0a0 	.word	0x2000f0a0

0800e268 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <tcp_close_shutdown_fin+0x1c>
 800e276:	4b2e      	ldr	r3, [pc, #184]	@ (800e330 <tcp_close_shutdown_fin+0xc8>)
 800e278:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e27c:	492d      	ldr	r1, [pc, #180]	@ (800e334 <tcp_close_shutdown_fin+0xcc>)
 800e27e:	482e      	ldr	r0, [pc, #184]	@ (800e338 <tcp_close_shutdown_fin+0xd0>)
 800e280:	f009 fb0a 	bl	8017898 <iprintf>

  switch (pcb->state) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	7d1b      	ldrb	r3, [r3, #20]
 800e288:	2b07      	cmp	r3, #7
 800e28a:	d020      	beq.n	800e2ce <tcp_close_shutdown_fin+0x66>
 800e28c:	2b07      	cmp	r3, #7
 800e28e:	dc2b      	bgt.n	800e2e8 <tcp_close_shutdown_fin+0x80>
 800e290:	2b03      	cmp	r3, #3
 800e292:	d002      	beq.n	800e29a <tcp_close_shutdown_fin+0x32>
 800e294:	2b04      	cmp	r3, #4
 800e296:	d00d      	beq.n	800e2b4 <tcp_close_shutdown_fin+0x4c>
 800e298:	e026      	b.n	800e2e8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f004 fe3c 	bl	8012f18 <tcp_send_fin>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d11f      	bne.n	800e2ec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2205      	movs	r2, #5
 800e2b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2b2:	e01b      	b.n	800e2ec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f004 fe2f 	bl	8012f18 <tcp_send_fin>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d114      	bne.n	800e2f0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2205      	movs	r2, #5
 800e2ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2cc:	e010      	b.n	800e2f0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f004 fe22 	bl	8012f18 <tcp_send_fin>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e2d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d109      	bne.n	800e2f4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2209      	movs	r2, #9
 800e2e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2e6:	e005      	b.n	800e2f4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e01c      	b.n	800e326 <tcp_close_shutdown_fin+0xbe>
      break;
 800e2ec:	bf00      	nop
 800e2ee:	e002      	b.n	800e2f6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e2f0:	bf00      	nop
 800e2f2:	e000      	b.n	800e2f6 <tcp_close_shutdown_fin+0x8e>
      break;
 800e2f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d103      	bne.n	800e306 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f004 ff48 	bl	8013194 <tcp_output>
 800e304:	e00d      	b.n	800e322 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30e:	d108      	bne.n	800e322 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	8b5b      	ldrh	r3, [r3, #26]
 800e314:	f043 0308 	orr.w	r3, r3, #8
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e31e:	2300      	movs	r3, #0
 800e320:	e001      	b.n	800e326 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	0801a4e4 	.word	0x0801a4e4
 800e334:	0801a594 	.word	0x0801a594
 800e338:	0801a528 	.word	0x0801a528

0800e33c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d109      	bne.n	800e35e <tcp_close+0x22>
 800e34a:	4b0f      	ldr	r3, [pc, #60]	@ (800e388 <tcp_close+0x4c>)
 800e34c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e350:	490e      	ldr	r1, [pc, #56]	@ (800e38c <tcp_close+0x50>)
 800e352:	480f      	ldr	r0, [pc, #60]	@ (800e390 <tcp_close+0x54>)
 800e354:	f009 faa0 	bl	8017898 <iprintf>
 800e358:	f06f 030f 	mvn.w	r3, #15
 800e35c:	e00f      	b.n	800e37e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7d1b      	ldrb	r3, [r3, #20]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d006      	beq.n	800e374 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	8b5b      	ldrh	r3, [r3, #26]
 800e36a:	f043 0310 	orr.w	r3, r3, #16
 800e36e:	b29a      	uxth	r2, r3
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e374:	2101      	movs	r1, #1
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff fe94 	bl	800e0a4 <tcp_close_shutdown>
 800e37c:	4603      	mov	r3, r0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	0801a4e4 	.word	0x0801a4e4
 800e38c:	0801a5f4 	.word	0x0801a5f4
 800e390:	0801a528 	.word	0x0801a528

0800e394 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d109      	bne.n	800e3ba <tcp_shutdown+0x26>
 800e3a6:	4b26      	ldr	r3, [pc, #152]	@ (800e440 <tcp_shutdown+0xac>)
 800e3a8:	f240 2207 	movw	r2, #519	@ 0x207
 800e3ac:	4925      	ldr	r1, [pc, #148]	@ (800e444 <tcp_shutdown+0xb0>)
 800e3ae:	4826      	ldr	r0, [pc, #152]	@ (800e448 <tcp_shutdown+0xb4>)
 800e3b0:	f009 fa72 	bl	8017898 <iprintf>
 800e3b4:	f06f 030f 	mvn.w	r3, #15
 800e3b8:	e03d      	b.n	800e436 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	7d1b      	ldrb	r3, [r3, #20]
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d102      	bne.n	800e3c8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e3c2:	f06f 030a 	mvn.w	r3, #10
 800e3c6:	e036      	b.n	800e436 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d01b      	beq.n	800e406 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8b5b      	ldrh	r3, [r3, #26]
 800e3d2:	f043 0310 	orr.w	r3, r3, #16
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d005      	beq.n	800e3ee <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7ff fe5d 	bl	800e0a4 <tcp_close_shutdown>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	e023      	b.n	800e436 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d007      	beq.n	800e406 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fae4 	bl	800d9c8 <pbuf_free>
      pcb->refused_data = NULL;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d013      	beq.n	800e434 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	7d1b      	ldrb	r3, [r3, #20]
 800e410:	2b04      	cmp	r3, #4
 800e412:	dc02      	bgt.n	800e41a <tcp_shutdown+0x86>
 800e414:	2b03      	cmp	r3, #3
 800e416:	da02      	bge.n	800e41e <tcp_shutdown+0x8a>
 800e418:	e009      	b.n	800e42e <tcp_shutdown+0x9a>
 800e41a:	2b07      	cmp	r3, #7
 800e41c:	d107      	bne.n	800e42e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	b2db      	uxtb	r3, r3
 800e422:	4619      	mov	r1, r3
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7ff fe3d 	bl	800e0a4 <tcp_close_shutdown>
 800e42a:	4603      	mov	r3, r0
 800e42c:	e003      	b.n	800e436 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e42e:	f06f 030a 	mvn.w	r3, #10
 800e432:	e000      	b.n	800e436 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	0801a4e4 	.word	0x0801a4e4
 800e444:	0801a60c 	.word	0x0801a60c
 800e448:	0801a528 	.word	0x0801a528

0800e44c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08e      	sub	sp, #56	@ 0x38
 800e450:	af04      	add	r7, sp, #16
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d107      	bne.n	800e46c <tcp_abandon+0x20>
 800e45c:	4b52      	ldr	r3, [pc, #328]	@ (800e5a8 <tcp_abandon+0x15c>)
 800e45e:	f240 223d 	movw	r2, #573	@ 0x23d
 800e462:	4952      	ldr	r1, [pc, #328]	@ (800e5ac <tcp_abandon+0x160>)
 800e464:	4852      	ldr	r0, [pc, #328]	@ (800e5b0 <tcp_abandon+0x164>)
 800e466:	f009 fa17 	bl	8017898 <iprintf>
 800e46a:	e099      	b.n	800e5a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	7d1b      	ldrb	r3, [r3, #20]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d106      	bne.n	800e482 <tcp_abandon+0x36>
 800e474:	4b4c      	ldr	r3, [pc, #304]	@ (800e5a8 <tcp_abandon+0x15c>)
 800e476:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e47a:	494e      	ldr	r1, [pc, #312]	@ (800e5b4 <tcp_abandon+0x168>)
 800e47c:	484c      	ldr	r0, [pc, #304]	@ (800e5b0 <tcp_abandon+0x164>)
 800e47e:	f009 fa0b 	bl	8017898 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	7d1b      	ldrb	r3, [r3, #20]
 800e486:	2b0a      	cmp	r3, #10
 800e488:	d107      	bne.n	800e49a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	484a      	ldr	r0, [pc, #296]	@ (800e5b8 <tcp_abandon+0x16c>)
 800e48e:	f001 fa6b 	bl	800f968 <tcp_pcb_remove>
    tcp_free(pcb);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff fd54 	bl	800df40 <tcp_free>
 800e498:	e082      	b.n	800e5a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e4b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7d1b      	ldrb	r3, [r3, #20]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d126      	bne.n	800e512 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8adb      	ldrh	r3, [r3, #22]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d02e      	beq.n	800e52a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4cc:	4b3b      	ldr	r3, [pc, #236]	@ (800e5bc <tcp_abandon+0x170>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d105      	bne.n	800e4e2 <tcp_abandon+0x96>
 800e4d6:	4b39      	ldr	r3, [pc, #228]	@ (800e5bc <tcp_abandon+0x170>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	4a37      	ldr	r2, [pc, #220]	@ (800e5bc <tcp_abandon+0x170>)
 800e4de:	6013      	str	r3, [r2, #0]
 800e4e0:	e013      	b.n	800e50a <tcp_abandon+0xbe>
 800e4e2:	4b36      	ldr	r3, [pc, #216]	@ (800e5bc <tcp_abandon+0x170>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	61fb      	str	r3, [r7, #28]
 800e4e8:	e00c      	b.n	800e504 <tcp_abandon+0xb8>
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d104      	bne.n	800e4fe <tcp_abandon+0xb2>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	68da      	ldr	r2, [r3, #12]
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	60da      	str	r2, [r3, #12]
 800e4fc:	e005      	b.n	800e50a <tcp_abandon+0xbe>
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	61fb      	str	r3, [r7, #28]
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1ef      	bne.n	800e4ea <tcp_abandon+0x9e>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	60da      	str	r2, [r3, #12]
 800e510:	e00b      	b.n	800e52a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	8adb      	ldrh	r3, [r3, #22]
 800e51a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e51c:	6879      	ldr	r1, [r7, #4]
 800e51e:	4828      	ldr	r0, [pc, #160]	@ (800e5c0 <tcp_abandon+0x174>)
 800e520:	f001 fa22 	bl	800f968 <tcp_pcb_remove>
 800e524:	4b27      	ldr	r3, [pc, #156]	@ (800e5c4 <tcp_abandon+0x178>)
 800e526:	2201      	movs	r2, #1
 800e528:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d004      	beq.n	800e53c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e536:	4618      	mov	r0, r3
 800e538:	f000 fed8 	bl	800f2ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e540:	2b00      	cmp	r3, #0
 800e542:	d004      	beq.n	800e54e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e548:	4618      	mov	r0, r3
 800e54a:	f000 fecf 	bl	800f2ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e552:	2b00      	cmp	r3, #0
 800e554:	d004      	beq.n	800e560 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 fec6 	bl	800f2ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00e      	beq.n	800e584 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	3304      	adds	r3, #4
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	8b12      	ldrh	r2, [r2, #24]
 800e570:	9202      	str	r2, [sp, #8]
 800e572:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e574:	9201      	str	r2, [sp, #4]
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	460b      	mov	r3, r1
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	69b9      	ldr	r1, [r7, #24]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f005 fbbc 	bl	8013cfc <tcp_rst>
    }
    last_state = pcb->state;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7ff fcd8 	bl	800df40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d004      	beq.n	800e5a0 <tcp_abandon+0x154>
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	f06f 010c 	mvn.w	r1, #12
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	4798      	blx	r3
  }
}
 800e5a0:	3728      	adds	r7, #40	@ 0x28
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	0801a4e4 	.word	0x0801a4e4
 800e5ac:	0801a628 	.word	0x0801a628
 800e5b0:	0801a528 	.word	0x0801a528
 800e5b4:	0801a644 	.word	0x0801a644
 800e5b8:	2000f0a8 	.word	0x2000f0a8
 800e5bc:	2000f09c 	.word	0x2000f09c
 800e5c0:	2000f0a4 	.word	0x2000f0a4
 800e5c4:	2000f0ac 	.word	0x2000f0ac

0800e5c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff ff3a 	bl	800e44c <tcp_abandon>
}
 800e5d8:	bf00      	nop
 800e5da:	3708      	adds	r7, #8
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b088      	sub	sp, #32
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60f8      	str	r0, [r7, #12]
 800e5e8:	60b9      	str	r1, [r7, #8]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e5ee:	2304      	movs	r3, #4
 800e5f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800e6f4 <tcp_bind+0x114>)
 800e5fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d109      	bne.n	800e616 <tcp_bind+0x36>
 800e602:	4b3d      	ldr	r3, [pc, #244]	@ (800e6f8 <tcp_bind+0x118>)
 800e604:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800e608:	493c      	ldr	r1, [pc, #240]	@ (800e6fc <tcp_bind+0x11c>)
 800e60a:	483d      	ldr	r0, [pc, #244]	@ (800e700 <tcp_bind+0x120>)
 800e60c:	f009 f944 	bl	8017898 <iprintf>
 800e610:	f06f 030f 	mvn.w	r3, #15
 800e614:	e06a      	b.n	800e6ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	7d1b      	ldrb	r3, [r3, #20]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d009      	beq.n	800e632 <tcp_bind+0x52>
 800e61e:	4b36      	ldr	r3, [pc, #216]	@ (800e6f8 <tcp_bind+0x118>)
 800e620:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e624:	4937      	ldr	r1, [pc, #220]	@ (800e704 <tcp_bind+0x124>)
 800e626:	4836      	ldr	r0, [pc, #216]	@ (800e700 <tcp_bind+0x120>)
 800e628:	f009 f936 	bl	8017898 <iprintf>
 800e62c:	f06f 0305 	mvn.w	r3, #5
 800e630:	e05c      	b.n	800e6ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e632:	88fb      	ldrh	r3, [r7, #6]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d109      	bne.n	800e64c <tcp_bind+0x6c>
    port = tcp_new_port();
 800e638:	f000 f9f0 	bl	800ea1c <tcp_new_port>
 800e63c:	4603      	mov	r3, r0
 800e63e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e640:	88fb      	ldrh	r3, [r7, #6]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d135      	bne.n	800e6b2 <tcp_bind+0xd2>
      return ERR_BUF;
 800e646:	f06f 0301 	mvn.w	r3, #1
 800e64a:	e04f      	b.n	800e6ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e64c:	2300      	movs	r3, #0
 800e64e:	61fb      	str	r3, [r7, #28]
 800e650:	e02b      	b.n	800e6aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e652:	4a2d      	ldr	r2, [pc, #180]	@ (800e708 <tcp_bind+0x128>)
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	e01e      	b.n	800e69e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	8adb      	ldrh	r3, [r3, #22]
 800e664:	88fa      	ldrh	r2, [r7, #6]
 800e666:	429a      	cmp	r2, r3
 800e668:	d116      	bne.n	800e698 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e66a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d010      	beq.n	800e692 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00c      	beq.n	800e692 <tcp_bind+0xb2>
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d009      	beq.n	800e692 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d005      	beq.n	800e692 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e68e:	429a      	cmp	r2, r3
 800e690:	d102      	bne.n	800e698 <tcp_bind+0xb8>
              return ERR_USE;
 800e692:	f06f 0307 	mvn.w	r3, #7
 800e696:	e029      	b.n	800e6ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1dd      	bne.n	800e660 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	61fb      	str	r3, [r7, #28]
 800e6aa:	69fa      	ldr	r2, [r7, #28]
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	dbcf      	blt.n	800e652 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00c      	beq.n	800e6d2 <tcp_bind+0xf2>
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d008      	beq.n	800e6d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <tcp_bind+0xec>
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	e000      	b.n	800e6ce <tcp_bind+0xee>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	88fa      	ldrh	r2, [r7, #6]
 800e6d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e70c <tcp_bind+0x12c>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	60da      	str	r2, [r3, #12]
 800e6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e70c <tcp_bind+0x12c>)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	f005 fccb 	bl	8014080 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3720      	adds	r7, #32
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	0801d1f0 	.word	0x0801d1f0
 800e6f8:	0801a4e4 	.word	0x0801a4e4
 800e6fc:	0801a678 	.word	0x0801a678
 800e700:	0801a528 	.word	0x0801a528
 800e704:	0801a690 	.word	0x0801a690
 800e708:	0801d1c8 	.word	0x0801d1c8
 800e70c:	2000f09c 	.word	0x2000f09c

0800e710 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d106      	bne.n	800e732 <tcp_accept_null+0x22>
 800e724:	4b07      	ldr	r3, [pc, #28]	@ (800e744 <tcp_accept_null+0x34>)
 800e726:	f240 320f 	movw	r2, #783	@ 0x30f
 800e72a:	4907      	ldr	r1, [pc, #28]	@ (800e748 <tcp_accept_null+0x38>)
 800e72c:	4807      	ldr	r0, [pc, #28]	@ (800e74c <tcp_accept_null+0x3c>)
 800e72e:	f009 f8b3 	bl	8017898 <iprintf>

  tcp_abort(pcb);
 800e732:	68b8      	ldr	r0, [r7, #8]
 800e734:	f7ff ff48 	bl	800e5c8 <tcp_abort>

  return ERR_ABRT;
 800e738:	f06f 030c 	mvn.w	r3, #12
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3710      	adds	r7, #16
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	0801a4e4 	.word	0x0801a4e4
 800e748:	0801a6b8 	.word	0x0801a6b8
 800e74c:	0801a528 	.word	0x0801a528

0800e750 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	460b      	mov	r3, r1
 800e75a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e75c:	78fb      	ldrb	r3, [r7, #3]
 800e75e:	2200      	movs	r2, #0
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 f806 	bl	800e774 <tcp_listen_with_backlog_and_err>
 800e768:	4603      	mov	r3, r0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
	...

0800e774 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b088      	sub	sp, #32
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	460b      	mov	r3, r1
 800e77e:	607a      	str	r2, [r7, #4]
 800e780:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e782:	2300      	movs	r3, #0
 800e784:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d109      	bne.n	800e7a0 <tcp_listen_with_backlog_and_err+0x2c>
 800e78c:	4b47      	ldr	r3, [pc, #284]	@ (800e8ac <tcp_listen_with_backlog_and_err+0x138>)
 800e78e:	f240 3259 	movw	r2, #857	@ 0x359
 800e792:	4947      	ldr	r1, [pc, #284]	@ (800e8b0 <tcp_listen_with_backlog_and_err+0x13c>)
 800e794:	4847      	ldr	r0, [pc, #284]	@ (800e8b4 <tcp_listen_with_backlog_and_err+0x140>)
 800e796:	f009 f87f 	bl	8017898 <iprintf>
 800e79a:	23f0      	movs	r3, #240	@ 0xf0
 800e79c:	76fb      	strb	r3, [r7, #27]
 800e79e:	e079      	b.n	800e894 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d009      	beq.n	800e7bc <tcp_listen_with_backlog_and_err+0x48>
 800e7a8:	4b40      	ldr	r3, [pc, #256]	@ (800e8ac <tcp_listen_with_backlog_and_err+0x138>)
 800e7aa:	f240 325a 	movw	r2, #858	@ 0x35a
 800e7ae:	4942      	ldr	r1, [pc, #264]	@ (800e8b8 <tcp_listen_with_backlog_and_err+0x144>)
 800e7b0:	4840      	ldr	r0, [pc, #256]	@ (800e8b4 <tcp_listen_with_backlog_and_err+0x140>)
 800e7b2:	f009 f871 	bl	8017898 <iprintf>
 800e7b6:	23f1      	movs	r3, #241	@ 0xf1
 800e7b8:	76fb      	strb	r3, [r7, #27]
 800e7ba:	e06b      	b.n	800e894 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	7d1b      	ldrb	r3, [r3, #20]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d104      	bne.n	800e7ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e7c8:	23f7      	movs	r3, #247	@ 0xf7
 800e7ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e7cc:	e062      	b.n	800e894 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e7ce:	2002      	movs	r0, #2
 800e7d0:	f7fe f9e0 	bl	800cb94 <memp_malloc>
 800e7d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d102      	bne.n	800e7e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e7dc:	23ff      	movs	r3, #255	@ 0xff
 800e7de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e7e0:	e058      	b.n	800e894 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	691a      	ldr	r2, [r3, #16]
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	8ada      	ldrh	r2, [r3, #22]
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	7d5a      	ldrb	r2, [r3, #21]
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	7a5a      	ldrb	r2, [r3, #9]
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	2200      	movs	r2, #0
 800e80c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	7ada      	ldrb	r2, [r3, #11]
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	7a9a      	ldrb	r2, [r3, #10]
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	8adb      	ldrh	r3, [r3, #22]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d021      	beq.n	800e872 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e82e:	4b23      	ldr	r3, [pc, #140]	@ (800e8bc <tcp_listen_with_backlog_and_err+0x148>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	429a      	cmp	r2, r3
 800e836:	d105      	bne.n	800e844 <tcp_listen_with_backlog_and_err+0xd0>
 800e838:	4b20      	ldr	r3, [pc, #128]	@ (800e8bc <tcp_listen_with_backlog_and_err+0x148>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	4a1f      	ldr	r2, [pc, #124]	@ (800e8bc <tcp_listen_with_backlog_and_err+0x148>)
 800e840:	6013      	str	r3, [r2, #0]
 800e842:	e013      	b.n	800e86c <tcp_listen_with_backlog_and_err+0xf8>
 800e844:	4b1d      	ldr	r3, [pc, #116]	@ (800e8bc <tcp_listen_with_backlog_and_err+0x148>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	617b      	str	r3, [r7, #20]
 800e84a:	e00c      	b.n	800e866 <tcp_listen_with_backlog_and_err+0xf2>
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	429a      	cmp	r2, r3
 800e854:	d104      	bne.n	800e860 <tcp_listen_with_backlog_and_err+0xec>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	68da      	ldr	r2, [r3, #12]
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	60da      	str	r2, [r3, #12]
 800e85e:	e005      	b.n	800e86c <tcp_listen_with_backlog_and_err+0xf8>
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1ef      	bne.n	800e84c <tcp_listen_with_backlog_and_err+0xd8>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2200      	movs	r2, #0
 800e870:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f7ff fb64 	bl	800df40 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	4a11      	ldr	r2, [pc, #68]	@ (800e8c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800e87c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e87e:	4b11      	ldr	r3, [pc, #68]	@ (800e8c4 <tcp_listen_with_backlog_and_err+0x150>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	60da      	str	r2, [r3, #12]
 800e886:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c4 <tcp_listen_with_backlog_and_err+0x150>)
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	f005 fbf8 	bl	8014080 <tcp_timer_needed>
  res = ERR_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d002      	beq.n	800e8a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	7efa      	ldrb	r2, [r7, #27]
 800e89e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e8a0:	69fb      	ldr	r3, [r7, #28]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3720      	adds	r7, #32
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	0801a4e4 	.word	0x0801a4e4
 800e8b0:	0801a6d8 	.word	0x0801a6d8
 800e8b4:	0801a528 	.word	0x0801a528
 800e8b8:	0801a708 	.word	0x0801a708
 800e8bc:	2000f09c 	.word	0x2000f09c
 800e8c0:	0800e711 	.word	0x0800e711
 800e8c4:	2000f0a0 	.word	0x2000f0a0

0800e8c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_update_rcv_ann_wnd+0x1c>
 800e8d6:	4b25      	ldr	r3, [pc, #148]	@ (800e96c <tcp_update_rcv_ann_wnd+0xa4>)
 800e8d8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e8dc:	4924      	ldr	r1, [pc, #144]	@ (800e970 <tcp_update_rcv_ann_wnd+0xa8>)
 800e8de:	4825      	ldr	r0, [pc, #148]	@ (800e974 <tcp_update_rcv_ann_wnd+0xac>)
 800e8e0:	f008 ffda 	bl	8017898 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e8ec:	4413      	add	r3, r2
 800e8ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e8f8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e8fc:	bf28      	it	cs
 800e8fe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e902:	b292      	uxth	r2, r2
 800e904:	4413      	add	r3, r2
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	db08      	blt.n	800e920 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	e020      	b.n	800e962 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	dd03      	ble.n	800e936 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e934:	e014      	b.n	800e960 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e948:	d306      	bcc.n	800e958 <tcp_update_rcv_ann_wnd+0x90>
 800e94a:	4b08      	ldr	r3, [pc, #32]	@ (800e96c <tcp_update_rcv_ann_wnd+0xa4>)
 800e94c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e950:	4909      	ldr	r1, [pc, #36]	@ (800e978 <tcp_update_rcv_ann_wnd+0xb0>)
 800e952:	4808      	ldr	r0, [pc, #32]	@ (800e974 <tcp_update_rcv_ann_wnd+0xac>)
 800e954:	f008 ffa0 	bl	8017898 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e960:	2300      	movs	r3, #0
  }
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	0801a4e4 	.word	0x0801a4e4
 800e970:	0801a740 	.word	0x0801a740
 800e974:	0801a528 	.word	0x0801a528
 800e978:	0801a764 	.word	0x0801a764

0800e97c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d107      	bne.n	800e99e <tcp_recved+0x22>
 800e98e:	4b1f      	ldr	r3, [pc, #124]	@ (800ea0c <tcp_recved+0x90>)
 800e990:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e994:	491e      	ldr	r1, [pc, #120]	@ (800ea10 <tcp_recved+0x94>)
 800e996:	481f      	ldr	r0, [pc, #124]	@ (800ea14 <tcp_recved+0x98>)
 800e998:	f008 ff7e 	bl	8017898 <iprintf>
 800e99c:	e032      	b.n	800ea04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7d1b      	ldrb	r3, [r3, #20]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d106      	bne.n	800e9b4 <tcp_recved+0x38>
 800e9a6:	4b19      	ldr	r3, [pc, #100]	@ (800ea0c <tcp_recved+0x90>)
 800e9a8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e9ac:	491a      	ldr	r1, [pc, #104]	@ (800ea18 <tcp_recved+0x9c>)
 800e9ae:	4819      	ldr	r0, [pc, #100]	@ (800ea14 <tcp_recved+0x98>)
 800e9b0:	f008 ff72 	bl	8017898 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e9b8:	887b      	ldrh	r3, [r7, #2]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e9be:	89fb      	ldrh	r3, [r7, #14]
 800e9c0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e9c4:	d804      	bhi.n	800e9d0 <tcp_recved+0x54>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9ca:	89fa      	ldrh	r2, [r7, #14]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d204      	bcs.n	800e9da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e9d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e9d8:	e002      	b.n	800e9e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	89fa      	ldrh	r2, [r7, #14]
 800e9de:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7ff ff71 	bl	800e8c8 <tcp_update_rcv_ann_wnd>
 800e9e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e9ee:	d309      	bcc.n	800ea04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8b5b      	ldrh	r3, [r3, #26]
 800e9f4:	f043 0302 	orr.w	r3, r3, #2
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f004 fbc8 	bl	8013194 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	0801a4e4 	.word	0x0801a4e4
 800ea10:	0801a780 	.word	0x0801a780
 800ea14:	0801a528 	.word	0x0801a528
 800ea18:	0801a798 	.word	0x0801a798

0800ea1c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ea26:	4b1e      	ldr	r3, [pc, #120]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	4b1c      	ldr	r3, [pc, #112]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea30:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ea32:	4b1b      	ldr	r3, [pc, #108]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d103      	bne.n	800ea46 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ea3e:	4b18      	ldr	r3, [pc, #96]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea40:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ea44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ea46:	2300      	movs	r3, #0
 800ea48:	71fb      	strb	r3, [r7, #7]
 800ea4a:	e01e      	b.n	800ea8a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ea4c:	79fb      	ldrb	r3, [r7, #7]
 800ea4e:	4a15      	ldr	r2, [pc, #84]	@ (800eaa4 <tcp_new_port+0x88>)
 800ea50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	e011      	b.n	800ea7e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	8ada      	ldrh	r2, [r3, #22]
 800ea5e:	4b10      	ldr	r3, [pc, #64]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea60:	881b      	ldrh	r3, [r3, #0]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d108      	bne.n	800ea78 <tcp_new_port+0x5c>
        n++;
 800ea66:	88bb      	ldrh	r3, [r7, #4]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ea6c:	88bb      	ldrh	r3, [r7, #4]
 800ea6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ea72:	d3d8      	bcc.n	800ea26 <tcp_new_port+0xa>
          return 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	e00d      	b.n	800ea94 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	603b      	str	r3, [r7, #0]
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1ea      	bne.n	800ea5a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	3301      	adds	r3, #1
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	2b03      	cmp	r3, #3
 800ea8e:	d9dd      	bls.n	800ea4c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ea90:	4b03      	ldr	r3, [pc, #12]	@ (800eaa0 <tcp_new_port+0x84>)
 800ea92:	881b      	ldrh	r3, [r3, #0]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	20000024 	.word	0x20000024
 800eaa4:	0801d1c8 	.word	0x0801d1c8

0800eaa8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b090      	sub	sp, #64	@ 0x40
 800eaac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800eab4:	4b95      	ldr	r3, [pc, #596]	@ (800ed0c <tcp_slowtmr+0x264>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	4a94      	ldr	r2, [pc, #592]	@ (800ed0c <tcp_slowtmr+0x264>)
 800eabc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eabe:	4b94      	ldr	r3, [pc, #592]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	4b92      	ldr	r3, [pc, #584]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	e000      	b.n	800eace <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800eacc:	bf00      	nop
  prev = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ead2:	4b90      	ldr	r3, [pc, #576]	@ (800ed14 <tcp_slowtmr+0x26c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ead8:	e29d      	b.n	800f016 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eadc:	7d1b      	ldrb	r3, [r3, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <tcp_slowtmr+0x48>
 800eae2:	4b8d      	ldr	r3, [pc, #564]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eae4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800eae8:	498c      	ldr	r1, [pc, #560]	@ (800ed1c <tcp_slowtmr+0x274>)
 800eaea:	488d      	ldr	r0, [pc, #564]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eaec:	f008 fed4 	bl	8017898 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	7d1b      	ldrb	r3, [r3, #20]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d106      	bne.n	800eb06 <tcp_slowtmr+0x5e>
 800eaf8:	4b87      	ldr	r3, [pc, #540]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eafa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800eafe:	4989      	ldr	r1, [pc, #548]	@ (800ed24 <tcp_slowtmr+0x27c>)
 800eb00:	4887      	ldr	r0, [pc, #540]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb02:	f008 fec9 	bl	8017898 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb08:	7d1b      	ldrb	r3, [r3, #20]
 800eb0a:	2b0a      	cmp	r3, #10
 800eb0c:	d106      	bne.n	800eb1c <tcp_slowtmr+0x74>
 800eb0e:	4b82      	ldr	r3, [pc, #520]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eb10:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800eb14:	4984      	ldr	r1, [pc, #528]	@ (800ed28 <tcp_slowtmr+0x280>)
 800eb16:	4882      	ldr	r0, [pc, #520]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb18:	f008 febe 	bl	8017898 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1e:	7f9a      	ldrb	r2, [r3, #30]
 800eb20:	4b7b      	ldr	r3, [pc, #492]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d105      	bne.n	800eb34 <tcp_slowtmr+0x8c>
      prev = pcb;
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800eb32:	e270      	b.n	800f016 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800eb34:	4b76      	ldr	r3, [pc, #472]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eb36:	781a      	ldrb	r2, [r3, #0]
 800eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4a:	7d1b      	ldrb	r3, [r3, #20]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d10a      	bne.n	800eb66 <tcp_slowtmr+0xbe>
 800eb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb56:	2b05      	cmp	r3, #5
 800eb58:	d905      	bls.n	800eb66 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800eb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb5e:	3301      	adds	r3, #1
 800eb60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb64:	e11e      	b.n	800eda4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb6c:	2b0b      	cmp	r3, #11
 800eb6e:	d905      	bls.n	800eb7c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800eb70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb74:	3301      	adds	r3, #1
 800eb76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb7a:	e113      	b.n	800eda4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d075      	beq.n	800ec72 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d006      	beq.n	800eb9c <tcp_slowtmr+0xf4>
 800eb8e:	4b62      	ldr	r3, [pc, #392]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eb90:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800eb94:	4965      	ldr	r1, [pc, #404]	@ (800ed2c <tcp_slowtmr+0x284>)
 800eb96:	4862      	ldr	r0, [pc, #392]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb98:	f008 fe7e 	bl	8017898 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <tcp_slowtmr+0x10a>
 800eba4:	4b5c      	ldr	r3, [pc, #368]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eba6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ebaa:	4961      	ldr	r1, [pc, #388]	@ (800ed30 <tcp_slowtmr+0x288>)
 800ebac:	485c      	ldr	r0, [pc, #368]	@ (800ed20 <tcp_slowtmr+0x278>)
 800ebae:	f008 fe73 	bl	8017898 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ebb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ebb8:	2b0b      	cmp	r3, #11
 800ebba:	d905      	bls.n	800ebc8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ebbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebc6:	e0ed      	b.n	800eda4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	4a58      	ldr	r2, [pc, #352]	@ (800ed34 <tcp_slowtmr+0x28c>)
 800ebd2:	5cd3      	ldrb	r3, [r2, r3]
 800ebd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ebd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebdc:	7c7a      	ldrb	r2, [r7, #17]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d907      	bls.n	800ebf2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800ebe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebe8:	3301      	adds	r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800ebf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebf8:	7c7a      	ldrb	r2, [r7, #17]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	f200 80d2 	bhi.w	800eda4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ec00:	2301      	movs	r3, #1
 800ec02:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800ec04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d108      	bne.n	800ec20 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ec0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec10:	f005 f968 	bl	8013ee4 <tcp_zero_window_probe>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d014      	beq.n	800ec44 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	623b      	str	r3, [r7, #32]
 800ec1e:	e011      	b.n	800ec44 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ec20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec26:	4619      	mov	r1, r3
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f004 f82d 	bl	8012c88 <tcp_split_unsent_seg>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d107      	bne.n	800ec44 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ec34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec36:	f004 faad 	bl	8013194 <tcp_output>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80ac 	beq.w	800eda4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ec4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ec54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ec5a:	2b06      	cmp	r3, #6
 800ec5c:	f200 80a2 	bhi.w	800eda4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ec60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec62:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ec70:	e098      	b.n	800eda4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db0f      	blt.n	800ec9c <tcp_slowtmr+0x1f4>
 800ec7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec82:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d008      	beq.n	800ec9c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3301      	adds	r3, #1
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b21a      	sxth	r2, r3
 800ec98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ec9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800eca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	db7b      	blt.n	800eda4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ecac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ecae:	f004 fd65 	bl	801377c <tcp_rexmit_rto_prepare>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <tcp_slowtmr+0x220>
 800ecb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d171      	bne.n	800eda4 <tcp_slowtmr+0x2fc>
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d06d      	beq.n	800eda4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ecc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecca:	7d1b      	ldrb	r3, [r3, #20]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d03a      	beq.n	800ed46 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ecd6:	2b0c      	cmp	r3, #12
 800ecd8:	bf28      	it	cs
 800ecda:	230c      	movcs	r3, #12
 800ecdc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ece4:	10db      	asrs	r3, r3, #3
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	461a      	mov	r2, r3
 800ecea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ecf0:	4413      	add	r3, r2
 800ecf2:	7efa      	ldrb	r2, [r7, #27]
 800ecf4:	4910      	ldr	r1, [pc, #64]	@ (800ed38 <tcp_slowtmr+0x290>)
 800ecf6:	5c8a      	ldrb	r2, [r1, r2]
 800ecf8:	4093      	lsls	r3, r2
 800ecfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ed02:	4293      	cmp	r3, r2
 800ed04:	dc1a      	bgt.n	800ed3c <tcp_slowtmr+0x294>
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	b21a      	sxth	r2, r3
 800ed0a:	e019      	b.n	800ed40 <tcp_slowtmr+0x298>
 800ed0c:	2000f098 	.word	0x2000f098
 800ed10:	2000f0ae 	.word	0x2000f0ae
 800ed14:	2000f0a4 	.word	0x2000f0a4
 800ed18:	0801a4e4 	.word	0x0801a4e4
 800ed1c:	0801a828 	.word	0x0801a828
 800ed20:	0801a528 	.word	0x0801a528
 800ed24:	0801a854 	.word	0x0801a854
 800ed28:	0801a880 	.word	0x0801a880
 800ed2c:	0801a8b0 	.word	0x0801a8b0
 800ed30:	0801a8e4 	.word	0x0801a8e4
 800ed34:	0801d1c0 	.word	0x0801d1c0
 800ed38:	0801d1b0 	.word	0x0801d1b0
 800ed3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ed46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed48:	2200      	movs	r2, #0
 800ed4a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ed4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ed52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	bf28      	it	cs
 800ed5c:	4613      	movcs	r3, r2
 800ed5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ed60:	8a7b      	ldrh	r3, [r7, #18]
 800ed62:	085b      	lsrs	r3, r3, #1
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ed6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d206      	bcs.n	800ed8c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ed7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ed8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ed90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ed96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ed9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eda0:	f004 fd5c 	bl	801385c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800eda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda6:	7d1b      	ldrb	r3, [r3, #20]
 800eda8:	2b06      	cmp	r3, #6
 800edaa:	d111      	bne.n	800edd0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800edac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edae:	8b5b      	ldrh	r3, [r3, #26]
 800edb0:	f003 0310 	and.w	r3, r3, #16
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00b      	beq.n	800edd0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edb8:	4b9c      	ldr	r3, [pc, #624]	@ (800f02c <tcp_slowtmr+0x584>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edbe:	6a1b      	ldr	r3, [r3, #32]
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	2b28      	cmp	r3, #40	@ 0x28
 800edc4:	d904      	bls.n	800edd0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800edc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edca:	3301      	adds	r3, #1
 800edcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	7a5b      	ldrb	r3, [r3, #9]
 800edd4:	f003 0308 	and.w	r3, r3, #8
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d04a      	beq.n	800ee72 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800eddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edde:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ede0:	2b04      	cmp	r3, #4
 800ede2:	d003      	beq.n	800edec <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ede4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ede8:	2b07      	cmp	r3, #7
 800edea:	d142      	bne.n	800ee72 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edec:	4b8f      	ldr	r3, [pc, #572]	@ (800f02c <tcp_slowtmr+0x584>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800edf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800edfc:	4b8c      	ldr	r3, [pc, #560]	@ (800f030 <tcp_slowtmr+0x588>)
 800edfe:	440b      	add	r3, r1
 800ee00:	498c      	ldr	r1, [pc, #560]	@ (800f034 <tcp_slowtmr+0x58c>)
 800ee02:	fba1 1303 	umull	r1, r3, r1, r3
 800ee06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d90a      	bls.n	800ee22 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ee0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee10:	3301      	adds	r3, #1
 800ee12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ee16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee20:	e027      	b.n	800ee72 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee22:	4b82      	ldr	r3, [pc, #520]	@ (800f02c <tcp_slowtmr+0x584>)
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ee2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ee32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee34:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ee38:	4618      	mov	r0, r3
 800ee3a:	4b7f      	ldr	r3, [pc, #508]	@ (800f038 <tcp_slowtmr+0x590>)
 800ee3c:	fb00 f303 	mul.w	r3, r0, r3
 800ee40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ee42:	497c      	ldr	r1, [pc, #496]	@ (800f034 <tcp_slowtmr+0x58c>)
 800ee44:	fba1 1303 	umull	r1, r3, r1, r3
 800ee48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d911      	bls.n	800ee72 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ee4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee50:	f005 f808 	bl	8013e64 <tcp_keepalive>
 800ee54:	4603      	mov	r3, r0
 800ee56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ee5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d107      	bne.n	800ee72 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ee62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee64:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ee68:	3301      	adds	r3, #1
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ee72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d011      	beq.n	800ee9e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ee7a:	4b6c      	ldr	r3, [pc, #432]	@ (800f02c <tcp_slowtmr+0x584>)
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee80:	6a1b      	ldr	r3, [r3, #32]
 800ee82:	1ad2      	subs	r2, r2, r3
 800ee84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	440b      	add	r3, r1
 800ee92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d302      	bcc.n	800ee9e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800ee98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee9a:	f000 fec9 	bl	800fc30 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ee9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
 800eea2:	2b03      	cmp	r3, #3
 800eea4:	d10b      	bne.n	800eebe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eea6:	4b61      	ldr	r3, [pc, #388]	@ (800f02c <tcp_slowtmr+0x584>)
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeac:	6a1b      	ldr	r3, [r3, #32]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	2b28      	cmp	r3, #40	@ 0x28
 800eeb2:	d904      	bls.n	800eebe <tcp_slowtmr+0x416>
        ++pcb_remove;
 800eeb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eeb8:	3301      	adds	r3, #1
 800eeba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec0:	7d1b      	ldrb	r3, [r3, #20]
 800eec2:	2b09      	cmp	r3, #9
 800eec4:	d10b      	bne.n	800eede <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eec6:	4b59      	ldr	r3, [pc, #356]	@ (800f02c <tcp_slowtmr+0x584>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	1ad3      	subs	r3, r2, r3
 800eed0:	2bf0      	cmp	r3, #240	@ 0xf0
 800eed2:	d904      	bls.n	800eede <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eed8:	3301      	adds	r3, #1
 800eeda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800eede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d060      	beq.n	800efa8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800eee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeec:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800eeee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eef0:	f000 fcea 	bl	800f8c8 <tcp_pcb_purge>
      if (prev != NULL) {
 800eef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d010      	beq.n	800ef1c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eefa:	4b50      	ldr	r3, [pc, #320]	@ (800f03c <tcp_slowtmr+0x594>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d106      	bne.n	800ef12 <tcp_slowtmr+0x46a>
 800ef04:	4b4e      	ldr	r3, [pc, #312]	@ (800f040 <tcp_slowtmr+0x598>)
 800ef06:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ef0a:	494e      	ldr	r1, [pc, #312]	@ (800f044 <tcp_slowtmr+0x59c>)
 800ef0c:	484e      	ldr	r0, [pc, #312]	@ (800f048 <tcp_slowtmr+0x5a0>)
 800ef0e:	f008 fcc3 	bl	8017898 <iprintf>
        prev->next = pcb->next;
 800ef12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef18:	60da      	str	r2, [r3, #12]
 800ef1a:	e00f      	b.n	800ef3c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ef1c:	4b47      	ldr	r3, [pc, #284]	@ (800f03c <tcp_slowtmr+0x594>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d006      	beq.n	800ef34 <tcp_slowtmr+0x48c>
 800ef26:	4b46      	ldr	r3, [pc, #280]	@ (800f040 <tcp_slowtmr+0x598>)
 800ef28:	f240 5271 	movw	r2, #1393	@ 0x571
 800ef2c:	4947      	ldr	r1, [pc, #284]	@ (800f04c <tcp_slowtmr+0x5a4>)
 800ef2e:	4846      	ldr	r0, [pc, #280]	@ (800f048 <tcp_slowtmr+0x5a0>)
 800ef30:	f008 fcb2 	bl	8017898 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	4a40      	ldr	r2, [pc, #256]	@ (800f03c <tcp_slowtmr+0x594>)
 800ef3a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ef3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d013      	beq.n	800ef6c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef46:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ef48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ef4c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ef4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef50:	3304      	adds	r3, #4
 800ef52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef54:	8ad2      	ldrh	r2, [r2, #22]
 800ef56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef58:	8b09      	ldrh	r1, [r1, #24]
 800ef5a:	9102      	str	r1, [sp, #8]
 800ef5c:	9201      	str	r2, [sp, #4]
 800ef5e:	9300      	str	r3, [sp, #0]
 800ef60:	462b      	mov	r3, r5
 800ef62:	4622      	mov	r2, r4
 800ef64:	4601      	mov	r1, r0
 800ef66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef68:	f004 fec8 	bl	8013cfc <tcp_rst>
      err_arg = pcb->callback_arg;
 800ef6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	7d1b      	ldrb	r3, [r3, #20]
 800ef76:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ef78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ef82:	6838      	ldr	r0, [r7, #0]
 800ef84:	f7fe ffdc 	bl	800df40 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ef88:	4b31      	ldr	r3, [pc, #196]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <tcp_slowtmr+0x4f6>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f06f 010c 	mvn.w	r1, #12
 800ef9a:	68b8      	ldr	r0, [r7, #8]
 800ef9c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef9e:	4b2c      	ldr	r3, [pc, #176]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d037      	beq.n	800f016 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800efa6:	e592      	b.n	800eace <tcp_slowtmr+0x26>
      prev = pcb;
 800efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800efac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800efb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb4:	7f1b      	ldrb	r3, [r3, #28]
 800efb6:	3301      	adds	r3, #1
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efbc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800efbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc0:	7f1a      	ldrb	r2, [r3, #28]
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	7f5b      	ldrb	r3, [r3, #29]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d325      	bcc.n	800f016 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800efca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efcc:	2200      	movs	r2, #0
 800efce:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800efd0:	4b1f      	ldr	r3, [pc, #124]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800efd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00b      	beq.n	800eff8 <tcp_slowtmr+0x550>
 800efe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efe8:	6912      	ldr	r2, [r2, #16]
 800efea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800efec:	4610      	mov	r0, r2
 800efee:	4798      	blx	r3
 800eff0:	4603      	mov	r3, r0
 800eff2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800eff6:	e002      	b.n	800effe <tcp_slowtmr+0x556>
 800eff8:	2300      	movs	r3, #0
 800effa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800effe:	4b14      	ldr	r3, [pc, #80]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	f47f ad62 	bne.w	800eacc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f008:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d102      	bne.n	800f016 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f012:	f004 f8bf 	bl	8013194 <tcp_output>
  while (pcb != NULL) {
 800f016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f47f ad5e 	bne.w	800eada <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f01e:	2300      	movs	r3, #0
 800f020:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f022:	4b0c      	ldr	r3, [pc, #48]	@ (800f054 <tcp_slowtmr+0x5ac>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f028:	e069      	b.n	800f0fe <tcp_slowtmr+0x656>
 800f02a:	bf00      	nop
 800f02c:	2000f098 	.word	0x2000f098
 800f030:	000a4cb8 	.word	0x000a4cb8
 800f034:	10624dd3 	.word	0x10624dd3
 800f038:	000124f8 	.word	0x000124f8
 800f03c:	2000f0a4 	.word	0x2000f0a4
 800f040:	0801a4e4 	.word	0x0801a4e4
 800f044:	0801a91c 	.word	0x0801a91c
 800f048:	0801a528 	.word	0x0801a528
 800f04c:	0801a948 	.word	0x0801a948
 800f050:	2000f0ac 	.word	0x2000f0ac
 800f054:	2000f0a8 	.word	0x2000f0a8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	2b0a      	cmp	r3, #10
 800f05e:	d006      	beq.n	800f06e <tcp_slowtmr+0x5c6>
 800f060:	4b2b      	ldr	r3, [pc, #172]	@ (800f110 <tcp_slowtmr+0x668>)
 800f062:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f066:	492b      	ldr	r1, [pc, #172]	@ (800f114 <tcp_slowtmr+0x66c>)
 800f068:	482b      	ldr	r0, [pc, #172]	@ (800f118 <tcp_slowtmr+0x670>)
 800f06a:	f008 fc15 	bl	8017898 <iprintf>
    pcb_remove = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f074:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <tcp_slowtmr+0x674>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07a:	6a1b      	ldr	r3, [r3, #32]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	2bf0      	cmp	r3, #240	@ 0xf0
 800f080:	d904      	bls.n	800f08c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f086:	3301      	adds	r3, #1
 800f088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f090:	2b00      	cmp	r3, #0
 800f092:	d02f      	beq.n	800f0f4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f096:	f000 fc17 	bl	800f8c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d010      	beq.n	800f0c2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f0a0:	4b1f      	ldr	r3, [pc, #124]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d106      	bne.n	800f0b8 <tcp_slowtmr+0x610>
 800f0aa:	4b19      	ldr	r3, [pc, #100]	@ (800f110 <tcp_slowtmr+0x668>)
 800f0ac:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f0b0:	491c      	ldr	r1, [pc, #112]	@ (800f124 <tcp_slowtmr+0x67c>)
 800f0b2:	4819      	ldr	r0, [pc, #100]	@ (800f118 <tcp_slowtmr+0x670>)
 800f0b4:	f008 fbf0 	bl	8017898 <iprintf>
        prev->next = pcb->next;
 800f0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ba:	68da      	ldr	r2, [r3, #12]
 800f0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0be:	60da      	str	r2, [r3, #12]
 800f0c0:	e00f      	b.n	800f0e2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f0c2:	4b17      	ldr	r3, [pc, #92]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d006      	beq.n	800f0da <tcp_slowtmr+0x632>
 800f0cc:	4b10      	ldr	r3, [pc, #64]	@ (800f110 <tcp_slowtmr+0x668>)
 800f0ce:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f0d2:	4915      	ldr	r1, [pc, #84]	@ (800f128 <tcp_slowtmr+0x680>)
 800f0d4:	4810      	ldr	r0, [pc, #64]	@ (800f118 <tcp_slowtmr+0x670>)
 800f0d6:	f008 fbdf 	bl	8017898 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	4a10      	ldr	r2, [pc, #64]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f0ec:	69f8      	ldr	r0, [r7, #28]
 800f0ee:	f7fe ff27 	bl	800df40 <tcp_free>
 800f0f2:	e004      	b.n	800f0fe <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1a9      	bne.n	800f058 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f104:	bf00      	nop
 800f106:	bf00      	nop
 800f108:	3730      	adds	r7, #48	@ 0x30
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bdb0      	pop	{r4, r5, r7, pc}
 800f10e:	bf00      	nop
 800f110:	0801a4e4 	.word	0x0801a4e4
 800f114:	0801a974 	.word	0x0801a974
 800f118:	0801a528 	.word	0x0801a528
 800f11c:	2000f098 	.word	0x2000f098
 800f120:	2000f0a8 	.word	0x2000f0a8
 800f124:	0801a9a4 	.word	0x0801a9a4
 800f128:	0801a9cc 	.word	0x0801a9cc

0800f12c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f132:	4b2d      	ldr	r3, [pc, #180]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	3301      	adds	r3, #1
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	4b2b      	ldr	r3, [pc, #172]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f13c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f13e:	4b2b      	ldr	r3, [pc, #172]	@ (800f1ec <tcp_fasttmr+0xc0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f144:	e048      	b.n	800f1d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	7f9a      	ldrb	r2, [r3, #30]
 800f14a:	4b27      	ldr	r3, [pc, #156]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d03f      	beq.n	800f1d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f152:	4b25      	ldr	r3, [pc, #148]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f154:	781a      	ldrb	r2, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8b5b      	ldrh	r3, [r3, #26]
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	2b00      	cmp	r3, #0
 800f164:	d010      	beq.n	800f188 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	8b5b      	ldrh	r3, [r3, #26]
 800f16a:	f043 0302 	orr.w	r3, r3, #2
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f004 f80d 	bl	8013194 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	8b5b      	ldrh	r3, [r3, #26]
 800f17e:	f023 0303 	bic.w	r3, r3, #3
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	8b5b      	ldrh	r3, [r3, #26]
 800f18c:	f003 0308 	and.w	r3, r3, #8
 800f190:	2b00      	cmp	r3, #0
 800f192:	d009      	beq.n	800f1a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f023 0308 	bic.w	r3, r3, #8
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff f860 	bl	800e268 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f1f0 <tcp_fasttmr+0xc4>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f819 	bl	800f1f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <tcp_fasttmr+0xc4>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d000      	beq.n	800f1cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f1ca:	e7b8      	b.n	800f13e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	607b      	str	r3, [r7, #4]
 800f1d0:	e002      	b.n	800f1d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1b3      	bne.n	800f146 <tcp_fasttmr+0x1a>
    }
  }
}
 800f1de:	bf00      	nop
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	2000f0ae 	.word	0x2000f0ae
 800f1ec:	2000f0a4 	.word	0x2000f0a4
 800f1f0:	2000f0ac 	.word	0x2000f0ac

0800f1f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f1f4:	b590      	push	{r4, r7, lr}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d109      	bne.n	800f216 <tcp_process_refused_data+0x22>
 800f202:	4b37      	ldr	r3, [pc, #220]	@ (800f2e0 <tcp_process_refused_data+0xec>)
 800f204:	f240 6209 	movw	r2, #1545	@ 0x609
 800f208:	4936      	ldr	r1, [pc, #216]	@ (800f2e4 <tcp_process_refused_data+0xf0>)
 800f20a:	4837      	ldr	r0, [pc, #220]	@ (800f2e8 <tcp_process_refused_data+0xf4>)
 800f20c:	f008 fb44 	bl	8017898 <iprintf>
 800f210:	f06f 030f 	mvn.w	r3, #15
 800f214:	e060      	b.n	800f2d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f21a:	7b5b      	ldrb	r3, [r3, #13]
 800f21c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f222:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2200      	movs	r2, #0
 800f228:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00b      	beq.n	800f24c <tcp_process_refused_data+0x58>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6918      	ldr	r0, [r3, #16]
 800f23e:	2300      	movs	r3, #0
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	6879      	ldr	r1, [r7, #4]
 800f244:	47a0      	blx	r4
 800f246:	4603      	mov	r3, r0
 800f248:	73fb      	strb	r3, [r7, #15]
 800f24a:	e007      	b.n	800f25c <tcp_process_refused_data+0x68>
 800f24c:	2300      	movs	r3, #0
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	6879      	ldr	r1, [r7, #4]
 800f252:	2000      	movs	r0, #0
 800f254:	f000 f8c2 	bl	800f3dc <tcp_recv_null>
 800f258:	4603      	mov	r3, r0
 800f25a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d12a      	bne.n	800f2ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f264:	7bbb      	ldrb	r3, [r7, #14]
 800f266:	f003 0320 	and.w	r3, r3, #32
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d033      	beq.n	800f2d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f272:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f276:	d005      	beq.n	800f284 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f27c:	3301      	adds	r3, #1
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00b      	beq.n	800f2a6 <tcp_process_refused_data+0xb2>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6918      	ldr	r0, [r3, #16]
 800f298:	2300      	movs	r3, #0
 800f29a:	2200      	movs	r2, #0
 800f29c:	6879      	ldr	r1, [r7, #4]
 800f29e:	47a0      	blx	r4
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73fb      	strb	r3, [r7, #15]
 800f2a4:	e001      	b.n	800f2aa <tcp_process_refused_data+0xb6>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ae:	f113 0f0d 	cmn.w	r3, #13
 800f2b2:	d110      	bne.n	800f2d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f2b4:	f06f 030c 	mvn.w	r3, #12
 800f2b8:	e00e      	b.n	800f2d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2be:	f113 0f0d 	cmn.w	r3, #13
 800f2c2:	d102      	bne.n	800f2ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f2c4:	f06f 030c 	mvn.w	r3, #12
 800f2c8:	e006      	b.n	800f2d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f2d0:	f06f 0304 	mvn.w	r3, #4
 800f2d4:	e000      	b.n	800f2d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd90      	pop	{r4, r7, pc}
 800f2e0:	0801a4e4 	.word	0x0801a4e4
 800f2e4:	0801a9f4 	.word	0x0801a9f4
 800f2e8:	0801a528 	.word	0x0801a528

0800f2ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f2f4:	e007      	b.n	800f306 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f80a 	bl	800f316 <tcp_seg_free>
    seg = next;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1f4      	bne.n	800f2f6 <tcp_segs_free+0xa>
  }
}
 800f30c:	bf00      	nop
 800f30e:	bf00      	nop
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}

0800f316 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b082      	sub	sp, #8
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d00c      	beq.n	800f33e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d004      	beq.n	800f336 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	f7fe fb49 	bl	800d9c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	2003      	movs	r0, #3
 800f33a:	f7fd fca1 	bl	800cc80 <memp_free>
  }
}
 800f33e:	bf00      	nop
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
	...

0800f348 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	460b      	mov	r3, r1
 800f352:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d107      	bne.n	800f36a <tcp_setprio+0x22>
 800f35a:	4b07      	ldr	r3, [pc, #28]	@ (800f378 <tcp_setprio+0x30>)
 800f35c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800f360:	4906      	ldr	r1, [pc, #24]	@ (800f37c <tcp_setprio+0x34>)
 800f362:	4807      	ldr	r0, [pc, #28]	@ (800f380 <tcp_setprio+0x38>)
 800f364:	f008 fa98 	bl	8017898 <iprintf>
 800f368:	e002      	b.n	800f370 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	78fa      	ldrb	r2, [r7, #3]
 800f36e:	755a      	strb	r2, [r3, #21]
}
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	0801a4e4 	.word	0x0801a4e4
 800f37c:	0801aa1c 	.word	0x0801aa1c
 800f380:	0801a528 	.word	0x0801a528

0800f384 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d106      	bne.n	800f3a0 <tcp_seg_copy+0x1c>
 800f392:	4b0f      	ldr	r3, [pc, #60]	@ (800f3d0 <tcp_seg_copy+0x4c>)
 800f394:	f240 6282 	movw	r2, #1666	@ 0x682
 800f398:	490e      	ldr	r1, [pc, #56]	@ (800f3d4 <tcp_seg_copy+0x50>)
 800f39a:	480f      	ldr	r0, [pc, #60]	@ (800f3d8 <tcp_seg_copy+0x54>)
 800f39c:	f008 fa7c 	bl	8017898 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f3a0:	2003      	movs	r0, #3
 800f3a2:	f7fd fbf7 	bl	800cb94 <memp_malloc>
 800f3a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <tcp_seg_copy+0x2e>
    return NULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	e00a      	b.n	800f3c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f3b2:	2210      	movs	r2, #16
 800f3b4:	6879      	ldr	r1, [r7, #4]
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f008 fbf7 	bl	8017baa <memcpy>
  pbuf_ref(cseg->p);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe fba7 	bl	800db14 <pbuf_ref>
  return cseg;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3710      	adds	r7, #16
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	0801a4e4 	.word	0x0801a4e4
 800f3d4:	0801aa38 	.word	0x0801aa38
 800f3d8:	0801a528 	.word	0x0801a528

0800f3dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
 800f3e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d109      	bne.n	800f404 <tcp_recv_null+0x28>
 800f3f0:	4b12      	ldr	r3, [pc, #72]	@ (800f43c <tcp_recv_null+0x60>)
 800f3f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f3f6:	4912      	ldr	r1, [pc, #72]	@ (800f440 <tcp_recv_null+0x64>)
 800f3f8:	4812      	ldr	r0, [pc, #72]	@ (800f444 <tcp_recv_null+0x68>)
 800f3fa:	f008 fa4d 	bl	8017898 <iprintf>
 800f3fe:	f06f 030f 	mvn.w	r3, #15
 800f402:	e016      	b.n	800f432 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d009      	beq.n	800f41e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	4619      	mov	r1, r3
 800f410:	68b8      	ldr	r0, [r7, #8]
 800f412:	f7ff fab3 	bl	800e97c <tcp_recved>
    pbuf_free(p);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7fe fad6 	bl	800d9c8 <pbuf_free>
 800f41c:	e008      	b.n	800f430 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f41e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d104      	bne.n	800f430 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f426:	68b8      	ldr	r0, [r7, #8]
 800f428:	f7fe ff88 	bl	800e33c <tcp_close>
 800f42c:	4603      	mov	r3, r0
 800f42e:	e000      	b.n	800f432 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f430:	2300      	movs	r3, #0
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	0801a4e4 	.word	0x0801a4e4
 800f440:	0801aa54 	.word	0x0801aa54
 800f444:	0801a528 	.word	0x0801a528

0800f448 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	4603      	mov	r3, r0
 800f450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f456:	2b00      	cmp	r3, #0
 800f458:	db01      	blt.n	800f45e <tcp_kill_prio+0x16>
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	e000      	b.n	800f460 <tcp_kill_prio+0x18>
 800f45e:	237f      	movs	r3, #127	@ 0x7f
 800f460:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f462:	7afb      	ldrb	r3, [r7, #11]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d034      	beq.n	800f4d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f468:	7afb      	ldrb	r3, [r7, #11]
 800f46a:	3b01      	subs	r3, #1
 800f46c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f472:	2300      	movs	r3, #0
 800f474:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f476:	4b19      	ldr	r3, [pc, #100]	@ (800f4dc <tcp_kill_prio+0x94>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	617b      	str	r3, [r7, #20]
 800f47c:	e01f      	b.n	800f4be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	7d5b      	ldrb	r3, [r3, #21]
 800f482:	7afa      	ldrb	r2, [r7, #11]
 800f484:	429a      	cmp	r2, r3
 800f486:	d80c      	bhi.n	800f4a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f48c:	7afa      	ldrb	r2, [r7, #11]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d112      	bne.n	800f4b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f492:	4b13      	ldr	r3, [pc, #76]	@ (800f4e0 <tcp_kill_prio+0x98>)
 800f494:	681a      	ldr	r2, [r3, #0]
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	6a1b      	ldr	r3, [r3, #32]
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d80a      	bhi.n	800f4b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f4a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f4e0 <tcp_kill_prio+0x98>)
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	7d5b      	ldrb	r3, [r3, #21]
 800f4b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	617b      	str	r3, [r7, #20]
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1dc      	bne.n	800f47e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f4ca:	6938      	ldr	r0, [r7, #16]
 800f4cc:	f7ff f87c 	bl	800e5c8 <tcp_abort>
 800f4d0:	e000      	b.n	800f4d4 <tcp_kill_prio+0x8c>
    return;
 800f4d2:	bf00      	nop
  }
}
 800f4d4:	3718      	adds	r7, #24
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	2000f0a4 	.word	0x2000f0a4
 800f4e0:	2000f098 	.word	0x2000f098

0800f4e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f4ee:	79fb      	ldrb	r3, [r7, #7]
 800f4f0:	2b08      	cmp	r3, #8
 800f4f2:	d009      	beq.n	800f508 <tcp_kill_state+0x24>
 800f4f4:	79fb      	ldrb	r3, [r7, #7]
 800f4f6:	2b09      	cmp	r3, #9
 800f4f8:	d006      	beq.n	800f508 <tcp_kill_state+0x24>
 800f4fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f564 <tcp_kill_state+0x80>)
 800f4fc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f500:	4919      	ldr	r1, [pc, #100]	@ (800f568 <tcp_kill_state+0x84>)
 800f502:	481a      	ldr	r0, [pc, #104]	@ (800f56c <tcp_kill_state+0x88>)
 800f504:	f008 f9c8 	bl	8017898 <iprintf>

  inactivity = 0;
 800f508:	2300      	movs	r3, #0
 800f50a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f50c:	2300      	movs	r3, #0
 800f50e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f510:	4b17      	ldr	r3, [pc, #92]	@ (800f570 <tcp_kill_state+0x8c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	617b      	str	r3, [r7, #20]
 800f516:	e017      	b.n	800f548 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	7d1b      	ldrb	r3, [r3, #20]
 800f51c:	79fa      	ldrb	r2, [r7, #7]
 800f51e:	429a      	cmp	r2, r3
 800f520:	d10f      	bne.n	800f542 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f522:	4b14      	ldr	r3, [pc, #80]	@ (800f574 <tcp_kill_state+0x90>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	1ad3      	subs	r3, r2, r3
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d807      	bhi.n	800f542 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f532:	4b10      	ldr	r3, [pc, #64]	@ (800f574 <tcp_kill_state+0x90>)
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	6a1b      	ldr	r3, [r3, #32]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1e4      	bne.n	800f518 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d003      	beq.n	800f55c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f554:	2100      	movs	r1, #0
 800f556:	6938      	ldr	r0, [r7, #16]
 800f558:	f7fe ff78 	bl	800e44c <tcp_abandon>
  }
}
 800f55c:	bf00      	nop
 800f55e:	3718      	adds	r7, #24
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	0801a4e4 	.word	0x0801a4e4
 800f568:	0801aa70 	.word	0x0801aa70
 800f56c:	0801a528 	.word	0x0801a528
 800f570:	2000f0a4 	.word	0x2000f0a4
 800f574:	2000f098 	.word	0x2000f098

0800f578 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f582:	2300      	movs	r3, #0
 800f584:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f586:	4b12      	ldr	r3, [pc, #72]	@ (800f5d0 <tcp_kill_timewait+0x58>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	60fb      	str	r3, [r7, #12]
 800f58c:	e012      	b.n	800f5b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f58e:	4b11      	ldr	r3, [pc, #68]	@ (800f5d4 <tcp_kill_timewait+0x5c>)
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6a1b      	ldr	r3, [r3, #32]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	687a      	ldr	r2, [r7, #4]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d807      	bhi.n	800f5ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f59e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5d4 <tcp_kill_timewait+0x5c>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1e9      	bne.n	800f58e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d002      	beq.n	800f5c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f5c0:	68b8      	ldr	r0, [r7, #8]
 800f5c2:	f7ff f801 	bl	800e5c8 <tcp_abort>
  }
}
 800f5c6:	bf00      	nop
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	2000f0a8 	.word	0x2000f0a8
 800f5d4:	2000f098 	.word	0x2000f098

0800f5d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f5de:	4b10      	ldr	r3, [pc, #64]	@ (800f620 <tcp_handle_closepend+0x48>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f5e4:	e014      	b.n	800f610 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	8b5b      	ldrh	r3, [r3, #26]
 800f5f0:	f003 0308 	and.w	r3, r3, #8
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d009      	beq.n	800f60c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	8b5b      	ldrh	r3, [r3, #26]
 800f5fc:	f023 0308 	bic.w	r3, r3, #8
 800f600:	b29a      	uxth	r2, r3
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7fe fe2e 	bl	800e268 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e7      	bne.n	800f5e6 <tcp_handle_closepend+0xe>
  }
}
 800f616:	bf00      	nop
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	2000f0a4 	.word	0x2000f0a4

0800f624 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f62e:	2001      	movs	r0, #1
 800f630:	f7fd fab0 	bl	800cb94 <memp_malloc>
 800f634:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d126      	bne.n	800f68a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f63c:	f7ff ffcc 	bl	800f5d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f640:	f7ff ff9a 	bl	800f578 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f644:	2001      	movs	r0, #1
 800f646:	f7fd faa5 	bl	800cb94 <memp_malloc>
 800f64a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d11b      	bne.n	800f68a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f652:	2009      	movs	r0, #9
 800f654:	f7ff ff46 	bl	800f4e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f658:	2001      	movs	r0, #1
 800f65a:	f7fd fa9b 	bl	800cb94 <memp_malloc>
 800f65e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d111      	bne.n	800f68a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f666:	2008      	movs	r0, #8
 800f668:	f7ff ff3c 	bl	800f4e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f66c:	2001      	movs	r0, #1
 800f66e:	f7fd fa91 	bl	800cb94 <memp_malloc>
 800f672:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d107      	bne.n	800f68a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f67a:	79fb      	ldrb	r3, [r7, #7]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff fee3 	bl	800f448 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f682:	2001      	movs	r0, #1
 800f684:	f7fd fa86 	bl	800cb94 <memp_malloc>
 800f688:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d03f      	beq.n	800f710 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f690:	229c      	movs	r2, #156	@ 0x9c
 800f692:	2100      	movs	r1, #0
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f008 f99e 	bl	80179d6 <memset>
    pcb->prio = prio;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	79fa      	ldrb	r2, [r7, #7]
 800f69e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f6a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f6b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	22ff      	movs	r2, #255	@ 0xff
 800f6be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f6c6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2206      	movs	r2, #6
 800f6cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2206      	movs	r2, #6
 800f6d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6dc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f71c <tcp_alloc+0xf8>)
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f720 <tcp_alloc+0xfc>)
 800f6f0:	781a      	ldrb	r2, [r3, #0]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f6fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	4a08      	ldr	r2, [pc, #32]	@ (800f724 <tcp_alloc+0x100>)
 800f704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	4a07      	ldr	r2, [pc, #28]	@ (800f728 <tcp_alloc+0x104>)
 800f70c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f710:	68fb      	ldr	r3, [r7, #12]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	2000f098 	.word	0x2000f098
 800f720:	2000f0ae 	.word	0x2000f0ae
 800f724:	0800f3dd 	.word	0x0800f3dd
 800f728:	006ddd00 	.word	0x006ddd00

0800f72c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	4603      	mov	r3, r0
 800f734:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f736:	2040      	movs	r0, #64	@ 0x40
 800f738:	f7ff ff74 	bl	800f624 <tcp_alloc>
 800f73c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f73e:	68fb      	ldr	r3, [r7, #12]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d002      	beq.n	800f75e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	683a      	ldr	r2, [r7, #0]
 800f75c:	611a      	str	r2, [r3, #16]
  }
}
 800f75e:	bf00      	nop
 800f760:	370c      	adds	r7, #12
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
	...

0800f76c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00e      	beq.n	800f79a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d106      	bne.n	800f792 <tcp_recv+0x26>
 800f784:	4b07      	ldr	r3, [pc, #28]	@ (800f7a4 <tcp_recv+0x38>)
 800f786:	f240 72df 	movw	r2, #2015	@ 0x7df
 800f78a:	4907      	ldr	r1, [pc, #28]	@ (800f7a8 <tcp_recv+0x3c>)
 800f78c:	4807      	ldr	r0, [pc, #28]	@ (800f7ac <tcp_recv+0x40>)
 800f78e:	f008 f883 	bl	8017898 <iprintf>
    pcb->recv = recv;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800f79a:	bf00      	nop
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	0801a4e4 	.word	0x0801a4e4
 800f7a8:	0801aa80 	.word	0x0801aa80
 800f7ac:	0801a528 	.word	0x0801a528

0800f7b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00e      	beq.n	800f7de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d106      	bne.n	800f7d6 <tcp_sent+0x26>
 800f7c8:	4b07      	ldr	r3, [pc, #28]	@ (800f7e8 <tcp_sent+0x38>)
 800f7ca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800f7ce:	4907      	ldr	r1, [pc, #28]	@ (800f7ec <tcp_sent+0x3c>)
 800f7d0:	4807      	ldr	r0, [pc, #28]	@ (800f7f0 <tcp_sent+0x40>)
 800f7d2:	f008 f861 	bl	8017898 <iprintf>
    pcb->sent = sent;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800f7de:	bf00      	nop
 800f7e0:	3708      	adds	r7, #8
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	0801a4e4 	.word	0x0801a4e4
 800f7ec:	0801aaa8 	.word	0x0801aaa8
 800f7f0:	0801a528 	.word	0x0801a528

0800f7f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00e      	beq.n	800f822 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7d1b      	ldrb	r3, [r3, #20]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d106      	bne.n	800f81a <tcp_err+0x26>
 800f80c:	4b07      	ldr	r3, [pc, #28]	@ (800f82c <tcp_err+0x38>)
 800f80e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800f812:	4907      	ldr	r1, [pc, #28]	@ (800f830 <tcp_err+0x3c>)
 800f814:	4807      	ldr	r0, [pc, #28]	@ (800f834 <tcp_err+0x40>)
 800f816:	f008 f83f 	bl	8017898 <iprintf>
    pcb->errf = err;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	683a      	ldr	r2, [r7, #0]
 800f81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	0801a4e4 	.word	0x0801a4e4
 800f830:	0801aad0 	.word	0x0801aad0
 800f834:	0801a528 	.word	0x0801a528

0800f838 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d008      	beq.n	800f85a <tcp_accept+0x22>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	7d1b      	ldrb	r3, [r3, #20]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d104      	bne.n	800f85a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	683a      	ldr	r2, [r7, #0]
 800f858:	619a      	str	r2, [r3, #24]
  }
}
 800f85a:	bf00      	nop
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
	...

0800f868 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	4613      	mov	r3, r2
 800f874:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d107      	bne.n	800f88c <tcp_poll+0x24>
 800f87c:	4b0e      	ldr	r3, [pc, #56]	@ (800f8b8 <tcp_poll+0x50>)
 800f87e:	f640 023d 	movw	r2, #2109	@ 0x83d
 800f882:	490e      	ldr	r1, [pc, #56]	@ (800f8bc <tcp_poll+0x54>)
 800f884:	480e      	ldr	r0, [pc, #56]	@ (800f8c0 <tcp_poll+0x58>)
 800f886:	f008 f807 	bl	8017898 <iprintf>
 800f88a:	e011      	b.n	800f8b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	7d1b      	ldrb	r3, [r3, #20]
 800f890:	2b01      	cmp	r3, #1
 800f892:	d106      	bne.n	800f8a2 <tcp_poll+0x3a>
 800f894:	4b08      	ldr	r3, [pc, #32]	@ (800f8b8 <tcp_poll+0x50>)
 800f896:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f89a:	490a      	ldr	r1, [pc, #40]	@ (800f8c4 <tcp_poll+0x5c>)
 800f89c:	4808      	ldr	r0, [pc, #32]	@ (800f8c0 <tcp_poll+0x58>)
 800f89e:	f007 fffb 	bl	8017898 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	79fa      	ldrb	r2, [r7, #7]
 800f8ae:	775a      	strb	r2, [r3, #29]
}
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	0801a4e4 	.word	0x0801a4e4
 800f8bc:	0801aaf8 	.word	0x0801aaf8
 800f8c0:	0801a528 	.word	0x0801a528
 800f8c4:	0801ab10 	.word	0x0801ab10

0800f8c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d107      	bne.n	800f8e6 <tcp_pcb_purge+0x1e>
 800f8d6:	4b21      	ldr	r3, [pc, #132]	@ (800f95c <tcp_pcb_purge+0x94>)
 800f8d8:	f640 0251 	movw	r2, #2129	@ 0x851
 800f8dc:	4920      	ldr	r1, [pc, #128]	@ (800f960 <tcp_pcb_purge+0x98>)
 800f8de:	4821      	ldr	r0, [pc, #132]	@ (800f964 <tcp_pcb_purge+0x9c>)
 800f8e0:	f007 ffda 	bl	8017898 <iprintf>
 800f8e4:	e037      	b.n	800f956 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	7d1b      	ldrb	r3, [r3, #20]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d033      	beq.n	800f956 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f8f2:	2b0a      	cmp	r3, #10
 800f8f4:	d02f      	beq.n	800f956 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d02b      	beq.n	800f956 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f902:	2b00      	cmp	r3, #0
 800f904:	d007      	beq.n	800f916 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe f85c 	bl	800d9c8 <pbuf_free>
      pcb->refused_data = NULL;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d002      	beq.n	800f924 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f986 	bl	800fc30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f92a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f930:	4618      	mov	r0, r3
 800f932:	f7ff fcdb 	bl	800f2ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff fcd6 	bl	800f2ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2200      	movs	r2, #0
 800f952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	0801a4e4 	.word	0x0801a4e4
 800f960:	0801ab30 	.word	0x0801ab30
 800f964:	0801a528 	.word	0x0801a528

0800f968 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d106      	bne.n	800f986 <tcp_pcb_remove+0x1e>
 800f978:	4b3e      	ldr	r3, [pc, #248]	@ (800fa74 <tcp_pcb_remove+0x10c>)
 800f97a:	f640 0283 	movw	r2, #2179	@ 0x883
 800f97e:	493e      	ldr	r1, [pc, #248]	@ (800fa78 <tcp_pcb_remove+0x110>)
 800f980:	483e      	ldr	r0, [pc, #248]	@ (800fa7c <tcp_pcb_remove+0x114>)
 800f982:	f007 ff89 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d106      	bne.n	800f99a <tcp_pcb_remove+0x32>
 800f98c:	4b39      	ldr	r3, [pc, #228]	@ (800fa74 <tcp_pcb_remove+0x10c>)
 800f98e:	f640 0284 	movw	r2, #2180	@ 0x884
 800f992:	493b      	ldr	r1, [pc, #236]	@ (800fa80 <tcp_pcb_remove+0x118>)
 800f994:	4839      	ldr	r0, [pc, #228]	@ (800fa7c <tcp_pcb_remove+0x114>)
 800f996:	f007 ff7f 	bl	8017898 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	683a      	ldr	r2, [r7, #0]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d105      	bne.n	800f9b0 <tcp_pcb_remove+0x48>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	68da      	ldr	r2, [r3, #12]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e013      	b.n	800f9d8 <tcp_pcb_remove+0x70>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	60fb      	str	r3, [r7, #12]
 800f9b6:	e00c      	b.n	800f9d2 <tcp_pcb_remove+0x6a>
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d104      	bne.n	800f9cc <tcp_pcb_remove+0x64>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	68da      	ldr	r2, [r3, #12]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	60da      	str	r2, [r3, #12]
 800f9ca:	e005      	b.n	800f9d8 <tcp_pcb_remove+0x70>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	60fb      	str	r3, [r7, #12]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1ef      	bne.n	800f9b8 <tcp_pcb_remove+0x50>
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f9de:	6838      	ldr	r0, [r7, #0]
 800f9e0:	f7ff ff72 	bl	800f8c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	2b0a      	cmp	r3, #10
 800f9ea:	d013      	beq.n	800fa14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d00f      	beq.n	800fa14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	8b5b      	ldrh	r3, [r3, #26]
 800f9f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d009      	beq.n	800fa14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	8b5b      	ldrh	r3, [r3, #26]
 800fa04:	f043 0302 	orr.w	r3, r3, #2
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa0e:	6838      	ldr	r0, [r7, #0]
 800fa10:	f003 fbc0 	bl	8013194 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	7d1b      	ldrb	r3, [r3, #20]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d020      	beq.n	800fa5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d006      	beq.n	800fa32 <tcp_pcb_remove+0xca>
 800fa24:	4b13      	ldr	r3, [pc, #76]	@ (800fa74 <tcp_pcb_remove+0x10c>)
 800fa26:	f640 0293 	movw	r2, #2195	@ 0x893
 800fa2a:	4916      	ldr	r1, [pc, #88]	@ (800fa84 <tcp_pcb_remove+0x11c>)
 800fa2c:	4813      	ldr	r0, [pc, #76]	@ (800fa7c <tcp_pcb_remove+0x114>)
 800fa2e:	f007 ff33 	bl	8017898 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d006      	beq.n	800fa48 <tcp_pcb_remove+0xe0>
 800fa3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa74 <tcp_pcb_remove+0x10c>)
 800fa3c:	f640 0294 	movw	r2, #2196	@ 0x894
 800fa40:	4911      	ldr	r1, [pc, #68]	@ (800fa88 <tcp_pcb_remove+0x120>)
 800fa42:	480e      	ldr	r0, [pc, #56]	@ (800fa7c <tcp_pcb_remove+0x114>)
 800fa44:	f007 ff28 	bl	8017898 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <tcp_pcb_remove+0xf6>
 800fa50:	4b08      	ldr	r3, [pc, #32]	@ (800fa74 <tcp_pcb_remove+0x10c>)
 800fa52:	f640 0296 	movw	r2, #2198	@ 0x896
 800fa56:	490d      	ldr	r1, [pc, #52]	@ (800fa8c <tcp_pcb_remove+0x124>)
 800fa58:	4808      	ldr	r0, [pc, #32]	@ (800fa7c <tcp_pcb_remove+0x114>)
 800fa5a:	f007 ff1d 	bl	8017898 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2200      	movs	r2, #0
 800fa62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2200      	movs	r2, #0
 800fa68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fa6a:	bf00      	nop
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	0801a4e4 	.word	0x0801a4e4
 800fa78:	0801ab4c 	.word	0x0801ab4c
 800fa7c:	0801a528 	.word	0x0801a528
 800fa80:	0801ab68 	.word	0x0801ab68
 800fa84:	0801ab88 	.word	0x0801ab88
 800fa88:	0801aba0 	.word	0x0801aba0
 800fa8c:	0801abbc 	.word	0x0801abbc

0800fa90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d106      	bne.n	800faac <tcp_next_iss+0x1c>
 800fa9e:	4b0a      	ldr	r3, [pc, #40]	@ (800fac8 <tcp_next_iss+0x38>)
 800faa0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800faa4:	4909      	ldr	r1, [pc, #36]	@ (800facc <tcp_next_iss+0x3c>)
 800faa6:	480a      	ldr	r0, [pc, #40]	@ (800fad0 <tcp_next_iss+0x40>)
 800faa8:	f007 fef6 	bl	8017898 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800faac:	4b09      	ldr	r3, [pc, #36]	@ (800fad4 <tcp_next_iss+0x44>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	4b09      	ldr	r3, [pc, #36]	@ (800fad8 <tcp_next_iss+0x48>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4413      	add	r3, r2
 800fab6:	4a07      	ldr	r2, [pc, #28]	@ (800fad4 <tcp_next_iss+0x44>)
 800fab8:	6013      	str	r3, [r2, #0]
  return iss;
 800faba:	4b06      	ldr	r3, [pc, #24]	@ (800fad4 <tcp_next_iss+0x44>)
 800fabc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	0801a4e4 	.word	0x0801a4e4
 800facc:	0801abd4 	.word	0x0801abd4
 800fad0:	0801a528 	.word	0x0801a528
 800fad4:	20000028 	.word	0x20000028
 800fad8:	2000f098 	.word	0x2000f098

0800fadc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	4603      	mov	r3, r0
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d106      	bne.n	800fafe <tcp_eff_send_mss_netif+0x22>
 800faf0:	4b14      	ldr	r3, [pc, #80]	@ (800fb44 <tcp_eff_send_mss_netif+0x68>)
 800faf2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800faf6:	4914      	ldr	r1, [pc, #80]	@ (800fb48 <tcp_eff_send_mss_netif+0x6c>)
 800faf8:	4814      	ldr	r0, [pc, #80]	@ (800fb4c <tcp_eff_send_mss_netif+0x70>)
 800fafa:	f007 fecd 	bl	8017898 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d101      	bne.n	800fb08 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fb04:	89fb      	ldrh	r3, [r7, #14]
 800fb06:	e019      	b.n	800fb3c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb0c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fb0e:	8afb      	ldrh	r3, [r7, #22]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d012      	beq.n	800fb3a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fb14:	2328      	movs	r3, #40	@ 0x28
 800fb16:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fb18:	8afa      	ldrh	r2, [r7, #22]
 800fb1a:	8abb      	ldrh	r3, [r7, #20]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d904      	bls.n	800fb2a <tcp_eff_send_mss_netif+0x4e>
 800fb20:	8afa      	ldrh	r2, [r7, #22]
 800fb22:	8abb      	ldrh	r3, [r7, #20]
 800fb24:	1ad3      	subs	r3, r2, r3
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	e000      	b.n	800fb2c <tcp_eff_send_mss_netif+0x50>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fb2e:	8a7a      	ldrh	r2, [r7, #18]
 800fb30:	89fb      	ldrh	r3, [r7, #14]
 800fb32:	4293      	cmp	r3, r2
 800fb34:	bf28      	it	cs
 800fb36:	4613      	movcs	r3, r2
 800fb38:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fb3a:	89fb      	ldrh	r3, [r7, #14]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	0801a4e4 	.word	0x0801a4e4
 800fb48:	0801abf0 	.word	0x0801abf0
 800fb4c:	0801a528 	.word	0x0801a528

0800fb50 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d119      	bne.n	800fb98 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fb64:	4b10      	ldr	r3, [pc, #64]	@ (800fba8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fb66:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800fb6a:	4910      	ldr	r1, [pc, #64]	@ (800fbac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fb6c:	4810      	ldr	r0, [pc, #64]	@ (800fbb0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fb6e:	f007 fe93 	bl	8017898 <iprintf>

  while (pcb != NULL) {
 800fb72:	e011      	b.n	800fb98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d108      	bne.n	800fb92 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7fe fd1e 	bl	800e5c8 <tcp_abort>
      pcb = next;
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	60fb      	str	r3, [r7, #12]
 800fb90:	e002      	b.n	800fb98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1ea      	bne.n	800fb74 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fb9e:	bf00      	nop
 800fba0:	bf00      	nop
 800fba2:	3710      	adds	r7, #16
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	0801a4e4 	.word	0x0801a4e4
 800fbac:	0801ac18 	.word	0x0801ac18
 800fbb0:	0801a528 	.word	0x0801a528

0800fbb4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d02a      	beq.n	800fc1a <tcp_netif_ip_addr_changed+0x66>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d026      	beq.n	800fc1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fbcc:	4b15      	ldr	r3, [pc, #84]	@ (800fc24 <tcp_netif_ip_addr_changed+0x70>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7ff ffbc 	bl	800fb50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fbd8:	4b13      	ldr	r3, [pc, #76]	@ (800fc28 <tcp_netif_ip_addr_changed+0x74>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff ffb6 	bl	800fb50 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d017      	beq.n	800fc1a <tcp_netif_ip_addr_changed+0x66>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d013      	beq.n	800fc1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fbf2:	4b0e      	ldr	r3, [pc, #56]	@ (800fc2c <tcp_netif_ip_addr_changed+0x78>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	e00c      	b.n	800fc14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d103      	bne.n	800fc0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	60fb      	str	r3, [r7, #12]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1ef      	bne.n	800fbfa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fc1a:	bf00      	nop
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	2000f0a4 	.word	0x2000f0a4
 800fc28:	2000f09c 	.word	0x2000f09c
 800fc2c:	2000f0a0 	.word	0x2000f0a0

0800fc30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d007      	beq.n	800fc50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7ff fb51 	bl	800f2ec <tcp_segs_free>
    pcb->ooseq = NULL;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fc50:	bf00      	nop
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fc58:	b590      	push	{r4, r7, lr}
 800fc5a:	b08d      	sub	sp, #52	@ 0x34
 800fc5c:	af04      	add	r7, sp, #16
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d105      	bne.n	800fc74 <tcp_input+0x1c>
 800fc68:	4b9b      	ldr	r3, [pc, #620]	@ (800fed8 <tcp_input+0x280>)
 800fc6a:	2283      	movs	r2, #131	@ 0x83
 800fc6c:	499b      	ldr	r1, [pc, #620]	@ (800fedc <tcp_input+0x284>)
 800fc6e:	489c      	ldr	r0, [pc, #624]	@ (800fee0 <tcp_input+0x288>)
 800fc70:	f007 fe12 	bl	8017898 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	4a9a      	ldr	r2, [pc, #616]	@ (800fee4 <tcp_input+0x28c>)
 800fc7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	895b      	ldrh	r3, [r3, #10]
 800fc80:	2b13      	cmp	r3, #19
 800fc82:	f240 83d1 	bls.w	8010428 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fc86:	4b98      	ldr	r3, [pc, #608]	@ (800fee8 <tcp_input+0x290>)
 800fc88:	695b      	ldr	r3, [r3, #20]
 800fc8a:	4a97      	ldr	r2, [pc, #604]	@ (800fee8 <tcp_input+0x290>)
 800fc8c:	6812      	ldr	r2, [r2, #0]
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f006 fbc9 	bl	8016428 <ip4_addr_isbroadcast_u32>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	f040 83c7 	bne.w	801042c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc9e:	4b92      	ldr	r3, [pc, #584]	@ (800fee8 <tcp_input+0x290>)
 800fca0:	695b      	ldr	r3, [r3, #20]
 800fca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fca6:	2be0      	cmp	r3, #224	@ 0xe0
 800fca8:	f000 83c0 	beq.w	801042c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fcac:	4b8d      	ldr	r3, [pc, #564]	@ (800fee4 <tcp_input+0x28c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	899b      	ldrh	r3, [r3, #12]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fc fa5f 	bl	800c178 <lwip_htons>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	0b1b      	lsrs	r3, r3, #12
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fcc6:	7cbb      	ldrb	r3, [r7, #18]
 800fcc8:	2b13      	cmp	r3, #19
 800fcca:	f240 83b1 	bls.w	8010430 <tcp_input+0x7d8>
 800fcce:	7cbb      	ldrb	r3, [r7, #18]
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	891b      	ldrh	r3, [r3, #8]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f200 83aa 	bhi.w	8010430 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fcdc:	7cbb      	ldrb	r3, [r7, #18]
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	3b14      	subs	r3, #20
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	4b81      	ldr	r3, [pc, #516]	@ (800feec <tcp_input+0x294>)
 800fce6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fce8:	4b81      	ldr	r3, [pc, #516]	@ (800fef0 <tcp_input+0x298>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	895a      	ldrh	r2, [r3, #10]
 800fcf2:	7cbb      	ldrb	r3, [r7, #18]
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d309      	bcc.n	800fd0e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fcfa:	4b7c      	ldr	r3, [pc, #496]	@ (800feec <tcp_input+0x294>)
 800fcfc:	881a      	ldrh	r2, [r3, #0]
 800fcfe:	4b7d      	ldr	r3, [pc, #500]	@ (800fef4 <tcp_input+0x29c>)
 800fd00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fd02:	7cbb      	ldrb	r3, [r7, #18]
 800fd04:	4619      	mov	r1, r3
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7fd fdd8 	bl	800d8bc <pbuf_remove_header>
 800fd0c:	e04e      	b.n	800fdac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d105      	bne.n	800fd22 <tcp_input+0xca>
 800fd16:	4b70      	ldr	r3, [pc, #448]	@ (800fed8 <tcp_input+0x280>)
 800fd18:	22c2      	movs	r2, #194	@ 0xc2
 800fd1a:	4977      	ldr	r1, [pc, #476]	@ (800fef8 <tcp_input+0x2a0>)
 800fd1c:	4870      	ldr	r0, [pc, #448]	@ (800fee0 <tcp_input+0x288>)
 800fd1e:	f007 fdbb 	bl	8017898 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fd22:	2114      	movs	r1, #20
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7fd fdc9 	bl	800d8bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	895a      	ldrh	r2, [r3, #10]
 800fd2e:	4b71      	ldr	r3, [pc, #452]	@ (800fef4 <tcp_input+0x29c>)
 800fd30:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fd32:	4b6e      	ldr	r3, [pc, #440]	@ (800feec <tcp_input+0x294>)
 800fd34:	881a      	ldrh	r2, [r3, #0]
 800fd36:	4b6f      	ldr	r3, [pc, #444]	@ (800fef4 <tcp_input+0x29c>)
 800fd38:	881b      	ldrh	r3, [r3, #0]
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fd3e:	4b6d      	ldr	r3, [pc, #436]	@ (800fef4 <tcp_input+0x29c>)
 800fd40:	881b      	ldrh	r3, [r3, #0]
 800fd42:	4619      	mov	r1, r3
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f7fd fdb9 	bl	800d8bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	895b      	ldrh	r3, [r3, #10]
 800fd50:	8a3a      	ldrh	r2, [r7, #16]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	f200 836e 	bhi.w	8010434 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	4a64      	ldr	r2, [pc, #400]	@ (800fef0 <tcp_input+0x298>)
 800fd60:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	8a3a      	ldrh	r2, [r7, #16]
 800fd68:	4611      	mov	r1, r2
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fd fda6 	bl	800d8bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	891a      	ldrh	r2, [r3, #8]
 800fd74:	8a3b      	ldrh	r3, [r7, #16]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	895b      	ldrh	r3, [r3, #10]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d005      	beq.n	800fd92 <tcp_input+0x13a>
 800fd86:	4b54      	ldr	r3, [pc, #336]	@ (800fed8 <tcp_input+0x280>)
 800fd88:	22df      	movs	r2, #223	@ 0xdf
 800fd8a:	495c      	ldr	r1, [pc, #368]	@ (800fefc <tcp_input+0x2a4>)
 800fd8c:	4854      	ldr	r0, [pc, #336]	@ (800fee0 <tcp_input+0x288>)
 800fd8e:	f007 fd83 	bl	8017898 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	891a      	ldrh	r2, [r3, #8]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	891b      	ldrh	r3, [r3, #8]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d005      	beq.n	800fdac <tcp_input+0x154>
 800fda0:	4b4d      	ldr	r3, [pc, #308]	@ (800fed8 <tcp_input+0x280>)
 800fda2:	22e0      	movs	r2, #224	@ 0xe0
 800fda4:	4956      	ldr	r1, [pc, #344]	@ (800ff00 <tcp_input+0x2a8>)
 800fda6:	484e      	ldr	r0, [pc, #312]	@ (800fee0 <tcp_input+0x288>)
 800fda8:	f007 fd76 	bl	8017898 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fdac:	4b4d      	ldr	r3, [pc, #308]	@ (800fee4 <tcp_input+0x28c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4a4b      	ldr	r2, [pc, #300]	@ (800fee4 <tcp_input+0x28c>)
 800fdb6:	6814      	ldr	r4, [r2, #0]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fc f9dd 	bl	800c178 <lwip_htons>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fdc2:	4b48      	ldr	r3, [pc, #288]	@ (800fee4 <tcp_input+0x28c>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	885b      	ldrh	r3, [r3, #2]
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	4a46      	ldr	r2, [pc, #280]	@ (800fee4 <tcp_input+0x28c>)
 800fdcc:	6814      	ldr	r4, [r2, #0]
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fc f9d2 	bl	800c178 <lwip_htons>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fdd8:	4b42      	ldr	r3, [pc, #264]	@ (800fee4 <tcp_input+0x28c>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	4a41      	ldr	r2, [pc, #260]	@ (800fee4 <tcp_input+0x28c>)
 800fde0:	6814      	ldr	r4, [r2, #0]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fc f9dd 	bl	800c1a2 <lwip_htonl>
 800fde8:	4603      	mov	r3, r0
 800fdea:	6063      	str	r3, [r4, #4]
 800fdec:	6863      	ldr	r3, [r4, #4]
 800fdee:	4a45      	ldr	r2, [pc, #276]	@ (800ff04 <tcp_input+0x2ac>)
 800fdf0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fdf2:	4b3c      	ldr	r3, [pc, #240]	@ (800fee4 <tcp_input+0x28c>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	4a3a      	ldr	r2, [pc, #232]	@ (800fee4 <tcp_input+0x28c>)
 800fdfa:	6814      	ldr	r4, [r2, #0]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f7fc f9d0 	bl	800c1a2 <lwip_htonl>
 800fe02:	4603      	mov	r3, r0
 800fe04:	60a3      	str	r3, [r4, #8]
 800fe06:	68a3      	ldr	r3, [r4, #8]
 800fe08:	4a3f      	ldr	r2, [pc, #252]	@ (800ff08 <tcp_input+0x2b0>)
 800fe0a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fe0c:	4b35      	ldr	r3, [pc, #212]	@ (800fee4 <tcp_input+0x28c>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	89db      	ldrh	r3, [r3, #14]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4a33      	ldr	r2, [pc, #204]	@ (800fee4 <tcp_input+0x28c>)
 800fe16:	6814      	ldr	r4, [r2, #0]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fc f9ad 	bl	800c178 <lwip_htons>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fe22:	4b30      	ldr	r3, [pc, #192]	@ (800fee4 <tcp_input+0x28c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	899b      	ldrh	r3, [r3, #12]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7fc f9a4 	bl	800c178 <lwip_htons>
 800fe30:	4603      	mov	r3, r0
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe38:	b2da      	uxtb	r2, r3
 800fe3a:	4b34      	ldr	r3, [pc, #208]	@ (800ff0c <tcp_input+0x2b4>)
 800fe3c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	891a      	ldrh	r2, [r3, #8]
 800fe42:	4b33      	ldr	r3, [pc, #204]	@ (800ff10 <tcp_input+0x2b8>)
 800fe44:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fe46:	4b31      	ldr	r3, [pc, #196]	@ (800ff0c <tcp_input+0x2b4>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 0303 	and.w	r3, r3, #3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d00c      	beq.n	800fe6c <tcp_input+0x214>
    tcplen++;
 800fe52:	4b2f      	ldr	r3, [pc, #188]	@ (800ff10 <tcp_input+0x2b8>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	3301      	adds	r3, #1
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ff10 <tcp_input+0x2b8>)
 800fe5c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	891a      	ldrh	r2, [r3, #8]
 800fe62:	4b2b      	ldr	r3, [pc, #172]	@ (800ff10 <tcp_input+0x2b8>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	f200 82e6 	bhi.w	8010438 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe70:	4b28      	ldr	r3, [pc, #160]	@ (800ff14 <tcp_input+0x2bc>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	61fb      	str	r3, [r7, #28]
 800fe76:	e09d      	b.n	800ffb4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	7d1b      	ldrb	r3, [r3, #20]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d105      	bne.n	800fe8c <tcp_input+0x234>
 800fe80:	4b15      	ldr	r3, [pc, #84]	@ (800fed8 <tcp_input+0x280>)
 800fe82:	22fb      	movs	r2, #251	@ 0xfb
 800fe84:	4924      	ldr	r1, [pc, #144]	@ (800ff18 <tcp_input+0x2c0>)
 800fe86:	4816      	ldr	r0, [pc, #88]	@ (800fee0 <tcp_input+0x288>)
 800fe88:	f007 fd06 	bl	8017898 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	7d1b      	ldrb	r3, [r3, #20]
 800fe90:	2b0a      	cmp	r3, #10
 800fe92:	d105      	bne.n	800fea0 <tcp_input+0x248>
 800fe94:	4b10      	ldr	r3, [pc, #64]	@ (800fed8 <tcp_input+0x280>)
 800fe96:	22fc      	movs	r2, #252	@ 0xfc
 800fe98:	4920      	ldr	r1, [pc, #128]	@ (800ff1c <tcp_input+0x2c4>)
 800fe9a:	4811      	ldr	r0, [pc, #68]	@ (800fee0 <tcp_input+0x288>)
 800fe9c:	f007 fcfc 	bl	8017898 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	7d1b      	ldrb	r3, [r3, #20]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d105      	bne.n	800feb4 <tcp_input+0x25c>
 800fea8:	4b0b      	ldr	r3, [pc, #44]	@ (800fed8 <tcp_input+0x280>)
 800feaa:	22fd      	movs	r2, #253	@ 0xfd
 800feac:	491c      	ldr	r1, [pc, #112]	@ (800ff20 <tcp_input+0x2c8>)
 800feae:	480c      	ldr	r0, [pc, #48]	@ (800fee0 <tcp_input+0x288>)
 800feb0:	f007 fcf2 	bl	8017898 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	7a1b      	ldrb	r3, [r3, #8]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d033      	beq.n	800ff24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	7a1a      	ldrb	r2, [r3, #8]
 800fec0:	4b09      	ldr	r3, [pc, #36]	@ (800fee8 <tcp_input+0x290>)
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fec8:	3301      	adds	r3, #1
 800feca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fecc:	429a      	cmp	r2, r3
 800fece:	d029      	beq.n	800ff24 <tcp_input+0x2cc>
      prev = pcb;
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	61bb      	str	r3, [r7, #24]
      continue;
 800fed4:	e06b      	b.n	800ffae <tcp_input+0x356>
 800fed6:	bf00      	nop
 800fed8:	0801ac4c 	.word	0x0801ac4c
 800fedc:	0801ac80 	.word	0x0801ac80
 800fee0:	0801ac98 	.word	0x0801ac98
 800fee4:	2000f0c0 	.word	0x2000f0c0
 800fee8:	2000b944 	.word	0x2000b944
 800feec:	2000f0c4 	.word	0x2000f0c4
 800fef0:	2000f0c8 	.word	0x2000f0c8
 800fef4:	2000f0c6 	.word	0x2000f0c6
 800fef8:	0801acc0 	.word	0x0801acc0
 800fefc:	0801acd0 	.word	0x0801acd0
 800ff00:	0801acdc 	.word	0x0801acdc
 800ff04:	2000f0d0 	.word	0x2000f0d0
 800ff08:	2000f0d4 	.word	0x2000f0d4
 800ff0c:	2000f0dc 	.word	0x2000f0dc
 800ff10:	2000f0da 	.word	0x2000f0da
 800ff14:	2000f0a4 	.word	0x2000f0a4
 800ff18:	0801acfc 	.word	0x0801acfc
 800ff1c:	0801ad24 	.word	0x0801ad24
 800ff20:	0801ad50 	.word	0x0801ad50
    }

    if (pcb->remote_port == tcphdr->src &&
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	8b1a      	ldrh	r2, [r3, #24]
 800ff28:	4b72      	ldr	r3, [pc, #456]	@ (80100f4 <tcp_input+0x49c>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d13a      	bne.n	800ffaa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	8ada      	ldrh	r2, [r3, #22]
 800ff38:	4b6e      	ldr	r3, [pc, #440]	@ (80100f4 <tcp_input+0x49c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	885b      	ldrh	r3, [r3, #2]
 800ff3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d132      	bne.n	800ffaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	4b6b      	ldr	r3, [pc, #428]	@ (80100f8 <tcp_input+0x4a0>)
 800ff4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d12c      	bne.n	800ffaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	4b68      	ldr	r3, [pc, #416]	@ (80100f8 <tcp_input+0x4a0>)
 800ff56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d126      	bne.n	800ffaa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	69fa      	ldr	r2, [r7, #28]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d106      	bne.n	800ff74 <tcp_input+0x31c>
 800ff66:	4b65      	ldr	r3, [pc, #404]	@ (80100fc <tcp_input+0x4a4>)
 800ff68:	f240 120d 	movw	r2, #269	@ 0x10d
 800ff6c:	4964      	ldr	r1, [pc, #400]	@ (8010100 <tcp_input+0x4a8>)
 800ff6e:	4865      	ldr	r0, [pc, #404]	@ (8010104 <tcp_input+0x4ac>)
 800ff70:	f007 fc92 	bl	8017898 <iprintf>
      if (prev != NULL) {
 800ff74:	69bb      	ldr	r3, [r7, #24]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00a      	beq.n	800ff90 <tcp_input+0x338>
        prev->next = pcb->next;
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	68da      	ldr	r2, [r3, #12]
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ff82:	4b61      	ldr	r3, [pc, #388]	@ (8010108 <tcp_input+0x4b0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ff8a:	4a5f      	ldr	r2, [pc, #380]	@ (8010108 <tcp_input+0x4b0>)
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	69fa      	ldr	r2, [r7, #28]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d111      	bne.n	800ffbe <tcp_input+0x366>
 800ff9a:	4b58      	ldr	r3, [pc, #352]	@ (80100fc <tcp_input+0x4a4>)
 800ff9c:	f240 1215 	movw	r2, #277	@ 0x115
 800ffa0:	495a      	ldr	r1, [pc, #360]	@ (801010c <tcp_input+0x4b4>)
 800ffa2:	4858      	ldr	r0, [pc, #352]	@ (8010104 <tcp_input+0x4ac>)
 800ffa4:	f007 fc78 	bl	8017898 <iprintf>
      break;
 800ffa8:	e009      	b.n	800ffbe <tcp_input+0x366>
    }
    prev = pcb;
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	61fb      	str	r3, [r7, #28]
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	f47f af5e 	bne.w	800fe78 <tcp_input+0x220>
 800ffbc:	e000      	b.n	800ffc0 <tcp_input+0x368>
      break;
 800ffbe:	bf00      	nop
  }

  if (pcb == NULL) {
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f040 80aa 	bne.w	801011c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffc8:	4b51      	ldr	r3, [pc, #324]	@ (8010110 <tcp_input+0x4b8>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	e03f      	b.n	8010050 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	7d1b      	ldrb	r3, [r3, #20]
 800ffd4:	2b0a      	cmp	r3, #10
 800ffd6:	d006      	beq.n	800ffe6 <tcp_input+0x38e>
 800ffd8:	4b48      	ldr	r3, [pc, #288]	@ (80100fc <tcp_input+0x4a4>)
 800ffda:	f240 121f 	movw	r2, #287	@ 0x11f
 800ffde:	494d      	ldr	r1, [pc, #308]	@ (8010114 <tcp_input+0x4bc>)
 800ffe0:	4848      	ldr	r0, [pc, #288]	@ (8010104 <tcp_input+0x4ac>)
 800ffe2:	f007 fc59 	bl	8017898 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffe6:	69fb      	ldr	r3, [r7, #28]
 800ffe8:	7a1b      	ldrb	r3, [r3, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d009      	beq.n	8010002 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	7a1a      	ldrb	r2, [r3, #8]
 800fff2:	4b41      	ldr	r3, [pc, #260]	@ (80100f8 <tcp_input+0x4a0>)
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fffa:	3301      	adds	r3, #1
 800fffc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fffe:	429a      	cmp	r2, r3
 8010000:	d122      	bne.n	8010048 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010002:	69fb      	ldr	r3, [r7, #28]
 8010004:	8b1a      	ldrh	r2, [r3, #24]
 8010006:	4b3b      	ldr	r3, [pc, #236]	@ (80100f4 <tcp_input+0x49c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	881b      	ldrh	r3, [r3, #0]
 801000c:	b29b      	uxth	r3, r3
 801000e:	429a      	cmp	r2, r3
 8010010:	d11b      	bne.n	801004a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	8ada      	ldrh	r2, [r3, #22]
 8010016:	4b37      	ldr	r3, [pc, #220]	@ (80100f4 <tcp_input+0x49c>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	885b      	ldrh	r3, [r3, #2]
 801001c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801001e:	429a      	cmp	r2, r3
 8010020:	d113      	bne.n	801004a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	4b34      	ldr	r3, [pc, #208]	@ (80100f8 <tcp_input+0x4a0>)
 8010028:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801002a:	429a      	cmp	r2, r3
 801002c:	d10d      	bne.n	801004a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	4b31      	ldr	r3, [pc, #196]	@ (80100f8 <tcp_input+0x4a0>)
 8010034:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010036:	429a      	cmp	r2, r3
 8010038:	d107      	bne.n	801004a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801003a:	69f8      	ldr	r0, [r7, #28]
 801003c:	f000 fb56 	bl	80106ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fd fcc1 	bl	800d9c8 <pbuf_free>
        return;
 8010046:	e1fd      	b.n	8010444 <tcp_input+0x7ec>
        continue;
 8010048:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801004a:	69fb      	ldr	r3, [r7, #28]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	61fb      	str	r3, [r7, #28]
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1bc      	bne.n	800ffd0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010056:	2300      	movs	r3, #0
 8010058:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801005a:	4b2f      	ldr	r3, [pc, #188]	@ (8010118 <tcp_input+0x4c0>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	e02a      	b.n	80100b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	7a1b      	ldrb	r3, [r3, #8]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d00c      	beq.n	8010084 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	7a1a      	ldrb	r2, [r3, #8]
 801006e:	4b22      	ldr	r3, [pc, #136]	@ (80100f8 <tcp_input+0x4a0>)
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010076:	3301      	adds	r3, #1
 8010078:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801007a:	429a      	cmp	r2, r3
 801007c:	d002      	beq.n	8010084 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	61bb      	str	r3, [r7, #24]
        continue;
 8010082:	e016      	b.n	80100b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	8ada      	ldrh	r2, [r3, #22]
 8010088:	4b1a      	ldr	r3, [pc, #104]	@ (80100f4 <tcp_input+0x49c>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	885b      	ldrh	r3, [r3, #2]
 801008e:	b29b      	uxth	r3, r3
 8010090:	429a      	cmp	r2, r3
 8010092:	d10c      	bne.n	80100ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	4b17      	ldr	r3, [pc, #92]	@ (80100f8 <tcp_input+0x4a0>)
 801009a:	695b      	ldr	r3, [r3, #20]
 801009c:	429a      	cmp	r2, r3
 801009e:	d00f      	beq.n	80100c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00d      	beq.n	80100c2 <tcp_input+0x46a>
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d009      	beq.n	80100c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	617b      	str	r3, [r7, #20]
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1d1      	bne.n	8010062 <tcp_input+0x40a>
 80100be:	e000      	b.n	80100c2 <tcp_input+0x46a>
            break;
 80100c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d029      	beq.n	801011c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00a      	beq.n	80100e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	68da      	ldr	r2, [r3, #12]
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80100d6:	4b10      	ldr	r3, [pc, #64]	@ (8010118 <tcp_input+0x4c0>)
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80100de:	4a0e      	ldr	r2, [pc, #56]	@ (8010118 <tcp_input+0x4c0>)
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80100e4:	6978      	ldr	r0, [r7, #20]
 80100e6:	f000 fa03 	bl	80104f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7fd fc6c 	bl	800d9c8 <pbuf_free>
      return;
 80100f0:	e1a8      	b.n	8010444 <tcp_input+0x7ec>
 80100f2:	bf00      	nop
 80100f4:	2000f0c0 	.word	0x2000f0c0
 80100f8:	2000b944 	.word	0x2000b944
 80100fc:	0801ac4c 	.word	0x0801ac4c
 8010100:	0801ad78 	.word	0x0801ad78
 8010104:	0801ac98 	.word	0x0801ac98
 8010108:	2000f0a4 	.word	0x2000f0a4
 801010c:	0801ada4 	.word	0x0801ada4
 8010110:	2000f0a8 	.word	0x2000f0a8
 8010114:	0801add0 	.word	0x0801add0
 8010118:	2000f0a0 	.word	0x2000f0a0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	2b00      	cmp	r3, #0
 8010120:	f000 8158 	beq.w	80103d4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010124:	4b95      	ldr	r3, [pc, #596]	@ (801037c <tcp_input+0x724>)
 8010126:	2200      	movs	r2, #0
 8010128:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	891a      	ldrh	r2, [r3, #8]
 801012e:	4b93      	ldr	r3, [pc, #588]	@ (801037c <tcp_input+0x724>)
 8010130:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010132:	4a92      	ldr	r2, [pc, #584]	@ (801037c <tcp_input+0x724>)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010138:	4b91      	ldr	r3, [pc, #580]	@ (8010380 <tcp_input+0x728>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a8f      	ldr	r2, [pc, #572]	@ (801037c <tcp_input+0x724>)
 801013e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010140:	4b90      	ldr	r3, [pc, #576]	@ (8010384 <tcp_input+0x72c>)
 8010142:	2200      	movs	r2, #0
 8010144:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010146:	4b90      	ldr	r3, [pc, #576]	@ (8010388 <tcp_input+0x730>)
 8010148:	2200      	movs	r2, #0
 801014a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801014c:	4b8f      	ldr	r3, [pc, #572]	@ (801038c <tcp_input+0x734>)
 801014e:	2200      	movs	r2, #0
 8010150:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010152:	4b8f      	ldr	r3, [pc, #572]	@ (8010390 <tcp_input+0x738>)
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	f003 0308 	and.w	r3, r3, #8
 801015a:	2b00      	cmp	r3, #0
 801015c:	d006      	beq.n	801016c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7b5b      	ldrb	r3, [r3, #13]
 8010162:	f043 0301 	orr.w	r3, r3, #1
 8010166:	b2da      	uxtb	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010170:	2b00      	cmp	r3, #0
 8010172:	d017      	beq.n	80101a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010174:	69f8      	ldr	r0, [r7, #28]
 8010176:	f7ff f83d 	bl	800f1f4 <tcp_process_refused_data>
 801017a:	4603      	mov	r3, r0
 801017c:	f113 0f0d 	cmn.w	r3, #13
 8010180:	d007      	beq.n	8010192 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00c      	beq.n	80101a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801018a:	4b82      	ldr	r3, [pc, #520]	@ (8010394 <tcp_input+0x73c>)
 801018c:	881b      	ldrh	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d008      	beq.n	80101a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010196:	2b00      	cmp	r3, #0
 8010198:	f040 80e3 	bne.w	8010362 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801019c:	69f8      	ldr	r0, [r7, #28]
 801019e:	f003 fdff 	bl	8013da0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80101a2:	e0de      	b.n	8010362 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80101a4:	4a7c      	ldr	r2, [pc, #496]	@ (8010398 <tcp_input+0x740>)
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80101aa:	69f8      	ldr	r0, [r7, #28]
 80101ac:	f000 fb18 	bl	80107e0 <tcp_process>
 80101b0:	4603      	mov	r3, r0
 80101b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80101b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80101b8:	f113 0f0d 	cmn.w	r3, #13
 80101bc:	f000 80d3 	beq.w	8010366 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80101c0:	4b71      	ldr	r3, [pc, #452]	@ (8010388 <tcp_input+0x730>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0308 	and.w	r3, r3, #8
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d015      	beq.n	80101f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d008      	beq.n	80101e8 <tcp_input+0x590>
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101dc:	69fa      	ldr	r2, [r7, #28]
 80101de:	6912      	ldr	r2, [r2, #16]
 80101e0:	f06f 010d 	mvn.w	r1, #13
 80101e4:	4610      	mov	r0, r2
 80101e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101e8:	69f9      	ldr	r1, [r7, #28]
 80101ea:	486c      	ldr	r0, [pc, #432]	@ (801039c <tcp_input+0x744>)
 80101ec:	f7ff fbbc 	bl	800f968 <tcp_pcb_remove>
        tcp_free(pcb);
 80101f0:	69f8      	ldr	r0, [r7, #28]
 80101f2:	f7fd fea5 	bl	800df40 <tcp_free>
 80101f6:	e0da      	b.n	80103ae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80101fc:	4b63      	ldr	r3, [pc, #396]	@ (801038c <tcp_input+0x734>)
 80101fe:	881b      	ldrh	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d01d      	beq.n	8010240 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010204:	4b61      	ldr	r3, [pc, #388]	@ (801038c <tcp_input+0x734>)
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00a      	beq.n	801022a <tcp_input+0x5d2>
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801021a:	69fa      	ldr	r2, [r7, #28]
 801021c:	6910      	ldr	r0, [r2, #16]
 801021e:	89fa      	ldrh	r2, [r7, #14]
 8010220:	69f9      	ldr	r1, [r7, #28]
 8010222:	4798      	blx	r3
 8010224:	4603      	mov	r3, r0
 8010226:	74fb      	strb	r3, [r7, #19]
 8010228:	e001      	b.n	801022e <tcp_input+0x5d6>
 801022a:	2300      	movs	r3, #0
 801022c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801022e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010232:	f113 0f0d 	cmn.w	r3, #13
 8010236:	f000 8098 	beq.w	801036a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801023a:	4b54      	ldr	r3, [pc, #336]	@ (801038c <tcp_input+0x734>)
 801023c:	2200      	movs	r2, #0
 801023e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010240:	69f8      	ldr	r0, [r7, #28]
 8010242:	f000 f915 	bl	8010470 <tcp_input_delayed_close>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	f040 8090 	bne.w	801036e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801024e:	4b4d      	ldr	r3, [pc, #308]	@ (8010384 <tcp_input+0x72c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d041      	beq.n	80102da <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801025a:	2b00      	cmp	r3, #0
 801025c:	d006      	beq.n	801026c <tcp_input+0x614>
 801025e:	4b50      	ldr	r3, [pc, #320]	@ (80103a0 <tcp_input+0x748>)
 8010260:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010264:	494f      	ldr	r1, [pc, #316]	@ (80103a4 <tcp_input+0x74c>)
 8010266:	4850      	ldr	r0, [pc, #320]	@ (80103a8 <tcp_input+0x750>)
 8010268:	f007 fb16 	bl	8017898 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	8b5b      	ldrh	r3, [r3, #26]
 8010270:	f003 0310 	and.w	r3, r3, #16
 8010274:	2b00      	cmp	r3, #0
 8010276:	d008      	beq.n	801028a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010278:	4b42      	ldr	r3, [pc, #264]	@ (8010384 <tcp_input+0x72c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4618      	mov	r0, r3
 801027e:	f7fd fba3 	bl	800d9c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010282:	69f8      	ldr	r0, [r7, #28]
 8010284:	f7fe f9a0 	bl	800e5c8 <tcp_abort>
            goto aborted;
 8010288:	e091      	b.n	80103ae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00c      	beq.n	80102ae <tcp_input+0x656>
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	6918      	ldr	r0, [r3, #16]
 801029e:	4b39      	ldr	r3, [pc, #228]	@ (8010384 <tcp_input+0x72c>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	2300      	movs	r3, #0
 80102a4:	69f9      	ldr	r1, [r7, #28]
 80102a6:	47a0      	blx	r4
 80102a8:	4603      	mov	r3, r0
 80102aa:	74fb      	strb	r3, [r7, #19]
 80102ac:	e008      	b.n	80102c0 <tcp_input+0x668>
 80102ae:	4b35      	ldr	r3, [pc, #212]	@ (8010384 <tcp_input+0x72c>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	2300      	movs	r3, #0
 80102b4:	69f9      	ldr	r1, [r7, #28]
 80102b6:	2000      	movs	r0, #0
 80102b8:	f7ff f890 	bl	800f3dc <tcp_recv_null>
 80102bc:	4603      	mov	r3, r0
 80102be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80102c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102c4:	f113 0f0d 	cmn.w	r3, #13
 80102c8:	d053      	beq.n	8010372 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80102ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80102d2:	4b2c      	ldr	r3, [pc, #176]	@ (8010384 <tcp_input+0x72c>)
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80102da:	4b2b      	ldr	r3, [pc, #172]	@ (8010388 <tcp_input+0x730>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	f003 0320 	and.w	r3, r3, #32
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d030      	beq.n	8010348 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d009      	beq.n	8010302 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102f2:	7b5a      	ldrb	r2, [r3, #13]
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80102f8:	f042 0220 	orr.w	r2, r2, #32
 80102fc:	b2d2      	uxtb	r2, r2
 80102fe:	735a      	strb	r2, [r3, #13]
 8010300:	e022      	b.n	8010348 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010306:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801030a:	d005      	beq.n	8010318 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010310:	3301      	adds	r3, #1
 8010312:	b29a      	uxth	r2, r3
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00b      	beq.n	801033a <tcp_input+0x6e2>
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	6918      	ldr	r0, [r3, #16]
 801032c:	2300      	movs	r3, #0
 801032e:	2200      	movs	r2, #0
 8010330:	69f9      	ldr	r1, [r7, #28]
 8010332:	47a0      	blx	r4
 8010334:	4603      	mov	r3, r0
 8010336:	74fb      	strb	r3, [r7, #19]
 8010338:	e001      	b.n	801033e <tcp_input+0x6e6>
 801033a:	2300      	movs	r3, #0
 801033c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801033e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010342:	f113 0f0d 	cmn.w	r3, #13
 8010346:	d016      	beq.n	8010376 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010348:	4b13      	ldr	r3, [pc, #76]	@ (8010398 <tcp_input+0x740>)
 801034a:	2200      	movs	r2, #0
 801034c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801034e:	69f8      	ldr	r0, [r7, #28]
 8010350:	f000 f88e 	bl	8010470 <tcp_input_delayed_close>
 8010354:	4603      	mov	r3, r0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d128      	bne.n	80103ac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801035a:	69f8      	ldr	r0, [r7, #28]
 801035c:	f002 ff1a 	bl	8013194 <tcp_output>
 8010360:	e025      	b.n	80103ae <tcp_input+0x756>
        goto aborted;
 8010362:	bf00      	nop
 8010364:	e023      	b.n	80103ae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010366:	bf00      	nop
 8010368:	e021      	b.n	80103ae <tcp_input+0x756>
              goto aborted;
 801036a:	bf00      	nop
 801036c:	e01f      	b.n	80103ae <tcp_input+0x756>
          goto aborted;
 801036e:	bf00      	nop
 8010370:	e01d      	b.n	80103ae <tcp_input+0x756>
            goto aborted;
 8010372:	bf00      	nop
 8010374:	e01b      	b.n	80103ae <tcp_input+0x756>
              goto aborted;
 8010376:	bf00      	nop
 8010378:	e019      	b.n	80103ae <tcp_input+0x756>
 801037a:	bf00      	nop
 801037c:	2000f0b0 	.word	0x2000f0b0
 8010380:	2000f0c0 	.word	0x2000f0c0
 8010384:	2000f0e0 	.word	0x2000f0e0
 8010388:	2000f0dd 	.word	0x2000f0dd
 801038c:	2000f0d8 	.word	0x2000f0d8
 8010390:	2000f0dc 	.word	0x2000f0dc
 8010394:	2000f0da 	.word	0x2000f0da
 8010398:	2000f0e4 	.word	0x2000f0e4
 801039c:	2000f0a4 	.word	0x2000f0a4
 80103a0:	0801ac4c 	.word	0x0801ac4c
 80103a4:	0801ae00 	.word	0x0801ae00
 80103a8:	0801ac98 	.word	0x0801ac98
          goto aborted;
 80103ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80103ae:	4b27      	ldr	r3, [pc, #156]	@ (801044c <tcp_input+0x7f4>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80103b4:	4b26      	ldr	r3, [pc, #152]	@ (8010450 <tcp_input+0x7f8>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80103ba:	4b26      	ldr	r3, [pc, #152]	@ (8010454 <tcp_input+0x7fc>)
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d03f      	beq.n	8010442 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80103c2:	4b24      	ldr	r3, [pc, #144]	@ (8010454 <tcp_input+0x7fc>)
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fd fafe 	bl	800d9c8 <pbuf_free>
      inseg.p = NULL;
 80103cc:	4b21      	ldr	r3, [pc, #132]	@ (8010454 <tcp_input+0x7fc>)
 80103ce:	2200      	movs	r2, #0
 80103d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80103d2:	e036      	b.n	8010442 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80103d4:	4b20      	ldr	r3, [pc, #128]	@ (8010458 <tcp_input+0x800>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	899b      	ldrh	r3, [r3, #12]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fb fecb 	bl	800c178 <lwip_htons>
 80103e2:	4603      	mov	r3, r0
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	f003 0304 	and.w	r3, r3, #4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d118      	bne.n	8010420 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103ee:	4b1b      	ldr	r3, [pc, #108]	@ (801045c <tcp_input+0x804>)
 80103f0:	6819      	ldr	r1, [r3, #0]
 80103f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010460 <tcp_input+0x808>)
 80103f4:	881b      	ldrh	r3, [r3, #0]
 80103f6:	461a      	mov	r2, r3
 80103f8:	4b1a      	ldr	r3, [pc, #104]	@ (8010464 <tcp_input+0x80c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103fe:	4b16      	ldr	r3, [pc, #88]	@ (8010458 <tcp_input+0x800>)
 8010400:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010402:	885b      	ldrh	r3, [r3, #2]
 8010404:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010406:	4a14      	ldr	r2, [pc, #80]	@ (8010458 <tcp_input+0x800>)
 8010408:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801040a:	8812      	ldrh	r2, [r2, #0]
 801040c:	b292      	uxth	r2, r2
 801040e:	9202      	str	r2, [sp, #8]
 8010410:	9301      	str	r3, [sp, #4]
 8010412:	4b15      	ldr	r3, [pc, #84]	@ (8010468 <tcp_input+0x810>)
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	4b15      	ldr	r3, [pc, #84]	@ (801046c <tcp_input+0x814>)
 8010418:	4602      	mov	r2, r0
 801041a:	2000      	movs	r0, #0
 801041c:	f003 fc6e 	bl	8013cfc <tcp_rst>
    pbuf_free(p);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7fd fad1 	bl	800d9c8 <pbuf_free>
  return;
 8010426:	e00c      	b.n	8010442 <tcp_input+0x7ea>
    goto dropped;
 8010428:	bf00      	nop
 801042a:	e006      	b.n	801043a <tcp_input+0x7e2>
    goto dropped;
 801042c:	bf00      	nop
 801042e:	e004      	b.n	801043a <tcp_input+0x7e2>
    goto dropped;
 8010430:	bf00      	nop
 8010432:	e002      	b.n	801043a <tcp_input+0x7e2>
      goto dropped;
 8010434:	bf00      	nop
 8010436:	e000      	b.n	801043a <tcp_input+0x7e2>
      goto dropped;
 8010438:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f7fd fac4 	bl	800d9c8 <pbuf_free>
 8010440:	e000      	b.n	8010444 <tcp_input+0x7ec>
  return;
 8010442:	bf00      	nop
}
 8010444:	3724      	adds	r7, #36	@ 0x24
 8010446:	46bd      	mov	sp, r7
 8010448:	bd90      	pop	{r4, r7, pc}
 801044a:	bf00      	nop
 801044c:	2000f0e4 	.word	0x2000f0e4
 8010450:	2000f0e0 	.word	0x2000f0e0
 8010454:	2000f0b0 	.word	0x2000f0b0
 8010458:	2000f0c0 	.word	0x2000f0c0
 801045c:	2000f0d4 	.word	0x2000f0d4
 8010460:	2000f0da 	.word	0x2000f0da
 8010464:	2000f0d0 	.word	0x2000f0d0
 8010468:	2000b954 	.word	0x2000b954
 801046c:	2000b958 	.word	0x2000b958

08010470 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <tcp_input_delayed_close+0x1c>
 801047e:	4b17      	ldr	r3, [pc, #92]	@ (80104dc <tcp_input_delayed_close+0x6c>)
 8010480:	f240 225a 	movw	r2, #602	@ 0x25a
 8010484:	4916      	ldr	r1, [pc, #88]	@ (80104e0 <tcp_input_delayed_close+0x70>)
 8010486:	4817      	ldr	r0, [pc, #92]	@ (80104e4 <tcp_input_delayed_close+0x74>)
 8010488:	f007 fa06 	bl	8017898 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801048c:	4b16      	ldr	r3, [pc, #88]	@ (80104e8 <tcp_input_delayed_close+0x78>)
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	f003 0310 	and.w	r3, r3, #16
 8010494:	2b00      	cmp	r3, #0
 8010496:	d01c      	beq.n	80104d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	8b5b      	ldrh	r3, [r3, #26]
 801049c:	f003 0310 	and.w	r3, r3, #16
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10d      	bne.n	80104c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d008      	beq.n	80104c0 <tcp_input_delayed_close+0x50>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	6912      	ldr	r2, [r2, #16]
 80104b8:	f06f 010e 	mvn.w	r1, #14
 80104bc:	4610      	mov	r0, r2
 80104be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80104c0:	6879      	ldr	r1, [r7, #4]
 80104c2:	480a      	ldr	r0, [pc, #40]	@ (80104ec <tcp_input_delayed_close+0x7c>)
 80104c4:	f7ff fa50 	bl	800f968 <tcp_pcb_remove>
    tcp_free(pcb);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7fd fd39 	bl	800df40 <tcp_free>
    return 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e000      	b.n	80104d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0801ac4c 	.word	0x0801ac4c
 80104e0:	0801ae1c 	.word	0x0801ae1c
 80104e4:	0801ac98 	.word	0x0801ac98
 80104e8:	2000f0dd 	.word	0x2000f0dd
 80104ec:	2000f0a4 	.word	0x2000f0a4

080104f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80104f0:	b590      	push	{r4, r7, lr}
 80104f2:	b08b      	sub	sp, #44	@ 0x2c
 80104f4:	af04      	add	r7, sp, #16
 80104f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80104f8:	4b6f      	ldr	r3, [pc, #444]	@ (80106b8 <tcp_listen_input+0x1c8>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 80d2 	bne.w	80106aa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d106      	bne.n	801051a <tcp_listen_input+0x2a>
 801050c:	4b6b      	ldr	r3, [pc, #428]	@ (80106bc <tcp_listen_input+0x1cc>)
 801050e:	f240 2281 	movw	r2, #641	@ 0x281
 8010512:	496b      	ldr	r1, [pc, #428]	@ (80106c0 <tcp_listen_input+0x1d0>)
 8010514:	486b      	ldr	r0, [pc, #428]	@ (80106c4 <tcp_listen_input+0x1d4>)
 8010516:	f007 f9bf 	bl	8017898 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801051a:	4b67      	ldr	r3, [pc, #412]	@ (80106b8 <tcp_listen_input+0x1c8>)
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	f003 0310 	and.w	r3, r3, #16
 8010522:	2b00      	cmp	r3, #0
 8010524:	d019      	beq.n	801055a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010526:	4b68      	ldr	r3, [pc, #416]	@ (80106c8 <tcp_listen_input+0x1d8>)
 8010528:	6819      	ldr	r1, [r3, #0]
 801052a:	4b68      	ldr	r3, [pc, #416]	@ (80106cc <tcp_listen_input+0x1dc>)
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	461a      	mov	r2, r3
 8010530:	4b67      	ldr	r3, [pc, #412]	@ (80106d0 <tcp_listen_input+0x1e0>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010536:	4b67      	ldr	r3, [pc, #412]	@ (80106d4 <tcp_listen_input+0x1e4>)
 8010538:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801053a:	885b      	ldrh	r3, [r3, #2]
 801053c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801053e:	4a65      	ldr	r2, [pc, #404]	@ (80106d4 <tcp_listen_input+0x1e4>)
 8010540:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010542:	8812      	ldrh	r2, [r2, #0]
 8010544:	b292      	uxth	r2, r2
 8010546:	9202      	str	r2, [sp, #8]
 8010548:	9301      	str	r3, [sp, #4]
 801054a:	4b63      	ldr	r3, [pc, #396]	@ (80106d8 <tcp_listen_input+0x1e8>)
 801054c:	9300      	str	r3, [sp, #0]
 801054e:	4b63      	ldr	r3, [pc, #396]	@ (80106dc <tcp_listen_input+0x1ec>)
 8010550:	4602      	mov	r2, r0
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f003 fbd2 	bl	8013cfc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010558:	e0a9      	b.n	80106ae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801055a:	4b57      	ldr	r3, [pc, #348]	@ (80106b8 <tcp_listen_input+0x1c8>)
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	f003 0302 	and.w	r3, r3, #2
 8010562:	2b00      	cmp	r3, #0
 8010564:	f000 80a3 	beq.w	80106ae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d5b      	ldrb	r3, [r3, #21]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff f859 	bl	800f624 <tcp_alloc>
 8010572:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d111      	bne.n	801059e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00a      	beq.n	8010598 <tcp_listen_input+0xa8>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	699b      	ldr	r3, [r3, #24]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	6910      	ldr	r0, [r2, #16]
 801058a:	f04f 32ff 	mov.w	r2, #4294967295
 801058e:	2100      	movs	r1, #0
 8010590:	4798      	blx	r3
 8010592:	4603      	mov	r3, r0
 8010594:	73bb      	strb	r3, [r7, #14]
      return;
 8010596:	e08b      	b.n	80106b0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010598:	23f0      	movs	r3, #240	@ 0xf0
 801059a:	73bb      	strb	r3, [r7, #14]
      return;
 801059c:	e088      	b.n	80106b0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801059e:	4b50      	ldr	r3, [pc, #320]	@ (80106e0 <tcp_listen_input+0x1f0>)
 80105a0:	695a      	ldr	r2, [r3, #20]
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80105a6:	4b4e      	ldr	r3, [pc, #312]	@ (80106e0 <tcp_listen_input+0x1f0>)
 80105a8:	691a      	ldr	r2, [r3, #16]
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	8ada      	ldrh	r2, [r3, #22]
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80105b6:	4b47      	ldr	r3, [pc, #284]	@ (80106d4 <tcp_listen_input+0x1e4>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	b29a      	uxth	r2, r3
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2203      	movs	r2, #3
 80105c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80105c8:	4b41      	ldr	r3, [pc, #260]	@ (80106d0 <tcp_listen_input+0x1e0>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	1c5a      	adds	r2, r3, #1
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80105da:	6978      	ldr	r0, [r7, #20]
 80105dc:	f7ff fa58 	bl	800fa90 <tcp_next_iss>
 80105e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	693a      	ldr	r2, [r7, #16]
 80105e6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	693a      	ldr	r2, [r7, #16]
 80105ec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80105fa:	4b35      	ldr	r3, [pc, #212]	@ (80106d0 <tcp_listen_input+0x1e0>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	1e5a      	subs	r2, r3, #1
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	691a      	ldr	r2, [r3, #16]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	7a5b      	ldrb	r3, [r3, #9]
 8010616:	f003 030c 	and.w	r3, r3, #12
 801061a:	b2da      	uxtb	r2, r3
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7a1a      	ldrb	r2, [r3, #8]
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010628:	4b2e      	ldr	r3, [pc, #184]	@ (80106e4 <tcp_listen_input+0x1f4>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	60da      	str	r2, [r3, #12]
 8010630:	4a2c      	ldr	r2, [pc, #176]	@ (80106e4 <tcp_listen_input+0x1f4>)
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	6013      	str	r3, [r2, #0]
 8010636:	f003 fd23 	bl	8014080 <tcp_timer_needed>
 801063a:	4b2b      	ldr	r3, [pc, #172]	@ (80106e8 <tcp_listen_input+0x1f8>)
 801063c:	2201      	movs	r2, #1
 801063e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010640:	6978      	ldr	r0, [r7, #20]
 8010642:	f001 fd8b 	bl	801215c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010646:	4b23      	ldr	r3, [pc, #140]	@ (80106d4 <tcp_listen_input+0x1e4>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	89db      	ldrh	r3, [r3, #14]
 801064c:	b29a      	uxth	r2, r3
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	3304      	adds	r3, #4
 8010668:	4618      	mov	r0, r3
 801066a:	f005 fc47 	bl	8015efc <ip4_route>
 801066e:	4601      	mov	r1, r0
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	3304      	adds	r3, #4
 8010674:	461a      	mov	r2, r3
 8010676:	4620      	mov	r0, r4
 8010678:	f7ff fa30 	bl	800fadc <tcp_eff_send_mss_netif>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010684:	2112      	movs	r1, #18
 8010686:	6978      	ldr	r0, [r7, #20]
 8010688:	f002 fc96 	bl	8012fb8 <tcp_enqueue_flags>
 801068c:	4603      	mov	r3, r0
 801068e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010698:	2100      	movs	r1, #0
 801069a:	6978      	ldr	r0, [r7, #20]
 801069c:	f7fd fed6 	bl	800e44c <tcp_abandon>
      return;
 80106a0:	e006      	b.n	80106b0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80106a2:	6978      	ldr	r0, [r7, #20]
 80106a4:	f002 fd76 	bl	8013194 <tcp_output>
  return;
 80106a8:	e001      	b.n	80106ae <tcp_listen_input+0x1be>
    return;
 80106aa:	bf00      	nop
 80106ac:	e000      	b.n	80106b0 <tcp_listen_input+0x1c0>
  return;
 80106ae:	bf00      	nop
}
 80106b0:	371c      	adds	r7, #28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd90      	pop	{r4, r7, pc}
 80106b6:	bf00      	nop
 80106b8:	2000f0dc 	.word	0x2000f0dc
 80106bc:	0801ac4c 	.word	0x0801ac4c
 80106c0:	0801ae44 	.word	0x0801ae44
 80106c4:	0801ac98 	.word	0x0801ac98
 80106c8:	2000f0d4 	.word	0x2000f0d4
 80106cc:	2000f0da 	.word	0x2000f0da
 80106d0:	2000f0d0 	.word	0x2000f0d0
 80106d4:	2000f0c0 	.word	0x2000f0c0
 80106d8:	2000b954 	.word	0x2000b954
 80106dc:	2000b958 	.word	0x2000b958
 80106e0:	2000b944 	.word	0x2000b944
 80106e4:	2000f0a4 	.word	0x2000f0a4
 80106e8:	2000f0ac 	.word	0x2000f0ac

080106ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af04      	add	r7, sp, #16
 80106f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80106f4:	4b2f      	ldr	r3, [pc, #188]	@ (80107b4 <tcp_timewait_input+0xc8>)
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	f003 0304 	and.w	r3, r3, #4
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d153      	bne.n	80107a8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d106      	bne.n	8010714 <tcp_timewait_input+0x28>
 8010706:	4b2c      	ldr	r3, [pc, #176]	@ (80107b8 <tcp_timewait_input+0xcc>)
 8010708:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801070c:	492b      	ldr	r1, [pc, #172]	@ (80107bc <tcp_timewait_input+0xd0>)
 801070e:	482c      	ldr	r0, [pc, #176]	@ (80107c0 <tcp_timewait_input+0xd4>)
 8010710:	f007 f8c2 	bl	8017898 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010714:	4b27      	ldr	r3, [pc, #156]	@ (80107b4 <tcp_timewait_input+0xc8>)
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	f003 0302 	and.w	r3, r3, #2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d02a      	beq.n	8010776 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010720:	4b28      	ldr	r3, [pc, #160]	@ (80107c4 <tcp_timewait_input+0xd8>)
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010728:	1ad3      	subs	r3, r2, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	db2d      	blt.n	801078a <tcp_timewait_input+0x9e>
 801072e:	4b25      	ldr	r3, [pc, #148]	@ (80107c4 <tcp_timewait_input+0xd8>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010736:	6879      	ldr	r1, [r7, #4]
 8010738:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801073a:	440b      	add	r3, r1
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	dc23      	bgt.n	801078a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010742:	4b21      	ldr	r3, [pc, #132]	@ (80107c8 <tcp_timewait_input+0xdc>)
 8010744:	6819      	ldr	r1, [r3, #0]
 8010746:	4b21      	ldr	r3, [pc, #132]	@ (80107cc <tcp_timewait_input+0xe0>)
 8010748:	881b      	ldrh	r3, [r3, #0]
 801074a:	461a      	mov	r2, r3
 801074c:	4b1d      	ldr	r3, [pc, #116]	@ (80107c4 <tcp_timewait_input+0xd8>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010752:	4b1f      	ldr	r3, [pc, #124]	@ (80107d0 <tcp_timewait_input+0xe4>)
 8010754:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010756:	885b      	ldrh	r3, [r3, #2]
 8010758:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801075a:	4a1d      	ldr	r2, [pc, #116]	@ (80107d0 <tcp_timewait_input+0xe4>)
 801075c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801075e:	8812      	ldrh	r2, [r2, #0]
 8010760:	b292      	uxth	r2, r2
 8010762:	9202      	str	r2, [sp, #8]
 8010764:	9301      	str	r3, [sp, #4]
 8010766:	4b1b      	ldr	r3, [pc, #108]	@ (80107d4 <tcp_timewait_input+0xe8>)
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	4b1b      	ldr	r3, [pc, #108]	@ (80107d8 <tcp_timewait_input+0xec>)
 801076c:	4602      	mov	r2, r0
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f003 fac4 	bl	8013cfc <tcp_rst>
      return;
 8010774:	e01b      	b.n	80107ae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010776:	4b0f      	ldr	r3, [pc, #60]	@ (80107b4 <tcp_timewait_input+0xc8>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	d003      	beq.n	801078a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010782:	4b16      	ldr	r3, [pc, #88]	@ (80107dc <tcp_timewait_input+0xf0>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801078a:	4b10      	ldr	r3, [pc, #64]	@ (80107cc <tcp_timewait_input+0xe0>)
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00c      	beq.n	80107ac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	8b5b      	ldrh	r3, [r3, #26]
 8010796:	f043 0302 	orr.w	r3, r3, #2
 801079a:	b29a      	uxth	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f002 fcf7 	bl	8013194 <tcp_output>
  }
  return;
 80107a6:	e001      	b.n	80107ac <tcp_timewait_input+0xc0>
    return;
 80107a8:	bf00      	nop
 80107aa:	e000      	b.n	80107ae <tcp_timewait_input+0xc2>
  return;
 80107ac:	bf00      	nop
}
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	2000f0dc 	.word	0x2000f0dc
 80107b8:	0801ac4c 	.word	0x0801ac4c
 80107bc:	0801ae64 	.word	0x0801ae64
 80107c0:	0801ac98 	.word	0x0801ac98
 80107c4:	2000f0d0 	.word	0x2000f0d0
 80107c8:	2000f0d4 	.word	0x2000f0d4
 80107cc:	2000f0da 	.word	0x2000f0da
 80107d0:	2000f0c0 	.word	0x2000f0c0
 80107d4:	2000b954 	.word	0x2000b954
 80107d8:	2000b958 	.word	0x2000b958
 80107dc:	2000f098 	.word	0x2000f098

080107e0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80107e0:	b590      	push	{r4, r7, lr}
 80107e2:	b08d      	sub	sp, #52	@ 0x34
 80107e4:	af04      	add	r7, sp, #16
 80107e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d106      	bne.n	8010804 <tcp_process+0x24>
 80107f6:	4b9d      	ldr	r3, [pc, #628]	@ (8010a6c <tcp_process+0x28c>)
 80107f8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80107fc:	499c      	ldr	r1, [pc, #624]	@ (8010a70 <tcp_process+0x290>)
 80107fe:	489d      	ldr	r0, [pc, #628]	@ (8010a74 <tcp_process+0x294>)
 8010800:	f007 f84a 	bl	8017898 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010804:	4b9c      	ldr	r3, [pc, #624]	@ (8010a78 <tcp_process+0x298>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	f003 0304 	and.w	r3, r3, #4
 801080c:	2b00      	cmp	r3, #0
 801080e:	d04e      	beq.n	80108ae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	7d1b      	ldrb	r3, [r3, #20]
 8010814:	2b02      	cmp	r3, #2
 8010816:	d108      	bne.n	801082a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801081c:	4b97      	ldr	r3, [pc, #604]	@ (8010a7c <tcp_process+0x29c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	429a      	cmp	r2, r3
 8010822:	d123      	bne.n	801086c <tcp_process+0x8c>
        acceptable = 1;
 8010824:	2301      	movs	r3, #1
 8010826:	76fb      	strb	r3, [r7, #27]
 8010828:	e020      	b.n	801086c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801082e:	4b94      	ldr	r3, [pc, #592]	@ (8010a80 <tcp_process+0x2a0>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	429a      	cmp	r2, r3
 8010834:	d102      	bne.n	801083c <tcp_process+0x5c>
        acceptable = 1;
 8010836:	2301      	movs	r3, #1
 8010838:	76fb      	strb	r3, [r7, #27]
 801083a:	e017      	b.n	801086c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801083c:	4b90      	ldr	r3, [pc, #576]	@ (8010a80 <tcp_process+0x2a0>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	2b00      	cmp	r3, #0
 8010848:	db10      	blt.n	801086c <tcp_process+0x8c>
 801084a:	4b8d      	ldr	r3, [pc, #564]	@ (8010a80 <tcp_process+0x2a0>)
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010852:	6879      	ldr	r1, [r7, #4]
 8010854:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010856:	440b      	add	r3, r1
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	2b00      	cmp	r3, #0
 801085c:	dc06      	bgt.n	801086c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	8b5b      	ldrh	r3, [r3, #26]
 8010862:	f043 0302 	orr.w	r3, r3, #2
 8010866:	b29a      	uxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801086c:	7efb      	ldrb	r3, [r7, #27]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01b      	beq.n	80108aa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	7d1b      	ldrb	r3, [r3, #20]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <tcp_process+0xa8>
 801087a:	4b7c      	ldr	r3, [pc, #496]	@ (8010a6c <tcp_process+0x28c>)
 801087c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010880:	4980      	ldr	r1, [pc, #512]	@ (8010a84 <tcp_process+0x2a4>)
 8010882:	487c      	ldr	r0, [pc, #496]	@ (8010a74 <tcp_process+0x294>)
 8010884:	f007 f808 	bl	8017898 <iprintf>
      recv_flags |= TF_RESET;
 8010888:	4b7f      	ldr	r3, [pc, #508]	@ (8010a88 <tcp_process+0x2a8>)
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	f043 0308 	orr.w	r3, r3, #8
 8010890:	b2da      	uxtb	r2, r3
 8010892:	4b7d      	ldr	r3, [pc, #500]	@ (8010a88 <tcp_process+0x2a8>)
 8010894:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	8b5b      	ldrh	r3, [r3, #26]
 801089a:	f023 0301 	bic.w	r3, r3, #1
 801089e:	b29a      	uxth	r2, r3
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80108a4:	f06f 030d 	mvn.w	r3, #13
 80108a8:	e37a      	b.n	8010fa0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e378      	b.n	8010fa0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80108ae:	4b72      	ldr	r3, [pc, #456]	@ (8010a78 <tcp_process+0x298>)
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f003 0302 	and.w	r3, r3, #2
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d010      	beq.n	80108dc <tcp_process+0xfc>
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	7d1b      	ldrb	r3, [r3, #20]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d00c      	beq.n	80108dc <tcp_process+0xfc>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	7d1b      	ldrb	r3, [r3, #20]
 80108c6:	2b03      	cmp	r3, #3
 80108c8:	d008      	beq.n	80108dc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	8b5b      	ldrh	r3, [r3, #26]
 80108ce:	f043 0302 	orr.w	r3, r3, #2
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80108d8:	2300      	movs	r3, #0
 80108da:	e361      	b.n	8010fa0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	8b5b      	ldrh	r3, [r3, #26]
 80108e0:	f003 0310 	and.w	r3, r3, #16
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80108e8:	4b68      	ldr	r3, [pc, #416]	@ (8010a8c <tcp_process+0x2ac>)
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f001 fc2b 	bl	801215c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	7d1b      	ldrb	r3, [r3, #20]
 801090a:	3b02      	subs	r3, #2
 801090c:	2b07      	cmp	r3, #7
 801090e:	f200 8337 	bhi.w	8010f80 <tcp_process+0x7a0>
 8010912:	a201      	add	r2, pc, #4	@ (adr r2, 8010918 <tcp_process+0x138>)
 8010914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010918:	08010939 	.word	0x08010939
 801091c:	08010b69 	.word	0x08010b69
 8010920:	08010ce1 	.word	0x08010ce1
 8010924:	08010d0b 	.word	0x08010d0b
 8010928:	08010e2f 	.word	0x08010e2f
 801092c:	08010ce1 	.word	0x08010ce1
 8010930:	08010ebb 	.word	0x08010ebb
 8010934:	08010f4b 	.word	0x08010f4b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010938:	4b4f      	ldr	r3, [pc, #316]	@ (8010a78 <tcp_process+0x298>)
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	f003 0310 	and.w	r3, r3, #16
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 80e4 	beq.w	8010b0e <tcp_process+0x32e>
 8010946:	4b4c      	ldr	r3, [pc, #304]	@ (8010a78 <tcp_process+0x298>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0302 	and.w	r3, r3, #2
 801094e:	2b00      	cmp	r3, #0
 8010950:	f000 80dd 	beq.w	8010b0e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	4b48      	ldr	r3, [pc, #288]	@ (8010a7c <tcp_process+0x29c>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	429a      	cmp	r2, r3
 8010960:	f040 80d5 	bne.w	8010b0e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010964:	4b46      	ldr	r3, [pc, #280]	@ (8010a80 <tcp_process+0x2a0>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010976:	4b41      	ldr	r3, [pc, #260]	@ (8010a7c <tcp_process+0x29c>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801097e:	4b44      	ldr	r3, [pc, #272]	@ (8010a90 <tcp_process+0x2b0>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	89db      	ldrh	r3, [r3, #14]
 8010984:	b29a      	uxth	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010998:	4b39      	ldr	r3, [pc, #228]	@ (8010a80 <tcp_process+0x2a0>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	1e5a      	subs	r2, r3, #1
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2204      	movs	r2, #4
 80109a6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	3304      	adds	r3, #4
 80109b0:	4618      	mov	r0, r3
 80109b2:	f005 faa3 	bl	8015efc <ip4_route>
 80109b6:	4601      	mov	r1, r0
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	3304      	adds	r3, #4
 80109bc:	461a      	mov	r2, r3
 80109be:	4620      	mov	r0, r4
 80109c0:	f7ff f88c 	bl	800fadc <tcp_eff_send_mss_netif>
 80109c4:	4603      	mov	r3, r0
 80109c6:	461a      	mov	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109d0:	009a      	lsls	r2, r3, #2
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80109dc:	428b      	cmp	r3, r1
 80109de:	bf38      	it	cc
 80109e0:	460b      	movcc	r3, r1
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d204      	bcs.n	80109f0 <tcp_process+0x210>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	e00d      	b.n	8010a0c <tcp_process+0x22c>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109f4:	005b      	lsls	r3, r3, #1
 80109f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d904      	bls.n	8010a08 <tcp_process+0x228>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	e001      	b.n	8010a0c <tcp_process+0x22c>
 8010a08:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d106      	bne.n	8010a2a <tcp_process+0x24a>
 8010a1c:	4b13      	ldr	r3, [pc, #76]	@ (8010a6c <tcp_process+0x28c>)
 8010a1e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010a22:	491c      	ldr	r1, [pc, #112]	@ (8010a94 <tcp_process+0x2b4>)
 8010a24:	4813      	ldr	r0, [pc, #76]	@ (8010a74 <tcp_process+0x294>)
 8010a26:	f006 ff37 	bl	8017898 <iprintf>
        --pcb->snd_queuelen;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010a30:	3b01      	subs	r3, #1
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a3e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d12a      	bne.n	8010a9c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a4a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <tcp_process+0x280>
 8010a52:	4b06      	ldr	r3, [pc, #24]	@ (8010a6c <tcp_process+0x28c>)
 8010a54:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010a58:	490f      	ldr	r1, [pc, #60]	@ (8010a98 <tcp_process+0x2b8>)
 8010a5a:	4806      	ldr	r0, [pc, #24]	@ (8010a74 <tcp_process+0x294>)
 8010a5c:	f006 ff1c 	bl	8017898 <iprintf>
          pcb->unsent = rseg->next;
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010a68:	e01c      	b.n	8010aa4 <tcp_process+0x2c4>
 8010a6a:	bf00      	nop
 8010a6c:	0801ac4c 	.word	0x0801ac4c
 8010a70:	0801ae84 	.word	0x0801ae84
 8010a74:	0801ac98 	.word	0x0801ac98
 8010a78:	2000f0dc 	.word	0x2000f0dc
 8010a7c:	2000f0d4 	.word	0x2000f0d4
 8010a80:	2000f0d0 	.word	0x2000f0d0
 8010a84:	0801aea0 	.word	0x0801aea0
 8010a88:	2000f0dd 	.word	0x2000f0dd
 8010a8c:	2000f098 	.word	0x2000f098
 8010a90:	2000f0c0 	.word	0x2000f0c0
 8010a94:	0801aec0 	.word	0x0801aec0
 8010a98:	0801aed8 	.word	0x0801aed8
        } else {
          pcb->unacked = rseg->next;
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010aa4:	69f8      	ldr	r0, [r7, #28]
 8010aa6:	f7fe fc36 	bl	800f316 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d104      	bne.n	8010abc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ab8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010aba:	e006      	b.n	8010aca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00a      	beq.n	8010aea <tcp_process+0x30a>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	6910      	ldr	r0, [r2, #16]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	4798      	blx	r3
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	76bb      	strb	r3, [r7, #26]
 8010ae8:	e001      	b.n	8010aee <tcp_process+0x30e>
 8010aea:	2300      	movs	r3, #0
 8010aec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010aee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010af2:	f113 0f0d 	cmn.w	r3, #13
 8010af6:	d102      	bne.n	8010afe <tcp_process+0x31e>
          return ERR_ABRT;
 8010af8:	f06f 030c 	mvn.w	r3, #12
 8010afc:	e250      	b.n	8010fa0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8b5b      	ldrh	r3, [r3, #26]
 8010b02:	f043 0302 	orr.w	r3, r3, #2
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010b0c:	e23a      	b.n	8010f84 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010b0e:	4b98      	ldr	r3, [pc, #608]	@ (8010d70 <tcp_process+0x590>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	f003 0310 	and.w	r3, r3, #16
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	f000 8234 	beq.w	8010f84 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b1c:	4b95      	ldr	r3, [pc, #596]	@ (8010d74 <tcp_process+0x594>)
 8010b1e:	6819      	ldr	r1, [r3, #0]
 8010b20:	4b95      	ldr	r3, [pc, #596]	@ (8010d78 <tcp_process+0x598>)
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	461a      	mov	r2, r3
 8010b26:	4b95      	ldr	r3, [pc, #596]	@ (8010d7c <tcp_process+0x59c>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b2c:	4b94      	ldr	r3, [pc, #592]	@ (8010d80 <tcp_process+0x5a0>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b30:	885b      	ldrh	r3, [r3, #2]
 8010b32:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b34:	4a92      	ldr	r2, [pc, #584]	@ (8010d80 <tcp_process+0x5a0>)
 8010b36:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b38:	8812      	ldrh	r2, [r2, #0]
 8010b3a:	b292      	uxth	r2, r2
 8010b3c:	9202      	str	r2, [sp, #8]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	4b90      	ldr	r3, [pc, #576]	@ (8010d84 <tcp_process+0x5a4>)
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4b90      	ldr	r3, [pc, #576]	@ (8010d88 <tcp_process+0x5a8>)
 8010b46:	4602      	mov	r2, r0
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f003 f8d7 	bl	8013cfc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	f200 8215 	bhi.w	8010f84 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f002 fea3 	bl	80138ac <tcp_rexmit_rto>
      break;
 8010b66:	e20d      	b.n	8010f84 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010b68:	4b81      	ldr	r3, [pc, #516]	@ (8010d70 <tcp_process+0x590>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f003 0310 	and.w	r3, r3, #16
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f000 80a1 	beq.w	8010cb8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b76:	4b7f      	ldr	r3, [pc, #508]	@ (8010d74 <tcp_process+0x594>)
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b7e:	1ad3      	subs	r3, r2, r3
 8010b80:	3b01      	subs	r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	db7e      	blt.n	8010c84 <tcp_process+0x4a4>
 8010b86:	4b7b      	ldr	r3, [pc, #492]	@ (8010d74 <tcp_process+0x594>)
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	dc77      	bgt.n	8010c84 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2204      	movs	r2, #4
 8010b98:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d102      	bne.n	8010ba8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ba2:	23fa      	movs	r3, #250	@ 0xfa
 8010ba4:	76bb      	strb	r3, [r7, #26]
 8010ba6:	e01d      	b.n	8010be4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bac:	699b      	ldr	r3, [r3, #24]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d106      	bne.n	8010bc0 <tcp_process+0x3e0>
 8010bb2:	4b76      	ldr	r3, [pc, #472]	@ (8010d8c <tcp_process+0x5ac>)
 8010bb4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010bb8:	4975      	ldr	r1, [pc, #468]	@ (8010d90 <tcp_process+0x5b0>)
 8010bba:	4876      	ldr	r0, [pc, #472]	@ (8010d94 <tcp_process+0x5b4>)
 8010bbc:	f006 fe6c 	bl	8017898 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <tcp_process+0x400>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	6910      	ldr	r0, [r2, #16]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	4798      	blx	r3
 8010bda:	4603      	mov	r3, r0
 8010bdc:	76bb      	strb	r3, [r7, #26]
 8010bde:	e001      	b.n	8010be4 <tcp_process+0x404>
 8010be0:	23f0      	movs	r3, #240	@ 0xf0
 8010be2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010be4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00a      	beq.n	8010c02 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010bec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010bf0:	f113 0f0d 	cmn.w	r3, #13
 8010bf4:	d002      	beq.n	8010bfc <tcp_process+0x41c>
              tcp_abort(pcb);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7fd fce6 	bl	800e5c8 <tcp_abort>
            }
            return ERR_ABRT;
 8010bfc:	f06f 030c 	mvn.w	r3, #12
 8010c00:	e1ce      	b.n	8010fa0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fae0 	bl	80111c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010c08:	4b63      	ldr	r3, [pc, #396]	@ (8010d98 <tcp_process+0x5b8>)
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d005      	beq.n	8010c1c <tcp_process+0x43c>
            recv_acked--;
 8010c10:	4b61      	ldr	r3, [pc, #388]	@ (8010d98 <tcp_process+0x5b8>)
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	3b01      	subs	r3, #1
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	4b5f      	ldr	r3, [pc, #380]	@ (8010d98 <tcp_process+0x5b8>)
 8010c1a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c20:	009a      	lsls	r2, r3, #2
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c26:	005b      	lsls	r3, r3, #1
 8010c28:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010c2c:	428b      	cmp	r3, r1
 8010c2e:	bf38      	it	cc
 8010c30:	460b      	movcc	r3, r1
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d204      	bcs.n	8010c40 <tcp_process+0x460>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	e00d      	b.n	8010c5c <tcp_process+0x47c>
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d904      	bls.n	8010c58 <tcp_process+0x478>
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	e001      	b.n	8010c5c <tcp_process+0x47c>
 8010c58:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010c62:	4b4e      	ldr	r3, [pc, #312]	@ (8010d9c <tcp_process+0x5bc>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	f003 0320 	and.w	r3, r3, #32
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d037      	beq.n	8010cde <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8b5b      	ldrh	r3, [r3, #26]
 8010c72:	f043 0302 	orr.w	r3, r3, #2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2207      	movs	r2, #7
 8010c80:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010c82:	e02c      	b.n	8010cde <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c84:	4b3b      	ldr	r3, [pc, #236]	@ (8010d74 <tcp_process+0x594>)
 8010c86:	6819      	ldr	r1, [r3, #0]
 8010c88:	4b3b      	ldr	r3, [pc, #236]	@ (8010d78 <tcp_process+0x598>)
 8010c8a:	881b      	ldrh	r3, [r3, #0]
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8010d7c <tcp_process+0x59c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c94:	4b3a      	ldr	r3, [pc, #232]	@ (8010d80 <tcp_process+0x5a0>)
 8010c96:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c98:	885b      	ldrh	r3, [r3, #2]
 8010c9a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c9c:	4a38      	ldr	r2, [pc, #224]	@ (8010d80 <tcp_process+0x5a0>)
 8010c9e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ca0:	8812      	ldrh	r2, [r2, #0]
 8010ca2:	b292      	uxth	r2, r2
 8010ca4:	9202      	str	r2, [sp, #8]
 8010ca6:	9301      	str	r3, [sp, #4]
 8010ca8:	4b36      	ldr	r3, [pc, #216]	@ (8010d84 <tcp_process+0x5a4>)
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	4b36      	ldr	r3, [pc, #216]	@ (8010d88 <tcp_process+0x5a8>)
 8010cae:	4602      	mov	r2, r0
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f003 f823 	bl	8013cfc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010cb6:	e167      	b.n	8010f88 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8010d70 <tcp_process+0x590>)
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	f003 0302 	and.w	r3, r3, #2
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f000 8161 	beq.w	8010f88 <tcp_process+0x7a8>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cca:	1e5a      	subs	r2, r3, #1
 8010ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8010d7c <tcp_process+0x59c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	f040 8159 	bne.w	8010f88 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f002 fe0a 	bl	80138f0 <tcp_rexmit>
      break;
 8010cdc:	e154      	b.n	8010f88 <tcp_process+0x7a8>
 8010cde:	e153      	b.n	8010f88 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 fa71 	bl	80111c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8010d9c <tcp_process+0x5bc>)
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	f003 0320 	and.w	r3, r3, #32
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 814c 	beq.w	8010f8c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8b5b      	ldrh	r3, [r3, #26]
 8010cf8:	f043 0302 	orr.w	r3, r3, #2
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2207      	movs	r2, #7
 8010d06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d08:	e140      	b.n	8010f8c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f000 fa5c 	bl	80111c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010d10:	4b22      	ldr	r3, [pc, #136]	@ (8010d9c <tcp_process+0x5bc>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f003 0320 	and.w	r3, r3, #32
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d071      	beq.n	8010e00 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d1c:	4b14      	ldr	r3, [pc, #80]	@ (8010d70 <tcp_process+0x590>)
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	f003 0310 	and.w	r3, r3, #16
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d060      	beq.n	8010dea <tcp_process+0x60a>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d2c:	4b11      	ldr	r3, [pc, #68]	@ (8010d74 <tcp_process+0x594>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d15a      	bne.n	8010dea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d156      	bne.n	8010dea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	8b5b      	ldrh	r3, [r3, #26]
 8010d40:	f043 0302 	orr.w	r3, r3, #2
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f7fe fdbc 	bl	800f8c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010d50:	4b13      	ldr	r3, [pc, #76]	@ (8010da0 <tcp_process+0x5c0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d105      	bne.n	8010d66 <tcp_process+0x586>
 8010d5a:	4b11      	ldr	r3, [pc, #68]	@ (8010da0 <tcp_process+0x5c0>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	4a0f      	ldr	r2, [pc, #60]	@ (8010da0 <tcp_process+0x5c0>)
 8010d62:	6013      	str	r3, [r2, #0]
 8010d64:	e02e      	b.n	8010dc4 <tcp_process+0x5e4>
 8010d66:	4b0e      	ldr	r3, [pc, #56]	@ (8010da0 <tcp_process+0x5c0>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	617b      	str	r3, [r7, #20]
 8010d6c:	e027      	b.n	8010dbe <tcp_process+0x5de>
 8010d6e:	bf00      	nop
 8010d70:	2000f0dc 	.word	0x2000f0dc
 8010d74:	2000f0d4 	.word	0x2000f0d4
 8010d78:	2000f0da 	.word	0x2000f0da
 8010d7c:	2000f0d0 	.word	0x2000f0d0
 8010d80:	2000f0c0 	.word	0x2000f0c0
 8010d84:	2000b954 	.word	0x2000b954
 8010d88:	2000b958 	.word	0x2000b958
 8010d8c:	0801ac4c 	.word	0x0801ac4c
 8010d90:	0801aeec 	.word	0x0801aeec
 8010d94:	0801ac98 	.word	0x0801ac98
 8010d98:	2000f0d8 	.word	0x2000f0d8
 8010d9c:	2000f0dd 	.word	0x2000f0dd
 8010da0:	2000f0a4 	.word	0x2000f0a4
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d104      	bne.n	8010db8 <tcp_process+0x5d8>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68da      	ldr	r2, [r3, #12]
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	e005      	b.n	8010dc4 <tcp_process+0x5e4>
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	617b      	str	r3, [r7, #20]
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d1ef      	bne.n	8010da4 <tcp_process+0x5c4>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	60da      	str	r2, [r3, #12]
 8010dca:	4b77      	ldr	r3, [pc, #476]	@ (8010fa8 <tcp_process+0x7c8>)
 8010dcc:	2201      	movs	r2, #1
 8010dce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	220a      	movs	r2, #10
 8010dd4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010dd6:	4b75      	ldr	r3, [pc, #468]	@ (8010fac <tcp_process+0x7cc>)
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	60da      	str	r2, [r3, #12]
 8010dde:	4a73      	ldr	r2, [pc, #460]	@ (8010fac <tcp_process+0x7cc>)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	f003 f94c 	bl	8014080 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010de8:	e0d2      	b.n	8010f90 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	8b5b      	ldrh	r3, [r3, #26]
 8010dee:	f043 0302 	orr.w	r3, r3, #2
 8010df2:	b29a      	uxth	r2, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2208      	movs	r2, #8
 8010dfc:	751a      	strb	r2, [r3, #20]
      break;
 8010dfe:	e0c7      	b.n	8010f90 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e00:	4b6b      	ldr	r3, [pc, #428]	@ (8010fb0 <tcp_process+0x7d0>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	f003 0310 	and.w	r3, r3, #16
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 80c1 	beq.w	8010f90 <tcp_process+0x7b0>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e12:	4b68      	ldr	r3, [pc, #416]	@ (8010fb4 <tcp_process+0x7d4>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	f040 80ba 	bne.w	8010f90 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f040 80b5 	bne.w	8010f90 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2206      	movs	r2, #6
 8010e2a:	751a      	strb	r2, [r3, #20]
      break;
 8010e2c:	e0b0      	b.n	8010f90 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 f9ca 	bl	80111c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e34:	4b60      	ldr	r3, [pc, #384]	@ (8010fb8 <tcp_process+0x7d8>)
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	f003 0320 	and.w	r3, r3, #32
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f000 80a9 	beq.w	8010f94 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	8b5b      	ldrh	r3, [r3, #26]
 8010e46:	f043 0302 	orr.w	r3, r3, #2
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f7fe fd39 	bl	800f8c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010e56:	4b59      	ldr	r3, [pc, #356]	@ (8010fbc <tcp_process+0x7dc>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d105      	bne.n	8010e6c <tcp_process+0x68c>
 8010e60:	4b56      	ldr	r3, [pc, #344]	@ (8010fbc <tcp_process+0x7dc>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	4a55      	ldr	r2, [pc, #340]	@ (8010fbc <tcp_process+0x7dc>)
 8010e68:	6013      	str	r3, [r2, #0]
 8010e6a:	e013      	b.n	8010e94 <tcp_process+0x6b4>
 8010e6c:	4b53      	ldr	r3, [pc, #332]	@ (8010fbc <tcp_process+0x7dc>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	613b      	str	r3, [r7, #16]
 8010e72:	e00c      	b.n	8010e8e <tcp_process+0x6ae>
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d104      	bne.n	8010e88 <tcp_process+0x6a8>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	68da      	ldr	r2, [r3, #12]
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	60da      	str	r2, [r3, #12]
 8010e86:	e005      	b.n	8010e94 <tcp_process+0x6b4>
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	613b      	str	r3, [r7, #16]
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1ef      	bne.n	8010e74 <tcp_process+0x694>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	60da      	str	r2, [r3, #12]
 8010e9a:	4b43      	ldr	r3, [pc, #268]	@ (8010fa8 <tcp_process+0x7c8>)
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	220a      	movs	r2, #10
 8010ea4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010ea6:	4b41      	ldr	r3, [pc, #260]	@ (8010fac <tcp_process+0x7cc>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	60da      	str	r2, [r3, #12]
 8010eae:	4a3f      	ldr	r2, [pc, #252]	@ (8010fac <tcp_process+0x7cc>)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	6013      	str	r3, [r2, #0]
 8010eb4:	f003 f8e4 	bl	8014080 <tcp_timer_needed>
      }
      break;
 8010eb8:	e06c      	b.n	8010f94 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f000 f984 	bl	80111c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8010fb0 <tcp_process+0x7d0>)
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	f003 0310 	and.w	r3, r3, #16
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d065      	beq.n	8010f98 <tcp_process+0x7b8>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ed0:	4b38      	ldr	r3, [pc, #224]	@ (8010fb4 <tcp_process+0x7d4>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d15f      	bne.n	8010f98 <tcp_process+0x7b8>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d15b      	bne.n	8010f98 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7fe fcf1 	bl	800f8c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010ee6:	4b35      	ldr	r3, [pc, #212]	@ (8010fbc <tcp_process+0x7dc>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d105      	bne.n	8010efc <tcp_process+0x71c>
 8010ef0:	4b32      	ldr	r3, [pc, #200]	@ (8010fbc <tcp_process+0x7dc>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	4a31      	ldr	r2, [pc, #196]	@ (8010fbc <tcp_process+0x7dc>)
 8010ef8:	6013      	str	r3, [r2, #0]
 8010efa:	e013      	b.n	8010f24 <tcp_process+0x744>
 8010efc:	4b2f      	ldr	r3, [pc, #188]	@ (8010fbc <tcp_process+0x7dc>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	60fb      	str	r3, [r7, #12]
 8010f02:	e00c      	b.n	8010f1e <tcp_process+0x73e>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	687a      	ldr	r2, [r7, #4]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d104      	bne.n	8010f18 <tcp_process+0x738>
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68da      	ldr	r2, [r3, #12]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	60da      	str	r2, [r3, #12]
 8010f16:	e005      	b.n	8010f24 <tcp_process+0x744>
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	60fb      	str	r3, [r7, #12]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1ef      	bne.n	8010f04 <tcp_process+0x724>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	60da      	str	r2, [r3, #12]
 8010f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8010fa8 <tcp_process+0x7c8>)
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	220a      	movs	r2, #10
 8010f34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f36:	4b1d      	ldr	r3, [pc, #116]	@ (8010fac <tcp_process+0x7cc>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	60da      	str	r2, [r3, #12]
 8010f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8010fac <tcp_process+0x7cc>)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	f003 f89c 	bl	8014080 <tcp_timer_needed>
      }
      break;
 8010f48:	e026      	b.n	8010f98 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f93c 	bl	80111c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010f50:	4b17      	ldr	r3, [pc, #92]	@ (8010fb0 <tcp_process+0x7d0>)
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	f003 0310 	and.w	r3, r3, #16
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d01f      	beq.n	8010f9c <tcp_process+0x7bc>
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f60:	4b14      	ldr	r3, [pc, #80]	@ (8010fb4 <tcp_process+0x7d4>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d119      	bne.n	8010f9c <tcp_process+0x7bc>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d115      	bne.n	8010f9c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010f70:	4b11      	ldr	r3, [pc, #68]	@ (8010fb8 <tcp_process+0x7d8>)
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	f043 0310 	orr.w	r3, r3, #16
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8010fb8 <tcp_process+0x7d8>)
 8010f7c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010f7e:	e00d      	b.n	8010f9c <tcp_process+0x7bc>
    default:
      break;
 8010f80:	bf00      	nop
 8010f82:	e00c      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f84:	bf00      	nop
 8010f86:	e00a      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f88:	bf00      	nop
 8010f8a:	e008      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f8c:	bf00      	nop
 8010f8e:	e006      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f90:	bf00      	nop
 8010f92:	e004      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f94:	bf00      	nop
 8010f96:	e002      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f98:	bf00      	nop
 8010f9a:	e000      	b.n	8010f9e <tcp_process+0x7be>
      break;
 8010f9c:	bf00      	nop
  }
  return ERR_OK;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3724      	adds	r7, #36	@ 0x24
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd90      	pop	{r4, r7, pc}
 8010fa8:	2000f0ac 	.word	0x2000f0ac
 8010fac:	2000f0a8 	.word	0x2000f0a8
 8010fb0:	2000f0dc 	.word	0x2000f0dc
 8010fb4:	2000f0d4 	.word	0x2000f0d4
 8010fb8:	2000f0dd 	.word	0x2000f0dd
 8010fbc:	2000f0a4 	.word	0x2000f0a4

08010fc0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010fc0:	b590      	push	{r4, r7, lr}
 8010fc2:	b085      	sub	sp, #20
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d106      	bne.n	8010fde <tcp_oos_insert_segment+0x1e>
 8010fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80110c0 <tcp_oos_insert_segment+0x100>)
 8010fd2:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010fd6:	493b      	ldr	r1, [pc, #236]	@ (80110c4 <tcp_oos_insert_segment+0x104>)
 8010fd8:	483b      	ldr	r0, [pc, #236]	@ (80110c8 <tcp_oos_insert_segment+0x108>)
 8010fda:	f006 fc5d 	bl	8017898 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	899b      	ldrh	r3, [r3, #12]
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fb f8c6 	bl	800c178 <lwip_htons>
 8010fec:	4603      	mov	r3, r0
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d028      	beq.n	801104a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010ff8:	6838      	ldr	r0, [r7, #0]
 8010ffa:	f7fe f977 	bl	800f2ec <tcp_segs_free>
    next = NULL;
 8010ffe:	2300      	movs	r3, #0
 8011000:	603b      	str	r3, [r7, #0]
 8011002:	e056      	b.n	80110b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	899b      	ldrh	r3, [r3, #12]
 801100a:	b29b      	uxth	r3, r3
 801100c:	4618      	mov	r0, r3
 801100e:	f7fb f8b3 	bl	800c178 <lwip_htons>
 8011012:	4603      	mov	r3, r0
 8011014:	b2db      	uxtb	r3, r3
 8011016:	f003 0301 	and.w	r3, r3, #1
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00d      	beq.n	801103a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	899b      	ldrh	r3, [r3, #12]
 8011024:	b29c      	uxth	r4, r3
 8011026:	2001      	movs	r0, #1
 8011028:	f7fb f8a6 	bl	800c178 <lwip_htons>
 801102c:	4603      	mov	r3, r0
 801102e:	461a      	mov	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	4322      	orrs	r2, r4
 8011036:	b292      	uxth	r2, r2
 8011038:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f7fe f966 	bl	800f316 <tcp_seg_free>
    while (next &&
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d00e      	beq.n	801106e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	891b      	ldrh	r3, [r3, #8]
 8011054:	461a      	mov	r2, r3
 8011056:	4b1d      	ldr	r3, [pc, #116]	@ (80110cc <tcp_oos_insert_segment+0x10c>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	441a      	add	r2, r3
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	8909      	ldrh	r1, [r1, #8]
 8011066:	440b      	add	r3, r1
 8011068:	1ad3      	subs	r3, r2, r3
    while (next &&
 801106a:	2b00      	cmp	r3, #0
 801106c:	daca      	bge.n	8011004 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d01e      	beq.n	80110b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	891b      	ldrh	r3, [r3, #8]
 8011078:	461a      	mov	r2, r3
 801107a:	4b14      	ldr	r3, [pc, #80]	@ (80110cc <tcp_oos_insert_segment+0x10c>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	441a      	add	r2, r3
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	685b      	ldr	r3, [r3, #4]
 8011086:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011088:	2b00      	cmp	r3, #0
 801108a:	dd12      	ble.n	80110b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	b29a      	uxth	r2, r3
 8011094:	4b0d      	ldr	r3, [pc, #52]	@ (80110cc <tcp_oos_insert_segment+0x10c>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	b29b      	uxth	r3, r3
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685a      	ldr	r2, [r3, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	891b      	ldrh	r3, [r3, #8]
 80110aa:	4619      	mov	r1, r3
 80110ac:	4610      	mov	r0, r2
 80110ae:	f7fc fb05 	bl	800d6bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	601a      	str	r2, [r3, #0]
}
 80110b8:	bf00      	nop
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	0801ac4c 	.word	0x0801ac4c
 80110c4:	0801af0c 	.word	0x0801af0c
 80110c8:	0801ac98 	.word	0x0801ac98
 80110cc:	2000f0d0 	.word	0x2000f0d0

080110d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80110d0:	b5b0      	push	{r4, r5, r7, lr}
 80110d2:	b086      	sub	sp, #24
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	60f8      	str	r0, [r7, #12]
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]
 80110dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80110de:	e03e      	b.n	801115e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fc fcf8 	bl	800dae4 <pbuf_clen>
 80110f4:	4603      	mov	r3, r0
 80110f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80110fe:	8a7a      	ldrh	r2, [r7, #18]
 8011100:	429a      	cmp	r2, r3
 8011102:	d906      	bls.n	8011112 <tcp_free_acked_segments+0x42>
 8011104:	4b2a      	ldr	r3, [pc, #168]	@ (80111b0 <tcp_free_acked_segments+0xe0>)
 8011106:	f240 4257 	movw	r2, #1111	@ 0x457
 801110a:	492a      	ldr	r1, [pc, #168]	@ (80111b4 <tcp_free_acked_segments+0xe4>)
 801110c:	482a      	ldr	r0, [pc, #168]	@ (80111b8 <tcp_free_acked_segments+0xe8>)
 801110e:	f006 fbc3 	bl	8017898 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011118:	8a7b      	ldrh	r3, [r7, #18]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	b29a      	uxth	r2, r3
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	891a      	ldrh	r2, [r3, #8]
 8011128:	4b24      	ldr	r3, [pc, #144]	@ (80111bc <tcp_free_acked_segments+0xec>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	4413      	add	r3, r2
 801112e:	b29a      	uxth	r2, r3
 8011130:	4b22      	ldr	r3, [pc, #136]	@ (80111bc <tcp_free_acked_segments+0xec>)
 8011132:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011134:	6978      	ldr	r0, [r7, #20]
 8011136:	f7fe f8ee 	bl	800f316 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011140:	2b00      	cmp	r3, #0
 8011142:	d00c      	beq.n	801115e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d109      	bne.n	801115e <tcp_free_acked_segments+0x8e>
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d106      	bne.n	801115e <tcp_free_acked_segments+0x8e>
 8011150:	4b17      	ldr	r3, [pc, #92]	@ (80111b0 <tcp_free_acked_segments+0xe0>)
 8011152:	f240 4261 	movw	r2, #1121	@ 0x461
 8011156:	491a      	ldr	r1, [pc, #104]	@ (80111c0 <tcp_free_acked_segments+0xf0>)
 8011158:	4817      	ldr	r0, [pc, #92]	@ (80111b8 <tcp_free_acked_segments+0xe8>)
 801115a:	f006 fb9d 	bl	8017898 <iprintf>
  while (seg_list != NULL &&
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d020      	beq.n	80111a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	4618      	mov	r0, r3
 801116c:	f7fb f819 	bl	800c1a2 <lwip_htonl>
 8011170:	4604      	mov	r4, r0
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	891b      	ldrh	r3, [r3, #8]
 8011176:	461d      	mov	r5, r3
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	899b      	ldrh	r3, [r3, #12]
 801117e:	b29b      	uxth	r3, r3
 8011180:	4618      	mov	r0, r3
 8011182:	f7fa fff9 	bl	800c178 <lwip_htons>
 8011186:	4603      	mov	r3, r0
 8011188:	b2db      	uxtb	r3, r3
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <tcp_free_acked_segments+0xc6>
 8011192:	2301      	movs	r3, #1
 8011194:	e000      	b.n	8011198 <tcp_free_acked_segments+0xc8>
 8011196:	2300      	movs	r3, #0
 8011198:	442b      	add	r3, r5
 801119a:	18e2      	adds	r2, r4, r3
 801119c:	4b09      	ldr	r3, [pc, #36]	@ (80111c4 <tcp_free_acked_segments+0xf4>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	dd9c      	ble.n	80110e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80111a6:	68bb      	ldr	r3, [r7, #8]
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3718      	adds	r7, #24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bdb0      	pop	{r4, r5, r7, pc}
 80111b0:	0801ac4c 	.word	0x0801ac4c
 80111b4:	0801af34 	.word	0x0801af34
 80111b8:	0801ac98 	.word	0x0801ac98
 80111bc:	2000f0d8 	.word	0x2000f0d8
 80111c0:	0801af5c 	.word	0x0801af5c
 80111c4:	2000f0d4 	.word	0x2000f0d4

080111c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80111c8:	b5b0      	push	{r4, r5, r7, lr}
 80111ca:	b094      	sub	sp, #80	@ 0x50
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80111d0:	2300      	movs	r3, #0
 80111d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d106      	bne.n	80111e8 <tcp_receive+0x20>
 80111da:	4b91      	ldr	r3, [pc, #580]	@ (8011420 <tcp_receive+0x258>)
 80111dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80111e0:	4990      	ldr	r1, [pc, #576]	@ (8011424 <tcp_receive+0x25c>)
 80111e2:	4891      	ldr	r0, [pc, #580]	@ (8011428 <tcp_receive+0x260>)
 80111e4:	f006 fb58 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	7d1b      	ldrb	r3, [r3, #20]
 80111ec:	2b03      	cmp	r3, #3
 80111ee:	d806      	bhi.n	80111fe <tcp_receive+0x36>
 80111f0:	4b8b      	ldr	r3, [pc, #556]	@ (8011420 <tcp_receive+0x258>)
 80111f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80111f6:	498d      	ldr	r1, [pc, #564]	@ (801142c <tcp_receive+0x264>)
 80111f8:	488b      	ldr	r0, [pc, #556]	@ (8011428 <tcp_receive+0x260>)
 80111fa:	f006 fb4d 	bl	8017898 <iprintf>

  if (flags & TCP_ACK) {
 80111fe:	4b8c      	ldr	r3, [pc, #560]	@ (8011430 <tcp_receive+0x268>)
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	f003 0310 	and.w	r3, r3, #16
 8011206:	2b00      	cmp	r3, #0
 8011208:	f000 8264 	beq.w	80116d4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011212:	461a      	mov	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011218:	4413      	add	r3, r2
 801121a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011220:	4b84      	ldr	r3, [pc, #528]	@ (8011434 <tcp_receive+0x26c>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	db1b      	blt.n	8011262 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801122e:	4b81      	ldr	r3, [pc, #516]	@ (8011434 <tcp_receive+0x26c>)
 8011230:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011232:	429a      	cmp	r2, r3
 8011234:	d106      	bne.n	8011244 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801123a:	4b7f      	ldr	r3, [pc, #508]	@ (8011438 <tcp_receive+0x270>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	2b00      	cmp	r3, #0
 8011242:	db0e      	blt.n	8011262 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011248:	4b7b      	ldr	r3, [pc, #492]	@ (8011438 <tcp_receive+0x270>)
 801124a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801124c:	429a      	cmp	r2, r3
 801124e:	d125      	bne.n	801129c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011250:	4b7a      	ldr	r3, [pc, #488]	@ (801143c <tcp_receive+0x274>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	89db      	ldrh	r3, [r3, #14]
 8011256:	b29a      	uxth	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801125e:	429a      	cmp	r2, r3
 8011260:	d91c      	bls.n	801129c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011262:	4b76      	ldr	r3, [pc, #472]	@ (801143c <tcp_receive+0x274>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	89db      	ldrh	r3, [r3, #14]
 8011268:	b29a      	uxth	r2, r3
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801127c:	429a      	cmp	r2, r3
 801127e:	d205      	bcs.n	801128c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801128c:	4b69      	ldr	r3, [pc, #420]	@ (8011434 <tcp_receive+0x26c>)
 801128e:	681a      	ldr	r2, [r3, #0]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011294:	4b68      	ldr	r3, [pc, #416]	@ (8011438 <tcp_receive+0x270>)
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801129c:	4b66      	ldr	r3, [pc, #408]	@ (8011438 <tcp_receive+0x270>)
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dc58      	bgt.n	801135c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80112aa:	4b65      	ldr	r3, [pc, #404]	@ (8011440 <tcp_receive+0x278>)
 80112ac:	881b      	ldrh	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d14b      	bne.n	801134a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80112bc:	4413      	add	r3, r2
 80112be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d142      	bne.n	801134a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	db3d      	blt.n	801134a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80112d2:	4b59      	ldr	r3, [pc, #356]	@ (8011438 <tcp_receive+0x270>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d137      	bne.n	801134a <tcp_receive+0x182>
              found_dupack = 1;
 80112da:	2301      	movs	r3, #1
 80112dc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80112e4:	2bff      	cmp	r3, #255	@ 0xff
 80112e6:	d007      	beq.n	80112f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80112ee:	3301      	adds	r3, #1
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d91b      	bls.n	801133a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801130c:	4413      	add	r3, r2
 801130e:	b29a      	uxth	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011316:	429a      	cmp	r2, r3
 8011318:	d30a      	bcc.n	8011330 <tcp_receive+0x168>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011324:	4413      	add	r3, r2
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801132e:	e004      	b.n	801133a <tcp_receive+0x172>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011336:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011340:	2b02      	cmp	r3, #2
 8011342:	d902      	bls.n	801134a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f002 fb3f 	bl	80139c8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801134a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801134c:	2b00      	cmp	r3, #0
 801134e:	f040 8161 	bne.w	8011614 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801135a:	e15b      	b.n	8011614 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801135c:	4b36      	ldr	r3, [pc, #216]	@ (8011438 <tcp_receive+0x270>)
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	3b01      	subs	r3, #1
 8011368:	2b00      	cmp	r3, #0
 801136a:	f2c0 814e 	blt.w	801160a <tcp_receive+0x442>
 801136e:	4b32      	ldr	r3, [pc, #200]	@ (8011438 <tcp_receive+0x270>)
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	2b00      	cmp	r3, #0
 801137a:	f300 8146 	bgt.w	801160a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	8b5b      	ldrh	r3, [r3, #26]
 8011382:	f003 0304 	and.w	r3, r3, #4
 8011386:	2b00      	cmp	r3, #0
 8011388:	d010      	beq.n	80113ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	8b5b      	ldrh	r3, [r3, #26]
 801138e:	f023 0304 	bic.w	r3, r3, #4
 8011392:	b29a      	uxth	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113ba:	10db      	asrs	r3, r3, #3
 80113bc:	b21b      	sxth	r3, r3
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	4413      	add	r3, r2
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	b21a      	sxth	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80113d4:	4b18      	ldr	r3, [pc, #96]	@ (8011438 <tcp_receive+0x270>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	b29a      	uxth	r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113de:	b29b      	uxth	r3, r3
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80113ec:	4b12      	ldr	r3, [pc, #72]	@ (8011438 <tcp_receive+0x270>)
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	7d1b      	ldrb	r3, [r3, #20]
 80113f8:	2b03      	cmp	r3, #3
 80113fa:	f240 8097 	bls.w	801152c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801140a:	429a      	cmp	r2, r3
 801140c:	d245      	bcs.n	801149a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	8b5b      	ldrh	r3, [r3, #26]
 8011412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011416:	2b00      	cmp	r3, #0
 8011418:	d014      	beq.n	8011444 <tcp_receive+0x27c>
 801141a:	2301      	movs	r3, #1
 801141c:	e013      	b.n	8011446 <tcp_receive+0x27e>
 801141e:	bf00      	nop
 8011420:	0801ac4c 	.word	0x0801ac4c
 8011424:	0801af7c 	.word	0x0801af7c
 8011428:	0801ac98 	.word	0x0801ac98
 801142c:	0801af98 	.word	0x0801af98
 8011430:	2000f0dc 	.word	0x2000f0dc
 8011434:	2000f0d0 	.word	0x2000f0d0
 8011438:	2000f0d4 	.word	0x2000f0d4
 801143c:	2000f0c0 	.word	0x2000f0c0
 8011440:	2000f0da 	.word	0x2000f0da
 8011444:	2302      	movs	r3, #2
 8011446:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801144a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801144e:	b29a      	uxth	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011454:	fb12 f303 	smulbb	r3, r2, r3
 8011458:	b29b      	uxth	r3, r3
 801145a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801145c:	4293      	cmp	r3, r2
 801145e:	bf28      	it	cs
 8011460:	4613      	movcs	r3, r2
 8011462:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801146a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801146c:	4413      	add	r3, r2
 801146e:	b29a      	uxth	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011476:	429a      	cmp	r2, r3
 8011478:	d309      	bcc.n	801148e <tcp_receive+0x2c6>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011480:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011482:	4413      	add	r3, r2
 8011484:	b29a      	uxth	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801148c:	e04e      	b.n	801152c <tcp_receive+0x364>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011494:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011498:	e048      	b.n	801152c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80114a2:	4413      	add	r3, r2
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d309      	bcc.n	80114c4 <tcp_receive+0x2fc>
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80114b8:	4413      	add	r3, r2
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80114c2:	e004      	b.n	80114ce <tcp_receive+0x306>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80114ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80114da:	429a      	cmp	r2, r3
 80114dc:	d326      	bcc.n	801152c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80114fe:	4413      	add	r3, r2
 8011500:	b29a      	uxth	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011508:	429a      	cmp	r2, r3
 801150a:	d30a      	bcc.n	8011522 <tcp_receive+0x35a>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011516:	4413      	add	r3, r2
 8011518:	b29a      	uxth	r2, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011520:	e004      	b.n	801152c <tcp_receive+0x364>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011528:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011534:	4a98      	ldr	r2, [pc, #608]	@ (8011798 <tcp_receive+0x5d0>)
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff fdca 	bl	80110d0 <tcp_free_acked_segments>
 801153c:	4602      	mov	r2, r0
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801154a:	4a94      	ldr	r2, [pc, #592]	@ (801179c <tcp_receive+0x5d4>)
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff fdbf 	bl	80110d0 <tcp_free_acked_segments>
 8011552:	4602      	mov	r2, r0
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801155c:	2b00      	cmp	r3, #0
 801155e:	d104      	bne.n	801156a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011566:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011568:	e002      	b.n	8011570 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2200      	movs	r2, #0
 8011574:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801157a:	2b00      	cmp	r3, #0
 801157c:	d103      	bne.n	8011586 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801158c:	4b84      	ldr	r3, [pc, #528]	@ (80117a0 <tcp_receive+0x5d8>)
 801158e:	881b      	ldrh	r3, [r3, #0]
 8011590:	4413      	add	r3, r2
 8011592:	b29a      	uxth	r2, r3
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	8b5b      	ldrh	r3, [r3, #26]
 801159e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d035      	beq.n	8011612 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d118      	bne.n	80115e0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00c      	beq.n	80115d0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fa fded 	bl	800c1a2 <lwip_htonl>
 80115c8:	4603      	mov	r3, r0
 80115ca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	dc20      	bgt.n	8011612 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	8b5b      	ldrh	r3, [r3, #26]
 80115d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80115d8:	b29a      	uxth	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80115de:	e018      	b.n	8011612 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7fa fdd8 	bl	800c1a2 <lwip_htonl>
 80115f2:	4603      	mov	r3, r0
 80115f4:	1ae3      	subs	r3, r4, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	dc0b      	bgt.n	8011612 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	8b5b      	ldrh	r3, [r3, #26]
 80115fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011608:	e003      	b.n	8011612 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f002 fbc8 	bl	8013da0 <tcp_send_empty_ack>
 8011610:	e000      	b.n	8011614 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011612:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011618:	2b00      	cmp	r3, #0
 801161a:	d05b      	beq.n	80116d4 <tcp_receive+0x50c>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011620:	4b60      	ldr	r3, [pc, #384]	@ (80117a4 <tcp_receive+0x5dc>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	1ad3      	subs	r3, r2, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	da54      	bge.n	80116d4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801162a:	4b5f      	ldr	r3, [pc, #380]	@ (80117a8 <tcp_receive+0x5e0>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	b29a      	uxth	r2, r3
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011634:	b29b      	uxth	r3, r3
 8011636:	1ad3      	subs	r3, r2, r3
 8011638:	b29b      	uxth	r3, r3
 801163a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801163e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011648:	10db      	asrs	r3, r3, #3
 801164a:	b21b      	sxth	r3, r3
 801164c:	b29b      	uxth	r3, r3
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	b29b      	uxth	r3, r3
 8011652:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801165c:	b29a      	uxth	r2, r3
 801165e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011662:	4413      	add	r3, r2
 8011664:	b29b      	uxth	r3, r3
 8011666:	b21a      	sxth	r2, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801166c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011670:	2b00      	cmp	r3, #0
 8011672:	da05      	bge.n	8011680 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011678:	425b      	negs	r3, r3
 801167a:	b29b      	uxth	r3, r3
 801167c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011680:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801168a:	109b      	asrs	r3, r3, #2
 801168c:	b21b      	sxth	r3, r3
 801168e:	b29b      	uxth	r3, r3
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	b29b      	uxth	r3, r3
 8011694:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801169e:	b29a      	uxth	r2, r3
 80116a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80116a4:	4413      	add	r3, r2
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	b21a      	sxth	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80116b4:	10db      	asrs	r3, r3, #3
 80116b6:	b21b      	sxth	r3, r3
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	4413      	add	r3, r2
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	b21a      	sxth	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2200      	movs	r2, #0
 80116d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80116d4:	4b35      	ldr	r3, [pc, #212]	@ (80117ac <tcp_receive+0x5e4>)
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f000 84df 	beq.w	801209c <tcp_receive+0xed4>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7d1b      	ldrb	r3, [r3, #20]
 80116e2:	2b06      	cmp	r3, #6
 80116e4:	f200 84da 	bhi.w	801209c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116ec:	4b30      	ldr	r3, [pc, #192]	@ (80117b0 <tcp_receive+0x5e8>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	3b01      	subs	r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	f2c0 808f 	blt.w	8011818 <tcp_receive+0x650>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116fe:	4b2b      	ldr	r3, [pc, #172]	@ (80117ac <tcp_receive+0x5e4>)
 8011700:	881b      	ldrh	r3, [r3, #0]
 8011702:	4619      	mov	r1, r3
 8011704:	4b2a      	ldr	r3, [pc, #168]	@ (80117b0 <tcp_receive+0x5e8>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	440b      	add	r3, r1
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	3301      	adds	r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	f300 8082 	bgt.w	8011818 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011714:	4b27      	ldr	r3, [pc, #156]	@ (80117b4 <tcp_receive+0x5ec>)
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801171e:	4b24      	ldr	r3, [pc, #144]	@ (80117b0 <tcp_receive+0x5e8>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011726:	4b23      	ldr	r3, [pc, #140]	@ (80117b4 <tcp_receive+0x5ec>)
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d106      	bne.n	801173c <tcp_receive+0x574>
 801172e:	4b22      	ldr	r3, [pc, #136]	@ (80117b8 <tcp_receive+0x5f0>)
 8011730:	f240 5294 	movw	r2, #1428	@ 0x594
 8011734:	4921      	ldr	r1, [pc, #132]	@ (80117bc <tcp_receive+0x5f4>)
 8011736:	4822      	ldr	r0, [pc, #136]	@ (80117c0 <tcp_receive+0x5f8>)
 8011738:	f006 f8ae 	bl	8017898 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011742:	4293      	cmp	r3, r2
 8011744:	d906      	bls.n	8011754 <tcp_receive+0x58c>
 8011746:	4b1c      	ldr	r3, [pc, #112]	@ (80117b8 <tcp_receive+0x5f0>)
 8011748:	f240 5295 	movw	r2, #1429	@ 0x595
 801174c:	491d      	ldr	r1, [pc, #116]	@ (80117c4 <tcp_receive+0x5fc>)
 801174e:	481c      	ldr	r0, [pc, #112]	@ (80117c0 <tcp_receive+0x5f8>)
 8011750:	f006 f8a2 	bl	8017898 <iprintf>
      off = (u16_t)off32;
 8011754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011756:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801175a:	4b16      	ldr	r3, [pc, #88]	@ (80117b4 <tcp_receive+0x5ec>)
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	891b      	ldrh	r3, [r3, #8]
 8011760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011764:	429a      	cmp	r2, r3
 8011766:	d906      	bls.n	8011776 <tcp_receive+0x5ae>
 8011768:	4b13      	ldr	r3, [pc, #76]	@ (80117b8 <tcp_receive+0x5f0>)
 801176a:	f240 5297 	movw	r2, #1431	@ 0x597
 801176e:	4916      	ldr	r1, [pc, #88]	@ (80117c8 <tcp_receive+0x600>)
 8011770:	4813      	ldr	r0, [pc, #76]	@ (80117c0 <tcp_receive+0x5f8>)
 8011772:	f006 f891 	bl	8017898 <iprintf>
      inseg.len -= off;
 8011776:	4b0f      	ldr	r3, [pc, #60]	@ (80117b4 <tcp_receive+0x5ec>)
 8011778:	891a      	ldrh	r2, [r3, #8]
 801177a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801177e:	1ad3      	subs	r3, r2, r3
 8011780:	b29a      	uxth	r2, r3
 8011782:	4b0c      	ldr	r3, [pc, #48]	@ (80117b4 <tcp_receive+0x5ec>)
 8011784:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011786:	4b0b      	ldr	r3, [pc, #44]	@ (80117b4 <tcp_receive+0x5ec>)
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	891a      	ldrh	r2, [r3, #8]
 801178c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011790:	1ad3      	subs	r3, r2, r3
 8011792:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011794:	e02a      	b.n	80117ec <tcp_receive+0x624>
 8011796:	bf00      	nop
 8011798:	0801afb4 	.word	0x0801afb4
 801179c:	0801afbc 	.word	0x0801afbc
 80117a0:	2000f0d8 	.word	0x2000f0d8
 80117a4:	2000f0d4 	.word	0x2000f0d4
 80117a8:	2000f098 	.word	0x2000f098
 80117ac:	2000f0da 	.word	0x2000f0da
 80117b0:	2000f0d0 	.word	0x2000f0d0
 80117b4:	2000f0b0 	.word	0x2000f0b0
 80117b8:	0801ac4c 	.word	0x0801ac4c
 80117bc:	0801afc4 	.word	0x0801afc4
 80117c0:	0801ac98 	.word	0x0801ac98
 80117c4:	0801afd4 	.word	0x0801afd4
 80117c8:	0801afe4 	.word	0x0801afe4
        off -= p->len;
 80117cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117ce:	895b      	ldrh	r3, [r3, #10]
 80117d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80117da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80117de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80117e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117e2:	2200      	movs	r2, #0
 80117e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80117e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80117ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117ee:	895b      	ldrh	r3, [r3, #10]
 80117f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d8e9      	bhi.n	80117cc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80117f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80117fc:	4619      	mov	r1, r3
 80117fe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011800:	f7fc f85c 	bl	800d8bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011808:	4a90      	ldr	r2, [pc, #576]	@ (8011a4c <tcp_receive+0x884>)
 801180a:	6013      	str	r3, [r2, #0]
 801180c:	4b90      	ldr	r3, [pc, #576]	@ (8011a50 <tcp_receive+0x888>)
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	4a8e      	ldr	r2, [pc, #568]	@ (8011a4c <tcp_receive+0x884>)
 8011812:	6812      	ldr	r2, [r2, #0]
 8011814:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011816:	e00d      	b.n	8011834 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011818:	4b8c      	ldr	r3, [pc, #560]	@ (8011a4c <tcp_receive+0x884>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	da06      	bge.n	8011834 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	8b5b      	ldrh	r3, [r3, #26]
 801182a:	f043 0302 	orr.w	r3, r3, #2
 801182e:	b29a      	uxth	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011834:	4b85      	ldr	r3, [pc, #532]	@ (8011a4c <tcp_receive+0x884>)
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	2b00      	cmp	r3, #0
 8011840:	f2c0 8427 	blt.w	8012092 <tcp_receive+0xeca>
 8011844:	4b81      	ldr	r3, [pc, #516]	@ (8011a4c <tcp_receive+0x884>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801184c:	6879      	ldr	r1, [r7, #4]
 801184e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011850:	440b      	add	r3, r1
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	3301      	adds	r3, #1
 8011856:	2b00      	cmp	r3, #0
 8011858:	f300 841b 	bgt.w	8012092 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011860:	4b7a      	ldr	r3, [pc, #488]	@ (8011a4c <tcp_receive+0x884>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	429a      	cmp	r2, r3
 8011866:	f040 8298 	bne.w	8011d9a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801186a:	4b79      	ldr	r3, [pc, #484]	@ (8011a50 <tcp_receive+0x888>)
 801186c:	891c      	ldrh	r4, [r3, #8]
 801186e:	4b78      	ldr	r3, [pc, #480]	@ (8011a50 <tcp_receive+0x888>)
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	899b      	ldrh	r3, [r3, #12]
 8011874:	b29b      	uxth	r3, r3
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa fc7e 	bl	800c178 <lwip_htons>
 801187c:	4603      	mov	r3, r0
 801187e:	b2db      	uxtb	r3, r3
 8011880:	f003 0303 	and.w	r3, r3, #3
 8011884:	2b00      	cmp	r3, #0
 8011886:	d001      	beq.n	801188c <tcp_receive+0x6c4>
 8011888:	2301      	movs	r3, #1
 801188a:	e000      	b.n	801188e <tcp_receive+0x6c6>
 801188c:	2300      	movs	r3, #0
 801188e:	4423      	add	r3, r4
 8011890:	b29a      	uxth	r2, r3
 8011892:	4b70      	ldr	r3, [pc, #448]	@ (8011a54 <tcp_receive+0x88c>)
 8011894:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801189a:	4b6e      	ldr	r3, [pc, #440]	@ (8011a54 <tcp_receive+0x88c>)
 801189c:	881b      	ldrh	r3, [r3, #0]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d274      	bcs.n	801198c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118a2:	4b6b      	ldr	r3, [pc, #428]	@ (8011a50 <tcp_receive+0x888>)
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	899b      	ldrh	r3, [r3, #12]
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fa fc64 	bl	800c178 <lwip_htons>
 80118b0:	4603      	mov	r3, r0
 80118b2:	b2db      	uxtb	r3, r3
 80118b4:	f003 0301 	and.w	r3, r3, #1
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01e      	beq.n	80118fa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80118bc:	4b64      	ldr	r3, [pc, #400]	@ (8011a50 <tcp_receive+0x888>)
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	b21b      	sxth	r3, r3
 80118c6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80118ca:	b21c      	sxth	r4, r3
 80118cc:	4b60      	ldr	r3, [pc, #384]	@ (8011a50 <tcp_receive+0x888>)
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	899b      	ldrh	r3, [r3, #12]
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	4618      	mov	r0, r3
 80118d6:	f7fa fc4f 	bl	800c178 <lwip_htons>
 80118da:	4603      	mov	r3, r0
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fa fc47 	bl	800c178 <lwip_htons>
 80118ea:	4603      	mov	r3, r0
 80118ec:	b21b      	sxth	r3, r3
 80118ee:	4323      	orrs	r3, r4
 80118f0:	b21a      	sxth	r2, r3
 80118f2:	4b57      	ldr	r3, [pc, #348]	@ (8011a50 <tcp_receive+0x888>)
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	b292      	uxth	r2, r2
 80118f8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80118fe:	4b54      	ldr	r3, [pc, #336]	@ (8011a50 <tcp_receive+0x888>)
 8011900:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011902:	4b53      	ldr	r3, [pc, #332]	@ (8011a50 <tcp_receive+0x888>)
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	899b      	ldrh	r3, [r3, #12]
 8011908:	b29b      	uxth	r3, r3
 801190a:	4618      	mov	r0, r3
 801190c:	f7fa fc34 	bl	800c178 <lwip_htons>
 8011910:	4603      	mov	r3, r0
 8011912:	b2db      	uxtb	r3, r3
 8011914:	f003 0302 	and.w	r3, r3, #2
 8011918:	2b00      	cmp	r3, #0
 801191a:	d005      	beq.n	8011928 <tcp_receive+0x760>
            inseg.len -= 1;
 801191c:	4b4c      	ldr	r3, [pc, #304]	@ (8011a50 <tcp_receive+0x888>)
 801191e:	891b      	ldrh	r3, [r3, #8]
 8011920:	3b01      	subs	r3, #1
 8011922:	b29a      	uxth	r2, r3
 8011924:	4b4a      	ldr	r3, [pc, #296]	@ (8011a50 <tcp_receive+0x888>)
 8011926:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011928:	4b49      	ldr	r3, [pc, #292]	@ (8011a50 <tcp_receive+0x888>)
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	4a48      	ldr	r2, [pc, #288]	@ (8011a50 <tcp_receive+0x888>)
 801192e:	8912      	ldrh	r2, [r2, #8]
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f7fb fec2 	bl	800d6bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011938:	4b45      	ldr	r3, [pc, #276]	@ (8011a50 <tcp_receive+0x888>)
 801193a:	891c      	ldrh	r4, [r3, #8]
 801193c:	4b44      	ldr	r3, [pc, #272]	@ (8011a50 <tcp_receive+0x888>)
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	899b      	ldrh	r3, [r3, #12]
 8011942:	b29b      	uxth	r3, r3
 8011944:	4618      	mov	r0, r3
 8011946:	f7fa fc17 	bl	800c178 <lwip_htons>
 801194a:	4603      	mov	r3, r0
 801194c:	b2db      	uxtb	r3, r3
 801194e:	f003 0303 	and.w	r3, r3, #3
 8011952:	2b00      	cmp	r3, #0
 8011954:	d001      	beq.n	801195a <tcp_receive+0x792>
 8011956:	2301      	movs	r3, #1
 8011958:	e000      	b.n	801195c <tcp_receive+0x794>
 801195a:	2300      	movs	r3, #0
 801195c:	4423      	add	r3, r4
 801195e:	b29a      	uxth	r2, r3
 8011960:	4b3c      	ldr	r3, [pc, #240]	@ (8011a54 <tcp_receive+0x88c>)
 8011962:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011964:	4b3b      	ldr	r3, [pc, #236]	@ (8011a54 <tcp_receive+0x88c>)
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	461a      	mov	r2, r3
 801196a:	4b38      	ldr	r3, [pc, #224]	@ (8011a4c <tcp_receive+0x884>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	441a      	add	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011974:	6879      	ldr	r1, [r7, #4]
 8011976:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011978:	440b      	add	r3, r1
 801197a:	429a      	cmp	r2, r3
 801197c:	d006      	beq.n	801198c <tcp_receive+0x7c4>
 801197e:	4b36      	ldr	r3, [pc, #216]	@ (8011a58 <tcp_receive+0x890>)
 8011980:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011984:	4935      	ldr	r1, [pc, #212]	@ (8011a5c <tcp_receive+0x894>)
 8011986:	4836      	ldr	r0, [pc, #216]	@ (8011a60 <tcp_receive+0x898>)
 8011988:	f005 ff86 	bl	8017898 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 80e6 	beq.w	8011b62 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011996:	4b2e      	ldr	r3, [pc, #184]	@ (8011a50 <tcp_receive+0x888>)
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	899b      	ldrh	r3, [r3, #12]
 801199c:	b29b      	uxth	r3, r3
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fa fbea 	bl	800c178 <lwip_htons>
 80119a4:	4603      	mov	r3, r0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d010      	beq.n	80119d2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80119b0:	e00a      	b.n	80119c8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119b6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119bc:	681a      	ldr	r2, [r3, #0]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f7fd fca7 	bl	800f316 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d1f0      	bne.n	80119b2 <tcp_receive+0x7ea>
 80119d0:	e0c7      	b.n	8011b62 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80119d8:	e051      	b.n	8011a7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80119da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	899b      	ldrh	r3, [r3, #12]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fa fbc8 	bl	800c178 <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d03c      	beq.n	8011a6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80119f4:	4b16      	ldr	r3, [pc, #88]	@ (8011a50 <tcp_receive+0x888>)
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	899b      	ldrh	r3, [r3, #12]
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fa fbbb 	bl	800c178 <lwip_htons>
 8011a02:	4603      	mov	r3, r0
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d12f      	bne.n	8011a6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011a0e:	4b10      	ldr	r3, [pc, #64]	@ (8011a50 <tcp_receive+0x888>)
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	899b      	ldrh	r3, [r3, #12]
 8011a14:	b29c      	uxth	r4, r3
 8011a16:	2001      	movs	r0, #1
 8011a18:	f7fa fbae 	bl	800c178 <lwip_htons>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	461a      	mov	r2, r3
 8011a20:	4b0b      	ldr	r3, [pc, #44]	@ (8011a50 <tcp_receive+0x888>)
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	4322      	orrs	r2, r4
 8011a26:	b292      	uxth	r2, r2
 8011a28:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011a2a:	4b09      	ldr	r3, [pc, #36]	@ (8011a50 <tcp_receive+0x888>)
 8011a2c:	891c      	ldrh	r4, [r3, #8]
 8011a2e:	4b08      	ldr	r3, [pc, #32]	@ (8011a50 <tcp_receive+0x888>)
 8011a30:	68db      	ldr	r3, [r3, #12]
 8011a32:	899b      	ldrh	r3, [r3, #12]
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fa fb9e 	bl	800c178 <lwip_htons>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	f003 0303 	and.w	r3, r3, #3
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00d      	beq.n	8011a64 <tcp_receive+0x89c>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	e00c      	b.n	8011a66 <tcp_receive+0x89e>
 8011a4c:	2000f0d0 	.word	0x2000f0d0
 8011a50:	2000f0b0 	.word	0x2000f0b0
 8011a54:	2000f0da 	.word	0x2000f0da
 8011a58:	0801ac4c 	.word	0x0801ac4c
 8011a5c:	0801aff4 	.word	0x0801aff4
 8011a60:	0801ac98 	.word	0x0801ac98
 8011a64:	2300      	movs	r3, #0
 8011a66:	4423      	add	r3, r4
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	4b98      	ldr	r3, [pc, #608]	@ (8011ccc <tcp_receive+0xb04>)
 8011a6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011a78:	6938      	ldr	r0, [r7, #16]
 8011a7a:	f7fd fc4c 	bl	800f316 <tcp_seg_free>
            while (next &&
 8011a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d00e      	beq.n	8011aa2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011a84:	4b91      	ldr	r3, [pc, #580]	@ (8011ccc <tcp_receive+0xb04>)
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	4b91      	ldr	r3, [pc, #580]	@ (8011cd0 <tcp_receive+0xb08>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	441a      	add	r2, r3
 8011a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a98:	8909      	ldrh	r1, [r1, #8]
 8011a9a:	440b      	add	r3, r1
 8011a9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	da9b      	bge.n	80119da <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d059      	beq.n	8011b5c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011aa8:	4b88      	ldr	r3, [pc, #544]	@ (8011ccc <tcp_receive+0xb04>)
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	461a      	mov	r2, r3
 8011aae:	4b88      	ldr	r3, [pc, #544]	@ (8011cd0 <tcp_receive+0xb08>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	441a      	add	r2, r3
 8011ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	dd4d      	ble.n	8011b5c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	685b      	ldr	r3, [r3, #4]
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	4b81      	ldr	r3, [pc, #516]	@ (8011cd0 <tcp_receive+0xb08>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	1ad3      	subs	r3, r2, r3
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	4b80      	ldr	r3, [pc, #512]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011ad4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ad6:	4b7f      	ldr	r3, [pc, #508]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	899b      	ldrh	r3, [r3, #12]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7fa fb4a 	bl	800c178 <lwip_htons>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	f003 0302 	and.w	r3, r3, #2
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d005      	beq.n	8011afc <tcp_receive+0x934>
                inseg.len -= 1;
 8011af0:	4b78      	ldr	r3, [pc, #480]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011af2:	891b      	ldrh	r3, [r3, #8]
 8011af4:	3b01      	subs	r3, #1
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	4b76      	ldr	r3, [pc, #472]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011afa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011afc:	4b75      	ldr	r3, [pc, #468]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011afe:	685b      	ldr	r3, [r3, #4]
 8011b00:	4a74      	ldr	r2, [pc, #464]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011b02:	8912      	ldrh	r2, [r2, #8]
 8011b04:	4611      	mov	r1, r2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fb fdd8 	bl	800d6bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011b0c:	4b71      	ldr	r3, [pc, #452]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011b0e:	891c      	ldrh	r4, [r3, #8]
 8011b10:	4b70      	ldr	r3, [pc, #448]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fa fb2d 	bl	800c178 <lwip_htons>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	f003 0303 	and.w	r3, r3, #3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <tcp_receive+0x966>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e000      	b.n	8011b30 <tcp_receive+0x968>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	4423      	add	r3, r4
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	4b65      	ldr	r3, [pc, #404]	@ (8011ccc <tcp_receive+0xb04>)
 8011b36:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011b38:	4b64      	ldr	r3, [pc, #400]	@ (8011ccc <tcp_receive+0xb04>)
 8011b3a:	881b      	ldrh	r3, [r3, #0]
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	4b64      	ldr	r3, [pc, #400]	@ (8011cd0 <tcp_receive+0xb08>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	441a      	add	r2, r3
 8011b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d006      	beq.n	8011b5c <tcp_receive+0x994>
 8011b4e:	4b62      	ldr	r3, [pc, #392]	@ (8011cd8 <tcp_receive+0xb10>)
 8011b50:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011b54:	4961      	ldr	r1, [pc, #388]	@ (8011cdc <tcp_receive+0xb14>)
 8011b56:	4862      	ldr	r0, [pc, #392]	@ (8011ce0 <tcp_receive+0xb18>)
 8011b58:	f005 fe9e 	bl	8017898 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b60:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011b62:	4b5a      	ldr	r3, [pc, #360]	@ (8011ccc <tcp_receive+0xb04>)
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	4b59      	ldr	r3, [pc, #356]	@ (8011cd0 <tcp_receive+0xb08>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	441a      	add	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011b76:	4b55      	ldr	r3, [pc, #340]	@ (8011ccc <tcp_receive+0xb04>)
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d206      	bcs.n	8011b8c <tcp_receive+0x9c4>
 8011b7e:	4b56      	ldr	r3, [pc, #344]	@ (8011cd8 <tcp_receive+0xb10>)
 8011b80:	f240 6207 	movw	r2, #1543	@ 0x607
 8011b84:	4957      	ldr	r1, [pc, #348]	@ (8011ce4 <tcp_receive+0xb1c>)
 8011b86:	4856      	ldr	r0, [pc, #344]	@ (8011ce0 <tcp_receive+0xb18>)
 8011b88:	f005 fe86 	bl	8017898 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011b90:	4b4e      	ldr	r3, [pc, #312]	@ (8011ccc <tcp_receive+0xb04>)
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7fc fe93 	bl	800e8c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011ba4:	685b      	ldr	r3, [r3, #4]
 8011ba6:	891b      	ldrh	r3, [r3, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d006      	beq.n	8011bba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011bac:	4b49      	ldr	r3, [pc, #292]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8011ce8 <tcp_receive+0xb20>)
 8011bb2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011bb4:	4b47      	ldr	r3, [pc, #284]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bba:	4b46      	ldr	r3, [pc, #280]	@ (8011cd4 <tcp_receive+0xb0c>)
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	899b      	ldrh	r3, [r3, #12]
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fa fad8 	bl	800c178 <lwip_htons>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	b2db      	uxtb	r3, r3
 8011bcc:	f003 0301 	and.w	r3, r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f000 80b8 	beq.w	8011d46 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011bd6:	4b45      	ldr	r3, [pc, #276]	@ (8011cec <tcp_receive+0xb24>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	f043 0320 	orr.w	r3, r3, #32
 8011bde:	b2da      	uxtb	r2, r3
 8011be0:	4b42      	ldr	r3, [pc, #264]	@ (8011cec <tcp_receive+0xb24>)
 8011be2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011be4:	e0af      	b.n	8011d46 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	4a36      	ldr	r2, [pc, #216]	@ (8011cd0 <tcp_receive+0xb08>)
 8011bf6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	891b      	ldrh	r3, [r3, #8]
 8011bfc:	461c      	mov	r4, r3
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	899b      	ldrh	r3, [r3, #12]
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7fa fab6 	bl	800c178 <lwip_htons>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	f003 0303 	and.w	r3, r3, #3
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d001      	beq.n	8011c1c <tcp_receive+0xa54>
 8011c18:	2301      	movs	r3, #1
 8011c1a:	e000      	b.n	8011c1e <tcp_receive+0xa56>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	191a      	adds	r2, r3, r4
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c24:	441a      	add	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c2e:	461c      	mov	r4, r3
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	891b      	ldrh	r3, [r3, #8]
 8011c34:	461d      	mov	r5, r3
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	899b      	ldrh	r3, [r3, #12]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fa fa9a 	bl	800c178 <lwip_htons>
 8011c44:	4603      	mov	r3, r0
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	f003 0303 	and.w	r3, r3, #3
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <tcp_receive+0xa8c>
 8011c50:	2301      	movs	r3, #1
 8011c52:	e000      	b.n	8011c56 <tcp_receive+0xa8e>
 8011c54:	2300      	movs	r3, #0
 8011c56:	442b      	add	r3, r5
 8011c58:	429c      	cmp	r4, r3
 8011c5a:	d206      	bcs.n	8011c6a <tcp_receive+0xaa2>
 8011c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8011cd8 <tcp_receive+0xb10>)
 8011c5e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011c62:	4923      	ldr	r1, [pc, #140]	@ (8011cf0 <tcp_receive+0xb28>)
 8011c64:	481e      	ldr	r0, [pc, #120]	@ (8011ce0 <tcp_receive+0xb18>)
 8011c66:	f005 fe17 	bl	8017898 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	891b      	ldrh	r3, [r3, #8]
 8011c6e:	461c      	mov	r4, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	899b      	ldrh	r3, [r3, #12]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fa fa7d 	bl	800c178 <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	f003 0303 	and.w	r3, r3, #3
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <tcp_receive+0xac6>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e000      	b.n	8011c90 <tcp_receive+0xac8>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	1919      	adds	r1, r3, r4
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011c96:	b28b      	uxth	r3, r1
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f7fc fe11 	bl	800e8c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	891b      	ldrh	r3, [r3, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d028      	beq.n	8011d02 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce8 <tcp_receive+0xb20>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d01d      	beq.n	8011cf4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8011ce8 <tcp_receive+0xb20>)
 8011cba:	681a      	ldr	r2, [r3, #0]
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	f7fb ff4e 	bl	800db64 <pbuf_cat>
 8011cc8:	e018      	b.n	8011cfc <tcp_receive+0xb34>
 8011cca:	bf00      	nop
 8011ccc:	2000f0da 	.word	0x2000f0da
 8011cd0:	2000f0d0 	.word	0x2000f0d0
 8011cd4:	2000f0b0 	.word	0x2000f0b0
 8011cd8:	0801ac4c 	.word	0x0801ac4c
 8011cdc:	0801b02c 	.word	0x0801b02c
 8011ce0:	0801ac98 	.word	0x0801ac98
 8011ce4:	0801b068 	.word	0x0801b068
 8011ce8:	2000f0e0 	.word	0x2000f0e0
 8011cec:	2000f0dd 	.word	0x2000f0dd
 8011cf0:	0801b088 	.word	0x0801b088
            } else {
              recv_data = cseg->p;
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	4a70      	ldr	r2, [pc, #448]	@ (8011ebc <tcp_receive+0xcf4>)
 8011cfa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	899b      	ldrh	r3, [r3, #12]
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7fa fa34 	bl	800c178 <lwip_htons>
 8011d10:	4603      	mov	r3, r0
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	f003 0301 	and.w	r3, r3, #1
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d00d      	beq.n	8011d38 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011d1c:	4b68      	ldr	r3, [pc, #416]	@ (8011ec0 <tcp_receive+0xcf8>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f043 0320 	orr.w	r3, r3, #32
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	4b66      	ldr	r3, [pc, #408]	@ (8011ec0 <tcp_receive+0xcf8>)
 8011d28:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7d1b      	ldrb	r3, [r3, #20]
 8011d2e:	2b04      	cmp	r3, #4
 8011d30:	d102      	bne.n	8011d38 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2207      	movs	r2, #7
 8011d36:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011d40:	68b8      	ldr	r0, [r7, #8]
 8011d42:	f7fd fae8 	bl	800f316 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d008      	beq.n	8011d60 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	685a      	ldr	r2, [r3, #4]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	f43f af43 	beq.w	8011be6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	8b5b      	ldrh	r3, [r3, #26]
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00e      	beq.n	8011d8a <tcp_receive+0xbc2>
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	8b5b      	ldrh	r3, [r3, #26]
 8011d70:	f023 0301 	bic.w	r3, r3, #1
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	835a      	strh	r2, [r3, #26]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8b5b      	ldrh	r3, [r3, #26]
 8011d7e:	f043 0302 	orr.w	r3, r3, #2
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011d88:	e187      	b.n	801209a <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	8b5b      	ldrh	r3, [r3, #26]
 8011d8e:	f043 0301 	orr.w	r3, r3, #1
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011d98:	e17f      	b.n	801209a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011da2:	4848      	ldr	r0, [pc, #288]	@ (8011ec4 <tcp_receive+0xcfc>)
 8011da4:	f7fd faee 	bl	800f384 <tcp_seg_copy>
 8011da8:	4602      	mov	r2, r0
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	675a      	str	r2, [r3, #116]	@ 0x74
 8011dae:	e16c      	b.n	801208a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011db0:	2300      	movs	r3, #0
 8011db2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011db8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011dba:	e156      	b.n	801206a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	685a      	ldr	r2, [r3, #4]
 8011dc2:	4b41      	ldr	r3, [pc, #260]	@ (8011ec8 <tcp_receive+0xd00>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d11d      	bne.n	8011e06 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011dca:	4b3e      	ldr	r3, [pc, #248]	@ (8011ec4 <tcp_receive+0xcfc>)
 8011dcc:	891a      	ldrh	r2, [r3, #8]
 8011dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dd0:	891b      	ldrh	r3, [r3, #8]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	f240 814e 	bls.w	8012074 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011dd8:	483a      	ldr	r0, [pc, #232]	@ (8011ec4 <tcp_receive+0xcfc>)
 8011dda:	f7fd fad3 	bl	800f384 <tcp_seg_copy>
 8011dde:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f000 8148 	beq.w	8012078 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d003      	beq.n	8011df6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011df0:	697a      	ldr	r2, [r7, #20]
 8011df2:	601a      	str	r2, [r3, #0]
 8011df4:	e002      	b.n	8011dfc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	697a      	ldr	r2, [r7, #20]
 8011dfa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011dfc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011dfe:	6978      	ldr	r0, [r7, #20]
 8011e00:	f7ff f8de 	bl	8010fc0 <tcp_oos_insert_segment>
                }
                break;
 8011e04:	e138      	b.n	8012078 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d117      	bne.n	8011e3c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8011ec8 <tcp_receive+0xd00>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	1ad3      	subs	r3, r2, r3
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	da57      	bge.n	8011ecc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011e1c:	4829      	ldr	r0, [pc, #164]	@ (8011ec4 <tcp_receive+0xcfc>)
 8011e1e:	f7fd fab1 	bl	800f384 <tcp_seg_copy>
 8011e22:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f000 8128 	beq.w	801207c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	69ba      	ldr	r2, [r7, #24]
 8011e30:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011e32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011e34:	69b8      	ldr	r0, [r7, #24]
 8011e36:	f7ff f8c3 	bl	8010fc0 <tcp_oos_insert_segment>
                  }
                  break;
 8011e3a:	e11f      	b.n	801207c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011e3c:	4b22      	ldr	r3, [pc, #136]	@ (8011ec8 <tcp_receive+0xd00>)
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	3b01      	subs	r3, #1
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	db3e      	blt.n	8011ecc <tcp_receive+0xd04>
 8011e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ec8 <tcp_receive+0xd00>)
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	dc35      	bgt.n	8011ecc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011e60:	4818      	ldr	r0, [pc, #96]	@ (8011ec4 <tcp_receive+0xcfc>)
 8011e62:	f7fd fa8f 	bl	800f384 <tcp_seg_copy>
 8011e66:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f000 8108 	beq.w	8012080 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	685b      	ldr	r3, [r3, #4]
 8011e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e78:	8912      	ldrh	r2, [r2, #8]
 8011e7a:	441a      	add	r2, r3
 8011e7c:	4b12      	ldr	r3, [pc, #72]	@ (8011ec8 <tcp_receive+0xd00>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	1ad3      	subs	r3, r2, r3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	dd12      	ble.n	8011eac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011e86:	4b10      	ldr	r3, [pc, #64]	@ (8011ec8 <tcp_receive+0xd00>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	1ad3      	subs	r3, r2, r3
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e9a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ea2:	891b      	ldrh	r3, [r3, #8]
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	4610      	mov	r0, r2
 8011ea8:	f7fb fc08 	bl	800d6bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eae:	69fa      	ldr	r2, [r7, #28]
 8011eb0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011eb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011eb4:	69f8      	ldr	r0, [r7, #28]
 8011eb6:	f7ff f883 	bl	8010fc0 <tcp_oos_insert_segment>
                  }
                  break;
 8011eba:	e0e1      	b.n	8012080 <tcp_receive+0xeb8>
 8011ebc:	2000f0e0 	.word	0x2000f0e0
 8011ec0:	2000f0dd 	.word	0x2000f0dd
 8011ec4:	2000f0b0 	.word	0x2000f0b0
 8011ec8:	2000f0d0 	.word	0x2000f0d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ece:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	f040 80c5 	bne.w	8012064 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011eda:	4b7f      	ldr	r3, [pc, #508]	@ (80120d8 <tcp_receive+0xf10>)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f340 80bc 	ble.w	8012064 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	899b      	ldrh	r3, [r3, #12]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fa f93f 	bl	800c178 <lwip_htons>
 8011efa:	4603      	mov	r3, r0
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	f003 0301 	and.w	r3, r3, #1
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f040 80be 	bne.w	8012084 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011f08:	4874      	ldr	r0, [pc, #464]	@ (80120dc <tcp_receive+0xf14>)
 8011f0a:	f7fd fa3b 	bl	800f384 <tcp_seg_copy>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	f000 80b5 	beq.w	8012088 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f26:	8912      	ldrh	r2, [r2, #8]
 8011f28:	441a      	add	r2, r3
 8011f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80120d8 <tcp_receive+0xf10>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	dd12      	ble.n	8011f5a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011f34:	4b68      	ldr	r3, [pc, #416]	@ (80120d8 <tcp_receive+0xf10>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	b29a      	uxth	r2, r3
 8011f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f4c:	685a      	ldr	r2, [r3, #4]
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f50:	891b      	ldrh	r3, [r3, #8]
 8011f52:	4619      	mov	r1, r3
 8011f54:	4610      	mov	r0, r2
 8011f56:	f7fb fbb1 	bl	800d6bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011f5a:	4b61      	ldr	r3, [pc, #388]	@ (80120e0 <tcp_receive+0xf18>)
 8011f5c:	881b      	ldrh	r3, [r3, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	4b5d      	ldr	r3, [pc, #372]	@ (80120d8 <tcp_receive+0xf10>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	441a      	add	r2, r3
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f6a:	6879      	ldr	r1, [r7, #4]
 8011f6c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011f6e:	440b      	add	r3, r1
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f340 8088 	ble.w	8012088 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	899b      	ldrh	r3, [r3, #12]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fa f8f8 	bl	800c178 <lwip_htons>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d021      	beq.n	8011fd8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	899b      	ldrh	r3, [r3, #12]
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	b21b      	sxth	r3, r3
 8011fa0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011fa4:	b21c      	sxth	r4, r3
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	899b      	ldrh	r3, [r3, #12]
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fa f8e1 	bl	800c178 <lwip_htons>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f7fa f8d9 	bl	800c178 <lwip_htons>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	b21b      	sxth	r3, r3
 8011fca:	4323      	orrs	r3, r4
 8011fcc:	b21a      	sxth	r2, r3
 8011fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fe2:	4413      	add	r3, r2
 8011fe4:	b299      	uxth	r1, r3
 8011fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80120d8 <tcp_receive+0xf10>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	1a8a      	subs	r2, r1, r2
 8011ff2:	b292      	uxth	r2, r2
 8011ff4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	685a      	ldr	r2, [r3, #4]
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	891b      	ldrh	r3, [r3, #8]
 8012002:	4619      	mov	r1, r3
 8012004:	4610      	mov	r0, r2
 8012006:	f7fb fb59 	bl	800d6bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	891c      	ldrh	r4, [r3, #8]
 8012010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	68db      	ldr	r3, [r3, #12]
 8012016:	899b      	ldrh	r3, [r3, #12]
 8012018:	b29b      	uxth	r3, r3
 801201a:	4618      	mov	r0, r3
 801201c:	f7fa f8ac 	bl	800c178 <lwip_htons>
 8012020:	4603      	mov	r3, r0
 8012022:	b2db      	uxtb	r3, r3
 8012024:	f003 0303 	and.w	r3, r3, #3
 8012028:	2b00      	cmp	r3, #0
 801202a:	d001      	beq.n	8012030 <tcp_receive+0xe68>
 801202c:	2301      	movs	r3, #1
 801202e:	e000      	b.n	8012032 <tcp_receive+0xe6a>
 8012030:	2300      	movs	r3, #0
 8012032:	4423      	add	r3, r4
 8012034:	b29a      	uxth	r2, r3
 8012036:	4b2a      	ldr	r3, [pc, #168]	@ (80120e0 <tcp_receive+0xf18>)
 8012038:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801203a:	4b29      	ldr	r3, [pc, #164]	@ (80120e0 <tcp_receive+0xf18>)
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	4b25      	ldr	r3, [pc, #148]	@ (80120d8 <tcp_receive+0xf10>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	441a      	add	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801204a:	6879      	ldr	r1, [r7, #4]
 801204c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801204e:	440b      	add	r3, r1
 8012050:	429a      	cmp	r2, r3
 8012052:	d019      	beq.n	8012088 <tcp_receive+0xec0>
 8012054:	4b23      	ldr	r3, [pc, #140]	@ (80120e4 <tcp_receive+0xf1c>)
 8012056:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801205a:	4923      	ldr	r1, [pc, #140]	@ (80120e8 <tcp_receive+0xf20>)
 801205c:	4823      	ldr	r0, [pc, #140]	@ (80120ec <tcp_receive+0xf24>)
 801205e:	f005 fc1b 	bl	8017898 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012062:	e011      	b.n	8012088 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	63bb      	str	r3, [r7, #56]	@ 0x38
 801206a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801206c:	2b00      	cmp	r3, #0
 801206e:	f47f aea5 	bne.w	8011dbc <tcp_receive+0xbf4>
 8012072:	e00a      	b.n	801208a <tcp_receive+0xec2>
                break;
 8012074:	bf00      	nop
 8012076:	e008      	b.n	801208a <tcp_receive+0xec2>
                break;
 8012078:	bf00      	nop
 801207a:	e006      	b.n	801208a <tcp_receive+0xec2>
                  break;
 801207c:	bf00      	nop
 801207e:	e004      	b.n	801208a <tcp_receive+0xec2>
                  break;
 8012080:	bf00      	nop
 8012082:	e002      	b.n	801208a <tcp_receive+0xec2>
                  break;
 8012084:	bf00      	nop
 8012086:	e000      	b.n	801208a <tcp_receive+0xec2>
                break;
 8012088:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f001 fe88 	bl	8013da0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012090:	e003      	b.n	801209a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f001 fe84 	bl	8013da0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012098:	e01a      	b.n	80120d0 <tcp_receive+0xf08>
 801209a:	e019      	b.n	80120d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801209c:	4b0e      	ldr	r3, [pc, #56]	@ (80120d8 <tcp_receive+0xf10>)
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a4:	1ad3      	subs	r3, r2, r3
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	db0a      	blt.n	80120c0 <tcp_receive+0xef8>
 80120aa:	4b0b      	ldr	r3, [pc, #44]	@ (80120d8 <tcp_receive+0xf10>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b2:	6879      	ldr	r1, [r7, #4]
 80120b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80120b6:	440b      	add	r3, r1
 80120b8:	1ad3      	subs	r3, r2, r3
 80120ba:	3301      	adds	r3, #1
 80120bc:	2b00      	cmp	r3, #0
 80120be:	dd07      	ble.n	80120d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	8b5b      	ldrh	r3, [r3, #26]
 80120c4:	f043 0302 	orr.w	r3, r3, #2
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80120ce:	e7ff      	b.n	80120d0 <tcp_receive+0xf08>
 80120d0:	bf00      	nop
 80120d2:	3750      	adds	r7, #80	@ 0x50
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bdb0      	pop	{r4, r5, r7, pc}
 80120d8:	2000f0d0 	.word	0x2000f0d0
 80120dc:	2000f0b0 	.word	0x2000f0b0
 80120e0:	2000f0da 	.word	0x2000f0da
 80120e4:	0801ac4c 	.word	0x0801ac4c
 80120e8:	0801aff4 	.word	0x0801aff4
 80120ec:	0801ac98 	.word	0x0801ac98

080120f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b083      	sub	sp, #12
 80120f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80120f6:	4b15      	ldr	r3, [pc, #84]	@ (801214c <tcp_get_next_optbyte+0x5c>)
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	1c5a      	adds	r2, r3, #1
 80120fc:	b291      	uxth	r1, r2
 80120fe:	4a13      	ldr	r2, [pc, #76]	@ (801214c <tcp_get_next_optbyte+0x5c>)
 8012100:	8011      	strh	r1, [r2, #0]
 8012102:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012104:	4b12      	ldr	r3, [pc, #72]	@ (8012150 <tcp_get_next_optbyte+0x60>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d004      	beq.n	8012116 <tcp_get_next_optbyte+0x26>
 801210c:	4b11      	ldr	r3, [pc, #68]	@ (8012154 <tcp_get_next_optbyte+0x64>)
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	88fa      	ldrh	r2, [r7, #6]
 8012112:	429a      	cmp	r2, r3
 8012114:	d208      	bcs.n	8012128 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012116:	4b10      	ldr	r3, [pc, #64]	@ (8012158 <tcp_get_next_optbyte+0x68>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	3314      	adds	r3, #20
 801211c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801211e:	88fb      	ldrh	r3, [r7, #6]
 8012120:	683a      	ldr	r2, [r7, #0]
 8012122:	4413      	add	r3, r2
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	e00b      	b.n	8012140 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012128:	88fb      	ldrh	r3, [r7, #6]
 801212a:	b2da      	uxtb	r2, r3
 801212c:	4b09      	ldr	r3, [pc, #36]	@ (8012154 <tcp_get_next_optbyte+0x64>)
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	b2db      	uxtb	r3, r3
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012136:	4b06      	ldr	r3, [pc, #24]	@ (8012150 <tcp_get_next_optbyte+0x60>)
 8012138:	681a      	ldr	r2, [r3, #0]
 801213a:	797b      	ldrb	r3, [r7, #5]
 801213c:	4413      	add	r3, r2
 801213e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012140:	4618      	mov	r0, r3
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	2000f0cc 	.word	0x2000f0cc
 8012150:	2000f0c8 	.word	0x2000f0c8
 8012154:	2000f0c6 	.word	0x2000f0c6
 8012158:	2000f0c0 	.word	0x2000f0c0

0801215c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d106      	bne.n	8012178 <tcp_parseopt+0x1c>
 801216a:	4b32      	ldr	r3, [pc, #200]	@ (8012234 <tcp_parseopt+0xd8>)
 801216c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012170:	4931      	ldr	r1, [pc, #196]	@ (8012238 <tcp_parseopt+0xdc>)
 8012172:	4832      	ldr	r0, [pc, #200]	@ (801223c <tcp_parseopt+0xe0>)
 8012174:	f005 fb90 	bl	8017898 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012178:	4b31      	ldr	r3, [pc, #196]	@ (8012240 <tcp_parseopt+0xe4>)
 801217a:	881b      	ldrh	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d056      	beq.n	801222e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012180:	4b30      	ldr	r3, [pc, #192]	@ (8012244 <tcp_parseopt+0xe8>)
 8012182:	2200      	movs	r2, #0
 8012184:	801a      	strh	r2, [r3, #0]
 8012186:	e046      	b.n	8012216 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012188:	f7ff ffb2 	bl	80120f0 <tcp_get_next_optbyte>
 801218c:	4603      	mov	r3, r0
 801218e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012190:	7bfb      	ldrb	r3, [r7, #15]
 8012192:	2b02      	cmp	r3, #2
 8012194:	d006      	beq.n	80121a4 <tcp_parseopt+0x48>
 8012196:	2b02      	cmp	r3, #2
 8012198:	dc2a      	bgt.n	80121f0 <tcp_parseopt+0x94>
 801219a:	2b00      	cmp	r3, #0
 801219c:	d042      	beq.n	8012224 <tcp_parseopt+0xc8>
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d038      	beq.n	8012214 <tcp_parseopt+0xb8>
 80121a2:	e025      	b.n	80121f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80121a4:	f7ff ffa4 	bl	80120f0 <tcp_get_next_optbyte>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b04      	cmp	r3, #4
 80121ac:	d13c      	bne.n	8012228 <tcp_parseopt+0xcc>
 80121ae:	4b25      	ldr	r3, [pc, #148]	@ (8012244 <tcp_parseopt+0xe8>)
 80121b0:	881b      	ldrh	r3, [r3, #0]
 80121b2:	3301      	adds	r3, #1
 80121b4:	4a22      	ldr	r2, [pc, #136]	@ (8012240 <tcp_parseopt+0xe4>)
 80121b6:	8812      	ldrh	r2, [r2, #0]
 80121b8:	4293      	cmp	r3, r2
 80121ba:	da35      	bge.n	8012228 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80121bc:	f7ff ff98 	bl	80120f0 <tcp_get_next_optbyte>
 80121c0:	4603      	mov	r3, r0
 80121c2:	021b      	lsls	r3, r3, #8
 80121c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80121c6:	f7ff ff93 	bl	80120f0 <tcp_get_next_optbyte>
 80121ca:	4603      	mov	r3, r0
 80121cc:	461a      	mov	r2, r3
 80121ce:	89bb      	ldrh	r3, [r7, #12]
 80121d0:	4313      	orrs	r3, r2
 80121d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80121d4:	89bb      	ldrh	r3, [r7, #12]
 80121d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80121da:	d804      	bhi.n	80121e6 <tcp_parseopt+0x8a>
 80121dc:	89bb      	ldrh	r3, [r7, #12]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d001      	beq.n	80121e6 <tcp_parseopt+0x8a>
 80121e2:	89ba      	ldrh	r2, [r7, #12]
 80121e4:	e001      	b.n	80121ea <tcp_parseopt+0x8e>
 80121e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80121ee:	e012      	b.n	8012216 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80121f0:	f7ff ff7e 	bl	80120f0 <tcp_get_next_optbyte>
 80121f4:	4603      	mov	r3, r0
 80121f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80121f8:	7afb      	ldrb	r3, [r7, #11]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d916      	bls.n	801222c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80121fe:	7afb      	ldrb	r3, [r7, #11]
 8012200:	b29a      	uxth	r2, r3
 8012202:	4b10      	ldr	r3, [pc, #64]	@ (8012244 <tcp_parseopt+0xe8>)
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	4413      	add	r3, r2
 8012208:	b29b      	uxth	r3, r3
 801220a:	3b02      	subs	r3, #2
 801220c:	b29a      	uxth	r2, r3
 801220e:	4b0d      	ldr	r3, [pc, #52]	@ (8012244 <tcp_parseopt+0xe8>)
 8012210:	801a      	strh	r2, [r3, #0]
 8012212:	e000      	b.n	8012216 <tcp_parseopt+0xba>
          break;
 8012214:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012216:	4b0b      	ldr	r3, [pc, #44]	@ (8012244 <tcp_parseopt+0xe8>)
 8012218:	881a      	ldrh	r2, [r3, #0]
 801221a:	4b09      	ldr	r3, [pc, #36]	@ (8012240 <tcp_parseopt+0xe4>)
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	429a      	cmp	r2, r3
 8012220:	d3b2      	bcc.n	8012188 <tcp_parseopt+0x2c>
 8012222:	e004      	b.n	801222e <tcp_parseopt+0xd2>
          return;
 8012224:	bf00      	nop
 8012226:	e002      	b.n	801222e <tcp_parseopt+0xd2>
            return;
 8012228:	bf00      	nop
 801222a:	e000      	b.n	801222e <tcp_parseopt+0xd2>
            return;
 801222c:	bf00      	nop
      }
    }
  }
}
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	0801ac4c 	.word	0x0801ac4c
 8012238:	0801b0b0 	.word	0x0801b0b0
 801223c:	0801ac98 	.word	0x0801ac98
 8012240:	2000f0c4 	.word	0x2000f0c4
 8012244:	2000f0cc 	.word	0x2000f0cc

08012248 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012248:	b480      	push	{r7}
 801224a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801224c:	4b05      	ldr	r3, [pc, #20]	@ (8012264 <tcp_trigger_input_pcb_close+0x1c>)
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	f043 0310 	orr.w	r3, r3, #16
 8012254:	b2da      	uxtb	r2, r3
 8012256:	4b03      	ldr	r3, [pc, #12]	@ (8012264 <tcp_trigger_input_pcb_close+0x1c>)
 8012258:	701a      	strb	r2, [r3, #0]
}
 801225a:	bf00      	nop
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	2000f0dd 	.word	0x2000f0dd

08012268 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <tcp_route+0x28>
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	7a1b      	ldrb	r3, [r3, #8]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	7a1b      	ldrb	r3, [r3, #8]
 8012286:	4618      	mov	r0, r3
 8012288:	f7fb f810 	bl	800d2ac <netif_get_by_index>
 801228c:	4603      	mov	r3, r0
 801228e:	e003      	b.n	8012298 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f003 fe33 	bl	8015efc <ip4_route>
 8012296:	4603      	mov	r3, r0
  }
}
 8012298:	4618      	mov	r0, r3
 801229a:	3710      	adds	r7, #16
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80122a0:	b590      	push	{r4, r7, lr}
 80122a2:	b087      	sub	sp, #28
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	603b      	str	r3, [r7, #0]
 80122ac:	4613      	mov	r3, r2
 80122ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d105      	bne.n	80122c2 <tcp_create_segment+0x22>
 80122b6:	4b43      	ldr	r3, [pc, #268]	@ (80123c4 <tcp_create_segment+0x124>)
 80122b8:	22a3      	movs	r2, #163	@ 0xa3
 80122ba:	4943      	ldr	r1, [pc, #268]	@ (80123c8 <tcp_create_segment+0x128>)
 80122bc:	4843      	ldr	r0, [pc, #268]	@ (80123cc <tcp_create_segment+0x12c>)
 80122be:	f005 faeb 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d105      	bne.n	80122d4 <tcp_create_segment+0x34>
 80122c8:	4b3e      	ldr	r3, [pc, #248]	@ (80123c4 <tcp_create_segment+0x124>)
 80122ca:	22a4      	movs	r2, #164	@ 0xa4
 80122cc:	4940      	ldr	r1, [pc, #256]	@ (80123d0 <tcp_create_segment+0x130>)
 80122ce:	483f      	ldr	r0, [pc, #252]	@ (80123cc <tcp_create_segment+0x12c>)
 80122d0:	f005 fae2 	bl	8017898 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80122d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80122d8:	009b      	lsls	r3, r3, #2
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	f003 0304 	and.w	r3, r3, #4
 80122e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80122e2:	2003      	movs	r0, #3
 80122e4:	f7fa fc56 	bl	800cb94 <memp_malloc>
 80122e8:	6138      	str	r0, [r7, #16]
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d104      	bne.n	80122fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80122f0:	68b8      	ldr	r0, [r7, #8]
 80122f2:	f7fb fb69 	bl	800d9c8 <pbuf_free>
    return NULL;
 80122f6:	2300      	movs	r3, #0
 80122f8:	e060      	b.n	80123bc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012300:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	2200      	movs	r2, #0
 8012306:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	68ba      	ldr	r2, [r7, #8]
 801230c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	891a      	ldrh	r2, [r3, #8]
 8012312:	7dfb      	ldrb	r3, [r7, #23]
 8012314:	b29b      	uxth	r3, r3
 8012316:	429a      	cmp	r2, r3
 8012318:	d205      	bcs.n	8012326 <tcp_create_segment+0x86>
 801231a:	4b2a      	ldr	r3, [pc, #168]	@ (80123c4 <tcp_create_segment+0x124>)
 801231c:	22b0      	movs	r2, #176	@ 0xb0
 801231e:	492d      	ldr	r1, [pc, #180]	@ (80123d4 <tcp_create_segment+0x134>)
 8012320:	482a      	ldr	r0, [pc, #168]	@ (80123cc <tcp_create_segment+0x12c>)
 8012322:	f005 fab9 	bl	8017898 <iprintf>
  seg->len = p->tot_len - optlen;
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	891a      	ldrh	r2, [r3, #8]
 801232a:	7dfb      	ldrb	r3, [r7, #23]
 801232c:	b29b      	uxth	r3, r3
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	b29a      	uxth	r2, r3
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012336:	2114      	movs	r1, #20
 8012338:	68b8      	ldr	r0, [r7, #8]
 801233a:	f7fb faaf 	bl	800d89c <pbuf_add_header>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d004      	beq.n	801234e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012344:	6938      	ldr	r0, [r7, #16]
 8012346:	f7fc ffe6 	bl	800f316 <tcp_seg_free>
    return NULL;
 801234a:	2300      	movs	r3, #0
 801234c:	e036      	b.n	80123bc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	8ada      	ldrh	r2, [r3, #22]
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	68dc      	ldr	r4, [r3, #12]
 8012360:	4610      	mov	r0, r2
 8012362:	f7f9 ff09 	bl	800c178 <lwip_htons>
 8012366:	4603      	mov	r3, r0
 8012368:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	8b1a      	ldrh	r2, [r3, #24]
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	68dc      	ldr	r4, [r3, #12]
 8012372:	4610      	mov	r0, r2
 8012374:	f7f9 ff00 	bl	800c178 <lwip_htons>
 8012378:	4603      	mov	r3, r0
 801237a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801237c:	693b      	ldr	r3, [r7, #16]
 801237e:	68dc      	ldr	r4, [r3, #12]
 8012380:	6838      	ldr	r0, [r7, #0]
 8012382:	f7f9 ff0e 	bl	800c1a2 <lwip_htonl>
 8012386:	4603      	mov	r3, r0
 8012388:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801238a:	7dfb      	ldrb	r3, [r7, #23]
 801238c:	089b      	lsrs	r3, r3, #2
 801238e:	b2db      	uxtb	r3, r3
 8012390:	3305      	adds	r3, #5
 8012392:	b29b      	uxth	r3, r3
 8012394:	031b      	lsls	r3, r3, #12
 8012396:	b29a      	uxth	r2, r3
 8012398:	79fb      	ldrb	r3, [r7, #7]
 801239a:	b29b      	uxth	r3, r3
 801239c:	4313      	orrs	r3, r2
 801239e:	b29a      	uxth	r2, r3
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	68dc      	ldr	r4, [r3, #12]
 80123a4:	4610      	mov	r0, r2
 80123a6:	f7f9 fee7 	bl	800c178 <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	2200      	movs	r2, #0
 80123b4:	749a      	strb	r2, [r3, #18]
 80123b6:	2200      	movs	r2, #0
 80123b8:	74da      	strb	r2, [r3, #19]
  return seg;
 80123ba:	693b      	ldr	r3, [r7, #16]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	371c      	adds	r7, #28
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd90      	pop	{r4, r7, pc}
 80123c4:	0801b0cc 	.word	0x0801b0cc
 80123c8:	0801b100 	.word	0x0801b100
 80123cc:	0801b120 	.word	0x0801b120
 80123d0:	0801b148 	.word	0x0801b148
 80123d4:	0801b16c 	.word	0x0801b16c

080123d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
 80123de:	607b      	str	r3, [r7, #4]
 80123e0:	4603      	mov	r3, r0
 80123e2:	73fb      	strb	r3, [r7, #15]
 80123e4:	460b      	mov	r3, r1
 80123e6:	81bb      	strh	r3, [r7, #12]
 80123e8:	4613      	mov	r3, r2
 80123ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80123ec:	89bb      	ldrh	r3, [r7, #12]
 80123ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d105      	bne.n	8012402 <tcp_pbuf_prealloc+0x2a>
 80123f6:	4b30      	ldr	r3, [pc, #192]	@ (80124b8 <tcp_pbuf_prealloc+0xe0>)
 80123f8:	22e8      	movs	r2, #232	@ 0xe8
 80123fa:	4930      	ldr	r1, [pc, #192]	@ (80124bc <tcp_pbuf_prealloc+0xe4>)
 80123fc:	4830      	ldr	r0, [pc, #192]	@ (80124c0 <tcp_pbuf_prealloc+0xe8>)
 80123fe:	f005 fa4b 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d105      	bne.n	8012414 <tcp_pbuf_prealloc+0x3c>
 8012408:	4b2b      	ldr	r3, [pc, #172]	@ (80124b8 <tcp_pbuf_prealloc+0xe0>)
 801240a:	22e9      	movs	r2, #233	@ 0xe9
 801240c:	492d      	ldr	r1, [pc, #180]	@ (80124c4 <tcp_pbuf_prealloc+0xec>)
 801240e:	482c      	ldr	r0, [pc, #176]	@ (80124c0 <tcp_pbuf_prealloc+0xe8>)
 8012410:	f005 fa42 	bl	8017898 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012414:	89ba      	ldrh	r2, [r7, #12]
 8012416:	897b      	ldrh	r3, [r7, #10]
 8012418:	429a      	cmp	r2, r3
 801241a:	d221      	bcs.n	8012460 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801241c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012420:	f003 0302 	and.w	r3, r3, #2
 8012424:	2b00      	cmp	r3, #0
 8012426:	d111      	bne.n	801244c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	8b5b      	ldrh	r3, [r3, #26]
 801242c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012430:	2b00      	cmp	r3, #0
 8012432:	d115      	bne.n	8012460 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012434:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012438:	2b00      	cmp	r3, #0
 801243a:	d007      	beq.n	801244c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801243c:	6a3b      	ldr	r3, [r7, #32]
 801243e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012444:	6a3b      	ldr	r3, [r7, #32]
 8012446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012448:	2b00      	cmp	r3, #0
 801244a:	d009      	beq.n	8012460 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801244c:	89bb      	ldrh	r3, [r7, #12]
 801244e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8012452:	f023 0203 	bic.w	r2, r3, #3
 8012456:	897b      	ldrh	r3, [r7, #10]
 8012458:	4293      	cmp	r3, r2
 801245a:	bf28      	it	cs
 801245c:	4613      	movcs	r3, r2
 801245e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012460:	8af9      	ldrh	r1, [r7, #22]
 8012462:	7bfb      	ldrb	r3, [r7, #15]
 8012464:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012468:	4618      	mov	r0, r3
 801246a:	f7fa ffc9 	bl	800d400 <pbuf_alloc>
 801246e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012476:	2300      	movs	r3, #0
 8012478:	e019      	b.n	80124ae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d006      	beq.n	8012490 <tcp_pbuf_prealloc+0xb8>
 8012482:	4b0d      	ldr	r3, [pc, #52]	@ (80124b8 <tcp_pbuf_prealloc+0xe0>)
 8012484:	f240 120b 	movw	r2, #267	@ 0x10b
 8012488:	490f      	ldr	r1, [pc, #60]	@ (80124c8 <tcp_pbuf_prealloc+0xf0>)
 801248a:	480d      	ldr	r0, [pc, #52]	@ (80124c0 <tcp_pbuf_prealloc+0xe8>)
 801248c:	f005 fa04 	bl	8017898 <iprintf>
  *oversize = p->len - length;
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	895a      	ldrh	r2, [r3, #10]
 8012494:	89bb      	ldrh	r3, [r7, #12]
 8012496:	1ad3      	subs	r3, r2, r3
 8012498:	b29a      	uxth	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	89ba      	ldrh	r2, [r7, #12]
 80124a2:	811a      	strh	r2, [r3, #8]
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	891a      	ldrh	r2, [r3, #8]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	815a      	strh	r2, [r3, #10]
  return p;
 80124ac:	693b      	ldr	r3, [r7, #16]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3718      	adds	r7, #24
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	0801b0cc 	.word	0x0801b0cc
 80124bc:	0801b184 	.word	0x0801b184
 80124c0:	0801b120 	.word	0x0801b120
 80124c4:	0801b1a8 	.word	0x0801b1a8
 80124c8:	0801b1c8 	.word	0x0801b1c8

080124cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	460b      	mov	r3, r1
 80124d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d106      	bne.n	80124ec <tcp_write_checks+0x20>
 80124de:	4b33      	ldr	r3, [pc, #204]	@ (80125ac <tcp_write_checks+0xe0>)
 80124e0:	f240 1233 	movw	r2, #307	@ 0x133
 80124e4:	4932      	ldr	r1, [pc, #200]	@ (80125b0 <tcp_write_checks+0xe4>)
 80124e6:	4833      	ldr	r0, [pc, #204]	@ (80125b4 <tcp_write_checks+0xe8>)
 80124e8:	f005 f9d6 	bl	8017898 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	7d1b      	ldrb	r3, [r3, #20]
 80124f0:	2b04      	cmp	r3, #4
 80124f2:	d00e      	beq.n	8012512 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80124f8:	2b07      	cmp	r3, #7
 80124fa:	d00a      	beq.n	8012512 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012500:	2b02      	cmp	r3, #2
 8012502:	d006      	beq.n	8012512 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012508:	2b03      	cmp	r3, #3
 801250a:	d002      	beq.n	8012512 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801250c:	f06f 030a 	mvn.w	r3, #10
 8012510:	e048      	b.n	80125a4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012512:	887b      	ldrh	r3, [r7, #2]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d101      	bne.n	801251c <tcp_write_checks+0x50>
    return ERR_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	e043      	b.n	80125a4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012522:	887a      	ldrh	r2, [r7, #2]
 8012524:	429a      	cmp	r2, r3
 8012526:	d909      	bls.n	801253c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8b5b      	ldrh	r3, [r3, #26]
 801252c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012530:	b29a      	uxth	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012536:	f04f 33ff 	mov.w	r3, #4294967295
 801253a:	e033      	b.n	80125a4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012542:	2b08      	cmp	r3, #8
 8012544:	d909      	bls.n	801255a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	8b5b      	ldrh	r3, [r3, #26]
 801254a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801254e:	b29a      	uxth	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012554:	f04f 33ff 	mov.w	r3, #4294967295
 8012558:	e024      	b.n	80125a4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00f      	beq.n	8012584 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012568:	2b00      	cmp	r3, #0
 801256a:	d11a      	bne.n	80125a2 <tcp_write_checks+0xd6>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012570:	2b00      	cmp	r3, #0
 8012572:	d116      	bne.n	80125a2 <tcp_write_checks+0xd6>
 8012574:	4b0d      	ldr	r3, [pc, #52]	@ (80125ac <tcp_write_checks+0xe0>)
 8012576:	f240 1255 	movw	r2, #341	@ 0x155
 801257a:	490f      	ldr	r1, [pc, #60]	@ (80125b8 <tcp_write_checks+0xec>)
 801257c:	480d      	ldr	r0, [pc, #52]	@ (80125b4 <tcp_write_checks+0xe8>)
 801257e:	f005 f98b 	bl	8017898 <iprintf>
 8012582:	e00e      	b.n	80125a2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012588:	2b00      	cmp	r3, #0
 801258a:	d103      	bne.n	8012594 <tcp_write_checks+0xc8>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012590:	2b00      	cmp	r3, #0
 8012592:	d006      	beq.n	80125a2 <tcp_write_checks+0xd6>
 8012594:	4b05      	ldr	r3, [pc, #20]	@ (80125ac <tcp_write_checks+0xe0>)
 8012596:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801259a:	4908      	ldr	r1, [pc, #32]	@ (80125bc <tcp_write_checks+0xf0>)
 801259c:	4805      	ldr	r0, [pc, #20]	@ (80125b4 <tcp_write_checks+0xe8>)
 801259e:	f005 f97b 	bl	8017898 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80125a2:	2300      	movs	r3, #0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3708      	adds	r7, #8
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	0801b0cc 	.word	0x0801b0cc
 80125b0:	0801b1dc 	.word	0x0801b1dc
 80125b4:	0801b120 	.word	0x0801b120
 80125b8:	0801b1fc 	.word	0x0801b1fc
 80125bc:	0801b238 	.word	0x0801b238

080125c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80125c0:	b590      	push	{r4, r7, lr}
 80125c2:	b09b      	sub	sp, #108	@ 0x6c
 80125c4:	af04      	add	r7, sp, #16
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	4611      	mov	r1, r2
 80125cc:	461a      	mov	r2, r3
 80125ce:	460b      	mov	r3, r1
 80125d0:	80fb      	strh	r3, [r7, #6]
 80125d2:	4613      	mov	r3, r2
 80125d4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80125d6:	2300      	movs	r3, #0
 80125d8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80125de:	2300      	movs	r3, #0
 80125e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80125e2:	2300      	movs	r3, #0
 80125e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125e6:	2300      	movs	r3, #0
 80125e8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80125ea:	2300      	movs	r3, #0
 80125ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80125f0:	2300      	movs	r3, #0
 80125f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80125fa:	2300      	movs	r3, #0
 80125fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80125fe:	2300      	movs	r3, #0
 8012600:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d109      	bne.n	801261c <tcp_write+0x5c>
 8012608:	4ba4      	ldr	r3, [pc, #656]	@ (801289c <tcp_write+0x2dc>)
 801260a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801260e:	49a4      	ldr	r1, [pc, #656]	@ (80128a0 <tcp_write+0x2e0>)
 8012610:	48a4      	ldr	r0, [pc, #656]	@ (80128a4 <tcp_write+0x2e4>)
 8012612:	f005 f941 	bl	8017898 <iprintf>
 8012616:	f06f 030f 	mvn.w	r3, #15
 801261a:	e32a      	b.n	8012c72 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012622:	085b      	lsrs	r3, r3, #1
 8012624:	b29a      	uxth	r2, r3
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801262a:	4293      	cmp	r3, r2
 801262c:	bf28      	it	cs
 801262e:	4613      	movcs	r3, r2
 8012630:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <tcp_write+0x7e>
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801263c:	e000      	b.n	8012640 <tcp_write+0x80>
 801263e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012640:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d109      	bne.n	801265c <tcp_write+0x9c>
 8012648:	4b94      	ldr	r3, [pc, #592]	@ (801289c <tcp_write+0x2dc>)
 801264a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801264e:	4996      	ldr	r1, [pc, #600]	@ (80128a8 <tcp_write+0x2e8>)
 8012650:	4894      	ldr	r0, [pc, #592]	@ (80128a4 <tcp_write+0x2e4>)
 8012652:	f005 f921 	bl	8017898 <iprintf>
 8012656:	f06f 030f 	mvn.w	r3, #15
 801265a:	e30a      	b.n	8012c72 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801265c:	88fb      	ldrh	r3, [r7, #6]
 801265e:	4619      	mov	r1, r3
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f7ff ff33 	bl	80124cc <tcp_write_checks>
 8012666:	4603      	mov	r3, r0
 8012668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801266c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012670:	2b00      	cmp	r3, #0
 8012672:	d002      	beq.n	801267a <tcp_write+0xba>
    return err;
 8012674:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012678:	e2fb      	b.n	8012c72 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012680:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012684:	2300      	movs	r3, #0
 8012686:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801268e:	2b00      	cmp	r3, #0
 8012690:	f000 80f6 	beq.w	8012880 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012698:	653b      	str	r3, [r7, #80]	@ 0x50
 801269a:	e002      	b.n	80126a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801269c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d1f8      	bne.n	801269c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80126aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126ac:	7a9b      	ldrb	r3, [r3, #10]
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	f003 0304 	and.w	r3, r3, #4
 80126b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80126b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80126ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126bc:	891b      	ldrh	r3, [r3, #8]
 80126be:	4619      	mov	r1, r3
 80126c0:	8c3b      	ldrh	r3, [r7, #32]
 80126c2:	440b      	add	r3, r1
 80126c4:	429a      	cmp	r2, r3
 80126c6:	da06      	bge.n	80126d6 <tcp_write+0x116>
 80126c8:	4b74      	ldr	r3, [pc, #464]	@ (801289c <tcp_write+0x2dc>)
 80126ca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80126ce:	4977      	ldr	r1, [pc, #476]	@ (80128ac <tcp_write+0x2ec>)
 80126d0:	4874      	ldr	r0, [pc, #464]	@ (80128a4 <tcp_write+0x2e4>)
 80126d2:	f005 f8e1 	bl	8017898 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80126d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126d8:	891a      	ldrh	r2, [r3, #8]
 80126da:	8c3b      	ldrh	r3, [r7, #32]
 80126dc:	4413      	add	r3, r2
 80126de:	b29b      	uxth	r3, r3
 80126e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80126e2:	1ad3      	subs	r3, r2, r3
 80126e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80126ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80126ee:	8a7b      	ldrh	r3, [r7, #18]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d026      	beq.n	8012742 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80126f4:	8a7b      	ldrh	r3, [r7, #18]
 80126f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d206      	bcs.n	801270a <tcp_write+0x14a>
 80126fc:	4b67      	ldr	r3, [pc, #412]	@ (801289c <tcp_write+0x2dc>)
 80126fe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8012702:	496b      	ldr	r1, [pc, #428]	@ (80128b0 <tcp_write+0x2f0>)
 8012704:	4867      	ldr	r0, [pc, #412]	@ (80128a4 <tcp_write+0x2e4>)
 8012706:	f005 f8c7 	bl	8017898 <iprintf>
      seg = last_unsent;
 801270a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801270c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801270e:	8a7b      	ldrh	r3, [r7, #18]
 8012710:	88fa      	ldrh	r2, [r7, #6]
 8012712:	4293      	cmp	r3, r2
 8012714:	bf28      	it	cs
 8012716:	4613      	movcs	r3, r2
 8012718:	b29b      	uxth	r3, r3
 801271a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801271c:	4293      	cmp	r3, r2
 801271e:	bf28      	it	cs
 8012720:	4613      	movcs	r3, r2
 8012722:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8012724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012728:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801272a:	4413      	add	r3, r2
 801272c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8012730:	8a7a      	ldrh	r2, [r7, #18]
 8012732:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012734:	1ad3      	subs	r3, r2, r3
 8012736:	b29b      	uxth	r3, r3
 8012738:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801273a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801273c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012742:	8a7b      	ldrh	r3, [r7, #18]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00b      	beq.n	8012760 <tcp_write+0x1a0>
 8012748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801274c:	88fb      	ldrh	r3, [r7, #6]
 801274e:	429a      	cmp	r2, r3
 8012750:	d006      	beq.n	8012760 <tcp_write+0x1a0>
 8012752:	4b52      	ldr	r3, [pc, #328]	@ (801289c <tcp_write+0x2dc>)
 8012754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012758:	4956      	ldr	r1, [pc, #344]	@ (80128b4 <tcp_write+0x2f4>)
 801275a:	4852      	ldr	r0, [pc, #328]	@ (80128a4 <tcp_write+0x2e4>)
 801275c:	f005 f89c 	bl	8017898 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012764:	88fb      	ldrh	r3, [r7, #6]
 8012766:	429a      	cmp	r2, r3
 8012768:	f080 8167 	bcs.w	8012a3a <tcp_write+0x47a>
 801276c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 8163 	beq.w	8012a3a <tcp_write+0x47a>
 8012774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012776:	891b      	ldrh	r3, [r3, #8]
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 815e 	beq.w	8012a3a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801277e:	88fa      	ldrh	r2, [r7, #6]
 8012780:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012784:	1ad2      	subs	r2, r2, r3
 8012786:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012788:	4293      	cmp	r3, r2
 801278a:	bfa8      	it	ge
 801278c:	4613      	movge	r3, r2
 801278e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012792:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012794:	797b      	ldrb	r3, [r7, #5]
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	d027      	beq.n	80127ee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801279e:	f107 0012 	add.w	r0, r7, #18
 80127a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80127a4:	8bf9      	ldrh	r1, [r7, #30]
 80127a6:	2301      	movs	r3, #1
 80127a8:	9302      	str	r3, [sp, #8]
 80127aa:	797b      	ldrb	r3, [r7, #5]
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	4603      	mov	r3, r0
 80127b4:	2000      	movs	r0, #0
 80127b6:	f7ff fe0f 	bl	80123d8 <tcp_pbuf_prealloc>
 80127ba:	6578      	str	r0, [r7, #84]	@ 0x54
 80127bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f000 8225 	beq.w	8012c0e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80127c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127c6:	6858      	ldr	r0, [r3, #4]
 80127c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80127cc:	68ba      	ldr	r2, [r7, #8]
 80127ce:	4413      	add	r3, r2
 80127d0:	8bfa      	ldrh	r2, [r7, #30]
 80127d2:	4619      	mov	r1, r3
 80127d4:	f005 f9e9 	bl	8017baa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80127d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80127da:	f7fb f983 	bl	800dae4 <pbuf_clen>
 80127de:	4603      	mov	r3, r0
 80127e0:	461a      	mov	r2, r3
 80127e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80127e6:	4413      	add	r3, r2
 80127e8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80127ec:	e041      	b.n	8012872 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80127ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80127f4:	e002      	b.n	80127fc <tcp_write+0x23c>
 80127f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80127fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1f8      	bne.n	80127f6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012806:	7b1b      	ldrb	r3, [r3, #12]
 8012808:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d115      	bne.n	801283c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012816:	8952      	ldrh	r2, [r2, #10]
 8012818:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	429a      	cmp	r2, r3
 801281e:	d10d      	bne.n	801283c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012820:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012824:	2b00      	cmp	r3, #0
 8012826:	d006      	beq.n	8012836 <tcp_write+0x276>
 8012828:	4b1c      	ldr	r3, [pc, #112]	@ (801289c <tcp_write+0x2dc>)
 801282a:	f240 2231 	movw	r2, #561	@ 0x231
 801282e:	4922      	ldr	r1, [pc, #136]	@ (80128b8 <tcp_write+0x2f8>)
 8012830:	481c      	ldr	r0, [pc, #112]	@ (80128a4 <tcp_write+0x2e4>)
 8012832:	f005 f831 	bl	8017898 <iprintf>
          extendlen = seglen;
 8012836:	8bfb      	ldrh	r3, [r7, #30]
 8012838:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801283a:	e01a      	b.n	8012872 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801283c:	8bfb      	ldrh	r3, [r7, #30]
 801283e:	2201      	movs	r2, #1
 8012840:	4619      	mov	r1, r3
 8012842:	2000      	movs	r0, #0
 8012844:	f7fa fddc 	bl	800d400 <pbuf_alloc>
 8012848:	6578      	str	r0, [r7, #84]	@ 0x54
 801284a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 81e0 	beq.w	8012c12 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012856:	68ba      	ldr	r2, [r7, #8]
 8012858:	441a      	add	r2, r3
 801285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801285c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801285e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012860:	f7fb f940 	bl	800dae4 <pbuf_clen>
 8012864:	4603      	mov	r3, r0
 8012866:	461a      	mov	r2, r3
 8012868:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801286c:	4413      	add	r3, r2
 801286e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012872:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012876:	8bfb      	ldrh	r3, [r7, #30]
 8012878:	4413      	add	r3, r2
 801287a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801287e:	e0dc      	b.n	8012a3a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012886:	2b00      	cmp	r3, #0
 8012888:	f000 80d7 	beq.w	8012a3a <tcp_write+0x47a>
 801288c:	4b03      	ldr	r3, [pc, #12]	@ (801289c <tcp_write+0x2dc>)
 801288e:	f240 224a 	movw	r2, #586	@ 0x24a
 8012892:	490a      	ldr	r1, [pc, #40]	@ (80128bc <tcp_write+0x2fc>)
 8012894:	4803      	ldr	r0, [pc, #12]	@ (80128a4 <tcp_write+0x2e4>)
 8012896:	f004 ffff 	bl	8017898 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801289a:	e0ce      	b.n	8012a3a <tcp_write+0x47a>
 801289c:	0801b0cc 	.word	0x0801b0cc
 80128a0:	0801b26c 	.word	0x0801b26c
 80128a4:	0801b120 	.word	0x0801b120
 80128a8:	0801b284 	.word	0x0801b284
 80128ac:	0801b2b8 	.word	0x0801b2b8
 80128b0:	0801b2d0 	.word	0x0801b2d0
 80128b4:	0801b2f0 	.word	0x0801b2f0
 80128b8:	0801b310 	.word	0x0801b310
 80128bc:	0801b33c 	.word	0x0801b33c
    struct pbuf *p;
    u16_t left = len - pos;
 80128c0:	88fa      	ldrh	r2, [r7, #6]
 80128c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80128c6:	1ad3      	subs	r3, r2, r3
 80128c8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80128ca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80128d2:	1ad3      	subs	r3, r2, r3
 80128d4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80128d6:	8b7a      	ldrh	r2, [r7, #26]
 80128d8:	8bbb      	ldrh	r3, [r7, #28]
 80128da:	4293      	cmp	r3, r2
 80128dc:	bf28      	it	cs
 80128de:	4613      	movcs	r3, r2
 80128e0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80128e2:	797b      	ldrb	r3, [r7, #5]
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d036      	beq.n	801295a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80128ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	8b3b      	ldrh	r3, [r7, #24]
 80128f4:	4413      	add	r3, r2
 80128f6:	b299      	uxth	r1, r3
 80128f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	bf0c      	ite	eq
 80128fe:	2301      	moveq	r3, #1
 8012900:	2300      	movne	r3, #0
 8012902:	b2db      	uxtb	r3, r3
 8012904:	f107 0012 	add.w	r0, r7, #18
 8012908:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801290a:	9302      	str	r3, [sp, #8]
 801290c:	797b      	ldrb	r3, [r7, #5]
 801290e:	9301      	str	r3, [sp, #4]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	4603      	mov	r3, r0
 8012916:	2036      	movs	r0, #54	@ 0x36
 8012918:	f7ff fd5e 	bl	80123d8 <tcp_pbuf_prealloc>
 801291c:	6338      	str	r0, [r7, #48]	@ 0x30
 801291e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012920:	2b00      	cmp	r3, #0
 8012922:	f000 8178 	beq.w	8012c16 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012928:	895b      	ldrh	r3, [r3, #10]
 801292a:	8b3a      	ldrh	r2, [r7, #24]
 801292c:	429a      	cmp	r2, r3
 801292e:	d906      	bls.n	801293e <tcp_write+0x37e>
 8012930:	4b8c      	ldr	r3, [pc, #560]	@ (8012b64 <tcp_write+0x5a4>)
 8012932:	f240 2266 	movw	r2, #614	@ 0x266
 8012936:	498c      	ldr	r1, [pc, #560]	@ (8012b68 <tcp_write+0x5a8>)
 8012938:	488c      	ldr	r0, [pc, #560]	@ (8012b6c <tcp_write+0x5ac>)
 801293a:	f004 ffad 	bl	8017898 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012940:	685a      	ldr	r2, [r3, #4]
 8012942:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012946:	18d0      	adds	r0, r2, r3
 8012948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801294c:	68ba      	ldr	r2, [r7, #8]
 801294e:	4413      	add	r3, r2
 8012950:	8b3a      	ldrh	r2, [r7, #24]
 8012952:	4619      	mov	r1, r3
 8012954:	f005 f929 	bl	8017baa <memcpy>
 8012958:	e02f      	b.n	80129ba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801295a:	8a7b      	ldrh	r3, [r7, #18]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d006      	beq.n	801296e <tcp_write+0x3ae>
 8012960:	4b80      	ldr	r3, [pc, #512]	@ (8012b64 <tcp_write+0x5a4>)
 8012962:	f240 2271 	movw	r2, #625	@ 0x271
 8012966:	4982      	ldr	r1, [pc, #520]	@ (8012b70 <tcp_write+0x5b0>)
 8012968:	4880      	ldr	r0, [pc, #512]	@ (8012b6c <tcp_write+0x5ac>)
 801296a:	f004 ff95 	bl	8017898 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801296e:	8b3b      	ldrh	r3, [r7, #24]
 8012970:	2201      	movs	r2, #1
 8012972:	4619      	mov	r1, r3
 8012974:	2036      	movs	r0, #54	@ 0x36
 8012976:	f7fa fd43 	bl	800d400 <pbuf_alloc>
 801297a:	6178      	str	r0, [r7, #20]
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	f000 814b 	beq.w	8012c1a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012984:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012988:	68ba      	ldr	r2, [r7, #8]
 801298a:	441a      	add	r2, r3
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012990:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012994:	b29b      	uxth	r3, r3
 8012996:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801299a:	4619      	mov	r1, r3
 801299c:	2036      	movs	r0, #54	@ 0x36
 801299e:	f7fa fd2f 	bl	800d400 <pbuf_alloc>
 80129a2:	6338      	str	r0, [r7, #48]	@ 0x30
 80129a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d103      	bne.n	80129b2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80129aa:	6978      	ldr	r0, [r7, #20]
 80129ac:	f7fb f80c 	bl	800d9c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80129b0:	e136      	b.n	8012c20 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80129b2:	6979      	ldr	r1, [r7, #20]
 80129b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129b6:	f7fb f8d5 	bl	800db64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80129ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129bc:	f7fb f892 	bl	800dae4 <pbuf_clen>
 80129c0:	4603      	mov	r3, r0
 80129c2:	461a      	mov	r2, r3
 80129c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80129c8:	4413      	add	r3, r2
 80129ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80129ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80129d2:	2b09      	cmp	r3, #9
 80129d4:	d903      	bls.n	80129de <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80129d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129d8:	f7fa fff6 	bl	800d9c8 <pbuf_free>
      goto memerr;
 80129dc:	e120      	b.n	8012c20 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80129e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80129e6:	441a      	add	r2, r3
 80129e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	4613      	mov	r3, r2
 80129f0:	2200      	movs	r2, #0
 80129f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f7ff fc53 	bl	80122a0 <tcp_create_segment>
 80129fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80129fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f000 810d 	beq.w	8012c1e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d102      	bne.n	8012a10 <tcp_write+0x450>
      queue = seg;
 8012a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a0e:	e00c      	b.n	8012a2a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d106      	bne.n	8012a24 <tcp_write+0x464>
 8012a16:	4b53      	ldr	r3, [pc, #332]	@ (8012b64 <tcp_write+0x5a4>)
 8012a18:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012a1c:	4955      	ldr	r1, [pc, #340]	@ (8012b74 <tcp_write+0x5b4>)
 8012a1e:	4853      	ldr	r0, [pc, #332]	@ (8012b6c <tcp_write+0x5ac>)
 8012a20:	f004 ff3a 	bl	8017898 <iprintf>
      prev_seg->next = seg;
 8012a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012a28:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a2c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012a2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012a32:	8b3b      	ldrh	r3, [r7, #24]
 8012a34:	4413      	add	r3, r2
 8012a36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8012a3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012a3e:	88fb      	ldrh	r3, [r7, #6]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	f4ff af3d 	bcc.w	80128c0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012a46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d02c      	beq.n	8012aa6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a52:	e01e      	b.n	8012a92 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a56:	891a      	ldrh	r2, [r3, #8]
 8012a58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a5a:	4413      	add	r3, r2
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a60:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d110      	bne.n	8012a8c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a70:	8952      	ldrh	r2, [r2, #10]
 8012a72:	4413      	add	r3, r2
 8012a74:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012a76:	68b9      	ldr	r1, [r7, #8]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f005 f896 	bl	8017baa <memcpy>
        p->len += oversize_used;
 8012a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a80:	895a      	ldrh	r2, [r3, #10]
 8012a82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a84:	4413      	add	r3, r2
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1dd      	bne.n	8012a54 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a9a:	891a      	ldrh	r2, [r3, #8]
 8012a9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a9e:	4413      	add	r3, r2
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aa4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012aa6:	8a7a      	ldrh	r2, [r7, #18]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d018      	beq.n	8012ae6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_write+0x508>
 8012aba:	4b2a      	ldr	r3, [pc, #168]	@ (8012b64 <tcp_write+0x5a4>)
 8012abc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012ac0:	492d      	ldr	r1, [pc, #180]	@ (8012b78 <tcp_write+0x5b8>)
 8012ac2:	482a      	ldr	r0, [pc, #168]	@ (8012b6c <tcp_write+0x5ac>)
 8012ac4:	f004 fee8 	bl	8017898 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7fb f848 	bl	800db64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ad6:	891a      	ldrh	r2, [r3, #8]
 8012ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ada:	891b      	ldrh	r3, [r3, #8]
 8012adc:	4413      	add	r3, r2
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ae2:	811a      	strh	r2, [r3, #8]
 8012ae4:	e037      	b.n	8012b56 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012ae6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d034      	beq.n	8012b56 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d003      	beq.n	8012afa <tcp_write+0x53a>
 8012af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012af4:	685b      	ldr	r3, [r3, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <tcp_write+0x548>
 8012afa:	4b1a      	ldr	r3, [pc, #104]	@ (8012b64 <tcp_write+0x5a4>)
 8012afc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8012b00:	491e      	ldr	r1, [pc, #120]	@ (8012b7c <tcp_write+0x5bc>)
 8012b02:	481a      	ldr	r0, [pc, #104]	@ (8012b6c <tcp_write+0x5ac>)
 8012b04:	f004 fec8 	bl	8017898 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b0e:	e009      	b.n	8012b24 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b12:	891a      	ldrh	r2, [r3, #8]
 8012b14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b16:	4413      	add	r3, r2
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b1c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1f1      	bne.n	8012b10 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b2e:	891a      	ldrh	r2, [r3, #8]
 8012b30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b32:	4413      	add	r3, r2
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b38:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b3c:	895a      	ldrh	r2, [r3, #10]
 8012b3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b40:	4413      	add	r3, r2
 8012b42:	b29a      	uxth	r2, r3
 8012b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b46:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b4a:	891a      	ldrh	r2, [r3, #8]
 8012b4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b4e:	4413      	add	r3, r2
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b54:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d111      	bne.n	8012b80 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012b62:	e010      	b.n	8012b86 <tcp_write+0x5c6>
 8012b64:	0801b0cc 	.word	0x0801b0cc
 8012b68:	0801b36c 	.word	0x0801b36c
 8012b6c:	0801b120 	.word	0x0801b120
 8012b70:	0801b3ac 	.word	0x0801b3ac
 8012b74:	0801b3bc 	.word	0x0801b3bc
 8012b78:	0801b3d0 	.word	0x0801b3d0
 8012b7c:	0801b408 	.word	0x0801b408
  } else {
    last_unsent->next = queue;
 8012b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012b84:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012b8a:	88fb      	ldrh	r3, [r7, #6]
 8012b8c:	441a      	add	r2, r3
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012b98:	88fb      	ldrh	r3, [r7, #6]
 8012b9a:	1ad3      	subs	r3, r2, r3
 8012b9c:	b29a      	uxth	r2, r3
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012baa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00e      	beq.n	8012bd6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d10a      	bne.n	8012bd6 <tcp_write+0x616>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d106      	bne.n	8012bd6 <tcp_write+0x616>
 8012bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8012c7c <tcp_write+0x6bc>)
 8012bca:	f240 3212 	movw	r2, #786	@ 0x312
 8012bce:	492c      	ldr	r1, [pc, #176]	@ (8012c80 <tcp_write+0x6c0>)
 8012bd0:	482c      	ldr	r0, [pc, #176]	@ (8012c84 <tcp_write+0x6c4>)
 8012bd2:	f004 fe61 	bl	8017898 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d016      	beq.n	8012c0a <tcp_write+0x64a>
 8012bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d012      	beq.n	8012c0a <tcp_write+0x64a>
 8012be4:	797b      	ldrb	r3, [r7, #5]
 8012be6:	f003 0302 	and.w	r3, r3, #2
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d10d      	bne.n	8012c0a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	899b      	ldrh	r3, [r3, #12]
 8012bf4:	b29c      	uxth	r4, r3
 8012bf6:	2008      	movs	r0, #8
 8012bf8:	f7f9 fabe 	bl	800c178 <lwip_htons>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	461a      	mov	r2, r3
 8012c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	4322      	orrs	r2, r4
 8012c06:	b292      	uxth	r2, r2
 8012c08:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	e031      	b.n	8012c72 <tcp_write+0x6b2>
          goto memerr;
 8012c0e:	bf00      	nop
 8012c10:	e006      	b.n	8012c20 <tcp_write+0x660>
            goto memerr;
 8012c12:	bf00      	nop
 8012c14:	e004      	b.n	8012c20 <tcp_write+0x660>
        goto memerr;
 8012c16:	bf00      	nop
 8012c18:	e002      	b.n	8012c20 <tcp_write+0x660>
        goto memerr;
 8012c1a:	bf00      	nop
 8012c1c:	e000      	b.n	8012c20 <tcp_write+0x660>
      goto memerr;
 8012c1e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	8b5b      	ldrh	r3, [r3, #26]
 8012c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d002      	beq.n	8012c3a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012c34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012c36:	f7fa fec7 	bl	800d9c8 <pbuf_free>
  }
  if (queue != NULL) {
 8012c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012c40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012c42:	f7fc fb53 	bl	800f2ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00e      	beq.n	8012c6e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10a      	bne.n	8012c6e <tcp_write+0x6ae>
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d106      	bne.n	8012c6e <tcp_write+0x6ae>
 8012c60:	4b06      	ldr	r3, [pc, #24]	@ (8012c7c <tcp_write+0x6bc>)
 8012c62:	f240 3227 	movw	r2, #807	@ 0x327
 8012c66:	4906      	ldr	r1, [pc, #24]	@ (8012c80 <tcp_write+0x6c0>)
 8012c68:	4806      	ldr	r0, [pc, #24]	@ (8012c84 <tcp_write+0x6c4>)
 8012c6a:	f004 fe15 	bl	8017898 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	375c      	adds	r7, #92	@ 0x5c
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd90      	pop	{r4, r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	0801b0cc 	.word	0x0801b0cc
 8012c80:	0801b440 	.word	0x0801b440
 8012c84:	0801b120 	.word	0x0801b120

08012c88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b08b      	sub	sp, #44	@ 0x2c
 8012c8c:	af02      	add	r7, sp, #8
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	460b      	mov	r3, r1
 8012c92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012c94:	2300      	movs	r3, #0
 8012c96:	61fb      	str	r3, [r7, #28]
 8012c98:	2300      	movs	r3, #0
 8012c9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d106      	bne.n	8012cb4 <tcp_split_unsent_seg+0x2c>
 8012ca6:	4b95      	ldr	r3, [pc, #596]	@ (8012efc <tcp_split_unsent_seg+0x274>)
 8012ca8:	f240 324b 	movw	r2, #843	@ 0x34b
 8012cac:	4994      	ldr	r1, [pc, #592]	@ (8012f00 <tcp_split_unsent_seg+0x278>)
 8012cae:	4895      	ldr	r0, [pc, #596]	@ (8012f04 <tcp_split_unsent_seg+0x27c>)
 8012cb0:	f004 fdf2 	bl	8017898 <iprintf>

  useg = pcb->unsent;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cb8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d102      	bne.n	8012cc6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8012cc4:	e116      	b.n	8012ef4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012cc6:	887b      	ldrh	r3, [r7, #2]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d109      	bne.n	8012ce0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012ccc:	4b8b      	ldr	r3, [pc, #556]	@ (8012efc <tcp_split_unsent_seg+0x274>)
 8012cce:	f240 3253 	movw	r2, #851	@ 0x353
 8012cd2:	498d      	ldr	r1, [pc, #564]	@ (8012f08 <tcp_split_unsent_seg+0x280>)
 8012cd4:	488b      	ldr	r0, [pc, #556]	@ (8012f04 <tcp_split_unsent_seg+0x27c>)
 8012cd6:	f004 fddf 	bl	8017898 <iprintf>
    return ERR_VAL;
 8012cda:	f06f 0305 	mvn.w	r3, #5
 8012cde:	e109      	b.n	8012ef4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	891b      	ldrh	r3, [r3, #8]
 8012ce4:	887a      	ldrh	r2, [r7, #2]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d301      	bcc.n	8012cee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012cea:	2300      	movs	r3, #0
 8012cec:	e102      	b.n	8012ef4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012cf2:	887a      	ldrh	r2, [r7, #2]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d906      	bls.n	8012d06 <tcp_split_unsent_seg+0x7e>
 8012cf8:	4b80      	ldr	r3, [pc, #512]	@ (8012efc <tcp_split_unsent_seg+0x274>)
 8012cfa:	f240 325b 	movw	r2, #859	@ 0x35b
 8012cfe:	4983      	ldr	r1, [pc, #524]	@ (8012f0c <tcp_split_unsent_seg+0x284>)
 8012d00:	4880      	ldr	r0, [pc, #512]	@ (8012f04 <tcp_split_unsent_seg+0x27c>)
 8012d02:	f004 fdc9 	bl	8017898 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	891b      	ldrh	r3, [r3, #8]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <tcp_split_unsent_seg+0x94>
 8012d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8012efc <tcp_split_unsent_seg+0x274>)
 8012d10:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012d14:	497e      	ldr	r1, [pc, #504]	@ (8012f10 <tcp_split_unsent_seg+0x288>)
 8012d16:	487b      	ldr	r0, [pc, #492]	@ (8012f04 <tcp_split_unsent_seg+0x27c>)
 8012d18:	f004 fdbe 	bl	8017898 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	7a9b      	ldrb	r3, [r3, #10]
 8012d20:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012d22:	7bfb      	ldrb	r3, [r7, #15]
 8012d24:	009b      	lsls	r3, r3, #2
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	f003 0304 	and.w	r3, r3, #4
 8012d2c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	891a      	ldrh	r2, [r3, #8]
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012d38:	7bbb      	ldrb	r3, [r7, #14]
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	89bb      	ldrh	r3, [r7, #12]
 8012d3e:	4413      	add	r3, r2
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012d46:	4619      	mov	r1, r3
 8012d48:	2036      	movs	r0, #54	@ 0x36
 8012d4a:	f7fa fb59 	bl	800d400 <pbuf_alloc>
 8012d4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f000 80b7 	beq.w	8012ec6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	891a      	ldrh	r2, [r3, #8]
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	891b      	ldrh	r3, [r3, #8]
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	887b      	ldrh	r3, [r7, #2]
 8012d68:	4413      	add	r3, r2
 8012d6a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	6858      	ldr	r0, [r3, #4]
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	685a      	ldr	r2, [r3, #4]
 8012d74:	7bbb      	ldrb	r3, [r7, #14]
 8012d76:	18d1      	adds	r1, r2, r3
 8012d78:	897b      	ldrh	r3, [r7, #10]
 8012d7a:	89ba      	ldrh	r2, [r7, #12]
 8012d7c:	f7fb f82a 	bl	800ddd4 <pbuf_copy_partial>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	89bb      	ldrh	r3, [r7, #12]
 8012d86:	4293      	cmp	r3, r2
 8012d88:	f040 809f 	bne.w	8012eca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	899b      	ldrh	r3, [r3, #12]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7f9 f9ef 	bl	800c178 <lwip_htons>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012da2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012da4:	2300      	movs	r3, #0
 8012da6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012da8:	7efb      	ldrb	r3, [r7, #27]
 8012daa:	f003 0308 	and.w	r3, r3, #8
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d007      	beq.n	8012dc2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012db2:	7efb      	ldrb	r3, [r7, #27]
 8012db4:	f023 0308 	bic.w	r3, r3, #8
 8012db8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012dba:	7ebb      	ldrb	r3, [r7, #26]
 8012dbc:	f043 0308 	orr.w	r3, r3, #8
 8012dc0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012dc2:	7efb      	ldrb	r3, [r7, #27]
 8012dc4:	f003 0301 	and.w	r3, r3, #1
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d007      	beq.n	8012ddc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012dcc:	7efb      	ldrb	r3, [r7, #27]
 8012dce:	f023 0301 	bic.w	r3, r3, #1
 8012dd2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012dd4:	7ebb      	ldrb	r3, [r7, #26]
 8012dd6:	f043 0301 	orr.w	r3, r3, #1
 8012dda:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f9 f9dd 	bl	800c1a2 <lwip_htonl>
 8012de8:	4602      	mov	r2, r0
 8012dea:	887b      	ldrh	r3, [r7, #2]
 8012dec:	18d1      	adds	r1, r2, r3
 8012dee:	7eba      	ldrb	r2, [r7, #26]
 8012df0:	7bfb      	ldrb	r3, [r7, #15]
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	460b      	mov	r3, r1
 8012df6:	6939      	ldr	r1, [r7, #16]
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff fa51 	bl	80122a0 <tcp_create_segment>
 8012dfe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d063      	beq.n	8012ece <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fa fe6a 	bl	800dae4 <pbuf_clen>
 8012e10:	4603      	mov	r3, r0
 8012e12:	461a      	mov	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012e24:	697b      	ldr	r3, [r7, #20]
 8012e26:	6858      	ldr	r0, [r3, #4]
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	891a      	ldrh	r2, [r3, #8]
 8012e2e:	89bb      	ldrh	r3, [r7, #12]
 8012e30:	1ad3      	subs	r3, r2, r3
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	4619      	mov	r1, r3
 8012e36:	f7fa fc41 	bl	800d6bc <pbuf_realloc>
  useg->len -= remainder;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	89bb      	ldrh	r3, [r7, #12]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	899b      	ldrh	r3, [r3, #12]
 8012e4e:	b29c      	uxth	r4, r3
 8012e50:	7efb      	ldrb	r3, [r7, #27]
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7f9 f98f 	bl	800c178 <lwip_htons>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	4322      	orrs	r2, r4
 8012e64:	b292      	uxth	r2, r2
 8012e66:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7fa fe39 	bl	800dae4 <pbuf_clen>
 8012e72:	4603      	mov	r3, r0
 8012e74:	461a      	mov	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e86:	69fb      	ldr	r3, [r7, #28]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fa fe2a 	bl	800dae4 <pbuf_clen>
 8012e90:	4603      	mov	r3, r0
 8012e92:	461a      	mov	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e9a:	4413      	add	r3, r2
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	69fa      	ldr	r2, [r7, #28]
 8012eb0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012eb2:	69fb      	ldr	r3, [r7, #28]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d103      	bne.n	8012ec2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	e016      	b.n	8012ef4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012ec6:	bf00      	nop
 8012ec8:	e002      	b.n	8012ed0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012eca:	bf00      	nop
 8012ecc:	e000      	b.n	8012ed0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012ece:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d006      	beq.n	8012ee4 <tcp_split_unsent_seg+0x25c>
 8012ed6:	4b09      	ldr	r3, [pc, #36]	@ (8012efc <tcp_split_unsent_seg+0x274>)
 8012ed8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012edc:	490d      	ldr	r1, [pc, #52]	@ (8012f14 <tcp_split_unsent_seg+0x28c>)
 8012ede:	4809      	ldr	r0, [pc, #36]	@ (8012f04 <tcp_split_unsent_seg+0x27c>)
 8012ee0:	f004 fcda 	bl	8017898 <iprintf>
  if (p != NULL) {
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d002      	beq.n	8012ef0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012eea:	6938      	ldr	r0, [r7, #16]
 8012eec:	f7fa fd6c 	bl	800d9c8 <pbuf_free>
  }

  return ERR_MEM;
 8012ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3724      	adds	r7, #36	@ 0x24
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd90      	pop	{r4, r7, pc}
 8012efc:	0801b0cc 	.word	0x0801b0cc
 8012f00:	0801b460 	.word	0x0801b460
 8012f04:	0801b120 	.word	0x0801b120
 8012f08:	0801b484 	.word	0x0801b484
 8012f0c:	0801b4a8 	.word	0x0801b4a8
 8012f10:	0801b4b8 	.word	0x0801b4b8
 8012f14:	0801b4c8 	.word	0x0801b4c8

08012f18 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012f18:	b590      	push	{r4, r7, lr}
 8012f1a:	b085      	sub	sp, #20
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d106      	bne.n	8012f34 <tcp_send_fin+0x1c>
 8012f26:	4b21      	ldr	r3, [pc, #132]	@ (8012fac <tcp_send_fin+0x94>)
 8012f28:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012f2c:	4920      	ldr	r1, [pc, #128]	@ (8012fb0 <tcp_send_fin+0x98>)
 8012f2e:	4821      	ldr	r0, [pc, #132]	@ (8012fb4 <tcp_send_fin+0x9c>)
 8012f30:	f004 fcb2 	bl	8017898 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d02e      	beq.n	8012f9a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f40:	60fb      	str	r3, [r7, #12]
 8012f42:	e002      	b.n	8012f4a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d1f8      	bne.n	8012f44 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	899b      	ldrh	r3, [r3, #12]
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7f9 f90c 	bl	800c178 <lwip_htons>
 8012f60:	4603      	mov	r3, r0
 8012f62:	b2db      	uxtb	r3, r3
 8012f64:	f003 0307 	and.w	r3, r3, #7
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d116      	bne.n	8012f9a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	899b      	ldrh	r3, [r3, #12]
 8012f72:	b29c      	uxth	r4, r3
 8012f74:	2001      	movs	r0, #1
 8012f76:	f7f9 f8ff 	bl	800c178 <lwip_htons>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	4322      	orrs	r2, r4
 8012f84:	b292      	uxth	r2, r2
 8012f86:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	8b5b      	ldrh	r3, [r3, #26]
 8012f8c:	f043 0320 	orr.w	r3, r3, #32
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012f96:	2300      	movs	r3, #0
 8012f98:	e004      	b.n	8012fa4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 f80b 	bl	8012fb8 <tcp_enqueue_flags>
 8012fa2:	4603      	mov	r3, r0
}
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3714      	adds	r7, #20
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd90      	pop	{r4, r7, pc}
 8012fac:	0801b0cc 	.word	0x0801b0cc
 8012fb0:	0801b4d4 	.word	0x0801b4d4
 8012fb4:	0801b120 	.word	0x0801b120

08012fb8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	@ 0x28
 8012fbc:	af02      	add	r7, sp, #8
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012fcc:	78fb      	ldrb	r3, [r7, #3]
 8012fce:	f003 0303 	and.w	r3, r3, #3
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d106      	bne.n	8012fe4 <tcp_enqueue_flags+0x2c>
 8012fd6:	4b67      	ldr	r3, [pc, #412]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 8012fd8:	f240 4211 	movw	r2, #1041	@ 0x411
 8012fdc:	4966      	ldr	r1, [pc, #408]	@ (8013178 <tcp_enqueue_flags+0x1c0>)
 8012fde:	4867      	ldr	r0, [pc, #412]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 8012fe0:	f004 fc5a 	bl	8017898 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <tcp_enqueue_flags+0x40>
 8012fea:	4b62      	ldr	r3, [pc, #392]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 8012fec:	f240 4213 	movw	r2, #1043	@ 0x413
 8012ff0:	4963      	ldr	r1, [pc, #396]	@ (8013180 <tcp_enqueue_flags+0x1c8>)
 8012ff2:	4862      	ldr	r0, [pc, #392]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 8012ff4:	f004 fc50 	bl	8017898 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012ff8:	78fb      	ldrb	r3, [r7, #3]
 8012ffa:	f003 0302 	and.w	r3, r3, #2
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013002:	2301      	movs	r3, #1
 8013004:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013006:	7ffb      	ldrb	r3, [r7, #31]
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	b2db      	uxtb	r3, r3
 801300c:	f003 0304 	and.w	r3, r3, #4
 8013010:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013012:	7dfb      	ldrb	r3, [r7, #23]
 8013014:	b29b      	uxth	r3, r3
 8013016:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801301a:	4619      	mov	r1, r3
 801301c:	2036      	movs	r0, #54	@ 0x36
 801301e:	f7fa f9ef 	bl	800d400 <pbuf_alloc>
 8013022:	6138      	str	r0, [r7, #16]
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d109      	bne.n	801303e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	8b5b      	ldrh	r3, [r3, #26]
 801302e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013032:	b29a      	uxth	r2, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013038:	f04f 33ff 	mov.w	r3, #4294967295
 801303c:	e095      	b.n	801316a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	895a      	ldrh	r2, [r3, #10]
 8013042:	7dfb      	ldrb	r3, [r7, #23]
 8013044:	b29b      	uxth	r3, r3
 8013046:	429a      	cmp	r2, r3
 8013048:	d206      	bcs.n	8013058 <tcp_enqueue_flags+0xa0>
 801304a:	4b4a      	ldr	r3, [pc, #296]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 801304c:	f240 4239 	movw	r2, #1081	@ 0x439
 8013050:	494c      	ldr	r1, [pc, #304]	@ (8013184 <tcp_enqueue_flags+0x1cc>)
 8013052:	484a      	ldr	r0, [pc, #296]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 8013054:	f004 fc20 	bl	8017898 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801305c:	78fa      	ldrb	r2, [r7, #3]
 801305e:	7ffb      	ldrb	r3, [r7, #31]
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	460b      	mov	r3, r1
 8013064:	6939      	ldr	r1, [r7, #16]
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7ff f91a 	bl	80122a0 <tcp_create_segment>
 801306c:	60f8      	str	r0, [r7, #12]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d109      	bne.n	8013088 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	8b5b      	ldrh	r3, [r3, #26]
 8013078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801307c:	b29a      	uxth	r2, r3
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013082:	f04f 33ff 	mov.w	r3, #4294967295
 8013086:	e070      	b.n	801316a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	68db      	ldr	r3, [r3, #12]
 801308c:	f003 0303 	and.w	r3, r3, #3
 8013090:	2b00      	cmp	r3, #0
 8013092:	d006      	beq.n	80130a2 <tcp_enqueue_flags+0xea>
 8013094:	4b37      	ldr	r3, [pc, #220]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 8013096:	f240 4242 	movw	r2, #1090	@ 0x442
 801309a:	493b      	ldr	r1, [pc, #236]	@ (8013188 <tcp_enqueue_flags+0x1d0>)
 801309c:	4837      	ldr	r0, [pc, #220]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 801309e:	f004 fbfb 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	891b      	ldrh	r3, [r3, #8]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d006      	beq.n	80130b8 <tcp_enqueue_flags+0x100>
 80130aa:	4b32      	ldr	r3, [pc, #200]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 80130ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80130b0:	4936      	ldr	r1, [pc, #216]	@ (801318c <tcp_enqueue_flags+0x1d4>)
 80130b2:	4832      	ldr	r0, [pc, #200]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 80130b4:	f004 fbf0 	bl	8017898 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d103      	bne.n	80130c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80130c6:	e00d      	b.n	80130e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130cc:	61bb      	str	r3, [r7, #24]
 80130ce:	e002      	b.n	80130d6 <tcp_enqueue_flags+0x11e>
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	61bb      	str	r3, [r7, #24]
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d1f8      	bne.n	80130d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80130de:	69bb      	ldr	r3, [r7, #24]
 80130e0:	68fa      	ldr	r2, [r7, #12]
 80130e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80130ec:	78fb      	ldrb	r3, [r7, #3]
 80130ee:	f003 0302 	and.w	r3, r3, #2
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d104      	bne.n	8013100 <tcp_enqueue_flags+0x148>
 80130f6:	78fb      	ldrb	r3, [r7, #3]
 80130f8:	f003 0301 	and.w	r3, r3, #1
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d004      	beq.n	801310a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013104:	1c5a      	adds	r2, r3, #1
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801310a:	78fb      	ldrb	r3, [r7, #3]
 801310c:	f003 0301 	and.w	r3, r3, #1
 8013110:	2b00      	cmp	r3, #0
 8013112:	d006      	beq.n	8013122 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	8b5b      	ldrh	r3, [r3, #26]
 8013118:	f043 0320 	orr.w	r3, r3, #32
 801311c:	b29a      	uxth	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	4618      	mov	r0, r3
 8013128:	f7fa fcdc 	bl	800dae4 <pbuf_clen>
 801312c:	4603      	mov	r3, r0
 801312e:	461a      	mov	r2, r3
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013136:	4413      	add	r3, r2
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00e      	beq.n	8013168 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801314e:	2b00      	cmp	r3, #0
 8013150:	d10a      	bne.n	8013168 <tcp_enqueue_flags+0x1b0>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013156:	2b00      	cmp	r3, #0
 8013158:	d106      	bne.n	8013168 <tcp_enqueue_flags+0x1b0>
 801315a:	4b06      	ldr	r3, [pc, #24]	@ (8013174 <tcp_enqueue_flags+0x1bc>)
 801315c:	f240 4265 	movw	r2, #1125	@ 0x465
 8013160:	490b      	ldr	r1, [pc, #44]	@ (8013190 <tcp_enqueue_flags+0x1d8>)
 8013162:	4806      	ldr	r0, [pc, #24]	@ (801317c <tcp_enqueue_flags+0x1c4>)
 8013164:	f004 fb98 	bl	8017898 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013168:	2300      	movs	r3, #0
}
 801316a:	4618      	mov	r0, r3
 801316c:	3720      	adds	r7, #32
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	0801b0cc 	.word	0x0801b0cc
 8013178:	0801b4f0 	.word	0x0801b4f0
 801317c:	0801b120 	.word	0x0801b120
 8013180:	0801b548 	.word	0x0801b548
 8013184:	0801b568 	.word	0x0801b568
 8013188:	0801b5a4 	.word	0x0801b5a4
 801318c:	0801b5bc 	.word	0x0801b5bc
 8013190:	0801b5e8 	.word	0x0801b5e8

08013194 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013194:	b5b0      	push	{r4, r5, r7, lr}
 8013196:	b08a      	sub	sp, #40	@ 0x28
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d106      	bne.n	80131b0 <tcp_output+0x1c>
 80131a2:	4b8a      	ldr	r3, [pc, #552]	@ (80133cc <tcp_output+0x238>)
 80131a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80131a8:	4989      	ldr	r1, [pc, #548]	@ (80133d0 <tcp_output+0x23c>)
 80131aa:	488a      	ldr	r0, [pc, #552]	@ (80133d4 <tcp_output+0x240>)
 80131ac:	f004 fb74 	bl	8017898 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	7d1b      	ldrb	r3, [r3, #20]
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d106      	bne.n	80131c6 <tcp_output+0x32>
 80131b8:	4b84      	ldr	r3, [pc, #528]	@ (80133cc <tcp_output+0x238>)
 80131ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80131be:	4986      	ldr	r1, [pc, #536]	@ (80133d8 <tcp_output+0x244>)
 80131c0:	4884      	ldr	r0, [pc, #528]	@ (80133d4 <tcp_output+0x240>)
 80131c2:	f004 fb69 	bl	8017898 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80131c6:	4b85      	ldr	r3, [pc, #532]	@ (80133dc <tcp_output+0x248>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	687a      	ldr	r2, [r7, #4]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d101      	bne.n	80131d4 <tcp_output+0x40>
    return ERR_OK;
 80131d0:	2300      	movs	r3, #0
 80131d2:	e1ce      	b.n	8013572 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80131e0:	4293      	cmp	r3, r2
 80131e2:	bf28      	it	cs
 80131e4:	4613      	movcs	r3, r2
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80131f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d10b      	bne.n	801320e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	8b5b      	ldrh	r3, [r3, #26]
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f000 81aa 	beq.w	8013558 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 fdcb 	bl	8013da0 <tcp_send_empty_ack>
 801320a:	4603      	mov	r3, r0
 801320c:	e1b1      	b.n	8013572 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	3304      	adds	r3, #4
 8013214:	461a      	mov	r2, r3
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f7ff f826 	bl	8012268 <tcp_route>
 801321c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d102      	bne.n	801322a <tcp_output+0x96>
    return ERR_RTE;
 8013224:	f06f 0303 	mvn.w	r3, #3
 8013228:	e1a3      	b.n	8013572 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d003      	beq.n	8013238 <tcp_output+0xa4>
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d111      	bne.n	801325c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <tcp_output+0xb0>
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	3304      	adds	r3, #4
 8013242:	e000      	b.n	8013246 <tcp_output+0xb2>
 8013244:	2300      	movs	r3, #0
 8013246:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d102      	bne.n	8013254 <tcp_output+0xc0>
      return ERR_RTE;
 801324e:	f06f 0303 	mvn.w	r3, #3
 8013252:	e18e      	b.n	8013572 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801325e:	68db      	ldr	r3, [r3, #12]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	4618      	mov	r0, r3
 8013264:	f7f8 ff9d 	bl	800c1a2 <lwip_htonl>
 8013268:	4602      	mov	r2, r0
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013272:	8912      	ldrh	r2, [r2, #8]
 8013274:	4413      	add	r3, r2
 8013276:	69ba      	ldr	r2, [r7, #24]
 8013278:	429a      	cmp	r2, r3
 801327a:	d227      	bcs.n	80132cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013282:	461a      	mov	r2, r3
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	4293      	cmp	r3, r2
 8013288:	d114      	bne.n	80132b4 <tcp_output+0x120>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801328e:	2b00      	cmp	r3, #0
 8013290:	d110      	bne.n	80132b4 <tcp_output+0x120>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013298:	2b00      	cmp	r3, #0
 801329a:	d10b      	bne.n	80132b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2201      	movs	r2, #1
 80132a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2200      	movs	r2, #0
 80132b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	8b5b      	ldrh	r3, [r3, #26]
 80132b8:	f003 0302 	and.w	r3, r3, #2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 814d 	beq.w	801355c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 fd6c 	bl	8013da0 <tcp_send_empty_ack>
 80132c8:	4603      	mov	r3, r0
 80132ca:	e152      	b.n	8013572 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2200      	movs	r2, #0
 80132d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80132da:	6a3b      	ldr	r3, [r7, #32]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	f000 811c 	beq.w	801351a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80132e2:	e002      	b.n	80132ea <tcp_output+0x156>
 80132e4:	6a3b      	ldr	r3, [r7, #32]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	623b      	str	r3, [r7, #32]
 80132ea:	6a3b      	ldr	r3, [r7, #32]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d1f8      	bne.n	80132e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80132f2:	e112      	b.n	801351a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80132f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	899b      	ldrh	r3, [r3, #12]
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7f8 ff3b 	bl	800c178 <lwip_htons>
 8013302:	4603      	mov	r3, r0
 8013304:	b2db      	uxtb	r3, r3
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	2b00      	cmp	r3, #0
 801330c:	d006      	beq.n	801331c <tcp_output+0x188>
 801330e:	4b2f      	ldr	r3, [pc, #188]	@ (80133cc <tcp_output+0x238>)
 8013310:	f240 5236 	movw	r2, #1334	@ 0x536
 8013314:	4932      	ldr	r1, [pc, #200]	@ (80133e0 <tcp_output+0x24c>)
 8013316:	482f      	ldr	r0, [pc, #188]	@ (80133d4 <tcp_output+0x240>)
 8013318:	f004 fabe 	bl	8017898 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013320:	2b00      	cmp	r3, #0
 8013322:	d01f      	beq.n	8013364 <tcp_output+0x1d0>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	8b5b      	ldrh	r3, [r3, #26]
 8013328:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801332c:	2b00      	cmp	r3, #0
 801332e:	d119      	bne.n	8013364 <tcp_output+0x1d0>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013334:	2b00      	cmp	r3, #0
 8013336:	d00b      	beq.n	8013350 <tcp_output+0x1bc>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d110      	bne.n	8013364 <tcp_output+0x1d0>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013346:	891a      	ldrh	r2, [r3, #8]
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801334c:	429a      	cmp	r2, r3
 801334e:	d209      	bcs.n	8013364 <tcp_output+0x1d0>
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013356:	2b00      	cmp	r3, #0
 8013358:	d004      	beq.n	8013364 <tcp_output+0x1d0>
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013360:	2b08      	cmp	r3, #8
 8013362:	d901      	bls.n	8013368 <tcp_output+0x1d4>
 8013364:	2301      	movs	r3, #1
 8013366:	e000      	b.n	801336a <tcp_output+0x1d6>
 8013368:	2300      	movs	r3, #0
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	8b5b      	ldrh	r3, [r3, #26]
 8013372:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013376:	2b00      	cmp	r3, #0
 8013378:	f000 80e4 	beq.w	8013544 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7d1b      	ldrb	r3, [r3, #20]
 8013380:	2b02      	cmp	r3, #2
 8013382:	d00d      	beq.n	80133a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	899b      	ldrh	r3, [r3, #12]
 801338a:	b29c      	uxth	r4, r3
 801338c:	2010      	movs	r0, #16
 801338e:	f7f8 fef3 	bl	800c178 <lwip_htons>
 8013392:	4603      	mov	r3, r0
 8013394:	461a      	mov	r2, r3
 8013396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	4322      	orrs	r2, r4
 801339c:	b292      	uxth	r2, r2
 801339e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80133a0:	697a      	ldr	r2, [r7, #20]
 80133a2:	6879      	ldr	r1, [r7, #4]
 80133a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80133a6:	f000 f909 	bl	80135bc <tcp_output_segment>
 80133aa:	4603      	mov	r3, r0
 80133ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80133ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d016      	beq.n	80133e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	8b5b      	ldrh	r3, [r3, #26]
 80133ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133be:	b29a      	uxth	r2, r3
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	835a      	strh	r2, [r3, #26]
      return err;
 80133c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133c8:	e0d3      	b.n	8013572 <tcp_output+0x3de>
 80133ca:	bf00      	nop
 80133cc:	0801b0cc 	.word	0x0801b0cc
 80133d0:	0801b610 	.word	0x0801b610
 80133d4:	0801b120 	.word	0x0801b120
 80133d8:	0801b628 	.word	0x0801b628
 80133dc:	2000f0e4 	.word	0x2000f0e4
 80133e0:	0801b650 	.word	0x0801b650
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80133e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	7d1b      	ldrb	r3, [r3, #20]
 80133f0:	2b02      	cmp	r3, #2
 80133f2:	d006      	beq.n	8013402 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	8b5b      	ldrh	r3, [r3, #26]
 80133f8:	f023 0303 	bic.w	r3, r3, #3
 80133fc:	b29a      	uxth	r2, r3
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	f7f8 feca 	bl	800c1a2 <lwip_htonl>
 801340e:	4604      	mov	r4, r0
 8013410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013412:	891b      	ldrh	r3, [r3, #8]
 8013414:	461d      	mov	r5, r3
 8013416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	899b      	ldrh	r3, [r3, #12]
 801341c:	b29b      	uxth	r3, r3
 801341e:	4618      	mov	r0, r3
 8013420:	f7f8 feaa 	bl	800c178 <lwip_htons>
 8013424:	4603      	mov	r3, r0
 8013426:	b2db      	uxtb	r3, r3
 8013428:	f003 0303 	and.w	r3, r3, #3
 801342c:	2b00      	cmp	r3, #0
 801342e:	d001      	beq.n	8013434 <tcp_output+0x2a0>
 8013430:	2301      	movs	r3, #1
 8013432:	e000      	b.n	8013436 <tcp_output+0x2a2>
 8013434:	2300      	movs	r3, #0
 8013436:	442b      	add	r3, r5
 8013438:	4423      	add	r3, r4
 801343a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	2b00      	cmp	r3, #0
 8013446:	da02      	bge.n	801344e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013450:	891b      	ldrh	r3, [r3, #8]
 8013452:	461c      	mov	r4, r3
 8013454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	899b      	ldrh	r3, [r3, #12]
 801345a:	b29b      	uxth	r3, r3
 801345c:	4618      	mov	r0, r3
 801345e:	f7f8 fe8b 	bl	800c178 <lwip_htons>
 8013462:	4603      	mov	r3, r0
 8013464:	b2db      	uxtb	r3, r3
 8013466:	f003 0303 	and.w	r3, r3, #3
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <tcp_output+0x2de>
 801346e:	2301      	movs	r3, #1
 8013470:	e000      	b.n	8013474 <tcp_output+0x2e0>
 8013472:	2300      	movs	r3, #0
 8013474:	4423      	add	r3, r4
 8013476:	2b00      	cmp	r3, #0
 8013478:	d049      	beq.n	801350e <tcp_output+0x37a>
      seg->next = NULL;
 801347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801347c:	2200      	movs	r2, #0
 801347e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013484:	2b00      	cmp	r3, #0
 8013486:	d105      	bne.n	8013494 <tcp_output+0x300>
        pcb->unacked = seg;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801348c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013490:	623b      	str	r3, [r7, #32]
 8013492:	e03f      	b.n	8013514 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	4618      	mov	r0, r3
 801349c:	f7f8 fe81 	bl	800c1a2 <lwip_htonl>
 80134a0:	4604      	mov	r4, r0
 80134a2:	6a3b      	ldr	r3, [r7, #32]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	685b      	ldr	r3, [r3, #4]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7f8 fe7a 	bl	800c1a2 <lwip_htonl>
 80134ae:	4603      	mov	r3, r0
 80134b0:	1ae3      	subs	r3, r4, r3
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	da24      	bge.n	8013500 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	3370      	adds	r3, #112	@ 0x70
 80134ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80134bc:	e002      	b.n	80134c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d011      	beq.n	80134f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	68db      	ldr	r3, [r3, #12]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7f8 fe64 	bl	800c1a2 <lwip_htonl>
 80134da:	4604      	mov	r4, r0
 80134dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7f8 fe5d 	bl	800c1a2 <lwip_htonl>
 80134e8:	4603      	mov	r3, r0
 80134ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	dbe6      	blt.n	80134be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80134f0:	69fb      	ldr	r3, [r7, #28]
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80134f8:	69fb      	ldr	r3, [r7, #28]
 80134fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80134fc:	601a      	str	r2, [r3, #0]
 80134fe:	e009      	b.n	8013514 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013500:	6a3b      	ldr	r3, [r7, #32]
 8013502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013504:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013506:	6a3b      	ldr	r3, [r7, #32]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	623b      	str	r3, [r7, #32]
 801350c:	e002      	b.n	8013514 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801350e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013510:	f7fb ff01 	bl	800f316 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013518:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	2b00      	cmp	r3, #0
 801351e:	d012      	beq.n	8013546 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	4618      	mov	r0, r3
 8013528:	f7f8 fe3b 	bl	800c1a2 <lwip_htonl>
 801352c:	4602      	mov	r2, r0
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013532:	1ad3      	subs	r3, r2, r3
 8013534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013536:	8912      	ldrh	r2, [r2, #8]
 8013538:	4413      	add	r3, r2
  while (seg != NULL &&
 801353a:	69ba      	ldr	r2, [r7, #24]
 801353c:	429a      	cmp	r2, r3
 801353e:	f4bf aed9 	bcs.w	80132f4 <tcp_output+0x160>
 8013542:	e000      	b.n	8013546 <tcp_output+0x3b2>
      break;
 8013544:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801354a:	2b00      	cmp	r3, #0
 801354c:	d108      	bne.n	8013560 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013556:	e004      	b.n	8013562 <tcp_output+0x3ce>
    goto output_done;
 8013558:	bf00      	nop
 801355a:	e002      	b.n	8013562 <tcp_output+0x3ce>
    goto output_done;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013560:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	8b5b      	ldrh	r3, [r3, #26]
 8013566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801356a:	b29a      	uxth	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013570:	2300      	movs	r3, #0
}
 8013572:	4618      	mov	r0, r3
 8013574:	3728      	adds	r7, #40	@ 0x28
 8013576:	46bd      	mov	sp, r7
 8013578:	bdb0      	pop	{r4, r5, r7, pc}
 801357a:	bf00      	nop

0801357c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d106      	bne.n	8013598 <tcp_output_segment_busy+0x1c>
 801358a:	4b09      	ldr	r3, [pc, #36]	@ (80135b0 <tcp_output_segment_busy+0x34>)
 801358c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8013590:	4908      	ldr	r1, [pc, #32]	@ (80135b4 <tcp_output_segment_busy+0x38>)
 8013592:	4809      	ldr	r0, [pc, #36]	@ (80135b8 <tcp_output_segment_busy+0x3c>)
 8013594:	f004 f980 	bl	8017898 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	685b      	ldr	r3, [r3, #4]
 801359c:	7b9b      	ldrb	r3, [r3, #14]
 801359e:	2b01      	cmp	r3, #1
 80135a0:	d001      	beq.n	80135a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80135a2:	2301      	movs	r3, #1
 80135a4:	e000      	b.n	80135a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80135a6:	2300      	movs	r3, #0
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	0801b0cc 	.word	0x0801b0cc
 80135b4:	0801b668 	.word	0x0801b668
 80135b8:	0801b120 	.word	0x0801b120

080135bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80135bc:	b5b0      	push	{r4, r5, r7, lr}
 80135be:	b08c      	sub	sp, #48	@ 0x30
 80135c0:	af04      	add	r7, sp, #16
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d106      	bne.n	80135dc <tcp_output_segment+0x20>
 80135ce:	4b64      	ldr	r3, [pc, #400]	@ (8013760 <tcp_output_segment+0x1a4>)
 80135d0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80135d4:	4963      	ldr	r1, [pc, #396]	@ (8013764 <tcp_output_segment+0x1a8>)
 80135d6:	4864      	ldr	r0, [pc, #400]	@ (8013768 <tcp_output_segment+0x1ac>)
 80135d8:	f004 f95e 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d106      	bne.n	80135f0 <tcp_output_segment+0x34>
 80135e2:	4b5f      	ldr	r3, [pc, #380]	@ (8013760 <tcp_output_segment+0x1a4>)
 80135e4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80135e8:	4960      	ldr	r1, [pc, #384]	@ (801376c <tcp_output_segment+0x1b0>)
 80135ea:	485f      	ldr	r0, [pc, #380]	@ (8013768 <tcp_output_segment+0x1ac>)
 80135ec:	f004 f954 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <tcp_output_segment+0x48>
 80135f6:	4b5a      	ldr	r3, [pc, #360]	@ (8013760 <tcp_output_segment+0x1a4>)
 80135f8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80135fc:	495c      	ldr	r1, [pc, #368]	@ (8013770 <tcp_output_segment+0x1b4>)
 80135fe:	485a      	ldr	r0, [pc, #360]	@ (8013768 <tcp_output_segment+0x1ac>)
 8013600:	f004 f94a 	bl	8017898 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f7ff ffb9 	bl	801357c <tcp_output_segment_busy>
 801360a:	4603      	mov	r3, r0
 801360c:	2b00      	cmp	r3, #0
 801360e:	d001      	beq.n	8013614 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013610:	2300      	movs	r3, #0
 8013612:	e0a1      	b.n	8013758 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	68dc      	ldr	r4, [r3, #12]
 801361c:	4610      	mov	r0, r2
 801361e:	f7f8 fdc0 	bl	800c1a2 <lwip_htonl>
 8013622:	4603      	mov	r3, r0
 8013624:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	68dc      	ldr	r4, [r3, #12]
 801362e:	4610      	mov	r0, r2
 8013630:	f7f8 fda2 	bl	800c178 <lwip_htons>
 8013634:	4603      	mov	r3, r0
 8013636:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013640:	441a      	add	r2, r3
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	3314      	adds	r3, #20
 801364c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	7a9b      	ldrb	r3, [r3, #10]
 8013652:	f003 0301 	and.w	r3, r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	d015      	beq.n	8013686 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	3304      	adds	r3, #4
 801365e:	461a      	mov	r2, r3
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013666:	f7fc fa39 	bl	800fadc <tcp_eff_send_mss_netif>
 801366a:	4603      	mov	r3, r0
 801366c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801366e:	8b7b      	ldrh	r3, [r7, #26]
 8013670:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013674:	4618      	mov	r0, r3
 8013676:	f7f8 fd94 	bl	800c1a2 <lwip_htonl>
 801367a:	4602      	mov	r2, r0
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	3304      	adds	r3, #4
 8013684:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801368c:	2b00      	cmp	r3, #0
 801368e:	da02      	bge.n	8013696 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	2200      	movs	r2, #0
 8013694:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801369a:	2b00      	cmp	r3, #0
 801369c:	d10c      	bne.n	80136b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801369e:	4b35      	ldr	r3, [pc, #212]	@ (8013774 <tcp_output_segment+0x1b8>)
 80136a0:	681a      	ldr	r2, [r3, #0]
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7f8 fd78 	bl	800c1a2 <lwip_htonl>
 80136b2:	4602      	mov	r2, r0
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	68da      	ldr	r2, [r3, #12]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	8959      	ldrh	r1, [r3, #10]
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	685b      	ldr	r3, [r3, #4]
 80136d0:	8b3a      	ldrh	r2, [r7, #24]
 80136d2:	1a8a      	subs	r2, r1, r2
 80136d4:	b292      	uxth	r2, r2
 80136d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	8919      	ldrh	r1, [r3, #8]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	8b3a      	ldrh	r2, [r7, #24]
 80136e4:	1a8a      	subs	r2, r1, r2
 80136e6:	b292      	uxth	r2, r2
 80136e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	68d2      	ldr	r2, [r2, #12]
 80136f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	2200      	movs	r2, #0
 80136fa:	741a      	strb	r2, [r3, #16]
 80136fc:	2200      	movs	r2, #0
 80136fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	68da      	ldr	r2, [r3, #12]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	7a9b      	ldrb	r3, [r3, #10]
 8013708:	f003 0301 	and.w	r3, r3, #1
 801370c:	2b00      	cmp	r3, #0
 801370e:	d001      	beq.n	8013714 <tcp_output_segment+0x158>
 8013710:	2318      	movs	r3, #24
 8013712:	e000      	b.n	8013716 <tcp_output_segment+0x15a>
 8013714:	2314      	movs	r3, #20
 8013716:	4413      	add	r3, r2
 8013718:	69fa      	ldr	r2, [r7, #28]
 801371a:	429a      	cmp	r2, r3
 801371c:	d006      	beq.n	801372c <tcp_output_segment+0x170>
 801371e:	4b10      	ldr	r3, [pc, #64]	@ (8013760 <tcp_output_segment+0x1a4>)
 8013720:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013724:	4914      	ldr	r1, [pc, #80]	@ (8013778 <tcp_output_segment+0x1bc>)
 8013726:	4810      	ldr	r0, [pc, #64]	@ (8013768 <tcp_output_segment+0x1ac>)
 8013728:	f004 f8b6 	bl	8017898 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	6858      	ldr	r0, [r3, #4]
 8013730:	68b9      	ldr	r1, [r7, #8]
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	1d1c      	adds	r4, r3, #4
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	7add      	ldrb	r5, [r3, #11]
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	7a9b      	ldrb	r3, [r3, #10]
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	9202      	str	r2, [sp, #8]
 8013742:	2206      	movs	r2, #6
 8013744:	9201      	str	r2, [sp, #4]
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	462b      	mov	r3, r5
 801374a:	4622      	mov	r2, r4
 801374c:	f002 fd94 	bl	8016278 <ip4_output_if>
 8013750:	4603      	mov	r3, r0
 8013752:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013754:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3720      	adds	r7, #32
 801375c:	46bd      	mov	sp, r7
 801375e:	bdb0      	pop	{r4, r5, r7, pc}
 8013760:	0801b0cc 	.word	0x0801b0cc
 8013764:	0801b690 	.word	0x0801b690
 8013768:	0801b120 	.word	0x0801b120
 801376c:	0801b6b0 	.word	0x0801b6b0
 8013770:	0801b6d0 	.word	0x0801b6d0
 8013774:	2000f098 	.word	0x2000f098
 8013778:	0801b6f4 	.word	0x0801b6f4

0801377c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801377c:	b5b0      	push	{r4, r5, r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <tcp_rexmit_rto_prepare+0x1c>
 801378a:	4b31      	ldr	r3, [pc, #196]	@ (8013850 <tcp_rexmit_rto_prepare+0xd4>)
 801378c:	f240 6263 	movw	r2, #1635	@ 0x663
 8013790:	4930      	ldr	r1, [pc, #192]	@ (8013854 <tcp_rexmit_rto_prepare+0xd8>)
 8013792:	4831      	ldr	r0, [pc, #196]	@ (8013858 <tcp_rexmit_rto_prepare+0xdc>)
 8013794:	f004 f880 	bl	8017898 <iprintf>

  if (pcb->unacked == NULL) {
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801379c:	2b00      	cmp	r3, #0
 801379e:	d102      	bne.n	80137a6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80137a0:	f06f 0305 	mvn.w	r3, #5
 80137a4:	e050      	b.n	8013848 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137aa:	60fb      	str	r3, [r7, #12]
 80137ac:	e00b      	b.n	80137c6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80137ae:	68f8      	ldr	r0, [r7, #12]
 80137b0:	f7ff fee4 	bl	801357c <tcp_output_segment_busy>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d002      	beq.n	80137c0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80137ba:	f06f 0305 	mvn.w	r3, #5
 80137be:	e043      	b.n	8013848 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	60fb      	str	r3, [r7, #12]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d1ef      	bne.n	80137ae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	f7ff fed4 	bl	801357c <tcp_output_segment_busy>
 80137d4:	4603      	mov	r3, r0
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d002      	beq.n	80137e0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80137da:	f06f 0305 	mvn.w	r3, #5
 80137de:	e033      	b.n	8013848 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	8b5b      	ldrh	r3, [r3, #26]
 80137fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80137fe:	b29a      	uxth	r2, r3
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	4618      	mov	r0, r3
 801380c:	f7f8 fcc9 	bl	800c1a2 <lwip_htonl>
 8013810:	4604      	mov	r4, r0
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	461d      	mov	r5, r3
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	899b      	ldrh	r3, [r3, #12]
 801381e:	b29b      	uxth	r3, r3
 8013820:	4618      	mov	r0, r3
 8013822:	f7f8 fca9 	bl	800c178 <lwip_htons>
 8013826:	4603      	mov	r3, r0
 8013828:	b2db      	uxtb	r3, r3
 801382a:	f003 0303 	and.w	r3, r3, #3
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <tcp_rexmit_rto_prepare+0xba>
 8013832:	2301      	movs	r3, #1
 8013834:	e000      	b.n	8013838 <tcp_rexmit_rto_prepare+0xbc>
 8013836:	2300      	movs	r3, #0
 8013838:	442b      	add	r3, r5
 801383a:	18e2      	adds	r2, r4, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013846:	2300      	movs	r3, #0
}
 8013848:	4618      	mov	r0, r3
 801384a:	3710      	adds	r7, #16
 801384c:	46bd      	mov	sp, r7
 801384e:	bdb0      	pop	{r4, r5, r7, pc}
 8013850:	0801b0cc 	.word	0x0801b0cc
 8013854:	0801b708 	.word	0x0801b708
 8013858:	0801b120 	.word	0x0801b120

0801385c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d106      	bne.n	8013878 <tcp_rexmit_rto_commit+0x1c>
 801386a:	4b0d      	ldr	r3, [pc, #52]	@ (80138a0 <tcp_rexmit_rto_commit+0x44>)
 801386c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013870:	490c      	ldr	r1, [pc, #48]	@ (80138a4 <tcp_rexmit_rto_commit+0x48>)
 8013872:	480d      	ldr	r0, [pc, #52]	@ (80138a8 <tcp_rexmit_rto_commit+0x4c>)
 8013874:	f004 f810 	bl	8017898 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801387e:	2bff      	cmp	r3, #255	@ 0xff
 8013880:	d007      	beq.n	8013892 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013888:	3301      	adds	r3, #1
 801388a:	b2da      	uxtb	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fc7e 	bl	8013194 <tcp_output>
}
 8013898:	bf00      	nop
 801389a:	3708      	adds	r7, #8
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}
 80138a0:	0801b0cc 	.word	0x0801b0cc
 80138a4:	0801b72c 	.word	0x0801b72c
 80138a8:	0801b120 	.word	0x0801b120

080138ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d106      	bne.n	80138c8 <tcp_rexmit_rto+0x1c>
 80138ba:	4b0a      	ldr	r3, [pc, #40]	@ (80138e4 <tcp_rexmit_rto+0x38>)
 80138bc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80138c0:	4909      	ldr	r1, [pc, #36]	@ (80138e8 <tcp_rexmit_rto+0x3c>)
 80138c2:	480a      	ldr	r0, [pc, #40]	@ (80138ec <tcp_rexmit_rto+0x40>)
 80138c4:	f003 ffe8 	bl	8017898 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f7ff ff57 	bl	801377c <tcp_rexmit_rto_prepare>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d102      	bne.n	80138da <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff ffc1 	bl	801385c <tcp_rexmit_rto_commit>
  }
}
 80138da:	bf00      	nop
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	0801b0cc 	.word	0x0801b0cc
 80138e8:	0801b750 	.word	0x0801b750
 80138ec:	0801b120 	.word	0x0801b120

080138f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80138f0:	b590      	push	{r4, r7, lr}
 80138f2:	b085      	sub	sp, #20
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d106      	bne.n	801390c <tcp_rexmit+0x1c>
 80138fe:	4b2f      	ldr	r3, [pc, #188]	@ (80139bc <tcp_rexmit+0xcc>)
 8013900:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013904:	492e      	ldr	r1, [pc, #184]	@ (80139c0 <tcp_rexmit+0xd0>)
 8013906:	482f      	ldr	r0, [pc, #188]	@ (80139c4 <tcp_rexmit+0xd4>)
 8013908:	f003 ffc6 	bl	8017898 <iprintf>

  if (pcb->unacked == NULL) {
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013910:	2b00      	cmp	r3, #0
 8013912:	d102      	bne.n	801391a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013914:	f06f 0305 	mvn.w	r3, #5
 8013918:	e04c      	b.n	80139b4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801391e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013920:	68b8      	ldr	r0, [r7, #8]
 8013922:	f7ff fe2b 	bl	801357c <tcp_output_segment_busy>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801392c:	f06f 0305 	mvn.w	r3, #5
 8013930:	e040      	b.n	80139b4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	336c      	adds	r3, #108	@ 0x6c
 801393e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013940:	e002      	b.n	8013948 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d011      	beq.n	8013974 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	4618      	mov	r0, r3
 801395a:	f7f8 fc22 	bl	800c1a2 <lwip_htonl>
 801395e:	4604      	mov	r4, r0
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	4618      	mov	r0, r3
 8013968:	f7f8 fc1b 	bl	800c1a2 <lwip_htonl>
 801396c:	4603      	mov	r3, r0
 801396e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013970:	2b00      	cmp	r3, #0
 8013972:	dbe6      	blt.n	8013942 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d103      	bne.n	8013992 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013998:	2bff      	cmp	r3, #255	@ 0xff
 801399a:	d007      	beq.n	80139ac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80139a2:	3301      	adds	r3, #1
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80139b2:	2300      	movs	r3, #0
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	3714      	adds	r7, #20
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd90      	pop	{r4, r7, pc}
 80139bc:	0801b0cc 	.word	0x0801b0cc
 80139c0:	0801b76c 	.word	0x0801b76c
 80139c4:	0801b120 	.word	0x0801b120

080139c8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d106      	bne.n	80139e4 <tcp_rexmit_fast+0x1c>
 80139d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013a80 <tcp_rexmit_fast+0xb8>)
 80139d8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80139dc:	4929      	ldr	r1, [pc, #164]	@ (8013a84 <tcp_rexmit_fast+0xbc>)
 80139de:	482a      	ldr	r0, [pc, #168]	@ (8013a88 <tcp_rexmit_fast+0xc0>)
 80139e0:	f003 ff5a 	bl	8017898 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d045      	beq.n	8013a78 <tcp_rexmit_fast+0xb0>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	8b5b      	ldrh	r3, [r3, #26]
 80139f0:	f003 0304 	and.w	r3, r3, #4
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d13f      	bne.n	8013a78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f7ff ff79 	bl	80138f0 <tcp_rexmit>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d139      	bne.n	8013a78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013a10:	4293      	cmp	r3, r2
 8013a12:	bf28      	it	cs
 8013a14:	4613      	movcs	r3, r2
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	da00      	bge.n	8013a1e <tcp_rexmit_fast+0x56>
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	105b      	asrs	r3, r3, #1
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013a2e:	461a      	mov	r2, r3
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d206      	bcs.n	8013a48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a3e:	005b      	lsls	r3, r3, #1
 8013a40:	b29a      	uxth	r2, r3
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013a52:	4619      	mov	r1, r3
 8013a54:	0049      	lsls	r1, r1, #1
 8013a56:	440b      	add	r3, r1
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	4413      	add	r3, r2
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	8b5b      	ldrh	r3, [r3, #26]
 8013a68:	f043 0304 	orr.w	r3, r3, #4
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013a78:	bf00      	nop
 8013a7a:	3708      	adds	r7, #8
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	0801b0cc 	.word	0x0801b0cc
 8013a84:	0801b784 	.word	0x0801b784
 8013a88:	0801b120 	.word	0x0801b120

08013a8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	607b      	str	r3, [r7, #4]
 8013a96:	460b      	mov	r3, r1
 8013a98:	817b      	strh	r3, [r7, #10]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013a9e:	897a      	ldrh	r2, [r7, #10]
 8013aa0:	893b      	ldrh	r3, [r7, #8]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	3314      	adds	r3, #20
 8013aa8:	b29b      	uxth	r3, r3
 8013aaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013aae:	4619      	mov	r1, r3
 8013ab0:	2022      	movs	r0, #34	@ 0x22
 8013ab2:	f7f9 fca5 	bl	800d400 <pbuf_alloc>
 8013ab6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d04d      	beq.n	8013b5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013abe:	897b      	ldrh	r3, [r7, #10]
 8013ac0:	3313      	adds	r3, #19
 8013ac2:	697a      	ldr	r2, [r7, #20]
 8013ac4:	8952      	ldrh	r2, [r2, #10]
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	db06      	blt.n	8013ad8 <tcp_output_alloc_header_common+0x4c>
 8013aca:	4b26      	ldr	r3, [pc, #152]	@ (8013b64 <tcp_output_alloc_header_common+0xd8>)
 8013acc:	f240 7223 	movw	r2, #1827	@ 0x723
 8013ad0:	4925      	ldr	r1, [pc, #148]	@ (8013b68 <tcp_output_alloc_header_common+0xdc>)
 8013ad2:	4826      	ldr	r0, [pc, #152]	@ (8013b6c <tcp_output_alloc_header_common+0xe0>)
 8013ad4:	f003 fee0 	bl	8017898 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013ade:	8c3b      	ldrh	r3, [r7, #32]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7f8 fb49 	bl	800c178 <lwip_htons>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	461a      	mov	r2, r3
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7f8 fb41 	bl	800c178 <lwip_htons>
 8013af6:	4603      	mov	r3, r0
 8013af8:	461a      	mov	r2, r3
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f7f8 fb4c 	bl	800c1a2 <lwip_htonl>
 8013b0a:	4602      	mov	r2, r0
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013b10:	897b      	ldrh	r3, [r7, #10]
 8013b12:	089b      	lsrs	r3, r3, #2
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	3305      	adds	r3, #5
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	031b      	lsls	r3, r3, #12
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	4313      	orrs	r3, r2
 8013b26:	b29b      	uxth	r3, r3
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7f8 fb25 	bl	800c178 <lwip_htons>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	461a      	mov	r2, r3
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013b36:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7f8 fb1d 	bl	800c178 <lwip_htons>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	461a      	mov	r2, r3
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	741a      	strb	r2, [r3, #16]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	2200      	movs	r2, #0
 8013b54:	749a      	strb	r2, [r3, #18]
 8013b56:	2200      	movs	r2, #0
 8013b58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013b5a:	697b      	ldr	r3, [r7, #20]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3718      	adds	r7, #24
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	0801b0cc 	.word	0x0801b0cc
 8013b68:	0801b7a4 	.word	0x0801b7a4
 8013b6c:	0801b120 	.word	0x0801b120

08013b70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013b70:	b5b0      	push	{r4, r5, r7, lr}
 8013b72:	b08a      	sub	sp, #40	@ 0x28
 8013b74:	af04      	add	r7, sp, #16
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	607b      	str	r3, [r7, #4]
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	817b      	strh	r3, [r7, #10]
 8013b7e:	4613      	mov	r3, r2
 8013b80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d106      	bne.n	8013b96 <tcp_output_alloc_header+0x26>
 8013b88:	4b15      	ldr	r3, [pc, #84]	@ (8013be0 <tcp_output_alloc_header+0x70>)
 8013b8a:	f240 7242 	movw	r2, #1858	@ 0x742
 8013b8e:	4915      	ldr	r1, [pc, #84]	@ (8013be4 <tcp_output_alloc_header+0x74>)
 8013b90:	4815      	ldr	r0, [pc, #84]	@ (8013be8 <tcp_output_alloc_header+0x78>)
 8013b92:	f003 fe81 	bl	8017898 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	8adb      	ldrh	r3, [r3, #22]
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	8b12      	ldrh	r2, [r2, #24]
 8013ba2:	68f9      	ldr	r1, [r7, #12]
 8013ba4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013ba6:	893d      	ldrh	r5, [r7, #8]
 8013ba8:	897c      	ldrh	r4, [r7, #10]
 8013baa:	9103      	str	r1, [sp, #12]
 8013bac:	2110      	movs	r1, #16
 8013bae:	9102      	str	r1, [sp, #8]
 8013bb0:	9201      	str	r2, [sp, #4]
 8013bb2:	9300      	str	r3, [sp, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	462a      	mov	r2, r5
 8013bb8:	4621      	mov	r1, r4
 8013bba:	f7ff ff67 	bl	8013a8c <tcp_output_alloc_header_common>
 8013bbe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d006      	beq.n	8013bd4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013bce:	441a      	add	r2, r3
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013bd4:	697b      	ldr	r3, [r7, #20]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3718      	adds	r7, #24
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8013bde:	bf00      	nop
 8013be0:	0801b0cc 	.word	0x0801b0cc
 8013be4:	0801b7d4 	.word	0x0801b7d4
 8013be8:	0801b120 	.word	0x0801b120

08013bec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b088      	sub	sp, #32
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	4611      	mov	r1, r2
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	460b      	mov	r3, r1
 8013bfc:	71fb      	strb	r3, [r7, #7]
 8013bfe:	4613      	mov	r3, r2
 8013c00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d106      	bne.n	8013c1a <tcp_output_fill_options+0x2e>
 8013c0c:	4b12      	ldr	r3, [pc, #72]	@ (8013c58 <tcp_output_fill_options+0x6c>)
 8013c0e:	f240 7256 	movw	r2, #1878	@ 0x756
 8013c12:	4912      	ldr	r1, [pc, #72]	@ (8013c5c <tcp_output_fill_options+0x70>)
 8013c14:	4812      	ldr	r0, [pc, #72]	@ (8013c60 <tcp_output_fill_options+0x74>)
 8013c16:	f003 fe3f 	bl	8017898 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	3314      	adds	r3, #20
 8013c24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013c26:	8bfb      	ldrh	r3, [r7, #30]
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	79fb      	ldrb	r3, [r7, #7]
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	f003 0304 	and.w	r3, r3, #4
 8013c34:	4413      	add	r3, r2
 8013c36:	3314      	adds	r3, #20
 8013c38:	69ba      	ldr	r2, [r7, #24]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	697a      	ldr	r2, [r7, #20]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d006      	beq.n	8013c50 <tcp_output_fill_options+0x64>
 8013c42:	4b05      	ldr	r3, [pc, #20]	@ (8013c58 <tcp_output_fill_options+0x6c>)
 8013c44:	f240 7275 	movw	r2, #1909	@ 0x775
 8013c48:	4906      	ldr	r1, [pc, #24]	@ (8013c64 <tcp_output_fill_options+0x78>)
 8013c4a:	4805      	ldr	r0, [pc, #20]	@ (8013c60 <tcp_output_fill_options+0x74>)
 8013c4c:	f003 fe24 	bl	8017898 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013c50:	bf00      	nop
 8013c52:	3720      	adds	r7, #32
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	0801b0cc 	.word	0x0801b0cc
 8013c5c:	0801b7fc 	.word	0x0801b7fc
 8013c60:	0801b120 	.word	0x0801b120
 8013c64:	0801b6f4 	.word	0x0801b6f4

08013c68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b08a      	sub	sp, #40	@ 0x28
 8013c6c:	af04      	add	r7, sp, #16
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d106      	bne.n	8013c8a <tcp_output_control_segment+0x22>
 8013c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8013cf0 <tcp_output_control_segment+0x88>)
 8013c7e:	f240 7287 	movw	r2, #1927	@ 0x787
 8013c82:	491c      	ldr	r1, [pc, #112]	@ (8013cf4 <tcp_output_control_segment+0x8c>)
 8013c84:	481c      	ldr	r0, [pc, #112]	@ (8013cf8 <tcp_output_control_segment+0x90>)
 8013c86:	f003 fe07 	bl	8017898 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013c8a:	683a      	ldr	r2, [r7, #0]
 8013c8c:	6879      	ldr	r1, [r7, #4]
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f7fe faea 	bl	8012268 <tcp_route>
 8013c94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d102      	bne.n	8013ca2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013c9c:	23fc      	movs	r3, #252	@ 0xfc
 8013c9e:	75fb      	strb	r3, [r7, #23]
 8013ca0:	e01c      	b.n	8013cdc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d006      	beq.n	8013cb6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	7adb      	ldrb	r3, [r3, #11]
 8013cac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	7a9b      	ldrb	r3, [r3, #10]
 8013cb2:	757b      	strb	r3, [r7, #21]
 8013cb4:	e003      	b.n	8013cbe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013cb6:	23ff      	movs	r3, #255	@ 0xff
 8013cb8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013cbe:	7dba      	ldrb	r2, [r7, #22]
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	9302      	str	r3, [sp, #8]
 8013cc4:	2306      	movs	r3, #6
 8013cc6:	9301      	str	r3, [sp, #4]
 8013cc8:	7d7b      	ldrb	r3, [r7, #21]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	4613      	mov	r3, r2
 8013cce:	683a      	ldr	r2, [r7, #0]
 8013cd0:	6879      	ldr	r1, [r7, #4]
 8013cd2:	68b8      	ldr	r0, [r7, #8]
 8013cd4:	f002 fad0 	bl	8016278 <ip4_output_if>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013cdc:	68b8      	ldr	r0, [r7, #8]
 8013cde:	f7f9 fe73 	bl	800d9c8 <pbuf_free>
  return err;
 8013ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3718      	adds	r7, #24
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	0801b0cc 	.word	0x0801b0cc
 8013cf4:	0801b824 	.word	0x0801b824
 8013cf8:	0801b120 	.word	0x0801b120

08013cfc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013cfc:	b590      	push	{r4, r7, lr}
 8013cfe:	b08b      	sub	sp, #44	@ 0x2c
 8013d00:	af04      	add	r7, sp, #16
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	607a      	str	r2, [r7, #4]
 8013d08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d106      	bne.n	8013d1e <tcp_rst+0x22>
 8013d10:	4b1f      	ldr	r3, [pc, #124]	@ (8013d90 <tcp_rst+0x94>)
 8013d12:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8013d16:	491f      	ldr	r1, [pc, #124]	@ (8013d94 <tcp_rst+0x98>)
 8013d18:	481f      	ldr	r0, [pc, #124]	@ (8013d98 <tcp_rst+0x9c>)
 8013d1a:	f003 fdbd 	bl	8017898 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d106      	bne.n	8013d32 <tcp_rst+0x36>
 8013d24:	4b1a      	ldr	r3, [pc, #104]	@ (8013d90 <tcp_rst+0x94>)
 8013d26:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013d2a:	491c      	ldr	r1, [pc, #112]	@ (8013d9c <tcp_rst+0xa0>)
 8013d2c:	481a      	ldr	r0, [pc, #104]	@ (8013d98 <tcp_rst+0x9c>)
 8013d2e:	f003 fdb3 	bl	8017898 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013d32:	2300      	movs	r3, #0
 8013d34:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013d36:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013d3a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
 8013d3e:	b29c      	uxth	r4, r3
 8013d40:	68b8      	ldr	r0, [r7, #8]
 8013d42:	f7f8 fa2e 	bl	800c1a2 <lwip_htonl>
 8013d46:	4602      	mov	r2, r0
 8013d48:	8abb      	ldrh	r3, [r7, #20]
 8013d4a:	9303      	str	r3, [sp, #12]
 8013d4c:	2314      	movs	r3, #20
 8013d4e:	9302      	str	r3, [sp, #8]
 8013d50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013d52:	9301      	str	r3, [sp, #4]
 8013d54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	4621      	mov	r1, r4
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7ff fe94 	bl	8013a8c <tcp_output_alloc_header_common>
 8013d64:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00c      	beq.n	8013d86 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	6939      	ldr	r1, [r7, #16]
 8013d72:	68f8      	ldr	r0, [r7, #12]
 8013d74:	f7ff ff3a 	bl	8013bec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d7a:	683a      	ldr	r2, [r7, #0]
 8013d7c:	6939      	ldr	r1, [r7, #16]
 8013d7e:	68f8      	ldr	r0, [r7, #12]
 8013d80:	f7ff ff72 	bl	8013c68 <tcp_output_control_segment>
 8013d84:	e000      	b.n	8013d88 <tcp_rst+0x8c>
    return;
 8013d86:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013d88:	371c      	adds	r7, #28
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd90      	pop	{r4, r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	0801b0cc 	.word	0x0801b0cc
 8013d94:	0801b850 	.word	0x0801b850
 8013d98:	0801b120 	.word	0x0801b120
 8013d9c:	0801b86c 	.word	0x0801b86c

08013da0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b087      	sub	sp, #28
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013da8:	2300      	movs	r3, #0
 8013daa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013dac:	2300      	movs	r3, #0
 8013dae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d106      	bne.n	8013dc4 <tcp_send_empty_ack+0x24>
 8013db6:	4b28      	ldr	r3, [pc, #160]	@ (8013e58 <tcp_send_empty_ack+0xb8>)
 8013db8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013dbc:	4927      	ldr	r1, [pc, #156]	@ (8013e5c <tcp_send_empty_ack+0xbc>)
 8013dbe:	4828      	ldr	r0, [pc, #160]	@ (8013e60 <tcp_send_empty_ack+0xc0>)
 8013dc0:	f003 fd6a 	bl	8017898 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013dc4:	7dfb      	ldrb	r3, [r7, #23]
 8013dc6:	009b      	lsls	r3, r3, #2
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	f003 0304 	and.w	r3, r3, #4
 8013dce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013dd0:	7d7b      	ldrb	r3, [r7, #21]
 8013dd2:	b29c      	uxth	r4, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f7f8 f9e2 	bl	800c1a2 <lwip_htonl>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2200      	movs	r2, #0
 8013de2:	4621      	mov	r1, r4
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f7ff fec3 	bl	8013b70 <tcp_output_alloc_header>
 8013dea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	8b5b      	ldrh	r3, [r3, #26]
 8013df6:	f043 0303 	orr.w	r3, r3, #3
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013e00:	f06f 0301 	mvn.w	r3, #1
 8013e04:	e023      	b.n	8013e4e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013e06:	7dbb      	ldrb	r3, [r7, #22]
 8013e08:	7dfa      	ldrb	r2, [r7, #23]
 8013e0a:	6939      	ldr	r1, [r7, #16]
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f7ff feed 	bl	8013bec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	3304      	adds	r3, #4
 8013e18:	6939      	ldr	r1, [r7, #16]
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f7ff ff24 	bl	8013c68 <tcp_output_control_segment>
 8013e20:	4603      	mov	r3, r0
 8013e22:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d007      	beq.n	8013e3c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8b5b      	ldrh	r3, [r3, #26]
 8013e30:	f043 0303 	orr.w	r3, r3, #3
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	835a      	strh	r2, [r3, #26]
 8013e3a:	e006      	b.n	8013e4a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	8b5b      	ldrh	r3, [r3, #26]
 8013e40:	f023 0303 	bic.w	r3, r3, #3
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	371c      	adds	r7, #28
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd90      	pop	{r4, r7, pc}
 8013e56:	bf00      	nop
 8013e58:	0801b0cc 	.word	0x0801b0cc
 8013e5c:	0801b888 	.word	0x0801b888
 8013e60:	0801b120 	.word	0x0801b120

08013e64 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013e64:	b590      	push	{r4, r7, lr}
 8013e66:	b087      	sub	sp, #28
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d106      	bne.n	8013e84 <tcp_keepalive+0x20>
 8013e76:	4b18      	ldr	r3, [pc, #96]	@ (8013ed8 <tcp_keepalive+0x74>)
 8013e78:	f640 0224 	movw	r2, #2084	@ 0x824
 8013e7c:	4917      	ldr	r1, [pc, #92]	@ (8013edc <tcp_keepalive+0x78>)
 8013e7e:	4818      	ldr	r0, [pc, #96]	@ (8013ee0 <tcp_keepalive+0x7c>)
 8013e80:	f003 fd0a 	bl	8017898 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013e84:	7dfb      	ldrb	r3, [r7, #23]
 8013e86:	b29c      	uxth	r4, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e8c:	3b01      	subs	r3, #1
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7f8 f987 	bl	800c1a2 <lwip_htonl>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2200      	movs	r2, #0
 8013e98:	4621      	mov	r1, r4
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f7ff fe68 	bl	8013b70 <tcp_output_alloc_header>
 8013ea0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d102      	bne.n	8013eae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eac:	e010      	b.n	8013ed0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	6939      	ldr	r1, [r7, #16]
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f7ff fe99 	bl	8013bec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	6939      	ldr	r1, [r7, #16]
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff fed0 	bl	8013c68 <tcp_output_control_segment>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	371c      	adds	r7, #28
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd90      	pop	{r4, r7, pc}
 8013ed8:	0801b0cc 	.word	0x0801b0cc
 8013edc:	0801b8a8 	.word	0x0801b8a8
 8013ee0:	0801b120 	.word	0x0801b120

08013ee4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013ee4:	b590      	push	{r4, r7, lr}
 8013ee6:	b08b      	sub	sp, #44	@ 0x2c
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013eec:	2300      	movs	r3, #0
 8013eee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d106      	bne.n	8013f06 <tcp_zero_window_probe+0x22>
 8013ef8:	4b4c      	ldr	r3, [pc, #304]	@ (801402c <tcp_zero_window_probe+0x148>)
 8013efa:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013efe:	494c      	ldr	r1, [pc, #304]	@ (8014030 <tcp_zero_window_probe+0x14c>)
 8013f00:	484c      	ldr	r0, [pc, #304]	@ (8014034 <tcp_zero_window_probe+0x150>)
 8013f02:	f003 fcc9 	bl	8017898 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f0a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013f0c:	6a3b      	ldr	r3, [r7, #32]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013f12:	2300      	movs	r3, #0
 8013f14:	e086      	b.n	8014024 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013f1c:	2bff      	cmp	r3, #255	@ 0xff
 8013f1e:	d007      	beq.n	8013f30 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013f26:	3301      	adds	r3, #1
 8013f28:	b2da      	uxtb	r2, r3
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013f30:	6a3b      	ldr	r3, [r7, #32]
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	899b      	ldrh	r3, [r3, #12]
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7f8 f91d 	bl	800c178 <lwip_htons>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	f003 0301 	and.w	r3, r3, #1
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d005      	beq.n	8013f56 <tcp_zero_window_probe+0x72>
 8013f4a:	6a3b      	ldr	r3, [r7, #32]
 8013f4c:	891b      	ldrh	r3, [r3, #8]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d101      	bne.n	8013f56 <tcp_zero_window_probe+0x72>
 8013f52:	2301      	movs	r3, #1
 8013f54:	e000      	b.n	8013f58 <tcp_zero_window_probe+0x74>
 8013f56:	2300      	movs	r3, #0
 8013f58:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013f5a:	7ffb      	ldrb	r3, [r7, #31]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	bf0c      	ite	eq
 8013f60:	2301      	moveq	r3, #1
 8013f62:	2300      	movne	r3, #0
 8013f64:	b2db      	uxtb	r3, r3
 8013f66:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f6c:	b299      	uxth	r1, r3
 8013f6e:	6a3b      	ldr	r3, [r7, #32]
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	8bba      	ldrh	r2, [r7, #28]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ff fdfa 	bl	8013b70 <tcp_output_alloc_header>
 8013f7c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d102      	bne.n	8013f8a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013f84:	f04f 33ff 	mov.w	r3, #4294967295
 8013f88:	e04c      	b.n	8014024 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013f90:	7ffb      	ldrb	r3, [r7, #31]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d011      	beq.n	8013fba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	899b      	ldrh	r3, [r3, #12]
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	b21b      	sxth	r3, r3
 8013f9e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013fa2:	b21c      	sxth	r4, r3
 8013fa4:	2011      	movs	r0, #17
 8013fa6:	f7f8 f8e7 	bl	800c178 <lwip_htons>
 8013faa:	4603      	mov	r3, r0
 8013fac:	b21b      	sxth	r3, r3
 8013fae:	4323      	orrs	r3, r4
 8013fb0:	b21b      	sxth	r3, r3
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	819a      	strh	r2, [r3, #12]
 8013fb8:	e010      	b.n	8013fdc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013fba:	69bb      	ldr	r3, [r7, #24]
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	3314      	adds	r3, #20
 8013fc0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013fc2:	6a3b      	ldr	r3, [r7, #32]
 8013fc4:	6858      	ldr	r0, [r3, #4]
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	891a      	ldrh	r2, [r3, #8]
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	891b      	ldrh	r3, [r3, #8]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	6939      	ldr	r1, [r7, #16]
 8013fd8:	f7f9 fefc 	bl	800ddd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7f8 f8dd 	bl	800c1a2 <lwip_htonl>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	3301      	adds	r3, #1
 8013fec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	da02      	bge.n	8014000 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014004:	2200      	movs	r2, #0
 8014006:	69b9      	ldr	r1, [r7, #24]
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7ff fdef 	bl	8013bec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	3304      	adds	r3, #4
 8014014:	69b9      	ldr	r1, [r7, #24]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7ff fe26 	bl	8013c68 <tcp_output_control_segment>
 801401c:	4603      	mov	r3, r0
 801401e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014020:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014024:	4618      	mov	r0, r3
 8014026:	372c      	adds	r7, #44	@ 0x2c
 8014028:	46bd      	mov	sp, r7
 801402a:	bd90      	pop	{r4, r7, pc}
 801402c:	0801b0cc 	.word	0x0801b0cc
 8014030:	0801b8c4 	.word	0x0801b8c4
 8014034:	0801b120 	.word	0x0801b120

08014038 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b082      	sub	sp, #8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014040:	f7f9 ffb6 	bl	800dfb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014044:	4b0a      	ldr	r3, [pc, #40]	@ (8014070 <tcpip_tcp_timer+0x38>)
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <tcpip_tcp_timer+0x1c>
 801404c:	4b09      	ldr	r3, [pc, #36]	@ (8014074 <tcpip_tcp_timer+0x3c>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d005      	beq.n	8014060 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014054:	2200      	movs	r2, #0
 8014056:	4908      	ldr	r1, [pc, #32]	@ (8014078 <tcpip_tcp_timer+0x40>)
 8014058:	20fa      	movs	r0, #250	@ 0xfa
 801405a:	f000 f8f3 	bl	8014244 <sys_timeout>
 801405e:	e003      	b.n	8014068 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014060:	4b06      	ldr	r3, [pc, #24]	@ (801407c <tcpip_tcp_timer+0x44>)
 8014062:	2200      	movs	r2, #0
 8014064:	601a      	str	r2, [r3, #0]
  }
}
 8014066:	bf00      	nop
 8014068:	bf00      	nop
 801406a:	3708      	adds	r7, #8
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	2000f0a4 	.word	0x2000f0a4
 8014074:	2000f0a8 	.word	0x2000f0a8
 8014078:	08014039 	.word	0x08014039
 801407c:	2000f0f0 	.word	0x2000f0f0

08014080 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014084:	4b0a      	ldr	r3, [pc, #40]	@ (80140b0 <tcp_timer_needed+0x30>)
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10f      	bne.n	80140ac <tcp_timer_needed+0x2c>
 801408c:	4b09      	ldr	r3, [pc, #36]	@ (80140b4 <tcp_timer_needed+0x34>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d103      	bne.n	801409c <tcp_timer_needed+0x1c>
 8014094:	4b08      	ldr	r3, [pc, #32]	@ (80140b8 <tcp_timer_needed+0x38>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d007      	beq.n	80140ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801409c:	4b04      	ldr	r3, [pc, #16]	@ (80140b0 <tcp_timer_needed+0x30>)
 801409e:	2201      	movs	r2, #1
 80140a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80140a2:	2200      	movs	r2, #0
 80140a4:	4905      	ldr	r1, [pc, #20]	@ (80140bc <tcp_timer_needed+0x3c>)
 80140a6:	20fa      	movs	r0, #250	@ 0xfa
 80140a8:	f000 f8cc 	bl	8014244 <sys_timeout>
  }
}
 80140ac:	bf00      	nop
 80140ae:	bd80      	pop	{r7, pc}
 80140b0:	2000f0f0 	.word	0x2000f0f0
 80140b4:	2000f0a4 	.word	0x2000f0a4
 80140b8:	2000f0a8 	.word	0x2000f0a8
 80140bc:	08014039 	.word	0x08014039

080140c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80140cc:	200a      	movs	r0, #10
 80140ce:	f7f8 fd61 	bl	800cb94 <memp_malloc>
 80140d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d109      	bne.n	80140ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d151      	bne.n	8014184 <sys_timeout_abs+0xc4>
 80140e0:	4b2a      	ldr	r3, [pc, #168]	@ (801418c <sys_timeout_abs+0xcc>)
 80140e2:	22be      	movs	r2, #190	@ 0xbe
 80140e4:	492a      	ldr	r1, [pc, #168]	@ (8014190 <sys_timeout_abs+0xd0>)
 80140e6:	482b      	ldr	r0, [pc, #172]	@ (8014194 <sys_timeout_abs+0xd4>)
 80140e8:	f003 fbd6 	bl	8017898 <iprintf>
    return;
 80140ec:	e04a      	b.n	8014184 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	2200      	movs	r2, #0
 80140f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	68ba      	ldr	r2, [r7, #8]
 80140f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	687a      	ldr	r2, [r7, #4]
 80140fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	68fa      	ldr	r2, [r7, #12]
 8014104:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014106:	4b24      	ldr	r3, [pc, #144]	@ (8014198 <sys_timeout_abs+0xd8>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d103      	bne.n	8014116 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801410e:	4a22      	ldr	r2, [pc, #136]	@ (8014198 <sys_timeout_abs+0xd8>)
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	6013      	str	r3, [r2, #0]
    return;
 8014114:	e037      	b.n	8014186 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	685a      	ldr	r2, [r3, #4]
 801411a:	4b1f      	ldr	r3, [pc, #124]	@ (8014198 <sys_timeout_abs+0xd8>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	0fdb      	lsrs	r3, r3, #31
 8014124:	f003 0301 	and.w	r3, r3, #1
 8014128:	b2db      	uxtb	r3, r3
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801412e:	4b1a      	ldr	r3, [pc, #104]	@ (8014198 <sys_timeout_abs+0xd8>)
 8014130:	681a      	ldr	r2, [r3, #0]
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014136:	4a18      	ldr	r2, [pc, #96]	@ (8014198 <sys_timeout_abs+0xd8>)
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	6013      	str	r3, [r2, #0]
 801413c:	e023      	b.n	8014186 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801413e:	4b16      	ldr	r3, [pc, #88]	@ (8014198 <sys_timeout_abs+0xd8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	617b      	str	r3, [r7, #20]
 8014144:	e01a      	b.n	801417c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00b      	beq.n	8014166 <sys_timeout_abs+0xa6>
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	685a      	ldr	r2, [r3, #4]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	1ad3      	subs	r3, r2, r3
 801415a:	0fdb      	lsrs	r3, r3, #31
 801415c:	f003 0301 	and.w	r3, r3, #1
 8014160:	b2db      	uxtb	r3, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	d007      	beq.n	8014176 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	693a      	ldr	r2, [r7, #16]
 8014172:	601a      	str	r2, [r3, #0]
        break;
 8014174:	e007      	b.n	8014186 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	617b      	str	r3, [r7, #20]
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d1e1      	bne.n	8014146 <sys_timeout_abs+0x86>
 8014182:	e000      	b.n	8014186 <sys_timeout_abs+0xc6>
    return;
 8014184:	bf00      	nop
      }
    }
  }
}
 8014186:	3718      	adds	r7, #24
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}
 801418c:	0801b8e8 	.word	0x0801b8e8
 8014190:	0801b91c 	.word	0x0801b91c
 8014194:	0801b95c 	.word	0x0801b95c
 8014198:	2000f0e8 	.word	0x2000f0e8

0801419c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b086      	sub	sp, #24
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	4798      	blx	r3

  now = sys_now();
 80141ae:	f7f1 fb3b 	bl	8005828 <sys_now>
 80141b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	4b0f      	ldr	r3, [pc, #60]	@ (80141f8 <lwip_cyclic_timer+0x5c>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	4413      	add	r3, r2
 80141be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80141c0:	68fa      	ldr	r2, [r7, #12]
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	1ad3      	subs	r3, r2, r3
 80141c6:	0fdb      	lsrs	r3, r3, #31
 80141c8:	f003 0301 	and.w	r3, r3, #1
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d009      	beq.n	80141e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	4413      	add	r3, r2
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	4907      	ldr	r1, [pc, #28]	@ (80141fc <lwip_cyclic_timer+0x60>)
 80141de:	4618      	mov	r0, r3
 80141e0:	f7ff ff6e 	bl	80140c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80141e4:	e004      	b.n	80141f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	4904      	ldr	r1, [pc, #16]	@ (80141fc <lwip_cyclic_timer+0x60>)
 80141ea:	68f8      	ldr	r0, [r7, #12]
 80141ec:	f7ff ff68 	bl	80140c0 <sys_timeout_abs>
}
 80141f0:	bf00      	nop
 80141f2:	3718      	adds	r7, #24
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	2000f0ec 	.word	0x2000f0ec
 80141fc:	0801419d 	.word	0x0801419d

08014200 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b082      	sub	sp, #8
 8014204:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014206:	2301      	movs	r3, #1
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	e00e      	b.n	801422a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801420c:	4a0b      	ldr	r2, [pc, #44]	@ (801423c <sys_timeouts_init+0x3c>)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	4a08      	ldr	r2, [pc, #32]	@ (801423c <sys_timeouts_init+0x3c>)
 801421a:	4413      	add	r3, r2
 801421c:	461a      	mov	r2, r3
 801421e:	4908      	ldr	r1, [pc, #32]	@ (8014240 <sys_timeouts_init+0x40>)
 8014220:	f000 f810 	bl	8014244 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	3301      	adds	r3, #1
 8014228:	607b      	str	r3, [r7, #4]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b02      	cmp	r3, #2
 801422e:	d9ed      	bls.n	801420c <sys_timeouts_init+0xc>
  }
}
 8014230:	bf00      	nop
 8014232:	bf00      	nop
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	0801d1d8 	.word	0x0801d1d8
 8014240:	0801419d 	.word	0x0801419d

08014244 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b086      	sub	sp, #24
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014256:	d306      	bcc.n	8014266 <sys_timeout+0x22>
 8014258:	4b0a      	ldr	r3, [pc, #40]	@ (8014284 <sys_timeout+0x40>)
 801425a:	f240 1229 	movw	r2, #297	@ 0x129
 801425e:	490a      	ldr	r1, [pc, #40]	@ (8014288 <sys_timeout+0x44>)
 8014260:	480a      	ldr	r0, [pc, #40]	@ (801428c <sys_timeout+0x48>)
 8014262:	f003 fb19 	bl	8017898 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014266:	f7f1 fadf 	bl	8005828 <sys_now>
 801426a:	4602      	mov	r2, r0
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	4413      	add	r3, r2
 8014270:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	68b9      	ldr	r1, [r7, #8]
 8014276:	6978      	ldr	r0, [r7, #20]
 8014278:	f7ff ff22 	bl	80140c0 <sys_timeout_abs>
#endif
}
 801427c:	bf00      	nop
 801427e:	3718      	adds	r7, #24
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	0801b8e8 	.word	0x0801b8e8
 8014288:	0801b984 	.word	0x0801b984
 801428c:	0801b95c 	.word	0x0801b95c

08014290 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014296:	f7f1 fac7 	bl	8005828 <sys_now>
 801429a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801429c:	4b17      	ldr	r3, [pc, #92]	@ (80142fc <sys_check_timeouts+0x6c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d022      	beq.n	80142ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	68fa      	ldr	r2, [r7, #12]
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	0fdb      	lsrs	r3, r3, #31
 80142b2:	f003 0301 	and.w	r3, r3, #1
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d11a      	bne.n	80142f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a0e      	ldr	r2, [pc, #56]	@ (80142fc <sys_check_timeouts+0x6c>)
 80142c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	689b      	ldr	r3, [r3, #8]
 80142c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	68db      	ldr	r3, [r3, #12]
 80142ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	685b      	ldr	r3, [r3, #4]
 80142d4:	4a0a      	ldr	r2, [pc, #40]	@ (8014300 <sys_check_timeouts+0x70>)
 80142d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80142d8:	68b9      	ldr	r1, [r7, #8]
 80142da:	200a      	movs	r0, #10
 80142dc:	f7f8 fcd0 	bl	800cc80 <memp_free>
    if (handler != NULL) {
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d0da      	beq.n	801429c <sys_check_timeouts+0xc>
      handler(arg);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6838      	ldr	r0, [r7, #0]
 80142ea:	4798      	blx	r3
  do {
 80142ec:	e7d6      	b.n	801429c <sys_check_timeouts+0xc>
      return;
 80142ee:	bf00      	nop
 80142f0:	e000      	b.n	80142f4 <sys_check_timeouts+0x64>
      return;
 80142f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80142f4:	3710      	adds	r7, #16
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	2000f0e8 	.word	0x2000f0e8
 8014300:	2000f0ec 	.word	0x2000f0ec

08014304 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801430a:	4b16      	ldr	r3, [pc, #88]	@ (8014364 <sys_timeouts_sleeptime+0x60>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d102      	bne.n	8014318 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014312:	f04f 33ff 	mov.w	r3, #4294967295
 8014316:	e020      	b.n	801435a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014318:	f7f1 fa86 	bl	8005828 <sys_now>
 801431c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801431e:	4b11      	ldr	r3, [pc, #68]	@ (8014364 <sys_timeouts_sleeptime+0x60>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	685a      	ldr	r2, [r3, #4]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	0fdb      	lsrs	r3, r3, #31
 801432a:	f003 0301 	and.w	r3, r3, #1
 801432e:	b2db      	uxtb	r3, r3
 8014330:	2b00      	cmp	r3, #0
 8014332:	d001      	beq.n	8014338 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014334:	2300      	movs	r3, #0
 8014336:	e010      	b.n	801435a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014338:	4b0a      	ldr	r3, [pc, #40]	@ (8014364 <sys_timeouts_sleeptime+0x60>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	685a      	ldr	r2, [r3, #4]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	da06      	bge.n	8014358 <sys_timeouts_sleeptime+0x54>
 801434a:	4b07      	ldr	r3, [pc, #28]	@ (8014368 <sys_timeouts_sleeptime+0x64>)
 801434c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014350:	4906      	ldr	r1, [pc, #24]	@ (801436c <sys_timeouts_sleeptime+0x68>)
 8014352:	4807      	ldr	r0, [pc, #28]	@ (8014370 <sys_timeouts_sleeptime+0x6c>)
 8014354:	f003 faa0 	bl	8017898 <iprintf>
    return ret;
 8014358:	683b      	ldr	r3, [r7, #0]
  }
}
 801435a:	4618      	mov	r0, r3
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	2000f0e8 	.word	0x2000f0e8
 8014368:	0801b8e8 	.word	0x0801b8e8
 801436c:	0801b9bc 	.word	0x0801b9bc
 8014370:	0801b95c 	.word	0x0801b95c

08014374 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014378:	f003 f98e 	bl	8017698 <rand>
 801437c:	4603      	mov	r3, r0
 801437e:	b29b      	uxth	r3, r3
 8014380:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014384:	b29b      	uxth	r3, r3
 8014386:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801438a:	b29a      	uxth	r2, r3
 801438c:	4b01      	ldr	r3, [pc, #4]	@ (8014394 <udp_init+0x20>)
 801438e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014390:	bf00      	nop
 8014392:	bd80      	pop	{r7, pc}
 8014394:	2000002c 	.word	0x2000002c

08014398 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80143a2:	4b17      	ldr	r3, [pc, #92]	@ (8014400 <udp_new_port+0x68>)
 80143a4:	881b      	ldrh	r3, [r3, #0]
 80143a6:	1c5a      	adds	r2, r3, #1
 80143a8:	b291      	uxth	r1, r2
 80143aa:	4a15      	ldr	r2, [pc, #84]	@ (8014400 <udp_new_port+0x68>)
 80143ac:	8011      	strh	r1, [r2, #0]
 80143ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d103      	bne.n	80143be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80143b6:	4b12      	ldr	r3, [pc, #72]	@ (8014400 <udp_new_port+0x68>)
 80143b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80143bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80143be:	4b11      	ldr	r3, [pc, #68]	@ (8014404 <udp_new_port+0x6c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	603b      	str	r3, [r7, #0]
 80143c4:	e011      	b.n	80143ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	8a5a      	ldrh	r2, [r3, #18]
 80143ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014400 <udp_new_port+0x68>)
 80143cc:	881b      	ldrh	r3, [r3, #0]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d108      	bne.n	80143e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80143d2:	88fb      	ldrh	r3, [r7, #6]
 80143d4:	3301      	adds	r3, #1
 80143d6:	80fb      	strh	r3, [r7, #6]
 80143d8:	88fb      	ldrh	r3, [r7, #6]
 80143da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80143de:	d3e0      	bcc.n	80143a2 <udp_new_port+0xa>
        return 0;
 80143e0:	2300      	movs	r3, #0
 80143e2:	e007      	b.n	80143f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	603b      	str	r3, [r7, #0]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d1ea      	bne.n	80143c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80143f0:	4b03      	ldr	r3, [pc, #12]	@ (8014400 <udp_new_port+0x68>)
 80143f2:	881b      	ldrh	r3, [r3, #0]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	370c      	adds	r7, #12
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr
 8014400:	2000002c 	.word	0x2000002c
 8014404:	2000f0f4 	.word	0x2000f0f4

08014408 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	4613      	mov	r3, r2
 8014414:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d105      	bne.n	8014428 <udp_input_local_match+0x20>
 801441c:	4b27      	ldr	r3, [pc, #156]	@ (80144bc <udp_input_local_match+0xb4>)
 801441e:	2287      	movs	r2, #135	@ 0x87
 8014420:	4927      	ldr	r1, [pc, #156]	@ (80144c0 <udp_input_local_match+0xb8>)
 8014422:	4828      	ldr	r0, [pc, #160]	@ (80144c4 <udp_input_local_match+0xbc>)
 8014424:	f003 fa38 	bl	8017898 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d105      	bne.n	801443a <udp_input_local_match+0x32>
 801442e:	4b23      	ldr	r3, [pc, #140]	@ (80144bc <udp_input_local_match+0xb4>)
 8014430:	2288      	movs	r2, #136	@ 0x88
 8014432:	4925      	ldr	r1, [pc, #148]	@ (80144c8 <udp_input_local_match+0xc0>)
 8014434:	4823      	ldr	r0, [pc, #140]	@ (80144c4 <udp_input_local_match+0xbc>)
 8014436:	f003 fa2f 	bl	8017898 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	7a1b      	ldrb	r3, [r3, #8]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d00b      	beq.n	801445a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	7a1a      	ldrb	r2, [r3, #8]
 8014446:	4b21      	ldr	r3, [pc, #132]	@ (80144cc <udp_input_local_match+0xc4>)
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801444e:	3301      	adds	r3, #1
 8014450:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014452:	429a      	cmp	r2, r3
 8014454:	d001      	beq.n	801445a <udp_input_local_match+0x52>
    return 0;
 8014456:	2300      	movs	r3, #0
 8014458:	e02b      	b.n	80144b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801445a:	79fb      	ldrb	r3, [r7, #7]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d018      	beq.n	8014492 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d013      	beq.n	801448e <udp_input_local_match+0x86>
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00f      	beq.n	801448e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801446e:	4b17      	ldr	r3, [pc, #92]	@ (80144cc <udp_input_local_match+0xc4>)
 8014470:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014476:	d00a      	beq.n	801448e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	4b13      	ldr	r3, [pc, #76]	@ (80144cc <udp_input_local_match+0xc4>)
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	405a      	eors	r2, r3
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	3308      	adds	r3, #8
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801448a:	2b00      	cmp	r3, #0
 801448c:	d110      	bne.n	80144b0 <udp_input_local_match+0xa8>
          return 1;
 801448e:	2301      	movs	r3, #1
 8014490:	e00f      	b.n	80144b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d009      	beq.n	80144ac <udp_input_local_match+0xa4>
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d005      	beq.n	80144ac <udp_input_local_match+0xa4>
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	681a      	ldr	r2, [r3, #0]
 80144a4:	4b09      	ldr	r3, [pc, #36]	@ (80144cc <udp_input_local_match+0xc4>)
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d101      	bne.n	80144b0 <udp_input_local_match+0xa8>
        return 1;
 80144ac:	2301      	movs	r3, #1
 80144ae:	e000      	b.n	80144b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3710      	adds	r7, #16
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	0801b9d0 	.word	0x0801b9d0
 80144c0:	0801ba00 	.word	0x0801ba00
 80144c4:	0801ba24 	.word	0x0801ba24
 80144c8:	0801ba4c 	.word	0x0801ba4c
 80144cc:	2000b944 	.word	0x2000b944

080144d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80144d0:	b590      	push	{r4, r7, lr}
 80144d2:	b08d      	sub	sp, #52	@ 0x34
 80144d4:	af02      	add	r7, sp, #8
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d105      	bne.n	80144f0 <udp_input+0x20>
 80144e4:	4b7c      	ldr	r3, [pc, #496]	@ (80146d8 <udp_input+0x208>)
 80144e6:	22cf      	movs	r2, #207	@ 0xcf
 80144e8:	497c      	ldr	r1, [pc, #496]	@ (80146dc <udp_input+0x20c>)
 80144ea:	487d      	ldr	r0, [pc, #500]	@ (80146e0 <udp_input+0x210>)
 80144ec:	f003 f9d4 	bl	8017898 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d105      	bne.n	8014502 <udp_input+0x32>
 80144f6:	4b78      	ldr	r3, [pc, #480]	@ (80146d8 <udp_input+0x208>)
 80144f8:	22d0      	movs	r2, #208	@ 0xd0
 80144fa:	497a      	ldr	r1, [pc, #488]	@ (80146e4 <udp_input+0x214>)
 80144fc:	4878      	ldr	r0, [pc, #480]	@ (80146e0 <udp_input+0x210>)
 80144fe:	f003 f9cb 	bl	8017898 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	895b      	ldrh	r3, [r3, #10]
 8014506:	2b07      	cmp	r3, #7
 8014508:	d803      	bhi.n	8014512 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7f9 fa5c 	bl	800d9c8 <pbuf_free>
    goto end;
 8014510:	e0de      	b.n	80146d0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014518:	4b73      	ldr	r3, [pc, #460]	@ (80146e8 <udp_input+0x218>)
 801451a:	695b      	ldr	r3, [r3, #20]
 801451c:	4a72      	ldr	r2, [pc, #456]	@ (80146e8 <udp_input+0x218>)
 801451e:	6812      	ldr	r2, [r2, #0]
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f001 ff80 	bl	8016428 <ip4_addr_isbroadcast_u32>
 8014528:	4603      	mov	r3, r0
 801452a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	881b      	ldrh	r3, [r3, #0]
 8014530:	b29b      	uxth	r3, r3
 8014532:	4618      	mov	r0, r3
 8014534:	f7f7 fe20 	bl	800c178 <lwip_htons>
 8014538:	4603      	mov	r3, r0
 801453a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	885b      	ldrh	r3, [r3, #2]
 8014540:	b29b      	uxth	r3, r3
 8014542:	4618      	mov	r0, r3
 8014544:	f7f7 fe18 	bl	800c178 <lwip_htons>
 8014548:	4603      	mov	r3, r0
 801454a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801454c:	2300      	movs	r3, #0
 801454e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014550:	2300      	movs	r3, #0
 8014552:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014554:	2300      	movs	r3, #0
 8014556:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014558:	4b64      	ldr	r3, [pc, #400]	@ (80146ec <udp_input+0x21c>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	627b      	str	r3, [r7, #36]	@ 0x24
 801455e:	e054      	b.n	801460a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014562:	8a5b      	ldrh	r3, [r3, #18]
 8014564:	89fa      	ldrh	r2, [r7, #14]
 8014566:	429a      	cmp	r2, r3
 8014568:	d14a      	bne.n	8014600 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801456a:	7cfb      	ldrb	r3, [r7, #19]
 801456c:	461a      	mov	r2, r3
 801456e:	6839      	ldr	r1, [r7, #0]
 8014570:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014572:	f7ff ff49 	bl	8014408 <udp_input_local_match>
 8014576:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014578:	2b00      	cmp	r3, #0
 801457a:	d041      	beq.n	8014600 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801457e:	7c1b      	ldrb	r3, [r3, #16]
 8014580:	f003 0304 	and.w	r3, r3, #4
 8014584:	2b00      	cmp	r3, #0
 8014586:	d11d      	bne.n	80145c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d102      	bne.n	8014594 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014590:	61fb      	str	r3, [r7, #28]
 8014592:	e017      	b.n	80145c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014594:	7cfb      	ldrb	r3, [r7, #19]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d014      	beq.n	80145c4 <udp_input+0xf4>
 801459a:	4b53      	ldr	r3, [pc, #332]	@ (80146e8 <udp_input+0x218>)
 801459c:	695b      	ldr	r3, [r3, #20]
 801459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a2:	d10f      	bne.n	80145c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	3304      	adds	r3, #4
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d008      	beq.n	80145c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80145b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	3304      	adds	r3, #4
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d101      	bne.n	80145c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80145c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80145c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c6:	8a9b      	ldrh	r3, [r3, #20]
 80145c8:	8a3a      	ldrh	r2, [r7, #16]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d118      	bne.n	8014600 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80145ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d005      	beq.n	80145e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80145d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145d8:	685a      	ldr	r2, [r3, #4]
 80145da:	4b43      	ldr	r3, [pc, #268]	@ (80146e8 <udp_input+0x218>)
 80145dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80145de:	429a      	cmp	r2, r3
 80145e0:	d10e      	bne.n	8014600 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80145e2:	6a3b      	ldr	r3, [r7, #32]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d014      	beq.n	8014612 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80145e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ea:	68da      	ldr	r2, [r3, #12]
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80145f0:	4b3e      	ldr	r3, [pc, #248]	@ (80146ec <udp_input+0x21c>)
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80145f8:	4a3c      	ldr	r2, [pc, #240]	@ (80146ec <udp_input+0x21c>)
 80145fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80145fe:	e008      	b.n	8014612 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014602:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	627b      	str	r3, [r7, #36]	@ 0x24
 801460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801460c:	2b00      	cmp	r3, #0
 801460e:	d1a7      	bne.n	8014560 <udp_input+0x90>
 8014610:	e000      	b.n	8014614 <udp_input+0x144>
        break;
 8014612:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014616:	2b00      	cmp	r3, #0
 8014618:	d101      	bne.n	801461e <udp_input+0x14e>
    pcb = uncon_pcb;
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <udp_input+0x15a>
    for_us = 1;
 8014624:	2301      	movs	r3, #1
 8014626:	76fb      	strb	r3, [r7, #27]
 8014628:	e00a      	b.n	8014640 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	3304      	adds	r3, #4
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	4b2d      	ldr	r3, [pc, #180]	@ (80146e8 <udp_input+0x218>)
 8014632:	695b      	ldr	r3, [r3, #20]
 8014634:	429a      	cmp	r2, r3
 8014636:	bf0c      	ite	eq
 8014638:	2301      	moveq	r3, #1
 801463a:	2300      	movne	r3, #0
 801463c:	b2db      	uxtb	r3, r3
 801463e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014640:	7efb      	ldrb	r3, [r7, #27]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d041      	beq.n	80146ca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014646:	2108      	movs	r1, #8
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7f9 f937 	bl	800d8bc <pbuf_remove_header>
 801464e:	4603      	mov	r3, r0
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00a      	beq.n	801466a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014654:	4b20      	ldr	r3, [pc, #128]	@ (80146d8 <udp_input+0x208>)
 8014656:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801465a:	4925      	ldr	r1, [pc, #148]	@ (80146f0 <udp_input+0x220>)
 801465c:	4820      	ldr	r0, [pc, #128]	@ (80146e0 <udp_input+0x210>)
 801465e:	f003 f91b 	bl	8017898 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7f9 f9b0 	bl	800d9c8 <pbuf_free>
      goto end;
 8014668:	e032      	b.n	80146d0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801466c:	2b00      	cmp	r3, #0
 801466e:	d012      	beq.n	8014696 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014672:	699b      	ldr	r3, [r3, #24]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d00a      	beq.n	801468e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467a:	699c      	ldr	r4, [r3, #24]
 801467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467e:	69d8      	ldr	r0, [r3, #28]
 8014680:	8a3b      	ldrh	r3, [r7, #16]
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	4b1b      	ldr	r3, [pc, #108]	@ (80146f4 <udp_input+0x224>)
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801468a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801468c:	e021      	b.n	80146d2 <udp_input+0x202>
        pbuf_free(p);
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7f9 f99a 	bl	800d9c8 <pbuf_free>
        goto end;
 8014694:	e01c      	b.n	80146d0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014696:	7cfb      	ldrb	r3, [r7, #19]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d112      	bne.n	80146c2 <udp_input+0x1f2>
 801469c:	4b12      	ldr	r3, [pc, #72]	@ (80146e8 <udp_input+0x218>)
 801469e:	695b      	ldr	r3, [r3, #20]
 80146a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80146a4:	2be0      	cmp	r3, #224	@ 0xe0
 80146a6:	d00c      	beq.n	80146c2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80146a8:	4b0f      	ldr	r3, [pc, #60]	@ (80146e8 <udp_input+0x218>)
 80146aa:	899b      	ldrh	r3, [r3, #12]
 80146ac:	3308      	adds	r3, #8
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	b21b      	sxth	r3, r3
 80146b2:	4619      	mov	r1, r3
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7f9 f974 	bl	800d9a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80146ba:	2103      	movs	r1, #3
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f001 fb93 	bl	8015de8 <icmp_dest_unreach>
      pbuf_free(p);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7f9 f980 	bl	800d9c8 <pbuf_free>
  return;
 80146c8:	e003      	b.n	80146d2 <udp_input+0x202>
    pbuf_free(p);
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f7f9 f97c 	bl	800d9c8 <pbuf_free>
  return;
 80146d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80146d2:	372c      	adds	r7, #44	@ 0x2c
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd90      	pop	{r4, r7, pc}
 80146d8:	0801b9d0 	.word	0x0801b9d0
 80146dc:	0801ba74 	.word	0x0801ba74
 80146e0:	0801ba24 	.word	0x0801ba24
 80146e4:	0801ba8c 	.word	0x0801ba8c
 80146e8:	2000b944 	.word	0x2000b944
 80146ec:	2000f0f4 	.word	0x2000f0f4
 80146f0:	0801baa8 	.word	0x0801baa8
 80146f4:	2000b954 	.word	0x2000b954

080146f8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d109      	bne.n	801471c <udp_send+0x24>
 8014708:	4b11      	ldr	r3, [pc, #68]	@ (8014750 <udp_send+0x58>)
 801470a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801470e:	4911      	ldr	r1, [pc, #68]	@ (8014754 <udp_send+0x5c>)
 8014710:	4811      	ldr	r0, [pc, #68]	@ (8014758 <udp_send+0x60>)
 8014712:	f003 f8c1 	bl	8017898 <iprintf>
 8014716:	f06f 030f 	mvn.w	r3, #15
 801471a:	e015      	b.n	8014748 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d109      	bne.n	8014736 <udp_send+0x3e>
 8014722:	4b0b      	ldr	r3, [pc, #44]	@ (8014750 <udp_send+0x58>)
 8014724:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8014728:	490c      	ldr	r1, [pc, #48]	@ (801475c <udp_send+0x64>)
 801472a:	480b      	ldr	r0, [pc, #44]	@ (8014758 <udp_send+0x60>)
 801472c:	f003 f8b4 	bl	8017898 <iprintf>
 8014730:	f06f 030f 	mvn.w	r3, #15
 8014734:	e008      	b.n	8014748 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	1d1a      	adds	r2, r3, #4
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	8a9b      	ldrh	r3, [r3, #20]
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 f80d 	bl	8014760 <udp_sendto>
 8014746:	4603      	mov	r3, r0
}
 8014748:	4618      	mov	r0, r3
 801474a:	3708      	adds	r7, #8
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}
 8014750:	0801b9d0 	.word	0x0801b9d0
 8014754:	0801bac4 	.word	0x0801bac4
 8014758:	0801ba24 	.word	0x0801ba24
 801475c:	0801badc 	.word	0x0801badc

08014760 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b088      	sub	sp, #32
 8014764:	af02      	add	r7, sp, #8
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
 801476c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d109      	bne.n	8014788 <udp_sendto+0x28>
 8014774:	4b23      	ldr	r3, [pc, #140]	@ (8014804 <udp_sendto+0xa4>)
 8014776:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801477a:	4923      	ldr	r1, [pc, #140]	@ (8014808 <udp_sendto+0xa8>)
 801477c:	4823      	ldr	r0, [pc, #140]	@ (801480c <udp_sendto+0xac>)
 801477e:	f003 f88b 	bl	8017898 <iprintf>
 8014782:	f06f 030f 	mvn.w	r3, #15
 8014786:	e038      	b.n	80147fa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d109      	bne.n	80147a2 <udp_sendto+0x42>
 801478e:	4b1d      	ldr	r3, [pc, #116]	@ (8014804 <udp_sendto+0xa4>)
 8014790:	f240 2219 	movw	r2, #537	@ 0x219
 8014794:	491e      	ldr	r1, [pc, #120]	@ (8014810 <udp_sendto+0xb0>)
 8014796:	481d      	ldr	r0, [pc, #116]	@ (801480c <udp_sendto+0xac>)
 8014798:	f003 f87e 	bl	8017898 <iprintf>
 801479c:	f06f 030f 	mvn.w	r3, #15
 80147a0:	e02b      	b.n	80147fa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d109      	bne.n	80147bc <udp_sendto+0x5c>
 80147a8:	4b16      	ldr	r3, [pc, #88]	@ (8014804 <udp_sendto+0xa4>)
 80147aa:	f240 221a 	movw	r2, #538	@ 0x21a
 80147ae:	4919      	ldr	r1, [pc, #100]	@ (8014814 <udp_sendto+0xb4>)
 80147b0:	4816      	ldr	r0, [pc, #88]	@ (801480c <udp_sendto+0xac>)
 80147b2:	f003 f871 	bl	8017898 <iprintf>
 80147b6:	f06f 030f 	mvn.w	r3, #15
 80147ba:	e01e      	b.n	80147fa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	7a1b      	ldrb	r3, [r3, #8]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d006      	beq.n	80147d2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	7a1b      	ldrb	r3, [r3, #8]
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7f8 fd6f 	bl	800d2ac <netif_get_by_index>
 80147ce:	6178      	str	r0, [r7, #20]
 80147d0:	e003      	b.n	80147da <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f001 fb92 	bl	8015efc <ip4_route>
 80147d8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d102      	bne.n	80147e6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80147e0:	f06f 0303 	mvn.w	r3, #3
 80147e4:	e009      	b.n	80147fa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80147e6:	887a      	ldrh	r2, [r7, #2]
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	4613      	mov	r3, r2
 80147ee:	687a      	ldr	r2, [r7, #4]
 80147f0:	68b9      	ldr	r1, [r7, #8]
 80147f2:	68f8      	ldr	r0, [r7, #12]
 80147f4:	f000 f810 	bl	8014818 <udp_sendto_if>
 80147f8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3718      	adds	r7, #24
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	0801b9d0 	.word	0x0801b9d0
 8014808:	0801baf4 	.word	0x0801baf4
 801480c:	0801ba24 	.word	0x0801ba24
 8014810:	0801bb0c 	.word	0x0801bb0c
 8014814:	0801bb28 	.word	0x0801bb28

08014818 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b088      	sub	sp, #32
 801481c:	af02      	add	r7, sp, #8
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	60b9      	str	r1, [r7, #8]
 8014822:	607a      	str	r2, [r7, #4]
 8014824:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d109      	bne.n	8014840 <udp_sendto_if+0x28>
 801482c:	4b2e      	ldr	r3, [pc, #184]	@ (80148e8 <udp_sendto_if+0xd0>)
 801482e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014832:	492e      	ldr	r1, [pc, #184]	@ (80148ec <udp_sendto_if+0xd4>)
 8014834:	482e      	ldr	r0, [pc, #184]	@ (80148f0 <udp_sendto_if+0xd8>)
 8014836:	f003 f82f 	bl	8017898 <iprintf>
 801483a:	f06f 030f 	mvn.w	r3, #15
 801483e:	e04f      	b.n	80148e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d109      	bne.n	801485a <udp_sendto_if+0x42>
 8014846:	4b28      	ldr	r3, [pc, #160]	@ (80148e8 <udp_sendto_if+0xd0>)
 8014848:	f240 2281 	movw	r2, #641	@ 0x281
 801484c:	4929      	ldr	r1, [pc, #164]	@ (80148f4 <udp_sendto_if+0xdc>)
 801484e:	4828      	ldr	r0, [pc, #160]	@ (80148f0 <udp_sendto_if+0xd8>)
 8014850:	f003 f822 	bl	8017898 <iprintf>
 8014854:	f06f 030f 	mvn.w	r3, #15
 8014858:	e042      	b.n	80148e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d109      	bne.n	8014874 <udp_sendto_if+0x5c>
 8014860:	4b21      	ldr	r3, [pc, #132]	@ (80148e8 <udp_sendto_if+0xd0>)
 8014862:	f240 2282 	movw	r2, #642	@ 0x282
 8014866:	4924      	ldr	r1, [pc, #144]	@ (80148f8 <udp_sendto_if+0xe0>)
 8014868:	4821      	ldr	r0, [pc, #132]	@ (80148f0 <udp_sendto_if+0xd8>)
 801486a:	f003 f815 	bl	8017898 <iprintf>
 801486e:	f06f 030f 	mvn.w	r3, #15
 8014872:	e035      	b.n	80148e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014874:	6a3b      	ldr	r3, [r7, #32]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d109      	bne.n	801488e <udp_sendto_if+0x76>
 801487a:	4b1b      	ldr	r3, [pc, #108]	@ (80148e8 <udp_sendto_if+0xd0>)
 801487c:	f240 2283 	movw	r2, #643	@ 0x283
 8014880:	491e      	ldr	r1, [pc, #120]	@ (80148fc <udp_sendto_if+0xe4>)
 8014882:	481b      	ldr	r0, [pc, #108]	@ (80148f0 <udp_sendto_if+0xd8>)
 8014884:	f003 f808 	bl	8017898 <iprintf>
 8014888:	f06f 030f 	mvn.w	r3, #15
 801488c:	e028      	b.n	80148e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d009      	beq.n	80148a8 <udp_sendto_if+0x90>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d005      	beq.n	80148a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80148a4:	2be0      	cmp	r3, #224	@ 0xe0
 80148a6:	d103      	bne.n	80148b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80148a8:	6a3b      	ldr	r3, [r7, #32]
 80148aa:	3304      	adds	r3, #4
 80148ac:	617b      	str	r3, [r7, #20]
 80148ae:	e00b      	b.n	80148c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	3304      	adds	r3, #4
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	d002      	beq.n	80148c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80148be:	f06f 0303 	mvn.w	r3, #3
 80148c2:	e00d      	b.n	80148e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80148c8:	887a      	ldrh	r2, [r7, #2]
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	9301      	str	r3, [sp, #4]
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	4613      	mov	r3, r2
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	68b9      	ldr	r1, [r7, #8]
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f000 f811 	bl	8014900 <udp_sendto_if_src>
 80148de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3718      	adds	r7, #24
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	0801b9d0 	.word	0x0801b9d0
 80148ec:	0801bb44 	.word	0x0801bb44
 80148f0:	0801ba24 	.word	0x0801ba24
 80148f4:	0801bb60 	.word	0x0801bb60
 80148f8:	0801bb7c 	.word	0x0801bb7c
 80148fc:	0801bb9c 	.word	0x0801bb9c

08014900 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b08c      	sub	sp, #48	@ 0x30
 8014904:	af04      	add	r7, sp, #16
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	607a      	str	r2, [r7, #4]
 801490c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d109      	bne.n	8014928 <udp_sendto_if_src+0x28>
 8014914:	4b65      	ldr	r3, [pc, #404]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 8014916:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801491a:	4965      	ldr	r1, [pc, #404]	@ (8014ab0 <udp_sendto_if_src+0x1b0>)
 801491c:	4865      	ldr	r0, [pc, #404]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 801491e:	f002 ffbb 	bl	8017898 <iprintf>
 8014922:	f06f 030f 	mvn.w	r3, #15
 8014926:	e0bc      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d109      	bne.n	8014942 <udp_sendto_if_src+0x42>
 801492e:	4b5f      	ldr	r3, [pc, #380]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 8014930:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8014934:	4960      	ldr	r1, [pc, #384]	@ (8014ab8 <udp_sendto_if_src+0x1b8>)
 8014936:	485f      	ldr	r0, [pc, #380]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 8014938:	f002 ffae 	bl	8017898 <iprintf>
 801493c:	f06f 030f 	mvn.w	r3, #15
 8014940:	e0af      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d109      	bne.n	801495c <udp_sendto_if_src+0x5c>
 8014948:	4b58      	ldr	r3, [pc, #352]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 801494a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801494e:	495b      	ldr	r1, [pc, #364]	@ (8014abc <udp_sendto_if_src+0x1bc>)
 8014950:	4858      	ldr	r0, [pc, #352]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 8014952:	f002 ffa1 	bl	8017898 <iprintf>
 8014956:	f06f 030f 	mvn.w	r3, #15
 801495a:	e0a2      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801495e:	2b00      	cmp	r3, #0
 8014960:	d109      	bne.n	8014976 <udp_sendto_if_src+0x76>
 8014962:	4b52      	ldr	r3, [pc, #328]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 8014964:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8014968:	4955      	ldr	r1, [pc, #340]	@ (8014ac0 <udp_sendto_if_src+0x1c0>)
 801496a:	4852      	ldr	r0, [pc, #328]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 801496c:	f002 ff94 	bl	8017898 <iprintf>
 8014970:	f06f 030f 	mvn.w	r3, #15
 8014974:	e095      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014978:	2b00      	cmp	r3, #0
 801497a:	d109      	bne.n	8014990 <udp_sendto_if_src+0x90>
 801497c:	4b4b      	ldr	r3, [pc, #300]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 801497e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8014982:	4950      	ldr	r1, [pc, #320]	@ (8014ac4 <udp_sendto_if_src+0x1c4>)
 8014984:	484b      	ldr	r0, [pc, #300]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 8014986:	f002 ff87 	bl	8017898 <iprintf>
 801498a:	f06f 030f 	mvn.w	r3, #15
 801498e:	e088      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	8a5b      	ldrh	r3, [r3, #18]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d10f      	bne.n	80149b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014998:	68f9      	ldr	r1, [r7, #12]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	8a5b      	ldrh	r3, [r3, #18]
 801499e:	461a      	mov	r2, r3
 80149a0:	68f8      	ldr	r0, [r7, #12]
 80149a2:	f000 f893 	bl	8014acc <udp_bind>
 80149a6:	4603      	mov	r3, r0
 80149a8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80149aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d002      	beq.n	80149b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80149b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149b6:	e074      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	891b      	ldrh	r3, [r3, #8]
 80149bc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80149c0:	4293      	cmp	r3, r2
 80149c2:	d902      	bls.n	80149ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80149c4:	f04f 33ff 	mov.w	r3, #4294967295
 80149c8:	e06b      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80149ca:	2108      	movs	r1, #8
 80149cc:	68b8      	ldr	r0, [r7, #8]
 80149ce:	f7f8 ff65 	bl	800d89c <pbuf_add_header>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d015      	beq.n	8014a04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80149d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80149dc:	2108      	movs	r1, #8
 80149de:	2022      	movs	r0, #34	@ 0x22
 80149e0:	f7f8 fd0e 	bl	800d400 <pbuf_alloc>
 80149e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80149e6:	69fb      	ldr	r3, [r7, #28]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d102      	bne.n	80149f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80149ec:	f04f 33ff 	mov.w	r3, #4294967295
 80149f0:	e057      	b.n	8014aa2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	891b      	ldrh	r3, [r3, #8]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d006      	beq.n	8014a08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80149fa:	68b9      	ldr	r1, [r7, #8]
 80149fc:	69f8      	ldr	r0, [r7, #28]
 80149fe:	f7f9 f907 	bl	800dc10 <pbuf_chain>
 8014a02:	e001      	b.n	8014a08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	895b      	ldrh	r3, [r3, #10]
 8014a0c:	2b07      	cmp	r3, #7
 8014a0e:	d806      	bhi.n	8014a1e <udp_sendto_if_src+0x11e>
 8014a10:	4b26      	ldr	r3, [pc, #152]	@ (8014aac <udp_sendto_if_src+0x1ac>)
 8014a12:	f240 320d 	movw	r2, #781	@ 0x30d
 8014a16:	492c      	ldr	r1, [pc, #176]	@ (8014ac8 <udp_sendto_if_src+0x1c8>)
 8014a18:	4826      	ldr	r0, [pc, #152]	@ (8014ab4 <udp_sendto_if_src+0x1b4>)
 8014a1a:	f002 ff3d 	bl	8017898 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014a1e:	69fb      	ldr	r3, [r7, #28]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	8a5b      	ldrh	r3, [r3, #18]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7f7 fba5 	bl	800c178 <lwip_htons>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	461a      	mov	r2, r3
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014a36:	887b      	ldrh	r3, [r7, #2]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7f7 fb9d 	bl	800c178 <lwip_htons>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	461a      	mov	r2, r3
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	719a      	strb	r2, [r3, #6]
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	891b      	ldrh	r3, [r3, #8]
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7f7 fb8f 	bl	800c178 <lwip_htons>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014a62:	2311      	movs	r3, #17
 8014a64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	7adb      	ldrb	r3, [r3, #11]
 8014a6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	7a9b      	ldrb	r3, [r3, #10]
 8014a70:	7cb9      	ldrb	r1, [r7, #18]
 8014a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014a74:	9202      	str	r2, [sp, #8]
 8014a76:	7cfa      	ldrb	r2, [r7, #19]
 8014a78:	9201      	str	r2, [sp, #4]
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a82:	69f8      	ldr	r0, [r7, #28]
 8014a84:	f001 fc22 	bl	80162cc <ip4_output_if_src>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014a8c:	69fa      	ldr	r2, [r7, #28]
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d004      	beq.n	8014a9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014a94:	69f8      	ldr	r0, [r7, #28]
 8014a96:	f7f8 ff97 	bl	800d9c8 <pbuf_free>
    q = NULL;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014a9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3720      	adds	r7, #32
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	0801b9d0 	.word	0x0801b9d0
 8014ab0:	0801bbbc 	.word	0x0801bbbc
 8014ab4:	0801ba24 	.word	0x0801ba24
 8014ab8:	0801bbdc 	.word	0x0801bbdc
 8014abc:	0801bbfc 	.word	0x0801bbfc
 8014ac0:	0801bc20 	.word	0x0801bc20
 8014ac4:	0801bc44 	.word	0x0801bc44
 8014ac8:	0801bc68 	.word	0x0801bc68

08014acc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d101      	bne.n	8014ae4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014ae0:	4b39      	ldr	r3, [pc, #228]	@ (8014bc8 <udp_bind+0xfc>)
 8014ae2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d109      	bne.n	8014afe <udp_bind+0x32>
 8014aea:	4b38      	ldr	r3, [pc, #224]	@ (8014bcc <udp_bind+0x100>)
 8014aec:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014af0:	4937      	ldr	r1, [pc, #220]	@ (8014bd0 <udp_bind+0x104>)
 8014af2:	4838      	ldr	r0, [pc, #224]	@ (8014bd4 <udp_bind+0x108>)
 8014af4:	f002 fed0 	bl	8017898 <iprintf>
 8014af8:	f06f 030f 	mvn.w	r3, #15
 8014afc:	e060      	b.n	8014bc0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014afe:	2300      	movs	r3, #0
 8014b00:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b02:	4b35      	ldr	r3, [pc, #212]	@ (8014bd8 <udp_bind+0x10c>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	617b      	str	r3, [r7, #20]
 8014b08:	e009      	b.n	8014b1e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014b0a:	68fa      	ldr	r2, [r7, #12]
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d102      	bne.n	8014b18 <udp_bind+0x4c>
      rebind = 1;
 8014b12:	2301      	movs	r3, #1
 8014b14:	74fb      	strb	r3, [r7, #19]
      break;
 8014b16:	e005      	b.n	8014b24 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	617b      	str	r3, [r7, #20]
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d1f2      	bne.n	8014b0a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014b24:	88fb      	ldrh	r3, [r7, #6]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d109      	bne.n	8014b3e <udp_bind+0x72>
    port = udp_new_port();
 8014b2a:	f7ff fc35 	bl	8014398 <udp_new_port>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014b32:	88fb      	ldrh	r3, [r7, #6]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d12c      	bne.n	8014b92 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014b38:	f06f 0307 	mvn.w	r3, #7
 8014b3c:	e040      	b.n	8014bc0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b3e:	4b26      	ldr	r3, [pc, #152]	@ (8014bd8 <udp_bind+0x10c>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	617b      	str	r3, [r7, #20]
 8014b44:	e022      	b.n	8014b8c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d01b      	beq.n	8014b86 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	8a5b      	ldrh	r3, [r3, #18]
 8014b52:	88fa      	ldrh	r2, [r7, #6]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d116      	bne.n	8014b86 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d00d      	beq.n	8014b80 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d00a      	beq.n	8014b80 <udp_bind+0xb4>
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d006      	beq.n	8014b80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b72:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d003      	beq.n	8014b80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d102      	bne.n	8014b86 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014b80:	f06f 0307 	mvn.w	r3, #7
 8014b84:	e01c      	b.n	8014bc0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	68db      	ldr	r3, [r3, #12]
 8014b8a:	617b      	str	r3, [r7, #20]
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d1d9      	bne.n	8014b46 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <udp_bind+0xd2>
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	e000      	b.n	8014ba0 <udp_bind+0xd4>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	68fa      	ldr	r2, [r7, #12]
 8014ba2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	88fa      	ldrh	r2, [r7, #6]
 8014ba8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014baa:	7cfb      	ldrb	r3, [r7, #19]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d106      	bne.n	8014bbe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014bb0:	4b09      	ldr	r3, [pc, #36]	@ (8014bd8 <udp_bind+0x10c>)
 8014bb2:	681a      	ldr	r2, [r3, #0]
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014bb8:	4a07      	ldr	r2, [pc, #28]	@ (8014bd8 <udp_bind+0x10c>)
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014bbe:	2300      	movs	r3, #0
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3718      	adds	r7, #24
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}
 8014bc8:	0801d1f0 	.word	0x0801d1f0
 8014bcc:	0801b9d0 	.word	0x0801b9d0
 8014bd0:	0801bc98 	.word	0x0801bc98
 8014bd4:	0801ba24 	.word	0x0801ba24
 8014bd8:	2000f0f4 	.word	0x2000f0f4

08014bdc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d107      	bne.n	8014bfe <udp_recv+0x22>
 8014bee:	4b08      	ldr	r3, [pc, #32]	@ (8014c10 <udp_recv+0x34>)
 8014bf0:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014bf4:	4907      	ldr	r1, [pc, #28]	@ (8014c14 <udp_recv+0x38>)
 8014bf6:	4808      	ldr	r0, [pc, #32]	@ (8014c18 <udp_recv+0x3c>)
 8014bf8:	f002 fe4e 	bl	8017898 <iprintf>
 8014bfc:	e005      	b.n	8014c0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	68ba      	ldr	r2, [r7, #8]
 8014c02:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	687a      	ldr	r2, [r7, #4]
 8014c08:	61da      	str	r2, [r3, #28]
}
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	0801b9d0 	.word	0x0801b9d0
 8014c14:	0801bd04 	.word	0x0801bd04
 8014c18:	0801ba24 	.word	0x0801ba24

08014c1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d107      	bne.n	8014c3a <udp_remove+0x1e>
 8014c2a:	4b19      	ldr	r3, [pc, #100]	@ (8014c90 <udp_remove+0x74>)
 8014c2c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014c30:	4918      	ldr	r1, [pc, #96]	@ (8014c94 <udp_remove+0x78>)
 8014c32:	4819      	ldr	r0, [pc, #100]	@ (8014c98 <udp_remove+0x7c>)
 8014c34:	f002 fe30 	bl	8017898 <iprintf>
 8014c38:	e026      	b.n	8014c88 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014c3a:	4b18      	ldr	r3, [pc, #96]	@ (8014c9c <udp_remove+0x80>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d105      	bne.n	8014c50 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014c44:	4b15      	ldr	r3, [pc, #84]	@ (8014c9c <udp_remove+0x80>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	4a14      	ldr	r2, [pc, #80]	@ (8014c9c <udp_remove+0x80>)
 8014c4c:	6013      	str	r3, [r2, #0]
 8014c4e:	e017      	b.n	8014c80 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c50:	4b12      	ldr	r3, [pc, #72]	@ (8014c9c <udp_remove+0x80>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	60fb      	str	r3, [r7, #12]
 8014c56:	e010      	b.n	8014c7a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d009      	beq.n	8014c74 <udp_remove+0x58>
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d104      	bne.n	8014c74 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	68da      	ldr	r2, [r3, #12]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	60da      	str	r2, [r3, #12]
        break;
 8014c72:	e005      	b.n	8014c80 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	68db      	ldr	r3, [r3, #12]
 8014c78:	60fb      	str	r3, [r7, #12]
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d1eb      	bne.n	8014c58 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014c80:	6879      	ldr	r1, [r7, #4]
 8014c82:	2000      	movs	r0, #0
 8014c84:	f7f7 fffc 	bl	800cc80 <memp_free>
}
 8014c88:	3710      	adds	r7, #16
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	0801b9d0 	.word	0x0801b9d0
 8014c94:	0801bd1c 	.word	0x0801bd1c
 8014c98:	0801ba24 	.word	0x0801ba24
 8014c9c:	2000f0f4 	.word	0x2000f0f4

08014ca0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014ca6:	2000      	movs	r0, #0
 8014ca8:	f7f7 ff74 	bl	800cb94 <memp_malloc>
 8014cac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d007      	beq.n	8014cc4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014cb4:	2220      	movs	r2, #32
 8014cb6:	2100      	movs	r1, #0
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f002 fe8c 	bl	80179d6 <memset>
    pcb->ttl = UDP_TTL;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	22ff      	movs	r2, #255	@ 0xff
 8014cc2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014cc4:	687b      	ldr	r3, [r7, #4]
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3708      	adds	r7, #8
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}

08014cce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014cce:	b580      	push	{r7, lr}
 8014cd0:	b084      	sub	sp, #16
 8014cd2:	af00      	add	r7, sp, #0
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014cd8:	f7ff ffe2 	bl	8014ca0 <udp_new>
 8014cdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014cde:	68fb      	ldr	r3, [r7, #12]
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3710      	adds	r7, #16
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ce8:	b480      	push	{r7}
 8014cea:	b085      	sub	sp, #20
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d01e      	beq.n	8014d36 <udp_netif_ip_addr_changed+0x4e>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01a      	beq.n	8014d36 <udp_netif_ip_addr_changed+0x4e>
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d017      	beq.n	8014d36 <udp_netif_ip_addr_changed+0x4e>
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d013      	beq.n	8014d36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8014d44 <udp_netif_ip_addr_changed+0x5c>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	60fb      	str	r3, [r7, #12]
 8014d14:	e00c      	b.n	8014d30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681a      	ldr	r2, [r3, #0]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d103      	bne.n	8014d2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	681a      	ldr	r2, [r3, #0]
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	68db      	ldr	r3, [r3, #12]
 8014d2e:	60fb      	str	r3, [r7, #12]
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d1ef      	bne.n	8014d16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d36:	bf00      	nop
 8014d38:	3714      	adds	r7, #20
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop
 8014d44:	2000f0f4 	.word	0x2000f0f4

08014d48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014d50:	4915      	ldr	r1, [pc, #84]	@ (8014da8 <etharp_free_entry+0x60>)
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	4613      	mov	r3, r2
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	00db      	lsls	r3, r3, #3
 8014d5c:	440b      	add	r3, r1
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d013      	beq.n	8014d8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014d64:	4910      	ldr	r1, [pc, #64]	@ (8014da8 <etharp_free_entry+0x60>)
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	4613      	mov	r3, r2
 8014d6a:	005b      	lsls	r3, r3, #1
 8014d6c:	4413      	add	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	440b      	add	r3, r1
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7f8 fe27 	bl	800d9c8 <pbuf_free>
    arp_table[i].q = NULL;
 8014d7a:	490b      	ldr	r1, [pc, #44]	@ (8014da8 <etharp_free_entry+0x60>)
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	440b      	add	r3, r1
 8014d88:	2200      	movs	r2, #0
 8014d8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014d8c:	4906      	ldr	r1, [pc, #24]	@ (8014da8 <etharp_free_entry+0x60>)
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	4613      	mov	r3, r2
 8014d92:	005b      	lsls	r3, r3, #1
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	440b      	add	r3, r1
 8014d9a:	3314      	adds	r3, #20
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014da0:	bf00      	nop
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	2000f0f8 	.word	0x2000f0f8

08014dac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014db2:	2300      	movs	r3, #0
 8014db4:	607b      	str	r3, [r7, #4]
 8014db6:	e096      	b.n	8014ee6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014db8:	494f      	ldr	r1, [pc, #316]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	005b      	lsls	r3, r3, #1
 8014dc0:	4413      	add	r3, r2
 8014dc2:	00db      	lsls	r3, r3, #3
 8014dc4:	440b      	add	r3, r1
 8014dc6:	3314      	adds	r3, #20
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014dcc:	78fb      	ldrb	r3, [r7, #3]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 8086 	beq.w	8014ee0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014dd4:	4948      	ldr	r1, [pc, #288]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	4613      	mov	r3, r2
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	4413      	add	r3, r2
 8014dde:	00db      	lsls	r3, r3, #3
 8014de0:	440b      	add	r3, r1
 8014de2:	3312      	adds	r3, #18
 8014de4:	881b      	ldrh	r3, [r3, #0]
 8014de6:	3301      	adds	r3, #1
 8014de8:	b298      	uxth	r0, r3
 8014dea:	4943      	ldr	r1, [pc, #268]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	4613      	mov	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	4413      	add	r3, r2
 8014df4:	00db      	lsls	r3, r3, #3
 8014df6:	440b      	add	r3, r1
 8014df8:	3312      	adds	r3, #18
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014dfe:	493e      	ldr	r1, [pc, #248]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	4613      	mov	r3, r2
 8014e04:	005b      	lsls	r3, r3, #1
 8014e06:	4413      	add	r3, r2
 8014e08:	00db      	lsls	r3, r3, #3
 8014e0a:	440b      	add	r3, r1
 8014e0c:	3312      	adds	r3, #18
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014e14:	d215      	bcs.n	8014e42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e16:	4938      	ldr	r1, [pc, #224]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e18:	687a      	ldr	r2, [r7, #4]
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	4413      	add	r3, r2
 8014e20:	00db      	lsls	r3, r3, #3
 8014e22:	440b      	add	r3, r1
 8014e24:	3314      	adds	r3, #20
 8014e26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d10e      	bne.n	8014e4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014e2c:	4932      	ldr	r1, [pc, #200]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	4613      	mov	r3, r2
 8014e32:	005b      	lsls	r3, r3, #1
 8014e34:	4413      	add	r3, r2
 8014e36:	00db      	lsls	r3, r3, #3
 8014e38:	440b      	add	r3, r1
 8014e3a:	3312      	adds	r3, #18
 8014e3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014e3e:	2b04      	cmp	r3, #4
 8014e40:	d903      	bls.n	8014e4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f7ff ff80 	bl	8014d48 <etharp_free_entry>
 8014e48:	e04a      	b.n	8014ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014e4a:	492b      	ldr	r1, [pc, #172]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	4613      	mov	r3, r2
 8014e50:	005b      	lsls	r3, r3, #1
 8014e52:	4413      	add	r3, r2
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	440b      	add	r3, r1
 8014e58:	3314      	adds	r3, #20
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	2b03      	cmp	r3, #3
 8014e5e:	d10a      	bne.n	8014e76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014e60:	4925      	ldr	r1, [pc, #148]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	4613      	mov	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4413      	add	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	440b      	add	r3, r1
 8014e6e:	3314      	adds	r3, #20
 8014e70:	2204      	movs	r2, #4
 8014e72:	701a      	strb	r2, [r3, #0]
 8014e74:	e034      	b.n	8014ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e76:	4920      	ldr	r1, [pc, #128]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	005b      	lsls	r3, r3, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	00db      	lsls	r3, r3, #3
 8014e82:	440b      	add	r3, r1
 8014e84:	3314      	adds	r3, #20
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	2b04      	cmp	r3, #4
 8014e8a:	d10a      	bne.n	8014ea2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014e8c:	491a      	ldr	r1, [pc, #104]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	4613      	mov	r3, r2
 8014e92:	005b      	lsls	r3, r3, #1
 8014e94:	4413      	add	r3, r2
 8014e96:	00db      	lsls	r3, r3, #3
 8014e98:	440b      	add	r3, r1
 8014e9a:	3314      	adds	r3, #20
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	701a      	strb	r2, [r3, #0]
 8014ea0:	e01e      	b.n	8014ee0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014ea2:	4915      	ldr	r1, [pc, #84]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	4613      	mov	r3, r2
 8014ea8:	005b      	lsls	r3, r3, #1
 8014eaa:	4413      	add	r3, r2
 8014eac:	00db      	lsls	r3, r3, #3
 8014eae:	440b      	add	r3, r1
 8014eb0:	3314      	adds	r3, #20
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d113      	bne.n	8014ee0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014eb8:	490f      	ldr	r1, [pc, #60]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	4413      	add	r3, r2
 8014ec2:	00db      	lsls	r3, r3, #3
 8014ec4:	440b      	add	r3, r1
 8014ec6:	3308      	adds	r3, #8
 8014ec8:	6818      	ldr	r0, [r3, #0]
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	4613      	mov	r3, r2
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	4a08      	ldr	r2, [pc, #32]	@ (8014ef8 <etharp_tmr+0x14c>)
 8014ed6:	4413      	add	r3, r2
 8014ed8:	3304      	adds	r3, #4
 8014eda:	4619      	mov	r1, r3
 8014edc:	f000 fe6e 	bl	8015bbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	607b      	str	r3, [r7, #4]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2b09      	cmp	r3, #9
 8014eea:	f77f af65 	ble.w	8014db8 <etharp_tmr+0xc>
      }
    }
  }
}
 8014eee:	bf00      	nop
 8014ef0:	bf00      	nop
 8014ef2:	3708      	adds	r7, #8
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd80      	pop	{r7, pc}
 8014ef8:	2000f0f8 	.word	0x2000f0f8

08014efc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b08a      	sub	sp, #40	@ 0x28
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	460b      	mov	r3, r1
 8014f06:	607a      	str	r2, [r7, #4]
 8014f08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014f0a:	230a      	movs	r3, #10
 8014f0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014f0e:	230a      	movs	r3, #10
 8014f10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014f12:	230a      	movs	r3, #10
 8014f14:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014f16:	2300      	movs	r3, #0
 8014f18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014f1a:	230a      	movs	r3, #10
 8014f1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	83bb      	strh	r3, [r7, #28]
 8014f22:	2300      	movs	r3, #0
 8014f24:	837b      	strh	r3, [r7, #26]
 8014f26:	2300      	movs	r3, #0
 8014f28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	843b      	strh	r3, [r7, #32]
 8014f2e:	e0ae      	b.n	801508e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014f30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f34:	49a6      	ldr	r1, [pc, #664]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8014f36:	4613      	mov	r3, r2
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4413      	add	r3, r2
 8014f3c:	00db      	lsls	r3, r3, #3
 8014f3e:	440b      	add	r3, r1
 8014f40:	3314      	adds	r3, #20
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014f46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014f4a:	2b0a      	cmp	r3, #10
 8014f4c:	d105      	bne.n	8014f5a <etharp_find_entry+0x5e>
 8014f4e:	7dfb      	ldrb	r3, [r7, #23]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d102      	bne.n	8014f5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014f54:	8c3b      	ldrh	r3, [r7, #32]
 8014f56:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014f58:	e095      	b.n	8015086 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014f5a:	7dfb      	ldrb	r3, [r7, #23]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f000 8092 	beq.w	8015086 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014f62:	7dfb      	ldrb	r3, [r7, #23]
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d009      	beq.n	8014f7c <etharp_find_entry+0x80>
 8014f68:	7dfb      	ldrb	r3, [r7, #23]
 8014f6a:	2b01      	cmp	r3, #1
 8014f6c:	d806      	bhi.n	8014f7c <etharp_find_entry+0x80>
 8014f6e:	4b99      	ldr	r3, [pc, #612]	@ (80151d4 <etharp_find_entry+0x2d8>)
 8014f70:	f240 1223 	movw	r2, #291	@ 0x123
 8014f74:	4998      	ldr	r1, [pc, #608]	@ (80151d8 <etharp_find_entry+0x2dc>)
 8014f76:	4899      	ldr	r0, [pc, #612]	@ (80151dc <etharp_find_entry+0x2e0>)
 8014f78:	f002 fc8e 	bl	8017898 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d020      	beq.n	8014fc4 <etharp_find_entry+0xc8>
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	6819      	ldr	r1, [r3, #0]
 8014f86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f8a:	4891      	ldr	r0, [pc, #580]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8014f8c:	4613      	mov	r3, r2
 8014f8e:	005b      	lsls	r3, r3, #1
 8014f90:	4413      	add	r3, r2
 8014f92:	00db      	lsls	r3, r3, #3
 8014f94:	4403      	add	r3, r0
 8014f96:	3304      	adds	r3, #4
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	4299      	cmp	r1, r3
 8014f9c:	d112      	bne.n	8014fc4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00c      	beq.n	8014fbe <etharp_find_entry+0xc2>
 8014fa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fa8:	4989      	ldr	r1, [pc, #548]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8014faa:	4613      	mov	r3, r2
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	440b      	add	r3, r1
 8014fb4:	3308      	adds	r3, #8
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	687a      	ldr	r2, [r7, #4]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d102      	bne.n	8014fc4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014fbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014fc2:	e100      	b.n	80151c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014fc4:	7dfb      	ldrb	r3, [r7, #23]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d140      	bne.n	801504c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014fca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fce:	4980      	ldr	r1, [pc, #512]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	005b      	lsls	r3, r3, #1
 8014fd4:	4413      	add	r3, r2
 8014fd6:	00db      	lsls	r3, r3, #3
 8014fd8:	440b      	add	r3, r1
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d01a      	beq.n	8015016 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014fe0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fe4:	497a      	ldr	r1, [pc, #488]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	005b      	lsls	r3, r3, #1
 8014fea:	4413      	add	r3, r2
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	440b      	add	r3, r1
 8014ff0:	3312      	adds	r3, #18
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	8bba      	ldrh	r2, [r7, #28]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d845      	bhi.n	8015086 <etharp_find_entry+0x18a>
            old_queue = i;
 8014ffa:	8c3b      	ldrh	r3, [r7, #32]
 8014ffc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014ffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015002:	4973      	ldr	r1, [pc, #460]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8015004:	4613      	mov	r3, r2
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	4413      	add	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	440b      	add	r3, r1
 801500e:	3312      	adds	r3, #18
 8015010:	881b      	ldrh	r3, [r3, #0]
 8015012:	83bb      	strh	r3, [r7, #28]
 8015014:	e037      	b.n	8015086 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015016:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801501a:	496d      	ldr	r1, [pc, #436]	@ (80151d0 <etharp_find_entry+0x2d4>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	3312      	adds	r3, #18
 8015028:	881b      	ldrh	r3, [r3, #0]
 801502a:	8b7a      	ldrh	r2, [r7, #26]
 801502c:	429a      	cmp	r2, r3
 801502e:	d82a      	bhi.n	8015086 <etharp_find_entry+0x18a>
            old_pending = i;
 8015030:	8c3b      	ldrh	r3, [r7, #32]
 8015032:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8015034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015038:	4965      	ldr	r1, [pc, #404]	@ (80151d0 <etharp_find_entry+0x2d4>)
 801503a:	4613      	mov	r3, r2
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	4413      	add	r3, r2
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	440b      	add	r3, r1
 8015044:	3312      	adds	r3, #18
 8015046:	881b      	ldrh	r3, [r3, #0]
 8015048:	837b      	strh	r3, [r7, #26]
 801504a:	e01c      	b.n	8015086 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801504c:	7dfb      	ldrb	r3, [r7, #23]
 801504e:	2b01      	cmp	r3, #1
 8015050:	d919      	bls.n	8015086 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015056:	495e      	ldr	r1, [pc, #376]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8015058:	4613      	mov	r3, r2
 801505a:	005b      	lsls	r3, r3, #1
 801505c:	4413      	add	r3, r2
 801505e:	00db      	lsls	r3, r3, #3
 8015060:	440b      	add	r3, r1
 8015062:	3312      	adds	r3, #18
 8015064:	881b      	ldrh	r3, [r3, #0]
 8015066:	8b3a      	ldrh	r2, [r7, #24]
 8015068:	429a      	cmp	r2, r3
 801506a:	d80c      	bhi.n	8015086 <etharp_find_entry+0x18a>
            old_stable = i;
 801506c:	8c3b      	ldrh	r3, [r7, #32]
 801506e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015074:	4956      	ldr	r1, [pc, #344]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	440b      	add	r3, r1
 8015080:	3312      	adds	r3, #18
 8015082:	881b      	ldrh	r3, [r3, #0]
 8015084:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015086:	8c3b      	ldrh	r3, [r7, #32]
 8015088:	3301      	adds	r3, #1
 801508a:	b29b      	uxth	r3, r3
 801508c:	843b      	strh	r3, [r7, #32]
 801508e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015092:	2b09      	cmp	r3, #9
 8015094:	f77f af4c 	ble.w	8014f30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015098:	7afb      	ldrb	r3, [r7, #11]
 801509a:	f003 0302 	and.w	r3, r3, #2
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d108      	bne.n	80150b4 <etharp_find_entry+0x1b8>
 80150a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80150a6:	2b0a      	cmp	r3, #10
 80150a8:	d107      	bne.n	80150ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80150aa:	7afb      	ldrb	r3, [r7, #11]
 80150ac:	f003 0301 	and.w	r3, r3, #1
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d102      	bne.n	80150ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80150b4:	f04f 33ff 	mov.w	r3, #4294967295
 80150b8:	e085      	b.n	80151c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80150ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80150be:	2b09      	cmp	r3, #9
 80150c0:	dc02      	bgt.n	80150c8 <etharp_find_entry+0x1cc>
    i = empty;
 80150c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150c4:	843b      	strh	r3, [r7, #32]
 80150c6:	e039      	b.n	801513c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80150c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80150cc:	2b09      	cmp	r3, #9
 80150ce:	dc14      	bgt.n	80150fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80150d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80150d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80150d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150d8:	493d      	ldr	r1, [pc, #244]	@ (80151d0 <etharp_find_entry+0x2d4>)
 80150da:	4613      	mov	r3, r2
 80150dc:	005b      	lsls	r3, r3, #1
 80150de:	4413      	add	r3, r2
 80150e0:	00db      	lsls	r3, r3, #3
 80150e2:	440b      	add	r3, r1
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d018      	beq.n	801511c <etharp_find_entry+0x220>
 80150ea:	4b3a      	ldr	r3, [pc, #232]	@ (80151d4 <etharp_find_entry+0x2d8>)
 80150ec:	f240 126d 	movw	r2, #365	@ 0x16d
 80150f0:	493b      	ldr	r1, [pc, #236]	@ (80151e0 <etharp_find_entry+0x2e4>)
 80150f2:	483a      	ldr	r0, [pc, #232]	@ (80151dc <etharp_find_entry+0x2e0>)
 80150f4:	f002 fbd0 	bl	8017898 <iprintf>
 80150f8:	e010      	b.n	801511c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80150fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80150fe:	2b09      	cmp	r3, #9
 8015100:	dc02      	bgt.n	8015108 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015104:	843b      	strh	r3, [r7, #32]
 8015106:	e009      	b.n	801511c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015108:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801510c:	2b09      	cmp	r3, #9
 801510e:	dc02      	bgt.n	8015116 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015110:	8bfb      	ldrh	r3, [r7, #30]
 8015112:	843b      	strh	r3, [r7, #32]
 8015114:	e002      	b.n	801511c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015116:	f04f 33ff 	mov.w	r3, #4294967295
 801511a:	e054      	b.n	80151c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801511c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015120:	2b09      	cmp	r3, #9
 8015122:	dd06      	ble.n	8015132 <etharp_find_entry+0x236>
 8015124:	4b2b      	ldr	r3, [pc, #172]	@ (80151d4 <etharp_find_entry+0x2d8>)
 8015126:	f240 127f 	movw	r2, #383	@ 0x17f
 801512a:	492e      	ldr	r1, [pc, #184]	@ (80151e4 <etharp_find_entry+0x2e8>)
 801512c:	482b      	ldr	r0, [pc, #172]	@ (80151dc <etharp_find_entry+0x2e0>)
 801512e:	f002 fbb3 	bl	8017898 <iprintf>
    etharp_free_entry(i);
 8015132:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff fe06 	bl	8014d48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801513c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015140:	2b09      	cmp	r3, #9
 8015142:	dd06      	ble.n	8015152 <etharp_find_entry+0x256>
 8015144:	4b23      	ldr	r3, [pc, #140]	@ (80151d4 <etharp_find_entry+0x2d8>)
 8015146:	f240 1283 	movw	r2, #387	@ 0x183
 801514a:	4926      	ldr	r1, [pc, #152]	@ (80151e4 <etharp_find_entry+0x2e8>)
 801514c:	4823      	ldr	r0, [pc, #140]	@ (80151dc <etharp_find_entry+0x2e0>)
 801514e:	f002 fba3 	bl	8017898 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015156:	491e      	ldr	r1, [pc, #120]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8015158:	4613      	mov	r3, r2
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	3314      	adds	r3, #20
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d006      	beq.n	8015178 <etharp_find_entry+0x27c>
 801516a:	4b1a      	ldr	r3, [pc, #104]	@ (80151d4 <etharp_find_entry+0x2d8>)
 801516c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015170:	491d      	ldr	r1, [pc, #116]	@ (80151e8 <etharp_find_entry+0x2ec>)
 8015172:	481a      	ldr	r0, [pc, #104]	@ (80151dc <etharp_find_entry+0x2e0>)
 8015174:	f002 fb90 	bl	8017898 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00b      	beq.n	8015196 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801517e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	6819      	ldr	r1, [r3, #0]
 8015186:	4812      	ldr	r0, [pc, #72]	@ (80151d0 <etharp_find_entry+0x2d4>)
 8015188:	4613      	mov	r3, r2
 801518a:	005b      	lsls	r3, r3, #1
 801518c:	4413      	add	r3, r2
 801518e:	00db      	lsls	r3, r3, #3
 8015190:	4403      	add	r3, r0
 8015192:	3304      	adds	r3, #4
 8015194:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801519a:	490d      	ldr	r1, [pc, #52]	@ (80151d0 <etharp_find_entry+0x2d4>)
 801519c:	4613      	mov	r3, r2
 801519e:	005b      	lsls	r3, r3, #1
 80151a0:	4413      	add	r3, r2
 80151a2:	00db      	lsls	r3, r3, #3
 80151a4:	440b      	add	r3, r1
 80151a6:	3312      	adds	r3, #18
 80151a8:	2200      	movs	r2, #0
 80151aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80151ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151b0:	4907      	ldr	r1, [pc, #28]	@ (80151d0 <etharp_find_entry+0x2d4>)
 80151b2:	4613      	mov	r3, r2
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	4413      	add	r3, r2
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	440b      	add	r3, r1
 80151bc:	3308      	adds	r3, #8
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80151c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3728      	adds	r7, #40	@ 0x28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	2000f0f8 	.word	0x2000f0f8
 80151d4:	0801bd34 	.word	0x0801bd34
 80151d8:	0801bd6c 	.word	0x0801bd6c
 80151dc:	0801bdac 	.word	0x0801bdac
 80151e0:	0801bdd4 	.word	0x0801bdd4
 80151e4:	0801bdec 	.word	0x0801bdec
 80151e8:	0801be00 	.word	0x0801be00

080151ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b088      	sub	sp, #32
 80151f0:	af02      	add	r7, sp, #8
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015200:	2b06      	cmp	r3, #6
 8015202:	d006      	beq.n	8015212 <etharp_update_arp_entry+0x26>
 8015204:	4b48      	ldr	r3, [pc, #288]	@ (8015328 <etharp_update_arp_entry+0x13c>)
 8015206:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801520a:	4948      	ldr	r1, [pc, #288]	@ (801532c <etharp_update_arp_entry+0x140>)
 801520c:	4848      	ldr	r0, [pc, #288]	@ (8015330 <etharp_update_arp_entry+0x144>)
 801520e:	f002 fb43 	bl	8017898 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d012      	beq.n	801523e <etharp_update_arp_entry+0x52>
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d00e      	beq.n	801523e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	68f9      	ldr	r1, [r7, #12]
 8015226:	4618      	mov	r0, r3
 8015228:	f001 f8fe 	bl	8016428 <ip4_addr_isbroadcast_u32>
 801522c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801522e:	2b00      	cmp	r3, #0
 8015230:	d105      	bne.n	801523e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801523a:	2be0      	cmp	r3, #224	@ 0xe0
 801523c:	d102      	bne.n	8015244 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801523e:	f06f 030f 	mvn.w	r3, #15
 8015242:	e06c      	b.n	801531e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015244:	78fb      	ldrb	r3, [r7, #3]
 8015246:	68fa      	ldr	r2, [r7, #12]
 8015248:	4619      	mov	r1, r3
 801524a:	68b8      	ldr	r0, [r7, #8]
 801524c:	f7ff fe56 	bl	8014efc <etharp_find_entry>
 8015250:	4603      	mov	r3, r0
 8015252:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015258:	2b00      	cmp	r3, #0
 801525a:	da02      	bge.n	8015262 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801525c:	8afb      	ldrh	r3, [r7, #22]
 801525e:	b25b      	sxtb	r3, r3
 8015260:	e05d      	b.n	801531e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015262:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015266:	4933      	ldr	r1, [pc, #204]	@ (8015334 <etharp_update_arp_entry+0x148>)
 8015268:	4613      	mov	r3, r2
 801526a:	005b      	lsls	r3, r3, #1
 801526c:	4413      	add	r3, r2
 801526e:	00db      	lsls	r3, r3, #3
 8015270:	440b      	add	r3, r1
 8015272:	3314      	adds	r3, #20
 8015274:	2202      	movs	r2, #2
 8015276:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015278:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801527c:	492d      	ldr	r1, [pc, #180]	@ (8015334 <etharp_update_arp_entry+0x148>)
 801527e:	4613      	mov	r3, r2
 8015280:	005b      	lsls	r3, r3, #1
 8015282:	4413      	add	r3, r2
 8015284:	00db      	lsls	r3, r3, #3
 8015286:	440b      	add	r3, r1
 8015288:	3308      	adds	r3, #8
 801528a:	68fa      	ldr	r2, [r7, #12]
 801528c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801528e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015292:	4613      	mov	r3, r2
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	4413      	add	r3, r2
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	3308      	adds	r3, #8
 801529c:	4a25      	ldr	r2, [pc, #148]	@ (8015334 <etharp_update_arp_entry+0x148>)
 801529e:	4413      	add	r3, r2
 80152a0:	3304      	adds	r3, #4
 80152a2:	2206      	movs	r2, #6
 80152a4:	6879      	ldr	r1, [r7, #4]
 80152a6:	4618      	mov	r0, r3
 80152a8:	f002 fc7f 	bl	8017baa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80152ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152b0:	4920      	ldr	r1, [pc, #128]	@ (8015334 <etharp_update_arp_entry+0x148>)
 80152b2:	4613      	mov	r3, r2
 80152b4:	005b      	lsls	r3, r3, #1
 80152b6:	4413      	add	r3, r2
 80152b8:	00db      	lsls	r3, r3, #3
 80152ba:	440b      	add	r3, r1
 80152bc:	3312      	adds	r3, #18
 80152be:	2200      	movs	r2, #0
 80152c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80152c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152c6:	491b      	ldr	r1, [pc, #108]	@ (8015334 <etharp_update_arp_entry+0x148>)
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	440b      	add	r3, r1
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d021      	beq.n	801531c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80152d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152dc:	4915      	ldr	r1, [pc, #84]	@ (8015334 <etharp_update_arp_entry+0x148>)
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	440b      	add	r3, r1
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80152ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80152f0:	4910      	ldr	r1, [pc, #64]	@ (8015334 <etharp_update_arp_entry+0x148>)
 80152f2:	4613      	mov	r3, r2
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	4413      	add	r3, r2
 80152f8:	00db      	lsls	r3, r3, #3
 80152fa:	440b      	add	r3, r1
 80152fc:	2200      	movs	r2, #0
 80152fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015306:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801530a:	9300      	str	r3, [sp, #0]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6939      	ldr	r1, [r7, #16]
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f001 ff97 	bl	8017244 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015316:	6938      	ldr	r0, [r7, #16]
 8015318:	f7f8 fb56 	bl	800d9c8 <pbuf_free>
  }
  return ERR_OK;
 801531c:	2300      	movs	r3, #0
}
 801531e:	4618      	mov	r0, r3
 8015320:	3718      	adds	r7, #24
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	0801bd34 	.word	0x0801bd34
 801532c:	0801be2c 	.word	0x0801be2c
 8015330:	0801bdac 	.word	0x0801bdac
 8015334:	2000f0f8 	.word	0x2000f0f8

08015338 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015340:	2300      	movs	r3, #0
 8015342:	60fb      	str	r3, [r7, #12]
 8015344:	e01e      	b.n	8015384 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015346:	4913      	ldr	r1, [pc, #76]	@ (8015394 <etharp_cleanup_netif+0x5c>)
 8015348:	68fa      	ldr	r2, [r7, #12]
 801534a:	4613      	mov	r3, r2
 801534c:	005b      	lsls	r3, r3, #1
 801534e:	4413      	add	r3, r2
 8015350:	00db      	lsls	r3, r3, #3
 8015352:	440b      	add	r3, r1
 8015354:	3314      	adds	r3, #20
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801535a:	7afb      	ldrb	r3, [r7, #11]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d00e      	beq.n	801537e <etharp_cleanup_netif+0x46>
 8015360:	490c      	ldr	r1, [pc, #48]	@ (8015394 <etharp_cleanup_netif+0x5c>)
 8015362:	68fa      	ldr	r2, [r7, #12]
 8015364:	4613      	mov	r3, r2
 8015366:	005b      	lsls	r3, r3, #1
 8015368:	4413      	add	r3, r2
 801536a:	00db      	lsls	r3, r3, #3
 801536c:	440b      	add	r3, r1
 801536e:	3308      	adds	r3, #8
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	429a      	cmp	r2, r3
 8015376:	d102      	bne.n	801537e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f7ff fce5 	bl	8014d48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	3301      	adds	r3, #1
 8015382:	60fb      	str	r3, [r7, #12]
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2b09      	cmp	r3, #9
 8015388:	dddd      	ble.n	8015346 <etharp_cleanup_netif+0xe>
    }
  }
}
 801538a:	bf00      	nop
 801538c:	bf00      	nop
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	2000f0f8 	.word	0x2000f0f8

08015398 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015398:	b5b0      	push	{r4, r5, r7, lr}
 801539a:	b08a      	sub	sp, #40	@ 0x28
 801539c:	af04      	add	r7, sp, #16
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d107      	bne.n	80153b8 <etharp_input+0x20>
 80153a8:	4b3d      	ldr	r3, [pc, #244]	@ (80154a0 <etharp_input+0x108>)
 80153aa:	f240 228a 	movw	r2, #650	@ 0x28a
 80153ae:	493d      	ldr	r1, [pc, #244]	@ (80154a4 <etharp_input+0x10c>)
 80153b0:	483d      	ldr	r0, [pc, #244]	@ (80154a8 <etharp_input+0x110>)
 80153b2:	f002 fa71 	bl	8017898 <iprintf>
 80153b6:	e06f      	b.n	8015498 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153c8:	d10c      	bne.n	80153e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153ca:	693b      	ldr	r3, [r7, #16]
 80153cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80153ce:	2b06      	cmp	r3, #6
 80153d0:	d108      	bne.n	80153e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80153d6:	2b04      	cmp	r3, #4
 80153d8:	d104      	bne.n	80153e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	885b      	ldrh	r3, [r3, #2]
 80153de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80153e0:	2b08      	cmp	r3, #8
 80153e2:	d003      	beq.n	80153ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7f8 faef 	bl	800d9c8 <pbuf_free>
    return;
 80153ea:	e055      	b.n	8015498 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	330e      	adds	r3, #14
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	3318      	adds	r3, #24
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	3304      	adds	r3, #4
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d102      	bne.n	801540c <etharp_input+0x74>
    for_us = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	75fb      	strb	r3, [r7, #23]
 801540a:	e009      	b.n	8015420 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	3304      	adds	r3, #4
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	429a      	cmp	r2, r3
 8015416:	bf0c      	ite	eq
 8015418:	2301      	moveq	r3, #1
 801541a:	2300      	movne	r3, #0
 801541c:	b2db      	uxtb	r3, r3
 801541e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	f103 0208 	add.w	r2, r3, #8
 8015426:	7dfb      	ldrb	r3, [r7, #23]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <etharp_input+0x98>
 801542c:	2301      	movs	r3, #1
 801542e:	e000      	b.n	8015432 <etharp_input+0x9a>
 8015430:	2302      	movs	r3, #2
 8015432:	f107 010c 	add.w	r1, r7, #12
 8015436:	6838      	ldr	r0, [r7, #0]
 8015438:	f7ff fed8 	bl	80151ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	88db      	ldrh	r3, [r3, #6]
 8015440:	b29b      	uxth	r3, r3
 8015442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015446:	d003      	beq.n	8015450 <etharp_input+0xb8>
 8015448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801544c:	d01e      	beq.n	801548c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801544e:	e020      	b.n	8015492 <etharp_input+0xfa>
      if (for_us) {
 8015450:	7dfb      	ldrb	r3, [r7, #23]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d01c      	beq.n	8015490 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801546c:	693a      	ldr	r2, [r7, #16]
 801546e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015470:	2102      	movs	r1, #2
 8015472:	9103      	str	r1, [sp, #12]
 8015474:	f107 010c 	add.w	r1, r7, #12
 8015478:	9102      	str	r1, [sp, #8]
 801547a:	9201      	str	r2, [sp, #4]
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	462b      	mov	r3, r5
 8015480:	4622      	mov	r2, r4
 8015482:	4601      	mov	r1, r0
 8015484:	6838      	ldr	r0, [r7, #0]
 8015486:	f000 faeb 	bl	8015a60 <etharp_raw>
      break;
 801548a:	e001      	b.n	8015490 <etharp_input+0xf8>
      break;
 801548c:	bf00      	nop
 801548e:	e000      	b.n	8015492 <etharp_input+0xfa>
      break;
 8015490:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7f8 fa98 	bl	800d9c8 <pbuf_free>
}
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bdb0      	pop	{r4, r5, r7, pc}
 801549e:	bf00      	nop
 80154a0:	0801bd34 	.word	0x0801bd34
 80154a4:	0801be84 	.word	0x0801be84
 80154a8:	0801bdac 	.word	0x0801bdac

080154ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b086      	sub	sp, #24
 80154b0:	af02      	add	r7, sp, #8
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	4613      	mov	r3, r2
 80154b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80154ba:	79fa      	ldrb	r2, [r7, #7]
 80154bc:	4944      	ldr	r1, [pc, #272]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 80154be:	4613      	mov	r3, r2
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	4413      	add	r3, r2
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	440b      	add	r3, r1
 80154c8:	3314      	adds	r3, #20
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	2b01      	cmp	r3, #1
 80154ce:	d806      	bhi.n	80154de <etharp_output_to_arp_index+0x32>
 80154d0:	4b40      	ldr	r3, [pc, #256]	@ (80155d4 <etharp_output_to_arp_index+0x128>)
 80154d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80154d6:	4940      	ldr	r1, [pc, #256]	@ (80155d8 <etharp_output_to_arp_index+0x12c>)
 80154d8:	4840      	ldr	r0, [pc, #256]	@ (80155dc <etharp_output_to_arp_index+0x130>)
 80154da:	f002 f9dd 	bl	8017898 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80154de:	79fa      	ldrb	r2, [r7, #7]
 80154e0:	493b      	ldr	r1, [pc, #236]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 80154e2:	4613      	mov	r3, r2
 80154e4:	005b      	lsls	r3, r3, #1
 80154e6:	4413      	add	r3, r2
 80154e8:	00db      	lsls	r3, r3, #3
 80154ea:	440b      	add	r3, r1
 80154ec:	3314      	adds	r3, #20
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	2b02      	cmp	r3, #2
 80154f2:	d153      	bne.n	801559c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80154f4:	79fa      	ldrb	r2, [r7, #7]
 80154f6:	4936      	ldr	r1, [pc, #216]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 80154f8:	4613      	mov	r3, r2
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	4413      	add	r3, r2
 80154fe:	00db      	lsls	r3, r3, #3
 8015500:	440b      	add	r3, r1
 8015502:	3312      	adds	r3, #18
 8015504:	881b      	ldrh	r3, [r3, #0]
 8015506:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801550a:	d919      	bls.n	8015540 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801550c:	79fa      	ldrb	r2, [r7, #7]
 801550e:	4613      	mov	r3, r2
 8015510:	005b      	lsls	r3, r3, #1
 8015512:	4413      	add	r3, r2
 8015514:	00db      	lsls	r3, r3, #3
 8015516:	4a2e      	ldr	r2, [pc, #184]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 8015518:	4413      	add	r3, r2
 801551a:	3304      	adds	r3, #4
 801551c:	4619      	mov	r1, r3
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	f000 fb4c 	bl	8015bbc <etharp_request>
 8015524:	4603      	mov	r3, r0
 8015526:	2b00      	cmp	r3, #0
 8015528:	d138      	bne.n	801559c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801552a:	79fa      	ldrb	r2, [r7, #7]
 801552c:	4928      	ldr	r1, [pc, #160]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 801552e:	4613      	mov	r3, r2
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4413      	add	r3, r2
 8015534:	00db      	lsls	r3, r3, #3
 8015536:	440b      	add	r3, r1
 8015538:	3314      	adds	r3, #20
 801553a:	2203      	movs	r2, #3
 801553c:	701a      	strb	r2, [r3, #0]
 801553e:	e02d      	b.n	801559c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015540:	79fa      	ldrb	r2, [r7, #7]
 8015542:	4923      	ldr	r1, [pc, #140]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 8015544:	4613      	mov	r3, r2
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	4413      	add	r3, r2
 801554a:	00db      	lsls	r3, r3, #3
 801554c:	440b      	add	r3, r1
 801554e:	3312      	adds	r3, #18
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015556:	d321      	bcc.n	801559c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015558:	79fa      	ldrb	r2, [r7, #7]
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	00db      	lsls	r3, r3, #3
 8015562:	4a1b      	ldr	r2, [pc, #108]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 8015564:	4413      	add	r3, r2
 8015566:	1d19      	adds	r1, r3, #4
 8015568:	79fa      	ldrb	r2, [r7, #7]
 801556a:	4613      	mov	r3, r2
 801556c:	005b      	lsls	r3, r3, #1
 801556e:	4413      	add	r3, r2
 8015570:	00db      	lsls	r3, r3, #3
 8015572:	3308      	adds	r3, #8
 8015574:	4a16      	ldr	r2, [pc, #88]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 8015576:	4413      	add	r3, r2
 8015578:	3304      	adds	r3, #4
 801557a:	461a      	mov	r2, r3
 801557c:	68f8      	ldr	r0, [r7, #12]
 801557e:	f000 fafb 	bl	8015b78 <etharp_request_dst>
 8015582:	4603      	mov	r3, r0
 8015584:	2b00      	cmp	r3, #0
 8015586:	d109      	bne.n	801559c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015588:	79fa      	ldrb	r2, [r7, #7]
 801558a:	4911      	ldr	r1, [pc, #68]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 801558c:	4613      	mov	r3, r2
 801558e:	005b      	lsls	r3, r3, #1
 8015590:	4413      	add	r3, r2
 8015592:	00db      	lsls	r3, r3, #3
 8015594:	440b      	add	r3, r1
 8015596:	3314      	adds	r3, #20
 8015598:	2203      	movs	r2, #3
 801559a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80155a2:	79fa      	ldrb	r2, [r7, #7]
 80155a4:	4613      	mov	r3, r2
 80155a6:	005b      	lsls	r3, r3, #1
 80155a8:	4413      	add	r3, r2
 80155aa:	00db      	lsls	r3, r3, #3
 80155ac:	3308      	adds	r3, #8
 80155ae:	4a08      	ldr	r2, [pc, #32]	@ (80155d0 <etharp_output_to_arp_index+0x124>)
 80155b0:	4413      	add	r3, r2
 80155b2:	3304      	adds	r3, #4
 80155b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80155b8:	9200      	str	r2, [sp, #0]
 80155ba:	460a      	mov	r2, r1
 80155bc:	68b9      	ldr	r1, [r7, #8]
 80155be:	68f8      	ldr	r0, [r7, #12]
 80155c0:	f001 fe40 	bl	8017244 <ethernet_output>
 80155c4:	4603      	mov	r3, r0
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	2000f0f8 	.word	0x2000f0f8
 80155d4:	0801bd34 	.word	0x0801bd34
 80155d8:	0801bea4 	.word	0x0801bea4
 80155dc:	0801bdac 	.word	0x0801bdac

080155e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b08a      	sub	sp, #40	@ 0x28
 80155e4:	af02      	add	r7, sp, #8
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d106      	bne.n	8015604 <etharp_output+0x24>
 80155f6:	4b73      	ldr	r3, [pc, #460]	@ (80157c4 <etharp_output+0x1e4>)
 80155f8:	f240 321e 	movw	r2, #798	@ 0x31e
 80155fc:	4972      	ldr	r1, [pc, #456]	@ (80157c8 <etharp_output+0x1e8>)
 80155fe:	4873      	ldr	r0, [pc, #460]	@ (80157cc <etharp_output+0x1ec>)
 8015600:	f002 f94a 	bl	8017898 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015604:	68bb      	ldr	r3, [r7, #8]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d106      	bne.n	8015618 <etharp_output+0x38>
 801560a:	4b6e      	ldr	r3, [pc, #440]	@ (80157c4 <etharp_output+0x1e4>)
 801560c:	f240 321f 	movw	r2, #799	@ 0x31f
 8015610:	496f      	ldr	r1, [pc, #444]	@ (80157d0 <etharp_output+0x1f0>)
 8015612:	486e      	ldr	r0, [pc, #440]	@ (80157cc <etharp_output+0x1ec>)
 8015614:	f002 f940 	bl	8017898 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d106      	bne.n	801562c <etharp_output+0x4c>
 801561e:	4b69      	ldr	r3, [pc, #420]	@ (80157c4 <etharp_output+0x1e4>)
 8015620:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015624:	496b      	ldr	r1, [pc, #428]	@ (80157d4 <etharp_output+0x1f4>)
 8015626:	4869      	ldr	r0, [pc, #420]	@ (80157cc <etharp_output+0x1ec>)
 8015628:	f002 f936 	bl	8017898 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	68f9      	ldr	r1, [r7, #12]
 8015632:	4618      	mov	r0, r3
 8015634:	f000 fef8 	bl	8016428 <ip4_addr_isbroadcast_u32>
 8015638:	4603      	mov	r3, r0
 801563a:	2b00      	cmp	r3, #0
 801563c:	d002      	beq.n	8015644 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801563e:	4b66      	ldr	r3, [pc, #408]	@ (80157d8 <etharp_output+0x1f8>)
 8015640:	61fb      	str	r3, [r7, #28]
 8015642:	e0af      	b.n	80157a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801564c:	2be0      	cmp	r3, #224	@ 0xe0
 801564e:	d118      	bne.n	8015682 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015650:	2301      	movs	r3, #1
 8015652:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015654:	2300      	movs	r3, #0
 8015656:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015658:	235e      	movs	r3, #94	@ 0x5e
 801565a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	3301      	adds	r3, #1
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015666:	b2db      	uxtb	r3, r3
 8015668:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	3302      	adds	r3, #2
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	3303      	adds	r3, #3
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801567a:	f107 0310 	add.w	r3, r7, #16
 801567e:	61fb      	str	r3, [r7, #28]
 8015680:	e090      	b.n	80157a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3304      	adds	r3, #4
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	405a      	eors	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	3308      	adds	r3, #8
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	4013      	ands	r3, r2
 8015696:	2b00      	cmp	r3, #0
 8015698:	d012      	beq.n	80156c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80156a0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d00b      	beq.n	80156c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	330c      	adds	r3, #12
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d003      	beq.n	80156ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	330c      	adds	r3, #12
 80156b6:	61bb      	str	r3, [r7, #24]
 80156b8:	e002      	b.n	80156c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80156ba:	f06f 0303 	mvn.w	r3, #3
 80156be:	e07d      	b.n	80157bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156c0:	4b46      	ldr	r3, [pc, #280]	@ (80157dc <etharp_output+0x1fc>)
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	4619      	mov	r1, r3
 80156c6:	4a46      	ldr	r2, [pc, #280]	@ (80157e0 <etharp_output+0x200>)
 80156c8:	460b      	mov	r3, r1
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	440b      	add	r3, r1
 80156ce:	00db      	lsls	r3, r3, #3
 80156d0:	4413      	add	r3, r2
 80156d2:	3314      	adds	r3, #20
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d925      	bls.n	8015726 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80156da:	4b40      	ldr	r3, [pc, #256]	@ (80157dc <etharp_output+0x1fc>)
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	4619      	mov	r1, r3
 80156e0:	4a3f      	ldr	r2, [pc, #252]	@ (80157e0 <etharp_output+0x200>)
 80156e2:	460b      	mov	r3, r1
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	440b      	add	r3, r1
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	4413      	add	r3, r2
 80156ec:	3308      	adds	r3, #8
 80156ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80156f0:	68fa      	ldr	r2, [r7, #12]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	d117      	bne.n	8015726 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	681a      	ldr	r2, [r3, #0]
 80156fa:	4b38      	ldr	r3, [pc, #224]	@ (80157dc <etharp_output+0x1fc>)
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	4618      	mov	r0, r3
 8015700:	4937      	ldr	r1, [pc, #220]	@ (80157e0 <etharp_output+0x200>)
 8015702:	4603      	mov	r3, r0
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	4403      	add	r3, r0
 8015708:	00db      	lsls	r3, r3, #3
 801570a:	440b      	add	r3, r1
 801570c:	3304      	adds	r3, #4
 801570e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015710:	429a      	cmp	r2, r3
 8015712:	d108      	bne.n	8015726 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015714:	4b31      	ldr	r3, [pc, #196]	@ (80157dc <etharp_output+0x1fc>)
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	461a      	mov	r2, r3
 801571a:	68b9      	ldr	r1, [r7, #8]
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f7ff fec5 	bl	80154ac <etharp_output_to_arp_index>
 8015722:	4603      	mov	r3, r0
 8015724:	e04a      	b.n	80157bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015726:	2300      	movs	r3, #0
 8015728:	75fb      	strb	r3, [r7, #23]
 801572a:	e031      	b.n	8015790 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801572c:	7dfa      	ldrb	r2, [r7, #23]
 801572e:	492c      	ldr	r1, [pc, #176]	@ (80157e0 <etharp_output+0x200>)
 8015730:	4613      	mov	r3, r2
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	4413      	add	r3, r2
 8015736:	00db      	lsls	r3, r3, #3
 8015738:	440b      	add	r3, r1
 801573a:	3314      	adds	r3, #20
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	2b01      	cmp	r3, #1
 8015740:	d923      	bls.n	801578a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015742:	7dfa      	ldrb	r2, [r7, #23]
 8015744:	4926      	ldr	r1, [pc, #152]	@ (80157e0 <etharp_output+0x200>)
 8015746:	4613      	mov	r3, r2
 8015748:	005b      	lsls	r3, r3, #1
 801574a:	4413      	add	r3, r2
 801574c:	00db      	lsls	r3, r3, #3
 801574e:	440b      	add	r3, r1
 8015750:	3308      	adds	r3, #8
 8015752:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	429a      	cmp	r2, r3
 8015758:	d117      	bne.n	801578a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	6819      	ldr	r1, [r3, #0]
 801575e:	7dfa      	ldrb	r2, [r7, #23]
 8015760:	481f      	ldr	r0, [pc, #124]	@ (80157e0 <etharp_output+0x200>)
 8015762:	4613      	mov	r3, r2
 8015764:	005b      	lsls	r3, r3, #1
 8015766:	4413      	add	r3, r2
 8015768:	00db      	lsls	r3, r3, #3
 801576a:	4403      	add	r3, r0
 801576c:	3304      	adds	r3, #4
 801576e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015770:	4299      	cmp	r1, r3
 8015772:	d10a      	bne.n	801578a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015774:	4a19      	ldr	r2, [pc, #100]	@ (80157dc <etharp_output+0x1fc>)
 8015776:	7dfb      	ldrb	r3, [r7, #23]
 8015778:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801577a:	7dfb      	ldrb	r3, [r7, #23]
 801577c:	461a      	mov	r2, r3
 801577e:	68b9      	ldr	r1, [r7, #8]
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	f7ff fe93 	bl	80154ac <etharp_output_to_arp_index>
 8015786:	4603      	mov	r3, r0
 8015788:	e018      	b.n	80157bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801578a:	7dfb      	ldrb	r3, [r7, #23]
 801578c:	3301      	adds	r3, #1
 801578e:	75fb      	strb	r3, [r7, #23]
 8015790:	7dfb      	ldrb	r3, [r7, #23]
 8015792:	2b09      	cmp	r3, #9
 8015794:	d9ca      	bls.n	801572c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015796:	68ba      	ldr	r2, [r7, #8]
 8015798:	69b9      	ldr	r1, [r7, #24]
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f000 f822 	bl	80157e4 <etharp_query>
 80157a0:	4603      	mov	r3, r0
 80157a2:	e00b      	b.n	80157bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80157aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80157ae:	9300      	str	r3, [sp, #0]
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	68b9      	ldr	r1, [r7, #8]
 80157b4:	68f8      	ldr	r0, [r7, #12]
 80157b6:	f001 fd45 	bl	8017244 <ethernet_output>
 80157ba:	4603      	mov	r3, r0
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3720      	adds	r7, #32
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	0801bd34 	.word	0x0801bd34
 80157c8:	0801be84 	.word	0x0801be84
 80157cc:	0801bdac 	.word	0x0801bdac
 80157d0:	0801bed4 	.word	0x0801bed4
 80157d4:	0801be74 	.word	0x0801be74
 80157d8:	0801d1f4 	.word	0x0801d1f4
 80157dc:	2000f1e8 	.word	0x2000f1e8
 80157e0:	2000f0f8 	.word	0x2000f0f8

080157e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08c      	sub	sp, #48	@ 0x30
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	3326      	adds	r3, #38	@ 0x26
 80157f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80157f6:	23ff      	movs	r3, #255	@ 0xff
 80157f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	68f9      	ldr	r1, [r7, #12]
 8015806:	4618      	mov	r0, r3
 8015808:	f000 fe0e 	bl	8016428 <ip4_addr_isbroadcast_u32>
 801580c:	4603      	mov	r3, r0
 801580e:	2b00      	cmp	r3, #0
 8015810:	d10c      	bne.n	801582c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801581a:	2be0      	cmp	r3, #224	@ 0xe0
 801581c:	d006      	beq.n	801582c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d003      	beq.n	801582c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d102      	bne.n	8015832 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801582c:	f06f 030f 	mvn.w	r3, #15
 8015830:	e101      	b.n	8015a36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015832:	68fa      	ldr	r2, [r7, #12]
 8015834:	2101      	movs	r1, #1
 8015836:	68b8      	ldr	r0, [r7, #8]
 8015838:	f7ff fb60 	bl	8014efc <etharp_find_entry>
 801583c:	4603      	mov	r3, r0
 801583e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015844:	2b00      	cmp	r3, #0
 8015846:	da02      	bge.n	801584e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015848:	8a7b      	ldrh	r3, [r7, #18]
 801584a:	b25b      	sxtb	r3, r3
 801584c:	e0f3      	b.n	8015a36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801584e:	8a7b      	ldrh	r3, [r7, #18]
 8015850:	2b7e      	cmp	r3, #126	@ 0x7e
 8015852:	d906      	bls.n	8015862 <etharp_query+0x7e>
 8015854:	4b7a      	ldr	r3, [pc, #488]	@ (8015a40 <etharp_query+0x25c>)
 8015856:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801585a:	497a      	ldr	r1, [pc, #488]	@ (8015a44 <etharp_query+0x260>)
 801585c:	487a      	ldr	r0, [pc, #488]	@ (8015a48 <etharp_query+0x264>)
 801585e:	f002 f81b 	bl	8017898 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015862:	8a7b      	ldrh	r3, [r7, #18]
 8015864:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015866:	7c7a      	ldrb	r2, [r7, #17]
 8015868:	4978      	ldr	r1, [pc, #480]	@ (8015a4c <etharp_query+0x268>)
 801586a:	4613      	mov	r3, r2
 801586c:	005b      	lsls	r3, r3, #1
 801586e:	4413      	add	r3, r2
 8015870:	00db      	lsls	r3, r3, #3
 8015872:	440b      	add	r3, r1
 8015874:	3314      	adds	r3, #20
 8015876:	781b      	ldrb	r3, [r3, #0]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d115      	bne.n	80158a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801587c:	2301      	movs	r3, #1
 801587e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015880:	7c7a      	ldrb	r2, [r7, #17]
 8015882:	4972      	ldr	r1, [pc, #456]	@ (8015a4c <etharp_query+0x268>)
 8015884:	4613      	mov	r3, r2
 8015886:	005b      	lsls	r3, r3, #1
 8015888:	4413      	add	r3, r2
 801588a:	00db      	lsls	r3, r3, #3
 801588c:	440b      	add	r3, r1
 801588e:	3314      	adds	r3, #20
 8015890:	2201      	movs	r2, #1
 8015892:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015894:	7c7a      	ldrb	r2, [r7, #17]
 8015896:	496d      	ldr	r1, [pc, #436]	@ (8015a4c <etharp_query+0x268>)
 8015898:	4613      	mov	r3, r2
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	4413      	add	r3, r2
 801589e:	00db      	lsls	r3, r3, #3
 80158a0:	440b      	add	r3, r1
 80158a2:	3308      	adds	r3, #8
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80158a8:	7c7a      	ldrb	r2, [r7, #17]
 80158aa:	4968      	ldr	r1, [pc, #416]	@ (8015a4c <etharp_query+0x268>)
 80158ac:	4613      	mov	r3, r2
 80158ae:	005b      	lsls	r3, r3, #1
 80158b0:	4413      	add	r3, r2
 80158b2:	00db      	lsls	r3, r3, #3
 80158b4:	440b      	add	r3, r1
 80158b6:	3314      	adds	r3, #20
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	2b01      	cmp	r3, #1
 80158bc:	d011      	beq.n	80158e2 <etharp_query+0xfe>
 80158be:	7c7a      	ldrb	r2, [r7, #17]
 80158c0:	4962      	ldr	r1, [pc, #392]	@ (8015a4c <etharp_query+0x268>)
 80158c2:	4613      	mov	r3, r2
 80158c4:	005b      	lsls	r3, r3, #1
 80158c6:	4413      	add	r3, r2
 80158c8:	00db      	lsls	r3, r3, #3
 80158ca:	440b      	add	r3, r1
 80158cc:	3314      	adds	r3, #20
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d806      	bhi.n	80158e2 <etharp_query+0xfe>
 80158d4:	4b5a      	ldr	r3, [pc, #360]	@ (8015a40 <etharp_query+0x25c>)
 80158d6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80158da:	495d      	ldr	r1, [pc, #372]	@ (8015a50 <etharp_query+0x26c>)
 80158dc:	485a      	ldr	r0, [pc, #360]	@ (8015a48 <etharp_query+0x264>)
 80158de:	f001 ffdb 	bl	8017898 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80158e2:	6a3b      	ldr	r3, [r7, #32]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d102      	bne.n	80158ee <etharp_query+0x10a>
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d10c      	bne.n	8015908 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80158ee:	68b9      	ldr	r1, [r7, #8]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f000 f963 	bl	8015bbc <etharp_request>
 80158f6:	4603      	mov	r3, r0
 80158f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d102      	bne.n	8015908 <etharp_query+0x124>
      return result;
 8015902:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015906:	e096      	b.n	8015a36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d106      	bne.n	801591c <etharp_query+0x138>
 801590e:	4b4c      	ldr	r3, [pc, #304]	@ (8015a40 <etharp_query+0x25c>)
 8015910:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015914:	494f      	ldr	r1, [pc, #316]	@ (8015a54 <etharp_query+0x270>)
 8015916:	484c      	ldr	r0, [pc, #304]	@ (8015a48 <etharp_query+0x264>)
 8015918:	f001 ffbe 	bl	8017898 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801591c:	7c7a      	ldrb	r2, [r7, #17]
 801591e:	494b      	ldr	r1, [pc, #300]	@ (8015a4c <etharp_query+0x268>)
 8015920:	4613      	mov	r3, r2
 8015922:	005b      	lsls	r3, r3, #1
 8015924:	4413      	add	r3, r2
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	440b      	add	r3, r1
 801592a:	3314      	adds	r3, #20
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	2b01      	cmp	r3, #1
 8015930:	d917      	bls.n	8015962 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015932:	4a49      	ldr	r2, [pc, #292]	@ (8015a58 <etharp_query+0x274>)
 8015934:	7c7b      	ldrb	r3, [r7, #17]
 8015936:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015938:	7c7a      	ldrb	r2, [r7, #17]
 801593a:	4613      	mov	r3, r2
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4413      	add	r3, r2
 8015940:	00db      	lsls	r3, r3, #3
 8015942:	3308      	adds	r3, #8
 8015944:	4a41      	ldr	r2, [pc, #260]	@ (8015a4c <etharp_query+0x268>)
 8015946:	4413      	add	r3, r2
 8015948:	3304      	adds	r3, #4
 801594a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801594e:	9200      	str	r2, [sp, #0]
 8015950:	697a      	ldr	r2, [r7, #20]
 8015952:	6879      	ldr	r1, [r7, #4]
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f001 fc75 	bl	8017244 <ethernet_output>
 801595a:	4603      	mov	r3, r0
 801595c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015960:	e067      	b.n	8015a32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015962:	7c7a      	ldrb	r2, [r7, #17]
 8015964:	4939      	ldr	r1, [pc, #228]	@ (8015a4c <etharp_query+0x268>)
 8015966:	4613      	mov	r3, r2
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	4413      	add	r3, r2
 801596c:	00db      	lsls	r3, r3, #3
 801596e:	440b      	add	r3, r1
 8015970:	3314      	adds	r3, #20
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b01      	cmp	r3, #1
 8015976:	d15c      	bne.n	8015a32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015980:	e01c      	b.n	80159bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	895a      	ldrh	r2, [r3, #10]
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	891b      	ldrh	r3, [r3, #8]
 801598a:	429a      	cmp	r2, r3
 801598c:	d10a      	bne.n	80159a4 <etharp_query+0x1c0>
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d006      	beq.n	80159a4 <etharp_query+0x1c0>
 8015996:	4b2a      	ldr	r3, [pc, #168]	@ (8015a40 <etharp_query+0x25c>)
 8015998:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801599c:	492f      	ldr	r1, [pc, #188]	@ (8015a5c <etharp_query+0x278>)
 801599e:	482a      	ldr	r0, [pc, #168]	@ (8015a48 <etharp_query+0x264>)
 80159a0:	f001 ff7a 	bl	8017898 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	7b1b      	ldrb	r3, [r3, #12]
 80159a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d002      	beq.n	80159b6 <etharp_query+0x1d2>
        copy_needed = 1;
 80159b0:	2301      	movs	r3, #1
 80159b2:	61bb      	str	r3, [r7, #24]
        break;
 80159b4:	e005      	b.n	80159c2 <etharp_query+0x1de>
      }
      p = p->next;
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80159bc:	69fb      	ldr	r3, [r7, #28]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d1df      	bne.n	8015982 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d007      	beq.n	80159d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80159ce:	200e      	movs	r0, #14
 80159d0:	f7f8 fa72 	bl	800deb8 <pbuf_clone>
 80159d4:	61f8      	str	r0, [r7, #28]
 80159d6:	e004      	b.n	80159e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80159dc:	69f8      	ldr	r0, [r7, #28]
 80159de:	f7f8 f899 	bl	800db14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d021      	beq.n	8015a2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80159e8:	7c7a      	ldrb	r2, [r7, #17]
 80159ea:	4918      	ldr	r1, [pc, #96]	@ (8015a4c <etharp_query+0x268>)
 80159ec:	4613      	mov	r3, r2
 80159ee:	005b      	lsls	r3, r3, #1
 80159f0:	4413      	add	r3, r2
 80159f2:	00db      	lsls	r3, r3, #3
 80159f4:	440b      	add	r3, r1
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d00a      	beq.n	8015a12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80159fc:	7c7a      	ldrb	r2, [r7, #17]
 80159fe:	4913      	ldr	r1, [pc, #76]	@ (8015a4c <etharp_query+0x268>)
 8015a00:	4613      	mov	r3, r2
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	4413      	add	r3, r2
 8015a06:	00db      	lsls	r3, r3, #3
 8015a08:	440b      	add	r3, r1
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7f7 ffdb 	bl	800d9c8 <pbuf_free>
      }
      arp_table[i].q = p;
 8015a12:	7c7a      	ldrb	r2, [r7, #17]
 8015a14:	490d      	ldr	r1, [pc, #52]	@ (8015a4c <etharp_query+0x268>)
 8015a16:	4613      	mov	r3, r2
 8015a18:	005b      	lsls	r3, r3, #1
 8015a1a:	4413      	add	r3, r2
 8015a1c:	00db      	lsls	r3, r3, #3
 8015a1e:	440b      	add	r3, r1
 8015a20:	69fa      	ldr	r2, [r7, #28]
 8015a22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015a24:	2300      	movs	r3, #0
 8015a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015a2a:	e002      	b.n	8015a32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015a2c:	23ff      	movs	r3, #255	@ 0xff
 8015a2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3728      	adds	r7, #40	@ 0x28
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
 8015a3e:	bf00      	nop
 8015a40:	0801bd34 	.word	0x0801bd34
 8015a44:	0801bee0 	.word	0x0801bee0
 8015a48:	0801bdac 	.word	0x0801bdac
 8015a4c:	2000f0f8 	.word	0x2000f0f8
 8015a50:	0801bef0 	.word	0x0801bef0
 8015a54:	0801bed4 	.word	0x0801bed4
 8015a58:	2000f1e8 	.word	0x2000f1e8
 8015a5c:	0801bf18 	.word	0x0801bf18

08015a60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b08a      	sub	sp, #40	@ 0x28
 8015a64:	af02      	add	r7, sp, #8
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
 8015a6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d106      	bne.n	8015a86 <etharp_raw+0x26>
 8015a78:	4b3a      	ldr	r3, [pc, #232]	@ (8015b64 <etharp_raw+0x104>)
 8015a7a:	f240 4257 	movw	r2, #1111	@ 0x457
 8015a7e:	493a      	ldr	r1, [pc, #232]	@ (8015b68 <etharp_raw+0x108>)
 8015a80:	483a      	ldr	r0, [pc, #232]	@ (8015b6c <etharp_raw+0x10c>)
 8015a82:	f001 ff09 	bl	8017898 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015a86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015a8a:	211c      	movs	r1, #28
 8015a8c:	200e      	movs	r0, #14
 8015a8e:	f7f7 fcb7 	bl	800d400 <pbuf_alloc>
 8015a92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d102      	bne.n	8015aa0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a9e:	e05d      	b.n	8015b5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	895b      	ldrh	r3, [r3, #10]
 8015aa4:	2b1b      	cmp	r3, #27
 8015aa6:	d806      	bhi.n	8015ab6 <etharp_raw+0x56>
 8015aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8015b64 <etharp_raw+0x104>)
 8015aaa:	f240 4262 	movw	r2, #1122	@ 0x462
 8015aae:	4930      	ldr	r1, [pc, #192]	@ (8015b70 <etharp_raw+0x110>)
 8015ab0:	482e      	ldr	r0, [pc, #184]	@ (8015b6c <etharp_raw+0x10c>)
 8015ab2:	f001 fef1 	bl	8017898 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015abc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7f6 fb5a 	bl	800c178 <lwip_htons>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015ad2:	2b06      	cmp	r3, #6
 8015ad4:	d006      	beq.n	8015ae4 <etharp_raw+0x84>
 8015ad6:	4b23      	ldr	r3, [pc, #140]	@ (8015b64 <etharp_raw+0x104>)
 8015ad8:	f240 4269 	movw	r2, #1129	@ 0x469
 8015adc:	4925      	ldr	r1, [pc, #148]	@ (8015b74 <etharp_raw+0x114>)
 8015ade:	4823      	ldr	r0, [pc, #140]	@ (8015b6c <etharp_raw+0x10c>)
 8015ae0:	f001 feda 	bl	8017898 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	3308      	adds	r3, #8
 8015ae8:	2206      	movs	r2, #6
 8015aea:	6839      	ldr	r1, [r7, #0]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f002 f85c 	bl	8017baa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	3312      	adds	r3, #18
 8015af6:	2206      	movs	r2, #6
 8015af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015afa:	4618      	mov	r0, r3
 8015afc:	f002 f855 	bl	8017baa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	330e      	adds	r3, #14
 8015b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b06:	6812      	ldr	r2, [r2, #0]
 8015b08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	3318      	adds	r3, #24
 8015b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b10:	6812      	ldr	r2, [r2, #0]
 8015b12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	2200      	movs	r2, #0
 8015b18:	701a      	strb	r2, [r3, #0]
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	f042 0201 	orr.w	r2, r2, #1
 8015b20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	2200      	movs	r2, #0
 8015b26:	f042 0208 	orr.w	r2, r2, #8
 8015b2a:	709a      	strb	r2, [r3, #2]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	2206      	movs	r2, #6
 8015b34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	2204      	movs	r2, #4
 8015b3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015b3c:	f640 0306 	movw	r3, #2054	@ 0x806
 8015b40:	9300      	str	r3, [sp, #0]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	68ba      	ldr	r2, [r7, #8]
 8015b46:	69b9      	ldr	r1, [r7, #24]
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f001 fb7b 	bl	8017244 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015b4e:	69b8      	ldr	r0, [r7, #24]
 8015b50:	f7f7 ff3a 	bl	800d9c8 <pbuf_free>
  p = NULL;
 8015b54:	2300      	movs	r3, #0
 8015b56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	3720      	adds	r7, #32
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}
 8015b64:	0801bd34 	.word	0x0801bd34
 8015b68:	0801be84 	.word	0x0801be84
 8015b6c:	0801bdac 	.word	0x0801bdac
 8015b70:	0801bf34 	.word	0x0801bf34
 8015b74:	0801bf68 	.word	0x0801bf68

08015b78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b088      	sub	sp, #32
 8015b7c:	af04      	add	r7, sp, #16
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b94:	2201      	movs	r2, #1
 8015b96:	9203      	str	r2, [sp, #12]
 8015b98:	68ba      	ldr	r2, [r7, #8]
 8015b9a:	9202      	str	r2, [sp, #8]
 8015b9c:	4a06      	ldr	r2, [pc, #24]	@ (8015bb8 <etharp_request_dst+0x40>)
 8015b9e:	9201      	str	r2, [sp, #4]
 8015ba0:	9300      	str	r3, [sp, #0]
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	687a      	ldr	r2, [r7, #4]
 8015ba6:	68f8      	ldr	r0, [r7, #12]
 8015ba8:	f7ff ff5a 	bl	8015a60 <etharp_raw>
 8015bac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0801d1fc 	.word	0x0801d1fc

08015bbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015bc6:	4a05      	ldr	r2, [pc, #20]	@ (8015bdc <etharp_request+0x20>)
 8015bc8:	6839      	ldr	r1, [r7, #0]
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f7ff ffd4 	bl	8015b78 <etharp_request_dst>
 8015bd0:	4603      	mov	r3, r0
}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	3708      	adds	r7, #8
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}
 8015bda:	bf00      	nop
 8015bdc:	0801d1f4 	.word	0x0801d1f4

08015be0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b08e      	sub	sp, #56	@ 0x38
 8015be4:	af04      	add	r7, sp, #16
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015bea:	4b79      	ldr	r3, [pc, #484]	@ (8015dd0 <icmp_input+0x1f0>)
 8015bec:	689b      	ldr	r3, [r3, #8]
 8015bee:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	f003 030f 	and.w	r3, r3, #15
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	009b      	lsls	r3, r3, #2
 8015bfc:	b2db      	uxtb	r3, r3
 8015bfe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015c02:	2b13      	cmp	r3, #19
 8015c04:	f240 80cd 	bls.w	8015da2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	895b      	ldrh	r3, [r3, #10]
 8015c0c:	2b03      	cmp	r3, #3
 8015c0e:	f240 80ca 	bls.w	8015da6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015c1c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f000 80b7 	beq.w	8015d94 <icmp_input+0x1b4>
 8015c26:	2b08      	cmp	r3, #8
 8015c28:	f040 80b7 	bne.w	8015d9a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015c2c:	4b69      	ldr	r3, [pc, #420]	@ (8015dd4 <icmp_input+0x1f4>)
 8015c2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015c30:	4b67      	ldr	r3, [pc, #412]	@ (8015dd0 <icmp_input+0x1f0>)
 8015c32:	695b      	ldr	r3, [r3, #20]
 8015c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015c38:	2be0      	cmp	r3, #224	@ 0xe0
 8015c3a:	f000 80bb 	beq.w	8015db4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015c3e:	4b64      	ldr	r3, [pc, #400]	@ (8015dd0 <icmp_input+0x1f0>)
 8015c40:	695b      	ldr	r3, [r3, #20]
 8015c42:	4a63      	ldr	r2, [pc, #396]	@ (8015dd0 <icmp_input+0x1f0>)
 8015c44:	6812      	ldr	r2, [r2, #0]
 8015c46:	4611      	mov	r1, r2
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f000 fbed 	bl	8016428 <ip4_addr_isbroadcast_u32>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f040 80b1 	bne.w	8015db8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	891b      	ldrh	r3, [r3, #8]
 8015c5a:	2b07      	cmp	r3, #7
 8015c5c:	f240 80a5 	bls.w	8015daa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015c60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015c62:	330e      	adds	r3, #14
 8015c64:	4619      	mov	r1, r3
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7f7 fe18 	bl	800d89c <pbuf_add_header>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d04b      	beq.n	8015d0a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	891a      	ldrh	r2, [r3, #8]
 8015c76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015c78:	4413      	add	r3, r2
 8015c7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	891b      	ldrh	r3, [r3, #8]
 8015c80:	8b7a      	ldrh	r2, [r7, #26]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	f0c0 809a 	bcc.w	8015dbc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015c88:	8b7b      	ldrh	r3, [r7, #26]
 8015c8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c8e:	4619      	mov	r1, r3
 8015c90:	200e      	movs	r0, #14
 8015c92:	f7f7 fbb5 	bl	800d400 <pbuf_alloc>
 8015c96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	f000 8090 	beq.w	8015dc0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	895b      	ldrh	r3, [r3, #10]
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ca8:	3308      	adds	r3, #8
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d203      	bcs.n	8015cb6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015cae:	6978      	ldr	r0, [r7, #20]
 8015cb0:	f7f7 fe8a 	bl	800d9c8 <pbuf_free>
          goto icmperr;
 8015cb4:	e085      	b.n	8015dc2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	685b      	ldr	r3, [r3, #4]
 8015cba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f001 ff73 	bl	8017baa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015cc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	6978      	ldr	r0, [r7, #20]
 8015cca:	f7f7 fdf7 	bl	800d8bc <pbuf_remove_header>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d009      	beq.n	8015ce8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015cd4:	4b40      	ldr	r3, [pc, #256]	@ (8015dd8 <icmp_input+0x1f8>)
 8015cd6:	22b6      	movs	r2, #182	@ 0xb6
 8015cd8:	4940      	ldr	r1, [pc, #256]	@ (8015ddc <icmp_input+0x1fc>)
 8015cda:	4841      	ldr	r0, [pc, #260]	@ (8015de0 <icmp_input+0x200>)
 8015cdc:	f001 fddc 	bl	8017898 <iprintf>
          pbuf_free(r);
 8015ce0:	6978      	ldr	r0, [r7, #20]
 8015ce2:	f7f7 fe71 	bl	800d9c8 <pbuf_free>
          goto icmperr;
 8015ce6:	e06c      	b.n	8015dc2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015ce8:	6879      	ldr	r1, [r7, #4]
 8015cea:	6978      	ldr	r0, [r7, #20]
 8015cec:	f7f7 ffa0 	bl	800dc30 <pbuf_copy>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d003      	beq.n	8015cfe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015cf6:	6978      	ldr	r0, [r7, #20]
 8015cf8:	f7f7 fe66 	bl	800d9c8 <pbuf_free>
          goto icmperr;
 8015cfc:	e061      	b.n	8015dc2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7f7 fe62 	bl	800d9c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	607b      	str	r3, [r7, #4]
 8015d08:	e00f      	b.n	8015d2a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015d0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015d0c:	330e      	adds	r3, #14
 8015d0e:	4619      	mov	r1, r3
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7f7 fdd3 	bl	800d8bc <pbuf_remove_header>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d006      	beq.n	8015d2a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8015dd8 <icmp_input+0x1f8>)
 8015d1e:	22c7      	movs	r2, #199	@ 0xc7
 8015d20:	4930      	ldr	r1, [pc, #192]	@ (8015de4 <icmp_input+0x204>)
 8015d22:	482f      	ldr	r0, [pc, #188]	@ (8015de0 <icmp_input+0x200>)
 8015d24:	f001 fdb8 	bl	8017898 <iprintf>
          goto icmperr;
 8015d28:	e04b      	b.n	8015dc2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015d30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015d32:	4619      	mov	r1, r3
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f7f7 fdb1 	bl	800d89c <pbuf_add_header>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d12b      	bne.n	8015d98 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	685b      	ldr	r3, [r3, #4]
 8015d44:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015d46:	69fb      	ldr	r3, [r7, #28]
 8015d48:	681a      	ldr	r2, [r3, #0]
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015d4e:	4b20      	ldr	r3, [pc, #128]	@ (8015dd0 <icmp_input+0x1f0>)
 8015d50:	691a      	ldr	r2, [r3, #16]
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	2200      	movs	r2, #0
 8015d5a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	709a      	strb	r2, [r3, #2]
 8015d62:	2200      	movs	r2, #0
 8015d64:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	22ff      	movs	r2, #255	@ 0xff
 8015d6a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	729a      	strb	r2, [r3, #10]
 8015d72:	2200      	movs	r2, #0
 8015d74:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	9302      	str	r3, [sp, #8]
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	9301      	str	r3, [sp, #4]
 8015d7e:	2300      	movs	r3, #0
 8015d80:	9300      	str	r3, [sp, #0]
 8015d82:	23ff      	movs	r3, #255	@ 0xff
 8015d84:	2200      	movs	r2, #0
 8015d86:	69f9      	ldr	r1, [r7, #28]
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f000 fa75 	bl	8016278 <ip4_output_if>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015d92:	e001      	b.n	8015d98 <icmp_input+0x1b8>
      break;
 8015d94:	bf00      	nop
 8015d96:	e000      	b.n	8015d9a <icmp_input+0x1ba>
      break;
 8015d98:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f7f7 fe14 	bl	800d9c8 <pbuf_free>
  return;
 8015da0:	e013      	b.n	8015dca <icmp_input+0x1ea>
    goto lenerr;
 8015da2:	bf00      	nop
 8015da4:	e002      	b.n	8015dac <icmp_input+0x1cc>
    goto lenerr;
 8015da6:	bf00      	nop
 8015da8:	e000      	b.n	8015dac <icmp_input+0x1cc>
        goto lenerr;
 8015daa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7f7 fe0b 	bl	800d9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015db2:	e00a      	b.n	8015dca <icmp_input+0x1ea>
        goto icmperr;
 8015db4:	bf00      	nop
 8015db6:	e004      	b.n	8015dc2 <icmp_input+0x1e2>
        goto icmperr;
 8015db8:	bf00      	nop
 8015dba:	e002      	b.n	8015dc2 <icmp_input+0x1e2>
          goto icmperr;
 8015dbc:	bf00      	nop
 8015dbe:	e000      	b.n	8015dc2 <icmp_input+0x1e2>
          goto icmperr;
 8015dc0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f7f7 fe00 	bl	800d9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015dc8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015dca:	3728      	adds	r7, #40	@ 0x28
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	2000b944 	.word	0x2000b944
 8015dd4:	2000b958 	.word	0x2000b958
 8015dd8:	0801bfac 	.word	0x0801bfac
 8015ddc:	0801bfe4 	.word	0x0801bfe4
 8015de0:	0801c01c 	.word	0x0801c01c
 8015de4:	0801c044 	.word	0x0801c044

08015de8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
 8015df0:	460b      	mov	r3, r1
 8015df2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015df4:	78fb      	ldrb	r3, [r7, #3]
 8015df6:	461a      	mov	r2, r3
 8015df8:	2103      	movs	r1, #3
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 f814 	bl	8015e28 <icmp_send_response>
}
 8015e00:	bf00      	nop
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	460b      	mov	r3, r1
 8015e12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015e14:	78fb      	ldrb	r3, [r7, #3]
 8015e16:	461a      	mov	r2, r3
 8015e18:	210b      	movs	r1, #11
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 f804 	bl	8015e28 <icmp_send_response>
}
 8015e20:	bf00      	nop
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}

08015e28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b08c      	sub	sp, #48	@ 0x30
 8015e2c:	af04      	add	r7, sp, #16
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	70fb      	strb	r3, [r7, #3]
 8015e34:	4613      	mov	r3, r2
 8015e36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015e38:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015e3c:	2124      	movs	r1, #36	@ 0x24
 8015e3e:	2022      	movs	r0, #34	@ 0x22
 8015e40:	f7f7 fade 	bl	800d400 <pbuf_alloc>
 8015e44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015e46:	69fb      	ldr	r3, [r7, #28]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d04c      	beq.n	8015ee6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015e4c:	69fb      	ldr	r3, [r7, #28]
 8015e4e:	895b      	ldrh	r3, [r3, #10]
 8015e50:	2b23      	cmp	r3, #35	@ 0x23
 8015e52:	d806      	bhi.n	8015e62 <icmp_send_response+0x3a>
 8015e54:	4b26      	ldr	r3, [pc, #152]	@ (8015ef0 <icmp_send_response+0xc8>)
 8015e56:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015e5a:	4926      	ldr	r1, [pc, #152]	@ (8015ef4 <icmp_send_response+0xcc>)
 8015e5c:	4826      	ldr	r0, [pc, #152]	@ (8015ef8 <icmp_send_response+0xd0>)
 8015e5e:	f001 fd1b 	bl	8017898 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	685b      	ldr	r3, [r3, #4]
 8015e6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	78fa      	ldrb	r2, [r7, #3]
 8015e72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015e74:	697b      	ldr	r3, [r7, #20]
 8015e76:	78ba      	ldrb	r2, [r7, #2]
 8015e78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	711a      	strb	r2, [r3, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	2200      	movs	r2, #0
 8015e88:	719a      	strb	r2, [r3, #6]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	f103 0008 	add.w	r0, r3, #8
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	221c      	movs	r2, #28
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	f001 fe84 	bl	8017baa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015ea2:	69bb      	ldr	r3, [r7, #24]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015ea8:	f107 030c 	add.w	r3, r7, #12
 8015eac:	4618      	mov	r0, r3
 8015eae:	f000 f825 	bl	8015efc <ip4_route>
 8015eb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015eb4:	693b      	ldr	r3, [r7, #16]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d011      	beq.n	8015ede <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	709a      	strb	r2, [r3, #2]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015ec4:	f107 020c 	add.w	r2, r7, #12
 8015ec8:	693b      	ldr	r3, [r7, #16]
 8015eca:	9302      	str	r3, [sp, #8]
 8015ecc:	2301      	movs	r3, #1
 8015ece:	9301      	str	r3, [sp, #4]
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	23ff      	movs	r3, #255	@ 0xff
 8015ed6:	2100      	movs	r1, #0
 8015ed8:	69f8      	ldr	r0, [r7, #28]
 8015eda:	f000 f9cd 	bl	8016278 <ip4_output_if>
  }
  pbuf_free(q);
 8015ede:	69f8      	ldr	r0, [r7, #28]
 8015ee0:	f7f7 fd72 	bl	800d9c8 <pbuf_free>
 8015ee4:	e000      	b.n	8015ee8 <icmp_send_response+0xc0>
    return;
 8015ee6:	bf00      	nop
}
 8015ee8:	3720      	adds	r7, #32
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	0801bfac 	.word	0x0801bfac
 8015ef4:	0801c078 	.word	0x0801c078
 8015ef8:	0801c01c 	.word	0x0801c01c

08015efc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015efc:	b480      	push	{r7}
 8015efe:	b085      	sub	sp, #20
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015f04:	4b33      	ldr	r3, [pc, #204]	@ (8015fd4 <ip4_route+0xd8>)
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	60fb      	str	r3, [r7, #12]
 8015f0a:	e036      	b.n	8015f7a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015f12:	f003 0301 	and.w	r3, r3, #1
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d02b      	beq.n	8015f74 <ip4_route+0x78>
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015f22:	089b      	lsrs	r3, r3, #2
 8015f24:	f003 0301 	and.w	r3, r3, #1
 8015f28:	b2db      	uxtb	r3, r3
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d022      	beq.n	8015f74 <ip4_route+0x78>
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	3304      	adds	r3, #4
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d01d      	beq.n	8015f74 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	3304      	adds	r3, #4
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	405a      	eors	r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	3308      	adds	r3, #8
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d101      	bne.n	8015f54 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	e038      	b.n	8015fc6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015f5a:	f003 0302 	and.w	r3, r3, #2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d108      	bne.n	8015f74 <ip4_route+0x78>
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	330c      	adds	r3, #12
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	429a      	cmp	r2, r3
 8015f6e:	d101      	bne.n	8015f74 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	e028      	b.n	8015fc6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	60fb      	str	r3, [r7, #12]
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1c5      	bne.n	8015f0c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f80:	4b15      	ldr	r3, [pc, #84]	@ (8015fd8 <ip4_route+0xdc>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d01a      	beq.n	8015fbe <ip4_route+0xc2>
 8015f88:	4b13      	ldr	r3, [pc, #76]	@ (8015fd8 <ip4_route+0xdc>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015f90:	f003 0301 	and.w	r3, r3, #1
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d012      	beq.n	8015fbe <ip4_route+0xc2>
 8015f98:	4b0f      	ldr	r3, [pc, #60]	@ (8015fd8 <ip4_route+0xdc>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015fa0:	f003 0304 	and.w	r3, r3, #4
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d00a      	beq.n	8015fbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8015fd8 <ip4_route+0xdc>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	3304      	adds	r3, #4
 8015fae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d004      	beq.n	8015fbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8015fbc:	d101      	bne.n	8015fc2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	e001      	b.n	8015fc6 <ip4_route+0xca>
  }

  return netif_default;
 8015fc2:	4b05      	ldr	r3, [pc, #20]	@ (8015fd8 <ip4_route+0xdc>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3714      	adds	r7, #20
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	2000f08c 	.word	0x2000f08c
 8015fd8:	2000f090 	.word	0x2000f090

08015fdc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b082      	sub	sp, #8
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015fea:	f003 0301 	and.w	r3, r3, #1
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d016      	beq.n	8016022 <ip4_input_accept+0x46>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d011      	beq.n	8016022 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015ffe:	4b0b      	ldr	r3, [pc, #44]	@ (801602c <ip4_input_accept+0x50>)
 8016000:	695a      	ldr	r2, [r3, #20]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	3304      	adds	r3, #4
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	429a      	cmp	r2, r3
 801600a:	d008      	beq.n	801601e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801600c:	4b07      	ldr	r3, [pc, #28]	@ (801602c <ip4_input_accept+0x50>)
 801600e:	695b      	ldr	r3, [r3, #20]
 8016010:	6879      	ldr	r1, [r7, #4]
 8016012:	4618      	mov	r0, r3
 8016014:	f000 fa08 	bl	8016428 <ip4_addr_isbroadcast_u32>
 8016018:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801601a:	2b00      	cmp	r3, #0
 801601c:	d001      	beq.n	8016022 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801601e:	2301      	movs	r3, #1
 8016020:	e000      	b.n	8016024 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016022:	2300      	movs	r3, #0
}
 8016024:	4618      	mov	r0, r3
 8016026:	3708      	adds	r7, #8
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	2000b944 	.word	0x2000b944

08016030 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b086      	sub	sp, #24
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	091b      	lsrs	r3, r3, #4
 8016046:	b2db      	uxtb	r3, r3
 8016048:	2b04      	cmp	r3, #4
 801604a:	d004      	beq.n	8016056 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7f7 fcbb 	bl	800d9c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016052:	2300      	movs	r3, #0
 8016054:	e107      	b.n	8016266 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	781b      	ldrb	r3, [r3, #0]
 801605a:	f003 030f 	and.w	r3, r3, #15
 801605e:	b2db      	uxtb	r3, r3
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	b2db      	uxtb	r3, r3
 8016064:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	885b      	ldrh	r3, [r3, #2]
 801606a:	b29b      	uxth	r3, r3
 801606c:	4618      	mov	r0, r3
 801606e:	f7f6 f883 	bl	800c178 <lwip_htons>
 8016072:	4603      	mov	r3, r0
 8016074:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	891b      	ldrh	r3, [r3, #8]
 801607a:	89ba      	ldrh	r2, [r7, #12]
 801607c:	429a      	cmp	r2, r3
 801607e:	d204      	bcs.n	801608a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016080:	89bb      	ldrh	r3, [r7, #12]
 8016082:	4619      	mov	r1, r3
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f7f7 fb19 	bl	800d6bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	895b      	ldrh	r3, [r3, #10]
 801608e:	89fa      	ldrh	r2, [r7, #14]
 8016090:	429a      	cmp	r2, r3
 8016092:	d807      	bhi.n	80160a4 <ip4_input+0x74>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	891b      	ldrh	r3, [r3, #8]
 8016098:	89ba      	ldrh	r2, [r7, #12]
 801609a:	429a      	cmp	r2, r3
 801609c:	d802      	bhi.n	80160a4 <ip4_input+0x74>
 801609e:	89fb      	ldrh	r3, [r7, #14]
 80160a0:	2b13      	cmp	r3, #19
 80160a2:	d804      	bhi.n	80160ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f7f7 fc8f 	bl	800d9c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80160aa:	2300      	movs	r3, #0
 80160ac:	e0db      	b.n	8016266 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80160ae:	697b      	ldr	r3, [r7, #20]
 80160b0:	691b      	ldr	r3, [r3, #16]
 80160b2:	4a6f      	ldr	r2, [pc, #444]	@ (8016270 <ip4_input+0x240>)
 80160b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	68db      	ldr	r3, [r3, #12]
 80160ba:	4a6d      	ldr	r2, [pc, #436]	@ (8016270 <ip4_input+0x240>)
 80160bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160be:	4b6c      	ldr	r3, [pc, #432]	@ (8016270 <ip4_input+0x240>)
 80160c0:	695b      	ldr	r3, [r3, #20]
 80160c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80160c6:	2be0      	cmp	r3, #224	@ 0xe0
 80160c8:	d112      	bne.n	80160f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80160d0:	f003 0301 	and.w	r3, r3, #1
 80160d4:	b2db      	uxtb	r3, r3
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d007      	beq.n	80160ea <ip4_input+0xba>
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	3304      	adds	r3, #4
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d002      	beq.n	80160ea <ip4_input+0xba>
      netif = inp;
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	613b      	str	r3, [r7, #16]
 80160e8:	e02a      	b.n	8016140 <ip4_input+0x110>
    } else {
      netif = NULL;
 80160ea:	2300      	movs	r3, #0
 80160ec:	613b      	str	r3, [r7, #16]
 80160ee:	e027      	b.n	8016140 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80160f0:	6838      	ldr	r0, [r7, #0]
 80160f2:	f7ff ff73 	bl	8015fdc <ip4_input_accept>
 80160f6:	4603      	mov	r3, r0
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <ip4_input+0xd2>
      netif = inp;
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	613b      	str	r3, [r7, #16]
 8016100:	e01e      	b.n	8016140 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016102:	2300      	movs	r3, #0
 8016104:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016106:	4b5a      	ldr	r3, [pc, #360]	@ (8016270 <ip4_input+0x240>)
 8016108:	695b      	ldr	r3, [r3, #20]
 801610a:	b2db      	uxtb	r3, r3
 801610c:	2b7f      	cmp	r3, #127	@ 0x7f
 801610e:	d017      	beq.n	8016140 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016110:	4b58      	ldr	r3, [pc, #352]	@ (8016274 <ip4_input+0x244>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	613b      	str	r3, [r7, #16]
 8016116:	e00e      	b.n	8016136 <ip4_input+0x106>
          if (netif == inp) {
 8016118:	693a      	ldr	r2, [r7, #16]
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	429a      	cmp	r2, r3
 801611e:	d006      	beq.n	801612e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016120:	6938      	ldr	r0, [r7, #16]
 8016122:	f7ff ff5b 	bl	8015fdc <ip4_input_accept>
 8016126:	4603      	mov	r3, r0
 8016128:	2b00      	cmp	r3, #0
 801612a:	d108      	bne.n	801613e <ip4_input+0x10e>
 801612c:	e000      	b.n	8016130 <ip4_input+0x100>
            continue;
 801612e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016130:	693b      	ldr	r3, [r7, #16]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	613b      	str	r3, [r7, #16]
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d1ed      	bne.n	8016118 <ip4_input+0xe8>
 801613c:	e000      	b.n	8016140 <ip4_input+0x110>
            break;
 801613e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016140:	4b4b      	ldr	r3, [pc, #300]	@ (8016270 <ip4_input+0x240>)
 8016142:	691b      	ldr	r3, [r3, #16]
 8016144:	6839      	ldr	r1, [r7, #0]
 8016146:	4618      	mov	r0, r3
 8016148:	f000 f96e 	bl	8016428 <ip4_addr_isbroadcast_u32>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d105      	bne.n	801615e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016152:	4b47      	ldr	r3, [pc, #284]	@ (8016270 <ip4_input+0x240>)
 8016154:	691b      	ldr	r3, [r3, #16]
 8016156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801615a:	2be0      	cmp	r3, #224	@ 0xe0
 801615c:	d104      	bne.n	8016168 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f7f7 fc32 	bl	800d9c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016164:	2300      	movs	r3, #0
 8016166:	e07e      	b.n	8016266 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d104      	bne.n	8016178 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f7f7 fc2a 	bl	800d9c8 <pbuf_free>
    return ERR_OK;
 8016174:	2300      	movs	r3, #0
 8016176:	e076      	b.n	8016266 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016178:	697b      	ldr	r3, [r7, #20]
 801617a:	88db      	ldrh	r3, [r3, #6]
 801617c:	b29b      	uxth	r3, r3
 801617e:	461a      	mov	r2, r3
 8016180:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016184:	4013      	ands	r3, r2
 8016186:	2b00      	cmp	r3, #0
 8016188:	d00b      	beq.n	80161a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 fc92 	bl	8016ab4 <ip4_reass>
 8016190:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d101      	bne.n	801619c <ip4_input+0x16c>
      return ERR_OK;
 8016198:	2300      	movs	r3, #0
 801619a:	e064      	b.n	8016266 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80161a2:	4a33      	ldr	r2, [pc, #204]	@ (8016270 <ip4_input+0x240>)
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80161a8:	4a31      	ldr	r2, [pc, #196]	@ (8016270 <ip4_input+0x240>)
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80161ae:	4a30      	ldr	r2, [pc, #192]	@ (8016270 <ip4_input+0x240>)
 80161b0:	697b      	ldr	r3, [r7, #20]
 80161b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	f003 030f 	and.w	r3, r3, #15
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	461a      	mov	r2, r3
 80161c4:	4b2a      	ldr	r3, [pc, #168]	@ (8016270 <ip4_input+0x240>)
 80161c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80161c8:	89fb      	ldrh	r3, [r7, #14]
 80161ca:	4619      	mov	r1, r3
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f7f7 fb75 	bl	800d8bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80161d2:	697b      	ldr	r3, [r7, #20]
 80161d4:	7a5b      	ldrb	r3, [r3, #9]
 80161d6:	2b11      	cmp	r3, #17
 80161d8:	d006      	beq.n	80161e8 <ip4_input+0x1b8>
 80161da:	2b11      	cmp	r3, #17
 80161dc:	dc13      	bgt.n	8016206 <ip4_input+0x1d6>
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d00c      	beq.n	80161fc <ip4_input+0x1cc>
 80161e2:	2b06      	cmp	r3, #6
 80161e4:	d005      	beq.n	80161f2 <ip4_input+0x1c2>
 80161e6:	e00e      	b.n	8016206 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80161e8:	6839      	ldr	r1, [r7, #0]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f7fe f970 	bl	80144d0 <udp_input>
        break;
 80161f0:	e026      	b.n	8016240 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80161f2:	6839      	ldr	r1, [r7, #0]
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f7f9 fd2f 	bl	800fc58 <tcp_input>
        break;
 80161fa:	e021      	b.n	8016240 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80161fc:	6839      	ldr	r1, [r7, #0]
 80161fe:	6878      	ldr	r0, [r7, #4]
 8016200:	f7ff fcee 	bl	8015be0 <icmp_input>
        break;
 8016204:	e01c      	b.n	8016240 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016206:	4b1a      	ldr	r3, [pc, #104]	@ (8016270 <ip4_input+0x240>)
 8016208:	695b      	ldr	r3, [r3, #20]
 801620a:	6939      	ldr	r1, [r7, #16]
 801620c:	4618      	mov	r0, r3
 801620e:	f000 f90b 	bl	8016428 <ip4_addr_isbroadcast_u32>
 8016212:	4603      	mov	r3, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	d10f      	bne.n	8016238 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016218:	4b15      	ldr	r3, [pc, #84]	@ (8016270 <ip4_input+0x240>)
 801621a:	695b      	ldr	r3, [r3, #20]
 801621c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016220:	2be0      	cmp	r3, #224	@ 0xe0
 8016222:	d009      	beq.n	8016238 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016228:	4619      	mov	r1, r3
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7f7 fbb9 	bl	800d9a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016230:	2102      	movs	r1, #2
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f7ff fdd8 	bl	8015de8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7f7 fbc5 	bl	800d9c8 <pbuf_free>
        break;
 801623e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016240:	4b0b      	ldr	r3, [pc, #44]	@ (8016270 <ip4_input+0x240>)
 8016242:	2200      	movs	r2, #0
 8016244:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016246:	4b0a      	ldr	r3, [pc, #40]	@ (8016270 <ip4_input+0x240>)
 8016248:	2200      	movs	r2, #0
 801624a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801624c:	4b08      	ldr	r3, [pc, #32]	@ (8016270 <ip4_input+0x240>)
 801624e:	2200      	movs	r2, #0
 8016250:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016252:	4b07      	ldr	r3, [pc, #28]	@ (8016270 <ip4_input+0x240>)
 8016254:	2200      	movs	r2, #0
 8016256:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016258:	4b05      	ldr	r3, [pc, #20]	@ (8016270 <ip4_input+0x240>)
 801625a:	2200      	movs	r2, #0
 801625c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801625e:	4b04      	ldr	r3, [pc, #16]	@ (8016270 <ip4_input+0x240>)
 8016260:	2200      	movs	r2, #0
 8016262:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016264:	2300      	movs	r3, #0
}
 8016266:	4618      	mov	r0, r3
 8016268:	3718      	adds	r7, #24
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
 801626e:	bf00      	nop
 8016270:	2000b944 	.word	0x2000b944
 8016274:	2000f08c 	.word	0x2000f08c

08016278 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b08a      	sub	sp, #40	@ 0x28
 801627c:	af04      	add	r7, sp, #16
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	60b9      	str	r1, [r7, #8]
 8016282:	607a      	str	r2, [r7, #4]
 8016284:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d009      	beq.n	80162a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016290:	68bb      	ldr	r3, [r7, #8]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d003      	beq.n	801629e <ip4_output_if+0x26>
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d102      	bne.n	80162a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a0:	3304      	adds	r3, #4
 80162a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80162a4:	78fa      	ldrb	r2, [r7, #3]
 80162a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a8:	9302      	str	r3, [sp, #8]
 80162aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80162ae:	9301      	str	r3, [sp, #4]
 80162b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80162b4:	9300      	str	r3, [sp, #0]
 80162b6:	4613      	mov	r3, r2
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	6979      	ldr	r1, [r7, #20]
 80162bc:	68f8      	ldr	r0, [r7, #12]
 80162be:	f000 f805 	bl	80162cc <ip4_output_if_src>
 80162c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3718      	adds	r7, #24
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b088      	sub	sp, #32
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	60f8      	str	r0, [r7, #12]
 80162d4:	60b9      	str	r1, [r7, #8]
 80162d6:	607a      	str	r2, [r7, #4]
 80162d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	7b9b      	ldrb	r3, [r3, #14]
 80162de:	2b01      	cmp	r3, #1
 80162e0:	d006      	beq.n	80162f0 <ip4_output_if_src+0x24>
 80162e2:	4b4b      	ldr	r3, [pc, #300]	@ (8016410 <ip4_output_if_src+0x144>)
 80162e4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80162e8:	494a      	ldr	r1, [pc, #296]	@ (8016414 <ip4_output_if_src+0x148>)
 80162ea:	484b      	ldr	r0, [pc, #300]	@ (8016418 <ip4_output_if_src+0x14c>)
 80162ec:	f001 fad4 	bl	8017898 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d060      	beq.n	80163b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80162f6:	2314      	movs	r3, #20
 80162f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80162fa:	2114      	movs	r1, #20
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f7f7 facd 	bl	800d89c <pbuf_add_header>
 8016302:	4603      	mov	r3, r0
 8016304:	2b00      	cmp	r3, #0
 8016306:	d002      	beq.n	801630e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016308:	f06f 0301 	mvn.w	r3, #1
 801630c:	e07c      	b.n	8016408 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	895b      	ldrh	r3, [r3, #10]
 8016318:	2b13      	cmp	r3, #19
 801631a:	d806      	bhi.n	801632a <ip4_output_if_src+0x5e>
 801631c:	4b3c      	ldr	r3, [pc, #240]	@ (8016410 <ip4_output_if_src+0x144>)
 801631e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016322:	493e      	ldr	r1, [pc, #248]	@ (801641c <ip4_output_if_src+0x150>)
 8016324:	483c      	ldr	r0, [pc, #240]	@ (8016418 <ip4_output_if_src+0x14c>)
 8016326:	f001 fab7 	bl	8017898 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	78fa      	ldrb	r2, [r7, #3]
 801632e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016330:	69fb      	ldr	r3, [r7, #28]
 8016332:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016336:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	69fb      	ldr	r3, [r7, #28]
 801633e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016340:	8b7b      	ldrh	r3, [r7, #26]
 8016342:	089b      	lsrs	r3, r3, #2
 8016344:	b29b      	uxth	r3, r3
 8016346:	b2db      	uxtb	r3, r3
 8016348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801634c:	b2da      	uxtb	r2, r3
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016358:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	891b      	ldrh	r3, [r3, #8]
 801635e:	4618      	mov	r0, r3
 8016360:	f7f5 ff0a 	bl	800c178 <lwip_htons>
 8016364:	4603      	mov	r3, r0
 8016366:	461a      	mov	r2, r3
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801636c:	69fb      	ldr	r3, [r7, #28]
 801636e:	2200      	movs	r2, #0
 8016370:	719a      	strb	r2, [r3, #6]
 8016372:	2200      	movs	r2, #0
 8016374:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016376:	4b2a      	ldr	r3, [pc, #168]	@ (8016420 <ip4_output_if_src+0x154>)
 8016378:	881b      	ldrh	r3, [r3, #0]
 801637a:	4618      	mov	r0, r3
 801637c:	f7f5 fefc 	bl	800c178 <lwip_htons>
 8016380:	4603      	mov	r3, r0
 8016382:	461a      	mov	r2, r3
 8016384:	69fb      	ldr	r3, [r7, #28]
 8016386:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016388:	4b25      	ldr	r3, [pc, #148]	@ (8016420 <ip4_output_if_src+0x154>)
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	3301      	adds	r3, #1
 801638e:	b29a      	uxth	r2, r3
 8016390:	4b23      	ldr	r3, [pc, #140]	@ (8016420 <ip4_output_if_src+0x154>)
 8016392:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d104      	bne.n	80163a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801639a:	4b22      	ldr	r3, [pc, #136]	@ (8016424 <ip4_output_if_src+0x158>)
 801639c:	681a      	ldr	r2, [r3, #0]
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	60da      	str	r2, [r3, #12]
 80163a2:	e003      	b.n	80163ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	681a      	ldr	r2, [r3, #0]
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	2200      	movs	r2, #0
 80163b0:	729a      	strb	r2, [r3, #10]
 80163b2:	2200      	movs	r2, #0
 80163b4:	72da      	strb	r2, [r3, #11]
 80163b6:	e00f      	b.n	80163d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	895b      	ldrh	r3, [r3, #10]
 80163bc:	2b13      	cmp	r3, #19
 80163be:	d802      	bhi.n	80163c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80163c0:	f06f 0301 	mvn.w	r3, #1
 80163c4:	e020      	b.n	8016408 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	691b      	ldr	r3, [r3, #16]
 80163d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80163d2:	f107 0314 	add.w	r3, r7, #20
 80163d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80163d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d00c      	beq.n	80163fa <ip4_output_if_src+0x12e>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	891a      	ldrh	r2, [r3, #8]
 80163e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d906      	bls.n	80163fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	f000 fd53 	bl	8016e9c <ip4_frag>
 80163f6:	4603      	mov	r3, r0
 80163f8:	e006      	b.n	8016408 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80163fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163fc:	695b      	ldr	r3, [r3, #20]
 80163fe:	687a      	ldr	r2, [r7, #4]
 8016400:	68f9      	ldr	r1, [r7, #12]
 8016402:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016404:	4798      	blx	r3
 8016406:	4603      	mov	r3, r0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3720      	adds	r7, #32
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	0801c0a4 	.word	0x0801c0a4
 8016414:	0801c0d8 	.word	0x0801c0d8
 8016418:	0801c0e4 	.word	0x0801c0e4
 801641c:	0801c10c 	.word	0x0801c10c
 8016420:	2000f1ea 	.word	0x2000f1ea
 8016424:	0801d1f0 	.word	0x0801d1f0

08016428 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016428:	b480      	push	{r7}
 801642a:	b085      	sub	sp, #20
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801643c:	d002      	beq.n	8016444 <ip4_addr_isbroadcast_u32+0x1c>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d101      	bne.n	8016448 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016444:	2301      	movs	r3, #1
 8016446:	e02a      	b.n	801649e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801644e:	f003 0302 	and.w	r3, r3, #2
 8016452:	2b00      	cmp	r3, #0
 8016454:	d101      	bne.n	801645a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016456:	2300      	movs	r3, #0
 8016458:	e021      	b.n	801649e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	3304      	adds	r3, #4
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	429a      	cmp	r2, r3
 8016464:	d101      	bne.n	801646a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016466:	2300      	movs	r3, #0
 8016468:	e019      	b.n	801649e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	3304      	adds	r3, #4
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	405a      	eors	r2, r3
 8016474:	683b      	ldr	r3, [r7, #0]
 8016476:	3308      	adds	r3, #8
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	4013      	ands	r3, r2
 801647c:	2b00      	cmp	r3, #0
 801647e:	d10d      	bne.n	801649c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016480:	683b      	ldr	r3, [r7, #0]
 8016482:	3308      	adds	r3, #8
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	43da      	mvns	r2, r3
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	3308      	adds	r3, #8
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016494:	429a      	cmp	r2, r3
 8016496:	d101      	bne.n	801649c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016498:	2301      	movs	r3, #1
 801649a:	e000      	b.n	801649e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801649c:	2300      	movs	r3, #0
  }
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3714      	adds	r7, #20
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr
	...

080164ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b084      	sub	sp, #16
 80164b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80164b2:	2300      	movs	r3, #0
 80164b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80164b6:	4b12      	ldr	r3, [pc, #72]	@ (8016500 <ip_reass_tmr+0x54>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80164bc:	e018      	b.n	80164f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	7fdb      	ldrb	r3, [r3, #31]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d00b      	beq.n	80164de <ip_reass_tmr+0x32>
      r->timer--;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	7fdb      	ldrb	r3, [r3, #31]
 80164ca:	3b01      	subs	r3, #1
 80164cc:	b2da      	uxtb	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	60fb      	str	r3, [r7, #12]
 80164dc:	e008      	b.n	80164f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80164e8:	68b9      	ldr	r1, [r7, #8]
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f000 f80a 	bl	8016504 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d1e3      	bne.n	80164be <ip_reass_tmr+0x12>
    }
  }
}
 80164f6:	bf00      	nop
 80164f8:	bf00      	nop
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}
 8016500:	2000f1ec 	.word	0x2000f1ec

08016504 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b088      	sub	sp, #32
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
 801650c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801650e:	2300      	movs	r3, #0
 8016510:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	429a      	cmp	r2, r3
 8016518:	d105      	bne.n	8016526 <ip_reass_free_complete_datagram+0x22>
 801651a:	4b45      	ldr	r3, [pc, #276]	@ (8016630 <ip_reass_free_complete_datagram+0x12c>)
 801651c:	22ab      	movs	r2, #171	@ 0xab
 801651e:	4945      	ldr	r1, [pc, #276]	@ (8016634 <ip_reass_free_complete_datagram+0x130>)
 8016520:	4845      	ldr	r0, [pc, #276]	@ (8016638 <ip_reass_free_complete_datagram+0x134>)
 8016522:	f001 f9b9 	bl	8017898 <iprintf>
  if (prev != NULL) {
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d00a      	beq.n	8016542 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	429a      	cmp	r2, r3
 8016534:	d005      	beq.n	8016542 <ip_reass_free_complete_datagram+0x3e>
 8016536:	4b3e      	ldr	r3, [pc, #248]	@ (8016630 <ip_reass_free_complete_datagram+0x12c>)
 8016538:	22ad      	movs	r2, #173	@ 0xad
 801653a:	4940      	ldr	r1, [pc, #256]	@ (801663c <ip_reass_free_complete_datagram+0x138>)
 801653c:	483e      	ldr	r0, [pc, #248]	@ (8016638 <ip_reass_free_complete_datagram+0x134>)
 801653e:	f001 f9ab 	bl	8017898 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	889b      	ldrh	r3, [r3, #4]
 801654e:	b29b      	uxth	r3, r3
 8016550:	2b00      	cmp	r3, #0
 8016552:	d12a      	bne.n	80165aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	6858      	ldr	r0, [r3, #4]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	3308      	adds	r3, #8
 801656a:	2214      	movs	r2, #20
 801656c:	4619      	mov	r1, r3
 801656e:	f001 fb1c 	bl	8017baa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016572:	2101      	movs	r1, #1
 8016574:	69b8      	ldr	r0, [r7, #24]
 8016576:	f7ff fc47 	bl	8015e08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801657a:	69b8      	ldr	r0, [r7, #24]
 801657c:	f7f7 fab2 	bl	800dae4 <pbuf_clen>
 8016580:	4603      	mov	r3, r0
 8016582:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016584:	8bfa      	ldrh	r2, [r7, #30]
 8016586:	8a7b      	ldrh	r3, [r7, #18]
 8016588:	4413      	add	r3, r2
 801658a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801658e:	db05      	blt.n	801659c <ip_reass_free_complete_datagram+0x98>
 8016590:	4b27      	ldr	r3, [pc, #156]	@ (8016630 <ip_reass_free_complete_datagram+0x12c>)
 8016592:	22bc      	movs	r2, #188	@ 0xbc
 8016594:	492a      	ldr	r1, [pc, #168]	@ (8016640 <ip_reass_free_complete_datagram+0x13c>)
 8016596:	4828      	ldr	r0, [pc, #160]	@ (8016638 <ip_reass_free_complete_datagram+0x134>)
 8016598:	f001 f97e 	bl	8017898 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801659c:	8bfa      	ldrh	r2, [r7, #30]
 801659e:	8a7b      	ldrh	r3, [r7, #18]
 80165a0:	4413      	add	r3, r2
 80165a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80165a4:	69b8      	ldr	r0, [r7, #24]
 80165a6:	f7f7 fa0f 	bl	800d9c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80165b0:	e01f      	b.n	80165f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80165c2:	68f8      	ldr	r0, [r7, #12]
 80165c4:	f7f7 fa8e 	bl	800dae4 <pbuf_clen>
 80165c8:	4603      	mov	r3, r0
 80165ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80165cc:	8bfa      	ldrh	r2, [r7, #30]
 80165ce:	8a7b      	ldrh	r3, [r7, #18]
 80165d0:	4413      	add	r3, r2
 80165d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80165d6:	db05      	blt.n	80165e4 <ip_reass_free_complete_datagram+0xe0>
 80165d8:	4b15      	ldr	r3, [pc, #84]	@ (8016630 <ip_reass_free_complete_datagram+0x12c>)
 80165da:	22cc      	movs	r2, #204	@ 0xcc
 80165dc:	4918      	ldr	r1, [pc, #96]	@ (8016640 <ip_reass_free_complete_datagram+0x13c>)
 80165de:	4816      	ldr	r0, [pc, #88]	@ (8016638 <ip_reass_free_complete_datagram+0x134>)
 80165e0:	f001 f95a 	bl	8017898 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80165e4:	8bfa      	ldrh	r2, [r7, #30]
 80165e6:	8a7b      	ldrh	r3, [r7, #18]
 80165e8:	4413      	add	r3, r2
 80165ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f7f7 f9eb 	bl	800d9c8 <pbuf_free>
  while (p != NULL) {
 80165f2:	69bb      	ldr	r3, [r7, #24]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d1dc      	bne.n	80165b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80165f8:	6839      	ldr	r1, [r7, #0]
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 f8c2 	bl	8016784 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016600:	4b10      	ldr	r3, [pc, #64]	@ (8016644 <ip_reass_free_complete_datagram+0x140>)
 8016602:	881b      	ldrh	r3, [r3, #0]
 8016604:	8bfa      	ldrh	r2, [r7, #30]
 8016606:	429a      	cmp	r2, r3
 8016608:	d905      	bls.n	8016616 <ip_reass_free_complete_datagram+0x112>
 801660a:	4b09      	ldr	r3, [pc, #36]	@ (8016630 <ip_reass_free_complete_datagram+0x12c>)
 801660c:	22d2      	movs	r2, #210	@ 0xd2
 801660e:	490e      	ldr	r1, [pc, #56]	@ (8016648 <ip_reass_free_complete_datagram+0x144>)
 8016610:	4809      	ldr	r0, [pc, #36]	@ (8016638 <ip_reass_free_complete_datagram+0x134>)
 8016612:	f001 f941 	bl	8017898 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016616:	4b0b      	ldr	r3, [pc, #44]	@ (8016644 <ip_reass_free_complete_datagram+0x140>)
 8016618:	881a      	ldrh	r2, [r3, #0]
 801661a:	8bfb      	ldrh	r3, [r7, #30]
 801661c:	1ad3      	subs	r3, r2, r3
 801661e:	b29a      	uxth	r2, r3
 8016620:	4b08      	ldr	r3, [pc, #32]	@ (8016644 <ip_reass_free_complete_datagram+0x140>)
 8016622:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016624:	8bfb      	ldrh	r3, [r7, #30]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3720      	adds	r7, #32
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	0801c13c 	.word	0x0801c13c
 8016634:	0801c178 	.word	0x0801c178
 8016638:	0801c184 	.word	0x0801c184
 801663c:	0801c1ac 	.word	0x0801c1ac
 8016640:	0801c1c0 	.word	0x0801c1c0
 8016644:	2000f1f0 	.word	0x2000f1f0
 8016648:	0801c1e0 	.word	0x0801c1e0

0801664c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b08a      	sub	sp, #40	@ 0x28
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016656:	2300      	movs	r3, #0
 8016658:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801665a:	2300      	movs	r3, #0
 801665c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801665e:	2300      	movs	r3, #0
 8016660:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016666:	2300      	movs	r3, #0
 8016668:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801666a:	4b28      	ldr	r3, [pc, #160]	@ (801670c <ip_reass_remove_oldest_datagram+0xc0>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016670:	e030      	b.n	80166d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016674:	695a      	ldr	r2, [r3, #20]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	429a      	cmp	r2, r3
 801667c:	d10c      	bne.n	8016698 <ip_reass_remove_oldest_datagram+0x4c>
 801667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016680:	699a      	ldr	r2, [r3, #24]
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	691b      	ldr	r3, [r3, #16]
 8016686:	429a      	cmp	r2, r3
 8016688:	d106      	bne.n	8016698 <ip_reass_remove_oldest_datagram+0x4c>
 801668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801668c:	899a      	ldrh	r2, [r3, #12]
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	889b      	ldrh	r3, [r3, #4]
 8016692:	b29b      	uxth	r3, r3
 8016694:	429a      	cmp	r2, r3
 8016696:	d014      	beq.n	80166c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	3301      	adds	r3, #1
 801669c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801669e:	6a3b      	ldr	r3, [r7, #32]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d104      	bne.n	80166ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80166a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80166a8:	69fb      	ldr	r3, [r7, #28]
 80166aa:	61bb      	str	r3, [r7, #24]
 80166ac:	e009      	b.n	80166c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80166ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b0:	7fda      	ldrb	r2, [r3, #31]
 80166b2:	6a3b      	ldr	r3, [r7, #32]
 80166b4:	7fdb      	ldrb	r3, [r3, #31]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d803      	bhi.n	80166c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80166c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d001      	beq.n	80166ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80166ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80166ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80166d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d1cb      	bne.n	8016672 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80166da:	6a3b      	ldr	r3, [r7, #32]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d008      	beq.n	80166f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80166e0:	69b9      	ldr	r1, [r7, #24]
 80166e2:	6a38      	ldr	r0, [r7, #32]
 80166e4:	f7ff ff0e 	bl	8016504 <ip_reass_free_complete_datagram>
 80166e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80166ea:	697a      	ldr	r2, [r7, #20]
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	4413      	add	r3, r2
 80166f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80166f2:	697a      	ldr	r2, [r7, #20]
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	da02      	bge.n	8016700 <ip_reass_remove_oldest_datagram+0xb4>
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	dcac      	bgt.n	801665a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016700:	697b      	ldr	r3, [r7, #20]
}
 8016702:	4618      	mov	r0, r3
 8016704:	3728      	adds	r7, #40	@ 0x28
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	2000f1ec 	.word	0x2000f1ec

08016710 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b084      	sub	sp, #16
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801671a:	2004      	movs	r0, #4
 801671c:	f7f6 fa3a 	bl	800cb94 <memp_malloc>
 8016720:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d110      	bne.n	801674a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016728:	6839      	ldr	r1, [r7, #0]
 801672a:	6878      	ldr	r0, [r7, #4]
 801672c:	f7ff ff8e 	bl	801664c <ip_reass_remove_oldest_datagram>
 8016730:	4602      	mov	r2, r0
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	4293      	cmp	r3, r2
 8016736:	dc03      	bgt.n	8016740 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016738:	2004      	movs	r0, #4
 801673a:	f7f6 fa2b 	bl	800cb94 <memp_malloc>
 801673e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d101      	bne.n	801674a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016746:	2300      	movs	r3, #0
 8016748:	e016      	b.n	8016778 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801674a:	2220      	movs	r2, #32
 801674c:	2100      	movs	r1, #0
 801674e:	68f8      	ldr	r0, [r7, #12]
 8016750:	f001 f941 	bl	80179d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	220f      	movs	r2, #15
 8016758:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801675a:	4b09      	ldr	r3, [pc, #36]	@ (8016780 <ip_reass_enqueue_new_datagram+0x70>)
 801675c:	681a      	ldr	r2, [r3, #0]
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016762:	4a07      	ldr	r2, [pc, #28]	@ (8016780 <ip_reass_enqueue_new_datagram+0x70>)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	3308      	adds	r3, #8
 801676c:	2214      	movs	r2, #20
 801676e:	6879      	ldr	r1, [r7, #4]
 8016770:	4618      	mov	r0, r3
 8016772:	f001 fa1a 	bl	8017baa <memcpy>
  return ipr;
 8016776:	68fb      	ldr	r3, [r7, #12]
}
 8016778:	4618      	mov	r0, r3
 801677a:	3710      	adds	r7, #16
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	2000f1ec 	.word	0x2000f1ec

08016784 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
 801678c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801678e:	4b10      	ldr	r3, [pc, #64]	@ (80167d0 <ip_reass_dequeue_datagram+0x4c>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	429a      	cmp	r2, r3
 8016796:	d104      	bne.n	80167a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	4a0c      	ldr	r2, [pc, #48]	@ (80167d0 <ip_reass_dequeue_datagram+0x4c>)
 801679e:	6013      	str	r3, [r2, #0]
 80167a0:	e00d      	b.n	80167be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d106      	bne.n	80167b6 <ip_reass_dequeue_datagram+0x32>
 80167a8:	4b0a      	ldr	r3, [pc, #40]	@ (80167d4 <ip_reass_dequeue_datagram+0x50>)
 80167aa:	f240 1245 	movw	r2, #325	@ 0x145
 80167ae:	490a      	ldr	r1, [pc, #40]	@ (80167d8 <ip_reass_dequeue_datagram+0x54>)
 80167b0:	480a      	ldr	r0, [pc, #40]	@ (80167dc <ip_reass_dequeue_datagram+0x58>)
 80167b2:	f001 f871 	bl	8017898 <iprintf>
    prev->next = ipr->next;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80167be:	6879      	ldr	r1, [r7, #4]
 80167c0:	2004      	movs	r0, #4
 80167c2:	f7f6 fa5d 	bl	800cc80 <memp_free>
}
 80167c6:	bf00      	nop
 80167c8:	3708      	adds	r7, #8
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	2000f1ec 	.word	0x2000f1ec
 80167d4:	0801c13c 	.word	0x0801c13c
 80167d8:	0801c204 	.word	0x0801c204
 80167dc:	0801c184 	.word	0x0801c184

080167e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b08c      	sub	sp, #48	@ 0x30
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	60b9      	str	r1, [r7, #8]
 80167ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80167ec:	2300      	movs	r3, #0
 80167ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80167f0:	2301      	movs	r3, #1
 80167f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	685b      	ldr	r3, [r3, #4]
 80167f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	885b      	ldrh	r3, [r3, #2]
 80167fe:	b29b      	uxth	r3, r3
 8016800:	4618      	mov	r0, r3
 8016802:	f7f5 fcb9 	bl	800c178 <lwip_htons>
 8016806:	4603      	mov	r3, r0
 8016808:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	781b      	ldrb	r3, [r3, #0]
 801680e:	f003 030f 	and.w	r3, r3, #15
 8016812:	b2db      	uxtb	r3, r3
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016818:	7e7b      	ldrb	r3, [r7, #25]
 801681a:	b29b      	uxth	r3, r3
 801681c:	8b7a      	ldrh	r2, [r7, #26]
 801681e:	429a      	cmp	r2, r3
 8016820:	d202      	bcs.n	8016828 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016822:	f04f 33ff 	mov.w	r3, #4294967295
 8016826:	e135      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016828:	7e7b      	ldrb	r3, [r7, #25]
 801682a:	b29b      	uxth	r3, r3
 801682c:	8b7a      	ldrh	r2, [r7, #26]
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	88db      	ldrh	r3, [r3, #6]
 8016836:	b29b      	uxth	r3, r3
 8016838:	4618      	mov	r0, r3
 801683a:	f7f5 fc9d 	bl	800c178 <lwip_htons>
 801683e:	4603      	mov	r3, r0
 8016840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016844:	b29b      	uxth	r3, r3
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016852:	2200      	movs	r2, #0
 8016854:	701a      	strb	r2, [r3, #0]
 8016856:	2200      	movs	r2, #0
 8016858:	705a      	strb	r2, [r3, #1]
 801685a:	2200      	movs	r2, #0
 801685c:	709a      	strb	r2, [r3, #2]
 801685e:	2200      	movs	r2, #0
 8016860:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016864:	8afa      	ldrh	r2, [r7, #22]
 8016866:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016868:	8afa      	ldrh	r2, [r7, #22]
 801686a:	8b7b      	ldrh	r3, [r7, #26]
 801686c:	4413      	add	r3, r2
 801686e:	b29a      	uxth	r2, r3
 8016870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016872:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016876:	88db      	ldrh	r3, [r3, #6]
 8016878:	b29b      	uxth	r3, r3
 801687a:	8afa      	ldrh	r2, [r7, #22]
 801687c:	429a      	cmp	r2, r3
 801687e:	d902      	bls.n	8016886 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016880:	f04f 33ff 	mov.w	r3, #4294967295
 8016884:	e106      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	627b      	str	r3, [r7, #36]	@ 0x24
 801688c:	e068      	b.n	8016960 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016896:	889b      	ldrh	r3, [r3, #4]
 8016898:	b29a      	uxth	r2, r3
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	889b      	ldrh	r3, [r3, #4]
 801689e:	b29b      	uxth	r3, r3
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d235      	bcs.n	8016910 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80168a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80168aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d020      	beq.n	80168f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80168b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168b2:	889b      	ldrh	r3, [r3, #4]
 80168b4:	b29a      	uxth	r2, r3
 80168b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b8:	88db      	ldrh	r3, [r3, #6]
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	429a      	cmp	r2, r3
 80168be:	d307      	bcc.n	80168d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80168c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c2:	88db      	ldrh	r3, [r3, #6]
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	693b      	ldr	r3, [r7, #16]
 80168c8:	889b      	ldrh	r3, [r3, #4]
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d902      	bls.n	80168d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80168d0:	f04f 33ff 	mov.w	r3, #4294967295
 80168d4:	e0de      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80168d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168d8:	68ba      	ldr	r2, [r7, #8]
 80168da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80168dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168de:	88db      	ldrh	r3, [r3, #6]
 80168e0:	b29a      	uxth	r2, r3
 80168e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e4:	889b      	ldrh	r3, [r3, #4]
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d03d      	beq.n	8016968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80168ec:	2300      	movs	r3, #0
 80168ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80168f0:	e03a      	b.n	8016968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80168f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f4:	88db      	ldrh	r3, [r3, #6]
 80168f6:	b29a      	uxth	r2, r3
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	889b      	ldrh	r3, [r3, #4]
 80168fc:	b29b      	uxth	r3, r3
 80168fe:	429a      	cmp	r2, r3
 8016900:	d902      	bls.n	8016908 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016902:	f04f 33ff 	mov.w	r3, #4294967295
 8016906:	e0c5      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	68ba      	ldr	r2, [r7, #8]
 801690c:	605a      	str	r2, [r3, #4]
      break;
 801690e:	e02b      	b.n	8016968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016912:	889b      	ldrh	r3, [r3, #4]
 8016914:	b29a      	uxth	r2, r3
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	889b      	ldrh	r3, [r3, #4]
 801691a:	b29b      	uxth	r3, r3
 801691c:	429a      	cmp	r2, r3
 801691e:	d102      	bne.n	8016926 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016920:	f04f 33ff 	mov.w	r3, #4294967295
 8016924:	e0b6      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016928:	889b      	ldrh	r3, [r3, #4]
 801692a:	b29a      	uxth	r2, r3
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	88db      	ldrh	r3, [r3, #6]
 8016930:	b29b      	uxth	r3, r3
 8016932:	429a      	cmp	r2, r3
 8016934:	d202      	bcs.n	801693c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016936:	f04f 33ff 	mov.w	r3, #4294967295
 801693a:	e0ab      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801693e:	2b00      	cmp	r3, #0
 8016940:	d009      	beq.n	8016956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016944:	88db      	ldrh	r3, [r3, #6]
 8016946:	b29a      	uxth	r2, r3
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	889b      	ldrh	r3, [r3, #4]
 801694c:	b29b      	uxth	r3, r3
 801694e:	429a      	cmp	r2, r3
 8016950:	d001      	beq.n	8016956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016952:	2300      	movs	r3, #0
 8016954:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016962:	2b00      	cmp	r3, #0
 8016964:	d193      	bne.n	801688e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016966:	e000      	b.n	801696a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016968:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801696c:	2b00      	cmp	r3, #0
 801696e:	d12d      	bne.n	80169cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016972:	2b00      	cmp	r3, #0
 8016974:	d01c      	beq.n	80169b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016978:	88db      	ldrh	r3, [r3, #6]
 801697a:	b29a      	uxth	r2, r3
 801697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801697e:	889b      	ldrh	r3, [r3, #4]
 8016980:	b29b      	uxth	r3, r3
 8016982:	429a      	cmp	r2, r3
 8016984:	d906      	bls.n	8016994 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016986:	4b45      	ldr	r3, [pc, #276]	@ (8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016988:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801698c:	4944      	ldr	r1, [pc, #272]	@ (8016aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801698e:	4845      	ldr	r0, [pc, #276]	@ (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016990:	f000 ff82 	bl	8017898 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016996:	68ba      	ldr	r2, [r7, #8]
 8016998:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801699a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801699c:	88db      	ldrh	r3, [r3, #6]
 801699e:	b29a      	uxth	r2, r3
 80169a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80169a2:	889b      	ldrh	r3, [r3, #4]
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d010      	beq.n	80169cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80169aa:	2300      	movs	r3, #0
 80169ac:	623b      	str	r3, [r7, #32]
 80169ae:	e00d      	b.n	80169cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d006      	beq.n	80169c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80169b8:	4b38      	ldr	r3, [pc, #224]	@ (8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80169ba:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80169be:	493a      	ldr	r1, [pc, #232]	@ (8016aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80169c0:	4838      	ldr	r0, [pc, #224]	@ (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80169c2:	f000 ff69 	bl	8017898 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	68ba      	ldr	r2, [r7, #8]
 80169ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d105      	bne.n	80169de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	7f9b      	ldrb	r3, [r3, #30]
 80169d6:	f003 0301 	and.w	r3, r3, #1
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d059      	beq.n	8016a92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80169de:	6a3b      	ldr	r3, [r7, #32]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d04f      	beq.n	8016a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	685b      	ldr	r3, [r3, #4]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d006      	beq.n	80169fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	685b      	ldr	r3, [r3, #4]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	889b      	ldrh	r3, [r3, #4]
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d002      	beq.n	8016a00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80169fa:	2300      	movs	r3, #0
 80169fc:	623b      	str	r3, [r7, #32]
 80169fe:	e041      	b.n	8016a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a02:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016a0a:	e012      	b.n	8016a32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0e:	685b      	ldr	r3, [r3, #4]
 8016a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a14:	88db      	ldrh	r3, [r3, #6]
 8016a16:	b29a      	uxth	r2, r3
 8016a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a1a:	889b      	ldrh	r3, [r3, #4]
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d002      	beq.n	8016a28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016a22:	2300      	movs	r3, #0
 8016a24:	623b      	str	r3, [r7, #32]
            break;
 8016a26:	e007      	b.n	8016a38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d1e9      	bne.n	8016a0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016a38:	6a3b      	ldr	r3, [r7, #32]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d022      	beq.n	8016a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016a46:	4b15      	ldr	r3, [pc, #84]	@ (8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a48:	f240 12df 	movw	r2, #479	@ 0x1df
 8016a4c:	4917      	ldr	r1, [pc, #92]	@ (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016a4e:	4815      	ldr	r0, [pc, #84]	@ (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a50:	f000 ff22 	bl	8017898 <iprintf>
          LWIP_ASSERT("sanity check",
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	685b      	ldr	r3, [r3, #4]
 8016a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d106      	bne.n	8016a6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016a60:	4b0e      	ldr	r3, [pc, #56]	@ (8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a62:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016a66:	4911      	ldr	r1, [pc, #68]	@ (8016aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016a68:	480e      	ldr	r0, [pc, #56]	@ (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a6a:	f000 ff15 	bl	8017898 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d006      	beq.n	8016a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016a76:	4b09      	ldr	r3, [pc, #36]	@ (8016a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016a78:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016a7c:	490c      	ldr	r1, [pc, #48]	@ (8016ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016a7e:	4809      	ldr	r0, [pc, #36]	@ (8016aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016a80:	f000 ff0a 	bl	8017898 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016a84:	6a3b      	ldr	r3, [r7, #32]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	bf14      	ite	ne
 8016a8a:	2301      	movne	r3, #1
 8016a8c:	2300      	moveq	r3, #0
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	e000      	b.n	8016a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3730      	adds	r7, #48	@ 0x30
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	0801c13c 	.word	0x0801c13c
 8016aa0:	0801c220 	.word	0x0801c220
 8016aa4:	0801c184 	.word	0x0801c184
 8016aa8:	0801c240 	.word	0x0801c240
 8016aac:	0801c278 	.word	0x0801c278
 8016ab0:	0801c288 	.word	0x0801c288

08016ab4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b08e      	sub	sp, #56	@ 0x38
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	f003 030f 	and.w	r3, r3, #15
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	b2db      	uxtb	r3, r3
 8016ad0:	2b14      	cmp	r3, #20
 8016ad2:	f040 8171 	bne.w	8016db8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ad8:	88db      	ldrh	r3, [r3, #6]
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	4618      	mov	r0, r3
 8016ade:	f7f5 fb4b 	bl	800c178 <lwip_htons>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	00db      	lsls	r3, r3, #3
 8016aec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016af0:	885b      	ldrh	r3, [r3, #2]
 8016af2:	b29b      	uxth	r3, r3
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7f5 fb3f 	bl	800c178 <lwip_htons>
 8016afa:	4603      	mov	r3, r0
 8016afc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	f003 030f 	and.w	r3, r3, #15
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016b16:	429a      	cmp	r2, r3
 8016b18:	f0c0 8150 	bcc.w	8016dbc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f7f6 ffdb 	bl	800dae4 <pbuf_clen>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016b32:	4b8c      	ldr	r3, [pc, #560]	@ (8016d64 <ip4_reass+0x2b0>)
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	461a      	mov	r2, r3
 8016b38:	8c3b      	ldrh	r3, [r7, #32]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	2b0a      	cmp	r3, #10
 8016b3e:	dd10      	ble.n	8016b62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016b40:	8c3b      	ldrh	r3, [r7, #32]
 8016b42:	4619      	mov	r1, r3
 8016b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b46:	f7ff fd81 	bl	801664c <ip_reass_remove_oldest_datagram>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	f000 8137 	beq.w	8016dc0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016b52:	4b84      	ldr	r3, [pc, #528]	@ (8016d64 <ip4_reass+0x2b0>)
 8016b54:	881b      	ldrh	r3, [r3, #0]
 8016b56:	461a      	mov	r2, r3
 8016b58:	8c3b      	ldrh	r3, [r7, #32]
 8016b5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016b5c:	2b0a      	cmp	r3, #10
 8016b5e:	f300 812f 	bgt.w	8016dc0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016b62:	4b81      	ldr	r3, [pc, #516]	@ (8016d68 <ip4_reass+0x2b4>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8016b68:	e015      	b.n	8016b96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b6c:	695a      	ldr	r2, [r3, #20]
 8016b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b70:	68db      	ldr	r3, [r3, #12]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d10c      	bne.n	8016b90 <ip4_reass+0xdc>
 8016b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b78:	699a      	ldr	r2, [r3, #24]
 8016b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b7c:	691b      	ldr	r3, [r3, #16]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d106      	bne.n	8016b90 <ip4_reass+0xdc>
 8016b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b84:	899a      	ldrh	r2, [r3, #12]
 8016b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b88:	889b      	ldrh	r3, [r3, #4]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d006      	beq.n	8016b9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8016b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1e6      	bne.n	8016b6a <ip4_reass+0xb6>
 8016b9c:	e000      	b.n	8016ba0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016b9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d109      	bne.n	8016bba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016ba6:	8c3b      	ldrh	r3, [r7, #32]
 8016ba8:	4619      	mov	r1, r3
 8016baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016bac:	f7ff fdb0 	bl	8016710 <ip_reass_enqueue_new_datagram>
 8016bb0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d11c      	bne.n	8016bf2 <ip4_reass+0x13e>
      goto nullreturn;
 8016bb8:	e105      	b.n	8016dc6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bbc:	88db      	ldrh	r3, [r3, #6]
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f5 fad9 	bl	800c178 <lwip_htons>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d110      	bne.n	8016bf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bd2:	89db      	ldrh	r3, [r3, #14]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f5 facf 	bl	800c178 <lwip_htons>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d006      	beq.n	8016bf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016be6:	3308      	adds	r3, #8
 8016be8:	2214      	movs	r2, #20
 8016bea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016bec:	4618      	mov	r0, r3
 8016bee:	f000 ffdc 	bl	8017baa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bf4:	88db      	ldrh	r3, [r3, #6]
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	f003 0320 	and.w	r3, r3, #32
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	bf0c      	ite	eq
 8016c00:	2301      	moveq	r3, #1
 8016c02:	2300      	movne	r3, #0
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016c08:	69fb      	ldr	r3, [r7, #28]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d00e      	beq.n	8016c2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016c10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c12:	4413      	add	r3, r2
 8016c14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016c16:	8b7a      	ldrh	r2, [r7, #26]
 8016c18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	f0c0 80a0 	bcc.w	8016d60 <ip4_reass+0x2ac>
 8016c20:	8b7b      	ldrh	r3, [r7, #26]
 8016c22:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016c26:	4293      	cmp	r3, r2
 8016c28:	f200 809a 	bhi.w	8016d60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016c2c:	69fa      	ldr	r2, [r7, #28]
 8016c2e:	6879      	ldr	r1, [r7, #4]
 8016c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016c32:	f7ff fdd5 	bl	80167e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016c36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c3e:	f000 809b 	beq.w	8016d78 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016c42:	4b48      	ldr	r3, [pc, #288]	@ (8016d64 <ip4_reass+0x2b0>)
 8016c44:	881a      	ldrh	r2, [r3, #0]
 8016c46:	8c3b      	ldrh	r3, [r7, #32]
 8016c48:	4413      	add	r3, r2
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	4b45      	ldr	r3, [pc, #276]	@ (8016d64 <ip4_reass+0x2b0>)
 8016c4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d00d      	beq.n	8016c72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016c56:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016c58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c5a:	4413      	add	r3, r2
 8016c5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c60:	8a7a      	ldrh	r2, [r7, #18]
 8016c62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c66:	7f9b      	ldrb	r3, [r3, #30]
 8016c68:	f043 0301 	orr.w	r3, r3, #1
 8016c6c:	b2da      	uxtb	r2, r3
 8016c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d171      	bne.n	8016d5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c7a:	8b9b      	ldrh	r3, [r3, #28]
 8016c7c:	3314      	adds	r3, #20
 8016c7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c82:	685b      	ldr	r3, [r3, #4]
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c94:	3308      	adds	r3, #8
 8016c96:	2214      	movs	r2, #20
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c9c:	f000 ff85 	bl	8017baa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016ca0:	8a3b      	ldrh	r3, [r7, #16]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f7f5 fa68 	bl	800c178 <lwip_htons>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	461a      	mov	r2, r3
 8016cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	719a      	strb	r2, [r3, #6]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	729a      	strb	r2, [r3, #10]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cc6:	685b      	ldr	r3, [r3, #4]
 8016cc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016cca:	e00d      	b.n	8016ce8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016cd2:	2114      	movs	r1, #20
 8016cd4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016cd6:	f7f6 fdf1 	bl	800d8bc <pbuf_remove_header>
      pbuf_cat(p, r);
 8016cda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016cdc:	6878      	ldr	r0, [r7, #4]
 8016cde:	f7f6 ff41 	bl	800db64 <pbuf_cat>
      r = iprh->next_pbuf;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1ee      	bne.n	8016ccc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016cee:	4b1e      	ldr	r3, [pc, #120]	@ (8016d68 <ip4_reass+0x2b4>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d102      	bne.n	8016cfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016cfc:	e010      	b.n	8016d20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8016d68 <ip4_reass+0x2b4>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016d04:	e007      	b.n	8016d16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d006      	beq.n	8016d1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d1f4      	bne.n	8016d06 <ip4_reass+0x252>
 8016d1c:	e000      	b.n	8016d20 <ip4_reass+0x26c>
          break;
 8016d1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016d22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016d24:	f7ff fd2e 	bl	8016784 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f7f6 fedb 	bl	800dae4 <pbuf_clen>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016d32:	4b0c      	ldr	r3, [pc, #48]	@ (8016d64 <ip4_reass+0x2b0>)
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	8c3a      	ldrh	r2, [r7, #32]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d906      	bls.n	8016d4a <ip4_reass+0x296>
 8016d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8016d6c <ip4_reass+0x2b8>)
 8016d3e:	f240 229b 	movw	r2, #667	@ 0x29b
 8016d42:	490b      	ldr	r1, [pc, #44]	@ (8016d70 <ip4_reass+0x2bc>)
 8016d44:	480b      	ldr	r0, [pc, #44]	@ (8016d74 <ip4_reass+0x2c0>)
 8016d46:	f000 fda7 	bl	8017898 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016d4a:	4b06      	ldr	r3, [pc, #24]	@ (8016d64 <ip4_reass+0x2b0>)
 8016d4c:	881a      	ldrh	r2, [r3, #0]
 8016d4e:	8c3b      	ldrh	r3, [r7, #32]
 8016d50:	1ad3      	subs	r3, r2, r3
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	4b03      	ldr	r3, [pc, #12]	@ (8016d64 <ip4_reass+0x2b0>)
 8016d56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	e038      	b.n	8016dce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e036      	b.n	8016dce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016d60:	bf00      	nop
 8016d62:	e00a      	b.n	8016d7a <ip4_reass+0x2c6>
 8016d64:	2000f1f0 	.word	0x2000f1f0
 8016d68:	2000f1ec 	.word	0x2000f1ec
 8016d6c:	0801c13c 	.word	0x0801c13c
 8016d70:	0801c2ac 	.word	0x0801c2ac
 8016d74:	0801c184 	.word	0x0801c184
    goto nullreturn_ipr;
 8016d78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d106      	bne.n	8016d8e <ip4_reass+0x2da>
 8016d80:	4b15      	ldr	r3, [pc, #84]	@ (8016dd8 <ip4_reass+0x324>)
 8016d82:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016d86:	4915      	ldr	r1, [pc, #84]	@ (8016ddc <ip4_reass+0x328>)
 8016d88:	4815      	ldr	r0, [pc, #84]	@ (8016de0 <ip4_reass+0x32c>)
 8016d8a:	f000 fd85 	bl	8017898 <iprintf>
  if (ipr->p == NULL) {
 8016d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d116      	bne.n	8016dc4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016d96:	4b13      	ldr	r3, [pc, #76]	@ (8016de4 <ip4_reass+0x330>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d006      	beq.n	8016dae <ip4_reass+0x2fa>
 8016da0:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd8 <ip4_reass+0x324>)
 8016da2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016da6:	4910      	ldr	r1, [pc, #64]	@ (8016de8 <ip4_reass+0x334>)
 8016da8:	480d      	ldr	r0, [pc, #52]	@ (8016de0 <ip4_reass+0x32c>)
 8016daa:	f000 fd75 	bl	8017898 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016dae:	2100      	movs	r1, #0
 8016db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016db2:	f7ff fce7 	bl	8016784 <ip_reass_dequeue_datagram>
 8016db6:	e006      	b.n	8016dc6 <ip4_reass+0x312>
    goto nullreturn;
 8016db8:	bf00      	nop
 8016dba:	e004      	b.n	8016dc6 <ip4_reass+0x312>
    goto nullreturn;
 8016dbc:	bf00      	nop
 8016dbe:	e002      	b.n	8016dc6 <ip4_reass+0x312>
      goto nullreturn;
 8016dc0:	bf00      	nop
 8016dc2:	e000      	b.n	8016dc6 <ip4_reass+0x312>
  }

nullreturn:
 8016dc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f7f6 fdfe 	bl	800d9c8 <pbuf_free>
  return NULL;
 8016dcc:	2300      	movs	r3, #0
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3738      	adds	r7, #56	@ 0x38
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	0801c13c 	.word	0x0801c13c
 8016ddc:	0801c2c8 	.word	0x0801c2c8
 8016de0:	0801c184 	.word	0x0801c184
 8016de4:	2000f1ec 	.word	0x2000f1ec
 8016de8:	0801c2d4 	.word	0x0801c2d4

08016dec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016df0:	2005      	movs	r0, #5
 8016df2:	f7f5 fecf 	bl	800cb94 <memp_malloc>
 8016df6:	4603      	mov	r3, r0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b082      	sub	sp, #8
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d106      	bne.n	8016e18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016e0a:	4b07      	ldr	r3, [pc, #28]	@ (8016e28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016e0c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016e10:	4906      	ldr	r1, [pc, #24]	@ (8016e2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016e12:	4807      	ldr	r0, [pc, #28]	@ (8016e30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016e14:	f000 fd40 	bl	8017898 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016e18:	6879      	ldr	r1, [r7, #4]
 8016e1a:	2005      	movs	r0, #5
 8016e1c:	f7f5 ff30 	bl	800cc80 <memp_free>
}
 8016e20:	bf00      	nop
 8016e22:	3708      	adds	r7, #8
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	0801c13c 	.word	0x0801c13c
 8016e2c:	0801c2f4 	.word	0x0801c2f4
 8016e30:	0801c184 	.word	0x0801c184

08016e34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d106      	bne.n	8016e54 <ipfrag_free_pbuf_custom+0x20>
 8016e46:	4b11      	ldr	r3, [pc, #68]	@ (8016e8c <ipfrag_free_pbuf_custom+0x58>)
 8016e48:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016e4c:	4910      	ldr	r1, [pc, #64]	@ (8016e90 <ipfrag_free_pbuf_custom+0x5c>)
 8016e4e:	4811      	ldr	r0, [pc, #68]	@ (8016e94 <ipfrag_free_pbuf_custom+0x60>)
 8016e50:	f000 fd22 	bl	8017898 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016e54:	68fa      	ldr	r2, [r7, #12]
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	d006      	beq.n	8016e6a <ipfrag_free_pbuf_custom+0x36>
 8016e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8016e8c <ipfrag_free_pbuf_custom+0x58>)
 8016e5e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016e62:	490d      	ldr	r1, [pc, #52]	@ (8016e98 <ipfrag_free_pbuf_custom+0x64>)
 8016e64:	480b      	ldr	r0, [pc, #44]	@ (8016e94 <ipfrag_free_pbuf_custom+0x60>)
 8016e66:	f000 fd17 	bl	8017898 <iprintf>
  if (pcr->original != NULL) {
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	695b      	ldr	r3, [r3, #20]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d004      	beq.n	8016e7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	695b      	ldr	r3, [r3, #20]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7f6 fda6 	bl	800d9c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016e7c:	68f8      	ldr	r0, [r7, #12]
 8016e7e:	f7ff ffbd 	bl	8016dfc <ip_frag_free_pbuf_custom_ref>
}
 8016e82:	bf00      	nop
 8016e84:	3710      	adds	r7, #16
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}
 8016e8a:	bf00      	nop
 8016e8c:	0801c13c 	.word	0x0801c13c
 8016e90:	0801c300 	.word	0x0801c300
 8016e94:	0801c184 	.word	0x0801c184
 8016e98:	0801c30c 	.word	0x0801c30c

08016e9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b094      	sub	sp, #80	@ 0x50
 8016ea0:	af02      	add	r7, sp, #8
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016eae:	68bb      	ldr	r3, [r7, #8]
 8016eb0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016eb2:	3b14      	subs	r3, #20
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	da00      	bge.n	8016eba <ip4_frag+0x1e>
 8016eb8:	3307      	adds	r3, #7
 8016eba:	10db      	asrs	r3, r3, #3
 8016ebc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016ebe:	2314      	movs	r3, #20
 8016ec0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	685b      	ldr	r3, [r3, #4]
 8016ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	f003 030f 	and.w	r3, r3, #15
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	2b14      	cmp	r3, #20
 8016edc:	d002      	beq.n	8016ee4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016ede:	f06f 0305 	mvn.w	r3, #5
 8016ee2:	e110      	b.n	8017106 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	895b      	ldrh	r3, [r3, #10]
 8016ee8:	2b13      	cmp	r3, #19
 8016eea:	d809      	bhi.n	8016f00 <ip4_frag+0x64>
 8016eec:	4b88      	ldr	r3, [pc, #544]	@ (8017110 <ip4_frag+0x274>)
 8016eee:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016ef2:	4988      	ldr	r1, [pc, #544]	@ (8017114 <ip4_frag+0x278>)
 8016ef4:	4888      	ldr	r0, [pc, #544]	@ (8017118 <ip4_frag+0x27c>)
 8016ef6:	f000 fccf 	bl	8017898 <iprintf>
 8016efa:	f06f 0305 	mvn.w	r3, #5
 8016efe:	e102      	b.n	8017106 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f02:	88db      	ldrh	r3, [r3, #6]
 8016f04:	b29b      	uxth	r3, r3
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7f5 f936 	bl	800c178 <lwip_htons>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016f10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016f1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016f20:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	891b      	ldrh	r3, [r3, #8]
 8016f26:	3b14      	subs	r3, #20
 8016f28:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016f2c:	e0e1      	b.n	80170f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016f2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016f30:	00db      	lsls	r3, r3, #3
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016f38:	4293      	cmp	r3, r2
 8016f3a:	bf28      	it	cs
 8016f3c:	4613      	movcs	r3, r2
 8016f3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016f40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016f44:	2114      	movs	r1, #20
 8016f46:	200e      	movs	r0, #14
 8016f48:	f7f6 fa5a 	bl	800d400 <pbuf_alloc>
 8016f4c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	f000 80d5 	beq.w	8017100 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f58:	895b      	ldrh	r3, [r3, #10]
 8016f5a:	2b13      	cmp	r3, #19
 8016f5c:	d806      	bhi.n	8016f6c <ip4_frag+0xd0>
 8016f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8017110 <ip4_frag+0x274>)
 8016f60:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016f64:	496d      	ldr	r1, [pc, #436]	@ (801711c <ip4_frag+0x280>)
 8016f66:	486c      	ldr	r0, [pc, #432]	@ (8017118 <ip4_frag+0x27c>)
 8016f68:	f000 fc96 	bl	8017898 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	2214      	movs	r2, #20
 8016f72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016f74:	4618      	mov	r0, r3
 8016f76:	f000 fe18 	bl	8017baa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016f80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016f82:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016f86:	e064      	b.n	8017052 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	895a      	ldrh	r2, [r3, #10]
 8016f8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016f8e:	1ad3      	subs	r3, r2, r3
 8016f90:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	895b      	ldrh	r3, [r3, #10]
 8016f96:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d906      	bls.n	8016faa <ip4_frag+0x10e>
 8016f9c:	4b5c      	ldr	r3, [pc, #368]	@ (8017110 <ip4_frag+0x274>)
 8016f9e:	f240 322d 	movw	r2, #813	@ 0x32d
 8016fa2:	495f      	ldr	r1, [pc, #380]	@ (8017120 <ip4_frag+0x284>)
 8016fa4:	485c      	ldr	r0, [pc, #368]	@ (8017118 <ip4_frag+0x27c>)
 8016fa6:	f000 fc77 	bl	8017898 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016faa:	8bfa      	ldrh	r2, [r7, #30]
 8016fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016fb0:	4293      	cmp	r3, r2
 8016fb2:	bf28      	it	cs
 8016fb4:	4613      	movcs	r3, r2
 8016fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016fba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d105      	bne.n	8016fce <ip4_frag+0x132>
        poff = 0;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	60fb      	str	r3, [r7, #12]
        continue;
 8016fcc:	e041      	b.n	8017052 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016fce:	f7ff ff0d 	bl	8016dec <ip_frag_alloc_pbuf_custom_ref>
 8016fd2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016fd4:	69bb      	ldr	r3, [r7, #24]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d103      	bne.n	8016fe2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016fda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016fdc:	f7f6 fcf4 	bl	800d9c8 <pbuf_free>
        goto memerr;
 8016fe0:	e08f      	b.n	8017102 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016fe2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016fe8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016fea:	4413      	add	r3, r2
 8016fec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016ff0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016ff4:	9201      	str	r2, [sp, #4]
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2241      	movs	r2, #65	@ 0x41
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	f7f6 fb29 	bl	800d654 <pbuf_alloced_custom>
 8017002:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d106      	bne.n	8017018 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801700a:	69b8      	ldr	r0, [r7, #24]
 801700c:	f7ff fef6 	bl	8016dfc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017010:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017012:	f7f6 fcd9 	bl	800d9c8 <pbuf_free>
        goto memerr;
 8017016:	e074      	b.n	8017102 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017018:	68f8      	ldr	r0, [r7, #12]
 801701a:	f7f6 fd7b 	bl	800db14 <pbuf_ref>
      pcr->original = p;
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	68fa      	ldr	r2, [r7, #12]
 8017022:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017024:	69bb      	ldr	r3, [r7, #24]
 8017026:	4a3f      	ldr	r2, [pc, #252]	@ (8017124 <ip4_frag+0x288>)
 8017028:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801702a:	6979      	ldr	r1, [r7, #20]
 801702c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801702e:	f7f6 fd99 	bl	800db64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017032:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017036:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801703a:	1ad3      	subs	r3, r2, r3
 801703c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017044:	2b00      	cmp	r3, #0
 8017046:	d004      	beq.n	8017052 <ip4_frag+0x1b6>
        poff = 0;
 8017048:	2300      	movs	r3, #0
 801704a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017052:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017056:	2b00      	cmp	r3, #0
 8017058:	d196      	bne.n	8016f88 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801705a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801705c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017060:	4413      	add	r3, r2
 8017062:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017068:	f1a3 0213 	sub.w	r2, r3, #19
 801706c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017070:	429a      	cmp	r2, r3
 8017072:	bfcc      	ite	gt
 8017074:	2301      	movgt	r3, #1
 8017076:	2300      	movle	r3, #0
 8017078:	b2db      	uxtb	r3, r3
 801707a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801707c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017084:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8017086:	6a3b      	ldr	r3, [r7, #32]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d002      	beq.n	8017092 <ip4_frag+0x1f6>
 801708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801708e:	2b00      	cmp	r3, #0
 8017090:	d003      	beq.n	801709a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017092:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017094:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017098:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801709a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801709c:	4618      	mov	r0, r3
 801709e:	f7f5 f86b 	bl	800c178 <lwip_htons>
 80170a2:	4603      	mov	r3, r0
 80170a4:	461a      	mov	r2, r3
 80170a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80170aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80170ac:	3314      	adds	r3, #20
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	4618      	mov	r0, r3
 80170b2:	f7f5 f861 	bl	800c178 <lwip_htons>
 80170b6:	4603      	mov	r3, r0
 80170b8:	461a      	mov	r2, r3
 80170ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80170be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c0:	2200      	movs	r2, #0
 80170c2:	729a      	strb	r2, [r3, #10]
 80170c4:	2200      	movs	r2, #0
 80170c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	695b      	ldr	r3, [r3, #20]
 80170cc:	687a      	ldr	r2, [r7, #4]
 80170ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170d0:	68b8      	ldr	r0, [r7, #8]
 80170d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80170d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80170d6:	f7f6 fc77 	bl	800d9c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80170da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80170de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80170e0:	1ad3      	subs	r3, r2, r3
 80170e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80170e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80170ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80170ec:	4413      	add	r3, r2
 80170ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80170f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	f47f af19 	bne.w	8016f2e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80170fc:	2300      	movs	r3, #0
 80170fe:	e002      	b.n	8017106 <ip4_frag+0x26a>
      goto memerr;
 8017100:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017106:	4618      	mov	r0, r3
 8017108:	3748      	adds	r7, #72	@ 0x48
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}
 801710e:	bf00      	nop
 8017110:	0801c13c 	.word	0x0801c13c
 8017114:	0801c318 	.word	0x0801c318
 8017118:	0801c184 	.word	0x0801c184
 801711c:	0801c334 	.word	0x0801c334
 8017120:	0801c354 	.word	0x0801c354
 8017124:	08016e35 	.word	0x08016e35

08017128 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b086      	sub	sp, #24
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017132:	230e      	movs	r3, #14
 8017134:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	895b      	ldrh	r3, [r3, #10]
 801713a:	2b0e      	cmp	r3, #14
 801713c:	d96e      	bls.n	801721c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	7bdb      	ldrb	r3, [r3, #15]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d106      	bne.n	8017154 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801714c:	3301      	adds	r3, #1
 801714e:	b2da      	uxtb	r2, r3
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	7b1a      	ldrb	r2, [r3, #12]
 801715e:	7b5b      	ldrb	r3, [r3, #13]
 8017160:	021b      	lsls	r3, r3, #8
 8017162:	4313      	orrs	r3, r2
 8017164:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	f003 0301 	and.w	r3, r3, #1
 801716e:	2b00      	cmp	r3, #0
 8017170:	d023      	beq.n	80171ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017172:	693b      	ldr	r3, [r7, #16]
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	2b01      	cmp	r3, #1
 8017178:	d10f      	bne.n	801719a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	785b      	ldrb	r3, [r3, #1]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d11b      	bne.n	80171ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017186:	2b5e      	cmp	r3, #94	@ 0x5e
 8017188:	d117      	bne.n	80171ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	7b5b      	ldrb	r3, [r3, #13]
 801718e:	f043 0310 	orr.w	r3, r3, #16
 8017192:	b2da      	uxtb	r2, r3
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	735a      	strb	r2, [r3, #13]
 8017198:	e00f      	b.n	80171ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	2206      	movs	r2, #6
 801719e:	4928      	ldr	r1, [pc, #160]	@ (8017240 <ethernet_input+0x118>)
 80171a0:	4618      	mov	r0, r3
 80171a2:	f000 fbee 	bl	8017982 <memcmp>
 80171a6:	4603      	mov	r3, r0
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d106      	bne.n	80171ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	7b5b      	ldrb	r3, [r3, #13]
 80171b0:	f043 0308 	orr.w	r3, r3, #8
 80171b4:	b2da      	uxtb	r2, r3
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80171ba:	89fb      	ldrh	r3, [r7, #14]
 80171bc:	2b08      	cmp	r3, #8
 80171be:	d003      	beq.n	80171c8 <ethernet_input+0xa0>
 80171c0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80171c4:	d014      	beq.n	80171f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80171c6:	e032      	b.n	801722e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80171ce:	f003 0308 	and.w	r3, r3, #8
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d024      	beq.n	8017220 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80171d6:	8afb      	ldrh	r3, [r7, #22]
 80171d8:	4619      	mov	r1, r3
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f7f6 fb6e 	bl	800d8bc <pbuf_remove_header>
 80171e0:	4603      	mov	r3, r0
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d11e      	bne.n	8017224 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80171e6:	6839      	ldr	r1, [r7, #0]
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f7fe ff21 	bl	8016030 <ip4_input>
      break;
 80171ee:	e013      	b.n	8017218 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80171f6:	f003 0308 	and.w	r3, r3, #8
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d014      	beq.n	8017228 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80171fe:	8afb      	ldrh	r3, [r7, #22]
 8017200:	4619      	mov	r1, r3
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f7f6 fb5a 	bl	800d8bc <pbuf_remove_header>
 8017208:	4603      	mov	r3, r0
 801720a:	2b00      	cmp	r3, #0
 801720c:	d10e      	bne.n	801722c <ethernet_input+0x104>
        etharp_input(p, netif);
 801720e:	6839      	ldr	r1, [r7, #0]
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7fe f8c1 	bl	8015398 <etharp_input>
      break;
 8017216:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017218:	2300      	movs	r3, #0
 801721a:	e00c      	b.n	8017236 <ethernet_input+0x10e>
    goto free_and_return;
 801721c:	bf00      	nop
 801721e:	e006      	b.n	801722e <ethernet_input+0x106>
        goto free_and_return;
 8017220:	bf00      	nop
 8017222:	e004      	b.n	801722e <ethernet_input+0x106>
        goto free_and_return;
 8017224:	bf00      	nop
 8017226:	e002      	b.n	801722e <ethernet_input+0x106>
        goto free_and_return;
 8017228:	bf00      	nop
 801722a:	e000      	b.n	801722e <ethernet_input+0x106>
        goto free_and_return;
 801722c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f7f6 fbca 	bl	800d9c8 <pbuf_free>
  return ERR_OK;
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	3718      	adds	r7, #24
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	0801d1f4 	.word	0x0801d1f4

08017244 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017244:	b580      	push	{r7, lr}
 8017246:	b086      	sub	sp, #24
 8017248:	af00      	add	r7, sp, #0
 801724a:	60f8      	str	r0, [r7, #12]
 801724c:	60b9      	str	r1, [r7, #8]
 801724e:	607a      	str	r2, [r7, #4]
 8017250:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017252:	8c3b      	ldrh	r3, [r7, #32]
 8017254:	4618      	mov	r0, r3
 8017256:	f7f4 ff8f 	bl	800c178 <lwip_htons>
 801725a:	4603      	mov	r3, r0
 801725c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801725e:	210e      	movs	r1, #14
 8017260:	68b8      	ldr	r0, [r7, #8]
 8017262:	f7f6 fb1b 	bl	800d89c <pbuf_add_header>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d125      	bne.n	80172b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	685b      	ldr	r3, [r3, #4]
 8017270:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	8afa      	ldrh	r2, [r7, #22]
 8017276:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017278:	693b      	ldr	r3, [r7, #16]
 801727a:	2206      	movs	r2, #6
 801727c:	6839      	ldr	r1, [r7, #0]
 801727e:	4618      	mov	r0, r3
 8017280:	f000 fc93 	bl	8017baa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	3306      	adds	r3, #6
 8017288:	2206      	movs	r2, #6
 801728a:	6879      	ldr	r1, [r7, #4]
 801728c:	4618      	mov	r0, r3
 801728e:	f000 fc8c 	bl	8017baa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017298:	2b06      	cmp	r3, #6
 801729a:	d006      	beq.n	80172aa <ethernet_output+0x66>
 801729c:	4b0a      	ldr	r3, [pc, #40]	@ (80172c8 <ethernet_output+0x84>)
 801729e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80172a2:	490a      	ldr	r1, [pc, #40]	@ (80172cc <ethernet_output+0x88>)
 80172a4:	480a      	ldr	r0, [pc, #40]	@ (80172d0 <ethernet_output+0x8c>)
 80172a6:	f000 faf7 	bl	8017898 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	699b      	ldr	r3, [r3, #24]
 80172ae:	68b9      	ldr	r1, [r7, #8]
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	4798      	blx	r3
 80172b4:	4603      	mov	r3, r0
 80172b6:	e002      	b.n	80172be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80172b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80172ba:	f06f 0301 	mvn.w	r3, #1
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3718      	adds	r7, #24
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	0801c364 	.word	0x0801c364
 80172cc:	0801c39c 	.word	0x0801c39c
 80172d0:	0801c3d0 	.word	0x0801c3d0

080172d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b086      	sub	sp, #24
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	60bb      	str	r3, [r7, #8]
 80172e2:	2304      	movs	r3, #4
 80172e4:	60fb      	str	r3, [r7, #12]
 80172e6:	2300      	movs	r3, #0
 80172e8:	613b      	str	r3, [r7, #16]
 80172ea:	2300      	movs	r3, #0
 80172ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80172ee:	f107 0308 	add.w	r3, r7, #8
 80172f2:	2100      	movs	r1, #0
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7ee febe 	bl	8006076 <osMessageCreate>
 80172fa:	4602      	mov	r2, r0
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d102      	bne.n	801730e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017308:	f04f 33ff 	mov.w	r3, #4294967295
 801730c:	e000      	b.n	8017310 <sys_mbox_new+0x3c>

  return ERR_OK;
 801730e:	2300      	movs	r3, #0
}
 8017310:	4618      	mov	r0, r3
 8017312:	3718      	adds	r7, #24
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	4618      	mov	r0, r3
 8017326:	f7ee ff83 	bl	8006230 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	4618      	mov	r0, r3
 8017330:	f7ee ff94 	bl	800625c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017334:	bf00      	nop
 8017336:	3708      	adds	r7, #8
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}

0801733c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b084      	sub	sp, #16
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	6839      	ldr	r1, [r7, #0]
 801734c:	2200      	movs	r2, #0
 801734e:	4618      	mov	r0, r3
 8017350:	f7ee feba 	bl	80060c8 <osMessagePut>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	d102      	bne.n	8017360 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801735a:	2300      	movs	r3, #0
 801735c:	73fb      	strb	r3, [r7, #15]
 801735e:	e001      	b.n	8017364 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017360:	23ff      	movs	r3, #255	@ 0xff
 8017362:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017368:	4618      	mov	r0, r3
 801736a:	3710      	adds	r7, #16
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b08c      	sub	sp, #48	@ 0x30
 8017374:	af00      	add	r7, sp, #0
 8017376:	61f8      	str	r0, [r7, #28]
 8017378:	61b9      	str	r1, [r7, #24]
 801737a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801737c:	f7ee fca6 	bl	8005ccc <osKernelSysTick>
 8017380:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d017      	beq.n	80173b8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017388:	69fb      	ldr	r3, [r7, #28]
 801738a:	6819      	ldr	r1, [r3, #0]
 801738c:	f107 0320 	add.w	r3, r7, #32
 8017390:	697a      	ldr	r2, [r7, #20]
 8017392:	4618      	mov	r0, r3
 8017394:	f7ee fed8 	bl	8006148 <osMessageGet>

    if(event.status == osEventMessage)
 8017398:	6a3b      	ldr	r3, [r7, #32]
 801739a:	2b10      	cmp	r3, #16
 801739c:	d109      	bne.n	80173b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801739e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a0:	461a      	mov	r2, r3
 80173a2:	69bb      	ldr	r3, [r7, #24]
 80173a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80173a6:	f7ee fc91 	bl	8005ccc <osKernelSysTick>
 80173aa:	4602      	mov	r2, r0
 80173ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ae:	1ad3      	subs	r3, r2, r3
 80173b0:	e019      	b.n	80173e6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80173b2:	f04f 33ff 	mov.w	r3, #4294967295
 80173b6:	e016      	b.n	80173e6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	6819      	ldr	r1, [r3, #0]
 80173bc:	463b      	mov	r3, r7
 80173be:	f04f 32ff 	mov.w	r2, #4294967295
 80173c2:	4618      	mov	r0, r3
 80173c4:	f7ee fec0 	bl	8006148 <osMessageGet>
 80173c8:	f107 0320 	add.w	r3, r7, #32
 80173cc:	463a      	mov	r2, r7
 80173ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80173d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80173d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173d6:	461a      	mov	r2, r3
 80173d8:	69bb      	ldr	r3, [r7, #24]
 80173da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80173dc:	f7ee fc76 	bl	8005ccc <osKernelSysTick>
 80173e0:	4602      	mov	r2, r0
 80173e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173e4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80173e6:	4618      	mov	r0, r3
 80173e8:	3730      	adds	r7, #48	@ 0x30
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}

080173ee <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b086      	sub	sp, #24
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	6078      	str	r0, [r7, #4]
 80173f6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6819      	ldr	r1, [r3, #0]
 80173fc:	f107 030c 	add.w	r3, r7, #12
 8017400:	2200      	movs	r2, #0
 8017402:	4618      	mov	r0, r3
 8017404:	f7ee fea0 	bl	8006148 <osMessageGet>

  if(event.status == osEventMessage)
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	2b10      	cmp	r3, #16
 801740c:	d105      	bne.n	801741a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801740e:	693b      	ldr	r3, [r7, #16]
 8017410:	461a      	mov	r2, r3
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017416:	2300      	movs	r3, #0
 8017418:	e001      	b.n	801741e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801741a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801741e:	4618      	mov	r0, r3
 8017420:	3718      	adds	r7, #24
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017426:	b480      	push	{r7}
 8017428:	b083      	sub	sp, #12
 801742a:	af00      	add	r7, sp, #0
 801742c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d101      	bne.n	801743a <sys_mbox_valid+0x14>
    return 0;
 8017436:	2300      	movs	r3, #0
 8017438:	e000      	b.n	801743c <sys_mbox_valid+0x16>
  else
    return 1;
 801743a:	2301      	movs	r3, #1
}
 801743c:	4618      	mov	r0, r3
 801743e:	370c      	adds	r7, #12
 8017440:	46bd      	mov	sp, r7
 8017442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017446:	4770      	bx	lr

08017448 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017448:	b480      	push	{r7}
 801744a:	b083      	sub	sp, #12
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	601a      	str	r2, [r3, #0]
}
 8017456:	bf00      	nop
 8017458:	370c      	adds	r7, #12
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr

08017462 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017462:	b580      	push	{r7, lr}
 8017464:	b084      	sub	sp, #16
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
 801746a:	460b      	mov	r3, r1
 801746c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801746e:	2300      	movs	r3, #0
 8017470:	60bb      	str	r3, [r7, #8]
 8017472:	2300      	movs	r3, #0
 8017474:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017476:	f107 0308 	add.w	r3, r7, #8
 801747a:	2101      	movs	r1, #1
 801747c:	4618      	mov	r0, r3
 801747e:	f7ee fd31 	bl	8005ee4 <osSemaphoreCreate>
 8017482:	4602      	mov	r2, r0
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d102      	bne.n	8017496 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017490:	f04f 33ff 	mov.w	r3, #4294967295
 8017494:	e009      	b.n	80174aa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017496:	78fb      	ldrb	r3, [r7, #3]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d105      	bne.n	80174a8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	2100      	movs	r1, #0
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7ee fd50 	bl	8005f48 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80174a8:	2300      	movs	r3, #0
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}

080174b2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80174b2:	b580      	push	{r7, lr}
 80174b4:	b084      	sub	sp, #16
 80174b6:	af00      	add	r7, sp, #0
 80174b8:	6078      	str	r0, [r7, #4]
 80174ba:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80174bc:	f7ee fc06 	bl	8005ccc <osKernelSysTick>
 80174c0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80174c2:	683b      	ldr	r3, [r7, #0]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d011      	beq.n	80174ec <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	6839      	ldr	r1, [r7, #0]
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7ee fd3a 	bl	8005f48 <osSemaphoreWait>
 80174d4:	4603      	mov	r3, r0
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d105      	bne.n	80174e6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80174da:	f7ee fbf7 	bl	8005ccc <osKernelSysTick>
 80174de:	4602      	mov	r2, r0
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	1ad3      	subs	r3, r2, r3
 80174e4:	e012      	b.n	801750c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174e6:	f04f 33ff 	mov.w	r3, #4294967295
 80174ea:	e00f      	b.n	801750c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80174ec:	bf00      	nop
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f04f 31ff 	mov.w	r1, #4294967295
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7ee fd26 	bl	8005f48 <osSemaphoreWait>
 80174fc:	4603      	mov	r3, r0
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d1f5      	bne.n	80174ee <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017502:	f7ee fbe3 	bl	8005ccc <osKernelSysTick>
 8017506:	4602      	mov	r2, r0
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801750c:	4618      	mov	r0, r3
 801750e:	3710      	adds	r7, #16
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}

08017514 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b082      	sub	sp, #8
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	4618      	mov	r0, r3
 8017522:	f7ee fd5f 	bl	8005fe4 <osSemaphoreRelease>
}
 8017526:	bf00      	nop
 8017528:	3708      	adds	r7, #8
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801752e:	b580      	push	{r7, lr}
 8017530:	b082      	sub	sp, #8
 8017532:	af00      	add	r7, sp, #0
 8017534:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	4618      	mov	r0, r3
 801753c:	f7ee fd88 	bl	8006050 <osSemaphoreDelete>
}
 8017540:	bf00      	nop
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d101      	bne.n	801755c <sys_sem_valid+0x14>
    return 0;
 8017558:	2300      	movs	r3, #0
 801755a:	e000      	b.n	801755e <sys_sem_valid+0x16>
  else
    return 1;
 801755c:	2301      	movs	r3, #1
}
 801755e:	4618      	mov	r0, r3
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr

0801756a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801756a:	b480      	push	{r7}
 801756c:	b083      	sub	sp, #12
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2200      	movs	r2, #0
 8017576:	601a      	str	r2, [r3, #0]
}
 8017578:	bf00      	nop
 801757a:	370c      	adds	r7, #12
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr

08017584 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017588:	4803      	ldr	r0, [pc, #12]	@ (8017598 <sys_init+0x14>)
 801758a:	f7ee fc0f 	bl	8005dac <osMutexCreate>
 801758e:	4603      	mov	r3, r0
 8017590:	4a02      	ldr	r2, [pc, #8]	@ (801759c <sys_init+0x18>)
 8017592:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017594:	bf00      	nop
 8017596:	bd80      	pop	{r7, pc}
 8017598:	0801d204 	.word	0x0801d204
 801759c:	2000f1f4 	.word	0x2000f1f4

080175a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80175a0:	b580      	push	{r7, lr}
 80175a2:	b084      	sub	sp, #16
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80175a8:	2300      	movs	r3, #0
 80175aa:	60bb      	str	r3, [r7, #8]
 80175ac:	2300      	movs	r3, #0
 80175ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80175b0:	f107 0308 	add.w	r3, r7, #8
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7ee fbf9 	bl	8005dac <osMutexCreate>
 80175ba:	4602      	mov	r2, r0
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d102      	bne.n	80175ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80175c8:	f04f 33ff 	mov.w	r3, #4294967295
 80175cc:	e000      	b.n	80175d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80175ce:	2300      	movs	r3, #0
}
 80175d0:	4618      	mov	r0, r3
 80175d2:	3710      	adds	r7, #16
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}

080175d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b082      	sub	sp, #8
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f04f 31ff 	mov.w	r1, #4294967295
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7ee fbf7 	bl	8005ddc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80175ee:	bf00      	nop
 80175f0:	3708      	adds	r7, #8
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}

080175f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80175f6:	b580      	push	{r7, lr}
 80175f8:	b082      	sub	sp, #8
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	4618      	mov	r0, r3
 8017604:	f7ee fc38 	bl	8005e78 <osMutexRelease>
}
 8017608:	bf00      	nop
 801760a:	3708      	adds	r7, #8
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b08c      	sub	sp, #48	@ 0x30
 8017614:	af00      	add	r7, sp, #0
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
 801761c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801761e:	f107 0314 	add.w	r3, r7, #20
 8017622:	2200      	movs	r2, #0
 8017624:	601a      	str	r2, [r3, #0]
 8017626:	605a      	str	r2, [r3, #4]
 8017628:	609a      	str	r2, [r3, #8]
 801762a:	60da      	str	r2, [r3, #12]
 801762c:	611a      	str	r2, [r3, #16]
 801762e:	615a      	str	r2, [r3, #20]
 8017630:	619a      	str	r2, [r3, #24]
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	617b      	str	r3, [r7, #20]
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	61bb      	str	r3, [r7, #24]
 801763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801763c:	b21b      	sxth	r3, r3
 801763e:	83bb      	strh	r3, [r7, #28]
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017644:	f107 0314 	add.w	r3, r7, #20
 8017648:	6879      	ldr	r1, [r7, #4]
 801764a:	4618      	mov	r0, r3
 801764c:	f7ee fb4e 	bl	8005cec <osThreadCreate>
 8017650:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017652:	4618      	mov	r0, r3
 8017654:	3730      	adds	r7, #48	@ 0x30
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}
	...

0801765c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017660:	4b04      	ldr	r3, [pc, #16]	@ (8017674 <sys_arch_protect+0x18>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	f04f 31ff 	mov.w	r1, #4294967295
 8017668:	4618      	mov	r0, r3
 801766a:	f7ee fbb7 	bl	8005ddc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801766e:	2301      	movs	r3, #1
}
 8017670:	4618      	mov	r0, r3
 8017672:	bd80      	pop	{r7, pc}
 8017674:	2000f1f4 	.word	0x2000f1f4

08017678 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b082      	sub	sp, #8
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017680:	4b04      	ldr	r3, [pc, #16]	@ (8017694 <sys_arch_unprotect+0x1c>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	4618      	mov	r0, r3
 8017686:	f7ee fbf7 	bl	8005e78 <osMutexRelease>
}
 801768a:	bf00      	nop
 801768c:	3708      	adds	r7, #8
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	2000f1f4 	.word	0x2000f1f4

08017698 <rand>:
 8017698:	4b16      	ldr	r3, [pc, #88]	@ (80176f4 <rand+0x5c>)
 801769a:	b510      	push	{r4, lr}
 801769c:	681c      	ldr	r4, [r3, #0]
 801769e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176a0:	b9b3      	cbnz	r3, 80176d0 <rand+0x38>
 80176a2:	2018      	movs	r0, #24
 80176a4:	f000 faf8 	bl	8017c98 <malloc>
 80176a8:	4602      	mov	r2, r0
 80176aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80176ac:	b920      	cbnz	r0, 80176b8 <rand+0x20>
 80176ae:	4b12      	ldr	r3, [pc, #72]	@ (80176f8 <rand+0x60>)
 80176b0:	4812      	ldr	r0, [pc, #72]	@ (80176fc <rand+0x64>)
 80176b2:	2152      	movs	r1, #82	@ 0x52
 80176b4:	f000 fa88 	bl	8017bc8 <__assert_func>
 80176b8:	4911      	ldr	r1, [pc, #68]	@ (8017700 <rand+0x68>)
 80176ba:	4b12      	ldr	r3, [pc, #72]	@ (8017704 <rand+0x6c>)
 80176bc:	e9c0 1300 	strd	r1, r3, [r0]
 80176c0:	4b11      	ldr	r3, [pc, #68]	@ (8017708 <rand+0x70>)
 80176c2:	6083      	str	r3, [r0, #8]
 80176c4:	230b      	movs	r3, #11
 80176c6:	8183      	strh	r3, [r0, #12]
 80176c8:	2100      	movs	r1, #0
 80176ca:	2001      	movs	r0, #1
 80176cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80176d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176d2:	480e      	ldr	r0, [pc, #56]	@ (801770c <rand+0x74>)
 80176d4:	690b      	ldr	r3, [r1, #16]
 80176d6:	694c      	ldr	r4, [r1, #20]
 80176d8:	4a0d      	ldr	r2, [pc, #52]	@ (8017710 <rand+0x78>)
 80176da:	4358      	muls	r0, r3
 80176dc:	fb02 0004 	mla	r0, r2, r4, r0
 80176e0:	fba3 3202 	umull	r3, r2, r3, r2
 80176e4:	3301      	adds	r3, #1
 80176e6:	eb40 0002 	adc.w	r0, r0, r2
 80176ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80176f2:	bd10      	pop	{r4, pc}
 80176f4:	2000003c 	.word	0x2000003c
 80176f8:	0801d20c 	.word	0x0801d20c
 80176fc:	0801d223 	.word	0x0801d223
 8017700:	abcd330e 	.word	0xabcd330e
 8017704:	e66d1234 	.word	0xe66d1234
 8017708:	0005deec 	.word	0x0005deec
 801770c:	5851f42d 	.word	0x5851f42d
 8017710:	4c957f2d 	.word	0x4c957f2d

08017714 <std>:
 8017714:	2300      	movs	r3, #0
 8017716:	b510      	push	{r4, lr}
 8017718:	4604      	mov	r4, r0
 801771a:	e9c0 3300 	strd	r3, r3, [r0]
 801771e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017722:	6083      	str	r3, [r0, #8]
 8017724:	8181      	strh	r1, [r0, #12]
 8017726:	6643      	str	r3, [r0, #100]	@ 0x64
 8017728:	81c2      	strh	r2, [r0, #14]
 801772a:	6183      	str	r3, [r0, #24]
 801772c:	4619      	mov	r1, r3
 801772e:	2208      	movs	r2, #8
 8017730:	305c      	adds	r0, #92	@ 0x5c
 8017732:	f000 f950 	bl	80179d6 <memset>
 8017736:	4b0d      	ldr	r3, [pc, #52]	@ (801776c <std+0x58>)
 8017738:	6263      	str	r3, [r4, #36]	@ 0x24
 801773a:	4b0d      	ldr	r3, [pc, #52]	@ (8017770 <std+0x5c>)
 801773c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801773e:	4b0d      	ldr	r3, [pc, #52]	@ (8017774 <std+0x60>)
 8017740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017742:	4b0d      	ldr	r3, [pc, #52]	@ (8017778 <std+0x64>)
 8017744:	6323      	str	r3, [r4, #48]	@ 0x30
 8017746:	4b0d      	ldr	r3, [pc, #52]	@ (801777c <std+0x68>)
 8017748:	6224      	str	r4, [r4, #32]
 801774a:	429c      	cmp	r4, r3
 801774c:	d006      	beq.n	801775c <std+0x48>
 801774e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017752:	4294      	cmp	r4, r2
 8017754:	d002      	beq.n	801775c <std+0x48>
 8017756:	33d0      	adds	r3, #208	@ 0xd0
 8017758:	429c      	cmp	r4, r3
 801775a:	d105      	bne.n	8017768 <std+0x54>
 801775c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017764:	f000 ba1e 	b.w	8017ba4 <__retarget_lock_init_recursive>
 8017768:	bd10      	pop	{r4, pc}
 801776a:	bf00      	nop
 801776c:	080178fd 	.word	0x080178fd
 8017770:	0801791f 	.word	0x0801791f
 8017774:	08017957 	.word	0x08017957
 8017778:	0801797b 	.word	0x0801797b
 801777c:	2000f1f8 	.word	0x2000f1f8

08017780 <stdio_exit_handler>:
 8017780:	4a02      	ldr	r2, [pc, #8]	@ (801778c <stdio_exit_handler+0xc>)
 8017782:	4903      	ldr	r1, [pc, #12]	@ (8017790 <stdio_exit_handler+0x10>)
 8017784:	4803      	ldr	r0, [pc, #12]	@ (8017794 <stdio_exit_handler+0x14>)
 8017786:	f000 b869 	b.w	801785c <_fwalk_sglue>
 801778a:	bf00      	nop
 801778c:	20000030 	.word	0x20000030
 8017790:	0801875d 	.word	0x0801875d
 8017794:	20000040 	.word	0x20000040

08017798 <cleanup_stdio>:
 8017798:	6841      	ldr	r1, [r0, #4]
 801779a:	4b0c      	ldr	r3, [pc, #48]	@ (80177cc <cleanup_stdio+0x34>)
 801779c:	4299      	cmp	r1, r3
 801779e:	b510      	push	{r4, lr}
 80177a0:	4604      	mov	r4, r0
 80177a2:	d001      	beq.n	80177a8 <cleanup_stdio+0x10>
 80177a4:	f000 ffda 	bl	801875c <_fflush_r>
 80177a8:	68a1      	ldr	r1, [r4, #8]
 80177aa:	4b09      	ldr	r3, [pc, #36]	@ (80177d0 <cleanup_stdio+0x38>)
 80177ac:	4299      	cmp	r1, r3
 80177ae:	d002      	beq.n	80177b6 <cleanup_stdio+0x1e>
 80177b0:	4620      	mov	r0, r4
 80177b2:	f000 ffd3 	bl	801875c <_fflush_r>
 80177b6:	68e1      	ldr	r1, [r4, #12]
 80177b8:	4b06      	ldr	r3, [pc, #24]	@ (80177d4 <cleanup_stdio+0x3c>)
 80177ba:	4299      	cmp	r1, r3
 80177bc:	d004      	beq.n	80177c8 <cleanup_stdio+0x30>
 80177be:	4620      	mov	r0, r4
 80177c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177c4:	f000 bfca 	b.w	801875c <_fflush_r>
 80177c8:	bd10      	pop	{r4, pc}
 80177ca:	bf00      	nop
 80177cc:	2000f1f8 	.word	0x2000f1f8
 80177d0:	2000f260 	.word	0x2000f260
 80177d4:	2000f2c8 	.word	0x2000f2c8

080177d8 <global_stdio_init.part.0>:
 80177d8:	b510      	push	{r4, lr}
 80177da:	4b0b      	ldr	r3, [pc, #44]	@ (8017808 <global_stdio_init.part.0+0x30>)
 80177dc:	4c0b      	ldr	r4, [pc, #44]	@ (801780c <global_stdio_init.part.0+0x34>)
 80177de:	4a0c      	ldr	r2, [pc, #48]	@ (8017810 <global_stdio_init.part.0+0x38>)
 80177e0:	601a      	str	r2, [r3, #0]
 80177e2:	4620      	mov	r0, r4
 80177e4:	2200      	movs	r2, #0
 80177e6:	2104      	movs	r1, #4
 80177e8:	f7ff ff94 	bl	8017714 <std>
 80177ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80177f0:	2201      	movs	r2, #1
 80177f2:	2109      	movs	r1, #9
 80177f4:	f7ff ff8e 	bl	8017714 <std>
 80177f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80177fc:	2202      	movs	r2, #2
 80177fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017802:	2112      	movs	r1, #18
 8017804:	f7ff bf86 	b.w	8017714 <std>
 8017808:	2000f330 	.word	0x2000f330
 801780c:	2000f1f8 	.word	0x2000f1f8
 8017810:	08017781 	.word	0x08017781

08017814 <__sfp_lock_acquire>:
 8017814:	4801      	ldr	r0, [pc, #4]	@ (801781c <__sfp_lock_acquire+0x8>)
 8017816:	f000 b9c6 	b.w	8017ba6 <__retarget_lock_acquire_recursive>
 801781a:	bf00      	nop
 801781c:	2000f339 	.word	0x2000f339

08017820 <__sfp_lock_release>:
 8017820:	4801      	ldr	r0, [pc, #4]	@ (8017828 <__sfp_lock_release+0x8>)
 8017822:	f000 b9c1 	b.w	8017ba8 <__retarget_lock_release_recursive>
 8017826:	bf00      	nop
 8017828:	2000f339 	.word	0x2000f339

0801782c <__sinit>:
 801782c:	b510      	push	{r4, lr}
 801782e:	4604      	mov	r4, r0
 8017830:	f7ff fff0 	bl	8017814 <__sfp_lock_acquire>
 8017834:	6a23      	ldr	r3, [r4, #32]
 8017836:	b11b      	cbz	r3, 8017840 <__sinit+0x14>
 8017838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801783c:	f7ff bff0 	b.w	8017820 <__sfp_lock_release>
 8017840:	4b04      	ldr	r3, [pc, #16]	@ (8017854 <__sinit+0x28>)
 8017842:	6223      	str	r3, [r4, #32]
 8017844:	4b04      	ldr	r3, [pc, #16]	@ (8017858 <__sinit+0x2c>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d1f5      	bne.n	8017838 <__sinit+0xc>
 801784c:	f7ff ffc4 	bl	80177d8 <global_stdio_init.part.0>
 8017850:	e7f2      	b.n	8017838 <__sinit+0xc>
 8017852:	bf00      	nop
 8017854:	08017799 	.word	0x08017799
 8017858:	2000f330 	.word	0x2000f330

0801785c <_fwalk_sglue>:
 801785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017860:	4607      	mov	r7, r0
 8017862:	4688      	mov	r8, r1
 8017864:	4614      	mov	r4, r2
 8017866:	2600      	movs	r6, #0
 8017868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801786c:	f1b9 0901 	subs.w	r9, r9, #1
 8017870:	d505      	bpl.n	801787e <_fwalk_sglue+0x22>
 8017872:	6824      	ldr	r4, [r4, #0]
 8017874:	2c00      	cmp	r4, #0
 8017876:	d1f7      	bne.n	8017868 <_fwalk_sglue+0xc>
 8017878:	4630      	mov	r0, r6
 801787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801787e:	89ab      	ldrh	r3, [r5, #12]
 8017880:	2b01      	cmp	r3, #1
 8017882:	d907      	bls.n	8017894 <_fwalk_sglue+0x38>
 8017884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017888:	3301      	adds	r3, #1
 801788a:	d003      	beq.n	8017894 <_fwalk_sglue+0x38>
 801788c:	4629      	mov	r1, r5
 801788e:	4638      	mov	r0, r7
 8017890:	47c0      	blx	r8
 8017892:	4306      	orrs	r6, r0
 8017894:	3568      	adds	r5, #104	@ 0x68
 8017896:	e7e9      	b.n	801786c <_fwalk_sglue+0x10>

08017898 <iprintf>:
 8017898:	b40f      	push	{r0, r1, r2, r3}
 801789a:	b507      	push	{r0, r1, r2, lr}
 801789c:	4906      	ldr	r1, [pc, #24]	@ (80178b8 <iprintf+0x20>)
 801789e:	ab04      	add	r3, sp, #16
 80178a0:	6808      	ldr	r0, [r1, #0]
 80178a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80178a6:	6881      	ldr	r1, [r0, #8]
 80178a8:	9301      	str	r3, [sp, #4]
 80178aa:	f000 fc2d 	bl	8018108 <_vfiprintf_r>
 80178ae:	b003      	add	sp, #12
 80178b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80178b4:	b004      	add	sp, #16
 80178b6:	4770      	bx	lr
 80178b8:	2000003c 	.word	0x2000003c

080178bc <siprintf>:
 80178bc:	b40e      	push	{r1, r2, r3}
 80178be:	b500      	push	{lr}
 80178c0:	b09c      	sub	sp, #112	@ 0x70
 80178c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80178c4:	9002      	str	r0, [sp, #8]
 80178c6:	9006      	str	r0, [sp, #24]
 80178c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80178cc:	4809      	ldr	r0, [pc, #36]	@ (80178f4 <siprintf+0x38>)
 80178ce:	9107      	str	r1, [sp, #28]
 80178d0:	9104      	str	r1, [sp, #16]
 80178d2:	4909      	ldr	r1, [pc, #36]	@ (80178f8 <siprintf+0x3c>)
 80178d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80178d8:	9105      	str	r1, [sp, #20]
 80178da:	6800      	ldr	r0, [r0, #0]
 80178dc:	9301      	str	r3, [sp, #4]
 80178de:	a902      	add	r1, sp, #8
 80178e0:	f000 faec 	bl	8017ebc <_svfiprintf_r>
 80178e4:	9b02      	ldr	r3, [sp, #8]
 80178e6:	2200      	movs	r2, #0
 80178e8:	701a      	strb	r2, [r3, #0]
 80178ea:	b01c      	add	sp, #112	@ 0x70
 80178ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80178f0:	b003      	add	sp, #12
 80178f2:	4770      	bx	lr
 80178f4:	2000003c 	.word	0x2000003c
 80178f8:	ffff0208 	.word	0xffff0208

080178fc <__sread>:
 80178fc:	b510      	push	{r4, lr}
 80178fe:	460c      	mov	r4, r1
 8017900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017904:	f000 f906 	bl	8017b14 <_read_r>
 8017908:	2800      	cmp	r0, #0
 801790a:	bfab      	itete	ge
 801790c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801790e:	89a3      	ldrhlt	r3, [r4, #12]
 8017910:	181b      	addge	r3, r3, r0
 8017912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017916:	bfac      	ite	ge
 8017918:	6563      	strge	r3, [r4, #84]	@ 0x54
 801791a:	81a3      	strhlt	r3, [r4, #12]
 801791c:	bd10      	pop	{r4, pc}

0801791e <__swrite>:
 801791e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017922:	461f      	mov	r7, r3
 8017924:	898b      	ldrh	r3, [r1, #12]
 8017926:	05db      	lsls	r3, r3, #23
 8017928:	4605      	mov	r5, r0
 801792a:	460c      	mov	r4, r1
 801792c:	4616      	mov	r6, r2
 801792e:	d505      	bpl.n	801793c <__swrite+0x1e>
 8017930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017934:	2302      	movs	r3, #2
 8017936:	2200      	movs	r2, #0
 8017938:	f000 f8da 	bl	8017af0 <_lseek_r>
 801793c:	89a3      	ldrh	r3, [r4, #12]
 801793e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017942:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017946:	81a3      	strh	r3, [r4, #12]
 8017948:	4632      	mov	r2, r6
 801794a:	463b      	mov	r3, r7
 801794c:	4628      	mov	r0, r5
 801794e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017952:	f000 b8f1 	b.w	8017b38 <_write_r>

08017956 <__sseek>:
 8017956:	b510      	push	{r4, lr}
 8017958:	460c      	mov	r4, r1
 801795a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801795e:	f000 f8c7 	bl	8017af0 <_lseek_r>
 8017962:	1c43      	adds	r3, r0, #1
 8017964:	89a3      	ldrh	r3, [r4, #12]
 8017966:	bf15      	itete	ne
 8017968:	6560      	strne	r0, [r4, #84]	@ 0x54
 801796a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801796e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017972:	81a3      	strheq	r3, [r4, #12]
 8017974:	bf18      	it	ne
 8017976:	81a3      	strhne	r3, [r4, #12]
 8017978:	bd10      	pop	{r4, pc}

0801797a <__sclose>:
 801797a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801797e:	f000 b851 	b.w	8017a24 <_close_r>

08017982 <memcmp>:
 8017982:	b510      	push	{r4, lr}
 8017984:	3901      	subs	r1, #1
 8017986:	4402      	add	r2, r0
 8017988:	4290      	cmp	r0, r2
 801798a:	d101      	bne.n	8017990 <memcmp+0xe>
 801798c:	2000      	movs	r0, #0
 801798e:	e005      	b.n	801799c <memcmp+0x1a>
 8017990:	7803      	ldrb	r3, [r0, #0]
 8017992:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017996:	42a3      	cmp	r3, r4
 8017998:	d001      	beq.n	801799e <memcmp+0x1c>
 801799a:	1b18      	subs	r0, r3, r4
 801799c:	bd10      	pop	{r4, pc}
 801799e:	3001      	adds	r0, #1
 80179a0:	e7f2      	b.n	8017988 <memcmp+0x6>

080179a2 <memmove>:
 80179a2:	4288      	cmp	r0, r1
 80179a4:	b510      	push	{r4, lr}
 80179a6:	eb01 0402 	add.w	r4, r1, r2
 80179aa:	d902      	bls.n	80179b2 <memmove+0x10>
 80179ac:	4284      	cmp	r4, r0
 80179ae:	4623      	mov	r3, r4
 80179b0:	d807      	bhi.n	80179c2 <memmove+0x20>
 80179b2:	1e43      	subs	r3, r0, #1
 80179b4:	42a1      	cmp	r1, r4
 80179b6:	d008      	beq.n	80179ca <memmove+0x28>
 80179b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80179bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80179c0:	e7f8      	b.n	80179b4 <memmove+0x12>
 80179c2:	4402      	add	r2, r0
 80179c4:	4601      	mov	r1, r0
 80179c6:	428a      	cmp	r2, r1
 80179c8:	d100      	bne.n	80179cc <memmove+0x2a>
 80179ca:	bd10      	pop	{r4, pc}
 80179cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80179d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80179d4:	e7f7      	b.n	80179c6 <memmove+0x24>

080179d6 <memset>:
 80179d6:	4402      	add	r2, r0
 80179d8:	4603      	mov	r3, r0
 80179da:	4293      	cmp	r3, r2
 80179dc:	d100      	bne.n	80179e0 <memset+0xa>
 80179de:	4770      	bx	lr
 80179e0:	f803 1b01 	strb.w	r1, [r3], #1
 80179e4:	e7f9      	b.n	80179da <memset+0x4>

080179e6 <strchr>:
 80179e6:	b2c9      	uxtb	r1, r1
 80179e8:	4603      	mov	r3, r0
 80179ea:	4618      	mov	r0, r3
 80179ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179f0:	b112      	cbz	r2, 80179f8 <strchr+0x12>
 80179f2:	428a      	cmp	r2, r1
 80179f4:	d1f9      	bne.n	80179ea <strchr+0x4>
 80179f6:	4770      	bx	lr
 80179f8:	2900      	cmp	r1, #0
 80179fa:	bf18      	it	ne
 80179fc:	2000      	movne	r0, #0
 80179fe:	4770      	bx	lr

08017a00 <strncmp>:
 8017a00:	b510      	push	{r4, lr}
 8017a02:	b16a      	cbz	r2, 8017a20 <strncmp+0x20>
 8017a04:	3901      	subs	r1, #1
 8017a06:	1884      	adds	r4, r0, r2
 8017a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a10:	429a      	cmp	r2, r3
 8017a12:	d103      	bne.n	8017a1c <strncmp+0x1c>
 8017a14:	42a0      	cmp	r0, r4
 8017a16:	d001      	beq.n	8017a1c <strncmp+0x1c>
 8017a18:	2a00      	cmp	r2, #0
 8017a1a:	d1f5      	bne.n	8017a08 <strncmp+0x8>
 8017a1c:	1ad0      	subs	r0, r2, r3
 8017a1e:	bd10      	pop	{r4, pc}
 8017a20:	4610      	mov	r0, r2
 8017a22:	e7fc      	b.n	8017a1e <strncmp+0x1e>

08017a24 <_close_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d06      	ldr	r5, [pc, #24]	@ (8017a40 <_close_r+0x1c>)
 8017a28:	2300      	movs	r3, #0
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	4608      	mov	r0, r1
 8017a2e:	602b      	str	r3, [r5, #0]
 8017a30:	f7e9 fa12 	bl	8000e58 <_close>
 8017a34:	1c43      	adds	r3, r0, #1
 8017a36:	d102      	bne.n	8017a3e <_close_r+0x1a>
 8017a38:	682b      	ldr	r3, [r5, #0]
 8017a3a:	b103      	cbz	r3, 8017a3e <_close_r+0x1a>
 8017a3c:	6023      	str	r3, [r4, #0]
 8017a3e:	bd38      	pop	{r3, r4, r5, pc}
 8017a40:	2000f334 	.word	0x2000f334

08017a44 <_reclaim_reent>:
 8017a44:	4b29      	ldr	r3, [pc, #164]	@ (8017aec <_reclaim_reent+0xa8>)
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	4283      	cmp	r3, r0
 8017a4a:	b570      	push	{r4, r5, r6, lr}
 8017a4c:	4604      	mov	r4, r0
 8017a4e:	d04b      	beq.n	8017ae8 <_reclaim_reent+0xa4>
 8017a50:	69c3      	ldr	r3, [r0, #28]
 8017a52:	b1ab      	cbz	r3, 8017a80 <_reclaim_reent+0x3c>
 8017a54:	68db      	ldr	r3, [r3, #12]
 8017a56:	b16b      	cbz	r3, 8017a74 <_reclaim_reent+0x30>
 8017a58:	2500      	movs	r5, #0
 8017a5a:	69e3      	ldr	r3, [r4, #28]
 8017a5c:	68db      	ldr	r3, [r3, #12]
 8017a5e:	5959      	ldr	r1, [r3, r5]
 8017a60:	2900      	cmp	r1, #0
 8017a62:	d13b      	bne.n	8017adc <_reclaim_reent+0x98>
 8017a64:	3504      	adds	r5, #4
 8017a66:	2d80      	cmp	r5, #128	@ 0x80
 8017a68:	d1f7      	bne.n	8017a5a <_reclaim_reent+0x16>
 8017a6a:	69e3      	ldr	r3, [r4, #28]
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	68d9      	ldr	r1, [r3, #12]
 8017a70:	f000 f8c8 	bl	8017c04 <_free_r>
 8017a74:	69e3      	ldr	r3, [r4, #28]
 8017a76:	6819      	ldr	r1, [r3, #0]
 8017a78:	b111      	cbz	r1, 8017a80 <_reclaim_reent+0x3c>
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f000 f8c2 	bl	8017c04 <_free_r>
 8017a80:	6961      	ldr	r1, [r4, #20]
 8017a82:	b111      	cbz	r1, 8017a8a <_reclaim_reent+0x46>
 8017a84:	4620      	mov	r0, r4
 8017a86:	f000 f8bd 	bl	8017c04 <_free_r>
 8017a8a:	69e1      	ldr	r1, [r4, #28]
 8017a8c:	b111      	cbz	r1, 8017a94 <_reclaim_reent+0x50>
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f000 f8b8 	bl	8017c04 <_free_r>
 8017a94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017a96:	b111      	cbz	r1, 8017a9e <_reclaim_reent+0x5a>
 8017a98:	4620      	mov	r0, r4
 8017a9a:	f000 f8b3 	bl	8017c04 <_free_r>
 8017a9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017aa0:	b111      	cbz	r1, 8017aa8 <_reclaim_reent+0x64>
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f000 f8ae 	bl	8017c04 <_free_r>
 8017aa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017aaa:	b111      	cbz	r1, 8017ab2 <_reclaim_reent+0x6e>
 8017aac:	4620      	mov	r0, r4
 8017aae:	f000 f8a9 	bl	8017c04 <_free_r>
 8017ab2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017ab4:	b111      	cbz	r1, 8017abc <_reclaim_reent+0x78>
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f000 f8a4 	bl	8017c04 <_free_r>
 8017abc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017abe:	b111      	cbz	r1, 8017ac6 <_reclaim_reent+0x82>
 8017ac0:	4620      	mov	r0, r4
 8017ac2:	f000 f89f 	bl	8017c04 <_free_r>
 8017ac6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017ac8:	b111      	cbz	r1, 8017ad0 <_reclaim_reent+0x8c>
 8017aca:	4620      	mov	r0, r4
 8017acc:	f000 f89a 	bl	8017c04 <_free_r>
 8017ad0:	6a23      	ldr	r3, [r4, #32]
 8017ad2:	b14b      	cbz	r3, 8017ae8 <_reclaim_reent+0xa4>
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ada:	4718      	bx	r3
 8017adc:	680e      	ldr	r6, [r1, #0]
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f000 f890 	bl	8017c04 <_free_r>
 8017ae4:	4631      	mov	r1, r6
 8017ae6:	e7bb      	b.n	8017a60 <_reclaim_reent+0x1c>
 8017ae8:	bd70      	pop	{r4, r5, r6, pc}
 8017aea:	bf00      	nop
 8017aec:	2000003c 	.word	0x2000003c

08017af0 <_lseek_r>:
 8017af0:	b538      	push	{r3, r4, r5, lr}
 8017af2:	4d07      	ldr	r5, [pc, #28]	@ (8017b10 <_lseek_r+0x20>)
 8017af4:	4604      	mov	r4, r0
 8017af6:	4608      	mov	r0, r1
 8017af8:	4611      	mov	r1, r2
 8017afa:	2200      	movs	r2, #0
 8017afc:	602a      	str	r2, [r5, #0]
 8017afe:	461a      	mov	r2, r3
 8017b00:	f7e9 f9d1 	bl	8000ea6 <_lseek>
 8017b04:	1c43      	adds	r3, r0, #1
 8017b06:	d102      	bne.n	8017b0e <_lseek_r+0x1e>
 8017b08:	682b      	ldr	r3, [r5, #0]
 8017b0a:	b103      	cbz	r3, 8017b0e <_lseek_r+0x1e>
 8017b0c:	6023      	str	r3, [r4, #0]
 8017b0e:	bd38      	pop	{r3, r4, r5, pc}
 8017b10:	2000f334 	.word	0x2000f334

08017b14 <_read_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d07      	ldr	r5, [pc, #28]	@ (8017b34 <_read_r+0x20>)
 8017b18:	4604      	mov	r4, r0
 8017b1a:	4608      	mov	r0, r1
 8017b1c:	4611      	mov	r1, r2
 8017b1e:	2200      	movs	r2, #0
 8017b20:	602a      	str	r2, [r5, #0]
 8017b22:	461a      	mov	r2, r3
 8017b24:	f7e9 f95f 	bl	8000de6 <_read>
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	d102      	bne.n	8017b32 <_read_r+0x1e>
 8017b2c:	682b      	ldr	r3, [r5, #0]
 8017b2e:	b103      	cbz	r3, 8017b32 <_read_r+0x1e>
 8017b30:	6023      	str	r3, [r4, #0]
 8017b32:	bd38      	pop	{r3, r4, r5, pc}
 8017b34:	2000f334 	.word	0x2000f334

08017b38 <_write_r>:
 8017b38:	b538      	push	{r3, r4, r5, lr}
 8017b3a:	4d07      	ldr	r5, [pc, #28]	@ (8017b58 <_write_r+0x20>)
 8017b3c:	4604      	mov	r4, r0
 8017b3e:	4608      	mov	r0, r1
 8017b40:	4611      	mov	r1, r2
 8017b42:	2200      	movs	r2, #0
 8017b44:	602a      	str	r2, [r5, #0]
 8017b46:	461a      	mov	r2, r3
 8017b48:	f7e9 f96a 	bl	8000e20 <_write>
 8017b4c:	1c43      	adds	r3, r0, #1
 8017b4e:	d102      	bne.n	8017b56 <_write_r+0x1e>
 8017b50:	682b      	ldr	r3, [r5, #0]
 8017b52:	b103      	cbz	r3, 8017b56 <_write_r+0x1e>
 8017b54:	6023      	str	r3, [r4, #0]
 8017b56:	bd38      	pop	{r3, r4, r5, pc}
 8017b58:	2000f334 	.word	0x2000f334

08017b5c <__libc_init_array>:
 8017b5c:	b570      	push	{r4, r5, r6, lr}
 8017b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8017b94 <__libc_init_array+0x38>)
 8017b60:	4c0d      	ldr	r4, [pc, #52]	@ (8017b98 <__libc_init_array+0x3c>)
 8017b62:	1b64      	subs	r4, r4, r5
 8017b64:	10a4      	asrs	r4, r4, #2
 8017b66:	2600      	movs	r6, #0
 8017b68:	42a6      	cmp	r6, r4
 8017b6a:	d109      	bne.n	8017b80 <__libc_init_array+0x24>
 8017b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8017b9c <__libc_init_array+0x40>)
 8017b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8017ba0 <__libc_init_array+0x44>)
 8017b70:	f000 ffd8 	bl	8018b24 <_init>
 8017b74:	1b64      	subs	r4, r4, r5
 8017b76:	10a4      	asrs	r4, r4, #2
 8017b78:	2600      	movs	r6, #0
 8017b7a:	42a6      	cmp	r6, r4
 8017b7c:	d105      	bne.n	8017b8a <__libc_init_array+0x2e>
 8017b7e:	bd70      	pop	{r4, r5, r6, pc}
 8017b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b84:	4798      	blx	r3
 8017b86:	3601      	adds	r6, #1
 8017b88:	e7ee      	b.n	8017b68 <__libc_init_array+0xc>
 8017b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b8e:	4798      	blx	r3
 8017b90:	3601      	adds	r6, #1
 8017b92:	e7f2      	b.n	8017b7a <__libc_init_array+0x1e>
 8017b94:	0801d2f4 	.word	0x0801d2f4
 8017b98:	0801d2f4 	.word	0x0801d2f4
 8017b9c:	0801d2f4 	.word	0x0801d2f4
 8017ba0:	0801d2f8 	.word	0x0801d2f8

08017ba4 <__retarget_lock_init_recursive>:
 8017ba4:	4770      	bx	lr

08017ba6 <__retarget_lock_acquire_recursive>:
 8017ba6:	4770      	bx	lr

08017ba8 <__retarget_lock_release_recursive>:
 8017ba8:	4770      	bx	lr

08017baa <memcpy>:
 8017baa:	440a      	add	r2, r1
 8017bac:	4291      	cmp	r1, r2
 8017bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8017bb2:	d100      	bne.n	8017bb6 <memcpy+0xc>
 8017bb4:	4770      	bx	lr
 8017bb6:	b510      	push	{r4, lr}
 8017bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017bc0:	4291      	cmp	r1, r2
 8017bc2:	d1f9      	bne.n	8017bb8 <memcpy+0xe>
 8017bc4:	bd10      	pop	{r4, pc}
	...

08017bc8 <__assert_func>:
 8017bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bca:	4614      	mov	r4, r2
 8017bcc:	461a      	mov	r2, r3
 8017bce:	4b09      	ldr	r3, [pc, #36]	@ (8017bf4 <__assert_func+0x2c>)
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4605      	mov	r5, r0
 8017bd4:	68d8      	ldr	r0, [r3, #12]
 8017bd6:	b954      	cbnz	r4, 8017bee <__assert_func+0x26>
 8017bd8:	4b07      	ldr	r3, [pc, #28]	@ (8017bf8 <__assert_func+0x30>)
 8017bda:	461c      	mov	r4, r3
 8017bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017be0:	9100      	str	r1, [sp, #0]
 8017be2:	462b      	mov	r3, r5
 8017be4:	4905      	ldr	r1, [pc, #20]	@ (8017bfc <__assert_func+0x34>)
 8017be6:	f000 fde1 	bl	80187ac <fiprintf>
 8017bea:	f000 fe95 	bl	8018918 <abort>
 8017bee:	4b04      	ldr	r3, [pc, #16]	@ (8017c00 <__assert_func+0x38>)
 8017bf0:	e7f4      	b.n	8017bdc <__assert_func+0x14>
 8017bf2:	bf00      	nop
 8017bf4:	2000003c 	.word	0x2000003c
 8017bf8:	0801d2b6 	.word	0x0801d2b6
 8017bfc:	0801d288 	.word	0x0801d288
 8017c00:	0801d27b 	.word	0x0801d27b

08017c04 <_free_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4605      	mov	r5, r0
 8017c08:	2900      	cmp	r1, #0
 8017c0a:	d041      	beq.n	8017c90 <_free_r+0x8c>
 8017c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c10:	1f0c      	subs	r4, r1, #4
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	bfb8      	it	lt
 8017c16:	18e4      	addlt	r4, r4, r3
 8017c18:	f000 f8e8 	bl	8017dec <__malloc_lock>
 8017c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8017c94 <_free_r+0x90>)
 8017c1e:	6813      	ldr	r3, [r2, #0]
 8017c20:	b933      	cbnz	r3, 8017c30 <_free_r+0x2c>
 8017c22:	6063      	str	r3, [r4, #4]
 8017c24:	6014      	str	r4, [r2, #0]
 8017c26:	4628      	mov	r0, r5
 8017c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c2c:	f000 b8e4 	b.w	8017df8 <__malloc_unlock>
 8017c30:	42a3      	cmp	r3, r4
 8017c32:	d908      	bls.n	8017c46 <_free_r+0x42>
 8017c34:	6820      	ldr	r0, [r4, #0]
 8017c36:	1821      	adds	r1, r4, r0
 8017c38:	428b      	cmp	r3, r1
 8017c3a:	bf01      	itttt	eq
 8017c3c:	6819      	ldreq	r1, [r3, #0]
 8017c3e:	685b      	ldreq	r3, [r3, #4]
 8017c40:	1809      	addeq	r1, r1, r0
 8017c42:	6021      	streq	r1, [r4, #0]
 8017c44:	e7ed      	b.n	8017c22 <_free_r+0x1e>
 8017c46:	461a      	mov	r2, r3
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	b10b      	cbz	r3, 8017c50 <_free_r+0x4c>
 8017c4c:	42a3      	cmp	r3, r4
 8017c4e:	d9fa      	bls.n	8017c46 <_free_r+0x42>
 8017c50:	6811      	ldr	r1, [r2, #0]
 8017c52:	1850      	adds	r0, r2, r1
 8017c54:	42a0      	cmp	r0, r4
 8017c56:	d10b      	bne.n	8017c70 <_free_r+0x6c>
 8017c58:	6820      	ldr	r0, [r4, #0]
 8017c5a:	4401      	add	r1, r0
 8017c5c:	1850      	adds	r0, r2, r1
 8017c5e:	4283      	cmp	r3, r0
 8017c60:	6011      	str	r1, [r2, #0]
 8017c62:	d1e0      	bne.n	8017c26 <_free_r+0x22>
 8017c64:	6818      	ldr	r0, [r3, #0]
 8017c66:	685b      	ldr	r3, [r3, #4]
 8017c68:	6053      	str	r3, [r2, #4]
 8017c6a:	4408      	add	r0, r1
 8017c6c:	6010      	str	r0, [r2, #0]
 8017c6e:	e7da      	b.n	8017c26 <_free_r+0x22>
 8017c70:	d902      	bls.n	8017c78 <_free_r+0x74>
 8017c72:	230c      	movs	r3, #12
 8017c74:	602b      	str	r3, [r5, #0]
 8017c76:	e7d6      	b.n	8017c26 <_free_r+0x22>
 8017c78:	6820      	ldr	r0, [r4, #0]
 8017c7a:	1821      	adds	r1, r4, r0
 8017c7c:	428b      	cmp	r3, r1
 8017c7e:	bf04      	itt	eq
 8017c80:	6819      	ldreq	r1, [r3, #0]
 8017c82:	685b      	ldreq	r3, [r3, #4]
 8017c84:	6063      	str	r3, [r4, #4]
 8017c86:	bf04      	itt	eq
 8017c88:	1809      	addeq	r1, r1, r0
 8017c8a:	6021      	streq	r1, [r4, #0]
 8017c8c:	6054      	str	r4, [r2, #4]
 8017c8e:	e7ca      	b.n	8017c26 <_free_r+0x22>
 8017c90:	bd38      	pop	{r3, r4, r5, pc}
 8017c92:	bf00      	nop
 8017c94:	2000f340 	.word	0x2000f340

08017c98 <malloc>:
 8017c98:	4b02      	ldr	r3, [pc, #8]	@ (8017ca4 <malloc+0xc>)
 8017c9a:	4601      	mov	r1, r0
 8017c9c:	6818      	ldr	r0, [r3, #0]
 8017c9e:	f000 b825 	b.w	8017cec <_malloc_r>
 8017ca2:	bf00      	nop
 8017ca4:	2000003c 	.word	0x2000003c

08017ca8 <sbrk_aligned>:
 8017ca8:	b570      	push	{r4, r5, r6, lr}
 8017caa:	4e0f      	ldr	r6, [pc, #60]	@ (8017ce8 <sbrk_aligned+0x40>)
 8017cac:	460c      	mov	r4, r1
 8017cae:	6831      	ldr	r1, [r6, #0]
 8017cb0:	4605      	mov	r5, r0
 8017cb2:	b911      	cbnz	r1, 8017cba <sbrk_aligned+0x12>
 8017cb4:	f000 fe20 	bl	80188f8 <_sbrk_r>
 8017cb8:	6030      	str	r0, [r6, #0]
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f000 fe1b 	bl	80188f8 <_sbrk_r>
 8017cc2:	1c43      	adds	r3, r0, #1
 8017cc4:	d103      	bne.n	8017cce <sbrk_aligned+0x26>
 8017cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8017cca:	4620      	mov	r0, r4
 8017ccc:	bd70      	pop	{r4, r5, r6, pc}
 8017cce:	1cc4      	adds	r4, r0, #3
 8017cd0:	f024 0403 	bic.w	r4, r4, #3
 8017cd4:	42a0      	cmp	r0, r4
 8017cd6:	d0f8      	beq.n	8017cca <sbrk_aligned+0x22>
 8017cd8:	1a21      	subs	r1, r4, r0
 8017cda:	4628      	mov	r0, r5
 8017cdc:	f000 fe0c 	bl	80188f8 <_sbrk_r>
 8017ce0:	3001      	adds	r0, #1
 8017ce2:	d1f2      	bne.n	8017cca <sbrk_aligned+0x22>
 8017ce4:	e7ef      	b.n	8017cc6 <sbrk_aligned+0x1e>
 8017ce6:	bf00      	nop
 8017ce8:	2000f33c 	.word	0x2000f33c

08017cec <_malloc_r>:
 8017cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cf0:	1ccd      	adds	r5, r1, #3
 8017cf2:	f025 0503 	bic.w	r5, r5, #3
 8017cf6:	3508      	adds	r5, #8
 8017cf8:	2d0c      	cmp	r5, #12
 8017cfa:	bf38      	it	cc
 8017cfc:	250c      	movcc	r5, #12
 8017cfe:	2d00      	cmp	r5, #0
 8017d00:	4606      	mov	r6, r0
 8017d02:	db01      	blt.n	8017d08 <_malloc_r+0x1c>
 8017d04:	42a9      	cmp	r1, r5
 8017d06:	d904      	bls.n	8017d12 <_malloc_r+0x26>
 8017d08:	230c      	movs	r3, #12
 8017d0a:	6033      	str	r3, [r6, #0]
 8017d0c:	2000      	movs	r0, #0
 8017d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017de8 <_malloc_r+0xfc>
 8017d16:	f000 f869 	bl	8017dec <__malloc_lock>
 8017d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8017d1e:	461c      	mov	r4, r3
 8017d20:	bb44      	cbnz	r4, 8017d74 <_malloc_r+0x88>
 8017d22:	4629      	mov	r1, r5
 8017d24:	4630      	mov	r0, r6
 8017d26:	f7ff ffbf 	bl	8017ca8 <sbrk_aligned>
 8017d2a:	1c43      	adds	r3, r0, #1
 8017d2c:	4604      	mov	r4, r0
 8017d2e:	d158      	bne.n	8017de2 <_malloc_r+0xf6>
 8017d30:	f8d8 4000 	ldr.w	r4, [r8]
 8017d34:	4627      	mov	r7, r4
 8017d36:	2f00      	cmp	r7, #0
 8017d38:	d143      	bne.n	8017dc2 <_malloc_r+0xd6>
 8017d3a:	2c00      	cmp	r4, #0
 8017d3c:	d04b      	beq.n	8017dd6 <_malloc_r+0xea>
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	4639      	mov	r1, r7
 8017d42:	4630      	mov	r0, r6
 8017d44:	eb04 0903 	add.w	r9, r4, r3
 8017d48:	f000 fdd6 	bl	80188f8 <_sbrk_r>
 8017d4c:	4581      	cmp	r9, r0
 8017d4e:	d142      	bne.n	8017dd6 <_malloc_r+0xea>
 8017d50:	6821      	ldr	r1, [r4, #0]
 8017d52:	1a6d      	subs	r5, r5, r1
 8017d54:	4629      	mov	r1, r5
 8017d56:	4630      	mov	r0, r6
 8017d58:	f7ff ffa6 	bl	8017ca8 <sbrk_aligned>
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	d03a      	beq.n	8017dd6 <_malloc_r+0xea>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	442b      	add	r3, r5
 8017d64:	6023      	str	r3, [r4, #0]
 8017d66:	f8d8 3000 	ldr.w	r3, [r8]
 8017d6a:	685a      	ldr	r2, [r3, #4]
 8017d6c:	bb62      	cbnz	r2, 8017dc8 <_malloc_r+0xdc>
 8017d6e:	f8c8 7000 	str.w	r7, [r8]
 8017d72:	e00f      	b.n	8017d94 <_malloc_r+0xa8>
 8017d74:	6822      	ldr	r2, [r4, #0]
 8017d76:	1b52      	subs	r2, r2, r5
 8017d78:	d420      	bmi.n	8017dbc <_malloc_r+0xd0>
 8017d7a:	2a0b      	cmp	r2, #11
 8017d7c:	d917      	bls.n	8017dae <_malloc_r+0xc2>
 8017d7e:	1961      	adds	r1, r4, r5
 8017d80:	42a3      	cmp	r3, r4
 8017d82:	6025      	str	r5, [r4, #0]
 8017d84:	bf18      	it	ne
 8017d86:	6059      	strne	r1, [r3, #4]
 8017d88:	6863      	ldr	r3, [r4, #4]
 8017d8a:	bf08      	it	eq
 8017d8c:	f8c8 1000 	streq.w	r1, [r8]
 8017d90:	5162      	str	r2, [r4, r5]
 8017d92:	604b      	str	r3, [r1, #4]
 8017d94:	4630      	mov	r0, r6
 8017d96:	f000 f82f 	bl	8017df8 <__malloc_unlock>
 8017d9a:	f104 000b 	add.w	r0, r4, #11
 8017d9e:	1d23      	adds	r3, r4, #4
 8017da0:	f020 0007 	bic.w	r0, r0, #7
 8017da4:	1ac2      	subs	r2, r0, r3
 8017da6:	bf1c      	itt	ne
 8017da8:	1a1b      	subne	r3, r3, r0
 8017daa:	50a3      	strne	r3, [r4, r2]
 8017dac:	e7af      	b.n	8017d0e <_malloc_r+0x22>
 8017dae:	6862      	ldr	r2, [r4, #4]
 8017db0:	42a3      	cmp	r3, r4
 8017db2:	bf0c      	ite	eq
 8017db4:	f8c8 2000 	streq.w	r2, [r8]
 8017db8:	605a      	strne	r2, [r3, #4]
 8017dba:	e7eb      	b.n	8017d94 <_malloc_r+0xa8>
 8017dbc:	4623      	mov	r3, r4
 8017dbe:	6864      	ldr	r4, [r4, #4]
 8017dc0:	e7ae      	b.n	8017d20 <_malloc_r+0x34>
 8017dc2:	463c      	mov	r4, r7
 8017dc4:	687f      	ldr	r7, [r7, #4]
 8017dc6:	e7b6      	b.n	8017d36 <_malloc_r+0x4a>
 8017dc8:	461a      	mov	r2, r3
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	42a3      	cmp	r3, r4
 8017dce:	d1fb      	bne.n	8017dc8 <_malloc_r+0xdc>
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	6053      	str	r3, [r2, #4]
 8017dd4:	e7de      	b.n	8017d94 <_malloc_r+0xa8>
 8017dd6:	230c      	movs	r3, #12
 8017dd8:	6033      	str	r3, [r6, #0]
 8017dda:	4630      	mov	r0, r6
 8017ddc:	f000 f80c 	bl	8017df8 <__malloc_unlock>
 8017de0:	e794      	b.n	8017d0c <_malloc_r+0x20>
 8017de2:	6005      	str	r5, [r0, #0]
 8017de4:	e7d6      	b.n	8017d94 <_malloc_r+0xa8>
 8017de6:	bf00      	nop
 8017de8:	2000f340 	.word	0x2000f340

08017dec <__malloc_lock>:
 8017dec:	4801      	ldr	r0, [pc, #4]	@ (8017df4 <__malloc_lock+0x8>)
 8017dee:	f7ff beda 	b.w	8017ba6 <__retarget_lock_acquire_recursive>
 8017df2:	bf00      	nop
 8017df4:	2000f338 	.word	0x2000f338

08017df8 <__malloc_unlock>:
 8017df8:	4801      	ldr	r0, [pc, #4]	@ (8017e00 <__malloc_unlock+0x8>)
 8017dfa:	f7ff bed5 	b.w	8017ba8 <__retarget_lock_release_recursive>
 8017dfe:	bf00      	nop
 8017e00:	2000f338 	.word	0x2000f338

08017e04 <__ssputs_r>:
 8017e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e08:	688e      	ldr	r6, [r1, #8]
 8017e0a:	461f      	mov	r7, r3
 8017e0c:	42be      	cmp	r6, r7
 8017e0e:	680b      	ldr	r3, [r1, #0]
 8017e10:	4682      	mov	sl, r0
 8017e12:	460c      	mov	r4, r1
 8017e14:	4690      	mov	r8, r2
 8017e16:	d82d      	bhi.n	8017e74 <__ssputs_r+0x70>
 8017e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e20:	d026      	beq.n	8017e70 <__ssputs_r+0x6c>
 8017e22:	6965      	ldr	r5, [r4, #20]
 8017e24:	6909      	ldr	r1, [r1, #16]
 8017e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e2a:	eba3 0901 	sub.w	r9, r3, r1
 8017e2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e32:	1c7b      	adds	r3, r7, #1
 8017e34:	444b      	add	r3, r9
 8017e36:	106d      	asrs	r5, r5, #1
 8017e38:	429d      	cmp	r5, r3
 8017e3a:	bf38      	it	cc
 8017e3c:	461d      	movcc	r5, r3
 8017e3e:	0553      	lsls	r3, r2, #21
 8017e40:	d527      	bpl.n	8017e92 <__ssputs_r+0x8e>
 8017e42:	4629      	mov	r1, r5
 8017e44:	f7ff ff52 	bl	8017cec <_malloc_r>
 8017e48:	4606      	mov	r6, r0
 8017e4a:	b360      	cbz	r0, 8017ea6 <__ssputs_r+0xa2>
 8017e4c:	6921      	ldr	r1, [r4, #16]
 8017e4e:	464a      	mov	r2, r9
 8017e50:	f7ff feab 	bl	8017baa <memcpy>
 8017e54:	89a3      	ldrh	r3, [r4, #12]
 8017e56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e5e:	81a3      	strh	r3, [r4, #12]
 8017e60:	6126      	str	r6, [r4, #16]
 8017e62:	6165      	str	r5, [r4, #20]
 8017e64:	444e      	add	r6, r9
 8017e66:	eba5 0509 	sub.w	r5, r5, r9
 8017e6a:	6026      	str	r6, [r4, #0]
 8017e6c:	60a5      	str	r5, [r4, #8]
 8017e6e:	463e      	mov	r6, r7
 8017e70:	42be      	cmp	r6, r7
 8017e72:	d900      	bls.n	8017e76 <__ssputs_r+0x72>
 8017e74:	463e      	mov	r6, r7
 8017e76:	6820      	ldr	r0, [r4, #0]
 8017e78:	4632      	mov	r2, r6
 8017e7a:	4641      	mov	r1, r8
 8017e7c:	f7ff fd91 	bl	80179a2 <memmove>
 8017e80:	68a3      	ldr	r3, [r4, #8]
 8017e82:	1b9b      	subs	r3, r3, r6
 8017e84:	60a3      	str	r3, [r4, #8]
 8017e86:	6823      	ldr	r3, [r4, #0]
 8017e88:	4433      	add	r3, r6
 8017e8a:	6023      	str	r3, [r4, #0]
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e92:	462a      	mov	r2, r5
 8017e94:	f000 fd47 	bl	8018926 <_realloc_r>
 8017e98:	4606      	mov	r6, r0
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d1e0      	bne.n	8017e60 <__ssputs_r+0x5c>
 8017e9e:	6921      	ldr	r1, [r4, #16]
 8017ea0:	4650      	mov	r0, sl
 8017ea2:	f7ff feaf 	bl	8017c04 <_free_r>
 8017ea6:	230c      	movs	r3, #12
 8017ea8:	f8ca 3000 	str.w	r3, [sl]
 8017eac:	89a3      	ldrh	r3, [r4, #12]
 8017eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb8:	e7e9      	b.n	8017e8e <__ssputs_r+0x8a>
	...

08017ebc <_svfiprintf_r>:
 8017ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec0:	4698      	mov	r8, r3
 8017ec2:	898b      	ldrh	r3, [r1, #12]
 8017ec4:	061b      	lsls	r3, r3, #24
 8017ec6:	b09d      	sub	sp, #116	@ 0x74
 8017ec8:	4607      	mov	r7, r0
 8017eca:	460d      	mov	r5, r1
 8017ecc:	4614      	mov	r4, r2
 8017ece:	d510      	bpl.n	8017ef2 <_svfiprintf_r+0x36>
 8017ed0:	690b      	ldr	r3, [r1, #16]
 8017ed2:	b973      	cbnz	r3, 8017ef2 <_svfiprintf_r+0x36>
 8017ed4:	2140      	movs	r1, #64	@ 0x40
 8017ed6:	f7ff ff09 	bl	8017cec <_malloc_r>
 8017eda:	6028      	str	r0, [r5, #0]
 8017edc:	6128      	str	r0, [r5, #16]
 8017ede:	b930      	cbnz	r0, 8017eee <_svfiprintf_r+0x32>
 8017ee0:	230c      	movs	r3, #12
 8017ee2:	603b      	str	r3, [r7, #0]
 8017ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ee8:	b01d      	add	sp, #116	@ 0x74
 8017eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eee:	2340      	movs	r3, #64	@ 0x40
 8017ef0:	616b      	str	r3, [r5, #20]
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ef6:	2320      	movs	r3, #32
 8017ef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f00:	2330      	movs	r3, #48	@ 0x30
 8017f02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180a0 <_svfiprintf_r+0x1e4>
 8017f06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f0a:	f04f 0901 	mov.w	r9, #1
 8017f0e:	4623      	mov	r3, r4
 8017f10:	469a      	mov	sl, r3
 8017f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f16:	b10a      	cbz	r2, 8017f1c <_svfiprintf_r+0x60>
 8017f18:	2a25      	cmp	r2, #37	@ 0x25
 8017f1a:	d1f9      	bne.n	8017f10 <_svfiprintf_r+0x54>
 8017f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8017f20:	d00b      	beq.n	8017f3a <_svfiprintf_r+0x7e>
 8017f22:	465b      	mov	r3, fp
 8017f24:	4622      	mov	r2, r4
 8017f26:	4629      	mov	r1, r5
 8017f28:	4638      	mov	r0, r7
 8017f2a:	f7ff ff6b 	bl	8017e04 <__ssputs_r>
 8017f2e:	3001      	adds	r0, #1
 8017f30:	f000 80a7 	beq.w	8018082 <_svfiprintf_r+0x1c6>
 8017f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f36:	445a      	add	r2, fp
 8017f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f000 809f 	beq.w	8018082 <_svfiprintf_r+0x1c6>
 8017f44:	2300      	movs	r3, #0
 8017f46:	f04f 32ff 	mov.w	r2, #4294967295
 8017f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f4e:	f10a 0a01 	add.w	sl, sl, #1
 8017f52:	9304      	str	r3, [sp, #16]
 8017f54:	9307      	str	r3, [sp, #28]
 8017f56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f5c:	4654      	mov	r4, sl
 8017f5e:	2205      	movs	r2, #5
 8017f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f64:	484e      	ldr	r0, [pc, #312]	@ (80180a0 <_svfiprintf_r+0x1e4>)
 8017f66:	f7e8 f96b 	bl	8000240 <memchr>
 8017f6a:	9a04      	ldr	r2, [sp, #16]
 8017f6c:	b9d8      	cbnz	r0, 8017fa6 <_svfiprintf_r+0xea>
 8017f6e:	06d0      	lsls	r0, r2, #27
 8017f70:	bf44      	itt	mi
 8017f72:	2320      	movmi	r3, #32
 8017f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f78:	0711      	lsls	r1, r2, #28
 8017f7a:	bf44      	itt	mi
 8017f7c:	232b      	movmi	r3, #43	@ 0x2b
 8017f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f82:	f89a 3000 	ldrb.w	r3, [sl]
 8017f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8017f88:	d015      	beq.n	8017fb6 <_svfiprintf_r+0xfa>
 8017f8a:	9a07      	ldr	r2, [sp, #28]
 8017f8c:	4654      	mov	r4, sl
 8017f8e:	2000      	movs	r0, #0
 8017f90:	f04f 0c0a 	mov.w	ip, #10
 8017f94:	4621      	mov	r1, r4
 8017f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f9a:	3b30      	subs	r3, #48	@ 0x30
 8017f9c:	2b09      	cmp	r3, #9
 8017f9e:	d94b      	bls.n	8018038 <_svfiprintf_r+0x17c>
 8017fa0:	b1b0      	cbz	r0, 8017fd0 <_svfiprintf_r+0x114>
 8017fa2:	9207      	str	r2, [sp, #28]
 8017fa4:	e014      	b.n	8017fd0 <_svfiprintf_r+0x114>
 8017fa6:	eba0 0308 	sub.w	r3, r0, r8
 8017faa:	fa09 f303 	lsl.w	r3, r9, r3
 8017fae:	4313      	orrs	r3, r2
 8017fb0:	9304      	str	r3, [sp, #16]
 8017fb2:	46a2      	mov	sl, r4
 8017fb4:	e7d2      	b.n	8017f5c <_svfiprintf_r+0xa0>
 8017fb6:	9b03      	ldr	r3, [sp, #12]
 8017fb8:	1d19      	adds	r1, r3, #4
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	9103      	str	r1, [sp, #12]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	bfbb      	ittet	lt
 8017fc2:	425b      	neglt	r3, r3
 8017fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8017fc8:	9307      	strge	r3, [sp, #28]
 8017fca:	9307      	strlt	r3, [sp, #28]
 8017fcc:	bfb8      	it	lt
 8017fce:	9204      	strlt	r2, [sp, #16]
 8017fd0:	7823      	ldrb	r3, [r4, #0]
 8017fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8017fd4:	d10a      	bne.n	8017fec <_svfiprintf_r+0x130>
 8017fd6:	7863      	ldrb	r3, [r4, #1]
 8017fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fda:	d132      	bne.n	8018042 <_svfiprintf_r+0x186>
 8017fdc:	9b03      	ldr	r3, [sp, #12]
 8017fde:	1d1a      	adds	r2, r3, #4
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	9203      	str	r2, [sp, #12]
 8017fe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017fe8:	3402      	adds	r4, #2
 8017fea:	9305      	str	r3, [sp, #20]
 8017fec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80180b0 <_svfiprintf_r+0x1f4>
 8017ff0:	7821      	ldrb	r1, [r4, #0]
 8017ff2:	2203      	movs	r2, #3
 8017ff4:	4650      	mov	r0, sl
 8017ff6:	f7e8 f923 	bl	8000240 <memchr>
 8017ffa:	b138      	cbz	r0, 801800c <_svfiprintf_r+0x150>
 8017ffc:	9b04      	ldr	r3, [sp, #16]
 8017ffe:	eba0 000a 	sub.w	r0, r0, sl
 8018002:	2240      	movs	r2, #64	@ 0x40
 8018004:	4082      	lsls	r2, r0
 8018006:	4313      	orrs	r3, r2
 8018008:	3401      	adds	r4, #1
 801800a:	9304      	str	r3, [sp, #16]
 801800c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018010:	4824      	ldr	r0, [pc, #144]	@ (80180a4 <_svfiprintf_r+0x1e8>)
 8018012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018016:	2206      	movs	r2, #6
 8018018:	f7e8 f912 	bl	8000240 <memchr>
 801801c:	2800      	cmp	r0, #0
 801801e:	d036      	beq.n	801808e <_svfiprintf_r+0x1d2>
 8018020:	4b21      	ldr	r3, [pc, #132]	@ (80180a8 <_svfiprintf_r+0x1ec>)
 8018022:	bb1b      	cbnz	r3, 801806c <_svfiprintf_r+0x1b0>
 8018024:	9b03      	ldr	r3, [sp, #12]
 8018026:	3307      	adds	r3, #7
 8018028:	f023 0307 	bic.w	r3, r3, #7
 801802c:	3308      	adds	r3, #8
 801802e:	9303      	str	r3, [sp, #12]
 8018030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018032:	4433      	add	r3, r6
 8018034:	9309      	str	r3, [sp, #36]	@ 0x24
 8018036:	e76a      	b.n	8017f0e <_svfiprintf_r+0x52>
 8018038:	fb0c 3202 	mla	r2, ip, r2, r3
 801803c:	460c      	mov	r4, r1
 801803e:	2001      	movs	r0, #1
 8018040:	e7a8      	b.n	8017f94 <_svfiprintf_r+0xd8>
 8018042:	2300      	movs	r3, #0
 8018044:	3401      	adds	r4, #1
 8018046:	9305      	str	r3, [sp, #20]
 8018048:	4619      	mov	r1, r3
 801804a:	f04f 0c0a 	mov.w	ip, #10
 801804e:	4620      	mov	r0, r4
 8018050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018054:	3a30      	subs	r2, #48	@ 0x30
 8018056:	2a09      	cmp	r2, #9
 8018058:	d903      	bls.n	8018062 <_svfiprintf_r+0x1a6>
 801805a:	2b00      	cmp	r3, #0
 801805c:	d0c6      	beq.n	8017fec <_svfiprintf_r+0x130>
 801805e:	9105      	str	r1, [sp, #20]
 8018060:	e7c4      	b.n	8017fec <_svfiprintf_r+0x130>
 8018062:	fb0c 2101 	mla	r1, ip, r1, r2
 8018066:	4604      	mov	r4, r0
 8018068:	2301      	movs	r3, #1
 801806a:	e7f0      	b.n	801804e <_svfiprintf_r+0x192>
 801806c:	ab03      	add	r3, sp, #12
 801806e:	9300      	str	r3, [sp, #0]
 8018070:	462a      	mov	r2, r5
 8018072:	4b0e      	ldr	r3, [pc, #56]	@ (80180ac <_svfiprintf_r+0x1f0>)
 8018074:	a904      	add	r1, sp, #16
 8018076:	4638      	mov	r0, r7
 8018078:	f3af 8000 	nop.w
 801807c:	1c42      	adds	r2, r0, #1
 801807e:	4606      	mov	r6, r0
 8018080:	d1d6      	bne.n	8018030 <_svfiprintf_r+0x174>
 8018082:	89ab      	ldrh	r3, [r5, #12]
 8018084:	065b      	lsls	r3, r3, #25
 8018086:	f53f af2d 	bmi.w	8017ee4 <_svfiprintf_r+0x28>
 801808a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801808c:	e72c      	b.n	8017ee8 <_svfiprintf_r+0x2c>
 801808e:	ab03      	add	r3, sp, #12
 8018090:	9300      	str	r3, [sp, #0]
 8018092:	462a      	mov	r2, r5
 8018094:	4b05      	ldr	r3, [pc, #20]	@ (80180ac <_svfiprintf_r+0x1f0>)
 8018096:	a904      	add	r1, sp, #16
 8018098:	4638      	mov	r0, r7
 801809a:	f000 f9bb 	bl	8018414 <_printf_i>
 801809e:	e7ed      	b.n	801807c <_svfiprintf_r+0x1c0>
 80180a0:	0801d2b7 	.word	0x0801d2b7
 80180a4:	0801d2c1 	.word	0x0801d2c1
 80180a8:	00000000 	.word	0x00000000
 80180ac:	08017e05 	.word	0x08017e05
 80180b0:	0801d2bd 	.word	0x0801d2bd

080180b4 <__sfputc_r>:
 80180b4:	6893      	ldr	r3, [r2, #8]
 80180b6:	3b01      	subs	r3, #1
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	b410      	push	{r4}
 80180bc:	6093      	str	r3, [r2, #8]
 80180be:	da08      	bge.n	80180d2 <__sfputc_r+0x1e>
 80180c0:	6994      	ldr	r4, [r2, #24]
 80180c2:	42a3      	cmp	r3, r4
 80180c4:	db01      	blt.n	80180ca <__sfputc_r+0x16>
 80180c6:	290a      	cmp	r1, #10
 80180c8:	d103      	bne.n	80180d2 <__sfputc_r+0x1e>
 80180ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ce:	f000 bb7f 	b.w	80187d0 <__swbuf_r>
 80180d2:	6813      	ldr	r3, [r2, #0]
 80180d4:	1c58      	adds	r0, r3, #1
 80180d6:	6010      	str	r0, [r2, #0]
 80180d8:	7019      	strb	r1, [r3, #0]
 80180da:	4608      	mov	r0, r1
 80180dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180e0:	4770      	bx	lr

080180e2 <__sfputs_r>:
 80180e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180e4:	4606      	mov	r6, r0
 80180e6:	460f      	mov	r7, r1
 80180e8:	4614      	mov	r4, r2
 80180ea:	18d5      	adds	r5, r2, r3
 80180ec:	42ac      	cmp	r4, r5
 80180ee:	d101      	bne.n	80180f4 <__sfputs_r+0x12>
 80180f0:	2000      	movs	r0, #0
 80180f2:	e007      	b.n	8018104 <__sfputs_r+0x22>
 80180f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180f8:	463a      	mov	r2, r7
 80180fa:	4630      	mov	r0, r6
 80180fc:	f7ff ffda 	bl	80180b4 <__sfputc_r>
 8018100:	1c43      	adds	r3, r0, #1
 8018102:	d1f3      	bne.n	80180ec <__sfputs_r+0xa>
 8018104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018108 <_vfiprintf_r>:
 8018108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801810c:	460d      	mov	r5, r1
 801810e:	b09d      	sub	sp, #116	@ 0x74
 8018110:	4614      	mov	r4, r2
 8018112:	4698      	mov	r8, r3
 8018114:	4606      	mov	r6, r0
 8018116:	b118      	cbz	r0, 8018120 <_vfiprintf_r+0x18>
 8018118:	6a03      	ldr	r3, [r0, #32]
 801811a:	b90b      	cbnz	r3, 8018120 <_vfiprintf_r+0x18>
 801811c:	f7ff fb86 	bl	801782c <__sinit>
 8018120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018122:	07d9      	lsls	r1, r3, #31
 8018124:	d405      	bmi.n	8018132 <_vfiprintf_r+0x2a>
 8018126:	89ab      	ldrh	r3, [r5, #12]
 8018128:	059a      	lsls	r2, r3, #22
 801812a:	d402      	bmi.n	8018132 <_vfiprintf_r+0x2a>
 801812c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801812e:	f7ff fd3a 	bl	8017ba6 <__retarget_lock_acquire_recursive>
 8018132:	89ab      	ldrh	r3, [r5, #12]
 8018134:	071b      	lsls	r3, r3, #28
 8018136:	d501      	bpl.n	801813c <_vfiprintf_r+0x34>
 8018138:	692b      	ldr	r3, [r5, #16]
 801813a:	b99b      	cbnz	r3, 8018164 <_vfiprintf_r+0x5c>
 801813c:	4629      	mov	r1, r5
 801813e:	4630      	mov	r0, r6
 8018140:	f000 fb84 	bl	801884c <__swsetup_r>
 8018144:	b170      	cbz	r0, 8018164 <_vfiprintf_r+0x5c>
 8018146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018148:	07dc      	lsls	r4, r3, #31
 801814a:	d504      	bpl.n	8018156 <_vfiprintf_r+0x4e>
 801814c:	f04f 30ff 	mov.w	r0, #4294967295
 8018150:	b01d      	add	sp, #116	@ 0x74
 8018152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018156:	89ab      	ldrh	r3, [r5, #12]
 8018158:	0598      	lsls	r0, r3, #22
 801815a:	d4f7      	bmi.n	801814c <_vfiprintf_r+0x44>
 801815c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801815e:	f7ff fd23 	bl	8017ba8 <__retarget_lock_release_recursive>
 8018162:	e7f3      	b.n	801814c <_vfiprintf_r+0x44>
 8018164:	2300      	movs	r3, #0
 8018166:	9309      	str	r3, [sp, #36]	@ 0x24
 8018168:	2320      	movs	r3, #32
 801816a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801816e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018172:	2330      	movs	r3, #48	@ 0x30
 8018174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018324 <_vfiprintf_r+0x21c>
 8018178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801817c:	f04f 0901 	mov.w	r9, #1
 8018180:	4623      	mov	r3, r4
 8018182:	469a      	mov	sl, r3
 8018184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018188:	b10a      	cbz	r2, 801818e <_vfiprintf_r+0x86>
 801818a:	2a25      	cmp	r2, #37	@ 0x25
 801818c:	d1f9      	bne.n	8018182 <_vfiprintf_r+0x7a>
 801818e:	ebba 0b04 	subs.w	fp, sl, r4
 8018192:	d00b      	beq.n	80181ac <_vfiprintf_r+0xa4>
 8018194:	465b      	mov	r3, fp
 8018196:	4622      	mov	r2, r4
 8018198:	4629      	mov	r1, r5
 801819a:	4630      	mov	r0, r6
 801819c:	f7ff ffa1 	bl	80180e2 <__sfputs_r>
 80181a0:	3001      	adds	r0, #1
 80181a2:	f000 80a7 	beq.w	80182f4 <_vfiprintf_r+0x1ec>
 80181a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181a8:	445a      	add	r2, fp
 80181aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80181ac:	f89a 3000 	ldrb.w	r3, [sl]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	f000 809f 	beq.w	80182f4 <_vfiprintf_r+0x1ec>
 80181b6:	2300      	movs	r3, #0
 80181b8:	f04f 32ff 	mov.w	r2, #4294967295
 80181bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181c0:	f10a 0a01 	add.w	sl, sl, #1
 80181c4:	9304      	str	r3, [sp, #16]
 80181c6:	9307      	str	r3, [sp, #28]
 80181c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80181ce:	4654      	mov	r4, sl
 80181d0:	2205      	movs	r2, #5
 80181d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181d6:	4853      	ldr	r0, [pc, #332]	@ (8018324 <_vfiprintf_r+0x21c>)
 80181d8:	f7e8 f832 	bl	8000240 <memchr>
 80181dc:	9a04      	ldr	r2, [sp, #16]
 80181de:	b9d8      	cbnz	r0, 8018218 <_vfiprintf_r+0x110>
 80181e0:	06d1      	lsls	r1, r2, #27
 80181e2:	bf44      	itt	mi
 80181e4:	2320      	movmi	r3, #32
 80181e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181ea:	0713      	lsls	r3, r2, #28
 80181ec:	bf44      	itt	mi
 80181ee:	232b      	movmi	r3, #43	@ 0x2b
 80181f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80181f4:	f89a 3000 	ldrb.w	r3, [sl]
 80181f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80181fa:	d015      	beq.n	8018228 <_vfiprintf_r+0x120>
 80181fc:	9a07      	ldr	r2, [sp, #28]
 80181fe:	4654      	mov	r4, sl
 8018200:	2000      	movs	r0, #0
 8018202:	f04f 0c0a 	mov.w	ip, #10
 8018206:	4621      	mov	r1, r4
 8018208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801820c:	3b30      	subs	r3, #48	@ 0x30
 801820e:	2b09      	cmp	r3, #9
 8018210:	d94b      	bls.n	80182aa <_vfiprintf_r+0x1a2>
 8018212:	b1b0      	cbz	r0, 8018242 <_vfiprintf_r+0x13a>
 8018214:	9207      	str	r2, [sp, #28]
 8018216:	e014      	b.n	8018242 <_vfiprintf_r+0x13a>
 8018218:	eba0 0308 	sub.w	r3, r0, r8
 801821c:	fa09 f303 	lsl.w	r3, r9, r3
 8018220:	4313      	orrs	r3, r2
 8018222:	9304      	str	r3, [sp, #16]
 8018224:	46a2      	mov	sl, r4
 8018226:	e7d2      	b.n	80181ce <_vfiprintf_r+0xc6>
 8018228:	9b03      	ldr	r3, [sp, #12]
 801822a:	1d19      	adds	r1, r3, #4
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	9103      	str	r1, [sp, #12]
 8018230:	2b00      	cmp	r3, #0
 8018232:	bfbb      	ittet	lt
 8018234:	425b      	neglt	r3, r3
 8018236:	f042 0202 	orrlt.w	r2, r2, #2
 801823a:	9307      	strge	r3, [sp, #28]
 801823c:	9307      	strlt	r3, [sp, #28]
 801823e:	bfb8      	it	lt
 8018240:	9204      	strlt	r2, [sp, #16]
 8018242:	7823      	ldrb	r3, [r4, #0]
 8018244:	2b2e      	cmp	r3, #46	@ 0x2e
 8018246:	d10a      	bne.n	801825e <_vfiprintf_r+0x156>
 8018248:	7863      	ldrb	r3, [r4, #1]
 801824a:	2b2a      	cmp	r3, #42	@ 0x2a
 801824c:	d132      	bne.n	80182b4 <_vfiprintf_r+0x1ac>
 801824e:	9b03      	ldr	r3, [sp, #12]
 8018250:	1d1a      	adds	r2, r3, #4
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	9203      	str	r2, [sp, #12]
 8018256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801825a:	3402      	adds	r4, #2
 801825c:	9305      	str	r3, [sp, #20]
 801825e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018334 <_vfiprintf_r+0x22c>
 8018262:	7821      	ldrb	r1, [r4, #0]
 8018264:	2203      	movs	r2, #3
 8018266:	4650      	mov	r0, sl
 8018268:	f7e7 ffea 	bl	8000240 <memchr>
 801826c:	b138      	cbz	r0, 801827e <_vfiprintf_r+0x176>
 801826e:	9b04      	ldr	r3, [sp, #16]
 8018270:	eba0 000a 	sub.w	r0, r0, sl
 8018274:	2240      	movs	r2, #64	@ 0x40
 8018276:	4082      	lsls	r2, r0
 8018278:	4313      	orrs	r3, r2
 801827a:	3401      	adds	r4, #1
 801827c:	9304      	str	r3, [sp, #16]
 801827e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018282:	4829      	ldr	r0, [pc, #164]	@ (8018328 <_vfiprintf_r+0x220>)
 8018284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018288:	2206      	movs	r2, #6
 801828a:	f7e7 ffd9 	bl	8000240 <memchr>
 801828e:	2800      	cmp	r0, #0
 8018290:	d03f      	beq.n	8018312 <_vfiprintf_r+0x20a>
 8018292:	4b26      	ldr	r3, [pc, #152]	@ (801832c <_vfiprintf_r+0x224>)
 8018294:	bb1b      	cbnz	r3, 80182de <_vfiprintf_r+0x1d6>
 8018296:	9b03      	ldr	r3, [sp, #12]
 8018298:	3307      	adds	r3, #7
 801829a:	f023 0307 	bic.w	r3, r3, #7
 801829e:	3308      	adds	r3, #8
 80182a0:	9303      	str	r3, [sp, #12]
 80182a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182a4:	443b      	add	r3, r7
 80182a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80182a8:	e76a      	b.n	8018180 <_vfiprintf_r+0x78>
 80182aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80182ae:	460c      	mov	r4, r1
 80182b0:	2001      	movs	r0, #1
 80182b2:	e7a8      	b.n	8018206 <_vfiprintf_r+0xfe>
 80182b4:	2300      	movs	r3, #0
 80182b6:	3401      	adds	r4, #1
 80182b8:	9305      	str	r3, [sp, #20]
 80182ba:	4619      	mov	r1, r3
 80182bc:	f04f 0c0a 	mov.w	ip, #10
 80182c0:	4620      	mov	r0, r4
 80182c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182c6:	3a30      	subs	r2, #48	@ 0x30
 80182c8:	2a09      	cmp	r2, #9
 80182ca:	d903      	bls.n	80182d4 <_vfiprintf_r+0x1cc>
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d0c6      	beq.n	801825e <_vfiprintf_r+0x156>
 80182d0:	9105      	str	r1, [sp, #20]
 80182d2:	e7c4      	b.n	801825e <_vfiprintf_r+0x156>
 80182d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80182d8:	4604      	mov	r4, r0
 80182da:	2301      	movs	r3, #1
 80182dc:	e7f0      	b.n	80182c0 <_vfiprintf_r+0x1b8>
 80182de:	ab03      	add	r3, sp, #12
 80182e0:	9300      	str	r3, [sp, #0]
 80182e2:	462a      	mov	r2, r5
 80182e4:	4b12      	ldr	r3, [pc, #72]	@ (8018330 <_vfiprintf_r+0x228>)
 80182e6:	a904      	add	r1, sp, #16
 80182e8:	4630      	mov	r0, r6
 80182ea:	f3af 8000 	nop.w
 80182ee:	4607      	mov	r7, r0
 80182f0:	1c78      	adds	r0, r7, #1
 80182f2:	d1d6      	bne.n	80182a2 <_vfiprintf_r+0x19a>
 80182f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80182f6:	07d9      	lsls	r1, r3, #31
 80182f8:	d405      	bmi.n	8018306 <_vfiprintf_r+0x1fe>
 80182fa:	89ab      	ldrh	r3, [r5, #12]
 80182fc:	059a      	lsls	r2, r3, #22
 80182fe:	d402      	bmi.n	8018306 <_vfiprintf_r+0x1fe>
 8018300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018302:	f7ff fc51 	bl	8017ba8 <__retarget_lock_release_recursive>
 8018306:	89ab      	ldrh	r3, [r5, #12]
 8018308:	065b      	lsls	r3, r3, #25
 801830a:	f53f af1f 	bmi.w	801814c <_vfiprintf_r+0x44>
 801830e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018310:	e71e      	b.n	8018150 <_vfiprintf_r+0x48>
 8018312:	ab03      	add	r3, sp, #12
 8018314:	9300      	str	r3, [sp, #0]
 8018316:	462a      	mov	r2, r5
 8018318:	4b05      	ldr	r3, [pc, #20]	@ (8018330 <_vfiprintf_r+0x228>)
 801831a:	a904      	add	r1, sp, #16
 801831c:	4630      	mov	r0, r6
 801831e:	f000 f879 	bl	8018414 <_printf_i>
 8018322:	e7e4      	b.n	80182ee <_vfiprintf_r+0x1e6>
 8018324:	0801d2b7 	.word	0x0801d2b7
 8018328:	0801d2c1 	.word	0x0801d2c1
 801832c:	00000000 	.word	0x00000000
 8018330:	080180e3 	.word	0x080180e3
 8018334:	0801d2bd 	.word	0x0801d2bd

08018338 <_printf_common>:
 8018338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801833c:	4616      	mov	r6, r2
 801833e:	4698      	mov	r8, r3
 8018340:	688a      	ldr	r2, [r1, #8]
 8018342:	690b      	ldr	r3, [r1, #16]
 8018344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018348:	4293      	cmp	r3, r2
 801834a:	bfb8      	it	lt
 801834c:	4613      	movlt	r3, r2
 801834e:	6033      	str	r3, [r6, #0]
 8018350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018354:	4607      	mov	r7, r0
 8018356:	460c      	mov	r4, r1
 8018358:	b10a      	cbz	r2, 801835e <_printf_common+0x26>
 801835a:	3301      	adds	r3, #1
 801835c:	6033      	str	r3, [r6, #0]
 801835e:	6823      	ldr	r3, [r4, #0]
 8018360:	0699      	lsls	r1, r3, #26
 8018362:	bf42      	ittt	mi
 8018364:	6833      	ldrmi	r3, [r6, #0]
 8018366:	3302      	addmi	r3, #2
 8018368:	6033      	strmi	r3, [r6, #0]
 801836a:	6825      	ldr	r5, [r4, #0]
 801836c:	f015 0506 	ands.w	r5, r5, #6
 8018370:	d106      	bne.n	8018380 <_printf_common+0x48>
 8018372:	f104 0a19 	add.w	sl, r4, #25
 8018376:	68e3      	ldr	r3, [r4, #12]
 8018378:	6832      	ldr	r2, [r6, #0]
 801837a:	1a9b      	subs	r3, r3, r2
 801837c:	42ab      	cmp	r3, r5
 801837e:	dc26      	bgt.n	80183ce <_printf_common+0x96>
 8018380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018384:	6822      	ldr	r2, [r4, #0]
 8018386:	3b00      	subs	r3, #0
 8018388:	bf18      	it	ne
 801838a:	2301      	movne	r3, #1
 801838c:	0692      	lsls	r2, r2, #26
 801838e:	d42b      	bmi.n	80183e8 <_printf_common+0xb0>
 8018390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018394:	4641      	mov	r1, r8
 8018396:	4638      	mov	r0, r7
 8018398:	47c8      	blx	r9
 801839a:	3001      	adds	r0, #1
 801839c:	d01e      	beq.n	80183dc <_printf_common+0xa4>
 801839e:	6823      	ldr	r3, [r4, #0]
 80183a0:	6922      	ldr	r2, [r4, #16]
 80183a2:	f003 0306 	and.w	r3, r3, #6
 80183a6:	2b04      	cmp	r3, #4
 80183a8:	bf02      	ittt	eq
 80183aa:	68e5      	ldreq	r5, [r4, #12]
 80183ac:	6833      	ldreq	r3, [r6, #0]
 80183ae:	1aed      	subeq	r5, r5, r3
 80183b0:	68a3      	ldr	r3, [r4, #8]
 80183b2:	bf0c      	ite	eq
 80183b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183b8:	2500      	movne	r5, #0
 80183ba:	4293      	cmp	r3, r2
 80183bc:	bfc4      	itt	gt
 80183be:	1a9b      	subgt	r3, r3, r2
 80183c0:	18ed      	addgt	r5, r5, r3
 80183c2:	2600      	movs	r6, #0
 80183c4:	341a      	adds	r4, #26
 80183c6:	42b5      	cmp	r5, r6
 80183c8:	d11a      	bne.n	8018400 <_printf_common+0xc8>
 80183ca:	2000      	movs	r0, #0
 80183cc:	e008      	b.n	80183e0 <_printf_common+0xa8>
 80183ce:	2301      	movs	r3, #1
 80183d0:	4652      	mov	r2, sl
 80183d2:	4641      	mov	r1, r8
 80183d4:	4638      	mov	r0, r7
 80183d6:	47c8      	blx	r9
 80183d8:	3001      	adds	r0, #1
 80183da:	d103      	bne.n	80183e4 <_printf_common+0xac>
 80183dc:	f04f 30ff 	mov.w	r0, #4294967295
 80183e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e4:	3501      	adds	r5, #1
 80183e6:	e7c6      	b.n	8018376 <_printf_common+0x3e>
 80183e8:	18e1      	adds	r1, r4, r3
 80183ea:	1c5a      	adds	r2, r3, #1
 80183ec:	2030      	movs	r0, #48	@ 0x30
 80183ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80183f2:	4422      	add	r2, r4
 80183f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80183f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80183fc:	3302      	adds	r3, #2
 80183fe:	e7c7      	b.n	8018390 <_printf_common+0x58>
 8018400:	2301      	movs	r3, #1
 8018402:	4622      	mov	r2, r4
 8018404:	4641      	mov	r1, r8
 8018406:	4638      	mov	r0, r7
 8018408:	47c8      	blx	r9
 801840a:	3001      	adds	r0, #1
 801840c:	d0e6      	beq.n	80183dc <_printf_common+0xa4>
 801840e:	3601      	adds	r6, #1
 8018410:	e7d9      	b.n	80183c6 <_printf_common+0x8e>
	...

08018414 <_printf_i>:
 8018414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018418:	7e0f      	ldrb	r7, [r1, #24]
 801841a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801841c:	2f78      	cmp	r7, #120	@ 0x78
 801841e:	4691      	mov	r9, r2
 8018420:	4680      	mov	r8, r0
 8018422:	460c      	mov	r4, r1
 8018424:	469a      	mov	sl, r3
 8018426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801842a:	d807      	bhi.n	801843c <_printf_i+0x28>
 801842c:	2f62      	cmp	r7, #98	@ 0x62
 801842e:	d80a      	bhi.n	8018446 <_printf_i+0x32>
 8018430:	2f00      	cmp	r7, #0
 8018432:	f000 80d2 	beq.w	80185da <_printf_i+0x1c6>
 8018436:	2f58      	cmp	r7, #88	@ 0x58
 8018438:	f000 80b9 	beq.w	80185ae <_printf_i+0x19a>
 801843c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018444:	e03a      	b.n	80184bc <_printf_i+0xa8>
 8018446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801844a:	2b15      	cmp	r3, #21
 801844c:	d8f6      	bhi.n	801843c <_printf_i+0x28>
 801844e:	a101      	add	r1, pc, #4	@ (adr r1, 8018454 <_printf_i+0x40>)
 8018450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018454:	080184ad 	.word	0x080184ad
 8018458:	080184c1 	.word	0x080184c1
 801845c:	0801843d 	.word	0x0801843d
 8018460:	0801843d 	.word	0x0801843d
 8018464:	0801843d 	.word	0x0801843d
 8018468:	0801843d 	.word	0x0801843d
 801846c:	080184c1 	.word	0x080184c1
 8018470:	0801843d 	.word	0x0801843d
 8018474:	0801843d 	.word	0x0801843d
 8018478:	0801843d 	.word	0x0801843d
 801847c:	0801843d 	.word	0x0801843d
 8018480:	080185c1 	.word	0x080185c1
 8018484:	080184eb 	.word	0x080184eb
 8018488:	0801857b 	.word	0x0801857b
 801848c:	0801843d 	.word	0x0801843d
 8018490:	0801843d 	.word	0x0801843d
 8018494:	080185e3 	.word	0x080185e3
 8018498:	0801843d 	.word	0x0801843d
 801849c:	080184eb 	.word	0x080184eb
 80184a0:	0801843d 	.word	0x0801843d
 80184a4:	0801843d 	.word	0x0801843d
 80184a8:	08018583 	.word	0x08018583
 80184ac:	6833      	ldr	r3, [r6, #0]
 80184ae:	1d1a      	adds	r2, r3, #4
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	6032      	str	r2, [r6, #0]
 80184b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80184bc:	2301      	movs	r3, #1
 80184be:	e09d      	b.n	80185fc <_printf_i+0x1e8>
 80184c0:	6833      	ldr	r3, [r6, #0]
 80184c2:	6820      	ldr	r0, [r4, #0]
 80184c4:	1d19      	adds	r1, r3, #4
 80184c6:	6031      	str	r1, [r6, #0]
 80184c8:	0606      	lsls	r6, r0, #24
 80184ca:	d501      	bpl.n	80184d0 <_printf_i+0xbc>
 80184cc:	681d      	ldr	r5, [r3, #0]
 80184ce:	e003      	b.n	80184d8 <_printf_i+0xc4>
 80184d0:	0645      	lsls	r5, r0, #25
 80184d2:	d5fb      	bpl.n	80184cc <_printf_i+0xb8>
 80184d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80184d8:	2d00      	cmp	r5, #0
 80184da:	da03      	bge.n	80184e4 <_printf_i+0xd0>
 80184dc:	232d      	movs	r3, #45	@ 0x2d
 80184de:	426d      	negs	r5, r5
 80184e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80184e4:	4859      	ldr	r0, [pc, #356]	@ (801864c <_printf_i+0x238>)
 80184e6:	230a      	movs	r3, #10
 80184e8:	e011      	b.n	801850e <_printf_i+0xfa>
 80184ea:	6821      	ldr	r1, [r4, #0]
 80184ec:	6833      	ldr	r3, [r6, #0]
 80184ee:	0608      	lsls	r0, r1, #24
 80184f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80184f4:	d402      	bmi.n	80184fc <_printf_i+0xe8>
 80184f6:	0649      	lsls	r1, r1, #25
 80184f8:	bf48      	it	mi
 80184fa:	b2ad      	uxthmi	r5, r5
 80184fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80184fe:	4853      	ldr	r0, [pc, #332]	@ (801864c <_printf_i+0x238>)
 8018500:	6033      	str	r3, [r6, #0]
 8018502:	bf14      	ite	ne
 8018504:	230a      	movne	r3, #10
 8018506:	2308      	moveq	r3, #8
 8018508:	2100      	movs	r1, #0
 801850a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801850e:	6866      	ldr	r6, [r4, #4]
 8018510:	60a6      	str	r6, [r4, #8]
 8018512:	2e00      	cmp	r6, #0
 8018514:	bfa2      	ittt	ge
 8018516:	6821      	ldrge	r1, [r4, #0]
 8018518:	f021 0104 	bicge.w	r1, r1, #4
 801851c:	6021      	strge	r1, [r4, #0]
 801851e:	b90d      	cbnz	r5, 8018524 <_printf_i+0x110>
 8018520:	2e00      	cmp	r6, #0
 8018522:	d04b      	beq.n	80185bc <_printf_i+0x1a8>
 8018524:	4616      	mov	r6, r2
 8018526:	fbb5 f1f3 	udiv	r1, r5, r3
 801852a:	fb03 5711 	mls	r7, r3, r1, r5
 801852e:	5dc7      	ldrb	r7, [r0, r7]
 8018530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018534:	462f      	mov	r7, r5
 8018536:	42bb      	cmp	r3, r7
 8018538:	460d      	mov	r5, r1
 801853a:	d9f4      	bls.n	8018526 <_printf_i+0x112>
 801853c:	2b08      	cmp	r3, #8
 801853e:	d10b      	bne.n	8018558 <_printf_i+0x144>
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	07df      	lsls	r7, r3, #31
 8018544:	d508      	bpl.n	8018558 <_printf_i+0x144>
 8018546:	6923      	ldr	r3, [r4, #16]
 8018548:	6861      	ldr	r1, [r4, #4]
 801854a:	4299      	cmp	r1, r3
 801854c:	bfde      	ittt	le
 801854e:	2330      	movle	r3, #48	@ 0x30
 8018550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018554:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018558:	1b92      	subs	r2, r2, r6
 801855a:	6122      	str	r2, [r4, #16]
 801855c:	f8cd a000 	str.w	sl, [sp]
 8018560:	464b      	mov	r3, r9
 8018562:	aa03      	add	r2, sp, #12
 8018564:	4621      	mov	r1, r4
 8018566:	4640      	mov	r0, r8
 8018568:	f7ff fee6 	bl	8018338 <_printf_common>
 801856c:	3001      	adds	r0, #1
 801856e:	d14a      	bne.n	8018606 <_printf_i+0x1f2>
 8018570:	f04f 30ff 	mov.w	r0, #4294967295
 8018574:	b004      	add	sp, #16
 8018576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801857a:	6823      	ldr	r3, [r4, #0]
 801857c:	f043 0320 	orr.w	r3, r3, #32
 8018580:	6023      	str	r3, [r4, #0]
 8018582:	4833      	ldr	r0, [pc, #204]	@ (8018650 <_printf_i+0x23c>)
 8018584:	2778      	movs	r7, #120	@ 0x78
 8018586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801858a:	6823      	ldr	r3, [r4, #0]
 801858c:	6831      	ldr	r1, [r6, #0]
 801858e:	061f      	lsls	r7, r3, #24
 8018590:	f851 5b04 	ldr.w	r5, [r1], #4
 8018594:	d402      	bmi.n	801859c <_printf_i+0x188>
 8018596:	065f      	lsls	r7, r3, #25
 8018598:	bf48      	it	mi
 801859a:	b2ad      	uxthmi	r5, r5
 801859c:	6031      	str	r1, [r6, #0]
 801859e:	07d9      	lsls	r1, r3, #31
 80185a0:	bf44      	itt	mi
 80185a2:	f043 0320 	orrmi.w	r3, r3, #32
 80185a6:	6023      	strmi	r3, [r4, #0]
 80185a8:	b11d      	cbz	r5, 80185b2 <_printf_i+0x19e>
 80185aa:	2310      	movs	r3, #16
 80185ac:	e7ac      	b.n	8018508 <_printf_i+0xf4>
 80185ae:	4827      	ldr	r0, [pc, #156]	@ (801864c <_printf_i+0x238>)
 80185b0:	e7e9      	b.n	8018586 <_printf_i+0x172>
 80185b2:	6823      	ldr	r3, [r4, #0]
 80185b4:	f023 0320 	bic.w	r3, r3, #32
 80185b8:	6023      	str	r3, [r4, #0]
 80185ba:	e7f6      	b.n	80185aa <_printf_i+0x196>
 80185bc:	4616      	mov	r6, r2
 80185be:	e7bd      	b.n	801853c <_printf_i+0x128>
 80185c0:	6833      	ldr	r3, [r6, #0]
 80185c2:	6825      	ldr	r5, [r4, #0]
 80185c4:	6961      	ldr	r1, [r4, #20]
 80185c6:	1d18      	adds	r0, r3, #4
 80185c8:	6030      	str	r0, [r6, #0]
 80185ca:	062e      	lsls	r6, r5, #24
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	d501      	bpl.n	80185d4 <_printf_i+0x1c0>
 80185d0:	6019      	str	r1, [r3, #0]
 80185d2:	e002      	b.n	80185da <_printf_i+0x1c6>
 80185d4:	0668      	lsls	r0, r5, #25
 80185d6:	d5fb      	bpl.n	80185d0 <_printf_i+0x1bc>
 80185d8:	8019      	strh	r1, [r3, #0]
 80185da:	2300      	movs	r3, #0
 80185dc:	6123      	str	r3, [r4, #16]
 80185de:	4616      	mov	r6, r2
 80185e0:	e7bc      	b.n	801855c <_printf_i+0x148>
 80185e2:	6833      	ldr	r3, [r6, #0]
 80185e4:	1d1a      	adds	r2, r3, #4
 80185e6:	6032      	str	r2, [r6, #0]
 80185e8:	681e      	ldr	r6, [r3, #0]
 80185ea:	6862      	ldr	r2, [r4, #4]
 80185ec:	2100      	movs	r1, #0
 80185ee:	4630      	mov	r0, r6
 80185f0:	f7e7 fe26 	bl	8000240 <memchr>
 80185f4:	b108      	cbz	r0, 80185fa <_printf_i+0x1e6>
 80185f6:	1b80      	subs	r0, r0, r6
 80185f8:	6060      	str	r0, [r4, #4]
 80185fa:	6863      	ldr	r3, [r4, #4]
 80185fc:	6123      	str	r3, [r4, #16]
 80185fe:	2300      	movs	r3, #0
 8018600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018604:	e7aa      	b.n	801855c <_printf_i+0x148>
 8018606:	6923      	ldr	r3, [r4, #16]
 8018608:	4632      	mov	r2, r6
 801860a:	4649      	mov	r1, r9
 801860c:	4640      	mov	r0, r8
 801860e:	47d0      	blx	sl
 8018610:	3001      	adds	r0, #1
 8018612:	d0ad      	beq.n	8018570 <_printf_i+0x15c>
 8018614:	6823      	ldr	r3, [r4, #0]
 8018616:	079b      	lsls	r3, r3, #30
 8018618:	d413      	bmi.n	8018642 <_printf_i+0x22e>
 801861a:	68e0      	ldr	r0, [r4, #12]
 801861c:	9b03      	ldr	r3, [sp, #12]
 801861e:	4298      	cmp	r0, r3
 8018620:	bfb8      	it	lt
 8018622:	4618      	movlt	r0, r3
 8018624:	e7a6      	b.n	8018574 <_printf_i+0x160>
 8018626:	2301      	movs	r3, #1
 8018628:	4632      	mov	r2, r6
 801862a:	4649      	mov	r1, r9
 801862c:	4640      	mov	r0, r8
 801862e:	47d0      	blx	sl
 8018630:	3001      	adds	r0, #1
 8018632:	d09d      	beq.n	8018570 <_printf_i+0x15c>
 8018634:	3501      	adds	r5, #1
 8018636:	68e3      	ldr	r3, [r4, #12]
 8018638:	9903      	ldr	r1, [sp, #12]
 801863a:	1a5b      	subs	r3, r3, r1
 801863c:	42ab      	cmp	r3, r5
 801863e:	dcf2      	bgt.n	8018626 <_printf_i+0x212>
 8018640:	e7eb      	b.n	801861a <_printf_i+0x206>
 8018642:	2500      	movs	r5, #0
 8018644:	f104 0619 	add.w	r6, r4, #25
 8018648:	e7f5      	b.n	8018636 <_printf_i+0x222>
 801864a:	bf00      	nop
 801864c:	0801d2c8 	.word	0x0801d2c8
 8018650:	0801d2d9 	.word	0x0801d2d9

08018654 <__sflush_r>:
 8018654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801865c:	0716      	lsls	r6, r2, #28
 801865e:	4605      	mov	r5, r0
 8018660:	460c      	mov	r4, r1
 8018662:	d454      	bmi.n	801870e <__sflush_r+0xba>
 8018664:	684b      	ldr	r3, [r1, #4]
 8018666:	2b00      	cmp	r3, #0
 8018668:	dc02      	bgt.n	8018670 <__sflush_r+0x1c>
 801866a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801866c:	2b00      	cmp	r3, #0
 801866e:	dd48      	ble.n	8018702 <__sflush_r+0xae>
 8018670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018672:	2e00      	cmp	r6, #0
 8018674:	d045      	beq.n	8018702 <__sflush_r+0xae>
 8018676:	2300      	movs	r3, #0
 8018678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801867c:	682f      	ldr	r7, [r5, #0]
 801867e:	6a21      	ldr	r1, [r4, #32]
 8018680:	602b      	str	r3, [r5, #0]
 8018682:	d030      	beq.n	80186e6 <__sflush_r+0x92>
 8018684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018686:	89a3      	ldrh	r3, [r4, #12]
 8018688:	0759      	lsls	r1, r3, #29
 801868a:	d505      	bpl.n	8018698 <__sflush_r+0x44>
 801868c:	6863      	ldr	r3, [r4, #4]
 801868e:	1ad2      	subs	r2, r2, r3
 8018690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018692:	b10b      	cbz	r3, 8018698 <__sflush_r+0x44>
 8018694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018696:	1ad2      	subs	r2, r2, r3
 8018698:	2300      	movs	r3, #0
 801869a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801869c:	6a21      	ldr	r1, [r4, #32]
 801869e:	4628      	mov	r0, r5
 80186a0:	47b0      	blx	r6
 80186a2:	1c43      	adds	r3, r0, #1
 80186a4:	89a3      	ldrh	r3, [r4, #12]
 80186a6:	d106      	bne.n	80186b6 <__sflush_r+0x62>
 80186a8:	6829      	ldr	r1, [r5, #0]
 80186aa:	291d      	cmp	r1, #29
 80186ac:	d82b      	bhi.n	8018706 <__sflush_r+0xb2>
 80186ae:	4a2a      	ldr	r2, [pc, #168]	@ (8018758 <__sflush_r+0x104>)
 80186b0:	410a      	asrs	r2, r1
 80186b2:	07d6      	lsls	r6, r2, #31
 80186b4:	d427      	bmi.n	8018706 <__sflush_r+0xb2>
 80186b6:	2200      	movs	r2, #0
 80186b8:	6062      	str	r2, [r4, #4]
 80186ba:	04d9      	lsls	r1, r3, #19
 80186bc:	6922      	ldr	r2, [r4, #16]
 80186be:	6022      	str	r2, [r4, #0]
 80186c0:	d504      	bpl.n	80186cc <__sflush_r+0x78>
 80186c2:	1c42      	adds	r2, r0, #1
 80186c4:	d101      	bne.n	80186ca <__sflush_r+0x76>
 80186c6:	682b      	ldr	r3, [r5, #0]
 80186c8:	b903      	cbnz	r3, 80186cc <__sflush_r+0x78>
 80186ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80186cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186ce:	602f      	str	r7, [r5, #0]
 80186d0:	b1b9      	cbz	r1, 8018702 <__sflush_r+0xae>
 80186d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186d6:	4299      	cmp	r1, r3
 80186d8:	d002      	beq.n	80186e0 <__sflush_r+0x8c>
 80186da:	4628      	mov	r0, r5
 80186dc:	f7ff fa92 	bl	8017c04 <_free_r>
 80186e0:	2300      	movs	r3, #0
 80186e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80186e4:	e00d      	b.n	8018702 <__sflush_r+0xae>
 80186e6:	2301      	movs	r3, #1
 80186e8:	4628      	mov	r0, r5
 80186ea:	47b0      	blx	r6
 80186ec:	4602      	mov	r2, r0
 80186ee:	1c50      	adds	r0, r2, #1
 80186f0:	d1c9      	bne.n	8018686 <__sflush_r+0x32>
 80186f2:	682b      	ldr	r3, [r5, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d0c6      	beq.n	8018686 <__sflush_r+0x32>
 80186f8:	2b1d      	cmp	r3, #29
 80186fa:	d001      	beq.n	8018700 <__sflush_r+0xac>
 80186fc:	2b16      	cmp	r3, #22
 80186fe:	d11e      	bne.n	801873e <__sflush_r+0xea>
 8018700:	602f      	str	r7, [r5, #0]
 8018702:	2000      	movs	r0, #0
 8018704:	e022      	b.n	801874c <__sflush_r+0xf8>
 8018706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801870a:	b21b      	sxth	r3, r3
 801870c:	e01b      	b.n	8018746 <__sflush_r+0xf2>
 801870e:	690f      	ldr	r7, [r1, #16]
 8018710:	2f00      	cmp	r7, #0
 8018712:	d0f6      	beq.n	8018702 <__sflush_r+0xae>
 8018714:	0793      	lsls	r3, r2, #30
 8018716:	680e      	ldr	r6, [r1, #0]
 8018718:	bf08      	it	eq
 801871a:	694b      	ldreq	r3, [r1, #20]
 801871c:	600f      	str	r7, [r1, #0]
 801871e:	bf18      	it	ne
 8018720:	2300      	movne	r3, #0
 8018722:	eba6 0807 	sub.w	r8, r6, r7
 8018726:	608b      	str	r3, [r1, #8]
 8018728:	f1b8 0f00 	cmp.w	r8, #0
 801872c:	dde9      	ble.n	8018702 <__sflush_r+0xae>
 801872e:	6a21      	ldr	r1, [r4, #32]
 8018730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018732:	4643      	mov	r3, r8
 8018734:	463a      	mov	r2, r7
 8018736:	4628      	mov	r0, r5
 8018738:	47b0      	blx	r6
 801873a:	2800      	cmp	r0, #0
 801873c:	dc08      	bgt.n	8018750 <__sflush_r+0xfc>
 801873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018746:	81a3      	strh	r3, [r4, #12]
 8018748:	f04f 30ff 	mov.w	r0, #4294967295
 801874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018750:	4407      	add	r7, r0
 8018752:	eba8 0800 	sub.w	r8, r8, r0
 8018756:	e7e7      	b.n	8018728 <__sflush_r+0xd4>
 8018758:	dfbffffe 	.word	0xdfbffffe

0801875c <_fflush_r>:
 801875c:	b538      	push	{r3, r4, r5, lr}
 801875e:	690b      	ldr	r3, [r1, #16]
 8018760:	4605      	mov	r5, r0
 8018762:	460c      	mov	r4, r1
 8018764:	b913      	cbnz	r3, 801876c <_fflush_r+0x10>
 8018766:	2500      	movs	r5, #0
 8018768:	4628      	mov	r0, r5
 801876a:	bd38      	pop	{r3, r4, r5, pc}
 801876c:	b118      	cbz	r0, 8018776 <_fflush_r+0x1a>
 801876e:	6a03      	ldr	r3, [r0, #32]
 8018770:	b90b      	cbnz	r3, 8018776 <_fflush_r+0x1a>
 8018772:	f7ff f85b 	bl	801782c <__sinit>
 8018776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d0f3      	beq.n	8018766 <_fflush_r+0xa>
 801877e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018780:	07d0      	lsls	r0, r2, #31
 8018782:	d404      	bmi.n	801878e <_fflush_r+0x32>
 8018784:	0599      	lsls	r1, r3, #22
 8018786:	d402      	bmi.n	801878e <_fflush_r+0x32>
 8018788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801878a:	f7ff fa0c 	bl	8017ba6 <__retarget_lock_acquire_recursive>
 801878e:	4628      	mov	r0, r5
 8018790:	4621      	mov	r1, r4
 8018792:	f7ff ff5f 	bl	8018654 <__sflush_r>
 8018796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018798:	07da      	lsls	r2, r3, #31
 801879a:	4605      	mov	r5, r0
 801879c:	d4e4      	bmi.n	8018768 <_fflush_r+0xc>
 801879e:	89a3      	ldrh	r3, [r4, #12]
 80187a0:	059b      	lsls	r3, r3, #22
 80187a2:	d4e1      	bmi.n	8018768 <_fflush_r+0xc>
 80187a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187a6:	f7ff f9ff 	bl	8017ba8 <__retarget_lock_release_recursive>
 80187aa:	e7dd      	b.n	8018768 <_fflush_r+0xc>

080187ac <fiprintf>:
 80187ac:	b40e      	push	{r1, r2, r3}
 80187ae:	b503      	push	{r0, r1, lr}
 80187b0:	4601      	mov	r1, r0
 80187b2:	ab03      	add	r3, sp, #12
 80187b4:	4805      	ldr	r0, [pc, #20]	@ (80187cc <fiprintf+0x20>)
 80187b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80187ba:	6800      	ldr	r0, [r0, #0]
 80187bc:	9301      	str	r3, [sp, #4]
 80187be:	f7ff fca3 	bl	8018108 <_vfiprintf_r>
 80187c2:	b002      	add	sp, #8
 80187c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80187c8:	b003      	add	sp, #12
 80187ca:	4770      	bx	lr
 80187cc:	2000003c 	.word	0x2000003c

080187d0 <__swbuf_r>:
 80187d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187d2:	460e      	mov	r6, r1
 80187d4:	4614      	mov	r4, r2
 80187d6:	4605      	mov	r5, r0
 80187d8:	b118      	cbz	r0, 80187e2 <__swbuf_r+0x12>
 80187da:	6a03      	ldr	r3, [r0, #32]
 80187dc:	b90b      	cbnz	r3, 80187e2 <__swbuf_r+0x12>
 80187de:	f7ff f825 	bl	801782c <__sinit>
 80187e2:	69a3      	ldr	r3, [r4, #24]
 80187e4:	60a3      	str	r3, [r4, #8]
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	071a      	lsls	r2, r3, #28
 80187ea:	d501      	bpl.n	80187f0 <__swbuf_r+0x20>
 80187ec:	6923      	ldr	r3, [r4, #16]
 80187ee:	b943      	cbnz	r3, 8018802 <__swbuf_r+0x32>
 80187f0:	4621      	mov	r1, r4
 80187f2:	4628      	mov	r0, r5
 80187f4:	f000 f82a 	bl	801884c <__swsetup_r>
 80187f8:	b118      	cbz	r0, 8018802 <__swbuf_r+0x32>
 80187fa:	f04f 37ff 	mov.w	r7, #4294967295
 80187fe:	4638      	mov	r0, r7
 8018800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018802:	6823      	ldr	r3, [r4, #0]
 8018804:	6922      	ldr	r2, [r4, #16]
 8018806:	1a98      	subs	r0, r3, r2
 8018808:	6963      	ldr	r3, [r4, #20]
 801880a:	b2f6      	uxtb	r6, r6
 801880c:	4283      	cmp	r3, r0
 801880e:	4637      	mov	r7, r6
 8018810:	dc05      	bgt.n	801881e <__swbuf_r+0x4e>
 8018812:	4621      	mov	r1, r4
 8018814:	4628      	mov	r0, r5
 8018816:	f7ff ffa1 	bl	801875c <_fflush_r>
 801881a:	2800      	cmp	r0, #0
 801881c:	d1ed      	bne.n	80187fa <__swbuf_r+0x2a>
 801881e:	68a3      	ldr	r3, [r4, #8]
 8018820:	3b01      	subs	r3, #1
 8018822:	60a3      	str	r3, [r4, #8]
 8018824:	6823      	ldr	r3, [r4, #0]
 8018826:	1c5a      	adds	r2, r3, #1
 8018828:	6022      	str	r2, [r4, #0]
 801882a:	701e      	strb	r6, [r3, #0]
 801882c:	6962      	ldr	r2, [r4, #20]
 801882e:	1c43      	adds	r3, r0, #1
 8018830:	429a      	cmp	r2, r3
 8018832:	d004      	beq.n	801883e <__swbuf_r+0x6e>
 8018834:	89a3      	ldrh	r3, [r4, #12]
 8018836:	07db      	lsls	r3, r3, #31
 8018838:	d5e1      	bpl.n	80187fe <__swbuf_r+0x2e>
 801883a:	2e0a      	cmp	r6, #10
 801883c:	d1df      	bne.n	80187fe <__swbuf_r+0x2e>
 801883e:	4621      	mov	r1, r4
 8018840:	4628      	mov	r0, r5
 8018842:	f7ff ff8b 	bl	801875c <_fflush_r>
 8018846:	2800      	cmp	r0, #0
 8018848:	d0d9      	beq.n	80187fe <__swbuf_r+0x2e>
 801884a:	e7d6      	b.n	80187fa <__swbuf_r+0x2a>

0801884c <__swsetup_r>:
 801884c:	b538      	push	{r3, r4, r5, lr}
 801884e:	4b29      	ldr	r3, [pc, #164]	@ (80188f4 <__swsetup_r+0xa8>)
 8018850:	4605      	mov	r5, r0
 8018852:	6818      	ldr	r0, [r3, #0]
 8018854:	460c      	mov	r4, r1
 8018856:	b118      	cbz	r0, 8018860 <__swsetup_r+0x14>
 8018858:	6a03      	ldr	r3, [r0, #32]
 801885a:	b90b      	cbnz	r3, 8018860 <__swsetup_r+0x14>
 801885c:	f7fe ffe6 	bl	801782c <__sinit>
 8018860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018864:	0719      	lsls	r1, r3, #28
 8018866:	d422      	bmi.n	80188ae <__swsetup_r+0x62>
 8018868:	06da      	lsls	r2, r3, #27
 801886a:	d407      	bmi.n	801887c <__swsetup_r+0x30>
 801886c:	2209      	movs	r2, #9
 801886e:	602a      	str	r2, [r5, #0]
 8018870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018874:	81a3      	strh	r3, [r4, #12]
 8018876:	f04f 30ff 	mov.w	r0, #4294967295
 801887a:	e033      	b.n	80188e4 <__swsetup_r+0x98>
 801887c:	0758      	lsls	r0, r3, #29
 801887e:	d512      	bpl.n	80188a6 <__swsetup_r+0x5a>
 8018880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018882:	b141      	cbz	r1, 8018896 <__swsetup_r+0x4a>
 8018884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018888:	4299      	cmp	r1, r3
 801888a:	d002      	beq.n	8018892 <__swsetup_r+0x46>
 801888c:	4628      	mov	r0, r5
 801888e:	f7ff f9b9 	bl	8017c04 <_free_r>
 8018892:	2300      	movs	r3, #0
 8018894:	6363      	str	r3, [r4, #52]	@ 0x34
 8018896:	89a3      	ldrh	r3, [r4, #12]
 8018898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801889c:	81a3      	strh	r3, [r4, #12]
 801889e:	2300      	movs	r3, #0
 80188a0:	6063      	str	r3, [r4, #4]
 80188a2:	6923      	ldr	r3, [r4, #16]
 80188a4:	6023      	str	r3, [r4, #0]
 80188a6:	89a3      	ldrh	r3, [r4, #12]
 80188a8:	f043 0308 	orr.w	r3, r3, #8
 80188ac:	81a3      	strh	r3, [r4, #12]
 80188ae:	6923      	ldr	r3, [r4, #16]
 80188b0:	b94b      	cbnz	r3, 80188c6 <__swsetup_r+0x7a>
 80188b2:	89a3      	ldrh	r3, [r4, #12]
 80188b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80188b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80188bc:	d003      	beq.n	80188c6 <__swsetup_r+0x7a>
 80188be:	4621      	mov	r1, r4
 80188c0:	4628      	mov	r0, r5
 80188c2:	f000 f884 	bl	80189ce <__smakebuf_r>
 80188c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188ca:	f013 0201 	ands.w	r2, r3, #1
 80188ce:	d00a      	beq.n	80188e6 <__swsetup_r+0x9a>
 80188d0:	2200      	movs	r2, #0
 80188d2:	60a2      	str	r2, [r4, #8]
 80188d4:	6962      	ldr	r2, [r4, #20]
 80188d6:	4252      	negs	r2, r2
 80188d8:	61a2      	str	r2, [r4, #24]
 80188da:	6922      	ldr	r2, [r4, #16]
 80188dc:	b942      	cbnz	r2, 80188f0 <__swsetup_r+0xa4>
 80188de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80188e2:	d1c5      	bne.n	8018870 <__swsetup_r+0x24>
 80188e4:	bd38      	pop	{r3, r4, r5, pc}
 80188e6:	0799      	lsls	r1, r3, #30
 80188e8:	bf58      	it	pl
 80188ea:	6962      	ldrpl	r2, [r4, #20]
 80188ec:	60a2      	str	r2, [r4, #8]
 80188ee:	e7f4      	b.n	80188da <__swsetup_r+0x8e>
 80188f0:	2000      	movs	r0, #0
 80188f2:	e7f7      	b.n	80188e4 <__swsetup_r+0x98>
 80188f4:	2000003c 	.word	0x2000003c

080188f8 <_sbrk_r>:
 80188f8:	b538      	push	{r3, r4, r5, lr}
 80188fa:	4d06      	ldr	r5, [pc, #24]	@ (8018914 <_sbrk_r+0x1c>)
 80188fc:	2300      	movs	r3, #0
 80188fe:	4604      	mov	r4, r0
 8018900:	4608      	mov	r0, r1
 8018902:	602b      	str	r3, [r5, #0]
 8018904:	f7e8 fadc 	bl	8000ec0 <_sbrk>
 8018908:	1c43      	adds	r3, r0, #1
 801890a:	d102      	bne.n	8018912 <_sbrk_r+0x1a>
 801890c:	682b      	ldr	r3, [r5, #0]
 801890e:	b103      	cbz	r3, 8018912 <_sbrk_r+0x1a>
 8018910:	6023      	str	r3, [r4, #0]
 8018912:	bd38      	pop	{r3, r4, r5, pc}
 8018914:	2000f334 	.word	0x2000f334

08018918 <abort>:
 8018918:	b508      	push	{r3, lr}
 801891a:	2006      	movs	r0, #6
 801891c:	f000 f8bc 	bl	8018a98 <raise>
 8018920:	2001      	movs	r0, #1
 8018922:	f7e8 fa55 	bl	8000dd0 <_exit>

08018926 <_realloc_r>:
 8018926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801892a:	4680      	mov	r8, r0
 801892c:	4615      	mov	r5, r2
 801892e:	460c      	mov	r4, r1
 8018930:	b921      	cbnz	r1, 801893c <_realloc_r+0x16>
 8018932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018936:	4611      	mov	r1, r2
 8018938:	f7ff b9d8 	b.w	8017cec <_malloc_r>
 801893c:	b92a      	cbnz	r2, 801894a <_realloc_r+0x24>
 801893e:	f7ff f961 	bl	8017c04 <_free_r>
 8018942:	2400      	movs	r4, #0
 8018944:	4620      	mov	r0, r4
 8018946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801894a:	f000 f8e3 	bl	8018b14 <_malloc_usable_size_r>
 801894e:	4285      	cmp	r5, r0
 8018950:	4606      	mov	r6, r0
 8018952:	d802      	bhi.n	801895a <_realloc_r+0x34>
 8018954:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018958:	d8f4      	bhi.n	8018944 <_realloc_r+0x1e>
 801895a:	4629      	mov	r1, r5
 801895c:	4640      	mov	r0, r8
 801895e:	f7ff f9c5 	bl	8017cec <_malloc_r>
 8018962:	4607      	mov	r7, r0
 8018964:	2800      	cmp	r0, #0
 8018966:	d0ec      	beq.n	8018942 <_realloc_r+0x1c>
 8018968:	42b5      	cmp	r5, r6
 801896a:	462a      	mov	r2, r5
 801896c:	4621      	mov	r1, r4
 801896e:	bf28      	it	cs
 8018970:	4632      	movcs	r2, r6
 8018972:	f7ff f91a 	bl	8017baa <memcpy>
 8018976:	4621      	mov	r1, r4
 8018978:	4640      	mov	r0, r8
 801897a:	f7ff f943 	bl	8017c04 <_free_r>
 801897e:	463c      	mov	r4, r7
 8018980:	e7e0      	b.n	8018944 <_realloc_r+0x1e>

08018982 <__swhatbuf_r>:
 8018982:	b570      	push	{r4, r5, r6, lr}
 8018984:	460c      	mov	r4, r1
 8018986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801898a:	2900      	cmp	r1, #0
 801898c:	b096      	sub	sp, #88	@ 0x58
 801898e:	4615      	mov	r5, r2
 8018990:	461e      	mov	r6, r3
 8018992:	da0d      	bge.n	80189b0 <__swhatbuf_r+0x2e>
 8018994:	89a3      	ldrh	r3, [r4, #12]
 8018996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801899a:	f04f 0100 	mov.w	r1, #0
 801899e:	bf14      	ite	ne
 80189a0:	2340      	movne	r3, #64	@ 0x40
 80189a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80189a6:	2000      	movs	r0, #0
 80189a8:	6031      	str	r1, [r6, #0]
 80189aa:	602b      	str	r3, [r5, #0]
 80189ac:	b016      	add	sp, #88	@ 0x58
 80189ae:	bd70      	pop	{r4, r5, r6, pc}
 80189b0:	466a      	mov	r2, sp
 80189b2:	f000 f879 	bl	8018aa8 <_fstat_r>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	dbec      	blt.n	8018994 <__swhatbuf_r+0x12>
 80189ba:	9901      	ldr	r1, [sp, #4]
 80189bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80189c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80189c4:	4259      	negs	r1, r3
 80189c6:	4159      	adcs	r1, r3
 80189c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80189cc:	e7eb      	b.n	80189a6 <__swhatbuf_r+0x24>

080189ce <__smakebuf_r>:
 80189ce:	898b      	ldrh	r3, [r1, #12]
 80189d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189d2:	079d      	lsls	r5, r3, #30
 80189d4:	4606      	mov	r6, r0
 80189d6:	460c      	mov	r4, r1
 80189d8:	d507      	bpl.n	80189ea <__smakebuf_r+0x1c>
 80189da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80189de:	6023      	str	r3, [r4, #0]
 80189e0:	6123      	str	r3, [r4, #16]
 80189e2:	2301      	movs	r3, #1
 80189e4:	6163      	str	r3, [r4, #20]
 80189e6:	b003      	add	sp, #12
 80189e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ea:	ab01      	add	r3, sp, #4
 80189ec:	466a      	mov	r2, sp
 80189ee:	f7ff ffc8 	bl	8018982 <__swhatbuf_r>
 80189f2:	9f00      	ldr	r7, [sp, #0]
 80189f4:	4605      	mov	r5, r0
 80189f6:	4639      	mov	r1, r7
 80189f8:	4630      	mov	r0, r6
 80189fa:	f7ff f977 	bl	8017cec <_malloc_r>
 80189fe:	b948      	cbnz	r0, 8018a14 <__smakebuf_r+0x46>
 8018a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a04:	059a      	lsls	r2, r3, #22
 8018a06:	d4ee      	bmi.n	80189e6 <__smakebuf_r+0x18>
 8018a08:	f023 0303 	bic.w	r3, r3, #3
 8018a0c:	f043 0302 	orr.w	r3, r3, #2
 8018a10:	81a3      	strh	r3, [r4, #12]
 8018a12:	e7e2      	b.n	80189da <__smakebuf_r+0xc>
 8018a14:	89a3      	ldrh	r3, [r4, #12]
 8018a16:	6020      	str	r0, [r4, #0]
 8018a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a1c:	81a3      	strh	r3, [r4, #12]
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018a24:	b15b      	cbz	r3, 8018a3e <__smakebuf_r+0x70>
 8018a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f000 f84e 	bl	8018acc <_isatty_r>
 8018a30:	b128      	cbz	r0, 8018a3e <__smakebuf_r+0x70>
 8018a32:	89a3      	ldrh	r3, [r4, #12]
 8018a34:	f023 0303 	bic.w	r3, r3, #3
 8018a38:	f043 0301 	orr.w	r3, r3, #1
 8018a3c:	81a3      	strh	r3, [r4, #12]
 8018a3e:	89a3      	ldrh	r3, [r4, #12]
 8018a40:	431d      	orrs	r5, r3
 8018a42:	81a5      	strh	r5, [r4, #12]
 8018a44:	e7cf      	b.n	80189e6 <__smakebuf_r+0x18>

08018a46 <_raise_r>:
 8018a46:	291f      	cmp	r1, #31
 8018a48:	b538      	push	{r3, r4, r5, lr}
 8018a4a:	4605      	mov	r5, r0
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	d904      	bls.n	8018a5a <_raise_r+0x14>
 8018a50:	2316      	movs	r3, #22
 8018a52:	6003      	str	r3, [r0, #0]
 8018a54:	f04f 30ff 	mov.w	r0, #4294967295
 8018a58:	bd38      	pop	{r3, r4, r5, pc}
 8018a5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018a5c:	b112      	cbz	r2, 8018a64 <_raise_r+0x1e>
 8018a5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a62:	b94b      	cbnz	r3, 8018a78 <_raise_r+0x32>
 8018a64:	4628      	mov	r0, r5
 8018a66:	f000 f853 	bl	8018b10 <_getpid_r>
 8018a6a:	4622      	mov	r2, r4
 8018a6c:	4601      	mov	r1, r0
 8018a6e:	4628      	mov	r0, r5
 8018a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a74:	f000 b83a 	b.w	8018aec <_kill_r>
 8018a78:	2b01      	cmp	r3, #1
 8018a7a:	d00a      	beq.n	8018a92 <_raise_r+0x4c>
 8018a7c:	1c59      	adds	r1, r3, #1
 8018a7e:	d103      	bne.n	8018a88 <_raise_r+0x42>
 8018a80:	2316      	movs	r3, #22
 8018a82:	6003      	str	r3, [r0, #0]
 8018a84:	2001      	movs	r0, #1
 8018a86:	e7e7      	b.n	8018a58 <_raise_r+0x12>
 8018a88:	2100      	movs	r1, #0
 8018a8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018a8e:	4620      	mov	r0, r4
 8018a90:	4798      	blx	r3
 8018a92:	2000      	movs	r0, #0
 8018a94:	e7e0      	b.n	8018a58 <_raise_r+0x12>
	...

08018a98 <raise>:
 8018a98:	4b02      	ldr	r3, [pc, #8]	@ (8018aa4 <raise+0xc>)
 8018a9a:	4601      	mov	r1, r0
 8018a9c:	6818      	ldr	r0, [r3, #0]
 8018a9e:	f7ff bfd2 	b.w	8018a46 <_raise_r>
 8018aa2:	bf00      	nop
 8018aa4:	2000003c 	.word	0x2000003c

08018aa8 <_fstat_r>:
 8018aa8:	b538      	push	{r3, r4, r5, lr}
 8018aaa:	4d07      	ldr	r5, [pc, #28]	@ (8018ac8 <_fstat_r+0x20>)
 8018aac:	2300      	movs	r3, #0
 8018aae:	4604      	mov	r4, r0
 8018ab0:	4608      	mov	r0, r1
 8018ab2:	4611      	mov	r1, r2
 8018ab4:	602b      	str	r3, [r5, #0]
 8018ab6:	f7e8 f9db 	bl	8000e70 <_fstat>
 8018aba:	1c43      	adds	r3, r0, #1
 8018abc:	d102      	bne.n	8018ac4 <_fstat_r+0x1c>
 8018abe:	682b      	ldr	r3, [r5, #0]
 8018ac0:	b103      	cbz	r3, 8018ac4 <_fstat_r+0x1c>
 8018ac2:	6023      	str	r3, [r4, #0]
 8018ac4:	bd38      	pop	{r3, r4, r5, pc}
 8018ac6:	bf00      	nop
 8018ac8:	2000f334 	.word	0x2000f334

08018acc <_isatty_r>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	4d06      	ldr	r5, [pc, #24]	@ (8018ae8 <_isatty_r+0x1c>)
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	4608      	mov	r0, r1
 8018ad6:	602b      	str	r3, [r5, #0]
 8018ad8:	f7e8 f9da 	bl	8000e90 <_isatty>
 8018adc:	1c43      	adds	r3, r0, #1
 8018ade:	d102      	bne.n	8018ae6 <_isatty_r+0x1a>
 8018ae0:	682b      	ldr	r3, [r5, #0]
 8018ae2:	b103      	cbz	r3, 8018ae6 <_isatty_r+0x1a>
 8018ae4:	6023      	str	r3, [r4, #0]
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}
 8018ae8:	2000f334 	.word	0x2000f334

08018aec <_kill_r>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4d07      	ldr	r5, [pc, #28]	@ (8018b0c <_kill_r+0x20>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	4604      	mov	r4, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	4611      	mov	r1, r2
 8018af8:	602b      	str	r3, [r5, #0]
 8018afa:	f7e8 f957 	bl	8000dac <_kill>
 8018afe:	1c43      	adds	r3, r0, #1
 8018b00:	d102      	bne.n	8018b08 <_kill_r+0x1c>
 8018b02:	682b      	ldr	r3, [r5, #0]
 8018b04:	b103      	cbz	r3, 8018b08 <_kill_r+0x1c>
 8018b06:	6023      	str	r3, [r4, #0]
 8018b08:	bd38      	pop	{r3, r4, r5, pc}
 8018b0a:	bf00      	nop
 8018b0c:	2000f334 	.word	0x2000f334

08018b10 <_getpid_r>:
 8018b10:	f7e8 b944 	b.w	8000d9c <_getpid>

08018b14 <_malloc_usable_size_r>:
 8018b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b18:	1f18      	subs	r0, r3, #4
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	bfbc      	itt	lt
 8018b1e:	580b      	ldrlt	r3, [r1, r0]
 8018b20:	18c0      	addlt	r0, r0, r3
 8018b22:	4770      	bx	lr

08018b24 <_init>:
 8018b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b26:	bf00      	nop
 8018b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b2a:	bc08      	pop	{r3}
 8018b2c:	469e      	mov	lr, r3
 8018b2e:	4770      	bx	lr

08018b30 <_fini>:
 8018b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b32:	bf00      	nop
 8018b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b36:	bc08      	pop	{r3}
 8018b38:	469e      	mov	lr, r3
 8018b3a:	4770      	bx	lr
