
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f6ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055e4  0801f880  0801f880  00020880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024e64  08024e64  00026390  2**0
                  CONTENTS
  4 .ARM          00000008  08024e64  08024e64  00025e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024e6c  08024e6c  00026390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024e6c  08024e6c  00025e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024e70  08024e70  00025e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08024e74  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000250  080250c4  00026250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002f0  08025164  000262f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f2b0  20000390  08025204  00026390  2**2
                  ALLOC
 12 ._user_heap_stack 00000800  2000f640  08025204  00026640  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003da65  00000000  00000000  000263c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009913  00000000  00000000  00063e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c88  00000000  00000000  0006d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000232f  00000000  00000000  000703c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bb4f  00000000  00000000  000726ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048c7e  00000000  00000000  000ae23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d524  00000000  00000000  000f6ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002143e0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c87c  00000000  00000000  00214424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006b  00000000  00000000  00220ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000390 	.word	0x20000390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f864 	.word	0x0801f864

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000394 	.word	0x20000394
 800020c:	0801f864 	.word	0x0801f864

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fa47 	bl	8001434 <null_ptr_check>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d117      	bne.n	8000fe2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	20d0      	movs	r0, #208	@ 0xd0
 8000fba:	f000 f818 	bl	8000fee <bmp2_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b58      	cmp	r3, #88	@ 0x58
 8000fd0:	d105      	bne.n	8000fde <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa79 	bl	80014ca <get_calib_param>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fde:	23fc      	movs	r3, #252	@ 0xfc
 8000fe0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b087      	sub	sp, #28
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f000 fa18 	bl	8001434 <null_ptr_check>
 8001004:	4603      	mov	r3, r0
 8001006:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d11e      	bne.n	800104e <bmp2_get_regs+0x60>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01b      	beq.n	800104e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001024:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68dc      	ldr	r4, [r3, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	47a0      	blx	r4
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001048:	23fe      	movs	r3, #254	@ 0xfe
 800104a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800104c:	e001      	b.n	8001052 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b08b      	sub	sp, #44	@ 0x2c
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d901      	bls.n	8001076 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f000 f9dc 	bl	8001434 <null_ptr_check>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001082:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001086:	2b00      	cmp	r3, #0
 8001088:	d150      	bne.n	800112c <bmp2_set_regs+0xce>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d04d      	beq.n	800112c <bmp2_set_regs+0xce>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d04a      	beq.n	800112c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d043      	beq.n	8001124 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	e00d      	b.n	80010cc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	440b      	add	r3, r1
 80010be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	3301      	adds	r3, #1
 80010ca:	77fb      	strb	r3, [r7, #31]
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8ed      	bhi.n	80010b0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d90b      	bls.n	80010f2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010da:	f107 0114 	add.w	r1, r7, #20
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f9c6 	bl	8001474 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3b01      	subs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	e001      	b.n	80010f6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691c      	ldr	r4, [r3, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f107 0114 	add.w	r1, r7, #20
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	47a0      	blx	r4
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800111c:	23fe      	movs	r3, #254	@ 0xfe
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001122:	e007      	b.n	8001134 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001124:	23fd      	movs	r3, #253	@ 0xfd
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800112a:	e003      	b.n	8001134 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001132:	e000      	b.n	8001136 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001134:	bf00      	nop
    }

    return rslt;
 8001136:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800113a:	4618      	mov	r0, r3
 800113c:	372c      	adds	r7, #44	@ 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800114a:	23e0      	movs	r3, #224	@ 0xe0
 800114c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800114e:	23b6      	movs	r3, #182	@ 0xb6
 8001150:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001152:	f107 010d 	add.w	r1, r7, #13
 8001156:	f107 000e 	add.w	r0, r7, #14
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f7ff ff7e 	bl	800105e <bmp2_set_regs>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800117c:	2300      	movs	r3, #0
 800117e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d02d      	beq.n	80011e2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	20f4      	movs	r0, #244	@ 0xf4
 8001190:	f7ff ff2d 	bl	8000fee <bmp2_get_regs>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d122      	bne.n	80011e6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	109b      	asrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	109b      	asrs	r3, r3, #2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	715a      	strb	r2, [r3, #5]
 80011e0:	e001      	b.n	80011e6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011e2:	23ff      	movs	r3, #255	@ 0xff
 80011e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f9fd 	bl	8001600 <conf_sensor>
 8001206:	4603      	mov	r3, r0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01b      	beq.n	8001258 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001220:	f107 010e 	add.w	r1, r7, #14
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	20f3      	movs	r0, #243	@ 0xf3
 800122a:	f7ff fee0 	bl	8000fee <bmp2_get_regs>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d110      	bne.n	800125c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	10db      	asrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	705a      	strb	r2, [r3, #1]
 8001256:	e001      	b.n	800125c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9bf 	bl	8001600 <conf_sensor>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	2300      	movs	r3, #0
 80012a2:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d024      	beq.n	80012fe <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012b4:	f107 0110 	add.w	r1, r7, #16
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2206      	movs	r2, #6
 80012bc:	20f7      	movs	r0, #247	@ 0xf7
 80012be:	f7ff fe96 	bl	8000fee <bmp2_get_regs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d119      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fab9 	bl	8001850 <parse_sensor_data>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10b      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f80b 	bl	800130e <bmp2_compensate_data>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e001      	b.n	8001302 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012fe:	23ff      	movs	r3, #255	@ 0xff
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f88a 	bl	8001434 <null_ptr_check>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d129      	bne.n	8001380 <bmp2_compensate_data+0x72>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d026      	beq.n	8001380 <bmp2_compensate_data+0x72>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3308      	adds	r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fabb 	bl	80018d8 <compensate_temperature>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fba7 	bl	8001ac8 <compensate_pressure>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800137e:	e001      	b.n	8001384 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001380:	23ff      	movs	r3, #255	@ 0xff
 8001382:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b092      	sub	sp, #72	@ 0x48
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <bmp2_compute_meas_time+0x9c>)
 800139e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <bmp2_compute_meas_time+0xa0>)
 80013ae:	f107 0410 	add.w	r4, r7, #16
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f837 	bl	8001434 <null_ptr_check>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d122      	bne.n	800141a <bmp2_compute_meas_time+0x8a>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d01f      	beq.n	800141a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e1b      	ldrb	r3, [r3, #24]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d111      	bne.n	8001406 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3348      	adds	r3, #72	@ 0x48
 80013ea:	443b      	add	r3, r7
 80013ec:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3348      	adds	r3, #72	@ 0x48
 80013f8:	443b      	add	r3, r7
 80013fa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013fe:	441a      	add	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001404:	e00c      	b.n	8001420 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3348      	adds	r3, #72	@ 0x48
 800140e:	443b      	add	r3, r7
 8001410:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001418:	e002      	b.n	8001420 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800141a:	23ff      	movs	r3, #255	@ 0xff
 800141c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001420:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001424:	4618      	mov	r0, r3
 8001426:	3748      	adds	r7, #72	@ 0x48
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	0801f880 	.word	0x0801f880
 8001430:	0801f894 	.word	0x0801f894

08001434 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <null_ptr_check+0x26>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <null_ptr_check+0x26>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800145a:	23ff      	movs	r3, #255	@ 0xff
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e001      	b.n	8001464 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e015      	b.n	80014b4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	441a      	add	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	440b      	add	r3, r1
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3e5      	bcc.n	8001488 <interleave_data+0x14>
    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b08a      	sub	sp, #40	@ 0x28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2219      	movs	r2, #25
 80014f0:	2088      	movs	r0, #136	@ 0x88
 80014f2:	f7ff fd7c 	bl	8000fee <bmp2_get_regs>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001500:	2b00      	cmp	r3, #0
 8001502:	d177      	bne.n	80015f4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800152a:	7c7b      	ldrb	r3, [r7, #17]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	7c3b      	ldrb	r3, [r7, #16]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21a      	sxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	7cbb      	ldrb	r3, [r7, #18]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7d3b      	ldrb	r3, [r7, #20]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001574:	7e7b      	ldrb	r3, [r7, #25]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7e3b      	ldrb	r3, [r7, #24]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7ebb      	ldrb	r3, [r7, #26]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001598:	7f7b      	ldrb	r3, [r7, #29]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7f3b      	ldrb	r3, [r7, #28]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800160e:	2300      	movs	r3, #0
 8001610:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001612:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001616:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d074      	beq.n	8001708 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800161e:	f107 0114 	add.w	r1, r7, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	20f4      	movs	r0, #244	@ 0xf4
 8001628:	f7ff fce1 	bl	8000fee <bmp2_get_regs>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d169      	bne.n	800170c <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fd82 	bl	8001142 <bmp2_soft_reset>
 800163e:	4603      	mov	r3, r0
 8001640:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d160      	bne.n	800170c <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f861 	bl	8001718 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001656:	7d7b      	ldrb	r3, [r7, #21]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	b25a      	sxtb	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001670:	7d7b      	ldrb	r3, [r7, #21]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f023 031c 	bic.w	r3, r3, #28
 8001678:	b25a      	sxtb	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001690:	7d7b      	ldrb	r3, [r7, #21]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80016ae:	f107 0114 	add.w	r1, r7, #20
 80016b2:	f107 0010 	add.w	r0, r7, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f7ff fcd0 	bl	800105e <bmp2_set_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d120      	bne.n	800170c <conf_sensor+0x10c>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01d      	beq.n	800170c <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016d6:	7d3b      	ldrb	r3, [r7, #20]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016f2:	f107 0114 	add.w	r1, r7, #20
 80016f6:	f107 0010 	add.w	r0, r7, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f7ff fcae 	bl	800105e <bmp2_set_regs>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
 8001706:	e001      	b.n	800170c <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	2b04      	cmp	r3, #4
 8001728:	f200 808b 	bhi.w	8001842 <set_os_mode+0x12a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <set_os_mode+0x1c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001749 	.word	0x08001749
 8001738:	0800177b 	.word	0x0800177b
 800173c:	080017ad 	.word	0x080017ad
 8001740:	080017df 	.word	0x080017df
 8001744:	08001811 	.word	0x08001811
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 031c 	bic.w	r3, r3, #28
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
            break;
 8001778:	e064      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	b25b      	sxtb	r3, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f023 031c 	bic.w	r3, r3, #28
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            break;
 80017aa:	e04b      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 031c 	bic.w	r3, r3, #28
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f043 030c 	orr.w	r3, r3, #12
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
            break;
 80017dc:	e032      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f023 031c 	bic.w	r3, r3, #28
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	b25b      	sxtb	r3, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	701a      	strb	r2, [r3, #0]
            break;
 800180e:	e019      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	b25b      	sxtb	r3, r3
 800181c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001820:	b25b      	sxtb	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	f023 031c 	bic.w	r3, r3, #28
 8001832:	b25b      	sxtb	r3, r3
 8001834:	f043 0314 	orr.w	r3, r3, #20
 8001838:	b25b      	sxtb	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	701a      	strb	r2, [r3, #0]
            break;
 8001840:	e000      	b.n	8001844 <set_os_mode+0x12c>
        default:
            break;
 8001842:	bf00      	nop
    }
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3302      	adds	r3, #2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	b2db      	uxtb	r3, r3
 8001876:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3303      	adds	r3, #3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	031b      	lsls	r3, r3, #12
 800188e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3305      	adds	r3, #5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f000 fae5 	bl	8001e90 <st_check_boundaries>
 80018c6:	4603      	mov	r3, r0
 80018c8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b08c      	sub	sp, #48	@ 0x30
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe47 	bl	8000584 <__aeabi_i2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <compensate_temperature+0x1d4>)
 80018fc:	f7fe ffd6 	bl	80008ac <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8b9b      	ldrh	r3, [r3, #28]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe29 	bl	8000564 <__aeabi_ui2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <compensate_temperature+0x1d8>)
 8001918:	f7fe ffc8 	bl	80008ac <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fce0 	bl	80002e8 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe24 	bl	8000584 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fe88 	bl	8000658 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe15 	bl	8000584 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001962:	f7fe ffa3 	bl	80008ac <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8b9b      	ldrh	r3, [r3, #28]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf6 	bl	8000564 <__aeabi_ui2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <compensate_temperature+0x1dc>)
 800197e:	f7fe ff95 	bl	80008ac <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe fcad 	bl	80002e8 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdf2 	bl	8000584 <__aeabi_i2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019a8:	f7fe ff80 	bl	80008ac <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8b9b      	ldrh	r3, [r3, #28]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdd3 	bl	8000564 <__aeabi_ui2d>
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab4 <compensate_temperature+0x1dc>)
 80019c4:	f7fe ff72 	bl	80008ac <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7fe fc8a 	bl	80002e8 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe3c 	bl	8000658 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdc8 	bl	8000584 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
    var2 =
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe2c 	bl	8000658 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe fc6c 	bl	80002ec <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8cc 	bl	8000bb8 <__aeabi_d2iz>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a2e:	f7fe fc5d 	bl	80002ec <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <compensate_temperature+0x1e0>)
 8001a40:	f7fe ff34 	bl	80008ac <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a56:	f7ff f871 	bl	8000b3c <__aeabi_dcmplt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a66:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a7a:	f7ff f87d 	bl	8000b78 <__aeabi_dcmpgt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a9a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3730      	adds	r7, #48	@ 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aac:	40d00000 	.word	0x40d00000
 8001ab0:	40900000 	.word	0x40900000
 8001ab4:	40c00000 	.word	0x40c00000
 8001ab8:	40b40000 	.word	0x40b40000
 8001abc:	c0440000 	.word	0xc0440000
 8001ac0:	40554000 	.word	0x40554000
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd4a 	bl	8000584 <__aeabi_i2d>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af8:	f7fe fed8 	bl	80008ac <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4bcb      	ldr	r3, [pc, #812]	@ (8001e38 <compensate_pressure+0x370>)
 8001b0a:	f7fe fbed 	bl	80002e8 <__aeabi_dsub>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1e:	f7fe fd9b 	bl	8000658 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd27 	bl	8000584 <__aeabi_i2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fd8b 	bl	8000658 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e3c <compensate_pressure+0x374>)
 8001b50:	f7fe feac 	bl	80008ac <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd0e 	bl	8000584 <__aeabi_i2d>
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd74 	bl	8000658 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	f7fe fbb6 	bl	80002ec <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b88:	f7fe fbb0 	bl	80002ec <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4ba9      	ldr	r3, [pc, #676]	@ (8001e40 <compensate_pressure+0x378>)
 8001b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9e:	f7fe fe85 	bl	80008ac <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fce7 	bl	8000584 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4ba2      	ldr	r3, [pc, #648]	@ (8001e44 <compensate_pressure+0x37c>)
 8001bbc:	f7fe fd4c 	bl	8000658 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb90 	bl	80002ec <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcd2 	bl	8000584 <__aeabi_i2d>
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd38 	bl	8000658 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd30 	bl	8000658 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b90      	ldr	r3, [pc, #576]	@ (8001e48 <compensate_pressure+0x380>)
 8001c06:	f7fe fe51 	bl	80008ac <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4614      	mov	r4, r2
 8001c10:	461d      	mov	r5, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb3 	bl	8000584 <__aeabi_i2d>
 8001c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c22:	f7fe fd19 	bl	8000658 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb5d 	bl	80002ec <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <compensate_pressure+0x380>)
 8001c40:	f7fe fe34 	bl	80008ac <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <compensate_pressure+0x374>)
 8001c52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c56:	f7fe fe29 	bl	80008ac <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <compensate_pressure+0x384>)
 8001c68:	f7fe fb40 	bl	80002ec <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc73 	bl	8000564 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fce7 	bl	8000658 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c9e:	f7fe ff4d 	bl	8000b3c <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <compensate_pressure+0x1f8>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb4:	f7fe ff60 	bl	8000b78 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80de 	beq.w	8001e7c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc4d 	bl	8000564 <__aeabi_ui2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	495f      	ldr	r1, [pc, #380]	@ (8001e50 <compensate_pressure+0x388>)
 8001cd4:	f7fe fb08 	bl	80002e8 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e54 <compensate_pressure+0x38c>)
 8001ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cea:	f7fe fddf 	bl	80008ac <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cf6:	f7fe faf7 	bl	80002e8 <__aeabi_dsub>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a347      	add	r3, pc, #284	@ (adr r3, 8001e20 <compensate_pressure+0x358>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fca6 	bl	8000658 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d18:	f7fe fdc8 	bl	80008ac <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc2a 	bl	8000584 <__aeabi_i2d>
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc90 	bl	8000658 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d44:	f7fe fc88 	bl	8000658 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <compensate_pressure+0x390>)
 8001d56:	f7fe fda9 	bl	80008ac <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc0b 	bl	8000584 <__aeabi_i2d>
 8001d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d72:	f7fe fc71 	bl	8000658 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <compensate_pressure+0x374>)
 8001d84:	f7fe fd92 	bl	80008ac <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe faa8 	bl	80002ec <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbea 	bl	8000584 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa98 	bl	80002ec <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <compensate_pressure+0x394>)
 8001dca:	f7fe fd6f 	bl	80008ac <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dd6:	f7fe fa89 	bl	80002ec <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001de2:	a311      	add	r3, pc, #68	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dec:	f7fe fea6 	bl	8000b3c <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001df6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e00:	2303      	movs	r3, #3
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e06:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e30 <compensate_pressure+0x368>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e10:	f7fe feb2 	bl	8000b78 <__aeabi_dcmpgt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	e022      	b.n	8001e60 <compensate_pressure+0x398>
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40b86a00 	.word	0x40b86a00
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40dd4c00 	.word	0x40dd4c00
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40fadb00 	.word	0x40fadb00
 8001e38:	40ef4000 	.word	0x40ef4000
 8001e3c:	40e00000 	.word	0x40e00000
 8001e40:	40100000 	.word	0x40100000
 8001e44:	40f00000 	.word	0x40f00000
 8001e48:	41200000 	.word	0x41200000
 8001e4c:	3ff00000 	.word	0x3ff00000
 8001e50:	41300000 	.word	0x41300000
 8001e54:	40b00000 	.word	0x40b00000
 8001e58:	41e00000 	.word	0x41e00000
 8001e5c:	40300000 	.word	0x40300000
 8001e60:	d007      	beq.n	8001e72 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e62:	a309      	add	r3, pc, #36	@ (adr r3, 8001e88 <compensate_pressure+0x3c0>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40fadb00 	.word	0x40fadb00

08001e90 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db03      	blt.n	8001eac <st_check_boundaries+0x1c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	dd09      	ble.n	8001ec0 <st_check_boundaries+0x30>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db06      	blt.n	8001ec0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	dc02      	bgt.n	8001ec0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eba:	23fa      	movs	r3, #250	@ 0xfa
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e023      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <st_check_boundaries+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd09      	ble.n	8001ee2 <st_check_boundaries+0x52>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db06      	blt.n	8001ee2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	dc02      	bgt.n	8001ee2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001edc:	23fb      	movs	r3, #251	@ 0xfb
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e012      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db03      	blt.n	8001ef0 <st_check_boundaries+0x60>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	dd09      	ble.n	8001f04 <st_check_boundaries+0x74>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db03      	blt.n	8001efe <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <st_check_boundaries+0x88>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dd02      	ble.n	8001f04 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001efe:	23f9      	movs	r3, #249	@ 0xf9
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e001      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	000ffff0 	.word	0x000ffff0

08001f1c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff f837 	bl	8000f98 <bmp2_init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f91c 	bl	8001172 <bmp2_get_config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f42:	2300      	movs	r3, #0
 8001f44:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f46:	2303      	movs	r3, #3
 8001f48:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f94e 	bl	80011f2 <bmp2_set_config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff f980 	bl	8001268 <bmp2_set_power_mode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f6c:	f107 0108 	add.w	r1, r7, #8
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fa0a 	bl	8001390 <bmp2_compute_meas_time>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6858      	ldr	r0, [r3, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	891b      	ldrh	r3, [r3, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f003 fba4 	bl	8005700 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 010f 	add.w	r1, r7, #15
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f005 f9a3 	bl	800730e <HAL_SPI_Transmit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	f005 fb07 	bl	80075ea <HAL_SPI_Receive>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6858      	ldr	r0, [r3, #4]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	891b      	ldrh	r3, [r3, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f003 fb85 	bl	8005700 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <bmp2_spi_read+0x74>
    iError = -1;
 8001ffc:	23ff      	movs	r3, #255	@ 0xff
 8001ffe:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002000:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6858      	ldr	r0, [r3, #4]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	891b      	ldrh	r3, [r3, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	f003 fb64 	bl	8005700 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 010f 	add.w	r1, r7, #15
 8002040:	2305      	movs	r3, #5
 8002042:	2201      	movs	r2, #1
 8002044:	f005 f963 	bl	800730e <HAL_SPI_Transmit>
 8002048:	4603      	mov	r3, r0
 800204a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2305      	movs	r3, #5
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	f005 f959 	bl	800730e <HAL_SPI_Transmit>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	4413      	add	r3, r2
 8002064:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6858      	ldr	r0, [r3, #4]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	f003 fb45 	bl	8005700 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002076:	7dbb      	ldrb	r3, [r7, #22]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <bmp2_spi_write+0x74>
    iError = -1;
 800207c:	23ff      	movs	r3, #255	@ 0xff
 800207e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <bmp2_delay_us+0x24>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fd0b 	bl	8003abc <HAL_Delay>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020c0:	23ff      	movs	r3, #255	@ 0xff
 80020c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	899b      	ldrh	r3, [r3, #12]
 80020cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f89a 	bl	8001210 <bmp2_get_status>
 80020dc:	4603      	mov	r3, r0
 80020de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f8d2 	bl	8001292 <bmp2_get_sensor_data>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <BMP2_ReadData+0xc4>)
 8002108:	f7fe fbd0 	bl	80008ac <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002116:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <BMP2_ReadData+0x80>
 800212c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	dccd      	bgt.n	80020d0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	684c      	ldr	r4, [r1, #4]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd61 	bl	8000c08 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	684c      	ldr	r4, [r1, #4]
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd56 	bl	8000c08 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002168:	729a      	strb	r2, [r3, #10]

  return rslt;
 800216a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800216e:	4618      	mov	r0, r3
 8002170:	372c      	adds	r7, #44	@ 0x2c
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	40590000 	.word	0x40590000

0800217c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8002192:	2308      	movs	r3, #8
 8002194:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8002196:	2028      	movs	r0, #40	@ 0x28
 8002198:	f001 fc90 	bl	8003abc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	2130      	movs	r1, #48	@ 0x30
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f829 	bl	80021fc <lcd_write>
	HAL_Delay(5);
 80021aa:	2005      	movs	r0, #5
 80021ac:	f001 fc86 	bl	8003abc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	2130      	movs	r1, #48	@ 0x30
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f81f 	bl	80021fc <lcd_write>
	HAL_Delay(1);
 80021be:	2001      	movs	r0, #1
 80021c0:	f001 fc7c 	bl	8003abc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	2130      	movs	r1, #48	@ 0x30
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f815 	bl	80021fc <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f80e 	bl	80021fc <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	210c      	movs	r1, #12
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f807 	bl	80021fc <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f89f 	bl	8002332 <lcd_clear>

}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	460b      	mov	r3, r1
 8002208:	71bb      	strb	r3, [r7, #6]
 800220a:	4613      	mov	r3, r2
 800220c:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	f023 030f 	bic.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	797b      	ldrb	r3, [r7, #5]
 8002218:	4313      	orrs	r3, r2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	b2db      	uxtb	r3, r3
 8002222:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8002224:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002228:	f023 030f 	bic.w	r3, r3, #15
 800222c:	b25a      	sxtb	r2, r3
 800222e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002232:	4313      	orrs	r3, r2
 8002234:	b25b      	sxtb	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	b2da      	uxtb	r2, r3
 8002240:	797b      	ldrb	r3, [r7, #5]
 8002242:	4313      	orrs	r3, r2
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	b2db      	uxtb	r3, r3
 800224c:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	b25a      	sxtb	r2, r3
 8002254:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002258:	4313      	orrs	r3, r2
 800225a:	b25b      	sxtb	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	b299      	uxth	r1, r3
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	2364      	movs	r3, #100	@ 0x64
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2304      	movs	r3, #4
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <lcd_write+0x88>)
 8002270:	f003 fb0a 	bl	8005888 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002274:	2005      	movs	r0, #5
 8002276:	f001 fc21 	bl	8003abc <HAL_Delay>
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000065c 	.word	0x2000065c

08002288 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	2300      	movs	r3, #0
 8002296:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 80022a2:	2308      	movs	r3, #8
 80022a4:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f843 	bl	8002332 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	2180      	movs	r1, #128	@ 0x80
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ffa1 	bl	80021fc <lcd_write>
	while(lcd->f_line[i])
 80022ba:	e00f      	b.n	80022dc <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7818      	ldrb	r0, [r3, #0]
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	7859      	ldrb	r1, [r3, #1]
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	f7ff ff93 	bl	80021fc <lcd_write>
		i++;
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
 80022d8:	3301      	adds	r3, #1
 80022da:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	21c0      	movs	r1, #192	@ 0xc0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff81 	bl	80021fc <lcd_write>
	while(lcd->s_line[i])
 80022fa:	e00f      	b.n	800231c <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7818      	ldrb	r0, [r3, #0]
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	7c99      	ldrb	r1, [r3, #18]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	f7ff ff73 	bl	80021fc <lcd_write>
		i++;
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	3301      	adds	r3, #1
 800231a:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 800231c:	7bbb      	ldrb	r3, [r7, #14]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	7c9b      	ldrb	r3, [r3, #18]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e9      	bne.n	80022fc <lcd_display+0x74>
	}
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8002348:	2308      	movs	r3, #8
 800234a:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff51 	bl	80021fc <lcd_write>
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <vApplicationGetIdleTaskMemory+0x2c>)
 8002374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4a06      	ldr	r2, [pc, #24]	@ (8002394 <vApplicationGetIdleTaskMemory+0x30>)
 800237a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	@ 0x80
 8002380:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	200003bc 	.word	0x200003bc
 8002394:	2000045c 	.word	0x2000045c

08002398 <StartTempSensorTask>:
  * @param  None
  * @retval None
  */

void StartTempSensorTask(void *argument)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    double temp, press;
    for(;;)
    {
        osMutexWait(i2cMutexHandle, osWaitForever);
 80023a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <StartTempSensorTask+0x80>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 fee7 	bl	800b17c <osMutexWait>
        if (BMP2_ReadData(&bmp2dev, &press, &temp) == BMP2_OK)
 80023ae:	f107 0210 	add.w	r2, r7, #16
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	4619      	mov	r1, r3
 80023b8:	4818      	ldr	r0, [pc, #96]	@ (800241c <StartTempSensorTask+0x84>)
 80023ba:	f7ff fe7b 	bl	80020b4 <BMP2_ReadData>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d11f      	bne.n	8002404 <StartTempSensorTask+0x6c>
        {
            temp_mdegC = (int)(temp * 1000);
 80023c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <StartTempSensorTask+0x88>)
 80023ce:	f7fe f943 	bl	8000658 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f7fe fbed 	bl	8000bb8 <__aeabi_d2iz>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <StartTempSensorTask+0x8c>)
 80023e2:	6013      	str	r3, [r2, #0]
            press_Pa = (int)(press * 100);
 80023e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002428 <StartTempSensorTask+0x90>)
 80023ee:	f7fe f933 	bl	8000658 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbdd 	bl	8000bb8 <__aeabi_d2iz>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <StartTempSensorTask+0x94>)
 8002402:	6013      	str	r3, [r2, #0]
        }
        else
        {

        }
        osMutexRelease(i2cMutexHandle);
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <StartTempSensorTask+0x80>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f008 ff05 	bl	800b218 <osMutexRelease>

        osDelay(500);
 800240e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002412:	f008 fe87 	bl	800b124 <osDelay>
        osMutexWait(i2cMutexHandle, osWaitForever);
 8002416:	e7c3      	b.n	80023a0 <StartTempSensorTask+0x8>
 8002418:	200003b8 	.word	0x200003b8
 800241c:	20000018 	.word	0x20000018
 8002420:	408f4000 	.word	0x408f4000
 8002424:	200006d8 	.word	0x200006d8
 8002428:	40590000 	.word	0x40590000
 800242c:	200006dc 	.word	0x200006dc

08002430 <StartLCDTask>:
    }
}

void StartLCDTask(void *argument)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        osMutexWait(i2cMutexHandle, osWaitForever);
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <StartLCDTask+0x88>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	4618      	mov	r0, r3
 8002442:	f008 fe9b 	bl	800b17c <osMutexWait>

        char buffer[16];
        sprintf(buffer, "Set temp.: %.2f", my_variable);
 8002446:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <StartLCDTask+0x8c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f8ac 	bl	80005a8 <__aeabi_f2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	f107 0018 	add.w	r0, r7, #24
 8002458:	4919      	ldr	r1, [pc, #100]	@ (80024c0 <StartLCDTask+0x90>)
 800245a:	f01b f857 	bl	801d50c <siprintf>
        sprintf((char *)disp.f_line, "%s", buffer);
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	461a      	mov	r2, r3
 8002464:	4917      	ldr	r1, [pc, #92]	@ (80024c4 <StartLCDTask+0x94>)
 8002466:	4818      	ldr	r0, [pc, #96]	@ (80024c8 <StartLCDTask+0x98>)
 8002468:	f01b f850 	bl	801d50c <siprintf>
        lcd_display(&disp);
 800246c:	4817      	ldr	r0, [pc, #92]	@ (80024cc <StartLCDTask+0x9c>)
 800246e:	f7ff ff0b 	bl	8002288 <lcd_display>

        char buffer2[16];
        sprintf(buffer2, "Act. temp.: %.1f", temp_mdegC / 1000.0);  // Konwersja na stopnie Celsjusza
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <StartLCDTask+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f884 	bl	8000584 <__aeabi_i2d>
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <StartLCDTask+0xa4>)
 8002482:	f7fe fa13 	bl	80008ac <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	f107 0008 	add.w	r0, r7, #8
 800248e:	4912      	ldr	r1, [pc, #72]	@ (80024d8 <StartLCDTask+0xa8>)
 8002490:	f01b f83c 	bl	801d50c <siprintf>
        sprintf((char *)disp.s_line, "%s", buffer2);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	461a      	mov	r2, r3
 800249a:	490a      	ldr	r1, [pc, #40]	@ (80024c4 <StartLCDTask+0x94>)
 800249c:	480f      	ldr	r0, [pc, #60]	@ (80024dc <StartLCDTask+0xac>)
 800249e:	f01b f835 	bl	801d50c <siprintf>
        osMutexRelease(i2cMutexHandle);
 80024a2:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <StartLCDTask+0x88>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f008 feb6 	bl	800b218 <osMutexRelease>
        osDelay(1000);
 80024ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024b0:	f008 fe38 	bl	800b124 <osDelay>
    {
 80024b4:	bf00      	nop
 80024b6:	e7bf      	b.n	8002438 <StartLCDTask+0x8>
 80024b8:	200003b8 	.word	0x200003b8
 80024bc:	20000054 	.word	0x20000054
 80024c0:	0801f8b4 	.word	0x0801f8b4
 80024c4:	0801f8c4 	.word	0x0801f8c4
 80024c8:	200006b1 	.word	0x200006b1
 80024cc:	200006b0 	.word	0x200006b0
 80024d0:	200006d8 	.word	0x200006d8
 80024d4:	408f4000 	.word	0x408f4000
 80024d8:	0801f8c8 	.word	0x0801f8c8
 80024dc:	200006c2 	.word	0x200006c2

080024e0 <StartFanControlTask>:
    }
}

void StartFanControlTask(void const *argument) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

    for (;;) {

        osMutexWait(i2cMutexHandle, osWaitForever);
 80024e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <StartFanControlTask+0x88>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	4618      	mov	r0, r3
 80024f2:	f008 fe43 	bl	800b17c <osMutexWait>

        float current_temp = (float)temp_mdegC / 1000.0f;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	@ (800256c <StartFanControlTask+0x8c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002570 <StartFanControlTask+0x90>
 8002506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250a:	edc7 7a03 	vstr	s15, [r7, #12]
        float set_temp = my_variable;
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <StartFanControlTask+0x94>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60bb      	str	r3, [r7, #8]


        if (set_temp < current_temp) {
 8002514:	ed97 7a02 	vldr	s14, [r7, #8]
 8002518:	edd7 7a03 	vldr	s15, [r7, #12]
 800251c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	d50b      	bpl.n	800253e <StartFanControlTask+0x5e>
        	HAL_GPIO_WritePin(HEATER_CONTROL_GPIO_Port, HEATER_CONTROL_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800252c:	4812      	ldr	r0, [pc, #72]	@ (8002578 <StartFanControlTask+0x98>)
 800252e:	f003 f8e7 	bl	8005700 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(FAN_CONTROL_GPIO_Port, FAN_CONTROL_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2120      	movs	r1, #32
 8002536:	4811      	ldr	r0, [pc, #68]	@ (800257c <StartFanControlTask+0x9c>)
 8002538:	f003 f8e2 	bl	8005700 <HAL_GPIO_WritePin>
 800253c:	e00a      	b.n	8002554 <StartFanControlTask+0x74>
        } else {
            HAL_GPIO_WritePin(FAN_CONTROL_GPIO_Port, FAN_CONTROL_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	2120      	movs	r1, #32
 8002542:	480e      	ldr	r0, [pc, #56]	@ (800257c <StartFanControlTask+0x9c>)
 8002544:	f003 f8dc 	bl	8005700 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(HEATER_CONTROL_GPIO_Port, HEATER_CONTROL_Pin, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800254e:	480a      	ldr	r0, [pc, #40]	@ (8002578 <StartFanControlTask+0x98>)
 8002550:	f003 f8d6 	bl	8005700 <HAL_GPIO_WritePin>

        }

        osMutexRelease(i2cMutexHandle);
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <StartFanControlTask+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f008 fe5d 	bl	800b218 <osMutexRelease>
        osDelay(pdMS_TO_TICKS(1000));  // Odświeżanie co sekundę
 800255e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002562:	f008 fddf 	bl	800b124 <osDelay>
    for (;;) {
 8002566:	e7bf      	b.n	80024e8 <StartFanControlTask+0x8>
 8002568:	200003b8 	.word	0x200003b8
 800256c:	200006d8 	.word	0x200006d8
 8002570:	447a0000 	.word	0x447a0000
 8002574:	20000054 	.word	0x20000054
 8002578:	40020800 	.word	0x40020800
 800257c:	40020400 	.word	0x40020400

08002580 <StartHttpServerTask>:
}



void StartHttpServerTask(void *argument)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    while (!netif_is_up(&gnetif))
 8002588:	e002      	b.n	8002590 <StartHttpServerTask+0x10>
    {
        osDelay(100);
 800258a:	2064      	movs	r0, #100	@ 0x64
 800258c:	f008 fdca 	bl	800b124 <osDelay>
    while (!netif_is_up(&gnetif))
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <StartHttpServerTask+0x2c>)
 8002592:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f5      	beq.n	800258a <StartHttpServerTask+0xa>
    }

    httpd_init();
 800259e:	f00e ff9b 	bl	80114d8 <httpd_init>

    for (;;)
    {
        osDelay(1000);
 80025a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a6:	f008 fdbd 	bl	800b124 <osDelay>
 80025aa:	e7fa      	b.n	80025a2 <StartHttpServerTask+0x22>
 80025ac:	2000086c 	.word	0x2000086c

080025b0 <MX_FREERTOS_Init>:
    }
}

void MX_FREERTOS_Init(void) {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b0b4      	sub	sp, #208	@ 0xd0
 80025b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80025b6:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <MX_FREERTOS_Init+0x114>)
 80025b8:	f107 04b4 	add.w	r4, r7, #180	@ 0xb4
 80025bc:	461d      	mov	r5, r3
 80025be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025ca:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f008 fd5b 	bl	800b08c <osThreadCreate>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a3b      	ldr	r2, [pc, #236]	@ (80026c8 <MX_FREERTOS_Init+0x118>)
 80025da:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 80025dc:	4b3b      	ldr	r3, [pc, #236]	@ (80026cc <MX_FREERTOS_Init+0x11c>)
 80025de:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 80025e2:	461d      	mov	r5, r3
 80025e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 80025f0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f008 fd48 	bl	800b08c <osThreadCreate>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4a34      	ldr	r2, [pc, #208]	@ (80026d0 <MX_FREERTOS_Init+0x120>)
 8002600:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 8002602:	4b34      	ldr	r3, [pc, #208]	@ (80026d4 <MX_FREERTOS_Init+0x124>)
 8002604:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002608:	461d      	mov	r5, r3
 800260a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 8002616:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f008 fd35 	bl	800b08c <osThreadCreate>
 8002622:	4603      	mov	r3, r0
 8002624:	4a2c      	ldr	r2, [pc, #176]	@ (80026d8 <MX_FREERTOS_Init+0x128>)
 8002626:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(tempSensorTask, StartTempSensorTask, osPriorityLow, 0, 256);
 8002628:	4b2c      	ldr	r3, [pc, #176]	@ (80026dc <MX_FREERTOS_Init+0x12c>)
 800262a:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800262e:	461d      	mov	r5, r3
 8002630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(tempSensorTask), NULL);
 800263c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f008 fd22 	bl	800b08c <osThreadCreate>
  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 256);
 8002648:	4b25      	ldr	r3, [pc, #148]	@ (80026e0 <MX_FREERTOS_Init+0x130>)
 800264a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800264e:	461d      	mov	r5, r3
 8002650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(lcdTask), NULL);
 800265c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fd12 	bl	800b08c <osThreadCreate>
  osThreadDef(fanTask, StartFanControlTask, osPriorityNormal, 0, 256);
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <MX_FREERTOS_Init+0x134>)
 800266a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800266e:	461d      	mov	r5, r3
 8002670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(fanTask), NULL);
 800267c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f008 fd02 	bl	800b08c <osThreadCreate>
  osMutexDef(i2cMutex);
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 8002690:	f107 0320 	add.w	r3, r7, #32
 8002694:	4618      	mov	r0, r3
 8002696:	f008 fd59 	bl	800b14c <osMutexCreate>
 800269a:	4603      	mov	r3, r0
 800269c:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <MX_FREERTOS_Init+0x138>)
 800269e:	6013      	str	r3, [r2, #0]
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 80026a0:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <MX_FREERTOS_Init+0x13c>)
 80026a2:	1d3c      	adds	r4, r7, #4
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 fce8 	bl	800b08c <osThreadCreate>


  /* USER CODE END RTOS_THREADS */

}
 80026bc:	bf00      	nop
 80026be:	37d0      	adds	r7, #208	@ 0xd0
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	0801f8e8 	.word	0x0801f8e8
 80026c8:	200003ac 	.word	0x200003ac
 80026cc:	0801f910 	.word	0x0801f910
 80026d0:	200003b0 	.word	0x200003b0
 80026d4:	0801f938 	.word	0x0801f938
 80026d8:	200003b4 	.word	0x200003b4
 80026dc:	0801f964 	.word	0x0801f964
 80026e0:	0801f988 	.word	0x0801f988
 80026e4:	0801f9ac 	.word	0x0801f9ac
 80026e8:	200003b8 	.word	0x200003b8
 80026ec:	0801f9d8 	.word	0x0801f9d8

080026f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80026f8:	f007 fe56 	bl	800a3a8 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80026fc:	2101      	movs	r1, #1
 80026fe:	4804      	ldr	r0, [pc, #16]	@ (8002710 <StartDefaultTask+0x20>)
 8002700:	f003 f817 	bl	8005732 <HAL_GPIO_TogglePin>
    osDelay(100);
 8002704:	2064      	movs	r0, #100	@ 0x64
 8002706:	f008 fd0d 	bl	800b124 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800270a:	bf00      	nop
 800270c:	e7f6      	b.n	80026fc <StartDefaultTask+0xc>
 800270e:	bf00      	nop
 8002710:	40020400 	.word	0x40020400

08002714 <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0a0      	sub	sp, #128	@ 0x80
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8002720:	2064      	movs	r0, #100	@ 0x64
 8002722:	f008 fcff 	bl	800b124 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2020      	movs	r0, #32
 800272c:	f00b fd24 	bl	800e178 <netconn_new_with_proto_and_callback>
 8002730:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 8002732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <StartUdpEcho+0x34>
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <StartUdpEcho+0xe4>)
 800273a:	f240 1221 	movw	r2, #289	@ 0x121
 800273e:	492f      	ldr	r1, [pc, #188]	@ (80027fc <StartUdpEcho+0xe8>)
 8002740:	482f      	ldr	r0, [pc, #188]	@ (8002800 <StartUdpEcho+0xec>)
 8002742:	f01a fed1 	bl	801d4e8 <iprintf>
 8002746:	e053      	b.n	80027f0 <StartUdpEcho+0xdc>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 8002748:	2208      	movs	r2, #8
 800274a:	492e      	ldr	r1, [pc, #184]	@ (8002804 <StartUdpEcho+0xf0>)
 800274c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800274e:	f00b fdcd 	bl	800e2ec <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 8002752:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002756:	4619      	mov	r1, r3
 8002758:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800275a:	f00c f833 	bl	800e7c4 <netconn_recv>
 800275e:	4603      	mov	r3, r0
 8002760:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 8002764:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f2      	bne.n	8002752 <StartUdpEcho+0x3e>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800276c:	2201      	movs	r2, #1
 800276e:	2180      	movs	r1, #128	@ 0x80
 8002770:	4825      	ldr	r0, [pc, #148]	@ (8002808 <StartUdpEcho+0xf4>)
 8002772:	f002 ffc5 	bl	8005700 <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 8002776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800277e:	2300      	movs	r3, #0
 8002780:	2220      	movs	r2, #32
 8002782:	f010 fcf7 	bl	8013174 <pbuf_copy_partial>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	891b      	ldrh	r3, [r3, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	d123      	bne.n	80027dc <StartUdpEcho+0xc8>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 8002794:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002796:	3301      	adds	r3, #1
 8002798:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 800279a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	891b      	ldrh	r3, [r3, #8]
 80027a0:	3380      	adds	r3, #128	@ 0x80
 80027a2:	443b      	add	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 80027aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027ae:	f107 000c 	add.w	r0, r7, #12
 80027b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027b4:	4915      	ldr	r1, [pc, #84]	@ (800280c <StartUdpEcho+0xf8>)
 80027b6:	f01a fea9 	bl	801d50c <siprintf>
 80027ba:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 80027bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80027c0:	b292      	uxth	r2, r2
 80027c2:	f107 010c 	add.w	r1, r7, #12
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00d fe10 	bl	80103ec <netbuf_ref>
		err = netconn_send(conn, buf);
 80027cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ce:	4619      	mov	r1, r3
 80027d0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80027d2:	f00c f871 	bl	800e8b8 <netconn_send>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 80027dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027de:	4618      	mov	r0, r3
 80027e0:	f00d fde4 	bl	80103ac <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	@ 0x80
 80027e8:	4807      	ldr	r0, [pc, #28]	@ (8002808 <StartUdpEcho+0xf4>)
 80027ea:	f002 ff89 	bl	8005700 <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 80027ee:	e7b0      	b.n	8002752 <StartUdpEcho+0x3e>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 80027f0:	3780      	adds	r7, #128	@ 0x80
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	0801f9f4 	.word	0x0801f9f4
 80027fc:	0801fa0c 	.word	0x0801fa0c
 8002800:	0801fa24 	.word	0x0801fa24
 8002804:	08024a7c 	.word	0x08024a7c
 8002808:	40020400 	.word	0x40020400
 800280c:	0801fa4c 	.word	0x0801fa4c

08002810 <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b096      	sub	sp, #88	@ 0x58
 8002814:	af02      	add	r7, sp, #8
 8002816:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 800281c:	2064      	movs	r0, #100	@ 0x64
 800281e:	f008 fc81 	bl	800b124 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	2010      	movs	r0, #16
 8002828:	f00b fca6 	bl	800e178 <netconn_new_with_proto_and_callback>
 800282c:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 800282e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8083 	beq.w	800293c <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 8002836:	2207      	movs	r2, #7
 8002838:	2100      	movs	r1, #0
 800283a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800283c:	f00b fd56 	bl	800e2ec <netconn_bind>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 8002846:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800284a:	2b00      	cmp	r3, #0
 800284c:	d172      	bne.n	8002934 <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 800284e:	21ff      	movs	r1, #255	@ 0xff
 8002850:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002852:	f00b fd83 	bl	800e35c <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 8002856:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800285a:	4619      	mov	r1, r3
 800285c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800285e:	f00b fda9 	bl	800e3b4 <netconn_accept>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 8002868:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f2      	bne.n	8002856 <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8002870:	e04d      	b.n	800290e <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002872:	2201      	movs	r2, #1
 8002874:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002878:	4832      	ldr	r0, [pc, #200]	@ (8002944 <StartTcpEcho+0x134>)
 800287a:	f002 ff41 	bl	8005700 <HAL_GPIO_WritePin>
		    msg_cnt++;
 800287e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002880:	3301      	adds	r3, #1
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 8002884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002886:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 800288a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800288e:	4618      	mov	r0, r3
 8002890:	f00d fdf6 	bl	8010480 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800289a:	492b      	ldr	r1, [pc, #172]	@ (8002948 <StartTcpEcho+0x138>)
 800289c:	4618      	mov	r0, r3
 800289e:	f01a fe35 	bl	801d50c <siprintf>
 80028a2:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 80028a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	f00c f82f 	bl	800e914 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 80028b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80028ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028bc:	461a      	mov	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2301      	movs	r3, #1
 80028c4:	f00c f826 	bl	800e914 <netconn_write_partly>
			  char postfix[] = "\r\n";
 80028c8:	4a20      	ldr	r2, [pc, #128]	@ (800294c <StartTcpEcho+0x13c>)
 80028ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4611      	mov	r1, r2
 80028d2:	8019      	strh	r1, [r3, #0]
 80028d4:	3302      	adds	r3, #2
 80028d6:	0c12      	lsrs	r2, r2, #16
 80028d8:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 80028da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80028dc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2300      	movs	r3, #0
 80028e6:	2202      	movs	r2, #2
 80028e8:	f00c f814 	bl	800e914 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	4618      	mov	r0, r3
 80028f0:	f00d fe10 	bl	8010514 <netbuf_next>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dac4      	bge.n	8002884 <StartTcpEcho+0x74>
            netbuf_delete(buf);
 80028fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fc:	4618      	mov	r0, r3
 80028fe:	f00d fd55 	bl	80103ac <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002908:	480e      	ldr	r0, [pc, #56]	@ (8002944 <StartTcpEcho+0x134>)
 800290a:	f002 fef9 	bl	8005700 <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 800290e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002910:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f00b ff54 	bl	800e7c4 <netconn_recv>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0a7      	beq.n	8002872 <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 8002922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002924:	4618      	mov	r0, r3
 8002926:	f00c f8f7 	bl	800eb18 <netconn_close>
		  netconn_delete(newconn);
 800292a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292c:	4618      	mov	r0, r3
 800292e:	f00b fcc1 	bl	800e2b4 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 8002932:	e790      	b.n	8002856 <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 8002934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002936:	4618      	mov	r0, r3
 8002938:	f00b fcbc 	bl	800e2b4 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 800293c:	bf00      	nop
 800293e:	3750      	adds	r7, #80	@ 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40020400 	.word	0x40020400
 8002948:	0801fa60 	.word	0x0801fa60
 800294c:	0801fa74 	.word	0x0801fa74

08002950 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	@ 0x30
 8002954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002966:	4b7e      	ldr	r3, [pc, #504]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b60 <MX_GPIO_Init+0x210>)
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b7b      	ldr	r3, [pc, #492]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800297e:	4b78      	ldr	r3, [pc, #480]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a77      	ldr	r2, [pc, #476]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b75      	ldr	r3, [pc, #468]	@ (8002b60 <MX_GPIO_Init+0x210>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002996:	4b72      	ldr	r3, [pc, #456]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	4a71      	ldr	r2, [pc, #452]	@ (8002b60 <MX_GPIO_Init+0x210>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b69      	ldr	r3, [pc, #420]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	4b66      	ldr	r3, [pc, #408]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4a65      	ldr	r2, [pc, #404]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029de:	4b60      	ldr	r3, [pc, #384]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029e4:	f043 0308 	orr.w	r3, r3, #8
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	4a59      	ldr	r2, [pc, #356]	@ (8002b60 <MX_GPIO_Init+0x210>)
 80029fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a02:	4b57      	ldr	r3, [pc, #348]	@ (8002b60 <MX_GPIO_Init+0x210>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2110      	movs	r1, #16
 8002a12:	4854      	ldr	r0, [pc, #336]	@ (8002b64 <MX_GPIO_Init+0x214>)
 8002a14:	f002 fe74 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|FAN_CONTROL_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 8002a1e:	4852      	ldr	r0, [pc, #328]	@ (8002b68 <MX_GPIO_Init+0x218>)
 8002a20:	f002 fe6e 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2140      	movs	r1, #64	@ 0x40
 8002a28:	4850      	ldr	r0, [pc, #320]	@ (8002b6c <MX_GPIO_Init+0x21c>)
 8002a2a:	f002 fe69 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEATER_CONTROL_GPIO_Port, HEATER_CONTROL_Pin, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a34:	484e      	ldr	r0, [pc, #312]	@ (8002b70 <MX_GPIO_Init+0x220>)
 8002a36:	f002 fe63 	bl	8005700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 8002a3a:	2310      	movs	r3, #16
 8002a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4844      	ldr	r0, [pc, #272]	@ (8002b64 <MX_GPIO_Init+0x214>)
 8002a52:	f002 fca9 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4840      	ldr	r0, [pc, #256]	@ (8002b70 <MX_GPIO_Init+0x220>)
 8002a6e:	f002 fc9b 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|FAN_CONTROL_Pin|LD2_Pin;
 8002a72:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8002a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4837      	ldr	r0, [pc, #220]	@ (8002b68 <MX_GPIO_Init+0x218>)
 8002a8c:	f002 fc8c 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002a90:	2340      	movs	r3, #64	@ 0x40
 8002a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4831      	ldr	r0, [pc, #196]	@ (8002b6c <MX_GPIO_Init+0x21c>)
 8002aa8:	f002 fc7e 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002aac:	2380      	movs	r3, #128	@ 0x80
 8002aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	482b      	ldr	r0, [pc, #172]	@ (8002b6c <MX_GPIO_Init+0x21c>)
 8002ac0:	f002 fc72 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_CONTROL_Pin;
 8002ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(HEATER_CONTROL_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 031c 	add.w	r3, r7, #28
 8002ada:	4619      	mov	r1, r3
 8002adc:	4824      	ldr	r0, [pc, #144]	@ (8002b70 <MX_GPIO_Init+0x220>)
 8002ade:	f002 fc63 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ae2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002af4:	230a      	movs	r3, #10
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	481d      	ldr	r0, [pc, #116]	@ (8002b74 <MX_GPIO_Init+0x224>)
 8002b00:	f002 fc52 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	4619      	mov	r1, r3
 8002b18:	4816      	ldr	r0, [pc, #88]	@ (8002b74 <MX_GPIO_Init+0x224>)
 8002b1a:	f002 fc45 	bl	80053a8 <HAL_GPIO_Init>

  /* Konfiguracja pinu PB5 jako wyjście */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	480c      	ldr	r0, [pc, #48]	@ (8002b68 <MX_GPIO_Init+0x218>)
 8002b36:	f002 fc37 	bl	80053a8 <HAL_GPIO_Init>

  /* Konfiguracja pinu PC8 jako wyjście */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b40:	2301      	movs	r3, #1
 8002b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <MX_GPIO_Init+0x220>)
 8002b54:	f002 fc28 	bl	80053a8 <HAL_GPIO_Init>
}
 8002b58:	bf00      	nop
 8002b5a:	3730      	adds	r7, #48	@ 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40021800 	.word	0x40021800
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40020000 	.word	0x40020000

08002b78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <MX_I2C1_Init+0x78>)
 8002b80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b84:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <MX_I2C1_Init+0x7c>)
 8002b86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b88:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bb2:	480e      	ldr	r0, [pc, #56]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002bb4:	f002 fdd8 	bl	8005768 <HAL_I2C_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bbe:	f000 fa3b 	bl	8003038 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4809      	ldr	r0, [pc, #36]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002bc6:	f003 f945 	bl	8005e54 <HAL_I2CEx_ConfigAnalogFilter>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bd0:	f000 fa32 	bl	8003038 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <MX_I2C1_Init+0x74>)
 8002bd8:	f003 f987 	bl	8005eea <HAL_I2CEx_ConfigDigitalFilter>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002be2:	f000 fa29 	bl	8003038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000065c 	.word	0x2000065c
 8002bf0:	40005400 	.word	0x40005400
 8002bf4:	20404768 	.word	0x20404768

08002bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b0aa      	sub	sp, #168	@ 0xa8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	2284      	movs	r2, #132	@ 0x84
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f01a fd04 	bl	801d626 <memset>
  if(i2cHandle->Instance==I2C1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a22      	ldr	r2, [pc, #136]	@ (8002cac <HAL_I2C_MspInit+0xb4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d13c      	bne.n	8002ca2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c2c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 fece 	bl	80069d8 <HAL_RCCEx_PeriphCLKConfig>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c42:	f000 f9f9 	bl	8003038 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c66:	2312      	movs	r3, #18
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c82:	4619      	mov	r1, r3
 8002c84:	480b      	ldr	r0, [pc, #44]	@ (8002cb4 <HAL_I2C_MspInit+0xbc>)
 8002c86:	f002 fb8f 	bl	80053a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_I2C_MspInit+0xb8>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	37a8      	adds	r7, #168	@ 0xa8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020400 	.word	0x40020400

08002cb8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  return (HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4807      	ldr	r0, [pc, #28]	@ (8002cec <_write+0x34>)
 8002cd0:	f006 f8dc 	bl	8008e8c <HAL_UART_Transmit>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <_write+0x26>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	e001      	b.n	8002ce2 <_write+0x2a>
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200007e0 	.word	0x200007e0

08002cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf0:	b5b0      	push	{r4, r5, r7, lr}
 8002cf2:	b08c      	sub	sp, #48	@ 0x30
 8002cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf6:	f000 fe83 	bl	8003a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfa:	f000 f8c7 	bl	8002e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfe:	f7ff fe27 	bl	8002950 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002d02:	f000 fc5b 	bl	80035bc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002d06:	f7ff ff37 	bl	8002b78 <MX_I2C1_Init>
  MX_SPI4_Init();
 8002d0a:	f000 f99b 	bl	8003044 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002d0e:	f000 fb3f 	bl	8003390 <MX_TIM2_Init>
  MX_TIM7_Init();
 8002d12:	f000 fbb3 	bl	800347c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 8002d16:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <main+0x15c>)
 8002d18:	224e      	movs	r2, #78	@ 0x4e
 8002d1a:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e4c <main+0x15c>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  lcd_init(&disp);
 8002d24:	4849      	ldr	r0, [pc, #292]	@ (8002e4c <main+0x15c>)
 8002d26:	f7ff fa29 	bl	800217c <lcd_init>
  sprintf((char *)disp.f_line, "Wartosc: %.2f", my_variable);
 8002d2a:	4b49      	ldr	r3, [pc, #292]	@ (8002e50 <main+0x160>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc3a 	bl	80005a8 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4946      	ldr	r1, [pc, #280]	@ (8002e54 <main+0x164>)
 8002d3a:	4847      	ldr	r0, [pc, #284]	@ (8002e58 <main+0x168>)
 8002d3c:	f01a fbe6 	bl	801d50c <siprintf>
  sprintf((char *)disp.s_line, "");
 8002d40:	4946      	ldr	r1, [pc, #280]	@ (8002e5c <main+0x16c>)
 8002d42:	4847      	ldr	r0, [pc, #284]	@ (8002e60 <main+0x170>)
 8002d44:	f01a fbe2 	bl	801d50c <siprintf>
  lcd_display(&disp);
 8002d48:	4840      	ldr	r0, [pc, #256]	@ (8002e4c <main+0x15c>)
 8002d4a:	f7ff fa9d 	bl	8002288 <lcd_display>

  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4944      	ldr	r1, [pc, #272]	@ (8002e64 <main+0x174>)
 8002d52:	4845      	ldr	r0, [pc, #276]	@ (8002e68 <main+0x178>)
 8002d54:	f006 f91d 	bl	8008f92 <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev);
 8002d58:	4844      	ldr	r0, [pc, #272]	@ (8002e6c <main+0x17c>)
 8002d5a:	f7ff f8df 	bl	8001f1c <BMP2_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002d5e:	f7ff fc27 	bl	80025b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d62:	f008 f97c 	bl	800b05e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float prev_variable = 0;
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
	  if (prev_variable != my_variable) {
 8002d6c:	4b38      	ldr	r3, [pc, #224]	@ (8002e50 <main+0x160>)
 8002d6e:	edd3 7a00 	vldr	s15, [r3]
 8002d72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d76:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d016      	beq.n	8002dae <main+0xbe>
	  char buffer[16];
	  sprintf(buffer, "Val: %.2f", my_variable);
 8002d80:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <main+0x160>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fc0f 	bl	80005a8 <__aeabi_f2d>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4638      	mov	r0, r7
 8002d90:	4937      	ldr	r1, [pc, #220]	@ (8002e70 <main+0x180>)
 8002d92:	f01a fbbb 	bl	801d50c <siprintf>
	  sprintf((char *)disp.f_line, "%s", buffer);
 8002d96:	463b      	mov	r3, r7
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4936      	ldr	r1, [pc, #216]	@ (8002e74 <main+0x184>)
 8002d9c:	482e      	ldr	r0, [pc, #184]	@ (8002e58 <main+0x168>)
 8002d9e:	f01a fbb5 	bl	801d50c <siprintf>
	  lcd_display(&disp);  // Aktualizacja wyświetlacza LCD
 8002da2:	482a      	ldr	r0, [pc, #168]	@ (8002e4c <main+0x15c>)
 8002da4:	f7ff fa70 	bl	8002288 <lcd_display>
	  prev_variable = my_variable;
 8002da8:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <main+0x160>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	  HAL_Delay(500);
 8002dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002db2:	f000 fe83 	bl	8003abc <HAL_Delay>

	  double temp, press;
	  BMP2_ReadData(&bmp2dev, &press, &temp);
 8002db6:	f107 0218 	add.w	r2, r7, #24
 8002dba:	f107 0310 	add.w	r3, r7, #16
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	482a      	ldr	r0, [pc, #168]	@ (8002e6c <main+0x17c>)
 8002dc2:	f7ff f977 	bl	80020b4 <BMP2_ReadData>
	  temp_mdegC = 1000*temp;
 8002dc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <main+0x188>)
 8002dd0:	f7fd fc42 	bl	8000658 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7fd feec 	bl	8000bb8 <__aeabi_d2iz>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4a26      	ldr	r2, [pc, #152]	@ (8002e7c <main+0x18c>)
 8002de4:	6013      	str	r3, [r2, #0]
	  press_Pa = 100*press;
 8002de6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <main+0x190>)
 8002df0:	f7fd fc32 	bl	8000658 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd fedc 	bl	8000bb8 <__aeabi_d2iz>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a20      	ldr	r2, [pc, #128]	@ (8002e84 <main+0x194>)
 8002e04:	6013      	str	r3, [r2, #0]
	  printf("{\"id\":1,\"temp\":%5.2f, \"press\":%7.2f }\r\n", (float)temp, (float)press);
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7fd fefb 	bl	8000c08 <__aeabi_d2f>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fbc7 	bl	80005a8 <__aeabi_f2d>
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	460d      	mov	r5, r1
 8002e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fd feef 	bl	8000c08 <__aeabi_d2f>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fbbb 	bl	80005a8 <__aeabi_f2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	462b      	mov	r3, r5
 8002e3e:	4812      	ldr	r0, [pc, #72]	@ (8002e88 <main+0x198>)
 8002e40:	f01a fb52 	bl	801d4e8 <iprintf>
	  HAL_Delay(250);
 8002e44:	20fa      	movs	r0, #250	@ 0xfa
 8002e46:	f000 fe39 	bl	8003abc <HAL_Delay>
  {
 8002e4a:	e78f      	b.n	8002d6c <main+0x7c>
 8002e4c:	200006b0 	.word	0x200006b0
 8002e50:	20000054 	.word	0x20000054
 8002e54:	0801fa78 	.word	0x0801fa78
 8002e58:	200006b1 	.word	0x200006b1
 8002e5c:	0801fa88 	.word	0x0801fa88
 8002e60:	200006c2 	.word	0x200006c2
 8002e64:	200006d4 	.word	0x200006d4
 8002e68:	200007e0 	.word	0x200007e0
 8002e6c:	20000018 	.word	0x20000018
 8002e70:	0801fa8c 	.word	0x0801fa8c
 8002e74:	0801fa98 	.word	0x0801fa98
 8002e78:	408f4000 	.word	0x408f4000
 8002e7c:	200006d8 	.word	0x200006d8
 8002e80:	40590000 	.word	0x40590000
 8002e84:	200006dc 	.word	0x200006dc
 8002e88:	0801fa9c 	.word	0x0801fa9c

08002e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b094      	sub	sp, #80	@ 0x50
 8002e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e92:	f107 0320 	add.w	r3, r7, #32
 8002e96:	2230      	movs	r2, #48	@ 0x30
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f01a fbc3 	bl	801d626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002eb0:	f003 f868 	bl	8005f84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <SystemClock_Config+0xd4>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <SystemClock_Config+0xd4>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <SystemClock_Config+0xd4>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <SystemClock_Config+0xd8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a24      	ldr	r2, [pc, #144]	@ (8002f64 <SystemClock_Config+0xd8>)
 8002ed2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <SystemClock_Config+0xd8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ee8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002efc:	23d8      	movs	r3, #216	@ 0xd8
 8002efe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f00:	2302      	movs	r3, #2
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002f04:	2303      	movs	r3, #3
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f08:	f107 0320 	add.w	r3, r7, #32
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 f899 	bl	8006044 <HAL_RCC_OscConfig>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002f18:	f000 f88e 	bl	8003038 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f1c:	f003 f842 	bl	8005fa4 <HAL_PWREx_EnableOverDrive>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002f26:	f000 f887 	bl	8003038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f2a:	230f      	movs	r3, #15
 8002f2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	2107      	movs	r1, #7
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fb1f 	bl	800658c <HAL_RCC_ClockConfig>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002f54:	f000 f870 	bl	8003038 <Error_Handler>
  }
}
 8002f58:	bf00      	nop
 8002f5a:	3750      	adds	r7, #80	@ 0x50
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000

08002f68 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2a      	ldr	r2, [pc, #168]	@ (8003020 <HAL_UART_RxCpltCallback+0xb8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d14d      	bne.n	8003016 <HAL_UART_RxCpltCallback+0xae>
        if (rx_buffer[0] == '+') {
 8002f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <HAL_UART_RxCpltCallback+0xbc>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002f80:	d113      	bne.n	8002faa <HAL_UART_RxCpltCallback+0x42>
            my_variable += 0.5;
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_UART_RxCpltCallback+0xc0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fb0e 	bl	80005a8 <__aeabi_f2d>
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	4b26      	ldr	r3, [pc, #152]	@ (800302c <HAL_UART_RxCpltCallback+0xc4>)
 8002f92:	f7fd f9ab 	bl	80002ec <__adddf3>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7fd fe33 	bl	8000c08 <__aeabi_d2f>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a20      	ldr	r2, [pc, #128]	@ (8003028 <HAL_UART_RxCpltCallback+0xc0>)
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e016      	b.n	8002fd8 <HAL_UART_RxCpltCallback+0x70>
        } else if (rx_buffer[0] == '-') {
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <HAL_UART_RxCpltCallback+0xbc>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b2d      	cmp	r3, #45	@ 0x2d
 8002fb0:	d112      	bne.n	8002fd8 <HAL_UART_RxCpltCallback+0x70>
            my_variable -= 0.5;
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <HAL_UART_RxCpltCallback+0xc0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd faf6 	bl	80005a8 <__aeabi_f2d>
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_UART_RxCpltCallback+0xc4>)
 8002fc2:	f7fd f991 	bl	80002e8 <__aeabi_dsub>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fe1b 	bl	8000c08 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a14      	ldr	r2, [pc, #80]	@ (8003028 <HAL_UART_RxCpltCallback+0xc0>)
 8002fd6:	6013      	str	r3, [r2, #0]
        }

        // Wysyłanie aktualnej wartości
        char response[20];
        sprintf(response, "%.2f\n", my_variable);
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <HAL_UART_RxCpltCallback+0xc0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fae3 	bl	80005a8 <__aeabi_f2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	f107 000c 	add.w	r0, r7, #12
 8002fea:	4911      	ldr	r1, [pc, #68]	@ (8003030 <HAL_UART_RxCpltCallback+0xc8>)
 8002fec:	f01a fa8e 	bl	801d50c <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd f96b 	bl	80002d0 <strlen>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	f107 010c 	add.w	r1, r7, #12
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	480b      	ldr	r0, [pc, #44]	@ (8003034 <HAL_UART_RxCpltCallback+0xcc>)
 8003008:	f005 ff40 	bl	8008e8c <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);  // Ponowne włączenie odbioru
 800300c:	2201      	movs	r2, #1
 800300e:	4905      	ldr	r1, [pc, #20]	@ (8003024 <HAL_UART_RxCpltCallback+0xbc>)
 8003010:	4808      	ldr	r0, [pc, #32]	@ (8003034 <HAL_UART_RxCpltCallback+0xcc>)
 8003012:	f005 ffbe 	bl	8008f92 <HAL_UART_Receive_IT>
    }
}
 8003016:	bf00      	nop
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40004800 	.word	0x40004800
 8003024:	200006d4 	.word	0x200006d4
 8003028:	20000054 	.word	0x20000054
 800302c:	3fe00000 	.word	0x3fe00000
 8003030:	0801fac4 	.word	0x0801fac4
 8003034:	200007e0 	.word	0x200007e0

08003038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800303c:	b672      	cpsid	i
}
 800303e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <Error_Handler+0x8>

08003044 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003048:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800304a:	4a1c      	ldr	r2, [pc, #112]	@ (80030bc <MX_SPI4_Init+0x78>)
 800304c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003050:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003054:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003056:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800305c:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800305e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003062:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003066:	2202      	movs	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800306c:	2201      	movs	r2, #1
 800306e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003076:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800307a:	2218      	movs	r2, #24
 800307c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003086:	2200      	movs	r2, #0
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003090:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003092:	2207      	movs	r2, #7
 8003094:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <MX_SPI4_Init+0x74>)
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <MX_SPI4_Init+0x74>)
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80030a2:	4805      	ldr	r0, [pc, #20]	@ (80030b8 <MX_SPI4_Init+0x74>)
 80030a4:	f004 f888 	bl	80071b8 <HAL_SPI_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80030ae:	f7ff ffc3 	bl	8003038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200006e0 	.word	0x200006e0
 80030bc:	40013400 	.word	0x40013400

080030c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	@ 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a17      	ldr	r2, [pc, #92]	@ (800313c <HAL_SPI_MspInit+0x7c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d127      	bne.n	8003132 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 80030e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ee:	4b14      	ldr	r3, [pc, #80]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fa:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a10      	ldr	r2, [pc, #64]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 8003100:	f043 0310 	orr.w	r3, r3, #16
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b0e      	ldr	r3, [pc, #56]	@ (8003140 <HAL_SPI_MspInit+0x80>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SPI_SCK_Pin|BMP280_SPI_MISO_Pin|BMP280_SPI_MOSI_Pin;
 8003112:	2364      	movs	r3, #100	@ 0x64
 8003114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311e:	2303      	movs	r3, #3
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003122:	2305      	movs	r3, #5
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4619      	mov	r1, r3
 800312c:	4805      	ldr	r0, [pc, #20]	@ (8003144 <HAL_SPI_MspInit+0x84>)
 800312e:	f002 f93b 	bl	80053a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003132:	bf00      	nop
 8003134:	3728      	adds	r7, #40	@ 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40013400 	.word	0x40013400
 8003140:	40023800 	.word	0x40023800
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_MspInit+0x4c>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	4a10      	ldr	r2, [pc, #64]	@ (8003194 <HAL_MspInit+0x4c>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	@ 0x40
 800315a:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <HAL_MspInit+0x4c>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_MspInit+0x4c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <HAL_MspInit+0x4c>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003170:	6453      	str	r3, [r2, #68]	@ 0x44
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_MspInit+0x4c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	210f      	movs	r1, #15
 8003182:	f06f 0001 	mvn.w	r0, #1
 8003186:	f000 fd98 	bl	8003cba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <NMI_Handler+0x4>

080031a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <HardFault_Handler+0x4>

080031a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <MemManage_Handler+0x4>

080031b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <BusFault_Handler+0x4>

080031b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <UsageFault_Handler+0x4>

080031c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d2:	f000 fc53 	bl	8003a7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80031d6:	f00a f949 	bl	800d46c <xTaskGetSchedulerState>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80031e0:	f00a fd2a 	bl	800dc38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031ec:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <USART3_IRQHandler+0x10>)
 80031ee:	f005 ff15 	bl	800901c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200007e0 	.word	0x200007e0

080031fc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003200:	4802      	ldr	r0, [pc, #8]	@ (800320c <ETH_IRQHandler+0x10>)
 8003202:	f001 f9fd 	bl	8004600 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000524c 	.word	0x2000524c

08003210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
	return 1;
 8003214:	2301      	movs	r3, #1
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_kill>:

int _kill(int pid, int sig)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <_kill+0x20>)
 800322c:	2216      	movs	r2, #22
 800322e:	601a      	str	r2, [r3, #0]
	return -1;
 8003230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	2000f630 	.word	0x2000f630

08003244 <_exit>:

void _exit (int status)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffe5 	bl	8003220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <_exit+0x12>

0800325a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b086      	sub	sp, #24
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e00a      	b.n	8003282 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800326c:	f3af 8000 	nop.w
 8003270:	4601      	mov	r1, r0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	60ba      	str	r2, [r7, #8]
 8003278:	b2ca      	uxtb	r2, r1
 800327a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	dbf0      	blt.n	800326c <_read+0x12>
	}

return len;
 800328a:	687b      	ldr	r3, [r7, #4]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032bc:	605a      	str	r2, [r3, #4]
	return 0;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <_isatty>:

int _isatty(int file)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	return 1;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
	return 0;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003304:	4a14      	ldr	r2, [pc, #80]	@ (8003358 <_sbrk+0x5c>)
 8003306:	4b15      	ldr	r3, [pc, #84]	@ (800335c <_sbrk+0x60>)
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003310:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <_sbrk+0x64>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003318:	4b11      	ldr	r3, [pc, #68]	@ (8003360 <_sbrk+0x64>)
 800331a:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <_sbrk+0x68>)
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <_sbrk+0x64>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d205      	bcs.n	8003338 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <_sbrk+0x6c>)
 800332e:	220c      	movs	r2, #12
 8003330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	e009      	b.n	800334c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333e:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	4a06      	ldr	r2, [pc, #24]	@ (8003360 <_sbrk+0x64>)
 8003348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20050000 	.word	0x20050000
 800335c:	00000400 	.word	0x00000400
 8003360:	20000744 	.word	0x20000744
 8003364:	2000f640 	.word	0x2000f640
 8003368:	2000f630 	.word	0x2000f630

0800336c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <SystemInit+0x20>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003376:	4a05      	ldr	r2, [pc, #20]	@ (800338c <SystemInit+0x20>)
 8003378:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800337c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003396:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b0:	463b      	mov	r3, r7
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	611a      	str	r2, [r3, #16]
 80033be:	615a      	str	r2, [r3, #20]
 80033c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80033ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033cc:	226b      	movs	r2, #107	@ 0x6b
 80033ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d0:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80033d6:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033de:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033ea:	4823      	ldr	r0, [pc, #140]	@ (8003478 <MX_TIM2_Init+0xe8>)
 80033ec:	f004 fe44 	bl	8008078 <HAL_TIM_Base_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80033f6:	f7ff fe1f 	bl	8003038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003400:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003404:	4619      	mov	r1, r3
 8003406:	481c      	ldr	r0, [pc, #112]	@ (8003478 <MX_TIM2_Init+0xe8>)
 8003408:	f005 f802 	bl	8008410 <HAL_TIM_ConfigClockSource>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003412:	f7ff fe11 	bl	8003038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003416:	4818      	ldr	r0, [pc, #96]	@ (8003478 <MX_TIM2_Init+0xe8>)
 8003418:	f004 fe85 	bl	8008126 <HAL_TIM_PWM_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003422:	f7ff fe09 	bl	8003038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800342e:	f107 031c 	add.w	r3, r7, #28
 8003432:	4619      	mov	r1, r3
 8003434:	4810      	ldr	r0, [pc, #64]	@ (8003478 <MX_TIM2_Init+0xe8>)
 8003436:	f005 fc4d 	bl	8008cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003440:	f7ff fdfa 	bl	8003038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003444:	2360      	movs	r3, #96	@ 0x60
 8003446:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003454:	463b      	mov	r3, r7
 8003456:	220c      	movs	r2, #12
 8003458:	4619      	mov	r1, r3
 800345a:	4807      	ldr	r0, [pc, #28]	@ (8003478 <MX_TIM2_Init+0xe8>)
 800345c:	f004 fec4 	bl	80081e8 <HAL_TIM_PWM_ConfigChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003466:	f7ff fde7 	bl	8003038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800346a:	4803      	ldr	r0, [pc, #12]	@ (8003478 <MX_TIM2_Init+0xe8>)
 800346c:	f000 f870 	bl	8003550 <HAL_TIM_MspPostInit>

}
 8003470:	bf00      	nop
 8003472:	3738      	adds	r7, #56	@ 0x38
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000748 	.word	0x20000748

0800347c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <MX_TIM7_Init+0x68>)
 800348e:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <MX_TIM7_Init+0x6c>)
 8003490:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 8003492:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <MX_TIM7_Init+0x68>)
 8003494:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8003498:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <MX_TIM7_Init+0x68>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80034a0:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <MX_TIM7_Init+0x68>)
 80034a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80034a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <MX_TIM7_Init+0x68>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80034ae:	480d      	ldr	r0, [pc, #52]	@ (80034e4 <MX_TIM7_Init+0x68>)
 80034b0:	f004 fde2 	bl	8008078 <HAL_TIM_Base_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80034ba:	f7ff fdbd 	bl	8003038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <MX_TIM7_Init+0x68>)
 80034cc:	f005 fc02 	bl	8008cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80034d6:	f7ff fdaf 	bl	8003038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000794 	.word	0x20000794
 80034e8:	40001400 	.word	0x40001400

080034ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fc:	d10c      	bne.n	8003518 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003516:	e010      	b.n	800353a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <HAL_TIM_Base_MspInit+0x60>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10b      	bne.n	800353a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_TIM_Base_MspInit+0x5c>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	68bb      	ldr	r3, [r7, #8]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40001400 	.word	0x40001400

08003550 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003570:	d11b      	bne.n	80035aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_TIM_MspPostInit+0x64>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4a0f      	ldr	r2, [pc, #60]	@ (80035b4 <HAL_TIM_MspPostInit+0x64>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <HAL_TIM_MspPostInit+0x64>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 800358a:	2308      	movs	r3, #8
 800358c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800359a:	2301      	movs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4619      	mov	r1, r3
 80035a4:	4804      	ldr	r0, [pc, #16]	@ (80035b8 <HAL_TIM_MspPostInit+0x68>)
 80035a6:	f001 feff 	bl	80053a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40020000 	.word	0x40020000

080035bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035c2:	4a15      	ldr	r2, [pc, #84]	@ (8003618 <MX_USART3_UART_Init+0x5c>)
 80035c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035da:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035e2:	220c      	movs	r2, #12
 80035e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ec:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035f2:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035fe:	4805      	ldr	r0, [pc, #20]	@ (8003614 <MX_USART3_UART_Init+0x58>)
 8003600:	f005 fbf6 	bl	8008df0 <HAL_UART_Init>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800360a:	f7ff fd15 	bl	8003038 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200007e0 	.word	0x200007e0
 8003618:	40004800 	.word	0x40004800

0800361c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b0aa      	sub	sp, #168	@ 0xa8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	2284      	movs	r2, #132	@ 0x84
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f019 fff2 	bl	801d626 <memset>
  if(uartHandle->Instance==USART3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a26      	ldr	r2, [pc, #152]	@ (80036e0 <HAL_UART_MspInit+0xc4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d144      	bne.n	80036d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800364c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003650:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003652:	2300      	movs	r3, #0
 8003654:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f9bc 	bl	80069d8 <HAL_RCCEx_PeriphCLKConfig>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003666:	f7ff fce7 	bl	8003038 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800366a:	4b1e      	ldr	r3, [pc, #120]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003674:	6413      	str	r3, [r2, #64]	@ 0x40
 8003676:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 8003688:	f043 0308 	orr.w	r3, r3, #8
 800368c:	6313      	str	r3, [r2, #48]	@ 0x30
 800368e:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <HAL_UART_MspInit+0xc8>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800369a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800369e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b4:	2307      	movs	r3, #7
 80036b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80036be:	4619      	mov	r1, r3
 80036c0:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <HAL_UART_MspInit+0xcc>)
 80036c2:	f001 fe71 	bl	80053a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2105      	movs	r1, #5
 80036ca:	2027      	movs	r0, #39	@ 0x27
 80036cc:	f000 faf5 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036d0:	2027      	movs	r0, #39	@ 0x27
 80036d2:	f000 fb0e 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036d6:	bf00      	nop
 80036d8:	37a8      	adds	r7, #168	@ 0xa8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40004800 	.word	0x40004800
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020c00 	.word	0x40020c00

080036ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f0:	480d      	ldr	r0, [pc, #52]	@ (8003728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036f2:	490e      	ldr	r1, [pc, #56]	@ (800372c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0b      	ldr	r2, [pc, #44]	@ (8003734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003708:	4c0b      	ldr	r4, [pc, #44]	@ (8003738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003716:	f7ff fe29 	bl	800336c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371a:	f01a f84b 	bl	801d7b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800371e:	f7ff fae7 	bl	8002cf0 <main>
  bx  lr    
 8003722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003724:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800372c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003730:	08024e74 	.word	0x08024e74
  ldr r2, =_sbss
 8003734:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8003738:	2000f640 	.word	0x2000f640

0800373c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800373c:	e7fe      	b.n	800373c <ADC_IRQHandler>

0800373e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <LAN8742_RegisterBusIO+0x28>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <LAN8742_RegisterBusIO+0x28>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <LAN8742_RegisterBusIO+0x28>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e014      	b.n	8003796 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d17c      	bne.n	80038bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e01c      	b.n	8003816 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f107 0208 	add.w	r2, r7, #8
 80037e4:	2112      	movs	r1, #18
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	4798      	blx	r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	da03      	bge.n	80037f8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80037f0:	f06f 0304 	mvn.w	r3, #4
 80037f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80037f6:	e00b      	b.n	8003810 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	d105      	bne.n	8003810 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
         break;
 800380e:	e005      	b.n	800381c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b1f      	cmp	r3, #31
 800381a:	d9df      	bls.n	80037dc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b1f      	cmp	r3, #31
 8003822:	d902      	bls.n	800382a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003824:	f06f 0302 	mvn.w	r3, #2
 8003828:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d145      	bne.n	80038bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6810      	ldr	r0, [r2, #0]
 8003838:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800383c:	2100      	movs	r1, #0
 800383e:	4798      	blx	r3
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	db37      	blt.n	80038b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6810      	ldr	r0, [r2, #0]
 800384e:	f107 0208 	add.w	r2, r7, #8
 8003852:	2100      	movs	r1, #0
 8003854:	4798      	blx	r3
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	db28      	blt.n	80038ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4798      	blx	r3
 8003862:	4603      	mov	r3, r0
 8003864:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003866:	e01c      	b.n	80038a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4798      	blx	r3
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800387a:	d80e      	bhi.n	800389a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6810      	ldr	r0, [r2, #0]
 8003884:	f107 0208 	add.w	r2, r7, #8
 8003888:	2100      	movs	r1, #0
 800388a:	4798      	blx	r3
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	da07      	bge.n	80038a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003892:	f06f 0304 	mvn.w	r3, #4
 8003896:	613b      	str	r3, [r7, #16]
                 break;
 8003898:	e010      	b.n	80038bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800389a:	f06f 0301 	mvn.w	r3, #1
 800389e:	613b      	str	r3, [r7, #16]
               break;
 80038a0:	e00c      	b.n	80038bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1dd      	bne.n	8003868 <LAN8742_Init+0xc6>
 80038ac:	e006      	b.n	80038bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80038ae:	f06f 0304 	mvn.w	r3, #4
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e002      	b.n	80038bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80038b6:	f06f 0303 	mvn.w	r3, #3
 80038ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d112      	bne.n	80038e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	4798      	blx	r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80038cc:	bf00      	nop
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	4798      	blx	r3
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80038e0:	d9f5      	bls.n	80038ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80038e8:	693b      	ldr	r3, [r7, #16]
 }
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6810      	ldr	r0, [r2, #0]
 8003906:	f107 020c 	add.w	r2, r7, #12
 800390a:	2101      	movs	r1, #1
 800390c:	4798      	blx	r3
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	da02      	bge.n	800391a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003914:	f06f 0304 	mvn.w	r3, #4
 8003918:	e06e      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6810      	ldr	r0, [r2, #0]
 8003922:	f107 020c 	add.w	r2, r7, #12
 8003926:	2101      	movs	r1, #1
 8003928:	4798      	blx	r3
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	da02      	bge.n	8003936 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003930:	f06f 0304 	mvn.w	r3, #4
 8003934:	e060      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003940:	2301      	movs	r3, #1
 8003942:	e059      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6810      	ldr	r0, [r2, #0]
 800394c:	f107 020c 	add.w	r2, r7, #12
 8003950:	2100      	movs	r1, #0
 8003952:	4798      	blx	r3
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	da02      	bge.n	8003960 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800395a:	f06f 0304 	mvn.w	r3, #4
 800395e:	e04b      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11b      	bne.n	80039a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <LAN8742_GetLinkState+0x90>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800397e:	2302      	movs	r3, #2
 8003980:	e03a      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800398c:	2303      	movs	r3, #3
 800398e:	e033      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800399a:	2304      	movs	r3, #4
 800399c:	e02c      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800399e:	2305      	movs	r3, #5
 80039a0:	e02a      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6810      	ldr	r0, [r2, #0]
 80039aa:	f107 020c 	add.w	r2, r7, #12
 80039ae:	211f      	movs	r1, #31
 80039b0:	4798      	blx	r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	da02      	bge.n	80039be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80039b8:	f06f 0304 	mvn.w	r3, #4
 80039bc:	e01c      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80039c8:	2306      	movs	r3, #6
 80039ca:	e015      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 031c 	and.w	r3, r3, #28
 80039d2:	2b18      	cmp	r3, #24
 80039d4:	d101      	bne.n	80039da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80039d6:	2302      	movs	r3, #2
 80039d8:	e00e      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f003 031c 	and.w	r3, r3, #28
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d101      	bne.n	80039e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e007      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 031c 	and.w	r3, r3, #28
 80039ee:	2b14      	cmp	r3, #20
 80039f0:	d101      	bne.n	80039f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80039f2:	2304      	movs	r3, #4
 80039f4:	e000      	b.n	80039f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80039f6:	2305      	movs	r3, #5
    }				
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a04:	2003      	movs	r0, #3
 8003a06:	f000 f94d 	bl	8003ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f000 f806 	bl	8003a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a10:	f7ff fb9a 	bl	8003148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a24:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_InitTick+0x54>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <HAL_InitTick+0x58>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f967 	bl	8003d0e <HAL_SYSTICK_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e00e      	b.n	8003a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b0f      	cmp	r3, #15
 8003a4e:	d80a      	bhi.n	8003a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a50:	2200      	movs	r2, #0
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	f000 f92f 	bl	8003cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a5c:	4a06      	ldr	r2, [pc, #24]	@ (8003a78 <HAL_InitTick+0x5c>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000058 	.word	0x20000058
 8003a74:	20000060 	.word	0x20000060
 8003a78:	2000005c 	.word	0x2000005c

08003a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a80:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <HAL_IncTick+0x20>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <HAL_IncTick+0x24>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <HAL_IncTick+0x24>)
 8003a8e:	6013      	str	r3, [r2, #0]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000060 	.word	0x20000060
 8003aa0:	20000868 	.word	0x20000868

08003aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa8:	4b03      	ldr	r3, [pc, #12]	@ (8003ab8 <HAL_GetTick+0x14>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	20000868 	.word	0x20000868

08003abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff ffee 	bl	8003aa4 <HAL_GetTick>
 8003ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d005      	beq.n	8003ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <HAL_Delay+0x44>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ae2:	bf00      	nop
 8003ae4:	f7ff ffde 	bl	8003aa4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d8f7      	bhi.n	8003ae4 <HAL_Delay+0x28>
  {
  }
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000060 	.word	0x20000060

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x40>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b32:	4a04      	ldr	r2, [pc, #16]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x40>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60d3      	str	r3, [r2, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00
 8003b48:	05fa0000 	.word	0x05fa0000

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4907      	ldr	r1, [pc, #28]	@ (8003ba0 <__NVIC_EnableIRQ+0x38>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	6039      	str	r1, [r7, #0]
 8003bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db0a      	blt.n	8003bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	490c      	ldr	r1, [pc, #48]	@ (8003bf0 <__NVIC_SetPriority+0x4c>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	0112      	lsls	r2, r2, #4
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bcc:	e00a      	b.n	8003be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4908      	ldr	r1, [pc, #32]	@ (8003bf4 <__NVIC_SetPriority+0x50>)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	3b04      	subs	r3, #4
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	440b      	add	r3, r1
 8003be2:	761a      	strb	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000e100 	.word	0xe000e100
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	@ 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f1c3 0307 	rsb	r3, r3, #7
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf28      	it	cs
 8003c16:	2304      	movcs	r3, #4
 8003c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	2b06      	cmp	r3, #6
 8003c20:	d902      	bls.n	8003c28 <NVIC_EncodePriority+0x30>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3b03      	subs	r3, #3
 8003c26:	e000      	b.n	8003c2a <NVIC_EncodePriority+0x32>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43da      	mvns	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	4313      	orrs	r3, r2
         );
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3724      	adds	r7, #36	@ 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c70:	d301      	bcc.n	8003c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <SysTick_Config+0x40>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7e:	210f      	movs	r1, #15
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f7ff ff8e 	bl	8003ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <SysTick_Config+0x40>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8e:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <SysTick_Config+0x40>)
 8003c90:	2207      	movs	r2, #7
 8003c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	e000e010 	.word	0xe000e010

08003ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff29 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ccc:	f7ff ff3e 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff8e 	bl	8003bf8 <NVIC_EncodePriority>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff5d 	bl	8003ba4 <__NVIC_SetPriority>
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff31 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ffa2 	bl	8003c60 <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7ff feb6 	bl	8003aa4 <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e052      	b.n	8003dfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0216 	bic.w	r2, r2, #22
 8003d66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_DMA_Abort+0x62>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0208 	bic.w	r2, r2, #8
 8003d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da8:	e013      	b.n	8003dd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003daa:	f7ff fe7b 	bl	8003aa4 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d90c      	bls.n	8003dd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e015      	b.n	8003dfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e4      	bne.n	8003daa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	223f      	movs	r2, #63	@ 0x3f
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2280      	movs	r2, #128	@ 0x80
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e00c      	b.n	8003e3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2205      	movs	r2, #5
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e06a      	b.n	8003f34 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2223      	movs	r2, #35	@ 0x23
 8003e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f006 feb1 	bl	800abd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_ETH_Init+0xf0>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_ETH_Init+0xf0>)
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e82:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_ETH_Init+0xf0>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f40 <HAL_ETH_Init+0xf4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <HAL_ETH_Init+0xf4>)
 8003e94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e9a:	4b29      	ldr	r3, [pc, #164]	@ (8003f40 <HAL_ETH_Init+0xf4>)
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4927      	ldr	r1, [pc, #156]	@ (8003f40 <HAL_ETH_Init+0xf4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <HAL_ETH_Init+0xf4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec4:	f7ff fdee 	bl	8003aa4 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003eca:	e011      	b.n	8003ef0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ecc:	f7ff fdea 	bl	8003aa4 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003eda:	d909      	bls.n	8003ef0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	22e0      	movs	r2, #224	@ 0xe0
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e021      	b.n	8003f34 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e4      	bne.n	8003ecc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 ffac 	bl	8004e60 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f001 f853 	bl	8004fb4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f001 f8a9 	bl	8005066 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 f811 	bl	8004f44 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2210      	movs	r2, #16
 8003f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40013800 	.word	0x40013800

08003f44 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d150      	bne.n	8003ff8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2223      	movs	r2, #35	@ 0x23
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa7b 	bl	8004460 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7ff fd9a 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0204 	orr.w	r2, r2, #4
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f7ff fd87 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fdf3 	bl	8004ba2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2223      	movs	r2, #35	@ 0x23
 8003ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004012:	2b10      	cmp	r3, #16
 8004014:	d17b      	bne.n	800410e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2223      	movs	r2, #35	@ 0x23
 800401a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004032:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <HAL_ETH_Start_IT+0x114>)
 8004042:	430b      	orrs	r3, r1
 8004044:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004058:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9fc 	bl	8004460 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0208 	orr.w	r2, r2, #8
 8004076:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004080:	2001      	movs	r0, #1
 8004082:	f7ff fd1b 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0204 	orr.w	r2, r2, #4
 800409c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80040a6:	2001      	movs	r0, #1
 80040a8:	f7ff fd08 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fd74 	bl	8004ba2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040d0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f043 0302 	orr.w	r3, r3, #2
 80040e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040e8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b08      	ldr	r3, [pc, #32]	@ (800411c <HAL_ETH_Start_IT+0x118>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004100:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2223      	movs	r2, #35	@ 0x23
 8004106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	00020060 	.word	0x00020060
 800411c:	0001a0c1 	.word	0x0001a0c1

08004120 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800412e:	2b23      	cmp	r3, #35	@ 0x23
 8004130:	d16e      	bne.n	8004210 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2223      	movs	r2, #35	@ 0x23
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b34      	ldr	r3, [pc, #208]	@ (800421c <HAL_ETH_Stop_IT+0xfc>)
 800414a:	400b      	ands	r3, r1
 800414c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004150:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004164:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004168:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004180:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0204 	bic.w	r2, r2, #4
 8004190:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800419a:	2001      	movs	r0, #1
 800419c:	f7ff fc8e 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fcfa 	bl	8004ba2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0208 	bic.w	r2, r2, #8
 80041bc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80041c6:	2001      	movs	r0, #1
 80041c8:	f7ff fc78 	bl	8003abc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e00e      	b.n	80041f8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	3212      	adds	r2, #18
 80041e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d9ed      	bls.n	80041da <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2210      	movs	r2, #16
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	fffe5f3e 	.word	0xfffe5f3e

08004220 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e045      	b.n	80042d0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424a:	2b23      	cmp	r3, #35	@ 0x23
 800424c:	d13f      	bne.n	80042ce <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004256:	2201      	movs	r2, #1
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 ff70 	bl	8005140 <ETH_Prepare_Tx_Descriptors>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f043 0202 	orr.w	r2, r3, #2
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e02a      	b.n	80042d0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800427a:	f3bf 8f4f 	dsb	sy
}
 800427e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	629a      	str	r2, [r3, #40]	@ 0x28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	2b03      	cmp	r3, #3
 8004290:	d904      	bls.n	800429c <HAL_ETH_Transmit_IT+0x7c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	1f1a      	subs	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042b6:	461a      	mov	r2, r3
 80042b8:	2304      	movs	r3, #4
 80042ba:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0a8      	b.n	8004456 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430a:	2b23      	cmp	r3, #35	@ 0x23
 800430c:	d001      	beq.n	8004312 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0a1      	b.n	8004456 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	3212      	adds	r2, #18
 800431e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004322:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004328:	f1c3 0304 	rsb	r3, r3, #4
 800432c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800432e:	e06a      	b.n	8004406 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <HAL_ETH_ReadData+0x88>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d040      	beq.n	80043e2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004394:	3b04      	subs	r3, #4
 8004396:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80043bc:	461a      	mov	r2, r3
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f006 fdd5 	bl	800af70 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d902      	bls.n	80043f4 <HAL_ETH_ReadData+0x11c>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	3212      	adds	r2, #18
 80043fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043fe:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3301      	adds	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800440a:	2b00      	cmp	r3, #0
 800440c:	db06      	blt.n	800441c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d202      	bcs.n	800441c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d089      	beq.n	8004330 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	441a      	add	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f815 	bl	8004460 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
}
 8004456:	4618      	mov	r0, r3
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800446c:	2301      	movs	r3, #1
 800446e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004474:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	3212      	adds	r2, #18
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004488:	e040      	b.n	800450c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d112      	bne.n	80044b8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004492:	f107 030c 	add.w	r3, r7, #12
 8004496:	4618      	mov	r0, r3
 8004498:	f006 fd3a 	bl	800af10 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	74fb      	strb	r3, [r7, #19]
 80044a6:	e007      	b.n	80044b8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	461a      	mov	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d026      	beq.n	800450c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004544 <ETH_UpdateDescriptor+0xe4>)
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	e003      	b.n	80044d6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 80044d4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80044d6:	f3bf 8f5f 	dmb	sy
}
 80044da:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d902      	bls.n	80044fa <ETH_UpdateDescriptor+0x9a>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3b04      	subs	r3, #4
 80044f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	3212      	adds	r2, #18
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	617b      	str	r3, [r7, #20]
      desccount--;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	3b01      	subs	r3, #1
 800450a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <ETH_UpdateDescriptor+0xb8>
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1b8      	bne.n	800448a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	429a      	cmp	r2, r3
 8004520:	d00c      	beq.n	800453c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452a:	461a      	mov	r2, r3
 800452c:	2300      	movs	r3, #0
 800452e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800453c:	bf00      	nop
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	800045f8 	.word	0x800045f8

08004548 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3318      	adds	r3, #24
 8004554:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004566:	e03f      	b.n	80045e8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004568:	2301      	movs	r3, #1
 800456a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3b01      	subs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	3304      	adds	r3, #4
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3301      	adds	r3, #1
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d028      	beq.n	80045e8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db1b      	blt.n	80045e4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3304      	adds	r3, #4
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f006 fd1b 	bl	800aff4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	3304      	adds	r3, #4
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045e2:	e001      	b.n	80045e8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_ETH_ReleaseTxPacket+0xac>
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1b9      	bne.n	8004568 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d112      	bne.n	8004640 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d109      	bne.n	8004640 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004634:	461a      	mov	r2, r3
 8004636:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <HAL_ETH_IRQHandler+0x178>)
 8004638:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f006 f830 	bl	800a6a0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d113      	bne.n	800467a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10a      	bne.n	800467a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004672:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f006 f823 	bl	800a6c0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800468c:	d14c      	bne.n	8004728 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800469c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a0:	d142      	bne.n	8004728 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a8:	f043 0208 	orr.w	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c4:	d11a      	bne.n	80046fc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	4b2a      	ldr	r3, [pc, #168]	@ (800477c <HAL_ETH_IRQHandler+0x17c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80046ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046f0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	22e0      	movs	r2, #224	@ 0xe0
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80046fa:	e012      	b.n	8004722 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	f248 6380 	movw	r3, #34432	@ 0x8680
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471a:	461a      	mov	r2, r3
 800471c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004720:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f005 ffdc 	bl	800a6e0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b08      	cmp	r3, #8
 8004734:	d10e      	bne.n	8004754 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f81c 	bl	8004784 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_ETH_IRQHandler+0x180>)
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004760:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <HAL_ETH_IRQHandler+0x180>)
 8004762:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004766:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f815 	bl	8004798 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	00010040 	.word	0x00010040
 800477c:	007e2000 	.word	0x007e2000
 8004780:	40013c00 	.word	0x40013c00

08004784 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 031c 	and.w	r3, r3, #28
 80047c8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	02db      	lsls	r3, r3, #11
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0302 	bic.w	r3, r3, #2
 80047ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80047fc:	f7ff f952 	bl	8003aa4 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004802:	e00d      	b.n	8004820 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004804:	f7ff f94e 	bl	8003aa4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004812:	d301      	bcc.n	8004818 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e010      	b.n	800483a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ec      	bne.n	8004804 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 031c 	and.w	r3, r3, #28
 800485e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	02db      	lsls	r3, r3, #11
 8004864:	b29b      	uxth	r3, r3
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800489c:	f7ff f902 	bl	8003aa4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048a2:	e00d      	b.n	80048c0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80048a4:	f7ff f8fe 	bl	8003aa4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048b2:	d301      	bcc.n	80048b8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e009      	b.n	80048cc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ec      	bne.n	80048a4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0d9      	b.n	8004a9c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bf14      	ite	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	2300      	moveq	r3, #0
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	461a      	mov	r2, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e00b      	b.n	8004ad4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d105      	bne.n	8004ad2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f88f 	bl	8004bec <ETH_SetMACConfig>

    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 031c 	bic.w	r3, r3, #28
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004af4:	f001 ff3c 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 8004af8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d908      	bls.n	8004b14 <HAL_ETH_SetMDIOClockRange+0x38>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d804      	bhi.n	8004b14 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e027      	b.n	8004b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d908      	bls.n	8004b2e <HAL_ETH_SetMDIOClockRange+0x52>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	@ (8004b7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d204      	bcs.n	8004b2e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f043 030c 	orr.w	r3, r3, #12
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e01a      	b.n	8004b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d303      	bcc.n	8004b3e <HAL_ETH_SetMDIOClockRange+0x62>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d911      	bls.n	8004b62 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a0f      	ldr	r2, [pc, #60]	@ (8004b80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d908      	bls.n	8004b58 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d804      	bhi.n	8004b58 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e005      	b.n	8004b64 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f043 0310 	orr.w	r3, r3, #16
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e000      	b.n	8004b64 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004b62:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	01312cff 	.word	0x01312cff
 8004b78:	02160ebf 	.word	0x02160ebf
 8004b7c:	03938700 	.word	0x03938700
 8004b80:	05f5e0ff 	.word	0x05f5e0ff
 8004b84:	08f0d17f 	.word	0x08f0d17f

08004b88 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004bc4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7fe ff72 	bl	8003abc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004be2:	6193      	str	r3, [r2, #24]
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4b51      	ldr	r3, [pc, #324]	@ (8004d48 <ETH_SetMACConfig+0x15c>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	7c1b      	ldrb	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <ETH_SetMACConfig+0x28>
 8004c0e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004c12:	e000      	b.n	8004c16 <ETH_SetMACConfig+0x2a>
 8004c14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	7c5b      	ldrb	r3, [r3, #17]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <ETH_SetMACConfig+0x38>
 8004c1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c22:	e000      	b.n	8004c26 <ETH_SetMACConfig+0x3a>
 8004c24:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c26:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004c2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	7fdb      	ldrb	r3, [r3, #31]
 8004c32:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004c34:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004c3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	7f92      	ldrb	r2, [r2, #30]
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	d102      	bne.n	8004c4a <ETH_SetMACConfig+0x5e>
 8004c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c48:	e000      	b.n	8004c4c <ETH_SetMACConfig+0x60>
 8004c4a:	2200      	movs	r2, #0
                        macconf->Speed |
 8004c4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	7f1b      	ldrb	r3, [r3, #28]
 8004c52:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004c54:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004c5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	791b      	ldrb	r3, [r3, #4]
 8004c60:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004c62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	d102      	bne.n	8004c74 <ETH_SetMACConfig+0x88>
 8004c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c72:	e000      	b.n	8004c76 <ETH_SetMACConfig+0x8a>
 8004c74:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004c76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	7bdb      	ldrb	r3, [r3, #15]
 8004c7c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004c7e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c8c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f7fe ff08 	bl	8003abc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	d101      	bne.n	8004cda <ETH_SetMACConfig+0xee>
 8004cd6:	2280      	movs	r2, #128	@ 0x80
 8004cd8:	e000      	b.n	8004cdc <ETH_SetMACConfig+0xf0>
 8004cda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004cdc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ce2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	d101      	bne.n	8004cf2 <ETH_SetMACConfig+0x106>
 8004cee:	2208      	movs	r2, #8
 8004cf0:	e000      	b.n	8004cf4 <ETH_SetMACConfig+0x108>
 8004cf2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004cf4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004cfc:	2a01      	cmp	r2, #1
 8004cfe:	d101      	bne.n	8004d04 <ETH_SetMACConfig+0x118>
 8004d00:	2204      	movs	r2, #4
 8004d02:	e000      	b.n	8004d06 <ETH_SetMACConfig+0x11a>
 8004d04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004d06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004d0e:	2a01      	cmp	r2, #1
 8004d10:	d101      	bne.n	8004d16 <ETH_SetMACConfig+0x12a>
 8004d12:	2202      	movs	r2, #2
 8004d14:	e000      	b.n	8004d18 <ETH_SetMACConfig+0x12c>
 8004d16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7fe fec3 	bl	8003abc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	619a      	str	r2, [r3, #24]
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	ff20810f 	.word	0xff20810f

08004d4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4b3d      	ldr	r3, [pc, #244]	@ (8004e5c <ETH_SetDMAConfig+0x110>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	7b1b      	ldrb	r3, [r3, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <ETH_SetDMAConfig+0x2c>
 8004d72:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004d76:	e000      	b.n	8004d7a <ETH_SetDMAConfig+0x2e>
 8004d78:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	7b5b      	ldrb	r3, [r3, #13]
 8004d7e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d80:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	7f52      	ldrb	r2, [r2, #29]
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	d102      	bne.n	8004d90 <ETH_SetDMAConfig+0x44>
 8004d8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d8e:	e000      	b.n	8004d92 <ETH_SetDMAConfig+0x46>
 8004d90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	7b9b      	ldrb	r3, [r3, #14]
 8004d98:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d9a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004da0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	7f1b      	ldrb	r3, [r3, #28]
 8004da6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004da8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	7f9b      	ldrb	r3, [r3, #30]
 8004dae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004db0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004db6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dbe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7fe fe6a 	bl	8003abc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004df0:	461a      	mov	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004e00:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004e06:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004e0c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e14:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004e16:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004e1e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004e24:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e32:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e40:	2001      	movs	r0, #1
 8004e42:	f7fe fe3b 	bl	8003abc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	f8de3f23 	.word	0xf8de3f23

08004e60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b0a6      	sub	sp, #152	@ 0x98
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004e74:	2300      	movs	r3, #0
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ec2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004ec8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ed4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe86 	bl	8004bec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f14:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004f16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f1a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004f1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	4619      	mov	r1, r3
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff ff08 	bl	8004d4c <ETH_SetDMAConfig>
}
 8004f3c:	bf00      	nop
 8004f3e:	3798      	adds	r7, #152	@ 0x98
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3305      	adds	r3, #5
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	3204      	adds	r2, #4
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4b11      	ldr	r3, [pc, #68]	@ (8004fac <ETH_MACAddressConfig+0x68>)
 8004f66:	4413      	add	r3, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3303      	adds	r3, #3
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	061a      	lsls	r2, r3, #24
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3301      	adds	r3, #1
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <ETH_MACAddressConfig+0x6c>)
 8004f96:	4413      	add	r3, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6013      	str	r3, [r2, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40028040 	.word	0x40028040
 8004fb0:	40028044 	.word	0x40028044

08004fb4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e03e      	b.n	8005040 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68d9      	ldr	r1, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	440b      	add	r3, r1
 8004fd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	3206      	adds	r2, #6
 8004ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d80c      	bhi.n	8005024 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	440b      	add	r3, r1
 800501c:	461a      	mov	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	60da      	str	r2, [r3, #12]
 8005022:	e004      	b.n	800502e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3301      	adds	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d9bd      	bls.n	8004fc2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005058:	611a      	str	r2, [r3, #16]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e046      	b.n	8005102 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6919      	ldr	r1, [r3, #16]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	440b      	add	r3, r1
 8005084:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 80050b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	3212      	adds	r2, #18
 80050ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d80c      	bhi.n	80050f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6919      	ldr	r1, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	440b      	add	r3, r1
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	e004      	b.n	80050fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d9b5      	bls.n	8005074 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005132:	60da      	str	r2, [r3, #12]
}
 8005134:	bf00      	nop
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005140:	b480      	push	{r7}
 8005142:	b08d      	sub	sp, #52	@ 0x34
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3318      	adds	r3, #24
 8005150:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800517e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005182:	d007      	beq.n	8005194 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005188:	3304      	adds	r3, #4
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005194:	2302      	movs	r3, #2
 8005196:	e0ff      	b.n	8005398 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	3301      	adds	r3, #1
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b7d      	ldr	r3, [pc, #500]	@ (80053a4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	6852      	ldr	r2, [r2, #4]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800521a:	f3bf 8f5f 	dmb	sy
}
 800521e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800522c:	e082      	b.n	8005334 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e005      	b.n	800525a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	3301      	adds	r3, #1
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	2b03      	cmp	r3, #3
 8005264:	d902      	bls.n	800526c <ETH_Prepare_Tx_Descriptors+0x12c>
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	3b04      	subs	r3, #4
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005274:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800528e:	d007      	beq.n	80052a0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005294:	3304      	adds	r3, #4
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d029      	beq.n	80052f4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b2:	e019      	b.n	80052e8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80052b4:	f3bf 8f5f 	dmb	sy
}
 80052b8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	3301      	adds	r3, #1
 80052ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d902      	bls.n	80052d8 <ETH_Prepare_Tx_Descriptors+0x198>
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	3b04      	subs	r3, #4
 80052d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80052e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e4:	3301      	adds	r3, #1
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d3e1      	bcc.n	80052b4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80052f0:	2302      	movs	r3, #2
 80052f2:	e051      	b.n	8005398 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005310:	4013      	ands	r3, r2
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	6852      	ldr	r2, [r2, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	3301      	adds	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005322:	f3bf 8f5f 	dmb	sy
}
 8005326:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af78 	bne.w	800522e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e005      	b.n	800535e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005372:	3304      	adds	r3, #4
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800537e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005380:	b672      	cpsid	i
}
 8005382:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	4413      	add	r3, r2
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005392:	b662      	cpsie	i
}
 8005394:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3734      	adds	r7, #52	@ 0x34
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	ffffe000 	.word	0xffffe000

080053a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	@ 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e175      	b.n	80056b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80053c8:	2201      	movs	r2, #1
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	f040 8164 	bne.w	80056ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d005      	beq.n	80053fe <HAL_GPIO_Init+0x56>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d130      	bne.n	8005460 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	2203      	movs	r2, #3
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	fa02 f303 	lsl.w	r3, r2, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4313      	orrs	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005434:	2201      	movs	r2, #1
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 0201 	and.w	r2, r3, #1
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b03      	cmp	r3, #3
 800546a:	d017      	beq.n	800549c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2203      	movs	r2, #3
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4013      	ands	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4313      	orrs	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d123      	bne.n	80054f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	08da      	lsrs	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3208      	adds	r2, #8
 80054b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	220f      	movs	r2, #15
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	08da      	lsrs	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3208      	adds	r2, #8
 80054ea:	69b9      	ldr	r1, [r7, #24]
 80054ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0203 	and.w	r2, r3, #3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4313      	orrs	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80be 	beq.w	80056ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005532:	4b66      	ldr	r3, [pc, #408]	@ (80056cc <HAL_GPIO_Init+0x324>)
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	4a65      	ldr	r2, [pc, #404]	@ (80056cc <HAL_GPIO_Init+0x324>)
 8005538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800553c:	6453      	str	r3, [r2, #68]	@ 0x44
 800553e:	4b63      	ldr	r3, [pc, #396]	@ (80056cc <HAL_GPIO_Init+0x324>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800554a:	4a61      	ldr	r2, [pc, #388]	@ (80056d0 <HAL_GPIO_Init+0x328>)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	3302      	adds	r3, #2
 8005552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	220f      	movs	r2, #15
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4013      	ands	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a58      	ldr	r2, [pc, #352]	@ (80056d4 <HAL_GPIO_Init+0x32c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d037      	beq.n	80055e6 <HAL_GPIO_Init+0x23e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a57      	ldr	r2, [pc, #348]	@ (80056d8 <HAL_GPIO_Init+0x330>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d031      	beq.n	80055e2 <HAL_GPIO_Init+0x23a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a56      	ldr	r2, [pc, #344]	@ (80056dc <HAL_GPIO_Init+0x334>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <HAL_GPIO_Init+0x236>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a55      	ldr	r2, [pc, #340]	@ (80056e0 <HAL_GPIO_Init+0x338>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d025      	beq.n	80055da <HAL_GPIO_Init+0x232>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a54      	ldr	r2, [pc, #336]	@ (80056e4 <HAL_GPIO_Init+0x33c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01f      	beq.n	80055d6 <HAL_GPIO_Init+0x22e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a53      	ldr	r2, [pc, #332]	@ (80056e8 <HAL_GPIO_Init+0x340>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d019      	beq.n	80055d2 <HAL_GPIO_Init+0x22a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a52      	ldr	r2, [pc, #328]	@ (80056ec <HAL_GPIO_Init+0x344>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_GPIO_Init+0x226>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a51      	ldr	r2, [pc, #324]	@ (80056f0 <HAL_GPIO_Init+0x348>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_GPIO_Init+0x222>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a50      	ldr	r2, [pc, #320]	@ (80056f4 <HAL_GPIO_Init+0x34c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <HAL_GPIO_Init+0x21e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a4f      	ldr	r2, [pc, #316]	@ (80056f8 <HAL_GPIO_Init+0x350>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_GPIO_Init+0x21a>
 80055be:	2309      	movs	r3, #9
 80055c0:	e012      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055c2:	230a      	movs	r3, #10
 80055c4:	e010      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055c6:	2308      	movs	r3, #8
 80055c8:	e00e      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055ca:	2307      	movs	r3, #7
 80055cc:	e00c      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055ce:	2306      	movs	r3, #6
 80055d0:	e00a      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055d2:	2305      	movs	r3, #5
 80055d4:	e008      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055d6:	2304      	movs	r3, #4
 80055d8:	e006      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055da:	2303      	movs	r3, #3
 80055dc:	e004      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055de:	2302      	movs	r3, #2
 80055e0:	e002      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <HAL_GPIO_Init+0x240>
 80055e6:	2300      	movs	r3, #0
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	f002 0203 	and.w	r2, r2, #3
 80055ee:	0092      	lsls	r2, r2, #2
 80055f0:	4093      	lsls	r3, r2
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80055f8:	4935      	ldr	r1, [pc, #212]	@ (80056d0 <HAL_GPIO_Init+0x328>)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	089b      	lsrs	r3, r3, #2
 80055fe:	3302      	adds	r3, #2
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005606:	4b3d      	ldr	r3, [pc, #244]	@ (80056fc <HAL_GPIO_Init+0x354>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800562a:	4a34      	ldr	r2, [pc, #208]	@ (80056fc <HAL_GPIO_Init+0x354>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005630:	4b32      	ldr	r3, [pc, #200]	@ (80056fc <HAL_GPIO_Init+0x354>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005654:	4a29      	ldr	r2, [pc, #164]	@ (80056fc <HAL_GPIO_Init+0x354>)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800565a:	4b28      	ldr	r3, [pc, #160]	@ (80056fc <HAL_GPIO_Init+0x354>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800567e:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <HAL_GPIO_Init+0x354>)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005684:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <HAL_GPIO_Init+0x354>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <HAL_GPIO_Init+0x354>)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	f67f ae86 	bls.w	80053c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	3724      	adds	r7, #36	@ 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40013800 	.word	0x40013800
 80056d4:	40020000 	.word	0x40020000
 80056d8:	40020400 	.word	0x40020400
 80056dc:	40020800 	.word	0x40020800
 80056e0:	40020c00 	.word	0x40020c00
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40021400 	.word	0x40021400
 80056ec:	40021800 	.word	0x40021800
 80056f0:	40021c00 	.word	0x40021c00
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40022400 	.word	0x40022400
 80056fc:	40013c00 	.word	0x40013c00

08005700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
 800570c:	4613      	mov	r3, r2
 800570e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800571c:	e003      	b.n	8005726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800571e:	887b      	ldrh	r3, [r7, #2]
 8005720:	041a      	lsls	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	619a      	str	r2, [r3, #24]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4013      	ands	r3, r2
 800574a:	041a      	lsls	r2, r3, #16
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	43d9      	mvns	r1, r3
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	400b      	ands	r3, r1
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	619a      	str	r2, [r3, #24]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e07f      	b.n	800587a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fd fa32 	bl	8002bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	@ 0x24
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80057b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	e006      	b.n	80057f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80057ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d104      	bne.n	8005802 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <HAL_I2C_Init+0x11c>)
 800580e:	430b      	orrs	r3, r1
 8005810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	69d9      	ldr	r1, [r3, #28]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	02008000 	.word	0x02008000

08005888 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	461a      	mov	r2, r3
 8005894:	460b      	mov	r3, r1
 8005896:	817b      	strh	r3, [r7, #10]
 8005898:	4613      	mov	r3, r2
 800589a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	f040 80da 	bne.w	8005a5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_I2C_Master_Transmit+0x30>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e0d3      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058c0:	f7fe f8f0 	bl	8003aa4 <HAL_GetTick>
 80058c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	2319      	movs	r3, #25
 80058cc:	2201      	movs	r2, #1
 80058ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f000 f8f0 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0be      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2221      	movs	r2, #33	@ 0x21
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2210      	movs	r2, #16
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	893a      	ldrh	r2, [r7, #8]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29b      	uxth	r3, r3
 8005910:	2bff      	cmp	r3, #255	@ 0xff
 8005912:	d90e      	bls.n	8005932 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	22ff      	movs	r2, #255	@ 0xff
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800591e:	b2da      	uxtb	r2, r3
 8005920:	8979      	ldrh	r1, [r7, #10]
 8005922:	4b51      	ldr	r3, [pc, #324]	@ (8005a68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fa60 	bl	8005df0 <I2C_TransferConfig>
 8005930:	e06c      	b.n	8005a0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005940:	b2da      	uxtb	r2, r3
 8005942:	8979      	ldrh	r1, [r7, #10]
 8005944:	4b48      	ldr	r3, [pc, #288]	@ (8005a68 <HAL_I2C_Master_Transmit+0x1e0>)
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fa4f 	bl	8005df0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005952:	e05b      	b.n	8005a0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	6a39      	ldr	r1, [r7, #32]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f8ed 	bl	8005b38 <I2C_WaitOnTXISFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e07b      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d034      	beq.n	8005a0c <HAL_I2C_Master_Transmit+0x184>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d130      	bne.n	8005a0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	@ 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f87f 	bl	8005ab8 <I2C_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e04d      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2bff      	cmp	r3, #255	@ 0xff
 80059cc:	d90e      	bls.n	80059ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	22ff      	movs	r2, #255	@ 0xff
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	8979      	ldrh	r1, [r7, #10]
 80059dc:	2300      	movs	r3, #0
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fa03 	bl	8005df0 <I2C_TransferConfig>
 80059ea:	e00f      	b.n	8005a0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	8979      	ldrh	r1, [r7, #10]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f9f2 	bl	8005df0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d19e      	bne.n	8005954 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	6a39      	ldr	r1, [r7, #32]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f8cc 	bl	8005bb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e01a      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <HAL_I2C_Master_Transmit+0x1e4>)
 8005a3e:	400b      	ands	r3, r1
 8005a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	80002000 	.word	0x80002000
 8005a6c:	fe00e800 	.word	0xfe00e800

08005a70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d103      	bne.n	8005a8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d007      	beq.n	8005aac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	619a      	str	r2, [r3, #24]
  }
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac8:	e022      	b.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d01e      	beq.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad2:	f7fd ffe7 	bl	8003aa4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d113      	bne.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e00f      	b.n	8005b30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d0cd      	beq.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b44:	e02c      	b.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f870 	bl	8005c30 <I2C_IsErrorOccurred>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e02a      	b.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d01e      	beq.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fd ff9f 	bl	8003aa4 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d113      	bne.n	8005ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e007      	b.n	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d1cb      	bne.n	8005b46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc4:	e028      	b.n	8005c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f830 	bl	8005c30 <I2C_IsErrorOccurred>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e026      	b.n	8005c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7fd ff63 	bl	8003aa4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf4:	f043 0220 	orr.w	r2, r3, #32
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e007      	b.n	8005c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d1cf      	bne.n	8005bc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	@ 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d068      	beq.n	8005d2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2210      	movs	r2, #16
 8005c62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c64:	e049      	b.n	8005cfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d045      	beq.n	8005cfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fd ff19 	bl	8003aa4 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <I2C_IsErrorOccurred+0x54>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d13a      	bne.n	8005cfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ca6:	d121      	bne.n	8005cec <I2C_IsErrorOccurred+0xbc>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cae:	d01d      	beq.n	8005cec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d01a      	beq.n	8005cec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cc6:	f7fd feed 	bl	8003aa4 <HAL_GetTick>
 8005cca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ccc:	e00e      	b.n	8005cec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005cce:	f7fd fee9 	bl	8003aa4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b19      	cmp	r3, #25
 8005cda:	d907      	bls.n	8005cec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	f043 0320 	orr.w	r3, r3, #32
 8005ce2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005cea:	e006      	b.n	8005cfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d1e9      	bne.n	8005cce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d003      	beq.n	8005d10 <I2C_IsErrorOccurred+0xe0>
 8005d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0aa      	beq.n	8005c66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f043 0301 	orr.w	r3, r3, #1
 8005d46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f043 0308 	orr.w	r3, r3, #8
 8005d68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f043 0302 	orr.w	r3, r3, #2
 8005d8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01c      	beq.n	8005dde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fe63 	bl	8005a70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6859      	ldr	r1, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <I2C_IsErrorOccurred+0x1bc>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3728      	adds	r7, #40	@ 0x28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	fe00e800 	.word	0xfe00e800

08005df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	817b      	strh	r3, [r7, #10]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e02:	897b      	ldrh	r3, [r7, #10]
 8005e04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e08:	7a7b      	ldrb	r3, [r7, #9]
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	0d5b      	lsrs	r3, r3, #21
 8005e2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e2e:	4b08      	ldr	r3, [pc, #32]	@ (8005e50 <I2C_TransferConfig+0x60>)
 8005e30:	430b      	orrs	r3, r1
 8005e32:	43db      	mvns	r3, r3
 8005e34:	ea02 0103 	and.w	r1, r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	03ff63ff 	.word	0x03ff63ff

08005e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d138      	bne.n	8005edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e032      	b.n	8005ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	@ 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d139      	bne.n	8005f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e033      	b.n	8005f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2224      	movs	r2, #36	@ 0x24
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40007000 	.word	0x40007000

08005fa4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fae:	4b23      	ldr	r3, [pc, #140]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1d      	ldr	r2, [pc, #116]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fd2:	f7fd fd67 	bl	8003aa4 <HAL_GetTick>
 8005fd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fd8:	e009      	b.n	8005fee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fda:	f7fd fd63 	bl	8003aa4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe8:	d901      	bls.n	8005fee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e022      	b.n	8006034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffa:	d1ee      	bne.n	8005fda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ffc:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0f      	ldr	r2, [pc, #60]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006008:	f7fd fd4c 	bl	8003aa4 <HAL_GetTick>
 800600c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800600e:	e009      	b.n	8006024 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006010:	f7fd fd48 	bl	8003aa4 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800601e:	d901      	bls.n	8006024 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e007      	b.n	8006034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006030:	d1ee      	bne.n	8006010 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	40007000 	.word	0x40007000

08006044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e291      	b.n	800657e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8087 	beq.w	8006176 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006068:	4b96      	ldr	r3, [pc, #600]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00c      	beq.n	800608e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006074:	4b93      	ldr	r3, [pc, #588]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d112      	bne.n	80060a6 <HAL_RCC_OscConfig+0x62>
 8006080:	4b90      	ldr	r3, [pc, #576]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800608c:	d10b      	bne.n	80060a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608e:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d06c      	beq.n	8006174 <HAL_RCC_OscConfig+0x130>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d168      	bne.n	8006174 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e26b      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ae:	d106      	bne.n	80060be <HAL_RCC_OscConfig+0x7a>
 80060b0:	4b84      	ldr	r3, [pc, #528]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a83      	ldr	r2, [pc, #524]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e02e      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x9c>
 80060c6:	4b7f      	ldr	r3, [pc, #508]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7e      	ldr	r2, [pc, #504]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b7c      	ldr	r3, [pc, #496]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7b      	ldr	r2, [pc, #492]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0xc0>
 80060ea:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a75      	ldr	r2, [pc, #468]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b73      	ldr	r3, [pc, #460]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a72      	ldr	r2, [pc, #456]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 8006104:	4b6f      	ldr	r3, [pc, #444]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6e      	ldr	r2, [pc, #440]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fd fcbe 	bl	8003aa4 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800612c:	f7fd fcba 	bl	8003aa4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	@ 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e21f      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b61      	ldr	r3, [pc, #388]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xe8>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd fcaa 	bl	8003aa4 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fd fca6 	bl	8003aa4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e20b      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b57      	ldr	r3, [pc, #348]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x110>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d069      	beq.n	8006256 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006182:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800618e:	4b4d      	ldr	r3, [pc, #308]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b08      	cmp	r3, #8
 8006198:	d11c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x190>
 800619a:	4b4a      	ldr	r3, [pc, #296]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d116      	bne.n	80061d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	4b47      	ldr	r3, [pc, #284]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x17a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d001      	beq.n	80061be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e1df      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b41      	ldr	r3, [pc, #260]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	493d      	ldr	r1, [pc, #244]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	e040      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d023      	beq.n	8006224 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061dc:	4b39      	ldr	r3, [pc, #228]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a38      	ldr	r2, [pc, #224]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fd fc5c 	bl	8003aa4 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061f0:	f7fd fc58 	bl	8003aa4 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e1bd      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006202:	4b30      	ldr	r3, [pc, #192]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620e:	4b2d      	ldr	r3, [pc, #180]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4929      	ldr	r1, [pc, #164]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
 8006222:	e018      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006224:	4b27      	ldr	r3, [pc, #156]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a26      	ldr	r2, [pc, #152]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fd fc38 	bl	8003aa4 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006238:	f7fd fc34 	bl	8003aa4 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e199      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624a:	4b1e      	ldr	r3, [pc, #120]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d038      	beq.n	80062d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626a:	4b16      	ldr	r3, [pc, #88]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800626c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626e:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7fd fc15 	bl	8003aa4 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627e:	f7fd fc11 	bl	8003aa4 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e176      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x23a>
 800629c:	e01a      	b.n	80062d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80062a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7fd fbfb 	bl	8003aa4 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b2:	f7fd fbf7 	bl	8003aa4 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d903      	bls.n	80062c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e15c      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
 80062c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c8:	4b91      	ldr	r3, [pc, #580]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ee      	bne.n	80062b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a4 	beq.w	800642a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	4b88      	ldr	r3, [pc, #544]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	4a87      	ldr	r2, [pc, #540]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80062fa:	4b85      	ldr	r3, [pc, #532]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630a:	4b82      	ldr	r3, [pc, #520]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d118      	bne.n	8006348 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006316:	4b7f      	ldr	r3, [pc, #508]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7e      	ldr	r2, [pc, #504]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006322:	f7fd fbbf 	bl	8003aa4 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632a:	f7fd fbbb 	bl	8003aa4 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b64      	cmp	r3, #100	@ 0x64
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e120      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800633c:	4b75      	ldr	r3, [pc, #468]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <HAL_RCC_OscConfig+0x31a>
 8006350:	4b6f      	ldr	r3, [pc, #444]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	4a6e      	ldr	r2, [pc, #440]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6713      	str	r3, [r2, #112]	@ 0x70
 800635c:	e02d      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x33c>
 8006366:	4b6a      	ldr	r3, [pc, #424]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636a:	4a69      	ldr	r2, [pc, #420]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6713      	str	r3, [r2, #112]	@ 0x70
 8006372:	4b67      	ldr	r3, [pc, #412]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006376:	4a66      	ldr	r2, [pc, #408]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006378:	f023 0304 	bic.w	r3, r3, #4
 800637c:	6713      	str	r3, [r2, #112]	@ 0x70
 800637e:	e01c      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b05      	cmp	r3, #5
 8006386:	d10c      	bne.n	80063a2 <HAL_RCC_OscConfig+0x35e>
 8006388:	4b61      	ldr	r3, [pc, #388]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638c:	4a60      	ldr	r2, [pc, #384]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800638e:	f043 0304 	orr.w	r3, r3, #4
 8006392:	6713      	str	r3, [r2, #112]	@ 0x70
 8006394:	4b5e      	ldr	r3, [pc, #376]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006398:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a0:	e00b      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 80063a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	4a5a      	ldr	r2, [pc, #360]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ae:	4b58      	ldr	r3, [pc, #352]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	4a57      	ldr	r2, [pc, #348]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063b4:	f023 0304 	bic.w	r3, r3, #4
 80063b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d015      	beq.n	80063ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fd fb6f 	bl	8003aa4 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ca:	f7fd fb6b 	bl	8003aa4 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e0ce      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0ee      	beq.n	80063ca <HAL_RCC_OscConfig+0x386>
 80063ec:	e014      	b.n	8006418 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fd fb59 	bl	8003aa4 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd fb55 	bl	8003aa4 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e0b8      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640c:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d105      	bne.n	800642a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641e:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006428:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80a4 	beq.w	800657c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006434:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b08      	cmp	r3, #8
 800643e:	d06b      	beq.n	8006518 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d149      	bne.n	80064dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006448:	4b31      	ldr	r3, [pc, #196]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a30      	ldr	r2, [pc, #192]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fd fb26 	bl	8003aa4 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645c:	f7fd fb22 	bl	8003aa4 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e087      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646e:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	3b01      	subs	r3, #1
 8006494:	041b      	lsls	r3, r3, #16
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	061b      	lsls	r3, r3, #24
 800649e:	4313      	orrs	r3, r2
 80064a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd faf6 	bl	8003aa4 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064bc:	f7fd faf2 	bl	8003aa4 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e057      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x478>
 80064da:	e04f      	b.n	800657c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fd fadc 	bl	8003aa4 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f0:	f7fd fad8 	bl	8003aa4 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e03d      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006502:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4ac>
 800650e:	e035      	b.n	800657c <HAL_RCC_OscConfig+0x538>
 8006510:	40023800 	.word	0x40023800
 8006514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006518:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <HAL_RCC_OscConfig+0x544>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d028      	beq.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006530:	429a      	cmp	r2, r3
 8006532:	d121      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653e:	429a      	cmp	r2, r3
 8006540:	d11a      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800654e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006550:	4293      	cmp	r3, r2
 8006552:	d111      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	3b01      	subs	r3, #1
 8006562:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006564:	429a      	cmp	r2, r3
 8006566:	d107      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800

0800658c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0d0      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b67      	ldr	r3, [pc, #412]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	4965      	ldr	r1, [pc, #404]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b63      	ldr	r3, [pc, #396]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0b8      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065ec:	4b59      	ldr	r3, [pc, #356]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a58      	ldr	r2, [pc, #352]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80065f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006604:	4b53      	ldr	r3, [pc, #332]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a52      	ldr	r2, [pc, #328]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800660a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800660e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006610:	4b50      	ldr	r3, [pc, #320]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	494d      	ldr	r1, [pc, #308]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d040      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	4b47      	ldr	r3, [pc, #284]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d115      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e07f      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d107      	bne.n	800665e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664e:	4b41      	ldr	r3, [pc, #260]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e073      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665e:	4b3d      	ldr	r3, [pc, #244]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e06b      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800666e:	4b39      	ldr	r3, [pc, #228]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4936      	ldr	r1, [pc, #216]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006680:	f7fd fa10 	bl	8003aa4 <HAL_GetTick>
 8006684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	e00a      	b.n	800669e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006688:	f7fd fa0c 	bl	8003aa4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e053      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	4b2d      	ldr	r3, [pc, #180]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 020c 	and.w	r2, r3, #12
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d1eb      	bne.n	8006688 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066b0:	4b27      	ldr	r3, [pc, #156]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d210      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066be:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 020f 	bic.w	r2, r3, #15
 80066c6:	4922      	ldr	r1, [pc, #136]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e032      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ec:	4b19      	ldr	r3, [pc, #100]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4916      	ldr	r1, [pc, #88]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800670a:	4b12      	ldr	r3, [pc, #72]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	490e      	ldr	r1, [pc, #56]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800671e:	f000 f821 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490a      	ldr	r1, [pc, #40]	@ (8006758 <HAL_RCC_ClockConfig+0x1cc>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a09      	ldr	r2, [pc, #36]	@ (800675c <HAL_RCC_ClockConfig+0x1d0>)
 8006738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <HAL_RCC_ClockConfig+0x1d4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd f96c 	bl	8003a1c <HAL_InitTick>

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023c00 	.word	0x40023c00
 8006754:	40023800 	.word	0x40023800
 8006758:	08023260 	.word	0x08023260
 800675c:	20000058 	.word	0x20000058
 8006760:	2000005c 	.word	0x2000005c

08006764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006768:	b094      	sub	sp, #80	@ 0x50
 800676a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006770:	2300      	movs	r3, #0
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006774:	2300      	movs	r3, #0
 8006776:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800677c:	4b79      	ldr	r3, [pc, #484]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d00d      	beq.n	80067a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006788:	2b08      	cmp	r3, #8
 800678a:	f200 80e1 	bhi.w	8006950 <HAL_RCC_GetSysClockFreq+0x1ec>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x34>
 8006792:	2b04      	cmp	r3, #4
 8006794:	d003      	beq.n	800679e <HAL_RCC_GetSysClockFreq+0x3a>
 8006796:	e0db      	b.n	8006950 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b73      	ldr	r3, [pc, #460]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x204>)
 800679a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800679c:	e0db      	b.n	8006956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800679e:	4b73      	ldr	r3, [pc, #460]	@ (800696c <HAL_RCC_GetSysClockFreq+0x208>)
 80067a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067a2:	e0d8      	b.n	8006956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d063      	beq.n	8006882 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	099b      	lsrs	r3, r3, #6
 80067c0:	2200      	movs	r2, #0
 80067c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067ce:	2300      	movs	r3, #0
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	f04f 0000 	mov.w	r0, #0
 80067de:	f04f 0100 	mov.w	r1, #0
 80067e2:	0159      	lsls	r1, r3, #5
 80067e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e8:	0150      	lsls	r0, r2, #5
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4621      	mov	r1, r4
 80067f0:	1a51      	subs	r1, r2, r1
 80067f2:	6139      	str	r1, [r7, #16]
 80067f4:	4629      	mov	r1, r5
 80067f6:	eb63 0301 	sbc.w	r3, r3, r1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006808:	4659      	mov	r1, fp
 800680a:	018b      	lsls	r3, r1, #6
 800680c:	4651      	mov	r1, sl
 800680e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006812:	4651      	mov	r1, sl
 8006814:	018a      	lsls	r2, r1, #6
 8006816:	4651      	mov	r1, sl
 8006818:	ebb2 0801 	subs.w	r8, r2, r1
 800681c:	4659      	mov	r1, fp
 800681e:	eb63 0901 	sbc.w	r9, r3, r1
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800682e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006836:	4690      	mov	r8, r2
 8006838:	4699      	mov	r9, r3
 800683a:	4623      	mov	r3, r4
 800683c:	eb18 0303 	adds.w	r3, r8, r3
 8006840:	60bb      	str	r3, [r7, #8]
 8006842:	462b      	mov	r3, r5
 8006844:	eb49 0303 	adc.w	r3, r9, r3
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006856:	4629      	mov	r1, r5
 8006858:	024b      	lsls	r3, r1, #9
 800685a:	4621      	mov	r1, r4
 800685c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006860:	4621      	mov	r1, r4
 8006862:	024a      	lsls	r2, r1, #9
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686a:	2200      	movs	r2, #0
 800686c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006870:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006874:	f7fa fa18 	bl	8000ca8 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4613      	mov	r3, r2
 800687e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006880:	e058      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006882:	4b38      	ldr	r3, [pc, #224]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	2200      	movs	r2, #0
 800688a:	4618      	mov	r0, r3
 800688c:	4611      	mov	r1, r2
 800688e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	@ 0x24
 8006898:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	f04f 0000 	mov.w	r0, #0
 80068a4:	f04f 0100 	mov.w	r1, #0
 80068a8:	0159      	lsls	r1, r3, #5
 80068aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ae:	0150      	lsls	r0, r2, #5
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4641      	mov	r1, r8
 80068b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ba:	4649      	mov	r1, r9
 80068bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80068c0:	f04f 0200 	mov.w	r2, #0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068d4:	ebb2 040a 	subs.w	r4, r2, sl
 80068d8:	eb63 050b 	sbc.w	r5, r3, fp
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	00eb      	lsls	r3, r5, #3
 80068e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ea:	00e2      	lsls	r2, r4, #3
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	4643      	mov	r3, r8
 80068f2:	18e3      	adds	r3, r4, r3
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	464b      	mov	r3, r9
 80068f8:	eb45 0303 	adc.w	r3, r5, r3
 80068fc:	607b      	str	r3, [r7, #4]
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800690a:	4629      	mov	r1, r5
 800690c:	028b      	lsls	r3, r1, #10
 800690e:	4621      	mov	r1, r4
 8006910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006914:	4621      	mov	r1, r4
 8006916:	028a      	lsls	r2, r1, #10
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	2200      	movs	r2, #0
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	61fa      	str	r2, [r7, #28]
 8006924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006928:	f7fa f9be 	bl	8000ca8 <__aeabi_uldivmod>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4613      	mov	r3, r2
 8006932:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006934:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <HAL_RCC_GetSysClockFreq+0x200>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	3301      	adds	r3, #1
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800694e:	e002      	b.n	8006956 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006950:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <HAL_RCC_GetSysClockFreq+0x204>)
 8006952:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006958:	4618      	mov	r0, r3
 800695a:	3750      	adds	r7, #80	@ 0x50
 800695c:	46bd      	mov	sp, r7
 800695e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800
 8006968:	00f42400 	.word	0x00f42400
 800696c:	007a1200 	.word	0x007a1200

08006970 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <HAL_RCC_GetHCLKFreq+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000058 	.word	0x20000058

08006988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800698c:	f7ff fff0 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 8006990:	4602      	mov	r2, r0
 8006992:	4b05      	ldr	r3, [pc, #20]	@ (80069a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	0a9b      	lsrs	r3, r3, #10
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	4903      	ldr	r1, [pc, #12]	@ (80069ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800699e:	5ccb      	ldrb	r3, [r1, r3]
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40023800 	.word	0x40023800
 80069ac:	08023270 	.word	0x08023270

080069b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069b4:	f7ff ffdc 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 80069b8:	4602      	mov	r2, r0
 80069ba:	4b05      	ldr	r3, [pc, #20]	@ (80069d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	0b5b      	lsrs	r3, r3, #13
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	4903      	ldr	r1, [pc, #12]	@ (80069d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069c6:	5ccb      	ldrb	r3, [r1, r3]
 80069c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40023800 	.word	0x40023800
 80069d4:	08023270 	.word	0x08023270

080069d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d012      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a00:	4b69      	ldr	r3, [pc, #420]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	4a68      	ldr	r2, [pc, #416]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a0a:	6093      	str	r3, [r2, #8]
 8006a0c:	4b66      	ldr	r3, [pc, #408]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a14:	4964      	ldr	r1, [pc, #400]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a32:	4b5d      	ldr	r3, [pc, #372]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a40:	4959      	ldr	r1, [pc, #356]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a50:	d101      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a52:	2301      	movs	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d017      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7c:	494a      	ldr	r1, [pc, #296]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 808b 	beq.w	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006abc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	4a39      	ldr	r2, [pc, #228]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ac8:	4b37      	ldr	r3, [pc, #220]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	60bb      	str	r3, [r7, #8]
 8006ad2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ad4:	4b35      	ldr	r3, [pc, #212]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a34      	ldr	r2, [pc, #208]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fc ffe0 	bl	8003aa4 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae8:	f7fc ffdc 	bl	8003aa4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	@ 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e357      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006afa:	4b2c      	ldr	r3, [pc, #176]	@ (8006bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b06:	4b28      	ldr	r3, [pc, #160]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d035      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d02e      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b24:	4b20      	ldr	r3, [pc, #128]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b32:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b38:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b46:	4a18      	ldr	r2, [pc, #96]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b4c:	4b16      	ldr	r3, [pc, #88]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d114      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fc ffa4 	bl	8003aa4 <HAL_GetTick>
 8006b5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5e:	e00a      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fc ffa0 	bl	8003aa4 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e319      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ee      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8e:	d111      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b90:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b9c:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b9e:	400b      	ands	r3, r1
 8006ba0:	4901      	ldr	r1, [pc, #4]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]
 8006ba6:	e00b      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	40007000 	.word	0x40007000
 8006bb0:	0ffffcff 	.word	0x0ffffcff
 8006bb4:	4baa      	ldr	r3, [pc, #680]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4aa9      	ldr	r2, [pc, #676]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006bbe:	6093      	str	r3, [r2, #8]
 8006bc0:	4ba7      	ldr	r3, [pc, #668]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bcc:	49a4      	ldr	r1, [pc, #656]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d010      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bde:	4ba0      	ldr	r3, [pc, #640]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006be4:	4a9e      	ldr	r2, [pc, #632]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006bee:	4b9c      	ldr	r3, [pc, #624]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	4999      	ldr	r1, [pc, #612]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c0c:	4b94      	ldr	r3, [pc, #592]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1a:	4991      	ldr	r1, [pc, #580]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c2e:	4b8c      	ldr	r3, [pc, #560]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c3c:	4988      	ldr	r1, [pc, #544]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c50:	4b83      	ldr	r3, [pc, #524]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c5e:	4980      	ldr	r1, [pc, #512]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c72:	4b7b      	ldr	r3, [pc, #492]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c80:	4977      	ldr	r1, [pc, #476]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00a      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c94:	4b72      	ldr	r3, [pc, #456]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca2:	496f      	ldr	r1, [pc, #444]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00a      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbc:	f023 020c 	bic.w	r2, r3, #12
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc4:	4966      	ldr	r1, [pc, #408]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cd8:	4b61      	ldr	r3, [pc, #388]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cde:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce6:	495e      	ldr	r1, [pc, #376]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cfa:	4b59      	ldr	r3, [pc, #356]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d08:	4955      	ldr	r1, [pc, #340]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d1c:	4b50      	ldr	r3, [pc, #320]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2a:	494d      	ldr	r1, [pc, #308]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d3e:	4b48      	ldr	r3, [pc, #288]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4c:	4944      	ldr	r1, [pc, #272]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00a      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d60:	4b3f      	ldr	r3, [pc, #252]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d6e:	493c      	ldr	r1, [pc, #240]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d82:	4b37      	ldr	r3, [pc, #220]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d90:	4933      	ldr	r1, [pc, #204]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006da4:	4b2e      	ldr	r3, [pc, #184]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006daa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006db2:	492b      	ldr	r1, [pc, #172]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d011      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006dc6:	4b26      	ldr	r3, [pc, #152]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dd4:	4922      	ldr	r1, [pc, #136]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de4:	d101      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006df6:	2301      	movs	r3, #1
 8006df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e06:	4b16      	ldr	r3, [pc, #88]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e14:	4912      	ldr	r1, [pc, #72]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e38:	4909      	ldr	r1, [pc, #36]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d006      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80d9 	beq.w	8007006 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e54:	4b02      	ldr	r3, [pc, #8]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a01      	ldr	r2, [pc, #4]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e5e:	e001      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006e60:	40023800 	.word	0x40023800
 8006e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e66:	f7fc fe1d 	bl	8003aa4 <HAL_GetTick>
 8006e6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e6c:	e008      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e6e:	f7fc fe19 	bl	8003aa4 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b64      	cmp	r3, #100	@ 0x64
 8006e7a:	d901      	bls.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e194      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e80:	4b6c      	ldr	r3, [pc, #432]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d021      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d11d      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ea0:	4b64      	ldr	r3, [pc, #400]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006eae:	4b61      	ldr	r3, [pc, #388]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	019a      	lsls	r2, r3, #6
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	061b      	lsls	r3, r3, #24
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	071b      	lsls	r3, r3, #28
 8006ed4:	4957      	ldr	r1, [pc, #348]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d02e      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f06:	d129      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f08:	4b4a      	ldr	r3, [pc, #296]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f16:	4b47      	ldr	r3, [pc, #284]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f1c:	0f1b      	lsrs	r3, r3, #28
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	019a      	lsls	r2, r3, #6
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	041b      	lsls	r3, r3, #16
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	061b      	lsls	r3, r3, #24
 8006f36:	431a      	orrs	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	071b      	lsls	r3, r3, #28
 8006f3c:	493d      	ldr	r1, [pc, #244]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f44:	4b3b      	ldr	r3, [pc, #236]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f4a:	f023 021f 	bic.w	r2, r3, #31
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	3b01      	subs	r3, #1
 8006f54:	4937      	ldr	r1, [pc, #220]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01d      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f68:	4b32      	ldr	r3, [pc, #200]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6e:	0e1b      	lsrs	r3, r3, #24
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f76:	4b2f      	ldr	r3, [pc, #188]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f7c:	0f1b      	lsrs	r3, r3, #28
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	019a      	lsls	r2, r3, #6
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	431a      	orrs	r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	071b      	lsls	r3, r3, #28
 8006f9c:	4925      	ldr	r1, [pc, #148]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d011      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	019a      	lsls	r2, r3, #6
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	071b      	lsls	r3, r3, #28
 8006fcc:	4919      	ldr	r1, [pc, #100]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fd4:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a16      	ldr	r2, [pc, #88]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe0:	f7fc fd60 	bl	8003aa4 <HAL_GetTick>
 8006fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fe8:	f7fc fd5c 	bl	8003aa4 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	@ 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e0d7      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f0      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f040 80cd 	bne.w	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800700e:	4b09      	ldr	r3, [pc, #36]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a08      	ldr	r2, [pc, #32]	@ (8007034 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701a:	f7fc fd43 	bl	8003aa4 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007020:	e00a      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007022:	f7fc fd3f 	bl	8003aa4 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b64      	cmp	r3, #100	@ 0x64
 800702e:	d903      	bls.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e0ba      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007034:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007038:	4b5e      	ldr	r3, [pc, #376]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007044:	d0ed      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d12a      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800706e:	4b51      	ldr	r3, [pc, #324]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800707c:	4b4d      	ldr	r3, [pc, #308]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007082:	0f1b      	lsrs	r3, r3, #28
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	019a      	lsls	r2, r3, #6
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	041b      	lsls	r3, r3, #16
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	061b      	lsls	r3, r3, #24
 800709c:	431a      	orrs	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	071b      	lsls	r3, r3, #28
 80070a2:	4944      	ldr	r1, [pc, #272]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070aa:	4b42      	ldr	r3, [pc, #264]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	3b01      	subs	r3, #1
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	493d      	ldr	r1, [pc, #244]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d022      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070d8:	d11d      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070da:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070e8:	4b32      	ldr	r3, [pc, #200]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ee:	0f1b      	lsrs	r3, r3, #28
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	019a      	lsls	r2, r3, #6
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	431a      	orrs	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	071b      	lsls	r3, r3, #28
 800710e:	4929      	ldr	r1, [pc, #164]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d028      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007122:	4b24      	ldr	r3, [pc, #144]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007130:	4b20      	ldr	r3, [pc, #128]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	019a      	lsls	r2, r3, #6
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	431a      	orrs	r2, r3
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	4917      	ldr	r1, [pc, #92]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800715e:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007164:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716c:	4911      	ldr	r1, [pc, #68]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007174:	4b0f      	ldr	r3, [pc, #60]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a0e      	ldr	r2, [pc, #56]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007180:	f7fc fc90 	bl	8003aa4 <HAL_GetTick>
 8007184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007186:	e008      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007188:	f7fc fc8c 	bl	8003aa4 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b64      	cmp	r3, #100	@ 0x64
 8007194:	d901      	bls.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e007      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800719a:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a6:	d1ef      	bne.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	40023800 	.word	0x40023800

080071b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e09d      	b.n	8007306 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d108      	bne.n	80071e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071da:	d009      	beq.n	80071f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	61da      	str	r2, [r3, #28]
 80071e2:	e005      	b.n	80071f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fb ff58 	bl	80030c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007226:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007230:	d902      	bls.n	8007238 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	e002      	b.n	800723e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800723c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007246:	d007      	beq.n	8007258 <HAL_SPI_Init+0xa0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007250:	d002      	beq.n	8007258 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	431a      	orrs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729a:	ea42 0103 	orr.w	r1, r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	0c1b      	lsrs	r3, r3, #16
 80072b4:	f003 0204 	and.w	r2, r3, #4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80072d4:	ea42 0103 	orr.w	r1, r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b088      	sub	sp, #32
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_SPI_Transmit+0x22>
 800732c:	2302      	movs	r3, #2
 800732e:	e158      	b.n	80075e2 <HAL_SPI_Transmit+0x2d4>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007338:	f7fc fbb4 	bl	8003aa4 <HAL_GetTick>
 800733c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d002      	beq.n	8007354 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007352:	e13d      	b.n	80075d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Transmit+0x52>
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007364:	e134      	b.n	80075d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2203      	movs	r2, #3
 800736a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	88fa      	ldrh	r2, [r7, #6]
 800737e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b0:	d10f      	bne.n	80073d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b40      	cmp	r3, #64	@ 0x40
 80073de:	d007      	beq.n	80073f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073f8:	d94b      	bls.n	8007492 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_SPI_Transmit+0xfa>
 8007402:	8afb      	ldrh	r3, [r7, #22]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d13e      	bne.n	8007486 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	1c9a      	adds	r2, r3, #2
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800742c:	e02b      	b.n	8007486 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b02      	cmp	r3, #2
 800743a:	d112      	bne.n	8007462 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007460:	e011      	b.n	8007486 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007462:	f7fc fb1f 	bl	8003aa4 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d803      	bhi.n	800747a <HAL_SPI_Transmit+0x16c>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d102      	bne.n	8007480 <HAL_SPI_Transmit+0x172>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007484:	e0a4      	b.n	80075d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1ce      	bne.n	800742e <HAL_SPI_Transmit+0x120>
 8007490:	e07c      	b.n	800758c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_SPI_Transmit+0x192>
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d170      	bne.n	8007582 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d912      	bls.n	80074d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	881a      	ldrh	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	1c9a      	adds	r2, r3, #2
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b02      	subs	r3, #2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074ce:	e058      	b.n	8007582 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	7812      	ldrb	r2, [r2, #0]
 80074dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80074f6:	e044      	b.n	8007582 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d12b      	bne.n	800755e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d912      	bls.n	8007536 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007520:	1c9a      	adds	r2, r3, #2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b02      	subs	r3, #2
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007534:	e025      	b.n	8007582 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800755c:	e011      	b.n	8007582 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800755e:	f7fc faa1 	bl	8003aa4 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d803      	bhi.n	8007576 <HAL_SPI_Transmit+0x268>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d102      	bne.n	800757c <HAL_SPI_Transmit+0x26e>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007580:	e026      	b.n	80075d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1b5      	bne.n	80074f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fd07 	bl	8007fa4 <SPI_EndRxTxTransaction>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2220      	movs	r2, #32
 80075a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e000      	b.n	80075d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80075ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80075e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af02      	add	r7, sp, #8
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007606:	d112      	bne.n	800762e <HAL_SPI_Receive+0x44>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10e      	bne.n	800762e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2204      	movs	r2, #4
 8007614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4613      	mov	r3, r2
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f910 	bl	800784a <HAL_SPI_TransmitReceive>
 800762a:	4603      	mov	r3, r0
 800762c:	e109      	b.n	8007842 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_SPI_Receive+0x52>
 8007638:	2302      	movs	r3, #2
 800763a:	e102      	b.n	8007842 <HAL_SPI_Receive+0x258>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007644:	f7fc fa2e 	bl	8003aa4 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b01      	cmp	r3, #1
 8007654:	d002      	beq.n	800765c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007656:	2302      	movs	r3, #2
 8007658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800765a:	e0e9      	b.n	8007830 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_SPI_Receive+0x7e>
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800766c:	e0e0      	b.n	8007830 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2204      	movs	r2, #4
 8007672:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	88fa      	ldrh	r2, [r7, #6]
 8007686:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076b8:	d908      	bls.n	80076cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e007      	b.n	80076dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e4:	d10f      	bne.n	8007706 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007704:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007710:	2b40      	cmp	r3, #64	@ 0x40
 8007712:	d007      	beq.n	8007724 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007722:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800772c:	d867      	bhi.n	80077fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800772e:	e030      	b.n	8007792 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b01      	cmp	r3, #1
 800773c:	d117      	bne.n	800776e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f103 020c 	add.w	r2, r3, #12
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007754:	1c5a      	adds	r2, r3, #1
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800776c:	e011      	b.n	8007792 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776e:	f7fc f999 	bl	8003aa4 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d803      	bhi.n	8007786 <HAL_SPI_Receive+0x19c>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <HAL_SPI_Receive+0x1a2>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007790:	e04e      	b.n	8007830 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1c8      	bne.n	8007730 <HAL_SPI_Receive+0x146>
 800779e:	e034      	b.n	800780a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d115      	bne.n	80077da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b8:	b292      	uxth	r2, r2
 80077ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	1c9a      	adds	r2, r3, #2
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80077d8:	e011      	b.n	80077fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077da:	f7fc f963 	bl	8003aa4 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d803      	bhi.n	80077f2 <HAL_SPI_Receive+0x208>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f0:	d102      	bne.n	80077f8 <HAL_SPI_Receive+0x20e>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077fc:	e018      	b.n	8007830 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ca      	bne.n	80077a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fb4c 	bl	8007eac <SPI_EndRxTransaction>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	e000      	b.n	8007830 <HAL_SPI_Receive+0x246>
  }

error :
 800782e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b08a      	sub	sp, #40	@ 0x28
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007858:	2301      	movs	r3, #1
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x26>
 800786c:	2302      	movs	r3, #2
 800786e:	e1fb      	b.n	8007c68 <HAL_SPI_TransmitReceive+0x41e>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007878:	f7fc f914 	bl	8003aa4 <HAL_GetTick>
 800787c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007884:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800788c:	887b      	ldrh	r3, [r7, #2]
 800788e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007894:	7efb      	ldrb	r3, [r7, #27]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d00e      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x6e>
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078a0:	d106      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x66>
 80078aa:	7efb      	ldrb	r3, [r7, #27]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d003      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078b6:	e1cd      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x80>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x80>
 80078c4:	887b      	ldrh	r3, [r7, #2]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078d0:	e1c0      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d003      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2205      	movs	r2, #5
 80078e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	887a      	ldrh	r2, [r7, #2]
 80078f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	887a      	ldrh	r2, [r7, #2]
 80078fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	887a      	ldrh	r2, [r7, #2]
 800790c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	887a      	ldrh	r2, [r7, #2]
 8007912:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007928:	d802      	bhi.n	8007930 <HAL_SPI_TransmitReceive+0xe6>
 800792a:	8a3b      	ldrh	r3, [r7, #16]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d908      	bls.n	8007942 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	e007      	b.n	8007952 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	d007      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800796e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007978:	d97c      	bls.n	8007a74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <HAL_SPI_TransmitReceive+0x13e>
 8007982:	8a7b      	ldrh	r3, [r7, #18]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d169      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	881a      	ldrh	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007998:	1c9a      	adds	r2, r3, #2
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ac:	e056      	b.n	8007a5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d11b      	bne.n	80079f4 <HAL_SPI_TransmitReceive+0x1aa>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x1aa>
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d113      	bne.n	80079f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d0:	881a      	ldrh	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	1c9a      	adds	r2, r3, #2
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11c      	bne.n	8007a3c <HAL_SPI_TransmitReceive+0x1f2>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68da      	ldr	r2, [r3, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a3c:	f7fc f832 	bl	8003aa4 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d807      	bhi.n	8007a5c <HAL_SPI_TransmitReceive+0x212>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d003      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8007a5a:	e0fb      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1a3      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x164>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d19d      	bne.n	80079ae <HAL_SPI_TransmitReceive+0x164>
 8007a72:	e0df      	b.n	8007c34 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x23a>
 8007a7c:	8a7b      	ldrh	r3, [r7, #18]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	f040 80cb 	bne.w	8007c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d912      	bls.n	8007ab4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a92:	881a      	ldrh	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9e:	1c9a      	adds	r2, r3, #2
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b02      	subs	r3, #2
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ab2:	e0b2      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ada:	e09e      	b.n	8007c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d134      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x30a>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d02f      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x30a>
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d12c      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d912      	bls.n	8007b2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b14:	1c9a      	adds	r2, r3, #2
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b02      	subs	r3, #2
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b28:	e012      	b.n	8007b50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d148      	bne.n	8007bf4 <HAL_SPI_TransmitReceive+0x3aa>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d042      	beq.n	8007bf4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d923      	bls.n	8007bc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b84:	b292      	uxth	r2, r2
 8007b86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8c:	1c9a      	adds	r2, r3, #2
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b02      	subs	r3, #2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d81f      	bhi.n	8007bf0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	e016      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f103 020c 	add.w	r2, r3, #12
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	7812      	ldrb	r2, [r2, #0]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bf4:	f7fb ff56 	bl	8003aa4 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d803      	bhi.n	8007c0c <HAL_SPI_TransmitReceive+0x3c2>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d102      	bne.n	8007c12 <HAL_SPI_TransmitReceive+0x3c8>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8007c18:	e01c      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f47f af5b 	bne.w	8007adc <HAL_SPI_TransmitReceive+0x292>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f47f af54 	bne.w	8007adc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f9b3 	bl	8007fa4 <SPI_EndRxTxTransaction>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d006      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2220      	movs	r2, #32
 8007c4e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007c50:	e000      	b.n	8007c54 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3728      	adds	r7, #40	@ 0x28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c80:	f7fb ff10 	bl	8003aa4 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c90:	f7fb ff08 	bl	8003aa4 <HAL_GetTick>
 8007c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c96:	4b39      	ldr	r3, [pc, #228]	@ (8007d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	015b      	lsls	r3, r3, #5
 8007c9c:	0d1b      	lsrs	r3, r3, #20
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ca6:	e054      	b.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d050      	beq.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cb0:	f7fb fef8 	bl	8003aa4 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d902      	bls.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d13d      	bne.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cde:	d111      	bne.n	8007d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ce8:	d004      	beq.n	8007cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf2:	d107      	bne.n	8007d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d0c:	d10f      	bne.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e017      	b.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	bf0c      	ite	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	2300      	movne	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d19b      	bne.n	8007ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000058 	.word	0x20000058

08007d80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08a      	sub	sp, #40	@ 0x28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d92:	f7fb fe87 	bl	8003aa4 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	4413      	add	r3, r2
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007da2:	f7fb fe7f 	bl	8003aa4 <HAL_GetTick>
 8007da6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	330c      	adds	r3, #12
 8007dae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007db0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ea8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	00da      	lsls	r2, r3, #3
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	0d1b      	lsrs	r3, r3, #20
 8007dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
 8007dc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dc8:	e060      	b.n	8007e8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007dd0:	d107      	bne.n	8007de2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d104      	bne.n	8007de2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d050      	beq.n	8007e8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dea:	f7fb fe5b 	bl	8003aa4 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d902      	bls.n	8007e00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d13d      	bne.n	8007e7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e18:	d111      	bne.n	8007e3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e22:	d004      	beq.n	8007e2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e2c:	d107      	bne.n	8007e3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e46:	d10f      	bne.n	8007e68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e010      	b.n	8007e9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4013      	ands	r3, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d196      	bne.n	8007dca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3728      	adds	r7, #40	@ 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000058 	.word	0x20000058

08007eac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec0:	d111      	bne.n	8007ee6 <SPI_EndRxTransaction+0x3a>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eca:	d004      	beq.n	8007ed6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ed4:	d107      	bne.n	8007ee6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ee4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eee:	d112      	bne.n	8007f16 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2180      	movs	r1, #128	@ 0x80
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff feb8 	bl	8007c70 <SPI_WaitFlagStateUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d021      	beq.n	8007f4a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e03d      	b.n	8007f92 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f16:	4b21      	ldr	r3, [pc, #132]	@ (8007f9c <SPI_EndRxTransaction+0xf0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a21      	ldr	r2, [pc, #132]	@ (8007fa0 <SPI_EndRxTransaction+0xf4>)
 8007f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f20:	0d5b      	lsrs	r3, r3, #21
 8007f22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f42:	2b80      	cmp	r3, #128	@ 0x80
 8007f44:	d0f2      	beq.n	8007f2c <SPI_EndRxTransaction+0x80>
 8007f46:	e000      	b.n	8007f4a <SPI_EndRxTransaction+0x9e>
        break;
 8007f48:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f52:	d11d      	bne.n	8007f90 <SPI_EndRxTransaction+0xe4>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f5c:	d004      	beq.n	8007f68 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f66:	d113      	bne.n	8007f90 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7ff ff03 	bl	8007d80 <SPI_WaitFifoStateUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f84:	f043 0220 	orr.w	r2, r3, #32
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e000      	b.n	8007f92 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000058 	.word	0x20000058
 8007fa0:	165e9f81 	.word	0x165e9f81

08007fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fedf 	bl	8007d80 <SPI_WaitFifoStateUntilTimeout>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fcc:	f043 0220 	orr.w	r2, r3, #32
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e046      	b.n	8008066 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fd8:	4b25      	ldr	r3, [pc, #148]	@ (8008070 <SPI_EndRxTxTransaction+0xcc>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a25      	ldr	r2, [pc, #148]	@ (8008074 <SPI_EndRxTxTransaction+0xd0>)
 8007fde:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe2:	0d5b      	lsrs	r3, r3, #21
 8007fe4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007fe8:	fb02 f303 	mul.w	r3, r2, r3
 8007fec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ff6:	d112      	bne.n	800801e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2180      	movs	r1, #128	@ 0x80
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fe34 	bl	8007c70 <SPI_WaitFlagStateUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d016      	beq.n	800803c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e023      	b.n	8008066 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3b01      	subs	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008034:	2b80      	cmp	r3, #128	@ 0x80
 8008036:	d0f2      	beq.n	800801e <SPI_EndRxTxTransaction+0x7a>
 8008038:	e000      	b.n	800803c <SPI_EndRxTxTransaction+0x98>
        break;
 800803a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2200      	movs	r2, #0
 8008044:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fe99 	bl	8007d80 <SPI_WaitFifoStateUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008058:	f043 0220 	orr.w	r2, r3, #32
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e000      	b.n	8008066 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000058 	.word	0x20000058
 8008074:	165e9f81 	.word	0x165e9f81

08008078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e049      	b.n	800811e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fb fa24 	bl	80034ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 fa74 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e049      	b.n	80081cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f841 	bl	80081d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f000 fa1d 	bl	80085a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008202:	2302      	movs	r3, #2
 8008204:	e0ff      	b.n	8008406 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2b14      	cmp	r3, #20
 8008212:	f200 80f0 	bhi.w	80083f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008271 	.word	0x08008271
 8008220:	080083f7 	.word	0x080083f7
 8008224:	080083f7 	.word	0x080083f7
 8008228:	080083f7 	.word	0x080083f7
 800822c:	080082b1 	.word	0x080082b1
 8008230:	080083f7 	.word	0x080083f7
 8008234:	080083f7 	.word	0x080083f7
 8008238:	080083f7 	.word	0x080083f7
 800823c:	080082f3 	.word	0x080082f3
 8008240:	080083f7 	.word	0x080083f7
 8008244:	080083f7 	.word	0x080083f7
 8008248:	080083f7 	.word	0x080083f7
 800824c:	08008333 	.word	0x08008333
 8008250:	080083f7 	.word	0x080083f7
 8008254:	080083f7 	.word	0x080083f7
 8008258:	080083f7 	.word	0x080083f7
 800825c:	08008375 	.word	0x08008375
 8008260:	080083f7 	.word	0x080083f7
 8008264:	080083f7 	.word	0x080083f7
 8008268:	080083f7 	.word	0x080083f7
 800826c:	080083b5 	.word	0x080083b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fa34 	bl	80086e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0208 	orr.w	r2, r2, #8
 800828a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0204 	bic.w	r2, r2, #4
 800829a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6999      	ldr	r1, [r3, #24]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	619a      	str	r2, [r3, #24]
      break;
 80082ae:	e0a5      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fa86 	bl	80087c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699a      	ldr	r2, [r3, #24]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6999      	ldr	r1, [r3, #24]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	021a      	lsls	r2, r3, #8
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	619a      	str	r2, [r3, #24]
      break;
 80082f0:	e084      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fadd 	bl	80088b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0208 	orr.w	r2, r2, #8
 800830c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0204 	bic.w	r2, r2, #4
 800831c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69d9      	ldr	r1, [r3, #28]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	61da      	str	r2, [r3, #28]
      break;
 8008330:	e064      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	4618      	mov	r0, r3
 800833a:	f000 fb33 	bl	80089a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800834c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800835c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69d9      	ldr	r1, [r3, #28]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	021a      	lsls	r2, r3, #8
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	61da      	str	r2, [r3, #28]
      break;
 8008372:	e043      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fb6a 	bl	8008a54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0208 	orr.w	r2, r2, #8
 800838e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0204 	bic.w	r2, r2, #4
 800839e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083b2:	e023      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fb9c 	bl	8008af8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	021a      	lsls	r2, r3, #8
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083f4:	e002      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	75fb      	strb	r3, [r7, #23]
      break;
 80083fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop

08008410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_TIM_ConfigClockSource+0x1c>
 8008428:	2302      	movs	r3, #2
 800842a:	e0b4      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x186>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4b56      	ldr	r3, [pc, #344]	@ (80085a0 <HAL_TIM_ConfigClockSource+0x190>)
 8008448:	4013      	ands	r3, r2
 800844a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008464:	d03e      	beq.n	80084e4 <HAL_TIM_ConfigClockSource+0xd4>
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846a:	f200 8087 	bhi.w	800857c <HAL_TIM_ConfigClockSource+0x16c>
 800846e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008472:	f000 8086 	beq.w	8008582 <HAL_TIM_ConfigClockSource+0x172>
 8008476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847a:	d87f      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 800847c:	2b70      	cmp	r3, #112	@ 0x70
 800847e:	d01a      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0xa6>
 8008480:	2b70      	cmp	r3, #112	@ 0x70
 8008482:	d87b      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 8008484:	2b60      	cmp	r3, #96	@ 0x60
 8008486:	d050      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x11a>
 8008488:	2b60      	cmp	r3, #96	@ 0x60
 800848a:	d877      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 800848c:	2b50      	cmp	r3, #80	@ 0x50
 800848e:	d03c      	beq.n	800850a <HAL_TIM_ConfigClockSource+0xfa>
 8008490:	2b50      	cmp	r3, #80	@ 0x50
 8008492:	d873      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 8008494:	2b40      	cmp	r3, #64	@ 0x40
 8008496:	d058      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x13a>
 8008498:	2b40      	cmp	r3, #64	@ 0x40
 800849a:	d86f      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 800849c:	2b30      	cmp	r3, #48	@ 0x30
 800849e:	d064      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x15a>
 80084a0:	2b30      	cmp	r3, #48	@ 0x30
 80084a2:	d86b      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d060      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x15a>
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d867      	bhi.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d05c      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x15a>
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d05a      	beq.n	800856a <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	e062      	b.n	800857c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084c6:	f000 fbe5 	bl	8008c94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	609a      	str	r2, [r3, #8]
      break;
 80084e2:	e04f      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084f4:	f000 fbce 	bl	8008c94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008506:	609a      	str	r2, [r3, #8]
      break;
 8008508:	e03c      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fb42 	bl	8008ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2150      	movs	r1, #80	@ 0x50
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fb9b 	bl	8008c5e <TIM_ITRx_SetConfig>
      break;
 8008528:	e02c      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008536:	461a      	mov	r2, r3
 8008538:	f000 fb61 	bl	8008bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2160      	movs	r1, #96	@ 0x60
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fb8b 	bl	8008c5e <TIM_ITRx_SetConfig>
      break;
 8008548:	e01c      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008556:	461a      	mov	r2, r3
 8008558:	f000 fb22 	bl	8008ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2140      	movs	r1, #64	@ 0x40
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fb7b 	bl	8008c5e <TIM_ITRx_SetConfig>
      break;
 8008568:	e00c      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4619      	mov	r1, r3
 8008574:	4610      	mov	r0, r2
 8008576:	f000 fb72 	bl	8008c5e <TIM_ITRx_SetConfig>
      break;
 800857a:	e003      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
      break;
 8008580:	e000      	b.n	8008584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	fffeff88 	.word	0xfffeff88

080085a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a40      	ldr	r2, [pc, #256]	@ (80086b8 <TIM_Base_SetConfig+0x114>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d013      	beq.n	80085e4 <TIM_Base_SetConfig+0x40>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	d00f      	beq.n	80085e4 <TIM_Base_SetConfig+0x40>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a3d      	ldr	r2, [pc, #244]	@ (80086bc <TIM_Base_SetConfig+0x118>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a3c      	ldr	r2, [pc, #240]	@ (80086c0 <TIM_Base_SetConfig+0x11c>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3b      	ldr	r2, [pc, #236]	@ (80086c4 <TIM_Base_SetConfig+0x120>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a3a      	ldr	r2, [pc, #232]	@ (80086c8 <TIM_Base_SetConfig+0x124>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d108      	bne.n	80085f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2f      	ldr	r2, [pc, #188]	@ (80086b8 <TIM_Base_SetConfig+0x114>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d02b      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008604:	d027      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <TIM_Base_SetConfig+0x118>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d023      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a2b      	ldr	r2, [pc, #172]	@ (80086c0 <TIM_Base_SetConfig+0x11c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01f      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <TIM_Base_SetConfig+0x120>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d01b      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <TIM_Base_SetConfig+0x124>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d017      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a28      	ldr	r2, [pc, #160]	@ (80086cc <TIM_Base_SetConfig+0x128>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a27      	ldr	r2, [pc, #156]	@ (80086d0 <TIM_Base_SetConfig+0x12c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00f      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a26      	ldr	r2, [pc, #152]	@ (80086d4 <TIM_Base_SetConfig+0x130>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a25      	ldr	r2, [pc, #148]	@ (80086d8 <TIM_Base_SetConfig+0x134>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a24      	ldr	r2, [pc, #144]	@ (80086dc <TIM_Base_SetConfig+0x138>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a23      	ldr	r2, [pc, #140]	@ (80086e0 <TIM_Base_SetConfig+0x13c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d108      	bne.n	8008668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800865c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4313      	orrs	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a0a      	ldr	r2, [pc, #40]	@ (80086b8 <TIM_Base_SetConfig+0x114>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_Base_SetConfig+0xf8>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a0c      	ldr	r2, [pc, #48]	@ (80086c8 <TIM_Base_SetConfig+0x124>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d103      	bne.n	80086a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	691a      	ldr	r2, [r3, #16]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	615a      	str	r2, [r3, #20]
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40000c00 	.word	0x40000c00
 80086c8:	40010400 	.word	0x40010400
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40014400 	.word	0x40014400
 80086d4:	40014800 	.word	0x40014800
 80086d8:	40001800 	.word	0x40001800
 80086dc:	40001c00 	.word	0x40001c00
 80086e0:	40002000 	.word	0x40002000

080086e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f023 0201 	bic.w	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4b2b      	ldr	r3, [pc, #172]	@ (80087bc <TIM_OC1_SetConfig+0xd8>)
 8008710:	4013      	ands	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0302 	bic.w	r3, r3, #2
 800872c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a21      	ldr	r2, [pc, #132]	@ (80087c0 <TIM_OC1_SetConfig+0xdc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d003      	beq.n	8008748 <TIM_OC1_SetConfig+0x64>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a20      	ldr	r2, [pc, #128]	@ (80087c4 <TIM_OC1_SetConfig+0xe0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d10c      	bne.n	8008762 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0308 	bic.w	r3, r3, #8
 800874e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f023 0304 	bic.w	r3, r3, #4
 8008760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a16      	ldr	r2, [pc, #88]	@ (80087c0 <TIM_OC1_SetConfig+0xdc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_OC1_SetConfig+0x8e>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a15      	ldr	r2, [pc, #84]	@ (80087c4 <TIM_OC1_SetConfig+0xe0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d111      	bne.n	8008796 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	621a      	str	r2, [r3, #32]
}
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	fffeff8f 	.word	0xfffeff8f
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40010400 	.word	0x40010400

080087c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f023 0210 	bic.w	r2, r3, #16
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4b2e      	ldr	r3, [pc, #184]	@ (80088ac <TIM_OC2_SetConfig+0xe4>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4313      	orrs	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 0320 	bic.w	r3, r3, #32
 8008812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a23      	ldr	r2, [pc, #140]	@ (80088b0 <TIM_OC2_SetConfig+0xe8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d003      	beq.n	8008830 <TIM_OC2_SetConfig+0x68>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a22      	ldr	r2, [pc, #136]	@ (80088b4 <TIM_OC2_SetConfig+0xec>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10d      	bne.n	800884c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4313      	orrs	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800884a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a18      	ldr	r2, [pc, #96]	@ (80088b0 <TIM_OC2_SetConfig+0xe8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC2_SetConfig+0x94>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a17      	ldr	r2, [pc, #92]	@ (80088b4 <TIM_OC2_SetConfig+0xec>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d113      	bne.n	8008884 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800886a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	feff8fff 	.word	0xfeff8fff
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40010400 	.word	0x40010400

080088b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008998 <TIM_OC3_SetConfig+0xe0>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0303 	bic.w	r3, r3, #3
 80088ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	021b      	lsls	r3, r3, #8
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a22      	ldr	r2, [pc, #136]	@ (800899c <TIM_OC3_SetConfig+0xe4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d003      	beq.n	800891e <TIM_OC3_SetConfig+0x66>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <TIM_OC3_SetConfig+0xe8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d10d      	bne.n	800893a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a17      	ldr	r2, [pc, #92]	@ (800899c <TIM_OC3_SetConfig+0xe4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_OC3_SetConfig+0x92>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a16      	ldr	r2, [pc, #88]	@ (80089a0 <TIM_OC3_SetConfig+0xe8>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d113      	bne.n	8008972 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4313      	orrs	r3, r2
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	fffeff8f 	.word	0xfffeff8f
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400

080089a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <TIM_OC4_SetConfig+0xa4>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a13      	ldr	r2, [pc, #76]	@ (8008a4c <TIM_OC4_SetConfig+0xa8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_OC4_SetConfig+0x68>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a12      	ldr	r2, [pc, #72]	@ (8008a50 <TIM_OC4_SetConfig+0xac>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d109      	bne.n	8008a20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	019b      	lsls	r3, r3, #6
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	feff8fff 	.word	0xfeff8fff
 8008a4c:	40010000 	.word	0x40010000
 8008a50:	40010400 	.word	0x40010400

08008a54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aec <TIM_OC5_SetConfig+0x98>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a12      	ldr	r2, [pc, #72]	@ (8008af0 <TIM_OC5_SetConfig+0x9c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC5_SetConfig+0x5e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a11      	ldr	r2, [pc, #68]	@ (8008af4 <TIM_OC5_SetConfig+0xa0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d109      	bne.n	8008ac6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	621a      	str	r2, [r3, #32]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	fffeff8f 	.word	0xfffeff8f
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400

08008af8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4b1c      	ldr	r3, [pc, #112]	@ (8008b94 <TIM_OC6_SetConfig+0x9c>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	051b      	lsls	r3, r3, #20
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a13      	ldr	r2, [pc, #76]	@ (8008b98 <TIM_OC6_SetConfig+0xa0>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC6_SetConfig+0x60>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <TIM_OC6_SetConfig+0xa4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d109      	bne.n	8008b6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	feff8fff 	.word	0xfeff8fff
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40010400 	.word	0x40010400

08008ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0201 	bic.w	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f023 030a 	bic.w	r3, r3, #10
 8008bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	621a      	str	r2, [r3, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b087      	sub	sp, #28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f023 0210 	bic.w	r2, r3, #16
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	031b      	lsls	r3, r3, #12
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b085      	sub	sp, #20
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f043 0307 	orr.w	r3, r3, #7
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	609a      	str	r2, [r3, #8]
}
 8008c88:	bf00      	nop
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	021a      	lsls	r2, r3, #8
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	609a      	str	r2, [r3, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	371c      	adds	r7, #28
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d101      	bne.n	8008cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e06d      	b.n	8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a30      	ldr	r2, [pc, #192]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d004      	beq.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d108      	bne.n	8008d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a20      	ldr	r2, [pc, #128]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d022      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5e:	d01d      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a1d      	ldr	r2, [pc, #116]	@ (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d018      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d013      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1a      	ldr	r2, [pc, #104]	@ (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d00e      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a15      	ldr	r2, [pc, #84]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d009      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	@ (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d004      	beq.n	8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d10c      	bne.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	40000800 	.word	0x40000800
 8008de4:	40000c00 	.word	0x40000c00
 8008de8:	40014000 	.word	0x40014000
 8008dec:	40001800 	.word	0x40001800

08008df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e040      	b.n	8008e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fa fc02 	bl	800361c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2224      	movs	r2, #36	@ 0x24
 8008e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0201 	bic.w	r2, r2, #1
 8008e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fbe6 	bl	8009600 <UART_SetConfig>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d101      	bne.n	8008e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e022      	b.n	8008e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fe3e 	bl	8009ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689a      	ldr	r2, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fec5 	bl	8009c0c <UART_CheckIdleState>
 8008e82:	4603      	mov	r3, r0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	@ 0x28
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d171      	bne.n	8008f88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <HAL_UART_Transmit+0x24>
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e06a      	b.n	8008f8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2221      	movs	r2, #33	@ 0x21
 8008ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ec2:	f7fa fdef 	bl	8003aa4 <HAL_GetTick>
 8008ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	88fa      	ldrh	r2, [r7, #6]
 8008ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee0:	d108      	bne.n	8008ef4 <HAL_UART_Transmit+0x68>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d104      	bne.n	8008ef4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	e003      	b.n	8008efc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008efc:	e02c      	b.n	8008f58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2180      	movs	r1, #128	@ 0x80
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 feb6 	bl	8009c7a <UART_WaitOnFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e038      	b.n	8008f8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10b      	bne.n	8008f36 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	3302      	adds	r3, #2
 8008f32:	61bb      	str	r3, [r7, #24]
 8008f34:	e007      	b.n	8008f46 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	3301      	adds	r3, #1
 8008f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1cc      	bne.n	8008efe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2140      	movs	r1, #64	@ 0x40
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 fe83 	bl	8009c7a <UART_WaitOnFlagUntilTimeout>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e005      	b.n	8008f8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e000      	b.n	8008f8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b08a      	sub	sp, #40	@ 0x28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa6:	2b20      	cmp	r3, #32
 8008fa8:	d132      	bne.n	8009010 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <HAL_UART_Receive_IT+0x24>
 8008fb0:	88fb      	ldrh	r3, [r7, #6]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e02b      	b.n	8009012 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d018      	beq.n	8009000 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	613b      	str	r3, [r7, #16]
   return(result);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	623b      	str	r3, [r7, #32]
 8008fee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	69f9      	ldr	r1, [r7, #28]
 8008ff2:	6a3a      	ldr	r2, [r7, #32]
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e6      	bne.n	8008fce <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	461a      	mov	r2, r3
 8009004:	68b9      	ldr	r1, [r7, #8]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 fefe 	bl	8009e08 <UART_Start_Receive_IT>
 800900c:	4603      	mov	r3, r0
 800900e:	e000      	b.n	8009012 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009010:	2302      	movs	r3, #2
  }
}
 8009012:	4618      	mov	r0, r3
 8009014:	3728      	adds	r7, #40	@ 0x28
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
	...

0800901c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b0ba      	sub	sp, #232	@ 0xe8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009046:	f640 030f 	movw	r3, #2063	@ 0x80f
 800904a:	4013      	ands	r3, r2
 800904c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d115      	bne.n	8009084 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00f      	beq.n	8009084 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	d009      	beq.n	8009084 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 8297 	beq.w	80095a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	4798      	blx	r3
      }
      return;
 8009082:	e291      	b.n	80095a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 8117 	beq.w	80092bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800908e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d106      	bne.n	80090a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800909a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800909e:	4b85      	ldr	r3, [pc, #532]	@ (80092b4 <HAL_UART_IRQHandler+0x298>)
 80090a0:	4013      	ands	r3, r2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 810a 	beq.w	80092bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d011      	beq.n	80090d8 <HAL_UART_IRQHandler+0xbc>
 80090b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2201      	movs	r2, #1
 80090c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ce:	f043 0201 	orr.w	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d011      	beq.n	8009108 <HAL_UART_IRQHandler+0xec>
 80090e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2202      	movs	r2, #2
 80090f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090fe:	f043 0204 	orr.w	r2, r3, #4
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d011      	beq.n	8009138 <HAL_UART_IRQHandler+0x11c>
 8009114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2204      	movs	r2, #4
 8009126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800912e:	f043 0202 	orr.w	r2, r3, #2
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d017      	beq.n	8009174 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009148:	f003 0320 	and.w	r3, r3, #32
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2208      	movs	r2, #8
 8009162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800916a:	f043 0208 	orr.w	r2, r3, #8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800917c:	2b00      	cmp	r3, #0
 800917e:	d012      	beq.n	80091a6 <HAL_UART_IRQHandler+0x18a>
 8009180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009184:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00c      	beq.n	80091a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800919c:	f043 0220 	orr.w	r2, r3, #32
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 81fd 	beq.w	80095ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80091b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00d      	beq.n	80091da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c2:	f003 0320 	and.w	r3, r3, #32
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d007      	beq.n	80091da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ee:	2b40      	cmp	r3, #64	@ 0x40
 80091f0:	d005      	beq.n	80091fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80091f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d04f      	beq.n	800929e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fec8 	bl	8009f94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800920e:	2b40      	cmp	r3, #64	@ 0x40
 8009210:	d141      	bne.n	8009296 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800922c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800923e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009242:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800924a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1d9      	bne.n	8009212 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009262:	2b00      	cmp	r3, #0
 8009264:	d013      	beq.n	800928e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800926a:	4a13      	ldr	r2, [pc, #76]	@ (80092b8 <HAL_UART_IRQHandler+0x29c>)
 800926c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009272:	4618      	mov	r0, r3
 8009274:	f7fa fdc7 	bl	8003e06 <HAL_DMA_Abort_IT>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d017      	beq.n	80092ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928c:	e00f      	b.n	80092ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f9a0 	bl	80095d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	e00b      	b.n	80092ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f99c 	bl	80095d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	e007      	b.n	80092ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f998 	bl	80095d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80092ac:	e17e      	b.n	80095ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ae:	bf00      	nop
    return;
 80092b0:	e17c      	b.n	80095ac <HAL_UART_IRQHandler+0x590>
 80092b2:	bf00      	nop
 80092b4:	04000120 	.word	0x04000120
 80092b8:	0800a05d 	.word	0x0800a05d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	f040 814c 	bne.w	800955e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8145 	beq.w	800955e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 813e 	beq.w	800955e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2210      	movs	r2, #16
 80092e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f4:	2b40      	cmp	r3, #64	@ 0x40
 80092f6:	f040 80b6 	bne.w	8009466 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8150 	beq.w	80095b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800931a:	429a      	cmp	r2, r3
 800931c:	f080 8148 	bcs.w	80095b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009326:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932e:	69db      	ldr	r3, [r3, #28]
 8009330:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009334:	f000 8086 	beq.w	8009444 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800934c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009366:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800936e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800937a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1da      	bne.n	8009338 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3308      	adds	r3, #8
 80093a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e1      	bne.n	8009382 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	3308      	adds	r3, #8
 80093de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e3      	bne.n	80093be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009414:	f023 0310 	bic.w	r3, r3, #16
 8009418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009426:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009428:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800942c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e4      	bne.n	8009404 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943e:	4618      	mov	r0, r3
 8009440:	f7fa fc71 	bl	8003d26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009456:	b29b      	uxth	r3, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f8c2 	bl	80095e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009464:	e0a4      	b.n	80095b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009472:	b29b      	uxth	r3, r3
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8096 	beq.w	80095b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 8091 	beq.w	80095b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80094b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e4      	bne.n	8009492 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3308      	adds	r3, #8
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	623b      	str	r3, [r7, #32]
   return(result);
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80094ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e3      	bne.n	80094c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2220      	movs	r2, #32
 8009504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	60fb      	str	r3, [r7, #12]
   return(result);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f023 0310 	bic.w	r3, r3, #16
 8009528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	69b9      	ldr	r1, [r7, #24]
 800953c:	69fa      	ldr	r2, [r7, #28]
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	617b      	str	r3, [r7, #20]
   return(result);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e4      	bne.n	8009514 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2202      	movs	r2, #2
 800954e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f846 	bl	80095e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800955c:	e02a      	b.n	80095b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800955e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00e      	beq.n	8009588 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800956a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009572:	2b00      	cmp	r3, #0
 8009574:	d008      	beq.n	8009588 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01c      	beq.n	80095b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
    }
    return;
 8009586:	e017      	b.n	80095b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d012      	beq.n	80095ba <HAL_UART_IRQHandler+0x59e>
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fd71 	bl	800a088 <UART_EndTransmit_IT>
    return;
 80095a6:	e008      	b.n	80095ba <HAL_UART_IRQHandler+0x59e>
      return;
 80095a8:	bf00      	nop
 80095aa:	e006      	b.n	80095ba <HAL_UART_IRQHandler+0x59e>
    return;
 80095ac:	bf00      	nop
 80095ae:	e004      	b.n	80095ba <HAL_UART_IRQHandler+0x59e>
      return;
 80095b0:	bf00      	nop
 80095b2:	e002      	b.n	80095ba <HAL_UART_IRQHandler+0x59e>
      return;
 80095b4:	bf00      	nop
 80095b6:	e000      	b.n	80095ba <HAL_UART_IRQHandler+0x59e>
    return;
 80095b8:	bf00      	nop
  }

}
 80095ba:	37e8      	adds	r7, #232	@ 0xe8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	431a      	orrs	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	4313      	orrs	r3, r2
 8009622:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	4ba6      	ldr	r3, [pc, #664]	@ (80098c4 <UART_SetConfig+0x2c4>)
 800962c:	4013      	ands	r3, r2
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	430b      	orrs	r3, r1
 8009636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	430a      	orrs	r2, r1
 8009670:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a94      	ldr	r2, [pc, #592]	@ (80098c8 <UART_SetConfig+0x2c8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d120      	bne.n	80096be <UART_SetConfig+0xbe>
 800967c:	4b93      	ldr	r3, [pc, #588]	@ (80098cc <UART_SetConfig+0x2cc>)
 800967e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	2b03      	cmp	r3, #3
 8009688:	d816      	bhi.n	80096b8 <UART_SetConfig+0xb8>
 800968a:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <UART_SetConfig+0x90>)
 800968c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009690:	080096a1 	.word	0x080096a1
 8009694:	080096ad 	.word	0x080096ad
 8009698:	080096a7 	.word	0x080096a7
 800969c:	080096b3 	.word	0x080096b3
 80096a0:	2301      	movs	r3, #1
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e150      	b.n	8009948 <UART_SetConfig+0x348>
 80096a6:	2302      	movs	r3, #2
 80096a8:	77fb      	strb	r3, [r7, #31]
 80096aa:	e14d      	b.n	8009948 <UART_SetConfig+0x348>
 80096ac:	2304      	movs	r3, #4
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e14a      	b.n	8009948 <UART_SetConfig+0x348>
 80096b2:	2308      	movs	r3, #8
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e147      	b.n	8009948 <UART_SetConfig+0x348>
 80096b8:	2310      	movs	r3, #16
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e144      	b.n	8009948 <UART_SetConfig+0x348>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a83      	ldr	r2, [pc, #524]	@ (80098d0 <UART_SetConfig+0x2d0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d132      	bne.n	800972e <UART_SetConfig+0x12e>
 80096c8:	4b80      	ldr	r3, [pc, #512]	@ (80098cc <UART_SetConfig+0x2cc>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ce:	f003 030c 	and.w	r3, r3, #12
 80096d2:	2b0c      	cmp	r3, #12
 80096d4:	d828      	bhi.n	8009728 <UART_SetConfig+0x128>
 80096d6:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <UART_SetConfig+0xdc>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	08009711 	.word	0x08009711
 80096e0:	08009729 	.word	0x08009729
 80096e4:	08009729 	.word	0x08009729
 80096e8:	08009729 	.word	0x08009729
 80096ec:	0800971d 	.word	0x0800971d
 80096f0:	08009729 	.word	0x08009729
 80096f4:	08009729 	.word	0x08009729
 80096f8:	08009729 	.word	0x08009729
 80096fc:	08009717 	.word	0x08009717
 8009700:	08009729 	.word	0x08009729
 8009704:	08009729 	.word	0x08009729
 8009708:	08009729 	.word	0x08009729
 800970c:	08009723 	.word	0x08009723
 8009710:	2300      	movs	r3, #0
 8009712:	77fb      	strb	r3, [r7, #31]
 8009714:	e118      	b.n	8009948 <UART_SetConfig+0x348>
 8009716:	2302      	movs	r3, #2
 8009718:	77fb      	strb	r3, [r7, #31]
 800971a:	e115      	b.n	8009948 <UART_SetConfig+0x348>
 800971c:	2304      	movs	r3, #4
 800971e:	77fb      	strb	r3, [r7, #31]
 8009720:	e112      	b.n	8009948 <UART_SetConfig+0x348>
 8009722:	2308      	movs	r3, #8
 8009724:	77fb      	strb	r3, [r7, #31]
 8009726:	e10f      	b.n	8009948 <UART_SetConfig+0x348>
 8009728:	2310      	movs	r3, #16
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e10c      	b.n	8009948 <UART_SetConfig+0x348>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a68      	ldr	r2, [pc, #416]	@ (80098d4 <UART_SetConfig+0x2d4>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d120      	bne.n	800977a <UART_SetConfig+0x17a>
 8009738:	4b64      	ldr	r3, [pc, #400]	@ (80098cc <UART_SetConfig+0x2cc>)
 800973a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800973e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009742:	2b30      	cmp	r3, #48	@ 0x30
 8009744:	d013      	beq.n	800976e <UART_SetConfig+0x16e>
 8009746:	2b30      	cmp	r3, #48	@ 0x30
 8009748:	d814      	bhi.n	8009774 <UART_SetConfig+0x174>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d009      	beq.n	8009762 <UART_SetConfig+0x162>
 800974e:	2b20      	cmp	r3, #32
 8009750:	d810      	bhi.n	8009774 <UART_SetConfig+0x174>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <UART_SetConfig+0x15c>
 8009756:	2b10      	cmp	r3, #16
 8009758:	d006      	beq.n	8009768 <UART_SetConfig+0x168>
 800975a:	e00b      	b.n	8009774 <UART_SetConfig+0x174>
 800975c:	2300      	movs	r3, #0
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	e0f2      	b.n	8009948 <UART_SetConfig+0x348>
 8009762:	2302      	movs	r3, #2
 8009764:	77fb      	strb	r3, [r7, #31]
 8009766:	e0ef      	b.n	8009948 <UART_SetConfig+0x348>
 8009768:	2304      	movs	r3, #4
 800976a:	77fb      	strb	r3, [r7, #31]
 800976c:	e0ec      	b.n	8009948 <UART_SetConfig+0x348>
 800976e:	2308      	movs	r3, #8
 8009770:	77fb      	strb	r3, [r7, #31]
 8009772:	e0e9      	b.n	8009948 <UART_SetConfig+0x348>
 8009774:	2310      	movs	r3, #16
 8009776:	77fb      	strb	r3, [r7, #31]
 8009778:	e0e6      	b.n	8009948 <UART_SetConfig+0x348>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a56      	ldr	r2, [pc, #344]	@ (80098d8 <UART_SetConfig+0x2d8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d120      	bne.n	80097c6 <UART_SetConfig+0x1c6>
 8009784:	4b51      	ldr	r3, [pc, #324]	@ (80098cc <UART_SetConfig+0x2cc>)
 8009786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800978a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800978e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009790:	d013      	beq.n	80097ba <UART_SetConfig+0x1ba>
 8009792:	2bc0      	cmp	r3, #192	@ 0xc0
 8009794:	d814      	bhi.n	80097c0 <UART_SetConfig+0x1c0>
 8009796:	2b80      	cmp	r3, #128	@ 0x80
 8009798:	d009      	beq.n	80097ae <UART_SetConfig+0x1ae>
 800979a:	2b80      	cmp	r3, #128	@ 0x80
 800979c:	d810      	bhi.n	80097c0 <UART_SetConfig+0x1c0>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <UART_SetConfig+0x1a8>
 80097a2:	2b40      	cmp	r3, #64	@ 0x40
 80097a4:	d006      	beq.n	80097b4 <UART_SetConfig+0x1b4>
 80097a6:	e00b      	b.n	80097c0 <UART_SetConfig+0x1c0>
 80097a8:	2300      	movs	r3, #0
 80097aa:	77fb      	strb	r3, [r7, #31]
 80097ac:	e0cc      	b.n	8009948 <UART_SetConfig+0x348>
 80097ae:	2302      	movs	r3, #2
 80097b0:	77fb      	strb	r3, [r7, #31]
 80097b2:	e0c9      	b.n	8009948 <UART_SetConfig+0x348>
 80097b4:	2304      	movs	r3, #4
 80097b6:	77fb      	strb	r3, [r7, #31]
 80097b8:	e0c6      	b.n	8009948 <UART_SetConfig+0x348>
 80097ba:	2308      	movs	r3, #8
 80097bc:	77fb      	strb	r3, [r7, #31]
 80097be:	e0c3      	b.n	8009948 <UART_SetConfig+0x348>
 80097c0:	2310      	movs	r3, #16
 80097c2:	77fb      	strb	r3, [r7, #31]
 80097c4:	e0c0      	b.n	8009948 <UART_SetConfig+0x348>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a44      	ldr	r2, [pc, #272]	@ (80098dc <UART_SetConfig+0x2dc>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d125      	bne.n	800981c <UART_SetConfig+0x21c>
 80097d0:	4b3e      	ldr	r3, [pc, #248]	@ (80098cc <UART_SetConfig+0x2cc>)
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097de:	d017      	beq.n	8009810 <UART_SetConfig+0x210>
 80097e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097e4:	d817      	bhi.n	8009816 <UART_SetConfig+0x216>
 80097e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ea:	d00b      	beq.n	8009804 <UART_SetConfig+0x204>
 80097ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f0:	d811      	bhi.n	8009816 <UART_SetConfig+0x216>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <UART_SetConfig+0x1fe>
 80097f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fa:	d006      	beq.n	800980a <UART_SetConfig+0x20a>
 80097fc:	e00b      	b.n	8009816 <UART_SetConfig+0x216>
 80097fe:	2300      	movs	r3, #0
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e0a1      	b.n	8009948 <UART_SetConfig+0x348>
 8009804:	2302      	movs	r3, #2
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e09e      	b.n	8009948 <UART_SetConfig+0x348>
 800980a:	2304      	movs	r3, #4
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e09b      	b.n	8009948 <UART_SetConfig+0x348>
 8009810:	2308      	movs	r3, #8
 8009812:	77fb      	strb	r3, [r7, #31]
 8009814:	e098      	b.n	8009948 <UART_SetConfig+0x348>
 8009816:	2310      	movs	r3, #16
 8009818:	77fb      	strb	r3, [r7, #31]
 800981a:	e095      	b.n	8009948 <UART_SetConfig+0x348>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a2f      	ldr	r2, [pc, #188]	@ (80098e0 <UART_SetConfig+0x2e0>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d125      	bne.n	8009872 <UART_SetConfig+0x272>
 8009826:	4b29      	ldr	r3, [pc, #164]	@ (80098cc <UART_SetConfig+0x2cc>)
 8009828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009830:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009834:	d017      	beq.n	8009866 <UART_SetConfig+0x266>
 8009836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800983a:	d817      	bhi.n	800986c <UART_SetConfig+0x26c>
 800983c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009840:	d00b      	beq.n	800985a <UART_SetConfig+0x25a>
 8009842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009846:	d811      	bhi.n	800986c <UART_SetConfig+0x26c>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d003      	beq.n	8009854 <UART_SetConfig+0x254>
 800984c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009850:	d006      	beq.n	8009860 <UART_SetConfig+0x260>
 8009852:	e00b      	b.n	800986c <UART_SetConfig+0x26c>
 8009854:	2301      	movs	r3, #1
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e076      	b.n	8009948 <UART_SetConfig+0x348>
 800985a:	2302      	movs	r3, #2
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e073      	b.n	8009948 <UART_SetConfig+0x348>
 8009860:	2304      	movs	r3, #4
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e070      	b.n	8009948 <UART_SetConfig+0x348>
 8009866:	2308      	movs	r3, #8
 8009868:	77fb      	strb	r3, [r7, #31]
 800986a:	e06d      	b.n	8009948 <UART_SetConfig+0x348>
 800986c:	2310      	movs	r3, #16
 800986e:	77fb      	strb	r3, [r7, #31]
 8009870:	e06a      	b.n	8009948 <UART_SetConfig+0x348>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a1b      	ldr	r2, [pc, #108]	@ (80098e4 <UART_SetConfig+0x2e4>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d138      	bne.n	80098ee <UART_SetConfig+0x2ee>
 800987c:	4b13      	ldr	r3, [pc, #76]	@ (80098cc <UART_SetConfig+0x2cc>)
 800987e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009882:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009886:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800988a:	d017      	beq.n	80098bc <UART_SetConfig+0x2bc>
 800988c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009890:	d82a      	bhi.n	80098e8 <UART_SetConfig+0x2e8>
 8009892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009896:	d00b      	beq.n	80098b0 <UART_SetConfig+0x2b0>
 8009898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800989c:	d824      	bhi.n	80098e8 <UART_SetConfig+0x2e8>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <UART_SetConfig+0x2aa>
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a6:	d006      	beq.n	80098b6 <UART_SetConfig+0x2b6>
 80098a8:	e01e      	b.n	80098e8 <UART_SetConfig+0x2e8>
 80098aa:	2300      	movs	r3, #0
 80098ac:	77fb      	strb	r3, [r7, #31]
 80098ae:	e04b      	b.n	8009948 <UART_SetConfig+0x348>
 80098b0:	2302      	movs	r3, #2
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e048      	b.n	8009948 <UART_SetConfig+0x348>
 80098b6:	2304      	movs	r3, #4
 80098b8:	77fb      	strb	r3, [r7, #31]
 80098ba:	e045      	b.n	8009948 <UART_SetConfig+0x348>
 80098bc:	2308      	movs	r3, #8
 80098be:	77fb      	strb	r3, [r7, #31]
 80098c0:	e042      	b.n	8009948 <UART_SetConfig+0x348>
 80098c2:	bf00      	nop
 80098c4:	efff69f3 	.word	0xefff69f3
 80098c8:	40011000 	.word	0x40011000
 80098cc:	40023800 	.word	0x40023800
 80098d0:	40004400 	.word	0x40004400
 80098d4:	40004800 	.word	0x40004800
 80098d8:	40004c00 	.word	0x40004c00
 80098dc:	40005000 	.word	0x40005000
 80098e0:	40011400 	.word	0x40011400
 80098e4:	40007800 	.word	0x40007800
 80098e8:	2310      	movs	r3, #16
 80098ea:	77fb      	strb	r3, [r7, #31]
 80098ec:	e02c      	b.n	8009948 <UART_SetConfig+0x348>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a72      	ldr	r2, [pc, #456]	@ (8009abc <UART_SetConfig+0x4bc>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d125      	bne.n	8009944 <UART_SetConfig+0x344>
 80098f8:	4b71      	ldr	r3, [pc, #452]	@ (8009ac0 <UART_SetConfig+0x4c0>)
 80098fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098fe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009902:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009906:	d017      	beq.n	8009938 <UART_SetConfig+0x338>
 8009908:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800990c:	d817      	bhi.n	800993e <UART_SetConfig+0x33e>
 800990e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009912:	d00b      	beq.n	800992c <UART_SetConfig+0x32c>
 8009914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009918:	d811      	bhi.n	800993e <UART_SetConfig+0x33e>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <UART_SetConfig+0x326>
 800991e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009922:	d006      	beq.n	8009932 <UART_SetConfig+0x332>
 8009924:	e00b      	b.n	800993e <UART_SetConfig+0x33e>
 8009926:	2300      	movs	r3, #0
 8009928:	77fb      	strb	r3, [r7, #31]
 800992a:	e00d      	b.n	8009948 <UART_SetConfig+0x348>
 800992c:	2302      	movs	r3, #2
 800992e:	77fb      	strb	r3, [r7, #31]
 8009930:	e00a      	b.n	8009948 <UART_SetConfig+0x348>
 8009932:	2304      	movs	r3, #4
 8009934:	77fb      	strb	r3, [r7, #31]
 8009936:	e007      	b.n	8009948 <UART_SetConfig+0x348>
 8009938:	2308      	movs	r3, #8
 800993a:	77fb      	strb	r3, [r7, #31]
 800993c:	e004      	b.n	8009948 <UART_SetConfig+0x348>
 800993e:	2310      	movs	r3, #16
 8009940:	77fb      	strb	r3, [r7, #31]
 8009942:	e001      	b.n	8009948 <UART_SetConfig+0x348>
 8009944:	2310      	movs	r3, #16
 8009946:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009950:	d15b      	bne.n	8009a0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009952:	7ffb      	ldrb	r3, [r7, #31]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d828      	bhi.n	80099aa <UART_SetConfig+0x3aa>
 8009958:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <UART_SetConfig+0x360>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009985 	.word	0x08009985
 8009964:	0800998d 	.word	0x0800998d
 8009968:	08009995 	.word	0x08009995
 800996c:	080099ab 	.word	0x080099ab
 8009970:	0800999b 	.word	0x0800999b
 8009974:	080099ab 	.word	0x080099ab
 8009978:	080099ab 	.word	0x080099ab
 800997c:	080099ab 	.word	0x080099ab
 8009980:	080099a3 	.word	0x080099a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009984:	f7fd f800 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 8009988:	61b8      	str	r0, [r7, #24]
        break;
 800998a:	e013      	b.n	80099b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800998c:	f7fd f810 	bl	80069b0 <HAL_RCC_GetPCLK2Freq>
 8009990:	61b8      	str	r0, [r7, #24]
        break;
 8009992:	e00f      	b.n	80099b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009994:	4b4b      	ldr	r3, [pc, #300]	@ (8009ac4 <UART_SetConfig+0x4c4>)
 8009996:	61bb      	str	r3, [r7, #24]
        break;
 8009998:	e00c      	b.n	80099b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800999a:	f7fc fee3 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 800999e:	61b8      	str	r0, [r7, #24]
        break;
 80099a0:	e008      	b.n	80099b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099a6:	61bb      	str	r3, [r7, #24]
        break;
 80099a8:	e004      	b.n	80099b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	77bb      	strb	r3, [r7, #30]
        break;
 80099b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d074      	beq.n	8009aa4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	005a      	lsls	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	085b      	lsrs	r3, r3, #1
 80099c4:	441a      	add	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2b0f      	cmp	r3, #15
 80099d4:	d916      	bls.n	8009a04 <UART_SetConfig+0x404>
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099dc:	d212      	bcs.n	8009a04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f023 030f 	bic.w	r3, r3, #15
 80099e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	085b      	lsrs	r3, r3, #1
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	89fb      	ldrh	r3, [r7, #14]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	89fa      	ldrh	r2, [r7, #14]
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	e04f      	b.n	8009aa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	77bb      	strb	r3, [r7, #30]
 8009a08:	e04c      	b.n	8009aa4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d828      	bhi.n	8009a62 <UART_SetConfig+0x462>
 8009a10:	a201      	add	r2, pc, #4	@ (adr r2, 8009a18 <UART_SetConfig+0x418>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a3d 	.word	0x08009a3d
 8009a1c:	08009a45 	.word	0x08009a45
 8009a20:	08009a4d 	.word	0x08009a4d
 8009a24:	08009a63 	.word	0x08009a63
 8009a28:	08009a53 	.word	0x08009a53
 8009a2c:	08009a63 	.word	0x08009a63
 8009a30:	08009a63 	.word	0x08009a63
 8009a34:	08009a63 	.word	0x08009a63
 8009a38:	08009a5b 	.word	0x08009a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a3c:	f7fc ffa4 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 8009a40:	61b8      	str	r0, [r7, #24]
        break;
 8009a42:	e013      	b.n	8009a6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a44:	f7fc ffb4 	bl	80069b0 <HAL_RCC_GetPCLK2Freq>
 8009a48:	61b8      	str	r0, [r7, #24]
        break;
 8009a4a:	e00f      	b.n	8009a6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac4 <UART_SetConfig+0x4c4>)
 8009a4e:	61bb      	str	r3, [r7, #24]
        break;
 8009a50:	e00c      	b.n	8009a6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a52:	f7fc fe87 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 8009a56:	61b8      	str	r0, [r7, #24]
        break;
 8009a58:	e008      	b.n	8009a6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a5e:	61bb      	str	r3, [r7, #24]
        break;
 8009a60:	e004      	b.n	8009a6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	77bb      	strb	r3, [r7, #30]
        break;
 8009a6a:	bf00      	nop
    }

    if (pclk != 0U)
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d018      	beq.n	8009aa4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	085a      	lsrs	r2, r3, #1
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2b0f      	cmp	r3, #15
 8009a8a:	d909      	bls.n	8009aa0 <UART_SetConfig+0x4a0>
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a92:	d205      	bcs.n	8009aa0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	e001      	b.n	8009aa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ab0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3720      	adds	r7, #32
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40007c00 	.word	0x40007c00
 8009ac0:	40023800 	.word	0x40023800
 8009ac4:	00f42400 	.word	0x00f42400

08009ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad4:	f003 0301 	and.w	r3, r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00a      	beq.n	8009af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	f003 0302 	and.w	r3, r3, #2
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00a      	beq.n	8009b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3a:	f003 0308 	and.w	r3, r3, #8
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5c:	f003 0310 	and.w	r3, r3, #16
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00a      	beq.n	8009b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00a      	beq.n	8009b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01a      	beq.n	8009bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bc6:	d10a      	bne.n	8009bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	605a      	str	r2, [r3, #4]
  }
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c1c:	f7f9 ff42 	bl	8003aa4 <HAL_GetTick>
 8009c20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0308 	and.w	r3, r3, #8
 8009c2c:	2b08      	cmp	r3, #8
 8009c2e:	d10e      	bne.n	8009c4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f81b 	bl	8009c7a <UART_WaitOnFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e011      	b.n	8009c72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b09c      	sub	sp, #112	@ 0x70
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c8a:	e0a7      	b.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c92:	f000 80a3 	beq.w	8009ddc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c96:	f7f9 ff05 	bl	8003aa4 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d302      	bcc.n	8009cac <UART_WaitOnFlagUntilTimeout+0x32>
 8009ca6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d13f      	bne.n	8009d2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cbc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009cc0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ccc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009cd0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e6      	bne.n	8009cac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	3308      	adds	r3, #8
 8009ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf0:	f023 0301 	bic.w	r3, r3, #1
 8009cf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3308      	adds	r3, #8
 8009cfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cfe:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009d00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e5      	bne.n	8009cde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e068      	b.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d050      	beq.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d48:	d148      	bne.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d74:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e6      	bne.n	8009d54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	613b      	str	r3, [r7, #16]
   return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	3308      	adds	r3, #8
 8009da4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009da6:	623a      	str	r2, [r7, #32]
 8009da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	69f9      	ldr	r1, [r7, #28]
 8009dac:	6a3a      	ldr	r2, [r7, #32]
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e010      	b.n	8009dfe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69da      	ldr	r2, [r3, #28]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4013      	ands	r3, r2
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	bf0c      	ite	eq
 8009dec:	2301      	moveq	r3, #1
 8009dee:	2300      	movne	r3, #0
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	f43f af48 	beq.w	8009c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3770      	adds	r7, #112	@ 0x70
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b097      	sub	sp, #92	@ 0x5c
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	88fa      	ldrh	r2, [r7, #6]
 8009e20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e3a:	d10e      	bne.n	8009e5a <UART_Start_Receive_IT+0x52>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <UART_Start_Receive_IT+0x48>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e4e:	e02d      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	22ff      	movs	r2, #255	@ 0xff
 8009e54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e58:	e028      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10d      	bne.n	8009e7e <UART_Start_Receive_IT+0x76>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <UART_Start_Receive_IT+0x6c>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	@ 0xff
 8009e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e72:	e01b      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	227f      	movs	r2, #127	@ 0x7f
 8009e78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e7c:	e016      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e86:	d10d      	bne.n	8009ea4 <UART_Start_Receive_IT+0x9c>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <UART_Start_Receive_IT+0x92>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	227f      	movs	r2, #127	@ 0x7f
 8009e94:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e98:	e008      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	223f      	movs	r2, #63	@ 0x3f
 8009e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009ea2:	e003      	b.n	8009eac <UART_Start_Receive_IT+0xa4>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2222      	movs	r2, #34	@ 0x22
 8009eb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec6:	e853 3f00 	ldrex	r3, [r3]
 8009eca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ece:	f043 0301 	orr.w	r3, r3, #1
 8009ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3308      	adds	r3, #8
 8009eda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009edc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009ede:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e5      	bne.n	8009ebc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ef8:	d107      	bne.n	8009f0a <UART_Start_Receive_IT+0x102>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4a21      	ldr	r2, [pc, #132]	@ (8009f8c <UART_Start_Receive_IT+0x184>)
 8009f06:	669a      	str	r2, [r3, #104]	@ 0x68
 8009f08:	e002      	b.n	8009f10 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4a20      	ldr	r2, [pc, #128]	@ (8009f90 <UART_Start_Receive_IT+0x188>)
 8009f0e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d019      	beq.n	8009f4c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f28:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f38:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e6      	bne.n	8009f18 <UART_Start_Receive_IT+0x110>
 8009f4a:	e018      	b.n	8009f7e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	613b      	str	r3, [r7, #16]
   return(result);
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f043 0320 	orr.w	r3, r3, #32
 8009f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	461a      	mov	r2, r3
 8009f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6a:	623b      	str	r3, [r7, #32]
 8009f6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	69f9      	ldr	r1, [r7, #28]
 8009f70:	6a3a      	ldr	r2, [r7, #32]
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e6      	bne.n	8009f4c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	375c      	adds	r7, #92	@ 0x5c
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	0800a243 	.word	0x0800a243
 8009f90:	0800a0dd 	.word	0x0800a0dd

08009f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b095      	sub	sp, #84	@ 0x54
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e6      	bne.n	8009f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	f023 0301 	bic.w	r3, r3, #1
 8009fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3308      	adds	r3, #8
 8009fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e5      	bne.n	8009fce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a006:	2b01      	cmp	r3, #1
 800a008:	d118      	bne.n	800a03c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	60bb      	str	r3, [r7, #8]
   return(result);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f023 0310 	bic.w	r3, r3, #16
 800a01e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6979      	ldr	r1, [r7, #20]
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	613b      	str	r3, [r7, #16]
   return(result);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a050:	bf00      	nop
 800a052:	3754      	adds	r7, #84	@ 0x54
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff faaa 	bl	80095d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	e853 3f00 	ldrex	r3, [r3]
 800a09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a4:	61fb      	str	r3, [r7, #28]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	61bb      	str	r3, [r7, #24]
 800a0b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b2:	6979      	ldr	r1, [r7, #20]
 800a0b4:	69ba      	ldr	r2, [r7, #24]
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e6      	bne.n	800a090 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff fa76 	bl	80095c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0d4:	bf00      	nop
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b096      	sub	sp, #88	@ 0x58
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0f4:	2b22      	cmp	r3, #34	@ 0x22
 800a0f6:	f040 8098 	bne.w	800a22a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a100:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a104:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a108:	b2d9      	uxtb	r1, r3
 800a10a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a114:	400a      	ands	r2, r1
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d17b      	bne.n	800a23a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14a:	e853 3f00 	ldrex	r3, [r3]
 800a14e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a156:	653b      	str	r3, [r7, #80]	@ 0x50
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a160:	647b      	str	r3, [r7, #68]	@ 0x44
 800a162:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a164:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a166:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a168:	e841 2300 	strex	r3, r2, [r1]
 800a16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1e6      	bne.n	800a142 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3308      	adds	r3, #8
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	623b      	str	r3, [r7, #32]
   return(result);
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	f023 0301 	bic.w	r3, r3, #1
 800a18a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a194:	633a      	str	r2, [r7, #48]	@ 0x30
 800a196:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e5      	bne.n	800a174 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d12e      	bne.n	800a222 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0310 	bic.w	r3, r3, #16
 800a1de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ec:	69b9      	ldr	r1, [r7, #24]
 800a1ee:	69fa      	ldr	r2, [r7, #28]
 800a1f0:	e841 2300 	strex	r3, r2, [r1]
 800a1f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e6      	bne.n	800a1ca <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f003 0310 	and.w	r3, r3, #16
 800a206:	2b10      	cmp	r3, #16
 800a208:	d103      	bne.n	800a212 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2210      	movs	r2, #16
 800a210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff f9e4 	bl	80095e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a220:	e00b      	b.n	800a23a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7f8 fea0 	bl	8002f68 <HAL_UART_RxCpltCallback>
}
 800a228:	e007      	b.n	800a23a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699a      	ldr	r2, [r3, #24]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0208 	orr.w	r2, r2, #8
 800a238:	619a      	str	r2, [r3, #24]
}
 800a23a:	bf00      	nop
 800a23c:	3758      	adds	r7, #88	@ 0x58
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b096      	sub	sp, #88	@ 0x58
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a250:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a25a:	2b22      	cmp	r3, #34	@ 0x22
 800a25c:	f040 8098 	bne.w	800a390 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a266:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a270:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a274:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a278:	4013      	ands	r3, r2
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a27e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a284:	1c9a      	adds	r2, r3, #2
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a290:	b29b      	uxth	r3, r3
 800a292:	3b01      	subs	r3, #1
 800a294:	b29a      	uxth	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d17b      	bne.n	800a3a0 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b0:	e853 3f00 	ldrex	r3, [r3]
 800a2b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e6      	bne.n	800a2a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f023 0301 	bic.w	r3, r3, #1
 800a2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e5      	bne.n	800a2da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a326:	2b01      	cmp	r3, #1
 800a328:	d12e      	bne.n	800a388 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f023 0310 	bic.w	r3, r3, #16
 800a344:	647b      	str	r3, [r7, #68]	@ 0x44
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	e841 2300 	strex	r3, r2, [r1]
 800a35a:	613b      	str	r3, [r7, #16]
   return(result);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e6      	bne.n	800a330 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69db      	ldr	r3, [r3, #28]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b10      	cmp	r3, #16
 800a36e:	d103      	bne.n	800a378 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2210      	movs	r2, #16
 800a376:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f7ff f931 	bl	80095e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a386:	e00b      	b.n	800a3a0 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7f8 fded 	bl	8002f68 <HAL_UART_RxCpltCallback>
}
 800a38e:	e007      	b.n	800a3a0 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0208 	orr.w	r2, r2, #8
 800a39e:	619a      	str	r2, [r3, #24]
}
 800a3a0:	bf00      	nop
 800a3a2:	3758      	adds	r7, #88	@ 0x58
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a3a8:	b5b0      	push	{r4, r5, r7, lr}
 800a3aa:	b08c      	sub	sp, #48	@ 0x30
 800a3ac:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a3ae:	4b96      	ldr	r3, [pc, #600]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a3b0:	22c0      	movs	r2, #192	@ 0xc0
 800a3b2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a3b4:	4b94      	ldr	r3, [pc, #592]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a3b6:	22a8      	movs	r2, #168	@ 0xa8
 800a3b8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a3ba:	4b93      	ldr	r3, [pc, #588]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a3bc:	2201      	movs	r2, #1
 800a3be:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 800a3c0:	4b91      	ldr	r3, [pc, #580]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a3c2:	2242      	movs	r2, #66	@ 0x42
 800a3c4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a3c6:	4b91      	ldr	r3, [pc, #580]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a3c8:	22ff      	movs	r2, #255	@ 0xff
 800a3ca:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a3cc:	4b8f      	ldr	r3, [pc, #572]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a3ce:	22ff      	movs	r2, #255	@ 0xff
 800a3d0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a3d2:	4b8e      	ldr	r3, [pc, #568]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a3d4:	22ff      	movs	r2, #255	@ 0xff
 800a3d6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a3d8:	4b8c      	ldr	r3, [pc, #560]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a3de:	4b8c      	ldr	r3, [pc, #560]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a3e0:	22c0      	movs	r2, #192	@ 0xc0
 800a3e2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a3e4:	4b8a      	ldr	r3, [pc, #552]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a3e6:	22a8      	movs	r2, #168	@ 0xa8
 800a3e8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a3ea:	4b89      	ldr	r3, [pc, #548]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a3f0:	4b87      	ldr	r3, [pc, #540]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	f006 fa29 	bl	8010850 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a3fe:	4b82      	ldr	r3, [pc, #520]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	061a      	lsls	r2, r3, #24
 800a404:	4b80      	ldr	r3, [pc, #512]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	041b      	lsls	r3, r3, #16
 800a40a:	431a      	orrs	r2, r3
 800a40c:	4b7e      	ldr	r3, [pc, #504]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a40e:	789b      	ldrb	r3, [r3, #2]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	4313      	orrs	r3, r2
 800a414:	4a7c      	ldr	r2, [pc, #496]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a416:	78d2      	ldrb	r2, [r2, #3]
 800a418:	4313      	orrs	r3, r2
 800a41a:	061a      	lsls	r2, r3, #24
 800a41c:	4b7a      	ldr	r3, [pc, #488]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	0619      	lsls	r1, r3, #24
 800a422:	4b79      	ldr	r3, [pc, #484]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	041b      	lsls	r3, r3, #16
 800a428:	4319      	orrs	r1, r3
 800a42a:	4b77      	ldr	r3, [pc, #476]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a42c:	789b      	ldrb	r3, [r3, #2]
 800a42e:	021b      	lsls	r3, r3, #8
 800a430:	430b      	orrs	r3, r1
 800a432:	4975      	ldr	r1, [pc, #468]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a434:	78c9      	ldrb	r1, [r1, #3]
 800a436:	430b      	orrs	r3, r1
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a43e:	431a      	orrs	r2, r3
 800a440:	4b71      	ldr	r3, [pc, #452]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	0619      	lsls	r1, r3, #24
 800a446:	4b70      	ldr	r3, [pc, #448]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	041b      	lsls	r3, r3, #16
 800a44c:	4319      	orrs	r1, r3
 800a44e:	4b6e      	ldr	r3, [pc, #440]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a450:	789b      	ldrb	r3, [r3, #2]
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	430b      	orrs	r3, r1
 800a456:	496c      	ldr	r1, [pc, #432]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a458:	78c9      	ldrb	r1, [r1, #3]
 800a45a:	430b      	orrs	r3, r1
 800a45c:	0a1b      	lsrs	r3, r3, #8
 800a45e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a462:	431a      	orrs	r2, r3
 800a464:	4b68      	ldr	r3, [pc, #416]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	0619      	lsls	r1, r3, #24
 800a46a:	4b67      	ldr	r3, [pc, #412]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	4319      	orrs	r1, r3
 800a472:	4b65      	ldr	r3, [pc, #404]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a474:	789b      	ldrb	r3, [r3, #2]
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	430b      	orrs	r3, r1
 800a47a:	4963      	ldr	r1, [pc, #396]	@ (800a608 <MX_LWIP_Init+0x260>)
 800a47c:	78c9      	ldrb	r1, [r1, #3]
 800a47e:	430b      	orrs	r3, r1
 800a480:	0e1b      	lsrs	r3, r3, #24
 800a482:	4313      	orrs	r3, r2
 800a484:	4a63      	ldr	r2, [pc, #396]	@ (800a614 <MX_LWIP_Init+0x26c>)
 800a486:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a488:	4b60      	ldr	r3, [pc, #384]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	061a      	lsls	r2, r3, #24
 800a48e:	4b5f      	ldr	r3, [pc, #380]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	041b      	lsls	r3, r3, #16
 800a494:	431a      	orrs	r2, r3
 800a496:	4b5d      	ldr	r3, [pc, #372]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a498:	789b      	ldrb	r3, [r3, #2]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	4313      	orrs	r3, r2
 800a49e:	4a5b      	ldr	r2, [pc, #364]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4a0:	78d2      	ldrb	r2, [r2, #3]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	061a      	lsls	r2, r3, #24
 800a4a6:	4b59      	ldr	r3, [pc, #356]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	0619      	lsls	r1, r3, #24
 800a4ac:	4b57      	ldr	r3, [pc, #348]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	041b      	lsls	r3, r3, #16
 800a4b2:	4319      	orrs	r1, r3
 800a4b4:	4b55      	ldr	r3, [pc, #340]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4b6:	789b      	ldrb	r3, [r3, #2]
 800a4b8:	021b      	lsls	r3, r3, #8
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	4953      	ldr	r1, [pc, #332]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4be:	78c9      	ldrb	r1, [r1, #3]
 800a4c0:	430b      	orrs	r3, r1
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	4b50      	ldr	r3, [pc, #320]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	0619      	lsls	r1, r3, #24
 800a4d0:	4b4e      	ldr	r3, [pc, #312]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	041b      	lsls	r3, r3, #16
 800a4d6:	4319      	orrs	r1, r3
 800a4d8:	4b4c      	ldr	r3, [pc, #304]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4da:	789b      	ldrb	r3, [r3, #2]
 800a4dc:	021b      	lsls	r3, r3, #8
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	494a      	ldr	r1, [pc, #296]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4e2:	78c9      	ldrb	r1, [r1, #3]
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	0a1b      	lsrs	r3, r3, #8
 800a4e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	4b47      	ldr	r3, [pc, #284]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	0619      	lsls	r1, r3, #24
 800a4f4:	4b45      	ldr	r3, [pc, #276]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4f6:	785b      	ldrb	r3, [r3, #1]
 800a4f8:	041b      	lsls	r3, r3, #16
 800a4fa:	4319      	orrs	r1, r3
 800a4fc:	4b43      	ldr	r3, [pc, #268]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a4fe:	789b      	ldrb	r3, [r3, #2]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	430b      	orrs	r3, r1
 800a504:	4941      	ldr	r1, [pc, #260]	@ (800a60c <MX_LWIP_Init+0x264>)
 800a506:	78c9      	ldrb	r1, [r1, #3]
 800a508:	430b      	orrs	r3, r1
 800a50a:	0e1b      	lsrs	r3, r3, #24
 800a50c:	4313      	orrs	r3, r2
 800a50e:	4a42      	ldr	r2, [pc, #264]	@ (800a618 <MX_LWIP_Init+0x270>)
 800a510:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a512:	4b3f      	ldr	r3, [pc, #252]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	061a      	lsls	r2, r3, #24
 800a518:	4b3d      	ldr	r3, [pc, #244]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	431a      	orrs	r2, r3
 800a520:	4b3b      	ldr	r3, [pc, #236]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	4313      	orrs	r3, r2
 800a528:	4a39      	ldr	r2, [pc, #228]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a52a:	78d2      	ldrb	r2, [r2, #3]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	061a      	lsls	r2, r3, #24
 800a530:	4b37      	ldr	r3, [pc, #220]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	0619      	lsls	r1, r3, #24
 800a536:	4b36      	ldr	r3, [pc, #216]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a538:	785b      	ldrb	r3, [r3, #1]
 800a53a:	041b      	lsls	r3, r3, #16
 800a53c:	4319      	orrs	r1, r3
 800a53e:	4b34      	ldr	r3, [pc, #208]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a540:	789b      	ldrb	r3, [r3, #2]
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	430b      	orrs	r3, r1
 800a546:	4932      	ldr	r1, [pc, #200]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a548:	78c9      	ldrb	r1, [r1, #3]
 800a54a:	430b      	orrs	r3, r1
 800a54c:	021b      	lsls	r3, r3, #8
 800a54e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a552:	431a      	orrs	r2, r3
 800a554:	4b2e      	ldr	r3, [pc, #184]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	0619      	lsls	r1, r3, #24
 800a55a:	4b2d      	ldr	r3, [pc, #180]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a55c:	785b      	ldrb	r3, [r3, #1]
 800a55e:	041b      	lsls	r3, r3, #16
 800a560:	4319      	orrs	r1, r3
 800a562:	4b2b      	ldr	r3, [pc, #172]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a564:	789b      	ldrb	r3, [r3, #2]
 800a566:	021b      	lsls	r3, r3, #8
 800a568:	430b      	orrs	r3, r1
 800a56a:	4929      	ldr	r1, [pc, #164]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a56c:	78c9      	ldrb	r1, [r1, #3]
 800a56e:	430b      	orrs	r3, r1
 800a570:	0a1b      	lsrs	r3, r3, #8
 800a572:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a576:	431a      	orrs	r2, r3
 800a578:	4b25      	ldr	r3, [pc, #148]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	0619      	lsls	r1, r3, #24
 800a57e:	4b24      	ldr	r3, [pc, #144]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	041b      	lsls	r3, r3, #16
 800a584:	4319      	orrs	r1, r3
 800a586:	4b22      	ldr	r3, [pc, #136]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a588:	789b      	ldrb	r3, [r3, #2]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	430b      	orrs	r3, r1
 800a58e:	4920      	ldr	r1, [pc, #128]	@ (800a610 <MX_LWIP_Init+0x268>)
 800a590:	78c9      	ldrb	r1, [r1, #3]
 800a592:	430b      	orrs	r3, r1
 800a594:	0e1b      	lsrs	r3, r3, #24
 800a596:	4313      	orrs	r3, r2
 800a598:	4a20      	ldr	r2, [pc, #128]	@ (800a61c <MX_LWIP_Init+0x274>)
 800a59a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a59c:	4b20      	ldr	r3, [pc, #128]	@ (800a620 <MX_LWIP_Init+0x278>)
 800a59e:	9302      	str	r3, [sp, #8]
 800a5a0:	4b20      	ldr	r3, [pc, #128]	@ (800a624 <MX_LWIP_Init+0x27c>)
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a61c <MX_LWIP_Init+0x274>)
 800a5aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a618 <MX_LWIP_Init+0x270>)
 800a5ac:	4919      	ldr	r1, [pc, #100]	@ (800a614 <MX_LWIP_Init+0x26c>)
 800a5ae:	481e      	ldr	r0, [pc, #120]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5b0:	f007 fd68 	bl	8012084 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a5b4:	481c      	ldr	r0, [pc, #112]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5b6:	f007 ff17 	bl	80123e8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a5ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a5c0:	089b      	lsrs	r3, r3, #2
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a5cc:	4816      	ldr	r0, [pc, #88]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5ce:	f007 ff1b 	bl	8012408 <netif_set_up>
 800a5d2:	e002      	b.n	800a5da <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a5d4:	4814      	ldr	r0, [pc, #80]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5d6:	f007 ff83 	bl	80124e0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a5da:	4914      	ldr	r1, [pc, #80]	@ (800a62c <MX_LWIP_Init+0x284>)
 800a5dc:	4812      	ldr	r0, [pc, #72]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5de:	f008 f815 	bl	801260c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a5e2:	4b13      	ldr	r3, [pc, #76]	@ (800a630 <MX_LWIP_Init+0x288>)
 800a5e4:	1d3c      	adds	r4, r7, #4
 800a5e6:	461d      	mov	r5, r3
 800a5e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a5f4:	1d3b      	adds	r3, r7, #4
 800a5f6:	490c      	ldr	r1, [pc, #48]	@ (800a628 <MX_LWIP_Init+0x280>)
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fd47 	bl	800b08c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a5fe:	bf00      	nop
 800a600:	3720      	adds	r7, #32
 800a602:	46bd      	mov	sp, r7
 800a604:	bdb0      	pop	{r4, r5, r7, pc}
 800a606:	bf00      	nop
 800a608:	200008ac 	.word	0x200008ac
 800a60c:	200008b0 	.word	0x200008b0
 800a610:	200008b4 	.word	0x200008b4
 800a614:	200008a0 	.word	0x200008a0
 800a618:	200008a4 	.word	0x200008a4
 800a61c:	200008a8 	.word	0x200008a8
 800a620:	08010761 	.word	0x08010761
 800a624:	0800ab2d 	.word	0x0800ab2d
 800a628:	2000086c 	.word	0x2000086c
 800a62c:	0800a635 	.word	0x0800a635
 800a630:	0801fad4 	.word	0x0801fad4

0800a634 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <SCB_InvalidateDCache_by_Addr>:
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a65a:	2320      	movs	r3, #32
 800a65c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a65e:	f3bf 8f4f 	dsb	sy
}
 800a662:	bf00      	nop
    while (op_size > 0) {
 800a664:	e00b      	b.n	800a67e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a666:	4a0d      	ldr	r2, [pc, #52]	@ (800a69c <SCB_InvalidateDCache_by_Addr+0x54>)
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4413      	add	r3, r2
 800a674:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	dcf0      	bgt.n	800a666 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a684:	f3bf 8f4f 	dsb	sy
}
 800a688:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a68a:	f3bf 8f6f 	isb	sy
}
 800a68e:	bf00      	nop
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	e000ed00 	.word	0xe000ed00

0800a6a0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a6a8:	4b04      	ldr	r3, [pc, #16]	@ (800a6bc <HAL_ETH_RxCpltCallback+0x1c>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fe69 	bl	800b384 <osSemaphoreRelease>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20005244 	.word	0x20005244

0800a6c0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a6c8:	4b04      	ldr	r3, [pc, #16]	@ (800a6dc <HAL_ETH_TxCpltCallback+0x1c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fe59 	bl	800b384 <osSemaphoreRelease>
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20005248 	.word	0x20005248

0800a6e0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7fa fa4d 	bl	8004b88 <HAL_ETH_GetDMAError>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f4:	2b80      	cmp	r3, #128	@ 0x80
 800a6f6:	d104      	bne.n	800a702 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a6f8:	4b04      	ldr	r3, [pc, #16]	@ (800a70c <HAL_ETH_ErrorCallback+0x2c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fe41 	bl	800b384 <osSemaphoreRelease>
  }
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20005244 	.word	0x20005244

0800a710 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b0a8      	sub	sp, #160	@ 0xa0
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800a72a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a72e:	2264      	movs	r2, #100	@ 0x64
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f012 ff77 	bl	801d626 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a738:	4b85      	ldr	r3, [pc, #532]	@ (800a950 <low_level_init+0x240>)
 800a73a:	4a86      	ldr	r2, [pc, #536]	@ (800a954 <low_level_init+0x244>)
 800a73c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a73e:	2300      	movs	r3, #0
 800a740:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 800a744:	2380      	movs	r3, #128	@ 0x80
 800a746:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 800a74a:	23e1      	movs	r3, #225	@ 0xe1
 800a74c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 800a750:	2300      	movs	r3, #0
 800a752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 800a75c:	2300      	movs	r3, #0
 800a75e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800a762:	4a7b      	ldr	r2, [pc, #492]	@ (800a950 <low_level_init+0x240>)
 800a764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a768:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a76a:	4b79      	ldr	r3, [pc, #484]	@ (800a950 <low_level_init+0x240>)
 800a76c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a770:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a772:	4b77      	ldr	r3, [pc, #476]	@ (800a950 <low_level_init+0x240>)
 800a774:	4a78      	ldr	r2, [pc, #480]	@ (800a958 <low_level_init+0x248>)
 800a776:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a778:	4b75      	ldr	r3, [pc, #468]	@ (800a950 <low_level_init+0x240>)
 800a77a:	4a78      	ldr	r2, [pc, #480]	@ (800a95c <low_level_init+0x24c>)
 800a77c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a77e:	4b74      	ldr	r3, [pc, #464]	@ (800a950 <low_level_init+0x240>)
 800a780:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a784:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a786:	4872      	ldr	r0, [pc, #456]	@ (800a950 <low_level_init+0x240>)
 800a788:	f7f9 fb60 	bl	8003e4c <HAL_ETH_Init>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a792:	2238      	movs	r2, #56	@ 0x38
 800a794:	2100      	movs	r1, #0
 800a796:	4872      	ldr	r0, [pc, #456]	@ (800a960 <low_level_init+0x250>)
 800a798:	f012 ff45 	bl	801d626 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a79c:	4b70      	ldr	r3, [pc, #448]	@ (800a960 <low_level_init+0x250>)
 800a79e:	2221      	movs	r2, #33	@ 0x21
 800a7a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a7a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a960 <low_level_init+0x250>)
 800a7a4:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a7a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a7aa:	4b6d      	ldr	r3, [pc, #436]	@ (800a960 <low_level_init+0x250>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a7b0:	486c      	ldr	r0, [pc, #432]	@ (800a964 <low_level_init+0x254>)
 800a7b2:	f007 fb21 	bl	8011df8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2206      	movs	r2, #6
 800a7ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a7be:	4b64      	ldr	r3, [pc, #400]	@ (800a950 <low_level_init+0x240>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	781a      	ldrb	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a7ca:	4b61      	ldr	r3, [pc, #388]	@ (800a950 <low_level_init+0x240>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	785a      	ldrb	r2, [r3, #1]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a7d6:	4b5e      	ldr	r3, [pc, #376]	@ (800a950 <low_level_init+0x240>)
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	789a      	ldrb	r2, [r3, #2]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a7e2:	4b5b      	ldr	r3, [pc, #364]	@ (800a950 <low_level_init+0x240>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	78da      	ldrb	r2, [r3, #3]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a7ee:	4b58      	ldr	r3, [pc, #352]	@ (800a950 <low_level_init+0x240>)
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	791a      	ldrb	r2, [r3, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a7fa:	4b55      	ldr	r3, [pc, #340]	@ (800a950 <low_level_init+0x240>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	795a      	ldrb	r2, [r3, #5]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a80c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a814:	f043 030a 	orr.w	r3, r3, #10
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800a820:	2203      	movs	r2, #3
 800a822:	2100      	movs	r1, #0
 800a824:	2001      	movs	r0, #1
 800a826:	f001 f8a4 	bl	800b972 <xQueueGenericCreate>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4a4e      	ldr	r2, [pc, #312]	@ (800a968 <low_level_init+0x258>)
 800a82e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800a830:	2203      	movs	r2, #3
 800a832:	2100      	movs	r1, #0
 800a834:	2001      	movs	r0, #1
 800a836:	f001 f89c 	bl	800b972 <xQueueGenericCreate>
 800a83a:	4603      	mov	r3, r0
 800a83c:	4a4b      	ldr	r2, [pc, #300]	@ (800a96c <low_level_init+0x25c>)
 800a83e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a840:	4b4b      	ldr	r3, [pc, #300]	@ (800a970 <low_level_init+0x260>)
 800a842:	f107 0408 	add.w	r4, r7, #8
 800a846:	461d      	mov	r5, r3
 800a848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a84c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fc16 	bl	800b08c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a860:	4944      	ldr	r1, [pc, #272]	@ (800a974 <low_level_init+0x264>)
 800a862:	4845      	ldr	r0, [pc, #276]	@ (800a978 <low_level_init+0x268>)
 800a864:	f7f8 ff6b 	bl	800373e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a868:	4843      	ldr	r0, [pc, #268]	@ (800a978 <low_level_init+0x268>)
 800a86a:	f7f8 ff9a 	bl	80037a2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a86e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a872:	2b00      	cmp	r3, #0
 800a874:	d165      	bne.n	800a942 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a876:	4840      	ldr	r0, [pc, #256]	@ (800a978 <low_level_init+0x268>)
 800a878:	f7f9 f83b 	bl	80038f2 <LAN8742_GetLinkState>
 800a87c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a880:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a884:	2b01      	cmp	r3, #1
 800a886:	dc06      	bgt.n	800a896 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f007 fe8f 	bl	80125ac <netif_set_link_down>
      netif_set_down(netif);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f007 fe26 	bl	80124e0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a894:	e057      	b.n	800a946 <low_level_init+0x236>
      switch (PHYLinkState)
 800a896:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a89a:	3b02      	subs	r3, #2
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d82b      	bhi.n	800a8f8 <low_level_init+0x1e8>
 800a8a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a8 <low_level_init+0x198>)
 800a8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a6:	bf00      	nop
 800a8a8:	0800a8b9 	.word	0x0800a8b9
 800a8ac:	0800a8cb 	.word	0x0800a8cb
 800a8b0:	0800a8db 	.word	0x0800a8db
 800a8b4:	0800a8eb 	.word	0x0800a8eb
        duplex = ETH_FULLDUPLEX_MODE;
 800a8b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a8c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a8c8:	e01f      	b.n	800a90a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a8d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a8d8:	e017      	b.n	800a90a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a8da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a8e8:	e00f      	b.n	800a90a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a8f6:	e008      	b.n	800a90a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a8f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a908:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a90a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a90e:	4619      	mov	r1, r3
 800a910:	480f      	ldr	r0, [pc, #60]	@ (800a950 <low_level_init+0x240>)
 800a912:	f7f9 ffdf 	bl	80048d4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a916:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a91a:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 800a91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a920:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a922:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a926:	4619      	mov	r1, r3
 800a928:	4809      	ldr	r0, [pc, #36]	@ (800a950 <low_level_init+0x240>)
 800a92a:	f7fa f8bd 	bl	8004aa8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a92e:	4808      	ldr	r0, [pc, #32]	@ (800a950 <low_level_init+0x240>)
 800a930:	f7f9 fb68 	bl	8004004 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f007 fd67 	bl	8012408 <netif_set_up>
    netif_set_link_up(netif);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f007 fe02 	bl	8012544 <netif_set_link_up>
}
 800a940:	e001      	b.n	800a946 <low_level_init+0x236>
    Error_Handler();
 800a942:	f7f8 fb79 	bl	8003038 <Error_Handler>
}
 800a946:	bf00      	nop
 800a948:	37a0      	adds	r7, #160	@ 0xa0
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bdb0      	pop	{r4, r5, r7, pc}
 800a94e:	bf00      	nop
 800a950:	2000524c 	.word	0x2000524c
 800a954:	40028000 	.word	0x40028000
 800a958:	200002f0 	.word	0x200002f0
 800a95c:	20000250 	.word	0x20000250
 800a960:	200052fc 	.word	0x200052fc
 800a964:	08023278 	.word	0x08023278
 800a968:	20005244 	.word	0x20005244
 800a96c:	20005248 	.word	0x20005248
 800a970:	0801faf8 	.word	0x0801faf8
 800a974:	20000064 	.word	0x20000064
 800a978:	20005334 	.word	0x20005334

0800a97c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b092      	sub	sp, #72	@ 0x48
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	2230      	movs	r2, #48	@ 0x30
 800a99a:	2100      	movs	r1, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f012 fe42 	bl	801d626 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	2230      	movs	r2, #48	@ 0x30
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f012 fe3b 	bl	801d626 <memset>

  for(q = p; q != NULL; q = q->next)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9b4:	e045      	b.n	800aa42 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a9b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d902      	bls.n	800a9c2 <low_level_output+0x46>
      return ERR_IF;
 800a9bc:	f06f 030b 	mvn.w	r3, #11
 800a9c0:	e065      	b.n	800aa8e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9c4:	6859      	ldr	r1, [r3, #4]
 800a9c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	4413      	add	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	3348      	adds	r3, #72	@ 0x48
 800a9d2:	443b      	add	r3, r7
 800a9d4:	3b3c      	subs	r3, #60	@ 0x3c
 800a9d6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a9d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9da:	895b      	ldrh	r3, [r3, #10]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	4413      	add	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	3348      	adds	r3, #72	@ 0x48
 800a9ea:	443b      	add	r3, r7
 800a9ec:	3b38      	subs	r3, #56	@ 0x38
 800a9ee:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d011      	beq.n	800aa1a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	f107 000c 	add.w	r0, r7, #12
 800a9fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa00:	460b      	mov	r3, r1
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	440b      	add	r3, r1
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	18c1      	adds	r1, r0, r3
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	3348      	adds	r3, #72	@ 0x48
 800aa14:	443b      	add	r3, r7
 800aa16:	3b34      	subs	r3, #52	@ 0x34
 800aa18:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800aa1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800aa22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	3348      	adds	r3, #72	@ 0x48
 800aa2e:	443b      	add	r3, r7
 800aa30:	3b34      	subs	r3, #52	@ 0x34
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
    }

    i++;
 800aa36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa38:	3301      	adds	r3, #1
 800aa3a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800aa3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1b6      	bne.n	800a9b6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	891b      	ldrh	r3, [r3, #8]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4b12      	ldr	r3, [pc, #72]	@ (800aa98 <low_level_output+0x11c>)
 800aa50:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800aa52:	4a11      	ldr	r2, [pc, #68]	@ (800aa98 <low_level_output+0x11c>)
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800aa5a:	4a0f      	ldr	r2, [pc, #60]	@ (800aa98 <low_level_output+0x11c>)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800aa60:	6838      	ldr	r0, [r7, #0]
 800aa62:	f008 fa27 	bl	8012eb4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800aa66:	490c      	ldr	r1, [pc, #48]	@ (800aa98 <low_level_output+0x11c>)
 800aa68:	480c      	ldr	r0, [pc, #48]	@ (800aa9c <low_level_output+0x120>)
 800aa6a:	f7f9 fbd9 	bl	8004220 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800aa6e:	bf00      	nop
 800aa70:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa0 <low_level_output+0x124>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f04f 31ff 	mov.w	r1, #4294967295
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fc35 	bl	800b2e8 <osSemaphoreWait>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1f5      	bne.n	800aa70 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800aa84:	4805      	ldr	r0, [pc, #20]	@ (800aa9c <low_level_output+0x120>)
 800aa86:	f7f9 fd5f 	bl	8004548 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800aa8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3748      	adds	r7, #72	@ 0x48
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	200052fc 	.word	0x200052fc
 800aa9c:	2000524c 	.word	0x2000524c
 800aaa0:	20005248 	.word	0x20005248

0800aaa4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800aab0:	4b07      	ldr	r3, [pc, #28]	@ (800aad0 <low_level_input+0x2c>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800aab8:	f107 030c 	add.w	r3, r7, #12
 800aabc:	4619      	mov	r1, r3
 800aabe:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <low_level_input+0x30>)
 800aac0:	f7f9 fc0a 	bl	80042d8 <HAL_ETH_ReadData>
  }

  return p;
 800aac4:	68fb      	ldr	r3, [r7, #12]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20005240 	.word	0x20005240
 800aad4:	2000524c 	.word	0x2000524c

0800aad8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aae8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab28 <ethernetif_input+0x50>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f04f 31ff 	mov.w	r1, #4294967295
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fbf9 	bl	800b2e8 <osSemaphoreWait>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1f5      	bne.n	800aae8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800aafc:	68b8      	ldr	r0, [r7, #8]
 800aafe:	f7ff ffd1 	bl	800aaa4 <low_level_input>
 800ab02:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	4798      	blx	r3
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f008 f924 	bl	8012d68 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1ea      	bne.n	800aafc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ab26:	e7df      	b.n	800aae8 <ethernetif_input+0x10>
 800ab28:	20005244 	.word	0x20005244

0800ab2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d106      	bne.n	800ab48 <ethernetif_init+0x1c>
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab74 <ethernetif_init+0x48>)
 800ab3c:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800ab40:	490d      	ldr	r1, [pc, #52]	@ (800ab78 <ethernetif_init+0x4c>)
 800ab42:	480e      	ldr	r0, [pc, #56]	@ (800ab7c <ethernetif_init+0x50>)
 800ab44:	f012 fcd0 	bl	801d4e8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2273      	movs	r2, #115	@ 0x73
 800ab4c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2274      	movs	r2, #116	@ 0x74
 800ab54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a09      	ldr	r2, [pc, #36]	@ (800ab80 <ethernetif_init+0x54>)
 800ab5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a08      	ldr	r2, [pc, #32]	@ (800ab84 <ethernetif_init+0x58>)
 800ab62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff fdd3 	bl	800a710 <low_level_init>

  return ERR_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	0801fb14 	.word	0x0801fb14
 800ab78:	0801fb30 	.word	0x0801fb30
 800ab7c:	0801fb40 	.word	0x0801fb40
 800ab80:	0801a981 	.word	0x0801a981
 800ab84:	0800a97d 	.word	0x0800a97d

0800ab88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	4809      	ldr	r0, [pc, #36]	@ (800abbc <pbuf_free_custom+0x34>)
 800ab98:	f007 fa1e 	bl	8011fd8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ab9c:	4b08      	ldr	r3, [pc, #32]	@ (800abc0 <pbuf_free_custom+0x38>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d107      	bne.n	800abb4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <pbuf_free_custom+0x38>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800abaa:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <pbuf_free_custom+0x3c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fbe8 	bl	800b384 <osSemaphoreRelease>
  }
}
 800abb4:	bf00      	nop
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	08023278 	.word	0x08023278
 800abc0:	20005240 	.word	0x20005240
 800abc4:	20005244 	.word	0x20005244

0800abc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800abcc:	f7f8 ff6a 	bl	8003aa4 <HAL_GetTick>
 800abd0:	4603      	mov	r3, r0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08e      	sub	sp, #56	@ 0x38
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	605a      	str	r2, [r3, #4]
 800abea:	609a      	str	r2, [r3, #8]
 800abec:	60da      	str	r2, [r3, #12]
 800abee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a52      	ldr	r2, [pc, #328]	@ (800ad40 <HAL_ETH_MspInit+0x168>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	f040 809e 	bne.w	800ad38 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800abfc:	4b51      	ldr	r3, [pc, #324]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800abfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac00:	4a50      	ldr	r2, [pc, #320]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ac06:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac08:	4b4e      	ldr	r3, [pc, #312]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac10:	623b      	str	r3, [r7, #32]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	4b4b      	ldr	r3, [pc, #300]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac18:	4a4a      	ldr	r2, [pc, #296]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac1e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac20:	4b48      	ldr	r3, [pc, #288]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ac28:	61fb      	str	r3, [r7, #28]
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4b45      	ldr	r3, [pc, #276]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac30:	4a44      	ldr	r2, [pc, #272]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac36:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac38:	4b42      	ldr	r3, [pc, #264]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac40:	61bb      	str	r3, [r7, #24]
 800ac42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac44:	4b3f      	ldr	r3, [pc, #252]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	4a3e      	ldr	r2, [pc, #248]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac4a:	f043 0304 	orr.w	r3, r3, #4
 800ac4e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac50:	4b3c      	ldr	r3, [pc, #240]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac5c:	4b39      	ldr	r3, [pc, #228]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac60:	4a38      	ldr	r2, [pc, #224]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac68:	4b36      	ldr	r3, [pc, #216]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	613b      	str	r3, [r7, #16]
 800ac72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac74:	4b33      	ldr	r3, [pc, #204]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac78:	4a32      	ldr	r2, [pc, #200]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac7a:	f043 0302 	orr.w	r3, r3, #2
 800ac7e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac80:	4b30      	ldr	r3, [pc, #192]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	60fb      	str	r3, [r7, #12]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac8c:	4b2d      	ldr	r3, [pc, #180]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac90:	4a2c      	ldr	r2, [pc, #176]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac96:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac98:	4b2a      	ldr	r3, [pc, #168]	@ (800ad44 <HAL_ETH_MspInit+0x16c>)
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca0:	60bb      	str	r3, [r7, #8]
 800aca2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800aca4:	2332      	movs	r3, #50	@ 0x32
 800aca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca8:	2302      	movs	r3, #2
 800acaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acac:	2300      	movs	r3, #0
 800acae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acb0:	2303      	movs	r3, #3
 800acb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acb4:	230b      	movs	r3, #11
 800acb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800acb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acbc:	4619      	mov	r1, r3
 800acbe:	4822      	ldr	r0, [pc, #136]	@ (800ad48 <HAL_ETH_MspInit+0x170>)
 800acc0:	f7fa fb72 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800acc4:	2386      	movs	r3, #134	@ 0x86
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acc8:	2302      	movs	r3, #2
 800acca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800accc:	2300      	movs	r3, #0
 800acce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd0:	2303      	movs	r3, #3
 800acd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acd4:	230b      	movs	r3, #11
 800acd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acdc:	4619      	mov	r1, r3
 800acde:	481b      	ldr	r0, [pc, #108]	@ (800ad4c <HAL_ETH_MspInit+0x174>)
 800ace0:	f7fa fb62 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ace4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acea:	2302      	movs	r3, #2
 800acec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acf2:	2303      	movs	r3, #3
 800acf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acf6:	230b      	movs	r3, #11
 800acf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800acfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acfe:	4619      	mov	r1, r3
 800ad00:	4813      	ldr	r0, [pc, #76]	@ (800ad50 <HAL_ETH_MspInit+0x178>)
 800ad02:	f7fa fb51 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ad06:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800ad0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad14:	2303      	movs	r3, #3
 800ad16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ad18:	230b      	movs	r3, #11
 800ad1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ad1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad20:	4619      	mov	r1, r3
 800ad22:	480c      	ldr	r0, [pc, #48]	@ (800ad54 <HAL_ETH_MspInit+0x17c>)
 800ad24:	f7fa fb40 	bl	80053a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2105      	movs	r1, #5
 800ad2c:	203d      	movs	r0, #61	@ 0x3d
 800ad2e:	f7f8 ffc4 	bl	8003cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ad32:	203d      	movs	r0, #61	@ 0x3d
 800ad34:	f7f8 ffdd 	bl	8003cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ad38:	bf00      	nop
 800ad3a:	3738      	adds	r7, #56	@ 0x38
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	40028000 	.word	0x40028000
 800ad44:	40023800 	.word	0x40023800
 800ad48:	40020800 	.word	0x40020800
 800ad4c:	40020000 	.word	0x40020000
 800ad50:	40020400 	.word	0x40020400
 800ad54:	40021800 	.word	0x40021800

0800ad58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ad5c:	4802      	ldr	r0, [pc, #8]	@ (800ad68 <ETH_PHY_IO_Init+0x10>)
 800ad5e:	f7f9 febd 	bl	8004adc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	2000524c 	.word	0x2000524c

0800ad6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
  return 0;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68f9      	ldr	r1, [r7, #12]
 800ad8e:	4807      	ldr	r0, [pc, #28]	@ (800adac <ETH_PHY_IO_ReadReg+0x30>)
 800ad90:	f7f9 fd0c 	bl	80047ac <HAL_ETH_ReadPHYRegister>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	e000      	b.n	800ada2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	2000524c 	.word	0x2000524c

0800adb0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	4807      	ldr	r0, [pc, #28]	@ (800ade0 <ETH_PHY_IO_WriteReg+0x30>)
 800adc4:	f7f9 fd3d 	bl	8004842 <HAL_ETH_WritePHYRegister>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	e000      	b.n	800add6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	2000524c 	.word	0x2000524c

0800ade4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ade8:	f7f8 fe5c 	bl	8003aa4 <HAL_GetTick>
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b0a0      	sub	sp, #128	@ 0x80
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800adfc:	f107 0308 	add.w	r3, r7, #8
 800ae00:	2264      	movs	r2, #100	@ 0x64
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f012 fc0e 	bl	801d626 <memset>
  int32_t PHYLinkState = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae12:	2300      	movs	r3, #0
 800ae14:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae16:	2300      	movs	r3, #0
 800ae18:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ae1e:	483a      	ldr	r0, [pc, #232]	@ (800af08 <ethernet_link_thread+0x114>)
 800ae20:	f7f8 fd67 	bl	80038f2 <LAN8742_GetLinkState>
 800ae24:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ae26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae2c:	089b      	lsrs	r3, r3, #2
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00c      	beq.n	800ae52 <ethernet_link_thread+0x5e>
 800ae38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	dc09      	bgt.n	800ae52 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ae3e:	4833      	ldr	r0, [pc, #204]	@ (800af0c <ethernet_link_thread+0x118>)
 800ae40:	f7f9 f96e 	bl	8004120 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ae44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae46:	f007 fb4b 	bl	80124e0 <netif_set_down>
    netif_set_link_down(netif);
 800ae4a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae4c:	f007 fbae 	bl	80125ac <netif_set_link_down>
 800ae50:	e055      	b.n	800aefe <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ae52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ae58:	f003 0304 	and.w	r3, r3, #4
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d14e      	bne.n	800aefe <ethernet_link_thread+0x10a>
 800ae60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	dd4b      	ble.n	800aefe <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ae66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae68:	3b02      	subs	r3, #2
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d82a      	bhi.n	800aec4 <ethernet_link_thread+0xd0>
 800ae6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae74 <ethernet_link_thread+0x80>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae97 	.word	0x0800ae97
 800ae7c:	0800aea7 	.word	0x0800aea7
 800ae80:	0800aeb7 	.word	0x0800aeb7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ae84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae88:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae90:	2301      	movs	r3, #1
 800ae92:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae94:	e017      	b.n	800aec6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ae96:	2300      	movs	r3, #0
 800ae98:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae9e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aea0:	2301      	movs	r3, #1
 800aea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aea4:	e00f      	b.n	800aec6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aea6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aeaa:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aeac:	2300      	movs	r3, #0
 800aeae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aeb4:	e007      	b.n	800aec6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800aeba:	2300      	movs	r3, #0
 800aebc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aec2:	e000      	b.n	800aec6 <ethernet_link_thread+0xd2>
    default:
      break;
 800aec4:	bf00      	nop
    }

    if(linkchanged)
 800aec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d018      	beq.n	800aefe <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aecc:	f107 0308 	add.w	r3, r7, #8
 800aed0:	4619      	mov	r1, r3
 800aed2:	480e      	ldr	r0, [pc, #56]	@ (800af0c <ethernet_link_thread+0x118>)
 800aed4:	f7f9 fcfe 	bl	80048d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800aed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aeda:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800aedc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aede:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aee0:	f107 0308 	add.w	r3, r7, #8
 800aee4:	4619      	mov	r1, r3
 800aee6:	4809      	ldr	r0, [pc, #36]	@ (800af0c <ethernet_link_thread+0x118>)
 800aee8:	f7f9 fdde 	bl	8004aa8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800aeec:	4807      	ldr	r0, [pc, #28]	@ (800af0c <ethernet_link_thread+0x118>)
 800aeee:	f7f9 f829 	bl	8003f44 <HAL_ETH_Start>
      netif_set_up(netif);
 800aef2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aef4:	f007 fa88 	bl	8012408 <netif_set_up>
      netif_set_link_up(netif);
 800aef8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aefa:	f007 fb23 	bl	8012544 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800aefe:	2064      	movs	r0, #100	@ 0x64
 800af00:	f000 f910 	bl	800b124 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800af04:	e78b      	b.n	800ae1e <ethernet_link_thread+0x2a>
 800af06:	bf00      	nop
 800af08:	20005334 	.word	0x20005334
 800af0c:	2000524c 	.word	0x2000524c

0800af10 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af02      	add	r7, sp, #8
 800af16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800af18:	4812      	ldr	r0, [pc, #72]	@ (800af64 <HAL_ETH_RxAllocateCallback+0x54>)
 800af1a:	f006 ffe9 	bl	8011ef0 <memp_malloc_pool>
 800af1e:	60f8      	str	r0, [r7, #12]
  if (p)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d014      	beq.n	800af50 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f103 0220 	add.w	r2, r3, #32
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4a0d      	ldr	r2, [pc, #52]	@ (800af68 <HAL_ETH_RxAllocateCallback+0x58>)
 800af34:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800af3e:	9201      	str	r2, [sp, #4]
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2241      	movs	r2, #65	@ 0x41
 800af46:	2100      	movs	r1, #0
 800af48:	2000      	movs	r0, #0
 800af4a:	f007 fd53 	bl	80129f4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800af4e:	e005      	b.n	800af5c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800af50:	4b06      	ldr	r3, [pc, #24]	@ (800af6c <HAL_ETH_RxAllocateCallback+0x5c>)
 800af52:	2201      	movs	r2, #1
 800af54:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	601a      	str	r2, [r3, #0]
}
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	08023278 	.word	0x08023278
 800af68:	0800ab89 	.word	0x0800ab89
 800af6c:	20005240 	.word	0x20005240

0800af70 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800af86:	2300      	movs	r3, #0
 800af88:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3b20      	subs	r3, #32
 800af8e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	2200      	movs	r2, #0
 800af9a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	887a      	ldrh	r2, [r7, #2]
 800afa0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d103      	bne.n	800afb2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	e003      	b.n	800afba <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e009      	b.n	800afdc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	891a      	ldrh	r2, [r3, #8]
 800afcc:	887b      	ldrh	r3, [r7, #2]
 800afce:	4413      	add	r3, r2
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f2      	bne.n	800afc8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800afe2:	887b      	ldrh	r3, [r7, #2]
 800afe4:	4619      	mov	r1, r3
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff fb2e 	bl	800a648 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800afec:	bf00      	nop
 800afee:	3720      	adds	r7, #32
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f007 feb3 	bl	8012d68 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	4603      	mov	r3, r0
 800b012:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b01c:	2b84      	cmp	r3, #132	@ 0x84
 800b01e:	d005      	beq.n	800b02c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b020:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4413      	add	r3, r2
 800b028:	3303      	adds	r3, #3
 800b02a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b02c:	68fb      	ldr	r3, [r7, #12]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3714      	adds	r7, #20
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr

0800b03a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b03a:	b480      	push	{r7}
 800b03c:	b083      	sub	sp, #12
 800b03e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b040:	f3ef 8305 	mrs	r3, IPSR
 800b044:	607b      	str	r3, [r7, #4]
  return(result);
 800b046:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b048:	2b00      	cmp	r3, #0
 800b04a:	bf14      	ite	ne
 800b04c:	2301      	movne	r3, #1
 800b04e:	2300      	moveq	r3, #0
 800b050:	b2db      	uxtb	r3, r3
}
 800b052:	4618      	mov	r0, r3
 800b054:	370c      	adds	r7, #12
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b062:	f001 fdad 	bl	800cbc0 <vTaskStartScheduler>
  
  return osOK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b070:	f7ff ffe3 	bl	800b03a <inHandlerMode>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b07a:	f001 fecd 	bl	800ce18 <xTaskGetTickCountFromISR>
 800b07e:	4603      	mov	r3, r0
 800b080:	e002      	b.n	800b088 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b082:	f001 feb9 	bl	800cdf8 <xTaskGetTickCount>
 800b086:	4603      	mov	r3, r0
  }
}
 800b088:	4618      	mov	r0, r3
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b08e:	b089      	sub	sp, #36	@ 0x24
 800b090:	af04      	add	r7, sp, #16
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d020      	beq.n	800b0e0 <osThreadCreate+0x54>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d01c      	beq.n	800b0e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685c      	ldr	r4, [r3, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691e      	ldr	r6, [r3, #16]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff ffa6 	bl	800b00a <makeFreeRtosPriority>
 800b0be:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	695b      	ldr	r3, [r3, #20]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	9301      	str	r3, [sp, #4]
 800b0cc:	9100      	str	r1, [sp, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	4632      	mov	r2, r6
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f001 fb83 	bl	800c7e0 <xTaskCreateStatic>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e01c      	b.n	800b11a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685c      	ldr	r4, [r3, #4]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0ec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff ff88 	bl	800b00a <makeFreeRtosPriority>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	f107 030c 	add.w	r3, r7, #12
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	9200      	str	r2, [sp, #0]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	4632      	mov	r2, r6
 800b108:	4629      	mov	r1, r5
 800b10a:	4620      	mov	r0, r4
 800b10c:	f001 fbce 	bl	800c8ac <xTaskCreate>
 800b110:	4603      	mov	r3, r0
 800b112:	2b01      	cmp	r3, #1
 800b114:	d001      	beq.n	800b11a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	e000      	b.n	800b11c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b11a:	68fb      	ldr	r3, [r7, #12]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b124 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <osDelay+0x16>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	e000      	b.n	800b13c <osDelay+0x18>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4618      	mov	r0, r3
 800b13e:	f001 fd07 	bl	800cb50 <vTaskDelay>
  
  return osOK;
 800b142:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d007      	beq.n	800b16c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	4619      	mov	r1, r3
 800b162:	2001      	movs	r0, #1
 800b164:	f000 fc99 	bl	800ba9a <xQueueCreateMutexStatic>
 800b168:	4603      	mov	r3, r0
 800b16a:	e003      	b.n	800b174 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b16c:	2001      	movs	r0, #1
 800b16e:	f000 fc7c 	bl	800ba6a <xQueueCreateMutex>
 800b172:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b186:	2300      	movs	r3, #0
 800b188:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <osMutexWait+0x18>
    return osErrorParameter;
 800b190:	2380      	movs	r3, #128	@ 0x80
 800b192:	e03a      	b.n	800b20a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19e:	d103      	bne.n	800b1a8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	e009      	b.n	800b1bc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d006      	beq.n	800b1bc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <osMutexWait+0x40>
      ticks = 1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b1bc:	f7ff ff3d 	bl	800b03a <inHandlerMode>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d017      	beq.n	800b1f6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 f8c4 	bl	800c35c <xQueueReceiveFromISR>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d001      	beq.n	800b1de <osMutexWait+0x62>
      return osErrorOS;
 800b1da:	23ff      	movs	r3, #255	@ 0xff
 800b1dc:	e015      	b.n	800b20a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d011      	beq.n	800b208 <osMutexWait+0x8c>
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b214 <osMutexWait+0x98>)
 800b1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	e008      	b.n	800b208 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b1f6:	68f9      	ldr	r1, [r7, #12]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 ff97 	bl	800c12c <xQueueSemaphoreTake>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b01      	cmp	r3, #1
 800b202:	d001      	beq.n	800b208 <osMutexWait+0x8c>
    return osErrorOS;
 800b204:	23ff      	movs	r3, #255	@ 0xff
 800b206:	e000      	b.n	800b20a <osMutexWait+0x8e>
  }
  
  return osOK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	e000ed04 	.word	0xe000ed04

0800b218 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b224:	2300      	movs	r3, #0
 800b226:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b228:	f7ff ff07 	bl	800b03a <inHandlerMode>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d016      	beq.n	800b260 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b232:	f107 0308 	add.w	r3, r7, #8
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fdf6 	bl	800be2a <xQueueGiveFromISR>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b01      	cmp	r3, #1
 800b242:	d001      	beq.n	800b248 <osMutexRelease+0x30>
      return osErrorOS;
 800b244:	23ff      	movs	r3, #255	@ 0xff
 800b246:	e017      	b.n	800b278 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d013      	beq.n	800b276 <osMutexRelease+0x5e>
 800b24e:	4b0c      	ldr	r3, [pc, #48]	@ (800b280 <osMutexRelease+0x68>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	e00a      	b.n	800b276 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b260:	2300      	movs	r3, #0
 800b262:	2200      	movs	r2, #0
 800b264:	2100      	movs	r1, #0
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fc32 	bl	800bad0 <xQueueGenericSend>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d001      	beq.n	800b276 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b272:	23ff      	movs	r3, #255	@ 0xff
 800b274:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b276:	68fb      	ldr	r3, [r7, #12]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af02      	add	r7, sp, #8
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00f      	beq.n	800b2b6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d10a      	bne.n	800b2b2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	2203      	movs	r2, #3
 800b2a2:	9200      	str	r2, [sp, #0]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	f000 fadb 	bl	800b864 <xQueueGenericCreateStatic>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	e016      	b.n	800b2e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e014      	b.n	800b2e0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d110      	bne.n	800b2de <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b2bc:	2203      	movs	r2, #3
 800b2be:	2100      	movs	r1, #0
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	f000 fb56 	bl	800b972 <xQueueGenericCreate>
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d005      	beq.n	800b2da <osSemaphoreCreate+0x56>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fbfb 	bl	800bad0 <xQueueGenericSend>
      return sema;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	e000      	b.n	800b2e0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b2de:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b2fc:	2380      	movs	r3, #128	@ 0x80
 800b2fe:	e03a      	b.n	800b376 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30a:	d103      	bne.n	800b314 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b30c:	f04f 33ff 	mov.w	r3, #4294967295
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	e009      	b.n	800b328 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <osSemaphoreWait+0x40>
      ticks = 1;
 800b324:	2301      	movs	r3, #1
 800b326:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b328:	f7ff fe87 	bl	800b03a <inHandlerMode>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d017      	beq.n	800b362 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b332:	f107 0308 	add.w	r3, r7, #8
 800b336:	461a      	mov	r2, r3
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 f80e 	bl	800c35c <xQueueReceiveFromISR>
 800b340:	4603      	mov	r3, r0
 800b342:	2b01      	cmp	r3, #1
 800b344:	d001      	beq.n	800b34a <osSemaphoreWait+0x62>
      return osErrorOS;
 800b346:	23ff      	movs	r3, #255	@ 0xff
 800b348:	e015      	b.n	800b376 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d011      	beq.n	800b374 <osSemaphoreWait+0x8c>
 800b350:	4b0b      	ldr	r3, [pc, #44]	@ (800b380 <osSemaphoreWait+0x98>)
 800b352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	e008      	b.n	800b374 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fee1 	bl	800c12c <xQueueSemaphoreTake>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d001      	beq.n	800b374 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b370:	23ff      	movs	r3, #255	@ 0xff
 800b372:	e000      	b.n	800b376 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	e000ed04 	.word	0xe000ed04

0800b384 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b394:	f7ff fe51 	bl	800b03a <inHandlerMode>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d016      	beq.n	800b3cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b39e:	f107 0308 	add.w	r3, r7, #8
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fd40 	bl	800be2a <xQueueGiveFromISR>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d001      	beq.n	800b3b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b3b0:	23ff      	movs	r3, #255	@ 0xff
 800b3b2:	e017      	b.n	800b3e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d013      	beq.n	800b3e2 <osSemaphoreRelease+0x5e>
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ec <osSemaphoreRelease+0x68>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	e00a      	b.n	800b3e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fb7c 	bl	800bad0 <xQueueGenericSend>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d001      	beq.n	800b3e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b3de:	23ff      	movs	r3, #255	@ 0xff
 800b3e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b3f8:	f7ff fe1f 	bl	800b03a <inHandlerMode>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b402:	2382      	movs	r3, #130	@ 0x82
 800b404:	e003      	b.n	800b40e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 f872 	bl	800c4f0 <vQueueDelete>

  return osOK; 
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b416:	b590      	push	{r4, r7, lr}
 800b418:	b085      	sub	sp, #20
 800b41a:	af02      	add	r7, sp, #8
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d011      	beq.n	800b44c <osMessageCreate+0x36>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00d      	beq.n	800b44c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6859      	ldr	r1, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2400      	movs	r4, #0
 800b442:	9400      	str	r4, [sp, #0]
 800b444:	f000 fa0e 	bl	800b864 <xQueueGenericCreateStatic>
 800b448:	4603      	mov	r3, r0
 800b44a:	e008      	b.n	800b45e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	4619      	mov	r1, r3
 800b458:	f000 fa8b 	bl	800b972 <xQueueGenericCreate>
 800b45c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	bd90      	pop	{r4, r7, pc}
	...

0800b468 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b474:	2300      	movs	r3, #0
 800b476:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <osMessagePut+0x1e>
    ticks = 1;
 800b482:	2301      	movs	r3, #1
 800b484:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b486:	f7ff fdd8 	bl	800b03a <inHandlerMode>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d018      	beq.n	800b4c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b490:	f107 0210 	add.w	r2, r7, #16
 800b494:	f107 0108 	add.w	r1, r7, #8
 800b498:	2300      	movs	r3, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 fc22 	bl	800bce4 <xQueueGenericSendFromISR>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d001      	beq.n	800b4aa <osMessagePut+0x42>
      return osErrorOS;
 800b4a6:	23ff      	movs	r3, #255	@ 0xff
 800b4a8:	e018      	b.n	800b4dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d014      	beq.n	800b4da <osMessagePut+0x72>
 800b4b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e4 <osMessagePut+0x7c>)
 800b4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	e00b      	b.n	800b4da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b4c2:	f107 0108 	add.w	r1, r7, #8
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	697a      	ldr	r2, [r7, #20]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 fb00 	bl	800bad0 <xQueueGenericSend>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d001      	beq.n	800b4da <osMessagePut+0x72>
      return osErrorOS;
 800b4d6:	23ff      	movs	r3, #255	@ 0xff
 800b4d8:	e000      	b.n	800b4dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	e000ed04 	.word	0xe000ed04

0800b4e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b08b      	sub	sp, #44	@ 0x2c
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b502:	2380      	movs	r3, #128	@ 0x80
 800b504:	617b      	str	r3, [r7, #20]
    return event;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	461c      	mov	r4, r3
 800b50a:	f107 0314 	add.w	r3, r7, #20
 800b50e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b516:	e054      	b.n	800b5c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b518:	2300      	movs	r3, #0
 800b51a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b526:	d103      	bne.n	800b530 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b52e:	e009      	b.n	800b544 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d006      	beq.n	800b544 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <osMessageGet+0x5c>
      ticks = 1;
 800b540:	2301      	movs	r3, #1
 800b542:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b544:	f7ff fd79 	bl	800b03a <inHandlerMode>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01c      	beq.n	800b588 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b54e:	f107 0220 	add.w	r2, r7, #32
 800b552:	f107 0314 	add.w	r3, r7, #20
 800b556:	3304      	adds	r3, #4
 800b558:	4619      	mov	r1, r3
 800b55a:	68b8      	ldr	r0, [r7, #8]
 800b55c:	f000 fefe 	bl	800c35c <xQueueReceiveFromISR>
 800b560:	4603      	mov	r3, r0
 800b562:	2b01      	cmp	r3, #1
 800b564:	d102      	bne.n	800b56c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b566:	2310      	movs	r3, #16
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	e001      	b.n	800b570 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01d      	beq.n	800b5b2 <osMessageGet+0xca>
 800b576:	4b15      	ldr	r3, [pc, #84]	@ (800b5cc <osMessageGet+0xe4>)
 800b578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	e014      	b.n	800b5b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b588:	f107 0314 	add.w	r3, r7, #20
 800b58c:	3304      	adds	r3, #4
 800b58e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b590:	4619      	mov	r1, r3
 800b592:	68b8      	ldr	r0, [r7, #8]
 800b594:	f000 fce2 	bl	800bf5c <xQueueReceive>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d102      	bne.n	800b5a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b59e:	2310      	movs	r3, #16
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e006      	b.n	800b5b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <osMessageGet+0xc6>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e000      	b.n	800b5b0 <osMessageGet+0xc8>
 800b5ae:	2340      	movs	r3, #64	@ 0x40
 800b5b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	461c      	mov	r4, r3
 800b5b6:	f107 0314 	add.w	r3, r7, #20
 800b5ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b5be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	372c      	adds	r7, #44	@ 0x2c
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd90      	pop	{r4, r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	e000ed04 	.word	0xe000ed04

0800b5d0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b5d8:	f7ff fd2f 	bl	800b03a <inHandlerMode>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d004      	beq.n	800b5ec <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 ff63 	bl	800c4ae <uxQueueMessagesWaitingFromISR>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	e003      	b.n	800b5f4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 ff3d 	bl	800c46c <uxQueueMessagesWaiting>
 800b5f2:	4603      	mov	r3, r0
  }
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b604:	f7ff fd19 	bl	800b03a <inHandlerMode>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <osMessageDelete+0x16>
    return osErrorISR;
 800b60e:	2382      	movs	r3, #130	@ 0x82
 800b610:	e003      	b.n	800b61a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 ff6c 	bl	800c4f0 <vQueueDelete>

  return osOK; 
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f103 0208 	add.w	r2, r3, #8
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f103 0208 	add.w	r2, r3, #8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 0208 	add.w	r2, r3, #8
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	689a      	ldr	r2, [r3, #8]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	601a      	str	r2, [r3, #0]
}
 800b6b8:	bf00      	nop
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6da:	d103      	bne.n	800b6e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	e00c      	b.n	800b6fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e002      	b.n	800b6f2 <vListInsert+0x2e>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d2f6      	bcs.n	800b6ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	601a      	str	r2, [r3, #0]
}
 800b72a:	bf00      	nop
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	6892      	ldr	r2, [r2, #8]
 800b74c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	6852      	ldr	r2, [r2, #4]
 800b756:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d103      	bne.n	800b76a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	689a      	ldr	r2, [r3, #8]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	1e5a      	subs	r2, r3, #1
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3714      	adds	r7, #20
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
	...

0800b78c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10d      	bne.n	800b7bc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	b672      	cpsid	i
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	b662      	cpsie	i
 800b7b4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7b6:	bf00      	nop
 800b7b8:	bf00      	nop
 800b7ba:	e7fd      	b.n	800b7b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b7bc:	f002 f9a6 	bl	800db0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7c8:	68f9      	ldr	r1, [r7, #12]
 800b7ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7cc:	fb01 f303 	mul.w	r3, r1, r3
 800b7d0:	441a      	add	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	68f9      	ldr	r1, [r7, #12]
 800b7f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	441a      	add	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	22ff      	movs	r2, #255	@ 0xff
 800b800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	22ff      	movs	r2, #255	@ 0xff
 800b808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d114      	bne.n	800b83c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d01a      	beq.n	800b850 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3310      	adds	r3, #16
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fc56 	bl	800d0d0 <xTaskRemoveFromEventList>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d012      	beq.n	800b850 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b82a:	4b0d      	ldr	r3, [pc, #52]	@ (800b860 <xQueueGenericReset+0xd4>)
 800b82c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	e009      	b.n	800b850 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3310      	adds	r3, #16
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff feee 	bl	800b622 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3324      	adds	r3, #36	@ 0x24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fee9 	bl	800b622 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b850:	f002 f992 	bl	800db78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b854:	2301      	movs	r3, #1
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08e      	sub	sp, #56	@ 0x38
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10d      	bne.n	800b894 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87c:	b672      	cpsid	i
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	b662      	cpsie	i
 800b88c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b88e:	bf00      	nop
 800b890:	bf00      	nop
 800b892:	e7fd      	b.n	800b890 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10d      	bne.n	800b8b6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	b672      	cpsid	i
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	b662      	cpsie	i
 800b8ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <xQueueGenericCreateStatic+0x5e>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <xQueueGenericCreateStatic+0x62>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e000      	b.n	800b8c8 <xQueueGenericCreateStatic+0x64>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10d      	bne.n	800b8e8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	b672      	cpsid	i
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	b662      	cpsie	i
 800b8e0:	623b      	str	r3, [r7, #32]
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	e7fd      	b.n	800b8e4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <xQueueGenericCreateStatic+0x90>
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <xQueueGenericCreateStatic+0x94>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e000      	b.n	800b8fa <xQueueGenericCreateStatic+0x96>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10d      	bne.n	800b91a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	b672      	cpsid	i
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	b662      	cpsie	i
 800b912:	61fb      	str	r3, [r7, #28]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b91a:	2348      	movs	r3, #72	@ 0x48
 800b91c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b48      	cmp	r3, #72	@ 0x48
 800b922:	d00d      	beq.n	800b940 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b928:	b672      	cpsid	i
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	b662      	cpsie	i
 800b938:	61bb      	str	r3, [r7, #24]
}
 800b93a:	bf00      	nop
 800b93c:	bf00      	nop
 800b93e:	e7fd      	b.n	800b93c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b940:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00d      	beq.n	800b968 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b954:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	4613      	mov	r3, r2
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f000 f848 	bl	800b9f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3730      	adds	r7, #48	@ 0x30
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b972:	b580      	push	{r7, lr}
 800b974:	b08a      	sub	sp, #40	@ 0x28
 800b976:	af02      	add	r7, sp, #8
 800b978:	60f8      	str	r0, [r7, #12]
 800b97a:	60b9      	str	r1, [r7, #8]
 800b97c:	4613      	mov	r3, r2
 800b97e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10d      	bne.n	800b9a2 <xQueueGenericCreate+0x30>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98a:	b672      	cpsid	i
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	b662      	cpsie	i
 800b99a:	613b      	str	r3, [r7, #16]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e004      	b.n	800b9b8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	fb02 f303 	mul.w	r3, r2, r3
 800b9b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9b8:	69fb      	ldr	r3, [r7, #28]
 800b9ba:	3348      	adds	r3, #72	@ 0x48
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f002 f9d3 	bl	800dd68 <pvPortMalloc>
 800b9c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d011      	beq.n	800b9ee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	3348      	adds	r3, #72	@ 0x48
 800b9d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9dc:	79fa      	ldrb	r2, [r7, #7]
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	68b9      	ldr	r1, [r7, #8]
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f000 f805 	bl	800b9f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3720      	adds	r7, #32
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	601a      	str	r2, [r3, #0]
 800ba12:	e002      	b.n	800ba1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba26:	2101      	movs	r1, #1
 800ba28:	69b8      	ldr	r0, [r7, #24]
 800ba2a:	f7ff feaf 	bl	800b78c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba2e:	bf00      	nop
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00e      	beq.n	800ba62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba56:	2300      	movs	r3, #0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f837 	bl	800bad0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b086      	sub	sp, #24
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	4603      	mov	r3, r0
 800ba72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	6939      	ldr	r1, [r7, #16]
 800ba82:	6978      	ldr	r0, [r7, #20]
 800ba84:	f7ff ff75 	bl	800b972 <xQueueGenericCreate>
 800ba88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f7ff ffd3 	bl	800ba36 <prvInitialiseMutex>

		return xNewQueue;
 800ba90:	68fb      	ldr	r3, [r7, #12]
	}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b088      	sub	sp, #32
 800ba9e:	af02      	add	r7, sp, #8
 800baa0:	4603      	mov	r3, r0
 800baa2:	6039      	str	r1, [r7, #0]
 800baa4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800baa6:	2301      	movs	r3, #1
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	2300      	movs	r3, #0
 800baac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800baae:	79fb      	ldrb	r3, [r7, #7]
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2200      	movs	r2, #0
 800bab6:	6939      	ldr	r1, [r7, #16]
 800bab8:	6978      	ldr	r0, [r7, #20]
 800baba:	f7ff fed3 	bl	800b864 <xQueueGenericCreateStatic>
 800babe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f7ff ffb8 	bl	800ba36 <prvInitialiseMutex>

		return xNewQueue;
 800bac6:	68fb      	ldr	r3, [r7, #12]
	}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08e      	sub	sp, #56	@ 0x38
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bade:	2300      	movs	r3, #0
 800bae0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d10d      	bne.n	800bb08 <xQueueGenericSend+0x38>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf0:	b672      	cpsid	i
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	b662      	cpsie	i
 800bb00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bb02:	bf00      	nop
 800bb04:	bf00      	nop
 800bb06:	e7fd      	b.n	800bb04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <xQueueGenericSend+0x46>
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <xQueueGenericSend+0x4a>
 800bb16:	2301      	movs	r3, #1
 800bb18:	e000      	b.n	800bb1c <xQueueGenericSend+0x4c>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10d      	bne.n	800bb3c <xQueueGenericSend+0x6c>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	b672      	cpsid	i
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	b662      	cpsie	i
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
 800bb3a:	e7fd      	b.n	800bb38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d103      	bne.n	800bb4a <xQueueGenericSend+0x7a>
 800bb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d101      	bne.n	800bb4e <xQueueGenericSend+0x7e>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <xQueueGenericSend+0x80>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10d      	bne.n	800bb70 <xQueueGenericSend+0xa0>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	b672      	cpsid	i
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	b662      	cpsie	i
 800bb68:	623b      	str	r3, [r7, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	e7fd      	b.n	800bb6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb70:	f001 fc7c 	bl	800d46c <xTaskGetSchedulerState>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <xQueueGenericSend+0xb0>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <xQueueGenericSend+0xb4>
 800bb80:	2301      	movs	r3, #1
 800bb82:	e000      	b.n	800bb86 <xQueueGenericSend+0xb6>
 800bb84:	2300      	movs	r3, #0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10d      	bne.n	800bba6 <xQueueGenericSend+0xd6>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8e:	b672      	cpsid	i
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	b662      	cpsie	i
 800bb9e:	61fb      	str	r3, [r7, #28]
}
 800bba0:	bf00      	nop
 800bba2:	bf00      	nop
 800bba4:	e7fd      	b.n	800bba2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bba6:	f001 ffb1 	bl	800db0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d302      	bcc.n	800bbbc <xQueueGenericSend+0xec>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d129      	bne.n	800bc10 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	68b9      	ldr	r1, [r7, #8]
 800bbc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bbc2:	f000 fcd3 	bl	800c56c <prvCopyDataToQueue>
 800bbc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d010      	beq.n	800bbf2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbd2:	3324      	adds	r3, #36	@ 0x24
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 fa7b 	bl	800d0d0 <xTaskRemoveFromEventList>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d013      	beq.n	800bc08 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbe0:	4b3f      	ldr	r3, [pc, #252]	@ (800bce0 <xQueueGenericSend+0x210>)
 800bbe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	e00a      	b.n	800bc08 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d007      	beq.n	800bc08 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bbf8:	4b39      	ldr	r3, [pc, #228]	@ (800bce0 <xQueueGenericSend+0x210>)
 800bbfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc08:	f001 ffb6 	bl	800db78 <vPortExitCritical>
				return pdPASS;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e063      	b.n	800bcd8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d103      	bne.n	800bc1e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc16:	f001 ffaf 	bl	800db78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e05c      	b.n	800bcd8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc24:	f107 0314 	add.w	r3, r7, #20
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f001 fab7 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc32:	f001 ffa1 	bl	800db78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc36:	f001 f831 	bl	800cc9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc3a:	f001 ff67 	bl	800db0c <vPortEnterCritical>
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc44:	b25b      	sxtb	r3, r3
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d103      	bne.n	800bc54 <xQueueGenericSend+0x184>
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d103      	bne.n	800bc6a <xQueueGenericSend+0x19a>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc6a:	f001 ff85 	bl	800db78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc6e:	1d3a      	adds	r2, r7, #4
 800bc70:	f107 0314 	add.w	r3, r7, #20
 800bc74:	4611      	mov	r1, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	f001 faa6 	bl	800d1c8 <xTaskCheckForTimeOut>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d124      	bne.n	800bccc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc84:	f000 fd6a 	bl	800c75c <prvIsQueueFull>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d018      	beq.n	800bcc0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc90:	3310      	adds	r3, #16
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 f9f2 	bl	800d080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc9e:	f000 fcf5 	bl	800c68c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bca2:	f001 f809 	bl	800ccb8 <xTaskResumeAll>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f47f af7c 	bne.w	800bba6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bcae:	4b0c      	ldr	r3, [pc, #48]	@ (800bce0 <xQueueGenericSend+0x210>)
 800bcb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	e772      	b.n	800bba6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcc2:	f000 fce3 	bl	800c68c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcc6:	f000 fff7 	bl	800ccb8 <xTaskResumeAll>
 800bcca:	e76c      	b.n	800bba6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcce:	f000 fcdd 	bl	800c68c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcd2:	f000 fff1 	bl	800ccb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3738      	adds	r7, #56	@ 0x38
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08e      	sub	sp, #56	@ 0x38
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10d      	bne.n	800bd18 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800bcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd00:	b672      	cpsid	i
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	b662      	cpsie	i
 800bd10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d103      	bne.n	800bd26 <xQueueGenericSendFromISR+0x42>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <xQueueGenericSendFromISR+0x46>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e000      	b.n	800bd2c <xQueueGenericSendFromISR+0x48>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10d      	bne.n	800bd4c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	b672      	cpsid	i
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	b662      	cpsie	i
 800bd44:	623b      	str	r3, [r7, #32]
}
 800bd46:	bf00      	nop
 800bd48:	bf00      	nop
 800bd4a:	e7fd      	b.n	800bd48 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d103      	bne.n	800bd5a <xQueueGenericSendFromISR+0x76>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d101      	bne.n	800bd5e <xQueueGenericSendFromISR+0x7a>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e000      	b.n	800bd60 <xQueueGenericSendFromISR+0x7c>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10d      	bne.n	800bd80 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	b672      	cpsid	i
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	b662      	cpsie	i
 800bd78:	61fb      	str	r3, [r7, #28]
}
 800bd7a:	bf00      	nop
 800bd7c:	bf00      	nop
 800bd7e:	e7fd      	b.n	800bd7c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd80:	f001 ffac 	bl	800dcdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd84:	f3ef 8211 	mrs	r2, BASEPRI
 800bd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	61ba      	str	r2, [r7, #24]
 800bd9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bda0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bda2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d302      	bcc.n	800bdb6 <xQueueGenericSendFromISR+0xd2>
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d12c      	bne.n	800be10 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdc0:	683a      	ldr	r2, [r7, #0]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdc6:	f000 fbd1 	bl	800c56c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d112      	bne.n	800bdfa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d016      	beq.n	800be0a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdde:	3324      	adds	r3, #36	@ 0x24
 800bde0:	4618      	mov	r0, r3
 800bde2:	f001 f975 	bl	800d0d0 <xTaskRemoveFromEventList>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00e      	beq.n	800be0a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d00b      	beq.n	800be0a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	e007      	b.n	800be0a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bdfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdfe:	3301      	adds	r3, #1
 800be00:	b2db      	uxtb	r3, r3
 800be02:	b25a      	sxtb	r2, r3
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800be0a:	2301      	movs	r3, #1
 800be0c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800be0e:	e001      	b.n	800be14 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be10:	2300      	movs	r3, #0
 800be12:	637b      	str	r3, [r7, #52]	@ 0x34
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800be22:	4618      	mov	r0, r3
 800be24:	3738      	adds	r7, #56	@ 0x38
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b08e      	sub	sp, #56	@ 0x38
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10d      	bne.n	800be5a <xQueueGiveFromISR+0x30>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	b672      	cpsid	i
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	b662      	cpsie	i
 800be52:	623b      	str	r3, [r7, #32]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00d      	beq.n	800be7e <xQueueGiveFromISR+0x54>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be66:	b672      	cpsid	i
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	b662      	cpsie	i
 800be76:	61fb      	str	r3, [r7, #28]
}
 800be78:	bf00      	nop
 800be7a:	bf00      	nop
 800be7c:	e7fd      	b.n	800be7a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d103      	bne.n	800be8e <xQueueGiveFromISR+0x64>
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <xQueueGiveFromISR+0x68>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGiveFromISR+0x6a>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10d      	bne.n	800beb4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	b672      	cpsid	i
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	b662      	cpsie	i
 800beac:	61bb      	str	r3, [r7, #24]
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beb4:	f001 ff12 	bl	800dcdc <vPortValidateInterruptPriority>
	__asm volatile
 800beb8:	f3ef 8211 	mrs	r2, BASEPRI
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	b672      	cpsid	i
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	b662      	cpsie	i
 800bed0:	617a      	str	r2, [r7, #20]
 800bed2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bed4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bedc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d22b      	bcs.n	800bf40 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800beee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800befa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d112      	bne.n	800bf2a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d016      	beq.n	800bf3a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	3324      	adds	r3, #36	@ 0x24
 800bf10:	4618      	mov	r0, r3
 800bf12:	f001 f8dd 	bl	800d0d0 <xTaskRemoveFromEventList>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00e      	beq.n	800bf3a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00b      	beq.n	800bf3a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2201      	movs	r2, #1
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e007      	b.n	800bf3a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf2e:	3301      	adds	r3, #1
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	b25a      	sxtb	r2, r3
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf3e:	e001      	b.n	800bf44 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf46:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f383 8811 	msr	BASEPRI, r3
}
 800bf4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3738      	adds	r7, #56	@ 0x38
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
	...

0800bf5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08c      	sub	sp, #48	@ 0x30
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10d      	bne.n	800bf92 <xQueueReceive+0x36>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7a:	b672      	cpsid	i
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	b662      	cpsie	i
 800bf8a:	623b      	str	r3, [r7, #32]
}
 800bf8c:	bf00      	nop
 800bf8e:	bf00      	nop
 800bf90:	e7fd      	b.n	800bf8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <xQueueReceive+0x44>
 800bf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <xQueueReceive+0x48>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <xQueueReceive+0x4a>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10d      	bne.n	800bfc6 <xQueueReceive+0x6a>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfae:	b672      	cpsid	i
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	b662      	cpsie	i
 800bfbe:	61fb      	str	r3, [r7, #28]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc6:	f001 fa51 	bl	800d46c <xTaskGetSchedulerState>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <xQueueReceive+0x7a>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <xQueueReceive+0x7e>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <xQueueReceive+0x80>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10d      	bne.n	800bffc <xQueueReceive+0xa0>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	61bb      	str	r3, [r7, #24]
}
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
 800bffa:	e7fd      	b.n	800bff8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bffc:	f001 fd86 	bl	800db0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01f      	beq.n	800c04c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c010:	f000 fb16 	bl	800c640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	1e5a      	subs	r2, r3, #1
 800c018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00f      	beq.n	800c044 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	3310      	adds	r3, #16
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 f851 	bl	800d0d0 <xTaskRemoveFromEventList>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d007      	beq.n	800c044 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c034:	4b3c      	ldr	r3, [pc, #240]	@ (800c128 <xQueueReceive+0x1cc>)
 800c036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c044:	f001 fd98 	bl	800db78 <vPortExitCritical>
				return pdPASS;
 800c048:	2301      	movs	r3, #1
 800c04a:	e069      	b.n	800c120 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d103      	bne.n	800c05a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c052:	f001 fd91 	bl	800db78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c056:	2300      	movs	r3, #0
 800c058:	e062      	b.n	800c120 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c060:	f107 0310 	add.w	r3, r7, #16
 800c064:	4618      	mov	r0, r3
 800c066:	f001 f899 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c06a:	2301      	movs	r3, #1
 800c06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c06e:	f001 fd83 	bl	800db78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c072:	f000 fe13 	bl	800cc9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c076:	f001 fd49 	bl	800db0c <vPortEnterCritical>
 800c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c080:	b25b      	sxtb	r3, r3
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d103      	bne.n	800c090 <xQueueReceive+0x134>
 800c088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c096:	b25b      	sxtb	r3, r3
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09c:	d103      	bne.n	800c0a6 <xQueueReceive+0x14a>
 800c09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0a6:	f001 fd67 	bl	800db78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0aa:	1d3a      	adds	r2, r7, #4
 800c0ac:	f107 0310 	add.w	r3, r7, #16
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 f888 	bl	800d1c8 <xTaskCheckForTimeOut>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d123      	bne.n	800c106 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0c0:	f000 fb36 	bl	800c730 <prvIsQueueEmpty>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d017      	beq.n	800c0fa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0cc:	3324      	adds	r3, #36	@ 0x24
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4611      	mov	r1, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 ffd4 	bl	800d080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0da:	f000 fad7 	bl	800c68c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0de:	f000 fdeb 	bl	800ccb8 <xTaskResumeAll>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d189      	bne.n	800bffc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c128 <xQueueReceive+0x1cc>)
 800c0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	e780      	b.n	800bffc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0fc:	f000 fac6 	bl	800c68c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c100:	f000 fdda 	bl	800ccb8 <xTaskResumeAll>
 800c104:	e77a      	b.n	800bffc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c106:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c108:	f000 fac0 	bl	800c68c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c10c:	f000 fdd4 	bl	800ccb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c112:	f000 fb0d 	bl	800c730 <prvIsQueueEmpty>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f43f af6f 	beq.w	800bffc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c11e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c120:	4618      	mov	r0, r3
 800c122:	3730      	adds	r7, #48	@ 0x30
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	e000ed04 	.word	0xe000ed04

0800c12c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b08e      	sub	sp, #56	@ 0x38
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c136:	2300      	movs	r3, #0
 800c138:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10d      	bne.n	800c164 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	b672      	cpsid	i
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	b662      	cpsie	i
 800c15c:	623b      	str	r3, [r7, #32]
}
 800c15e:	bf00      	nop
 800c160:	bf00      	nop
 800c162:	e7fd      	b.n	800c160 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00d      	beq.n	800c188 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c170:	b672      	cpsid	i
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	b662      	cpsie	i
 800c180:	61fb      	str	r3, [r7, #28]
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	e7fd      	b.n	800c184 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c188:	f001 f970 	bl	800d46c <xTaskGetSchedulerState>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d102      	bne.n	800c198 <xQueueSemaphoreTake+0x6c>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d101      	bne.n	800c19c <xQueueSemaphoreTake+0x70>
 800c198:	2301      	movs	r3, #1
 800c19a:	e000      	b.n	800c19e <xQueueSemaphoreTake+0x72>
 800c19c:	2300      	movs	r3, #0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10d      	bne.n	800c1be <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a6:	b672      	cpsid	i
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	b662      	cpsie	i
 800c1b6:	61bb      	str	r3, [r7, #24]
}
 800c1b8:	bf00      	nop
 800c1ba:	bf00      	nop
 800c1bc:	e7fd      	b.n	800c1ba <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1be:	f001 fca5 	bl	800db0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d024      	beq.n	800c218 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	1e5a      	subs	r2, r3, #1
 800c1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d104      	bne.n	800c1e8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1de:	f001 fb0f 	bl	800d800 <pvTaskIncrementMutexHeldCount>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d00f      	beq.n	800c210 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f2:	3310      	adds	r3, #16
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 ff6b 	bl	800d0d0 <xTaskRemoveFromEventList>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d007      	beq.n	800c210 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c200:	4b55      	ldr	r3, [pc, #340]	@ (800c358 <xQueueSemaphoreTake+0x22c>)
 800c202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c210:	f001 fcb2 	bl	800db78 <vPortExitCritical>
				return pdPASS;
 800c214:	2301      	movs	r3, #1
 800c216:	e09a      	b.n	800c34e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d114      	bne.n	800c248 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00d      	beq.n	800c240 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c228:	b672      	cpsid	i
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	b662      	cpsie	i
 800c238:	617b      	str	r3, [r7, #20]
}
 800c23a:	bf00      	nop
 800c23c:	bf00      	nop
 800c23e:	e7fd      	b.n	800c23c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c240:	f001 fc9a 	bl	800db78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c244:	2300      	movs	r3, #0
 800c246:	e082      	b.n	800c34e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c24e:	f107 030c 	add.w	r3, r7, #12
 800c252:	4618      	mov	r0, r3
 800c254:	f000 ffa2 	bl	800d19c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c258:	2301      	movs	r3, #1
 800c25a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c25c:	f001 fc8c 	bl	800db78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c260:	f000 fd1c 	bl	800cc9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c264:	f001 fc52 	bl	800db0c <vPortEnterCritical>
 800c268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c26a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c26e:	b25b      	sxtb	r3, r3
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c274:	d103      	bne.n	800c27e <xQueueSemaphoreTake+0x152>
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	2200      	movs	r2, #0
 800c27a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c284:	b25b      	sxtb	r3, r3
 800c286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28a:	d103      	bne.n	800c294 <xQueueSemaphoreTake+0x168>
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c294:	f001 fc70 	bl	800db78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c298:	463a      	mov	r2, r7
 800c29a:	f107 030c 	add.w	r3, r7, #12
 800c29e:	4611      	mov	r1, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 ff91 	bl	800d1c8 <xTaskCheckForTimeOut>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d132      	bne.n	800c312 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2ae:	f000 fa3f 	bl	800c730 <prvIsQueueEmpty>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d026      	beq.n	800c306 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d109      	bne.n	800c2d4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c2c0:	f001 fc24 	bl	800db0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 f8ed 	bl	800d4a8 <xTaskPriorityInherit>
 800c2ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c2d0:	f001 fc52 	bl	800db78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d6:	3324      	adds	r3, #36	@ 0x24
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fecf 	bl	800d080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2e4:	f000 f9d2 	bl	800c68c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2e8:	f000 fce6 	bl	800ccb8 <xTaskResumeAll>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f47f af65 	bne.w	800c1be <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c2f4:	4b18      	ldr	r3, [pc, #96]	@ (800c358 <xQueueSemaphoreTake+0x22c>)
 800c2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	e75b      	b.n	800c1be <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c308:	f000 f9c0 	bl	800c68c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c30c:	f000 fcd4 	bl	800ccb8 <xTaskResumeAll>
 800c310:	e755      	b.n	800c1be <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c314:	f000 f9ba 	bl	800c68c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c318:	f000 fcce 	bl	800ccb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c31c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c31e:	f000 fa07 	bl	800c730 <prvIsQueueEmpty>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	f43f af4a 	beq.w	800c1be <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00d      	beq.n	800c34c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c330:	f001 fbec 	bl	800db0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c336:	f000 f901 	bl	800c53c <prvGetDisinheritPriorityAfterTimeout>
 800c33a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c342:	4618      	mov	r0, r3
 800c344:	f001 f9bc 	bl	800d6c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c348:	f001 fc16 	bl	800db78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c34c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3738      	adds	r7, #56	@ 0x38
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	e000ed04 	.word	0xe000ed04

0800c35c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08e      	sub	sp, #56	@ 0x38
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10d      	bne.n	800c38e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	b672      	cpsid	i
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	b662      	cpsie	i
 800c386:	623b      	str	r3, [r7, #32]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d103      	bne.n	800c39c <xQueueReceiveFromISR+0x40>
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <xQueueReceiveFromISR+0x44>
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <xQueueReceiveFromISR+0x46>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10d      	bne.n	800c3c2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	b672      	cpsid	i
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	b662      	cpsie	i
 800c3ba:	61fb      	str	r3, [r7, #28]
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	e7fd      	b.n	800c3be <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3c2:	f001 fc8b 	bl	800dcdc <vPortValidateInterruptPriority>
	__asm volatile
 800c3c6:	f3ef 8211 	mrs	r2, BASEPRI
 800c3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ce:	b672      	cpsid	i
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	b662      	cpsie	i
 800c3de:	61ba      	str	r2, [r7, #24]
 800c3e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d02f      	beq.n	800c452 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3fc:	68b9      	ldr	r1, [r7, #8]
 800c3fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c400:	f000 f91e 	bl	800c640 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c406:	1e5a      	subs	r2, r3, #1
 800c408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c414:	d112      	bne.n	800c43c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d016      	beq.n	800c44c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c420:	3310      	adds	r3, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fe54 	bl	800d0d0 <xTaskRemoveFromEventList>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00e      	beq.n	800c44c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	e007      	b.n	800c44c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c43c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c440:	3301      	adds	r3, #1
 800c442:	b2db      	uxtb	r3, r3
 800c444:	b25a      	sxtb	r2, r3
 800c446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c44c:	2301      	movs	r3, #1
 800c44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c450:	e001      	b.n	800c456 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c452:	2300      	movs	r3, #0
 800c454:	637b      	str	r3, [r7, #52]	@ 0x34
 800c456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f383 8811 	msr	BASEPRI, r3
}
 800c460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c464:	4618      	mov	r0, r3
 800c466:	3738      	adds	r7, #56	@ 0x38
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10d      	bne.n	800c496 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	b672      	cpsid	i
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	b662      	cpsie	i
 800c48e:	60bb      	str	r3, [r7, #8]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800c496:	f001 fb39 	bl	800db0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c49e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c4a0:	f001 fb6a 	bl	800db78 <vPortExitCritical>

	return uxReturn;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b087      	sub	sp, #28
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10d      	bne.n	800c4dc <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	b672      	cpsid	i
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	b662      	cpsie	i
 800c4d4:	60fb      	str	r3, [r7, #12]
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	e7fd      	b.n	800c4d8 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c4e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	371c      	adds	r7, #28
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10d      	bne.n	800c51e <vQueueDelete+0x2e>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	b672      	cpsid	i
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	b662      	cpsie	i
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 f934 	bl	800c78c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d102      	bne.n	800c534 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f001 fce8 	bl	800df04 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d006      	beq.n	800c55a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f1c3 0307 	rsb	r3, r3, #7
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	e001      	b.n	800c55e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c55e:	68fb      	ldr	r3, [r7, #12]
	}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c578:	2300      	movs	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c586:	2b00      	cmp	r3, #0
 800c588:	d10d      	bne.n	800c5a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d14d      	bne.n	800c62e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	4618      	mov	r0, r3
 800c598:	f001 f806 	bl	800d5a8 <xTaskPriorityDisinherit>
 800c59c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	609a      	str	r2, [r3, #8]
 800c5a4:	e043      	b.n	800c62e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d119      	bne.n	800c5e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6858      	ldr	r0, [r3, #4]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	f011 f923 	bl	801d802 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5c4:	441a      	add	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d32b      	bcc.n	800c62e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	605a      	str	r2, [r3, #4]
 800c5de:	e026      	b.n	800c62e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68d8      	ldr	r0, [r3, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	f011 f909 	bl	801d802 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	68da      	ldr	r2, [r3, #12]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f8:	425b      	negs	r3, r3
 800c5fa:	441a      	add	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	68da      	ldr	r2, [r3, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d207      	bcs.n	800c61c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689a      	ldr	r2, [r3, #8]
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c614:	425b      	negs	r3, r3
 800c616:	441a      	add	r2, r3
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d105      	bne.n	800c62e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c636:	697b      	ldr	r3, [r7, #20]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d018      	beq.n	800c684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68da      	ldr	r2, [r3, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c65a:	441a      	add	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68da      	ldr	r2, [r3, #12]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d303      	bcc.n	800c674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68d9      	ldr	r1, [r3, #12]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67c:	461a      	mov	r2, r3
 800c67e:	6838      	ldr	r0, [r7, #0]
 800c680:	f011 f8bf 	bl	801d802 <memcpy>
	}
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c694:	f001 fa3a 	bl	800db0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c69e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6a0:	e011      	b.n	800c6c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d012      	beq.n	800c6d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	3324      	adds	r3, #36	@ 0x24
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fd0e 	bl	800d0d0 <xTaskRemoveFromEventList>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6ba:	f000 fded 	bl	800d298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dce9      	bgt.n	800c6a2 <prvUnlockQueue+0x16>
 800c6ce:	e000      	b.n	800c6d2 <prvUnlockQueue+0x46>
					break;
 800c6d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	22ff      	movs	r2, #255	@ 0xff
 800c6d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c6da:	f001 fa4d 	bl	800db78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6de:	f001 fa15 	bl	800db0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6ea:	e011      	b.n	800c710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d012      	beq.n	800c71a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3310      	adds	r3, #16
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 fce9 	bl	800d0d0 <xTaskRemoveFromEventList>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c704:	f000 fdc8 	bl	800d298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c708:	7bbb      	ldrb	r3, [r7, #14]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c714:	2b00      	cmp	r3, #0
 800c716:	dce9      	bgt.n	800c6ec <prvUnlockQueue+0x60>
 800c718:	e000      	b.n	800c71c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c71a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	22ff      	movs	r2, #255	@ 0xff
 800c720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c724:	f001 fa28 	bl	800db78 <vPortExitCritical>
}
 800c728:	bf00      	nop
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c738:	f001 f9e8 	bl	800db0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c740:	2b00      	cmp	r3, #0
 800c742:	d102      	bne.n	800c74a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c744:	2301      	movs	r3, #1
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e001      	b.n	800c74e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c74e:	f001 fa13 	bl	800db78 <vPortExitCritical>

	return xReturn;
 800c752:	68fb      	ldr	r3, [r7, #12]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c764:	f001 f9d2 	bl	800db0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c770:	429a      	cmp	r2, r3
 800c772:	d102      	bne.n	800c77a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	e001      	b.n	800c77e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c77e:	f001 f9fb 	bl	800db78 <vPortExitCritical>

	return xReturn;
 800c782:	68fb      	ldr	r3, [r7, #12]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	e016      	b.n	800c7c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c79a:	4a10      	ldr	r2, [pc, #64]	@ (800c7dc <vQueueUnregisterQueue+0x50>)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	00db      	lsls	r3, r3, #3
 800c7a0:	4413      	add	r3, r2
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d10b      	bne.n	800c7c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800c7dc <vQueueUnregisterQueue+0x50>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c7b4:	4a09      	ldr	r2, [pc, #36]	@ (800c7dc <vQueueUnregisterQueue+0x50>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	4413      	add	r3, r2
 800c7bc:	2200      	movs	r2, #0
 800c7be:	605a      	str	r2, [r3, #4]
				break;
 800c7c0:	e006      	b.n	800c7d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b07      	cmp	r3, #7
 800c7cc:	d9e5      	bls.n	800c79a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	20005354 	.word	0x20005354

0800c7e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08e      	sub	sp, #56	@ 0x38
 800c7e4:	af04      	add	r7, sp, #16
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10d      	bne.n	800c810 <xTaskCreateStatic+0x30>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f8:	b672      	cpsid	i
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	b662      	cpsie	i
 800c808:	623b      	str	r3, [r7, #32]
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	e7fd      	b.n	800c80c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10d      	bne.n	800c832 <xTaskCreateStatic+0x52>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	b672      	cpsid	i
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	b662      	cpsie	i
 800c82a:	61fb      	str	r3, [r7, #28]
}
 800c82c:	bf00      	nop
 800c82e:	bf00      	nop
 800c830:	e7fd      	b.n	800c82e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c832:	23a0      	movs	r3, #160	@ 0xa0
 800c834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	2ba0      	cmp	r3, #160	@ 0xa0
 800c83a:	d00d      	beq.n	800c858 <xTaskCreateStatic+0x78>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c840:	b672      	cpsid	i
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	b662      	cpsie	i
 800c850:	61bb      	str	r3, [r7, #24]
}
 800c852:	bf00      	nop
 800c854:	bf00      	nop
 800c856:	e7fd      	b.n	800c854 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c858:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01e      	beq.n	800c89e <xTaskCreateStatic+0xbe>
 800c860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c862:	2b00      	cmp	r3, #0
 800c864:	d01b      	beq.n	800c89e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c86e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c872:	2202      	movs	r2, #2
 800c874:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c878:	2300      	movs	r3, #0
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	f107 0314 	add.w	r3, r7, #20
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c888:	9300      	str	r3, [sp, #0]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	68b9      	ldr	r1, [r7, #8]
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f000 f851 	bl	800c938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c898:	f000 f8f0 	bl	800ca7c <prvAddNewTaskToReadyList>
 800c89c:	e001      	b.n	800c8a2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8a2:	697b      	ldr	r3, [r7, #20]
	}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3728      	adds	r7, #40	@ 0x28
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	@ 0x30
 800c8b0:	af04      	add	r7, sp, #16
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	603b      	str	r3, [r7, #0]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8bc:	88fb      	ldrh	r3, [r7, #6]
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f001 fa51 	bl	800dd68 <pvPortMalloc>
 800c8c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00e      	beq.n	800c8ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8ce:	20a0      	movs	r0, #160	@ 0xa0
 800c8d0:	f001 fa4a 	bl	800dd68 <pvPortMalloc>
 800c8d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8e2:	e005      	b.n	800c8f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8e4:	6978      	ldr	r0, [r7, #20]
 800c8e6:	f001 fb0d 	bl	800df04 <vPortFree>
 800c8ea:	e001      	b.n	800c8f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d017      	beq.n	800c926 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8fe:	88fa      	ldrh	r2, [r7, #6]
 800c900:	2300      	movs	r3, #0
 800c902:	9303      	str	r3, [sp, #12]
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	9302      	str	r3, [sp, #8]
 800c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 f80f 	bl	800c938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c91a:	69f8      	ldr	r0, [r7, #28]
 800c91c:	f000 f8ae 	bl	800ca7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c920:	2301      	movs	r3, #1
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	e002      	b.n	800c92c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c926:	f04f 33ff 	mov.w	r3, #4294967295
 800c92a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c92c:	69bb      	ldr	r3, [r7, #24]
	}
 800c92e:	4618      	mov	r0, r3
 800c930:	3720      	adds	r7, #32
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b088      	sub	sp, #32
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c94a:	6879      	ldr	r1, [r7, #4]
 800c94c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c950:	440b      	add	r3, r1
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	f023 0307 	bic.w	r3, r3, #7
 800c95e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f003 0307 	and.w	r3, r3, #7
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00d      	beq.n	800c986 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96e:	b672      	cpsid	i
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	b662      	cpsie	i
 800c97e:	617b      	str	r3, [r7, #20]
}
 800c980:	bf00      	nop
 800c982:	bf00      	nop
 800c984:	e7fd      	b.n	800c982 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01f      	beq.n	800c9cc <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c98c:	2300      	movs	r3, #0
 800c98e:	61fb      	str	r3, [r7, #28]
 800c990:	e012      	b.n	800c9b8 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	4413      	add	r3, r2
 800c998:	7819      	ldrb	r1, [r3, #0]
 800c99a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	4413      	add	r3, r2
 800c9a0:	3334      	adds	r3, #52	@ 0x34
 800c9a2:	460a      	mov	r2, r1
 800c9a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d006      	beq.n	800c9c0 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	2b0f      	cmp	r3, #15
 800c9bc:	d9e9      	bls.n	800c992 <prvInitialiseNewTask+0x5a>
 800c9be:	e000      	b.n	800c9c2 <prvInitialiseNewTask+0x8a>
			{
				break;
 800c9c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c9ca:	e003      	b.n	800c9d4 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d901      	bls.n	800c9de <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9da:	2306      	movs	r3, #6
 800c9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fe34 	bl	800b662 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fc:	3318      	adds	r3, #24
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fe2f 	bl	800b662 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0c:	f1c3 0207 	rsb	r2, r3, #7
 800ca10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2c:	334c      	adds	r3, #76	@ 0x4c
 800ca2e:	224c      	movs	r2, #76	@ 0x4c
 800ca30:	2100      	movs	r1, #0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f010 fdf7 	bl	801d626 <memset>
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ca70 <prvInitialiseNewTask+0x138>)
 800ca3c:	651a      	str	r2, [r3, #80]	@ 0x50
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca40:	4a0c      	ldr	r2, [pc, #48]	@ (800ca74 <prvInitialiseNewTask+0x13c>)
 800ca42:	655a      	str	r2, [r3, #84]	@ 0x54
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	4a0c      	ldr	r2, [pc, #48]	@ (800ca78 <prvInitialiseNewTask+0x140>)
 800ca48:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	68f9      	ldr	r1, [r7, #12]
 800ca4e:	69b8      	ldr	r0, [r7, #24]
 800ca50:	f000 ff50 	bl	800d8f4 <pxPortInitialiseStack>
 800ca54:	4602      	mov	r2, r0
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca66:	bf00      	nop
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	2000f4f4 	.word	0x2000f4f4
 800ca74:	2000f55c 	.word	0x2000f55c
 800ca78:	2000f5c4 	.word	0x2000f5c4

0800ca7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca84:	f001 f842 	bl	800db0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca88:	4b2a      	ldr	r3, [pc, #168]	@ (800cb34 <prvAddNewTaskToReadyList+0xb8>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	4a29      	ldr	r2, [pc, #164]	@ (800cb34 <prvAddNewTaskToReadyList+0xb8>)
 800ca90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca92:	4b29      	ldr	r3, [pc, #164]	@ (800cb38 <prvAddNewTaskToReadyList+0xbc>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d109      	bne.n	800caae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca9a:	4a27      	ldr	r2, [pc, #156]	@ (800cb38 <prvAddNewTaskToReadyList+0xbc>)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800caa0:	4b24      	ldr	r3, [pc, #144]	@ (800cb34 <prvAddNewTaskToReadyList+0xb8>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d110      	bne.n	800caca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800caa8:	f000 fc1a 	bl	800d2e0 <prvInitialiseTaskLists>
 800caac:	e00d      	b.n	800caca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800caae:	4b23      	ldr	r3, [pc, #140]	@ (800cb3c <prvAddNewTaskToReadyList+0xc0>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cab6:	4b20      	ldr	r3, [pc, #128]	@ (800cb38 <prvAddNewTaskToReadyList+0xbc>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d802      	bhi.n	800caca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cac4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb38 <prvAddNewTaskToReadyList+0xbc>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caca:	4b1d      	ldr	r3, [pc, #116]	@ (800cb40 <prvAddNewTaskToReadyList+0xc4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3301      	adds	r3, #1
 800cad0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb40 <prvAddNewTaskToReadyList+0xc4>)
 800cad2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cad8:	2201      	movs	r2, #1
 800cada:	409a      	lsls	r2, r3
 800cadc:	4b19      	ldr	r3, [pc, #100]	@ (800cb44 <prvAddNewTaskToReadyList+0xc8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	4a18      	ldr	r2, [pc, #96]	@ (800cb44 <prvAddNewTaskToReadyList+0xc8>)
 800cae4:	6013      	str	r3, [r2, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	4a15      	ldr	r2, [pc, #84]	@ (800cb48 <prvAddNewTaskToReadyList+0xcc>)
 800caf4:	441a      	add	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3304      	adds	r3, #4
 800cafa:	4619      	mov	r1, r3
 800cafc:	4610      	mov	r0, r2
 800cafe:	f7fe fdbd 	bl	800b67c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb02:	f001 f839 	bl	800db78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <prvAddNewTaskToReadyList+0xc0>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00e      	beq.n	800cb2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb0e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb38 <prvAddNewTaskToReadyList+0xbc>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d207      	bcs.n	800cb2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb1c:	4b0b      	ldr	r3, [pc, #44]	@ (800cb4c <prvAddNewTaskToReadyList+0xd0>)
 800cb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20005494 	.word	0x20005494
 800cb38:	20005394 	.word	0x20005394
 800cb3c:	200054a0 	.word	0x200054a0
 800cb40:	200054b0 	.word	0x200054b0
 800cb44:	2000549c 	.word	0x2000549c
 800cb48:	20005398 	.word	0x20005398
 800cb4c:	e000ed04 	.word	0xe000ed04

0800cb50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d01a      	beq.n	800cb98 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb62:	4b15      	ldr	r3, [pc, #84]	@ (800cbb8 <vTaskDelay+0x68>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00d      	beq.n	800cb86 <vTaskDelay+0x36>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	b672      	cpsid	i
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	b662      	cpsie	i
 800cb7e:	60bb      	str	r3, [r7, #8]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cb86:	f000 f889 	bl	800cc9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fe4b 	bl	800d828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb92:	f000 f891 	bl	800ccb8 <xTaskResumeAll>
 800cb96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d107      	bne.n	800cbae <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800cb9e:	4b07      	ldr	r3, [pc, #28]	@ (800cbbc <vTaskDelay+0x6c>)
 800cba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbae:	bf00      	nop
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200054bc 	.word	0x200054bc
 800cbbc:	e000ed04 	.word	0xe000ed04

0800cbc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08a      	sub	sp, #40	@ 0x28
 800cbc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cbce:	463a      	mov	r2, r7
 800cbd0:	1d39      	adds	r1, r7, #4
 800cbd2:	f107 0308 	add.w	r3, r7, #8
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7f5 fbc4 	bl	8002364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	9202      	str	r2, [sp, #8]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	460a      	mov	r2, r1
 800cbee:	4923      	ldr	r1, [pc, #140]	@ (800cc7c <vTaskStartScheduler+0xbc>)
 800cbf0:	4823      	ldr	r0, [pc, #140]	@ (800cc80 <vTaskStartScheduler+0xc0>)
 800cbf2:	f7ff fdf5 	bl	800c7e0 <xTaskCreateStatic>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4a22      	ldr	r2, [pc, #136]	@ (800cc84 <vTaskStartScheduler+0xc4>)
 800cbfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cbfc:	4b21      	ldr	r3, [pc, #132]	@ (800cc84 <vTaskStartScheduler+0xc4>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc04:	2301      	movs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	e001      	b.n	800cc0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d11d      	bne.n	800cc50 <vTaskStartScheduler+0x90>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc18:	b672      	cpsid	i
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	b662      	cpsie	i
 800cc28:	613b      	str	r3, [r7, #16]
}
 800cc2a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc2c:	4b16      	ldr	r3, [pc, #88]	@ (800cc88 <vTaskStartScheduler+0xc8>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	334c      	adds	r3, #76	@ 0x4c
 800cc32:	4a16      	ldr	r2, [pc, #88]	@ (800cc8c <vTaskStartScheduler+0xcc>)
 800cc34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc36:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <vTaskStartScheduler+0xd0>)
 800cc38:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc3e:	4b15      	ldr	r3, [pc, #84]	@ (800cc94 <vTaskStartScheduler+0xd4>)
 800cc40:	2201      	movs	r2, #1
 800cc42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc44:	4b14      	ldr	r3, [pc, #80]	@ (800cc98 <vTaskStartScheduler+0xd8>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc4a:	f000 fee1 	bl	800da10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc4e:	e011      	b.n	800cc74 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc56:	d10d      	bne.n	800cc74 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc5c:	b672      	cpsid	i
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	b662      	cpsie	i
 800cc6c:	60fb      	str	r3, [r7, #12]
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <vTaskStartScheduler+0xb0>
}
 800cc74:	bf00      	nop
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	0801fb68 	.word	0x0801fb68
 800cc80:	0800d2b1 	.word	0x0800d2b1
 800cc84:	200054b8 	.word	0x200054b8
 800cc88:	20005394 	.word	0x20005394
 800cc8c:	20000094 	.word	0x20000094
 800cc90:	200054b4 	.word	0x200054b4
 800cc94:	200054a0 	.word	0x200054a0
 800cc98:	20005498 	.word	0x20005498

0800cc9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cca0:	4b04      	ldr	r3, [pc, #16]	@ (800ccb4 <vTaskSuspendAll+0x18>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3301      	adds	r3, #1
 800cca6:	4a03      	ldr	r2, [pc, #12]	@ (800ccb4 <vTaskSuspendAll+0x18>)
 800cca8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ccaa:	bf00      	nop
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	200054bc 	.word	0x200054bc

0800ccb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccc6:	4b43      	ldr	r3, [pc, #268]	@ (800cdd4 <xTaskResumeAll+0x11c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10d      	bne.n	800ccea <xTaskResumeAll+0x32>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	b672      	cpsid	i
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	b662      	cpsie	i
 800cce2:	603b      	str	r3, [r7, #0]
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ccea:	f000 ff0f 	bl	800db0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ccee:	4b39      	ldr	r3, [pc, #228]	@ (800cdd4 <xTaskResumeAll+0x11c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	4a37      	ldr	r2, [pc, #220]	@ (800cdd4 <xTaskResumeAll+0x11c>)
 800ccf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf8:	4b36      	ldr	r3, [pc, #216]	@ (800cdd4 <xTaskResumeAll+0x11c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d161      	bne.n	800cdc4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd00:	4b35      	ldr	r3, [pc, #212]	@ (800cdd8 <xTaskResumeAll+0x120>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d05d      	beq.n	800cdc4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd08:	e02e      	b.n	800cd68 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0a:	4b34      	ldr	r3, [pc, #208]	@ (800cddc <xTaskResumeAll+0x124>)
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3318      	adds	r3, #24
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fd0d 	bl	800b736 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	3304      	adds	r3, #4
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fd08 	bl	800b736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	409a      	lsls	r2, r3
 800cd2e:	4b2c      	ldr	r3, [pc, #176]	@ (800cde0 <xTaskResumeAll+0x128>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	4a2a      	ldr	r2, [pc, #168]	@ (800cde0 <xTaskResumeAll+0x128>)
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4a27      	ldr	r2, [pc, #156]	@ (800cde4 <xTaskResumeAll+0x12c>)
 800cd46:	441a      	add	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f7fe fc94 	bl	800b67c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd58:	4b23      	ldr	r3, [pc, #140]	@ (800cde8 <xTaskResumeAll+0x130>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d302      	bcc.n	800cd68 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cd62:	4b22      	ldr	r3, [pc, #136]	@ (800cdec <xTaskResumeAll+0x134>)
 800cd64:	2201      	movs	r2, #1
 800cd66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd68:	4b1c      	ldr	r3, [pc, #112]	@ (800cddc <xTaskResumeAll+0x124>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1cc      	bne.n	800cd0a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd76:	f000 fb59 	bl	800d42c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cd7a:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf0 <xTaskResumeAll+0x138>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d010      	beq.n	800cda8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd86:	f000 f859 	bl	800ce3c <xTaskIncrementTick>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cd90:	4b16      	ldr	r3, [pc, #88]	@ (800cdec <xTaskResumeAll+0x134>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f1      	bne.n	800cd86 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cda2:	4b13      	ldr	r3, [pc, #76]	@ (800cdf0 <xTaskResumeAll+0x138>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cda8:	4b10      	ldr	r3, [pc, #64]	@ (800cdec <xTaskResumeAll+0x134>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf4 <xTaskResumeAll+0x13c>)
 800cdb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdba:	601a      	str	r2, [r3, #0]
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdc4:	f000 fed8 	bl	800db78 <vPortExitCritical>

	return xAlreadyYielded;
 800cdc8:	68bb      	ldr	r3, [r7, #8]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	200054bc 	.word	0x200054bc
 800cdd8:	20005494 	.word	0x20005494
 800cddc:	20005454 	.word	0x20005454
 800cde0:	2000549c 	.word	0x2000549c
 800cde4:	20005398 	.word	0x20005398
 800cde8:	20005394 	.word	0x20005394
 800cdec:	200054a8 	.word	0x200054a8
 800cdf0:	200054a4 	.word	0x200054a4
 800cdf4:	e000ed04 	.word	0xe000ed04

0800cdf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cdfe:	4b05      	ldr	r3, [pc, #20]	@ (800ce14 <xTaskGetTickCount+0x1c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce04:	687b      	ldr	r3, [r7, #4]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	20005498 	.word	0x20005498

0800ce18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce1e:	f000 ff5d 	bl	800dcdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ce26:	4b04      	ldr	r3, [pc, #16]	@ (800ce38 <xTaskGetTickCountFromISR+0x20>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce2c:	683b      	ldr	r3, [r7, #0]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20005498 	.word	0x20005498

0800ce3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce42:	2300      	movs	r3, #0
 800ce44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce46:	4b50      	ldr	r3, [pc, #320]	@ (800cf88 <xTaskIncrementTick+0x14c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f040 808b 	bne.w	800cf66 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce50:	4b4e      	ldr	r3, [pc, #312]	@ (800cf8c <xTaskIncrementTick+0x150>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce58:	4a4c      	ldr	r2, [pc, #304]	@ (800cf8c <xTaskIncrementTick+0x150>)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d123      	bne.n	800ceac <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce64:	4b4a      	ldr	r3, [pc, #296]	@ (800cf90 <xTaskIncrementTick+0x154>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00d      	beq.n	800ce8a <xTaskIncrementTick+0x4e>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce72:	b672      	cpsid	i
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	b662      	cpsie	i
 800ce82:	603b      	str	r3, [r7, #0]
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop
 800ce88:	e7fd      	b.n	800ce86 <xTaskIncrementTick+0x4a>
 800ce8a:	4b41      	ldr	r3, [pc, #260]	@ (800cf90 <xTaskIncrementTick+0x154>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	4b40      	ldr	r3, [pc, #256]	@ (800cf94 <xTaskIncrementTick+0x158>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a3e      	ldr	r2, [pc, #248]	@ (800cf90 <xTaskIncrementTick+0x154>)
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	4a3e      	ldr	r2, [pc, #248]	@ (800cf94 <xTaskIncrementTick+0x158>)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6013      	str	r3, [r2, #0]
 800ce9e:	4b3e      	ldr	r3, [pc, #248]	@ (800cf98 <xTaskIncrementTick+0x15c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3301      	adds	r3, #1
 800cea4:	4a3c      	ldr	r2, [pc, #240]	@ (800cf98 <xTaskIncrementTick+0x15c>)
 800cea6:	6013      	str	r3, [r2, #0]
 800cea8:	f000 fac0 	bl	800d42c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceac:	4b3b      	ldr	r3, [pc, #236]	@ (800cf9c <xTaskIncrementTick+0x160>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	693a      	ldr	r2, [r7, #16]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d348      	bcc.n	800cf48 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceb6:	4b36      	ldr	r3, [pc, #216]	@ (800cf90 <xTaskIncrementTick+0x154>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec0:	4b36      	ldr	r3, [pc, #216]	@ (800cf9c <xTaskIncrementTick+0x160>)
 800cec2:	f04f 32ff 	mov.w	r2, #4294967295
 800cec6:	601a      	str	r2, [r3, #0]
					break;
 800cec8:	e03e      	b.n	800cf48 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceca:	4b31      	ldr	r3, [pc, #196]	@ (800cf90 <xTaskIncrementTick+0x154>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ceda:	693a      	ldr	r2, [r7, #16]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d203      	bcs.n	800ceea <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cee2:	4a2e      	ldr	r2, [pc, #184]	@ (800cf9c <xTaskIncrementTick+0x160>)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cee8:	e02e      	b.n	800cf48 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	3304      	adds	r3, #4
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fe fc21 	bl	800b736 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	3318      	adds	r3, #24
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe fc18 	bl	800b736 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	409a      	lsls	r2, r3
 800cf0e:	4b24      	ldr	r3, [pc, #144]	@ (800cfa0 <xTaskIncrementTick+0x164>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	4a22      	ldr	r2, [pc, #136]	@ (800cfa0 <xTaskIncrementTick+0x164>)
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4a1f      	ldr	r2, [pc, #124]	@ (800cfa4 <xTaskIncrementTick+0x168>)
 800cf26:	441a      	add	r2, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	3304      	adds	r3, #4
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	4610      	mov	r0, r2
 800cf30:	f7fe fba4 	bl	800b67c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf38:	4b1b      	ldr	r3, [pc, #108]	@ (800cfa8 <xTaskIncrementTick+0x16c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d3b9      	bcc.n	800ceb6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800cf42:	2301      	movs	r3, #1
 800cf44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf46:	e7b6      	b.n	800ceb6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf48:	4b17      	ldr	r3, [pc, #92]	@ (800cfa8 <xTaskIncrementTick+0x16c>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf4e:	4915      	ldr	r1, [pc, #84]	@ (800cfa4 <xTaskIncrementTick+0x168>)
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	440b      	add	r3, r1
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d907      	bls.n	800cf70 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	e004      	b.n	800cf70 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cf66:	4b11      	ldr	r3, [pc, #68]	@ (800cfac <xTaskIncrementTick+0x170>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	4a0f      	ldr	r2, [pc, #60]	@ (800cfac <xTaskIncrementTick+0x170>)
 800cf6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cf70:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb0 <xTaskIncrementTick+0x174>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cf7c:	697b      	ldr	r3, [r7, #20]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	200054bc 	.word	0x200054bc
 800cf8c:	20005498 	.word	0x20005498
 800cf90:	2000544c 	.word	0x2000544c
 800cf94:	20005450 	.word	0x20005450
 800cf98:	200054ac 	.word	0x200054ac
 800cf9c:	200054b4 	.word	0x200054b4
 800cfa0:	2000549c 	.word	0x2000549c
 800cfa4:	20005398 	.word	0x20005398
 800cfa8:	20005394 	.word	0x20005394
 800cfac:	200054a4 	.word	0x200054a4
 800cfb0:	200054a8 	.word	0x200054a8

0800cfb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfba:	4b2b      	ldr	r3, [pc, #172]	@ (800d068 <vTaskSwitchContext+0xb4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfc2:	4b2a      	ldr	r3, [pc, #168]	@ (800d06c <vTaskSwitchContext+0xb8>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfc8:	e047      	b.n	800d05a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cfca:	4b28      	ldr	r3, [pc, #160]	@ (800d06c <vTaskSwitchContext+0xb8>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd0:	4b27      	ldr	r3, [pc, #156]	@ (800d070 <vTaskSwitchContext+0xbc>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	fab3 f383 	clz	r3, r3
 800cfdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	f1c3 031f 	rsb	r3, r3, #31
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	4923      	ldr	r1, [pc, #140]	@ (800d074 <vTaskSwitchContext+0xc0>)
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	4613      	mov	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	440b      	add	r3, r1
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10d      	bne.n	800d016 <vTaskSwitchContext+0x62>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffe:	b672      	cpsid	i
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	b662      	cpsie	i
 800d00e:	607b      	str	r3, [r7, #4]
}
 800d010:	bf00      	nop
 800d012:	bf00      	nop
 800d014:	e7fd      	b.n	800d012 <vTaskSwitchContext+0x5e>
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	4613      	mov	r3, r2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4413      	add	r3, r2
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4a14      	ldr	r2, [pc, #80]	@ (800d074 <vTaskSwitchContext+0xc0>)
 800d022:	4413      	add	r3, r2
 800d024:	613b      	str	r3, [r7, #16]
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	605a      	str	r2, [r3, #4]
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	3308      	adds	r3, #8
 800d038:	429a      	cmp	r2, r3
 800d03a:	d104      	bne.n	800d046 <vTaskSwitchContext+0x92>
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	685a      	ldr	r2, [r3, #4]
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	605a      	str	r2, [r3, #4]
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	4a0a      	ldr	r2, [pc, #40]	@ (800d078 <vTaskSwitchContext+0xc4>)
 800d04e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d050:	4b09      	ldr	r3, [pc, #36]	@ (800d078 <vTaskSwitchContext+0xc4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	334c      	adds	r3, #76	@ 0x4c
 800d056:	4a09      	ldr	r2, [pc, #36]	@ (800d07c <vTaskSwitchContext+0xc8>)
 800d058:	6013      	str	r3, [r2, #0]
}
 800d05a:	bf00      	nop
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	200054bc 	.word	0x200054bc
 800d06c:	200054a8 	.word	0x200054a8
 800d070:	2000549c 	.word	0x2000549c
 800d074:	20005398 	.word	0x20005398
 800d078:	20005394 	.word	0x20005394
 800d07c:	20000094 	.word	0x20000094

0800d080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10d      	bne.n	800d0ac <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d094:	b672      	cpsid	i
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	b662      	cpsie	i
 800d0a4:	60fb      	str	r3, [r7, #12]
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	e7fd      	b.n	800d0a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0ac:	4b07      	ldr	r3, [pc, #28]	@ (800d0cc <vTaskPlaceOnEventList+0x4c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3318      	adds	r3, #24
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7fe fb05 	bl	800b6c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	6838      	ldr	r0, [r7, #0]
 800d0be:	f000 fbb3 	bl	800d828 <prvAddCurrentTaskToDelayedList>
}
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20005394 	.word	0x20005394

0800d0d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10d      	bne.n	800d102 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	60fb      	str	r3, [r7, #12]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	3318      	adds	r3, #24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fb15 	bl	800b736 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d10c:	4b1d      	ldr	r3, [pc, #116]	@ (800d184 <xTaskRemoveFromEventList+0xb4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d11c      	bne.n	800d14e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	3304      	adds	r3, #4
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fb0c 	bl	800b736 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d122:	2201      	movs	r2, #1
 800d124:	409a      	lsls	r2, r3
 800d126:	4b18      	ldr	r3, [pc, #96]	@ (800d188 <xTaskRemoveFromEventList+0xb8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	4a16      	ldr	r2, [pc, #88]	@ (800d188 <xTaskRemoveFromEventList+0xb8>)
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4a13      	ldr	r2, [pc, #76]	@ (800d18c <xTaskRemoveFromEventList+0xbc>)
 800d13e:	441a      	add	r2, r3
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f7fe fa98 	bl	800b67c <vListInsertEnd>
 800d14c:	e005      	b.n	800d15a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	3318      	adds	r3, #24
 800d152:	4619      	mov	r1, r3
 800d154:	480e      	ldr	r0, [pc, #56]	@ (800d190 <xTaskRemoveFromEventList+0xc0>)
 800d156:	f7fe fa91 	bl	800b67c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d15e:	4b0d      	ldr	r3, [pc, #52]	@ (800d194 <xTaskRemoveFromEventList+0xc4>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d905      	bls.n	800d174 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d16c:	4b0a      	ldr	r3, [pc, #40]	@ (800d198 <xTaskRemoveFromEventList+0xc8>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	e001      	b.n	800d178 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d174:	2300      	movs	r3, #0
 800d176:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d178:	697b      	ldr	r3, [r7, #20]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	200054bc 	.word	0x200054bc
 800d188:	2000549c 	.word	0x2000549c
 800d18c:	20005398 	.word	0x20005398
 800d190:	20005454 	.word	0x20005454
 800d194:	20005394 	.word	0x20005394
 800d198:	200054a8 	.word	0x200054a8

0800d19c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1a4:	4b06      	ldr	r3, [pc, #24]	@ (800d1c0 <vTaskInternalSetTimeOutState+0x24>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1ac:	4b05      	ldr	r3, [pc, #20]	@ (800d1c4 <vTaskInternalSetTimeOutState+0x28>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	605a      	str	r2, [r3, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	200054ac 	.word	0x200054ac
 800d1c4:	20005498 	.word	0x20005498

0800d1c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d10d      	bne.n	800d1f4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1dc:	b672      	cpsid	i
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	b662      	cpsie	i
 800d1ec:	613b      	str	r3, [r7, #16]
}
 800d1ee:	bf00      	nop
 800d1f0:	bf00      	nop
 800d1f2:	e7fd      	b.n	800d1f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10d      	bne.n	800d216 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fe:	b672      	cpsid	i
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	b662      	cpsie	i
 800d20e:	60fb      	str	r3, [r7, #12]
}
 800d210:	bf00      	nop
 800d212:	bf00      	nop
 800d214:	e7fd      	b.n	800d212 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d216:	f000 fc79 	bl	800db0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d21a:	4b1d      	ldr	r3, [pc, #116]	@ (800d290 <xTaskCheckForTimeOut+0xc8>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	69ba      	ldr	r2, [r7, #24]
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d232:	d102      	bne.n	800d23a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d234:	2300      	movs	r3, #0
 800d236:	61fb      	str	r3, [r7, #28]
 800d238:	e023      	b.n	800d282 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	4b15      	ldr	r3, [pc, #84]	@ (800d294 <xTaskCheckForTimeOut+0xcc>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d007      	beq.n	800d256 <xTaskCheckForTimeOut+0x8e>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	69ba      	ldr	r2, [r7, #24]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d302      	bcc.n	800d256 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d250:	2301      	movs	r3, #1
 800d252:	61fb      	str	r3, [r7, #28]
 800d254:	e015      	b.n	800d282 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d20b      	bcs.n	800d278 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	1ad2      	subs	r2, r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff ff95 	bl	800d19c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d272:	2300      	movs	r3, #0
 800d274:	61fb      	str	r3, [r7, #28]
 800d276:	e004      	b.n	800d282 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d27e:	2301      	movs	r3, #1
 800d280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d282:	f000 fc79 	bl	800db78 <vPortExitCritical>

	return xReturn;
 800d286:	69fb      	ldr	r3, [r7, #28]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3720      	adds	r7, #32
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	20005498 	.word	0x20005498
 800d294:	200054ac 	.word	0x200054ac

0800d298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d298:	b480      	push	{r7}
 800d29a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d29c:	4b03      	ldr	r3, [pc, #12]	@ (800d2ac <vTaskMissedYield+0x14>)
 800d29e:	2201      	movs	r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]
}
 800d2a2:	bf00      	nop
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	200054a8 	.word	0x200054a8

0800d2b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2b8:	f000 f852 	bl	800d360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2bc:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <prvIdleTask+0x28>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d9f9      	bls.n	800d2b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d2c4:	4b05      	ldr	r3, [pc, #20]	@ (800d2dc <prvIdleTask+0x2c>)
 800d2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d2d4:	e7f0      	b.n	800d2b8 <prvIdleTask+0x8>
 800d2d6:	bf00      	nop
 800d2d8:	20005398 	.word	0x20005398
 800d2dc:	e000ed04 	.word	0xe000ed04

0800d2e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	607b      	str	r3, [r7, #4]
 800d2ea:	e00c      	b.n	800d306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	4a12      	ldr	r2, [pc, #72]	@ (800d340 <prvInitialiseTaskLists+0x60>)
 800d2f8:	4413      	add	r3, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fe f991 	bl	800b622 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3301      	adds	r3, #1
 800d304:	607b      	str	r3, [r7, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b06      	cmp	r3, #6
 800d30a:	d9ef      	bls.n	800d2ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d30c:	480d      	ldr	r0, [pc, #52]	@ (800d344 <prvInitialiseTaskLists+0x64>)
 800d30e:	f7fe f988 	bl	800b622 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d312:	480d      	ldr	r0, [pc, #52]	@ (800d348 <prvInitialiseTaskLists+0x68>)
 800d314:	f7fe f985 	bl	800b622 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d318:	480c      	ldr	r0, [pc, #48]	@ (800d34c <prvInitialiseTaskLists+0x6c>)
 800d31a:	f7fe f982 	bl	800b622 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d31e:	480c      	ldr	r0, [pc, #48]	@ (800d350 <prvInitialiseTaskLists+0x70>)
 800d320:	f7fe f97f 	bl	800b622 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d324:	480b      	ldr	r0, [pc, #44]	@ (800d354 <prvInitialiseTaskLists+0x74>)
 800d326:	f7fe f97c 	bl	800b622 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d32a:	4b0b      	ldr	r3, [pc, #44]	@ (800d358 <prvInitialiseTaskLists+0x78>)
 800d32c:	4a05      	ldr	r2, [pc, #20]	@ (800d344 <prvInitialiseTaskLists+0x64>)
 800d32e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d330:	4b0a      	ldr	r3, [pc, #40]	@ (800d35c <prvInitialiseTaskLists+0x7c>)
 800d332:	4a05      	ldr	r2, [pc, #20]	@ (800d348 <prvInitialiseTaskLists+0x68>)
 800d334:	601a      	str	r2, [r3, #0]
}
 800d336:	bf00      	nop
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20005398 	.word	0x20005398
 800d344:	20005424 	.word	0x20005424
 800d348:	20005438 	.word	0x20005438
 800d34c:	20005454 	.word	0x20005454
 800d350:	20005468 	.word	0x20005468
 800d354:	20005480 	.word	0x20005480
 800d358:	2000544c 	.word	0x2000544c
 800d35c:	20005450 	.word	0x20005450

0800d360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d366:	e019      	b.n	800d39c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d368:	f000 fbd0 	bl	800db0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d36c:	4b10      	ldr	r3, [pc, #64]	@ (800d3b0 <prvCheckTasksWaitingTermination+0x50>)
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3304      	adds	r3, #4
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe f9dc 	bl	800b736 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d37e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b4 <prvCheckTasksWaitingTermination+0x54>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3b01      	subs	r3, #1
 800d384:	4a0b      	ldr	r2, [pc, #44]	@ (800d3b4 <prvCheckTasksWaitingTermination+0x54>)
 800d386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d388:	4b0b      	ldr	r3, [pc, #44]	@ (800d3b8 <prvCheckTasksWaitingTermination+0x58>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4a0a      	ldr	r2, [pc, #40]	@ (800d3b8 <prvCheckTasksWaitingTermination+0x58>)
 800d390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d392:	f000 fbf1 	bl	800db78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f810 	bl	800d3bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d39c:	4b06      	ldr	r3, [pc, #24]	@ (800d3b8 <prvCheckTasksWaitingTermination+0x58>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1e1      	bne.n	800d368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20005468 	.word	0x20005468
 800d3b4:	20005494 	.word	0x20005494
 800d3b8:	2000547c 	.word	0x2000547c

0800d3bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	334c      	adds	r3, #76	@ 0x4c
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f010 f967 	bl	801d69c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d108      	bne.n	800d3ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fd91 	bl	800df04 <vPortFree>
				vPortFree( pxTCB );
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fd8e 	bl	800df04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d3e8:	e01b      	b.n	800d422 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d103      	bne.n	800d3fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fd85 	bl	800df04 <vPortFree>
	}
 800d3fa:	e012      	b.n	800d422 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d402:	2b02      	cmp	r3, #2
 800d404:	d00d      	beq.n	800d422 <prvDeleteTCB+0x66>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	b672      	cpsid	i
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	b662      	cpsie	i
 800d41a:	60fb      	str	r3, [r7, #12]
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	e7fd      	b.n	800d41e <prvDeleteTCB+0x62>
	}
 800d422:	bf00      	nop
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
	...

0800d42c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d432:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <prvResetNextTaskUnblockTime+0x38>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d104      	bne.n	800d446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d43c:	4b0a      	ldr	r3, [pc, #40]	@ (800d468 <prvResetNextTaskUnblockTime+0x3c>)
 800d43e:	f04f 32ff 	mov.w	r2, #4294967295
 800d442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d444:	e008      	b.n	800d458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d446:	4b07      	ldr	r3, [pc, #28]	@ (800d464 <prvResetNextTaskUnblockTime+0x38>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	4a04      	ldr	r2, [pc, #16]	@ (800d468 <prvResetNextTaskUnblockTime+0x3c>)
 800d456:	6013      	str	r3, [r2, #0]
}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	2000544c 	.word	0x2000544c
 800d468:	200054b4 	.word	0x200054b4

0800d46c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d472:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <xTaskGetSchedulerState+0x34>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d102      	bne.n	800d480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d47a:	2301      	movs	r3, #1
 800d47c:	607b      	str	r3, [r7, #4]
 800d47e:	e008      	b.n	800d492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d480:	4b08      	ldr	r3, [pc, #32]	@ (800d4a4 <xTaskGetSchedulerState+0x38>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d488:	2302      	movs	r3, #2
 800d48a:	607b      	str	r3, [r7, #4]
 800d48c:	e001      	b.n	800d492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d48e:	2300      	movs	r3, #0
 800d490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d492:	687b      	ldr	r3, [r7, #4]
	}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	200054a0 	.word	0x200054a0
 800d4a4:	200054bc 	.word	0x200054bc

0800d4a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d069      	beq.n	800d592 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4c2:	4b36      	ldr	r3, [pc, #216]	@ (800d59c <xTaskPriorityInherit+0xf4>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d259      	bcs.n	800d580 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	db06      	blt.n	800d4e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4d4:	4b31      	ldr	r3, [pc, #196]	@ (800d59c <xTaskPriorityInherit+0xf4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4da:	f1c3 0207 	rsb	r2, r3, #7
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	6959      	ldr	r1, [r3, #20]
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4a2b      	ldr	r2, [pc, #172]	@ (800d5a0 <xTaskPriorityInherit+0xf8>)
 800d4f4:	4413      	add	r3, r2
 800d4f6:	4299      	cmp	r1, r3
 800d4f8:	d13a      	bne.n	800d570 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe f919 	bl	800b736 <uxListRemove>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d115      	bne.n	800d536 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d50e:	4924      	ldr	r1, [pc, #144]	@ (800d5a0 <xTaskPriorityInherit+0xf8>)
 800d510:	4613      	mov	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	440b      	add	r3, r1
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <xTaskPriorityInherit+0x8e>
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d524:	2201      	movs	r2, #1
 800d526:	fa02 f303 	lsl.w	r3, r2, r3
 800d52a:	43da      	mvns	r2, r3
 800d52c:	4b1d      	ldr	r3, [pc, #116]	@ (800d5a4 <xTaskPriorityInherit+0xfc>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4013      	ands	r3, r2
 800d532:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a4 <xTaskPriorityInherit+0xfc>)
 800d534:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d536:	4b19      	ldr	r3, [pc, #100]	@ (800d59c <xTaskPriorityInherit+0xf4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d544:	2201      	movs	r2, #1
 800d546:	409a      	lsls	r2, r3
 800d548:	4b16      	ldr	r3, [pc, #88]	@ (800d5a4 <xTaskPriorityInherit+0xfc>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	4a15      	ldr	r2, [pc, #84]	@ (800d5a4 <xTaskPriorityInherit+0xfc>)
 800d550:	6013      	str	r3, [r2, #0]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d556:	4613      	mov	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4a10      	ldr	r2, [pc, #64]	@ (800d5a0 <xTaskPriorityInherit+0xf8>)
 800d560:	441a      	add	r2, r3
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7fe f887 	bl	800b67c <vListInsertEnd>
 800d56e:	e004      	b.n	800d57a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d570:	4b0a      	ldr	r3, [pc, #40]	@ (800d59c <xTaskPriorityInherit+0xf4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d57a:	2301      	movs	r3, #1
 800d57c:	60fb      	str	r3, [r7, #12]
 800d57e:	e008      	b.n	800d592 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d584:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <xTaskPriorityInherit+0xf4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d201      	bcs.n	800d592 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d58e:	2301      	movs	r3, #1
 800d590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d592:	68fb      	ldr	r3, [r7, #12]
	}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20005394 	.word	0x20005394
 800d5a0:	20005398 	.word	0x20005398
 800d5a4:	2000549c 	.word	0x2000549c

0800d5a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d074      	beq.n	800d6a8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5be:	4b3d      	ldr	r3, [pc, #244]	@ (800d6b4 <xTaskPriorityDisinherit+0x10c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	693a      	ldr	r2, [r7, #16]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d00d      	beq.n	800d5e4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5cc:	b672      	cpsid	i
 800d5ce:	f383 8811 	msr	BASEPRI, r3
 800d5d2:	f3bf 8f6f 	isb	sy
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	b662      	cpsie	i
 800d5dc:	60fb      	str	r3, [r7, #12]
}
 800d5de:	bf00      	nop
 800d5e0:	bf00      	nop
 800d5e2:	e7fd      	b.n	800d5e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10d      	bne.n	800d608 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f0:	b672      	cpsid	i
 800d5f2:	f383 8811 	msr	BASEPRI, r3
 800d5f6:	f3bf 8f6f 	isb	sy
 800d5fa:	f3bf 8f4f 	dsb	sy
 800d5fe:	b662      	cpsie	i
 800d600:	60bb      	str	r3, [r7, #8]
}
 800d602:	bf00      	nop
 800d604:	bf00      	nop
 800d606:	e7fd      	b.n	800d604 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d044      	beq.n	800d6a8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d622:	2b00      	cmp	r3, #0
 800d624:	d140      	bne.n	800d6a8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	3304      	adds	r3, #4
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe f883 	bl	800b736 <uxListRemove>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d115      	bne.n	800d662 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d63a:	491f      	ldr	r1, [pc, #124]	@ (800d6b8 <xTaskPriorityDisinherit+0x110>)
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	440b      	add	r3, r1
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <xTaskPriorityDisinherit+0xba>
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d650:	2201      	movs	r2, #1
 800d652:	fa02 f303 	lsl.w	r3, r2, r3
 800d656:	43da      	mvns	r2, r3
 800d658:	4b18      	ldr	r3, [pc, #96]	@ (800d6bc <xTaskPriorityDisinherit+0x114>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4013      	ands	r3, r2
 800d65e:	4a17      	ldr	r2, [pc, #92]	@ (800d6bc <xTaskPriorityDisinherit+0x114>)
 800d660:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66e:	f1c3 0207 	rsb	r2, r3, #7
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d67a:	2201      	movs	r2, #1
 800d67c:	409a      	lsls	r2, r3
 800d67e:	4b0f      	ldr	r3, [pc, #60]	@ (800d6bc <xTaskPriorityDisinherit+0x114>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4313      	orrs	r3, r2
 800d684:	4a0d      	ldr	r2, [pc, #52]	@ (800d6bc <xTaskPriorityDisinherit+0x114>)
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d68c:	4613      	mov	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4413      	add	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	4a08      	ldr	r2, [pc, #32]	@ (800d6b8 <xTaskPriorityDisinherit+0x110>)
 800d696:	441a      	add	r2, r3
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	3304      	adds	r3, #4
 800d69c:	4619      	mov	r1, r3
 800d69e:	4610      	mov	r0, r2
 800d6a0:	f7fd ffec 	bl	800b67c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6a8:	697b      	ldr	r3, [r7, #20]
	}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3718      	adds	r7, #24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20005394 	.word	0x20005394
 800d6b8:	20005398 	.word	0x20005398
 800d6bc:	2000549c 	.word	0x2000549c

0800d6c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b088      	sub	sp, #32
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 8089 	beq.w	800d7ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10d      	bne.n	800d6fe <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e6:	b672      	cpsid	i
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	b662      	cpsie	i
 800d6f6:	60fb      	str	r3, [r7, #12]
}
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
 800d6fc:	e7fd      	b.n	800d6fa <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	429a      	cmp	r2, r3
 800d706:	d902      	bls.n	800d70e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	61fb      	str	r3, [r7, #28]
 800d70c:	e002      	b.n	800d714 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d712:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d718:	69fa      	ldr	r2, [r7, #28]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d066      	beq.n	800d7ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	429a      	cmp	r2, r3
 800d726:	d161      	bne.n	800d7ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d728:	4b32      	ldr	r3, [pc, #200]	@ (800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d10d      	bne.n	800d74e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	b672      	cpsid	i
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	b662      	cpsie	i
 800d746:	60bb      	str	r3, [r7, #8]
}
 800d748:	bf00      	nop
 800d74a:	bf00      	nop
 800d74c:	e7fd      	b.n	800d74a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d752:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	db04      	blt.n	800d76c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	f1c3 0207 	rsb	r2, r3, #7
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	6959      	ldr	r1, [r3, #20]
 800d770:	693a      	ldr	r2, [r7, #16]
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d77c:	4413      	add	r3, r2
 800d77e:	4299      	cmp	r1, r3
 800d780:	d134      	bne.n	800d7ec <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	3304      	adds	r3, #4
 800d786:	4618      	mov	r0, r3
 800d788:	f7fd ffd5 	bl	800b736 <uxListRemove>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d115      	bne.n	800d7be <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d796:	4918      	ldr	r1, [pc, #96]	@ (800d7f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	440b      	add	r3, r1
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10a      	bne.n	800d7be <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b2:	43da      	mvns	r2, r3
 800d7b4:	4b11      	ldr	r3, [pc, #68]	@ (800d7fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	4a10      	ldr	r2, [pc, #64]	@ (800d7fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d7bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	409a      	lsls	r2, r3
 800d7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	4a0b      	ldr	r2, [pc, #44]	@ (800d7fc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	69bb      	ldr	r3, [r7, #24]
 800d7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4a06      	ldr	r2, [pc, #24]	@ (800d7f8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d7de:	441a      	add	r2, r3
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	f7fd ff48 	bl	800b67c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7ec:	bf00      	nop
 800d7ee:	3720      	adds	r7, #32
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	20005394 	.word	0x20005394
 800d7f8:	20005398 	.word	0x20005398
 800d7fc:	2000549c 	.word	0x2000549c

0800d800 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d800:	b480      	push	{r7}
 800d802:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d804:	4b07      	ldr	r3, [pc, #28]	@ (800d824 <pvTaskIncrementMutexHeldCount+0x24>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d80c:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <pvTaskIncrementMutexHeldCount+0x24>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d812:	3201      	adds	r2, #1
 800d814:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d816:	4b03      	ldr	r3, [pc, #12]	@ (800d824 <pvTaskIncrementMutexHeldCount+0x24>)
 800d818:	681b      	ldr	r3, [r3, #0]
	}
 800d81a:	4618      	mov	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	20005394 	.word	0x20005394

0800d828 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d832:	4b29      	ldr	r3, [pc, #164]	@ (800d8d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d838:	4b28      	ldr	r3, [pc, #160]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fd ff79 	bl	800b736 <uxListRemove>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10b      	bne.n	800d862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d84a:	4b24      	ldr	r3, [pc, #144]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d850:	2201      	movs	r2, #1
 800d852:	fa02 f303 	lsl.w	r3, r2, r3
 800d856:	43da      	mvns	r2, r3
 800d858:	4b21      	ldr	r3, [pc, #132]	@ (800d8e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4013      	ands	r3, r2
 800d85e:	4a20      	ldr	r2, [pc, #128]	@ (800d8e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d10a      	bne.n	800d880 <prvAddCurrentTaskToDelayedList+0x58>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d007      	beq.n	800d880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d870:	4b1a      	ldr	r3, [pc, #104]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3304      	adds	r3, #4
 800d876:	4619      	mov	r1, r3
 800d878:	481a      	ldr	r0, [pc, #104]	@ (800d8e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d87a:	f7fd feff 	bl	800b67c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d87e:	e026      	b.n	800d8ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4413      	add	r3, r2
 800d886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d888:	4b14      	ldr	r3, [pc, #80]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	429a      	cmp	r2, r3
 800d896:	d209      	bcs.n	800d8ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d898:	4b13      	ldr	r3, [pc, #76]	@ (800d8e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	4b0f      	ldr	r3, [pc, #60]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4610      	mov	r0, r2
 800d8a6:	f7fd ff0d 	bl	800b6c4 <vListInsert>
}
 800d8aa:	e010      	b.n	800d8ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	f7fd ff03 	bl	800b6c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8be:	4b0c      	ldr	r3, [pc, #48]	@ (800d8f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d202      	bcs.n	800d8ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d8c8:	4a09      	ldr	r2, [pc, #36]	@ (800d8f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6013      	str	r3, [r2, #0]
}
 800d8ce:	bf00      	nop
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20005498 	.word	0x20005498
 800d8dc:	20005394 	.word	0x20005394
 800d8e0:	2000549c 	.word	0x2000549c
 800d8e4:	20005480 	.word	0x20005480
 800d8e8:	20005450 	.word	0x20005450
 800d8ec:	2000544c 	.word	0x2000544c
 800d8f0:	200054b4 	.word	0x200054b4

0800d8f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	3b04      	subs	r3, #4
 800d904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3b04      	subs	r3, #4
 800d912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	f023 0201 	bic.w	r2, r3, #1
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3b04      	subs	r3, #4
 800d922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d924:	4a0c      	ldr	r2, [pc, #48]	@ (800d958 <pxPortInitialiseStack+0x64>)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3b14      	subs	r3, #20
 800d92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3b04      	subs	r3, #4
 800d93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f06f 0202 	mvn.w	r2, #2
 800d942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3b20      	subs	r3, #32
 800d948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d94a:	68fb      	ldr	r3, [r7, #12]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	0800d95d 	.word	0x0800d95d

0800d95c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d966:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <prvTaskExitError+0x60>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d96e:	d00d      	beq.n	800d98c <prvTaskExitError+0x30>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d974:	b672      	cpsid	i
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	b662      	cpsie	i
 800d984:	60fb      	str	r3, [r7, #12]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <prvTaskExitError+0x2c>
	__asm volatile
 800d98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d990:	b672      	cpsid	i
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	b662      	cpsie	i
 800d9a0:	60bb      	str	r3, [r7, #8]
}
 800d9a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9a4:	bf00      	nop
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d0fc      	beq.n	800d9a6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9ac:	bf00      	nop
 800d9ae:	bf00      	nop
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	20000078 	.word	0x20000078

0800d9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9c0:	4b07      	ldr	r3, [pc, #28]	@ (800d9e0 <pxCurrentTCBConst2>)
 800d9c2:	6819      	ldr	r1, [r3, #0]
 800d9c4:	6808      	ldr	r0, [r1, #0]
 800d9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	f380 8809 	msr	PSP, r0
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f04f 0000 	mov.w	r0, #0
 800d9d6:	f380 8811 	msr	BASEPRI, r0
 800d9da:	4770      	bx	lr
 800d9dc:	f3af 8000 	nop.w

0800d9e0 <pxCurrentTCBConst2>:
 800d9e0:	20005394 	.word	0x20005394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop

0800d9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d9e8:	4808      	ldr	r0, [pc, #32]	@ (800da0c <prvPortStartFirstTask+0x24>)
 800d9ea:	6800      	ldr	r0, [r0, #0]
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	f380 8808 	msr	MSP, r0
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8814 	msr	CONTROL, r0
 800d9fa:	b662      	cpsie	i
 800d9fc:	b661      	cpsie	f
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	df00      	svc	0
 800da08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da0a:	bf00      	nop
 800da0c:	e000ed08 	.word	0xe000ed08

0800da10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da16:	4b37      	ldr	r3, [pc, #220]	@ (800daf4 <xPortStartScheduler+0xe4>)
 800da18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	b2db      	uxtb	r3, r3
 800da20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	22ff      	movs	r2, #255	@ 0xff
 800da26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	4b2f      	ldr	r3, [pc, #188]	@ (800daf8 <xPortStartScheduler+0xe8>)
 800da3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da3e:	4b2f      	ldr	r3, [pc, #188]	@ (800dafc <xPortStartScheduler+0xec>)
 800da40:	2207      	movs	r2, #7
 800da42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da44:	e009      	b.n	800da5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800da46:	4b2d      	ldr	r3, [pc, #180]	@ (800dafc <xPortStartScheduler+0xec>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	4a2b      	ldr	r2, [pc, #172]	@ (800dafc <xPortStartScheduler+0xec>)
 800da4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da50:	78fb      	ldrb	r3, [r7, #3]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	b2db      	uxtb	r3, r3
 800da58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da5a:	78fb      	ldrb	r3, [r7, #3]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da62:	2b80      	cmp	r3, #128	@ 0x80
 800da64:	d0ef      	beq.n	800da46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da66:	4b25      	ldr	r3, [pc, #148]	@ (800dafc <xPortStartScheduler+0xec>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f1c3 0307 	rsb	r3, r3, #7
 800da6e:	2b04      	cmp	r3, #4
 800da70:	d00d      	beq.n	800da8e <xPortStartScheduler+0x7e>
	__asm volatile
 800da72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da76:	b672      	cpsid	i
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	b662      	cpsie	i
 800da86:	60bb      	str	r3, [r7, #8]
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	e7fd      	b.n	800da8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da8e:	4b1b      	ldr	r3, [pc, #108]	@ (800dafc <xPortStartScheduler+0xec>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	021b      	lsls	r3, r3, #8
 800da94:	4a19      	ldr	r2, [pc, #100]	@ (800dafc <xPortStartScheduler+0xec>)
 800da96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da98:	4b18      	ldr	r3, [pc, #96]	@ (800dafc <xPortStartScheduler+0xec>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800daa0:	4a16      	ldr	r2, [pc, #88]	@ (800dafc <xPortStartScheduler+0xec>)
 800daa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800daac:	4b14      	ldr	r3, [pc, #80]	@ (800db00 <xPortStartScheduler+0xf0>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a13      	ldr	r2, [pc, #76]	@ (800db00 <xPortStartScheduler+0xf0>)
 800dab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dab8:	4b11      	ldr	r3, [pc, #68]	@ (800db00 <xPortStartScheduler+0xf0>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a10      	ldr	r2, [pc, #64]	@ (800db00 <xPortStartScheduler+0xf0>)
 800dabe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dac4:	f000 f8dc 	bl	800dc80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dac8:	4b0e      	ldr	r3, [pc, #56]	@ (800db04 <xPortStartScheduler+0xf4>)
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dace:	f000 f8fb 	bl	800dcc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dad2:	4b0d      	ldr	r3, [pc, #52]	@ (800db08 <xPortStartScheduler+0xf8>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a0c      	ldr	r2, [pc, #48]	@ (800db08 <xPortStartScheduler+0xf8>)
 800dad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dadc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dade:	f7ff ff83 	bl	800d9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dae2:	f7ff fa67 	bl	800cfb4 <vTaskSwitchContext>
	prvTaskExitError();
 800dae6:	f7ff ff39 	bl	800d95c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800daea:	2300      	movs	r3, #0
}
 800daec:	4618      	mov	r0, r3
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	e000e400 	.word	0xe000e400
 800daf8:	200054c0 	.word	0x200054c0
 800dafc:	200054c4 	.word	0x200054c4
 800db00:	e000ed20 	.word	0xe000ed20
 800db04:	20000078 	.word	0x20000078
 800db08:	e000ef34 	.word	0xe000ef34

0800db0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	b672      	cpsid	i
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	b662      	cpsie	i
 800db26:	607b      	str	r3, [r7, #4]
}
 800db28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db2a:	4b11      	ldr	r3, [pc, #68]	@ (800db70 <vPortEnterCritical+0x64>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3301      	adds	r3, #1
 800db30:	4a0f      	ldr	r2, [pc, #60]	@ (800db70 <vPortEnterCritical+0x64>)
 800db32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db34:	4b0e      	ldr	r3, [pc, #56]	@ (800db70 <vPortEnterCritical+0x64>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d112      	bne.n	800db62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db3c:	4b0d      	ldr	r3, [pc, #52]	@ (800db74 <vPortEnterCritical+0x68>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00d      	beq.n	800db62 <vPortEnterCritical+0x56>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4a:	b672      	cpsid	i
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	b662      	cpsie	i
 800db5a:	603b      	str	r3, [r7, #0]
}
 800db5c:	bf00      	nop
 800db5e:	bf00      	nop
 800db60:	e7fd      	b.n	800db5e <vPortEnterCritical+0x52>
	}
}
 800db62:	bf00      	nop
 800db64:	370c      	adds	r7, #12
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20000078 	.word	0x20000078
 800db74:	e000ed04 	.word	0xe000ed04

0800db78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db7e:	4b13      	ldr	r3, [pc, #76]	@ (800dbcc <vPortExitCritical+0x54>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10d      	bne.n	800dba2 <vPortExitCritical+0x2a>
	__asm volatile
 800db86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db8a:	b672      	cpsid	i
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	b662      	cpsie	i
 800db9a:	607b      	str	r3, [r7, #4]
}
 800db9c:	bf00      	nop
 800db9e:	bf00      	nop
 800dba0:	e7fd      	b.n	800db9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dba2:	4b0a      	ldr	r3, [pc, #40]	@ (800dbcc <vPortExitCritical+0x54>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3b01      	subs	r3, #1
 800dba8:	4a08      	ldr	r2, [pc, #32]	@ (800dbcc <vPortExitCritical+0x54>)
 800dbaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbac:	4b07      	ldr	r3, [pc, #28]	@ (800dbcc <vPortExitCritical+0x54>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d105      	bne.n	800dbc0 <vPortExitCritical+0x48>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	f383 8811 	msr	BASEPRI, r3
}
 800dbbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	20000078 	.word	0x20000078

0800dbd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dbd0:	f3ef 8009 	mrs	r0, PSP
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	4b15      	ldr	r3, [pc, #84]	@ (800dc30 <pxCurrentTCBConst>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	f01e 0f10 	tst.w	lr, #16
 800dbe0:	bf08      	it	eq
 800dbe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dbe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbea:	6010      	str	r0, [r2, #0]
 800dbec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dbf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dbf4:	b672      	cpsid	i
 800dbf6:	f380 8811 	msr	BASEPRI, r0
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	b662      	cpsie	i
 800dc04:	f7ff f9d6 	bl	800cfb4 <vTaskSwitchContext>
 800dc08:	f04f 0000 	mov.w	r0, #0
 800dc0c:	f380 8811 	msr	BASEPRI, r0
 800dc10:	bc09      	pop	{r0, r3}
 800dc12:	6819      	ldr	r1, [r3, #0]
 800dc14:	6808      	ldr	r0, [r1, #0]
 800dc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1a:	f01e 0f10 	tst.w	lr, #16
 800dc1e:	bf08      	it	eq
 800dc20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc24:	f380 8809 	msr	PSP, r0
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop

0800dc30 <pxCurrentTCBConst>:
 800dc30:	20005394 	.word	0x20005394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop

0800dc38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc42:	b672      	cpsid	i
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	b662      	cpsie	i
 800dc52:	607b      	str	r3, [r7, #4]
}
 800dc54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc56:	f7ff f8f1 	bl	800ce3c <xTaskIncrementTick>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d003      	beq.n	800dc68 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc60:	4b06      	ldr	r3, [pc, #24]	@ (800dc7c <xPortSysTickHandler+0x44>)
 800dc62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	2300      	movs	r3, #0
 800dc6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f383 8811 	msr	BASEPRI, r3
}
 800dc72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc74:	bf00      	nop
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc84:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb4 <vPortSetupTimerInterrupt+0x34>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc8a:	4b0b      	ldr	r3, [pc, #44]	@ (800dcb8 <vPortSetupTimerInterrupt+0x38>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc90:	4b0a      	ldr	r3, [pc, #40]	@ (800dcbc <vPortSetupTimerInterrupt+0x3c>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a0a      	ldr	r2, [pc, #40]	@ (800dcc0 <vPortSetupTimerInterrupt+0x40>)
 800dc96:	fba2 2303 	umull	r2, r3, r2, r3
 800dc9a:	099b      	lsrs	r3, r3, #6
 800dc9c:	4a09      	ldr	r2, [pc, #36]	@ (800dcc4 <vPortSetupTimerInterrupt+0x44>)
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dca2:	4b04      	ldr	r3, [pc, #16]	@ (800dcb4 <vPortSetupTimerInterrupt+0x34>)
 800dca4:	2207      	movs	r2, #7
 800dca6:	601a      	str	r2, [r3, #0]
}
 800dca8:	bf00      	nop
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	e000e010 	.word	0xe000e010
 800dcb8:	e000e018 	.word	0xe000e018
 800dcbc:	20000058 	.word	0x20000058
 800dcc0:	10624dd3 	.word	0x10624dd3
 800dcc4:	e000e014 	.word	0xe000e014

0800dcc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dcc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dcd8 <vPortEnableVFP+0x10>
 800dccc:	6801      	ldr	r1, [r0, #0]
 800dcce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dcd2:	6001      	str	r1, [r0, #0]
 800dcd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dcd6:	bf00      	nop
 800dcd8:	e000ed88 	.word	0xe000ed88

0800dcdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dce2:	f3ef 8305 	mrs	r3, IPSR
 800dce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b0f      	cmp	r3, #15
 800dcec:	d917      	bls.n	800dd1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dcee:	4a1a      	ldr	r2, [pc, #104]	@ (800dd58 <vPortValidateInterruptPriority+0x7c>)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4413      	add	r3, r2
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dcf8:	4b18      	ldr	r3, [pc, #96]	@ (800dd5c <vPortValidateInterruptPriority+0x80>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	7afa      	ldrb	r2, [r7, #11]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d20d      	bcs.n	800dd1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800dd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd06:	b672      	cpsid	i
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	b662      	cpsie	i
 800dd16:	607b      	str	r3, [r7, #4]
}
 800dd18:	bf00      	nop
 800dd1a:	bf00      	nop
 800dd1c:	e7fd      	b.n	800dd1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd1e:	4b10      	ldr	r3, [pc, #64]	@ (800dd60 <vPortValidateInterruptPriority+0x84>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dd26:	4b0f      	ldr	r3, [pc, #60]	@ (800dd64 <vPortValidateInterruptPriority+0x88>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d90d      	bls.n	800dd4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd32:	b672      	cpsid	i
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	b662      	cpsie	i
 800dd42:	603b      	str	r3, [r7, #0]
}
 800dd44:	bf00      	nop
 800dd46:	bf00      	nop
 800dd48:	e7fd      	b.n	800dd46 <vPortValidateInterruptPriority+0x6a>
	}
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	e000e3f0 	.word	0xe000e3f0
 800dd5c:	200054c0 	.word	0x200054c0
 800dd60:	e000ed0c 	.word	0xe000ed0c
 800dd64:	200054c4 	.word	0x200054c4

0800dd68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b08a      	sub	sp, #40	@ 0x28
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd74:	f7fe ff92 	bl	800cc9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd78:	4b5d      	ldr	r3, [pc, #372]	@ (800def0 <pvPortMalloc+0x188>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d101      	bne.n	800dd84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd80:	f000 f920 	bl	800dfc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd84:	4b5b      	ldr	r3, [pc, #364]	@ (800def4 <pvPortMalloc+0x18c>)
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f040 8094 	bne.w	800deba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d020      	beq.n	800ddda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800dd98:	2208      	movs	r2, #8
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f003 0307 	and.w	r3, r3, #7
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d017      	beq.n	800ddda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f023 0307 	bic.w	r3, r3, #7
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f003 0307 	and.w	r3, r3, #7
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00d      	beq.n	800ddda <pvPortMalloc+0x72>
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc2:	b672      	cpsid	i
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	b662      	cpsie	i
 800ddd2:	617b      	str	r3, [r7, #20]
}
 800ddd4:	bf00      	nop
 800ddd6:	bf00      	nop
 800ddd8:	e7fd      	b.n	800ddd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d06c      	beq.n	800deba <pvPortMalloc+0x152>
 800dde0:	4b45      	ldr	r3, [pc, #276]	@ (800def8 <pvPortMalloc+0x190>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d867      	bhi.n	800deba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddea:	4b44      	ldr	r3, [pc, #272]	@ (800defc <pvPortMalloc+0x194>)
 800ddec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddee:	4b43      	ldr	r3, [pc, #268]	@ (800defc <pvPortMalloc+0x194>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddf4:	e004      	b.n	800de00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	429a      	cmp	r2, r3
 800de08:	d903      	bls.n	800de12 <pvPortMalloc+0xaa>
 800de0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1f1      	bne.n	800ddf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de12:	4b37      	ldr	r3, [pc, #220]	@ (800def0 <pvPortMalloc+0x188>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de18:	429a      	cmp	r2, r3
 800de1a:	d04e      	beq.n	800deba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2208      	movs	r2, #8
 800de22:	4413      	add	r3, r2
 800de24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	6a3b      	ldr	r3, [r7, #32]
 800de2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	1ad2      	subs	r2, r2, r3
 800de36:	2308      	movs	r3, #8
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d922      	bls.n	800de84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4413      	add	r3, r2
 800de44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	f003 0307 	and.w	r3, r3, #7
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00d      	beq.n	800de6c <pvPortMalloc+0x104>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de54:	b672      	cpsid	i
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	b662      	cpsie	i
 800de64:	613b      	str	r3, [r7, #16]
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	e7fd      	b.n	800de68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6e:	685a      	ldr	r2, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	1ad2      	subs	r2, r2, r3
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de7e:	69b8      	ldr	r0, [r7, #24]
 800de80:	f000 f902 	bl	800e088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de84:	4b1c      	ldr	r3, [pc, #112]	@ (800def8 <pvPortMalloc+0x190>)
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	4a1a      	ldr	r2, [pc, #104]	@ (800def8 <pvPortMalloc+0x190>)
 800de90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de92:	4b19      	ldr	r3, [pc, #100]	@ (800def8 <pvPortMalloc+0x190>)
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	4b1a      	ldr	r3, [pc, #104]	@ (800df00 <pvPortMalloc+0x198>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d203      	bcs.n	800dea6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de9e:	4b16      	ldr	r3, [pc, #88]	@ (800def8 <pvPortMalloc+0x190>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a17      	ldr	r2, [pc, #92]	@ (800df00 <pvPortMalloc+0x198>)
 800dea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	4b12      	ldr	r3, [pc, #72]	@ (800def4 <pvPortMalloc+0x18c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	431a      	orrs	r2, r3
 800deb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800deba:	f7fe fefd 	bl	800ccb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	f003 0307 	and.w	r3, r3, #7
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00d      	beq.n	800dee4 <pvPortMalloc+0x17c>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800decc:	b672      	cpsid	i
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	b662      	cpsie	i
 800dedc:	60fb      	str	r3, [r7, #12]
}
 800dede:	bf00      	nop
 800dee0:	bf00      	nop
 800dee2:	e7fd      	b.n	800dee0 <pvPortMalloc+0x178>
	return pvReturn;
 800dee4:	69fb      	ldr	r3, [r7, #28]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3728      	adds	r7, #40	@ 0x28
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	2000b7e0 	.word	0x2000b7e0
 800def4:	2000b7ec 	.word	0x2000b7ec
 800def8:	2000b7e4 	.word	0x2000b7e4
 800defc:	2000b7d8 	.word	0x2000b7d8
 800df00:	2000b7e8 	.word	0x2000b7e8

0800df04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b086      	sub	sp, #24
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d04e      	beq.n	800dfb4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df16:	2308      	movs	r3, #8
 800df18:	425b      	negs	r3, r3
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	4413      	add	r3, r2
 800df1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	685a      	ldr	r2, [r3, #4]
 800df28:	4b24      	ldr	r3, [pc, #144]	@ (800dfbc <vPortFree+0xb8>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4013      	ands	r3, r2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10d      	bne.n	800df4e <vPortFree+0x4a>
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df36:	b672      	cpsid	i
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	b662      	cpsie	i
 800df46:	60fb      	str	r3, [r7, #12]
}
 800df48:	bf00      	nop
 800df4a:	bf00      	nop
 800df4c:	e7fd      	b.n	800df4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00d      	beq.n	800df72 <vPortFree+0x6e>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5a:	b672      	cpsid	i
 800df5c:	f383 8811 	msr	BASEPRI, r3
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	b662      	cpsie	i
 800df6a:	60bb      	str	r3, [r7, #8]
}
 800df6c:	bf00      	nop
 800df6e:	bf00      	nop
 800df70:	e7fd      	b.n	800df6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	685a      	ldr	r2, [r3, #4]
 800df76:	4b11      	ldr	r3, [pc, #68]	@ (800dfbc <vPortFree+0xb8>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4013      	ands	r3, r2
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d019      	beq.n	800dfb4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d115      	bne.n	800dfb4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dfbc <vPortFree+0xb8>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	43db      	mvns	r3, r3
 800df92:	401a      	ands	r2, r3
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df98:	f7fe fe80 	bl	800cc9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	4b07      	ldr	r3, [pc, #28]	@ (800dfc0 <vPortFree+0xbc>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	4a06      	ldr	r2, [pc, #24]	@ (800dfc0 <vPortFree+0xbc>)
 800dfa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfaa:	6938      	ldr	r0, [r7, #16]
 800dfac:	f000 f86c 	bl	800e088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dfb0:	f7fe fe82 	bl	800ccb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfb4:	bf00      	nop
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	2000b7ec 	.word	0x2000b7ec
 800dfc0:	2000b7e4 	.word	0x2000b7e4

0800dfc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfca:	f246 3310 	movw	r3, #25360	@ 0x6310
 800dfce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfd0:	4b27      	ldr	r3, [pc, #156]	@ (800e070 <prvHeapInit+0xac>)
 800dfd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00c      	beq.n	800dff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f023 0307 	bic.w	r3, r3, #7
 800dfea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	4a1f      	ldr	r2, [pc, #124]	@ (800e070 <prvHeapInit+0xac>)
 800dff4:	4413      	add	r3, r2
 800dff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dffc:	4a1d      	ldr	r2, [pc, #116]	@ (800e074 <prvHeapInit+0xb0>)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e002:	4b1c      	ldr	r3, [pc, #112]	@ (800e074 <prvHeapInit+0xb0>)
 800e004:	2200      	movs	r2, #0
 800e006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e010:	2208      	movs	r2, #8
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	1a9b      	subs	r3, r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f023 0307 	bic.w	r3, r3, #7
 800e01e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4a15      	ldr	r2, [pc, #84]	@ (800e078 <prvHeapInit+0xb4>)
 800e024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e026:	4b14      	ldr	r3, [pc, #80]	@ (800e078 <prvHeapInit+0xb4>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2200      	movs	r2, #0
 800e02c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e02e:	4b12      	ldr	r3, [pc, #72]	@ (800e078 <prvHeapInit+0xb4>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	1ad2      	subs	r2, r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e044:	4b0c      	ldr	r3, [pc, #48]	@ (800e078 <prvHeapInit+0xb4>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	4a0a      	ldr	r2, [pc, #40]	@ (800e07c <prvHeapInit+0xb8>)
 800e052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	4a09      	ldr	r2, [pc, #36]	@ (800e080 <prvHeapInit+0xbc>)
 800e05a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e05c:	4b09      	ldr	r3, [pc, #36]	@ (800e084 <prvHeapInit+0xc0>)
 800e05e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr
 800e070:	200054c8 	.word	0x200054c8
 800e074:	2000b7d8 	.word	0x2000b7d8
 800e078:	2000b7e0 	.word	0x2000b7e0
 800e07c:	2000b7e8 	.word	0x2000b7e8
 800e080:	2000b7e4 	.word	0x2000b7e4
 800e084:	2000b7ec 	.word	0x2000b7ec

0800e088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e090:	4b28      	ldr	r3, [pc, #160]	@ (800e134 <prvInsertBlockIntoFreeList+0xac>)
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e002      	b.n	800e09c <prvInsertBlockIntoFreeList+0x14>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d8f7      	bhi.n	800e096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	68ba      	ldr	r2, [r7, #8]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d108      	bne.n	800e0ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	685a      	ldr	r2, [r3, #4]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	441a      	add	r2, r3
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	441a      	add	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d118      	bne.n	800e110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	4b15      	ldr	r3, [pc, #84]	@ (800e138 <prvInsertBlockIntoFreeList+0xb0>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d00d      	beq.n	800e106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	441a      	add	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	e008      	b.n	800e118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e106:	4b0c      	ldr	r3, [pc, #48]	@ (800e138 <prvInsertBlockIntoFreeList+0xb0>)
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	e003      	b.n	800e118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d002      	beq.n	800e126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e126:	bf00      	nop
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	2000b7d8 	.word	0x2000b7d8
 800e138:	2000b7e0 	.word	0x2000b7e0

0800e13c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	330c      	adds	r3, #12
 800e14c:	461a      	mov	r2, r3
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f002 fb67 	bl	8010824 <tcpip_send_msg_wait_sem>
 800e156:	4603      	mov	r3, r0
 800e158:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d103      	bne.n	800e16a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e168:	e001      	b.n	800e16e <netconn_apimsg+0x32>
  }
  return err;
 800e16a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08c      	sub	sp, #48	@ 0x30
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	4603      	mov	r3, r0
 800e180:	603a      	str	r2, [r7, #0]
 800e182:	71fb      	strb	r3, [r7, #7]
 800e184:	460b      	mov	r3, r1
 800e186:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f001 f951 	bl	800f434 <netconn_alloc>
 800e192:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d054      	beq.n	800e244 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e19a:	79bb      	ldrb	r3, [r7, #6]
 800e19c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e1a2:	f107 0308 	add.w	r3, r7, #8
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4829      	ldr	r0, [pc, #164]	@ (800e250 <netconn_new_with_proto_and_callback+0xd8>)
 800e1aa:	f7ff ffc7 	bl	800e13c <netconn_apimsg>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e1b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d043      	beq.n	800e244 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d005      	beq.n	800e1d0 <netconn_new_with_proto_and_callback+0x58>
 800e1c4:	4b23      	ldr	r3, [pc, #140]	@ (800e254 <netconn_new_with_proto_and_callback+0xdc>)
 800e1c6:	22a3      	movs	r2, #163	@ 0xa3
 800e1c8:	4923      	ldr	r1, [pc, #140]	@ (800e258 <netconn_new_with_proto_and_callback+0xe0>)
 800e1ca:	4824      	ldr	r0, [pc, #144]	@ (800e25c <netconn_new_with_proto_and_callback+0xe4>)
 800e1cc:	f00f f98c 	bl	801d4e8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	3310      	adds	r3, #16
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f00e faf6 	bl	801c7c6 <sys_mbox_valid>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d105      	bne.n	800e1ec <netconn_new_with_proto_and_callback+0x74>
 800e1e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e254 <netconn_new_with_proto_and_callback+0xdc>)
 800e1e2:	22a4      	movs	r2, #164	@ 0xa4
 800e1e4:	491e      	ldr	r1, [pc, #120]	@ (800e260 <netconn_new_with_proto_and_callback+0xe8>)
 800e1e6:	481d      	ldr	r0, [pc, #116]	@ (800e25c <netconn_new_with_proto_and_callback+0xe4>)
 800e1e8:	f00f f97e 	bl	801d4e8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ee:	3314      	adds	r3, #20
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f00e fae8 	bl	801c7c6 <sys_mbox_valid>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d005      	beq.n	800e208 <netconn_new_with_proto_and_callback+0x90>
 800e1fc:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <netconn_new_with_proto_and_callback+0xdc>)
 800e1fe:	22a6      	movs	r2, #166	@ 0xa6
 800e200:	4918      	ldr	r1, [pc, #96]	@ (800e264 <netconn_new_with_proto_and_callback+0xec>)
 800e202:	4816      	ldr	r0, [pc, #88]	@ (800e25c <netconn_new_with_proto_and_callback+0xe4>)
 800e204:	f00f f970 	bl	801d4e8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20a:	330c      	adds	r3, #12
 800e20c:	4618      	mov	r0, r3
 800e20e:	f00e fb6b 	bl	801c8e8 <sys_sem_valid>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d105      	bne.n	800e224 <netconn_new_with_proto_and_callback+0xac>
 800e218:	4b0e      	ldr	r3, [pc, #56]	@ (800e254 <netconn_new_with_proto_and_callback+0xdc>)
 800e21a:	22a9      	movs	r2, #169	@ 0xa9
 800e21c:	4912      	ldr	r1, [pc, #72]	@ (800e268 <netconn_new_with_proto_and_callback+0xf0>)
 800e21e:	480f      	ldr	r0, [pc, #60]	@ (800e25c <netconn_new_with_proto_and_callback+0xe4>)
 800e220:	f00f f962 	bl	801d4e8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e226:	330c      	adds	r3, #12
 800e228:	4618      	mov	r0, r3
 800e22a:	f00e fb50 	bl	801c8ce <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e230:	3310      	adds	r3, #16
 800e232:	4618      	mov	r0, r3
 800e234:	f00e fa40 	bl	801c6b8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e238:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e23a:	2007      	movs	r0, #7
 800e23c:	f003 fef0 	bl	8012020 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e240:	2300      	movs	r3, #0
 800e242:	e000      	b.n	800e246 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e246:	4618      	mov	r0, r3
 800e248:	3730      	adds	r7, #48	@ 0x30
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	0800f409 	.word	0x0800f409
 800e254:	0801fb70 	.word	0x0801fb70
 800e258:	0801fba4 	.word	0x0801fba4
 800e25c:	0801fbc8 	.word	0x0801fbc8
 800e260:	0801fbf0 	.word	0x0801fbf0
 800e264:	0801fc08 	.word	0x0801fc08
 800e268:	0801fc2c 	.word	0x0801fc2c

0800e26c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08c      	sub	sp, #48	@ 0x30
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e014      	b.n	800e2a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e282:	2329      	movs	r3, #41	@ 0x29
 800e284:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e286:	f107 030c 	add.w	r3, r7, #12
 800e28a:	4619      	mov	r1, r3
 800e28c:	4808      	ldr	r0, [pc, #32]	@ (800e2b0 <netconn_prepare_delete+0x44>)
 800e28e:	f7ff ff55 	bl	800e13c <netconn_apimsg>
 800e292:	4603      	mov	r3, r0
 800e294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e298:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <netconn_prepare_delete+0x3a>
    return err;
 800e2a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e2a4:	e000      	b.n	800e2a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3730      	adds	r7, #48	@ 0x30
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	0800f975 	.word	0x0800f975

0800e2b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <netconn_delete+0x12>
    return ERR_OK;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	e00d      	b.n	800e2e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ffd0 	bl	800e26c <netconn_prepare_delete>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d102      	bne.n	800e2de <netconn_delete+0x2a>
    netconn_free(conn);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 f919 	bl	800f510 <netconn_free>
  }
  return err;
 800e2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
	...

0800e2ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08e      	sub	sp, #56	@ 0x38
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d109      	bne.n	800e314 <netconn_bind+0x28>
 800e300:	4b11      	ldr	r3, [pc, #68]	@ (800e348 <netconn_bind+0x5c>)
 800e302:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e306:	4911      	ldr	r1, [pc, #68]	@ (800e34c <netconn_bind+0x60>)
 800e308:	4811      	ldr	r0, [pc, #68]	@ (800e350 <netconn_bind+0x64>)
 800e30a:	f00f f8ed 	bl	801d4e8 <iprintf>
 800e30e:	f06f 030f 	mvn.w	r3, #15
 800e312:	e015      	b.n	800e340 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d101      	bne.n	800e31e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e31a:	4b0e      	ldr	r3, [pc, #56]	@ (800e354 <netconn_bind+0x68>)
 800e31c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e326:	88fb      	ldrh	r3, [r7, #6]
 800e328:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e32a:	f107 0314 	add.w	r3, r7, #20
 800e32e:	4619      	mov	r1, r3
 800e330:	4809      	ldr	r0, [pc, #36]	@ (800e358 <netconn_bind+0x6c>)
 800e332:	f7ff ff03 	bl	800e13c <netconn_apimsg>
 800e336:	4603      	mov	r3, r0
 800e338:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e33c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e340:	4618      	mov	r0, r3
 800e342:	3738      	adds	r7, #56	@ 0x38
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	0801fb70 	.word	0x0801fb70
 800e34c:	0801fca8 	.word	0x0801fca8
 800e350:	0801fbc8 	.word	0x0801fbc8
 800e354:	08024a7c 	.word	0x08024a7c
 800e358:	0800fb3d 	.word	0x0800fb3d

0800e35c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08c      	sub	sp, #48	@ 0x30
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <netconn_listen_with_backlog+0x26>
 800e36e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <netconn_listen_with_backlog+0x48>)
 800e370:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800e374:	490c      	ldr	r1, [pc, #48]	@ (800e3a8 <netconn_listen_with_backlog+0x4c>)
 800e376:	480d      	ldr	r0, [pc, #52]	@ (800e3ac <netconn_listen_with_backlog+0x50>)
 800e378:	f00f f8b6 	bl	801d4e8 <iprintf>
 800e37c:	f06f 030f 	mvn.w	r3, #15
 800e380:	e00c      	b.n	800e39c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e386:	f107 030c 	add.w	r3, r7, #12
 800e38a:	4619      	mov	r1, r3
 800e38c:	4808      	ldr	r0, [pc, #32]	@ (800e3b0 <netconn_listen_with_backlog+0x54>)
 800e38e:	f7ff fed5 	bl	800e13c <netconn_apimsg>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e398:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3730      	adds	r7, #48	@ 0x30
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	0801fb70 	.word	0x0801fb70
 800e3a8:	0801fd28 	.word	0x0801fd28
 800e3ac:	0801fbc8 	.word	0x0801fbc8
 800e3b0:	0800fbb1 	.word	0x0800fbb1

0800e3b4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b086      	sub	sp, #24
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d109      	bne.n	800e3d8 <netconn_accept+0x24>
 800e3c4:	4b3d      	ldr	r3, [pc, #244]	@ (800e4bc <netconn_accept+0x108>)
 800e3c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e3ca:	493d      	ldr	r1, [pc, #244]	@ (800e4c0 <netconn_accept+0x10c>)
 800e3cc:	483d      	ldr	r0, [pc, #244]	@ (800e4c4 <netconn_accept+0x110>)
 800e3ce:	f00f f88b 	bl	801d4e8 <iprintf>
 800e3d2:	f06f 030f 	mvn.w	r3, #15
 800e3d6:	e06c      	b.n	800e4b2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d109      	bne.n	800e3f8 <netconn_accept+0x44>
 800e3e4:	4b35      	ldr	r3, [pc, #212]	@ (800e4bc <netconn_accept+0x108>)
 800e3e6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800e3ea:	4937      	ldr	r1, [pc, #220]	@ (800e4c8 <netconn_accept+0x114>)
 800e3ec:	4835      	ldr	r0, [pc, #212]	@ (800e4c4 <netconn_accept+0x110>)
 800e3ee:	f00f f87b 	bl	801d4e8 <iprintf>
 800e3f2:	f06f 030f 	mvn.w	r3, #15
 800e3f6:	e05c      	b.n	800e4b2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fb9a 	bl	800eb32 <netconn_err>
 800e3fe:	4603      	mov	r3, r0
 800e400:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d002      	beq.n	800e410 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e40a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e40e:	e050      	b.n	800e4b2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	3314      	adds	r3, #20
 800e414:	4618      	mov	r0, r3
 800e416:	f00e f9d6 	bl	801c7c6 <sys_mbox_valid>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d005      	beq.n	800e42c <netconn_accept+0x78>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7f1b      	ldrb	r3, [r3, #28]
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e42c:	f06f 030e 	mvn.w	r3, #14
 800e430:	e03f      	b.n	800e4b2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7f1b      	ldrb	r3, [r3, #28]
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00e      	beq.n	800e45c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3314      	adds	r3, #20
 800e442:	f107 020c 	add.w	r2, r7, #12
 800e446:	4611      	mov	r1, r2
 800e448:	4618      	mov	r0, r3
 800e44a:	f00e f9a0 	bl	801c78e <sys_arch_mbox_tryfetch>
 800e44e:	4603      	mov	r3, r0
 800e450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e454:	d10a      	bne.n	800e46c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e456:	f06f 0306 	mvn.w	r3, #6
 800e45a:	e02a      	b.n	800e4b2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3314      	adds	r3, #20
 800e460:	f107 010c 	add.w	r1, r7, #12
 800e464:	2200      	movs	r2, #0
 800e466:	4618      	mov	r0, r3
 800e468:	f00e f952 	bl	801c710 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e470:	2b00      	cmp	r3, #0
 800e472:	d005      	beq.n	800e480 <netconn_accept+0xcc>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e478:	2200      	movs	r2, #0
 800e47a:	2101      	movs	r1, #1
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f107 0213 	add.w	r2, r7, #19
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 fba3 	bl	800ebd4 <lwip_netconn_is_err_msg>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e498:	e00b      	b.n	800e4b2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d102      	bne.n	800e4a6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e4a0:	f06f 030e 	mvn.w	r3, #14
 800e4a4:	e005      	b.n	800e4b2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e4b0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	0801fb70 	.word	0x0801fb70
 800e4c0:	0801fd48 	.word	0x0801fd48
 800e4c4:	0801fbc8 	.word	0x0801fbc8
 800e4c8:	0801fd68 	.word	0x0801fd68

0800e4cc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b088      	sub	sp, #32
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	4613      	mov	r3, r2
 800e4d8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d109      	bne.n	800e4f8 <netconn_recv_data+0x2c>
 800e4e4:	4b58      	ldr	r3, [pc, #352]	@ (800e648 <netconn_recv_data+0x17c>)
 800e4e6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e4ea:	4958      	ldr	r1, [pc, #352]	@ (800e64c <netconn_recv_data+0x180>)
 800e4ec:	4858      	ldr	r0, [pc, #352]	@ (800e650 <netconn_recv_data+0x184>)
 800e4ee:	f00e fffb 	bl	801d4e8 <iprintf>
 800e4f2:	f06f 030f 	mvn.w	r3, #15
 800e4f6:	e0a2      	b.n	800e63e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d109      	bne.n	800e518 <netconn_recv_data+0x4c>
 800e504:	4b50      	ldr	r3, [pc, #320]	@ (800e648 <netconn_recv_data+0x17c>)
 800e506:	f240 224a 	movw	r2, #586	@ 0x24a
 800e50a:	4952      	ldr	r1, [pc, #328]	@ (800e654 <netconn_recv_data+0x188>)
 800e50c:	4850      	ldr	r0, [pc, #320]	@ (800e650 <netconn_recv_data+0x184>)
 800e50e:	f00e ffeb 	bl	801d4e8 <iprintf>
 800e512:	f06f 030f 	mvn.w	r3, #15
 800e516:	e092      	b.n	800e63e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3310      	adds	r3, #16
 800e51c:	4618      	mov	r0, r3
 800e51e:	f00e f952 	bl	801c7c6 <sys_mbox_valid>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10e      	bne.n	800e546 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e528:	68f8      	ldr	r0, [r7, #12]
 800e52a:	f000 fb02 	bl	800eb32 <netconn_err>
 800e52e:	4603      	mov	r3, r0
 800e530:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e532:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d002      	beq.n	800e540 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e53a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e53e:	e07e      	b.n	800e63e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e540:	f06f 030a 	mvn.w	r3, #10
 800e544:	e07b      	b.n	800e63e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	7f1b      	ldrb	r3, [r3, #28]
 800e54a:	f003 0302 	and.w	r3, r3, #2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10f      	bne.n	800e572 <netconn_recv_data+0xa6>
 800e552:	79fb      	ldrb	r3, [r7, #7]
 800e554:	f003 0304 	and.w	r3, r3, #4
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	7f1b      	ldrb	r3, [r3, #28]
 800e560:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e564:	2b00      	cmp	r3, #0
 800e566:	d104      	bne.n	800e572 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d023      	beq.n	800e5ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	3310      	adds	r3, #16
 800e576:	f107 0218 	add.w	r2, r7, #24
 800e57a:	4611      	mov	r1, r2
 800e57c:	4618      	mov	r0, r3
 800e57e:	f00e f906 	bl	801c78e <sys_arch_mbox_tryfetch>
 800e582:	4603      	mov	r3, r0
 800e584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e588:	d11f      	bne.n	800e5ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f000 fad1 	bl	800eb32 <netconn_err>
 800e590:	4603      	mov	r3, r0
 800e592:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e594:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e59c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e5a0:	e04d      	b.n	800e63e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	7f1b      	ldrb	r3, [r3, #28]
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d002      	beq.n	800e5b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e5ae:	f06f 030a 	mvn.w	r3, #10
 800e5b2:	e044      	b.n	800e63e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e5b4:	f06f 0306 	mvn.w	r3, #6
 800e5b8:	e041      	b.n	800e63e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3310      	adds	r3, #16
 800e5be:	f107 0118 	add.w	r1, r7, #24
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f00e f8a3 	bl	801c710 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d117      	bne.n	800e606 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	f107 0217 	add.w	r2, r7, #23
 800e5dc:	4611      	mov	r1, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 faf8 	bl	800ebd4 <lwip_netconn_is_err_msg>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d009      	beq.n	800e5fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e5ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5ee:	f113 0f0f 	cmn.w	r3, #15
 800e5f2:	d101      	bne.n	800e5f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e022      	b.n	800e63e <netconn_recv_data+0x172>
      }
      return err;
 800e5f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5fc:	e01f      	b.n	800e63e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	891b      	ldrh	r3, [r3, #8]
 800e602:	83fb      	strh	r3, [r7, #30]
 800e604:	e00d      	b.n	800e622 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d106      	bne.n	800e61a <netconn_recv_data+0x14e>
 800e60c:	4b0e      	ldr	r3, [pc, #56]	@ (800e648 <netconn_recv_data+0x17c>)
 800e60e:	f240 2291 	movw	r2, #657	@ 0x291
 800e612:	4911      	ldr	r1, [pc, #68]	@ (800e658 <netconn_recv_data+0x18c>)
 800e614:	480e      	ldr	r0, [pc, #56]	@ (800e650 <netconn_recv_data+0x184>)
 800e616:	f00e ff67 	bl	801d4e8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e626:	2b00      	cmp	r3, #0
 800e628:	d005      	beq.n	800e636 <netconn_recv_data+0x16a>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e62e:	8bfa      	ldrh	r2, [r7, #30]
 800e630:	2101      	movs	r1, #1
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e63c:	2300      	movs	r3, #0
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3720      	adds	r7, #32
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	0801fb70 	.word	0x0801fb70
 800e64c:	0801fd88 	.word	0x0801fd88
 800e650:	0801fbc8 	.word	0x0801fbc8
 800e654:	0801fda8 	.word	0x0801fda8
 800e658:	0801fdc4 	.word	0x0801fdc4

0800e65c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <netconn_tcp_recvd_msg+0x1e>
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e676:	2b10      	cmp	r3, #16
 800e678:	d009      	beq.n	800e68e <netconn_tcp_recvd_msg+0x32>
 800e67a:	4b0c      	ldr	r3, [pc, #48]	@ (800e6ac <netconn_tcp_recvd_msg+0x50>)
 800e67c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e680:	490b      	ldr	r1, [pc, #44]	@ (800e6b0 <netconn_tcp_recvd_msg+0x54>)
 800e682:	480c      	ldr	r0, [pc, #48]	@ (800e6b4 <netconn_tcp_recvd_msg+0x58>)
 800e684:	f00e ff30 	bl	801d4e8 <iprintf>
 800e688:	f06f 030f 	mvn.w	r3, #15
 800e68c:	e00a      	b.n	800e6a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e69a:	6879      	ldr	r1, [r7, #4]
 800e69c:	4806      	ldr	r0, [pc, #24]	@ (800e6b8 <netconn_tcp_recvd_msg+0x5c>)
 800e69e:	f7ff fd4d 	bl	800e13c <netconn_apimsg>
 800e6a2:	4603      	mov	r3, r0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	0801fb70 	.word	0x0801fb70
 800e6b0:	0801fdd0 	.word	0x0801fdd0
 800e6b4:	0801fbc8 	.word	0x0801fbc8
 800e6b8:	0800fd7b 	.word	0x0800fd7b

0800e6bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b090      	sub	sp, #64	@ 0x40
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	3310      	adds	r3, #16
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f00e f879 	bl	801c7c6 <sys_mbox_valid>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d102      	bne.n	800e6e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e6da:	f06f 030a 	mvn.w	r3, #10
 800e6de:	e06d      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	7f1b      	ldrb	r3, [r3, #28]
 800e6e4:	b25b      	sxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	da07      	bge.n	800e6fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	7f1b      	ldrb	r3, [r3, #28]
 800e6ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e6f8:	e039      	b.n	800e76e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e6fa:	79fb      	ldrb	r3, [r7, #7]
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	68b9      	ldr	r1, [r7, #8]
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f7ff fee3 	bl	800e4cc <netconn_recv_data>
 800e706:	4603      	mov	r3, r0
 800e708:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e70c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e714:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e718:	e050      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e720:	79fb      	ldrb	r3, [r7, #7]
 800e722:	f003 0308 	and.w	r3, r3, #8
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10e      	bne.n	800e748 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <netconn_recv_data_tcp+0x7a>
 800e730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e732:	891b      	ldrh	r3, [r3, #8]
 800e734:	e000      	b.n	800e738 <netconn_recv_data_tcp+0x7c>
 800e736:	2301      	movs	r3, #1
 800e738:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e73a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e73c:	f107 0214 	add.w	r2, r7, #20
 800e740:	4619      	mov	r1, r3
 800e742:	68f8      	ldr	r0, [r7, #12]
 800e744:	f7ff ff8a 	bl	800e65c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d134      	bne.n	800e7b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e74e:	79fb      	ldrb	r3, [r7, #7]
 800e750:	f003 0310 	and.w	r3, r3, #16
 800e754:	2b00      	cmp	r3, #0
 800e756:	d009      	beq.n	800e76c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	7f1b      	ldrb	r3, [r3, #28]
 800e75c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e760:	b2da      	uxtb	r2, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e766:	f06f 0306 	mvn.w	r3, #6
 800e76a:	e027      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e76c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <netconn_recv_data_tcp+0xc6>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e77a:	2200      	movs	r2, #0
 800e77c:	2101      	movs	r1, #1
 800e77e:	68f8      	ldr	r0, [r7, #12]
 800e780:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10f      	bne.n	800e7aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e78a:	68f8      	ldr	r0, [r7, #12]
 800e78c:	f000 f9d1 	bl	800eb32 <netconn_err>
 800e790:	4603      	mov	r3, r0
 800e792:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800e796:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800e79e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e7a2:	e00b      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e7a4:	f06f 030d 	mvn.w	r3, #13
 800e7a8:	e008      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e7aa:	2101      	movs	r1, #1
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 f983 	bl	800eab8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e7b2:	f06f 030e 	mvn.w	r3, #14
 800e7b6:	e001      	b.n	800e7bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e7b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3740      	adds	r7, #64	@ 0x40
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d109      	bne.n	800e7ec <netconn_recv+0x28>
 800e7d8:	4b32      	ldr	r3, [pc, #200]	@ (800e8a4 <netconn_recv+0xe0>)
 800e7da:	f240 3263 	movw	r2, #867	@ 0x363
 800e7de:	4932      	ldr	r1, [pc, #200]	@ (800e8a8 <netconn_recv+0xe4>)
 800e7e0:	4832      	ldr	r0, [pc, #200]	@ (800e8ac <netconn_recv+0xe8>)
 800e7e2:	f00e fe81 	bl	801d4e8 <iprintf>
 800e7e6:	f06f 030f 	mvn.w	r3, #15
 800e7ea:	e056      	b.n	800e89a <netconn_recv+0xd6>
  *new_buf = NULL;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d109      	bne.n	800e80c <netconn_recv+0x48>
 800e7f8:	4b2a      	ldr	r3, [pc, #168]	@ (800e8a4 <netconn_recv+0xe0>)
 800e7fa:	f240 3265 	movw	r2, #869	@ 0x365
 800e7fe:	492c      	ldr	r1, [pc, #176]	@ (800e8b0 <netconn_recv+0xec>)
 800e800:	482a      	ldr	r0, [pc, #168]	@ (800e8ac <netconn_recv+0xe8>)
 800e802:	f00e fe71 	bl	801d4e8 <iprintf>
 800e806:	f06f 030f 	mvn.w	r3, #15
 800e80a:	e046      	b.n	800e89a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e814:	2b10      	cmp	r3, #16
 800e816:	d13a      	bne.n	800e88e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e81c:	2006      	movs	r0, #6
 800e81e:	f003 fb89 	bl	8011f34 <memp_malloc>
 800e822:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d102      	bne.n	800e830 <netconn_recv+0x6c>
      return ERR_MEM;
 800e82a:	f04f 33ff 	mov.w	r3, #4294967295
 800e82e:	e034      	b.n	800e89a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800e830:	f107 030c 	add.w	r3, r7, #12
 800e834:	2200      	movs	r2, #0
 800e836:	4619      	mov	r1, r3
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff ff3f 	bl	800e6bc <netconn_recv_data_tcp>
 800e83e:	4603      	mov	r3, r0
 800e840:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d006      	beq.n	800e858 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800e84a:	6979      	ldr	r1, [r7, #20]
 800e84c:	2006      	movs	r0, #6
 800e84e:	f003 fbe7 	bl	8012020 <memp_free>
      return err;
 800e852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e856:	e020      	b.n	800e89a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <netconn_recv+0xa8>
 800e85e:	4b11      	ldr	r3, [pc, #68]	@ (800e8a4 <netconn_recv+0xe0>)
 800e860:	f240 3279 	movw	r2, #889	@ 0x379
 800e864:	4913      	ldr	r1, [pc, #76]	@ (800e8b4 <netconn_recv+0xf0>)
 800e866:	4811      	ldr	r0, [pc, #68]	@ (800e8ac <netconn_recv+0xe8>)
 800e868:	f00e fe3e 	bl	801d4e8 <iprintf>

    buf->p = p;
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	2200      	movs	r2, #0
 800e87c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	2200      	movs	r2, #0
 800e882:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	e005      	b.n	800e89a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800e88e:	2200      	movs	r2, #0
 800e890:	6839      	ldr	r1, [r7, #0]
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7ff fe1a 	bl	800e4cc <netconn_recv_data>
 800e898:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	0801fb70 	.word	0x0801fb70
 800e8a8:	0801fd88 	.word	0x0801fd88
 800e8ac:	0801fbc8 	.word	0x0801fbc8
 800e8b0:	0801fda8 	.word	0x0801fda8
 800e8b4:	0801fe20 	.word	0x0801fe20

0800e8b8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08c      	sub	sp, #48	@ 0x30
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d109      	bne.n	800e8dc <netconn_send+0x24>
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e904 <netconn_send+0x4c>)
 800e8ca:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800e8ce:	490e      	ldr	r1, [pc, #56]	@ (800e908 <netconn_send+0x50>)
 800e8d0:	480e      	ldr	r0, [pc, #56]	@ (800e90c <netconn_send+0x54>)
 800e8d2:	f00e fe09 	bl	801d4e8 <iprintf>
 800e8d6:	f06f 030f 	mvn.w	r3, #15
 800e8da:	e00e      	b.n	800e8fa <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e8e4:	f107 030c 	add.w	r3, r7, #12
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4809      	ldr	r0, [pc, #36]	@ (800e910 <netconn_send+0x58>)
 800e8ec:	f7ff fc26 	bl	800e13c <netconn_apimsg>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e8f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3730      	adds	r7, #48	@ 0x30
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	0801fb70 	.word	0x0801fb70
 800e908:	0801fe2c 	.word	0x0801fe2c
 800e90c:	0801fbc8 	.word	0x0801fbc8
 800e910:	0800fce1 	.word	0x0800fce1

0800e914 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af02      	add	r7, sp, #8
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e92a:	78fa      	ldrb	r2, [r7, #3]
 800e92c:	f107 0110 	add.w	r1, r7, #16
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	4613      	mov	r3, r2
 800e936:	2201      	movs	r2, #1
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f000 f805 	bl	800e948 <netconn_write_vectors_partly>
 800e93e:	4603      	mov	r3, r0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3718      	adds	r7, #24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b092      	sub	sp, #72	@ 0x48
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	4611      	mov	r1, r2
 800e954:	461a      	mov	r2, r3
 800e956:	460b      	mov	r3, r1
 800e958:	80fb      	strh	r3, [r7, #6]
 800e95a:	4613      	mov	r3, r2
 800e95c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d109      	bne.n	800e978 <netconn_write_vectors_partly+0x30>
 800e964:	4b4e      	ldr	r3, [pc, #312]	@ (800eaa0 <netconn_write_vectors_partly+0x158>)
 800e966:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e96a:	494e      	ldr	r1, [pc, #312]	@ (800eaa4 <netconn_write_vectors_partly+0x15c>)
 800e96c:	484e      	ldr	r0, [pc, #312]	@ (800eaa8 <netconn_write_vectors_partly+0x160>)
 800e96e:	f00e fdbb 	bl	801d4e8 <iprintf>
 800e972:	f06f 030f 	mvn.w	r3, #15
 800e976:	e08e      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e980:	2b10      	cmp	r3, #16
 800e982:	d009      	beq.n	800e998 <netconn_write_vectors_partly+0x50>
 800e984:	4b46      	ldr	r3, [pc, #280]	@ (800eaa0 <netconn_write_vectors_partly+0x158>)
 800e986:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800e98a:	4948      	ldr	r1, [pc, #288]	@ (800eaac <netconn_write_vectors_partly+0x164>)
 800e98c:	4846      	ldr	r0, [pc, #280]	@ (800eaa8 <netconn_write_vectors_partly+0x160>)
 800e98e:	f00e fdab 	bl	801d4e8 <iprintf>
 800e992:	f06f 0305 	mvn.w	r3, #5
 800e996:	e07e      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	7f1b      	ldrb	r3, [r3, #28]
 800e99c:	f003 0302 	and.w	r3, r3, #2
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d104      	bne.n	800e9ae <netconn_write_vectors_partly+0x66>
 800e9a4:	797b      	ldrb	r3, [r7, #5]
 800e9a6:	f003 0304 	and.w	r3, r3, #4
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <netconn_write_vectors_partly+0x6a>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <netconn_write_vectors_partly+0x6c>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e9b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d005      	beq.n	800e9cc <netconn_write_vectors_partly+0x84>
 800e9c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d102      	bne.n	800e9cc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e9c6:	f06f 0305 	mvn.w	r3, #5
 800e9ca:	e064      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9d4:	e015      	b.n	800ea02 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9d8:	00db      	lsls	r3, r3, #3
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	4413      	add	r3, r2
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9e2:	4413      	add	r3, r2
 800e9e4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800e9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9e8:	00db      	lsls	r3, r3, #3
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d202      	bcs.n	800e9fc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e9f6:	f06f 0305 	mvn.w	r3, #5
 800e9fa:	e04c      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e9fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9fe:	3301      	adds	r3, #1
 800ea00:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea02:	88fb      	ldrh	r3, [r7, #6]
 800ea04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea06:	429a      	cmp	r2, r3
 800ea08:	dbe5      	blt.n	800e9d6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ea0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d101      	bne.n	800ea14 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	e040      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ea14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da0a      	bge.n	800ea30 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ea1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d102      	bne.n	800ea26 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ea20:	f06f 0305 	mvn.w	r3, #5
 800ea24:	e037      	b.n	800ea96 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ea26:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ea2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800ea2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ea38:	88fb      	ldrh	r3, [r7, #6]
 800ea3a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ea40:	797b      	ldrb	r3, [r7, #5]
 800ea42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ea46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea48:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ea4e:	f107 0314 	add.w	r3, r7, #20
 800ea52:	4619      	mov	r1, r3
 800ea54:	4816      	ldr	r0, [pc, #88]	@ (800eab0 <netconn_write_vectors_partly+0x168>)
 800ea56:	f7ff fb71 	bl	800e13c <netconn_apimsg>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ea60:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d114      	bne.n	800ea92 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ea68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d002      	beq.n	800ea74 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ea6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea72:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ea74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10a      	bne.n	800ea92 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ea7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d006      	beq.n	800ea92 <netconn_write_vectors_partly+0x14a>
 800ea84:	4b06      	ldr	r3, [pc, #24]	@ (800eaa0 <netconn_write_vectors_partly+0x158>)
 800ea86:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea8a:	490a      	ldr	r1, [pc, #40]	@ (800eab4 <netconn_write_vectors_partly+0x16c>)
 800ea8c:	4806      	ldr	r0, [pc, #24]	@ (800eaa8 <netconn_write_vectors_partly+0x160>)
 800ea8e:	f00e fd2b 	bl	801d4e8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ea92:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3748      	adds	r7, #72	@ 0x48
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	0801fb70 	.word	0x0801fb70
 800eaa4:	0801fe48 	.word	0x0801fe48
 800eaa8:	0801fbc8 	.word	0x0801fbc8
 800eaac:	0801fe64 	.word	0x0801fe64
 800eab0:	0801017d 	.word	0x0801017d
 800eab4:	0801fe88 	.word	0x0801fe88

0800eab8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08c      	sub	sp, #48	@ 0x30
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	460b      	mov	r3, r1
 800eac2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <netconn_close_shutdown+0x26>
 800eaca:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <netconn_close_shutdown+0x50>)
 800eacc:	f240 4247 	movw	r2, #1095	@ 0x447
 800ead0:	490e      	ldr	r1, [pc, #56]	@ (800eb0c <netconn_close_shutdown+0x54>)
 800ead2:	480f      	ldr	r0, [pc, #60]	@ (800eb10 <netconn_close_shutdown+0x58>)
 800ead4:	f00e fd08 	bl	801d4e8 <iprintf>
 800ead8:	f06f 030f 	mvn.w	r3, #15
 800eadc:	e010      	b.n	800eb00 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800eae2:	78fb      	ldrb	r3, [r7, #3]
 800eae4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800eae6:	2329      	movs	r3, #41	@ 0x29
 800eae8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800eaea:	f107 030c 	add.w	r3, r7, #12
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4808      	ldr	r0, [pc, #32]	@ (800eb14 <netconn_close_shutdown+0x5c>)
 800eaf2:	f7ff fb23 	bl	800e13c <netconn_apimsg>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800eafc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3730      	adds	r7, #48	@ 0x30
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0801fb70 	.word	0x0801fb70
 800eb0c:	0801feac 	.word	0x0801feac
 800eb10:	0801fbc8 	.word	0x0801fbc8
 800eb14:	08010295 	.word	0x08010295

0800eb18 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800eb20:	2103      	movs	r1, #3
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f7ff ffc8 	bl	800eab8 <netconn_close_shutdown>
 800eb28:	4603      	mov	r3, r0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b084      	sub	sp, #16
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <netconn_err+0x12>
    return ERR_OK;
 800eb40:	2300      	movs	r3, #0
 800eb42:	e00d      	b.n	800eb60 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800eb44:	f00d ff5a 	bl	801c9fc <sys_arch_protect>
 800eb48:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	7a1b      	ldrb	r3, [r3, #8]
 800eb4e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f00d ff5e 	bl	801ca18 <sys_arch_unprotect>
  return err;
 800eb5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800eb72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb76:	f113 0f0d 	cmn.w	r3, #13
 800eb7a:	d009      	beq.n	800eb90 <lwip_netconn_err_to_msg+0x28>
 800eb7c:	f113 0f0d 	cmn.w	r3, #13
 800eb80:	dc0c      	bgt.n	800eb9c <lwip_netconn_err_to_msg+0x34>
 800eb82:	f113 0f0f 	cmn.w	r3, #15
 800eb86:	d007      	beq.n	800eb98 <lwip_netconn_err_to_msg+0x30>
 800eb88:	f113 0f0e 	cmn.w	r3, #14
 800eb8c:	d002      	beq.n	800eb94 <lwip_netconn_err_to_msg+0x2c>
 800eb8e:	e005      	b.n	800eb9c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800eb90:	4b0a      	ldr	r3, [pc, #40]	@ (800ebbc <lwip_netconn_err_to_msg+0x54>)
 800eb92:	e00e      	b.n	800ebb2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800eb94:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc0 <lwip_netconn_err_to_msg+0x58>)
 800eb96:	e00c      	b.n	800ebb2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800eb98:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc4 <lwip_netconn_err_to_msg+0x5c>)
 800eb9a:	e00a      	b.n	800ebb2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800eb9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <lwip_netconn_err_to_msg+0x48>
 800eba4:	4b08      	ldr	r3, [pc, #32]	@ (800ebc8 <lwip_netconn_err_to_msg+0x60>)
 800eba6:	227d      	movs	r2, #125	@ 0x7d
 800eba8:	4908      	ldr	r1, [pc, #32]	@ (800ebcc <lwip_netconn_err_to_msg+0x64>)
 800ebaa:	4809      	ldr	r0, [pc, #36]	@ (800ebd0 <lwip_netconn_err_to_msg+0x68>)
 800ebac:	f00e fc9c 	bl	801d4e8 <iprintf>
      return NULL;
 800ebb0:	2300      	movs	r3, #0
  }
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	08023284 	.word	0x08023284
 800ebc0:	08023285 	.word	0x08023285
 800ebc4:	08023286 	.word	0x08023286
 800ebc8:	0801fec8 	.word	0x0801fec8
 800ebcc:	0801fefc 	.word	0x0801fefc
 800ebd0:	0801ff0c 	.word	0x0801ff0c

0800ebd4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d105      	bne.n	800ebf0 <lwip_netconn_is_err_msg+0x1c>
 800ebe4:	4b12      	ldr	r3, [pc, #72]	@ (800ec30 <lwip_netconn_is_err_msg+0x5c>)
 800ebe6:	2285      	movs	r2, #133	@ 0x85
 800ebe8:	4912      	ldr	r1, [pc, #72]	@ (800ec34 <lwip_netconn_is_err_msg+0x60>)
 800ebea:	4813      	ldr	r0, [pc, #76]	@ (800ec38 <lwip_netconn_is_err_msg+0x64>)
 800ebec:	f00e fc7c 	bl	801d4e8 <iprintf>

  if (msg == &netconn_aborted) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a12      	ldr	r2, [pc, #72]	@ (800ec3c <lwip_netconn_is_err_msg+0x68>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d104      	bne.n	800ec02 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	22f3      	movs	r2, #243	@ 0xf3
 800ebfc:	701a      	strb	r2, [r3, #0]
    return 1;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e012      	b.n	800ec28 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a0e      	ldr	r2, [pc, #56]	@ (800ec40 <lwip_netconn_is_err_msg+0x6c>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d104      	bne.n	800ec14 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	22f2      	movs	r2, #242	@ 0xf2
 800ec0e:	701a      	strb	r2, [r3, #0]
    return 1;
 800ec10:	2301      	movs	r3, #1
 800ec12:	e009      	b.n	800ec28 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4a0b      	ldr	r2, [pc, #44]	@ (800ec44 <lwip_netconn_is_err_msg+0x70>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d104      	bne.n	800ec26 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	22f1      	movs	r2, #241	@ 0xf1
 800ec20:	701a      	strb	r2, [r3, #0]
    return 1;
 800ec22:	2301      	movs	r3, #1
 800ec24:	e000      	b.n	800ec28 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	0801fec8 	.word	0x0801fec8
 800ec34:	0801ff34 	.word	0x0801ff34
 800ec38:	0801ff0c 	.word	0x0801ff0c
 800ec3c:	08023284 	.word	0x08023284
 800ec40:	08023285 	.word	0x08023285
 800ec44:	08023286 	.word	0x08023286

0800ec48 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d105      	bne.n	800ec68 <recv_udp+0x20>
 800ec5c:	4b34      	ldr	r3, [pc, #208]	@ (800ed30 <recv_udp+0xe8>)
 800ec5e:	22e5      	movs	r2, #229	@ 0xe5
 800ec60:	4934      	ldr	r1, [pc, #208]	@ (800ed34 <recv_udp+0xec>)
 800ec62:	4835      	ldr	r0, [pc, #212]	@ (800ed38 <recv_udp+0xf0>)
 800ec64:	f00e fc40 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d105      	bne.n	800ec7a <recv_udp+0x32>
 800ec6e:	4b30      	ldr	r3, [pc, #192]	@ (800ed30 <recv_udp+0xe8>)
 800ec70:	22e6      	movs	r2, #230	@ 0xe6
 800ec72:	4932      	ldr	r1, [pc, #200]	@ (800ed3c <recv_udp+0xf4>)
 800ec74:	4830      	ldr	r0, [pc, #192]	@ (800ed38 <recv_udp+0xf0>)
 800ec76:	f00e fc37 	bl	801d4e8 <iprintf>
  conn = (struct netconn *)arg;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d103      	bne.n	800ec8c <recv_udp+0x44>
    pbuf_free(p);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f004 f86f 	bl	8012d68 <pbuf_free>
    return;
 800ec8a:	e04d      	b.n	800ed28 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	68ba      	ldr	r2, [r7, #8]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d005      	beq.n	800eca2 <recv_udp+0x5a>
 800ec96:	4b26      	ldr	r3, [pc, #152]	@ (800ed30 <recv_udp+0xe8>)
 800ec98:	22ee      	movs	r2, #238	@ 0xee
 800ec9a:	4929      	ldr	r1, [pc, #164]	@ (800ed40 <recv_udp+0xf8>)
 800ec9c:	4826      	ldr	r0, [pc, #152]	@ (800ed38 <recv_udp+0xf0>)
 800ec9e:	f00e fc23 	bl	801d4e8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	3310      	adds	r3, #16
 800eca6:	4618      	mov	r0, r3
 800eca8:	f00d fd8d 	bl	801c7c6 <sys_mbox_valid>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d103      	bne.n	800ecba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f004 f858 	bl	8012d68 <pbuf_free>
    return;
 800ecb8:	e036      	b.n	800ed28 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ecba:	2006      	movs	r0, #6
 800ecbc:	f003 f93a 	bl	8011f34 <memp_malloc>
 800ecc0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d103      	bne.n	800ecd0 <recv_udp+0x88>
    pbuf_free(p);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f004 f84d 	bl	8012d68 <pbuf_free>
    return;
 800ecce:	e02b      	b.n	800ed28 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <recv_udp+0xa0>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	e000      	b.n	800ecea <recv_udp+0xa2>
 800ece8:	2300      	movs	r3, #0
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ecf2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	891b      	ldrh	r3, [r3, #8]
 800ecf8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	3310      	adds	r3, #16
 800ecfe:	69b9      	ldr	r1, [r7, #24]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f00d fceb 	bl	801c6dc <sys_mbox_trypost>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ed0c:	69b8      	ldr	r0, [r7, #24]
 800ed0e:	f001 fb4d 	bl	80103ac <netbuf_delete>
    return;
 800ed12:	e009      	b.n	800ed28 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d005      	beq.n	800ed28 <recv_udp+0xe0>
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed20:	8afa      	ldrh	r2, [r7, #22]
 800ed22:	2100      	movs	r1, #0
 800ed24:	69f8      	ldr	r0, [r7, #28]
 800ed26:	4798      	blx	r3
  }
}
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	0801fec8 	.word	0x0801fec8
 800ed34:	0801ff40 	.word	0x0801ff40
 800ed38:	0801ff0c 	.word	0x0801ff0c
 800ed3c:	0801ff64 	.word	0x0801ff64
 800ed40:	0801ff84 	.word	0x0801ff84

0800ed44 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d106      	bne.n	800ed66 <recv_tcp+0x22>
 800ed58:	4b36      	ldr	r3, [pc, #216]	@ (800ee34 <recv_tcp+0xf0>)
 800ed5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ed5e:	4936      	ldr	r1, [pc, #216]	@ (800ee38 <recv_tcp+0xf4>)
 800ed60:	4836      	ldr	r0, [pc, #216]	@ (800ee3c <recv_tcp+0xf8>)
 800ed62:	f00e fbc1 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <recv_tcp+0x36>
 800ed6c:	4b31      	ldr	r3, [pc, #196]	@ (800ee34 <recv_tcp+0xf0>)
 800ed6e:	f240 122d 	movw	r2, #301	@ 0x12d
 800ed72:	4933      	ldr	r1, [pc, #204]	@ (800ee40 <recv_tcp+0xfc>)
 800ed74:	4831      	ldr	r0, [pc, #196]	@ (800ee3c <recv_tcp+0xf8>)
 800ed76:	f00e fbb7 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ed7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d006      	beq.n	800ed90 <recv_tcp+0x4c>
 800ed82:	4b2c      	ldr	r3, [pc, #176]	@ (800ee34 <recv_tcp+0xf0>)
 800ed84:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ed88:	492e      	ldr	r1, [pc, #184]	@ (800ee44 <recv_tcp+0x100>)
 800ed8a:	482c      	ldr	r0, [pc, #176]	@ (800ee3c <recv_tcp+0xf8>)
 800ed8c:	f00e fbac 	bl	801d4e8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d102      	bne.n	800eda0 <recv_tcp+0x5c>
    return ERR_VAL;
 800ed9a:	f06f 0305 	mvn.w	r3, #5
 800ed9e:	e045      	b.n	800ee2c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d006      	beq.n	800edb8 <recv_tcp+0x74>
 800edaa:	4b22      	ldr	r3, [pc, #136]	@ (800ee34 <recv_tcp+0xf0>)
 800edac:	f240 1235 	movw	r2, #309	@ 0x135
 800edb0:	4925      	ldr	r1, [pc, #148]	@ (800ee48 <recv_tcp+0x104>)
 800edb2:	4822      	ldr	r0, [pc, #136]	@ (800ee3c <recv_tcp+0xf8>)
 800edb4:	f00e fb98 	bl	801d4e8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	3310      	adds	r3, #16
 800edbc:	4618      	mov	r0, r3
 800edbe:	f00d fd02 	bl	801c7c6 <sys_mbox_valid>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10d      	bne.n	800ede4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d008      	beq.n	800ede0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	891b      	ldrh	r3, [r3, #8]
 800edd2:	4619      	mov	r1, r3
 800edd4:	68b8      	ldr	r0, [r7, #8]
 800edd6:	f004 ffa1 	bl	8013d1c <tcp_recved>
      pbuf_free(p);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f003 ffc4 	bl	8012d68 <pbuf_free>
    }
    return ERR_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e023      	b.n	800ee2c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d005      	beq.n	800edf6 <recv_tcp+0xb2>
    msg = p;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	891b      	ldrh	r3, [r3, #8]
 800edf2:	83fb      	strh	r3, [r7, #30]
 800edf4:	e003      	b.n	800edfe <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800edf6:	4b15      	ldr	r3, [pc, #84]	@ (800ee4c <recv_tcp+0x108>)
 800edf8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	3310      	adds	r3, #16
 800ee02:	69b9      	ldr	r1, [r7, #24]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f00d fc69 	bl	801c6dc <sys_mbox_trypost>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ee10:	f04f 33ff 	mov.w	r3, #4294967295
 800ee14:	e00a      	b.n	800ee2c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d005      	beq.n	800ee2a <recv_tcp+0xe6>
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee22:	8bfa      	ldrh	r2, [r7, #30]
 800ee24:	2100      	movs	r1, #0
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	4798      	blx	r3
  }

  return ERR_OK;
 800ee2a:	2300      	movs	r3, #0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3720      	adds	r7, #32
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	0801fec8 	.word	0x0801fec8
 800ee38:	0801ffa4 	.word	0x0801ffa4
 800ee3c:	0801ff0c 	.word	0x0801ff0c
 800ee40:	0801ffc8 	.word	0x0801ffc8
 800ee44:	0801ffe8 	.word	0x0801ffe8
 800ee48:	08020000 	.word	0x08020000
 800ee4c:	08023286 	.word	0x08023286

0800ee50 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <poll_tcp+0x22>
 800ee64:	4b29      	ldr	r3, [pc, #164]	@ (800ef0c <poll_tcp+0xbc>)
 800ee66:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800ee6a:	4929      	ldr	r1, [pc, #164]	@ (800ef10 <poll_tcp+0xc0>)
 800ee6c:	4829      	ldr	r0, [pc, #164]	@ (800ef14 <poll_tcp+0xc4>)
 800ee6e:	f00e fb3b 	bl	801d4e8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	785b      	ldrb	r3, [r3, #1]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d104      	bne.n	800ee84 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ee7a:	2101      	movs	r1, #1
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f000 ffb1 	bl	800fde4 <lwip_netconn_do_writemore>
 800ee82:	e016      	b.n	800eeb2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	785b      	ldrb	r3, [r3, #1]
 800ee88:	2b04      	cmp	r3, #4
 800ee8a:	d112      	bne.n	800eeb2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6a1b      	ldr	r3, [r3, #32]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <poll_tcp+0x5a>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	7a5b      	ldrb	r3, [r3, #9]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d005      	beq.n	800eeaa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	7a5a      	ldrb	r2, [r3, #9]
 800eea4:	3a01      	subs	r2, #1
 800eea6:	b2d2      	uxtb	r2, r2
 800eea8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800eeaa:	2101      	movs	r1, #1
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 fbf7 	bl	800f6a0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	7f1b      	ldrb	r3, [r3, #28]
 800eeb6:	f003 0310 	and.w	r3, r3, #16
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d021      	beq.n	800ef02 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d01d      	beq.n	800ef02 <poll_tcp+0xb2>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800eece:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800eed2:	d316      	bcc.n	800ef02 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800eedc:	2b04      	cmp	r3, #4
 800eede:	d810      	bhi.n	800ef02 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	7f1b      	ldrb	r3, [r3, #28]
 800eee4:	f023 0310 	bic.w	r3, r3, #16
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d005      	beq.n	800ef02 <poll_tcp+0xb2>
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eefa:	2200      	movs	r2, #0
 800eefc:	2102      	movs	r1, #2
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	0801fec8 	.word	0x0801fec8
 800ef10:	08020020 	.word	0x08020020
 800ef14:	0801ff0c 	.word	0x0801ff0c

0800ef18 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	4613      	mov	r3, r2
 800ef24:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d106      	bne.n	800ef3e <sent_tcp+0x26>
 800ef30:	4b20      	ldr	r3, [pc, #128]	@ (800efb4 <sent_tcp+0x9c>)
 800ef32:	f240 1293 	movw	r2, #403	@ 0x193
 800ef36:	4920      	ldr	r1, [pc, #128]	@ (800efb8 <sent_tcp+0xa0>)
 800ef38:	4820      	ldr	r0, [pc, #128]	@ (800efbc <sent_tcp+0xa4>)
 800ef3a:	f00e fad5 	bl	801d4e8 <iprintf>

  if (conn) {
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d032      	beq.n	800efaa <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d104      	bne.n	800ef56 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ef4c:	2101      	movs	r1, #1
 800ef4e:	6978      	ldr	r0, [r7, #20]
 800ef50:	f000 ff48 	bl	800fde4 <lwip_netconn_do_writemore>
 800ef54:	e007      	b.n	800ef66 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	785b      	ldrb	r3, [r3, #1]
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	d103      	bne.n	800ef66 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ef5e:	2101      	movs	r1, #1
 800ef60:	6978      	ldr	r0, [r7, #20]
 800ef62:	f000 fb9d 	bl	800f6a0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d01d      	beq.n	800efaa <sent_tcp+0x92>
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ef76:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ef7a:	d316      	bcc.n	800efaa <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d810      	bhi.n	800efaa <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	7f1b      	ldrb	r3, [r3, #28]
 800ef8c:	f023 0310 	bic.w	r3, r3, #16
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d005      	beq.n	800efaa <sent_tcp+0x92>
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	2102      	movs	r1, #2
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	0801fec8 	.word	0x0801fec8
 800efb8:	08020020 	.word	0x08020020
 800efbc:	0801ff0c 	.word	0x0801ff0c

0800efc0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b088      	sub	sp, #32
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	460b      	mov	r3, r1
 800efca:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <err_tcp+0x24>
 800efd6:	4b5f      	ldr	r3, [pc, #380]	@ (800f154 <err_tcp+0x194>)
 800efd8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800efdc:	495e      	ldr	r1, [pc, #376]	@ (800f158 <err_tcp+0x198>)
 800efde:	485f      	ldr	r0, [pc, #380]	@ (800f15c <err_tcp+0x19c>)
 800efe0:	f00e fa82 	bl	801d4e8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800efe4:	f00d fd0a 	bl	801c9fc <sys_arch_protect>
 800efe8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	2200      	movs	r2, #0
 800efee:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	78fa      	ldrb	r2, [r7, #3]
 800eff4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	7f1b      	ldrb	r3, [r3, #28]
 800effa:	f043 0301 	orr.w	r3, r3, #1
 800effe:	b2da      	uxtb	r2, r3
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	2200      	movs	r2, #0
 800f00e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f010:	69b8      	ldr	r0, [r7, #24]
 800f012:	f00d fd01 	bl	801ca18 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d005      	beq.n	800f02a <err_tcp+0x6a>
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f022:	2200      	movs	r2, #0
 800f024:	2104      	movs	r1, #4
 800f026:	69f8      	ldr	r0, [r7, #28]
 800f028:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d005      	beq.n	800f03e <err_tcp+0x7e>
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f036:	2200      	movs	r2, #0
 800f038:	2100      	movs	r1, #0
 800f03a:	69f8      	ldr	r0, [r7, #28]
 800f03c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d005      	beq.n	800f052 <err_tcp+0x92>
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f04a:	2200      	movs	r2, #0
 800f04c:	2102      	movs	r1, #2
 800f04e:	69f8      	ldr	r0, [r7, #28]
 800f050:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fd86 	bl	800eb68 <lwip_netconn_err_to_msg>
 800f05c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	3310      	adds	r3, #16
 800f062:	4618      	mov	r0, r3
 800f064:	f00d fbaf 	bl	801c7c6 <sys_mbox_valid>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d005      	beq.n	800f07a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	3310      	adds	r3, #16
 800f072:	6939      	ldr	r1, [r7, #16]
 800f074:	4618      	mov	r0, r3
 800f076:	f00d fb31 	bl	801c6dc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	3314      	adds	r3, #20
 800f07e:	4618      	mov	r0, r3
 800f080:	f00d fba1 	bl	801c7c6 <sys_mbox_valid>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d005      	beq.n	800f096 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	3314      	adds	r3, #20
 800f08e:	6939      	ldr	r1, [r7, #16]
 800f090:	4618      	mov	r0, r3
 800f092:	f00d fb23 	bl	801c6dc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d005      	beq.n	800f0a8 <err_tcp+0xe8>
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d002      	beq.n	800f0a8 <err_tcp+0xe8>
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	d143      	bne.n	800f130 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	7f1b      	ldrb	r3, [r3, #28]
 800f0ac:	f003 0304 	and.w	r3, r3, #4
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	bf14      	ite	ne
 800f0b4:	2301      	movne	r3, #1
 800f0b6:	2300      	moveq	r3, #0
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	7f1b      	ldrb	r3, [r3, #28]
 800f0c0:	f023 0304 	bic.w	r3, r3, #4
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d13b      	bne.n	800f148 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d106      	bne.n	800f0e6 <err_tcp+0x126>
 800f0d8:	4b1e      	ldr	r3, [pc, #120]	@ (800f154 <err_tcp+0x194>)
 800f0da:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f0de:	4920      	ldr	r1, [pc, #128]	@ (800f160 <err_tcp+0x1a0>)
 800f0e0:	481e      	ldr	r0, [pc, #120]	@ (800f15c <err_tcp+0x19c>)
 800f0e2:	f00e fa01 	bl	801d4e8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f0e6:	7dfb      	ldrb	r3, [r7, #23]
 800f0e8:	2b04      	cmp	r3, #4
 800f0ea:	d104      	bne.n	800f0f6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	6a1b      	ldr	r3, [r3, #32]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	711a      	strb	r2, [r3, #4]
 800f0f4:	e003      	b.n	800f0fe <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	78fa      	ldrb	r2, [r7, #3]
 800f0fc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	330c      	adds	r3, #12
 800f106:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f108:	68b8      	ldr	r0, [r7, #8]
 800f10a:	f00d fbed 	bl	801c8e8 <sys_sem_valid>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <err_tcp+0x162>
 800f114:	4b0f      	ldr	r3, [pc, #60]	@ (800f154 <err_tcp+0x194>)
 800f116:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800f11a:	4912      	ldr	r1, [pc, #72]	@ (800f164 <err_tcp+0x1a4>)
 800f11c:	480f      	ldr	r0, [pc, #60]	@ (800f15c <err_tcp+0x19c>)
 800f11e:	f00e f9e3 	bl	801d4e8 <iprintf>
      conn->current_msg = NULL;
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	2200      	movs	r2, #0
 800f126:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f128:	68b8      	ldr	r0, [r7, #8]
 800f12a:	f00d fbc3 	bl	801c8b4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f12e:	e00b      	b.n	800f148 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	6a1b      	ldr	r3, [r3, #32]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d008      	beq.n	800f14a <err_tcp+0x18a>
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <err_tcp+0x194>)
 800f13a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800f13e:	490a      	ldr	r1, [pc, #40]	@ (800f168 <err_tcp+0x1a8>)
 800f140:	4806      	ldr	r0, [pc, #24]	@ (800f15c <err_tcp+0x19c>)
 800f142:	f00e f9d1 	bl	801d4e8 <iprintf>
  }
}
 800f146:	e000      	b.n	800f14a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f148:	bf00      	nop
}
 800f14a:	bf00      	nop
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	0801fec8 	.word	0x0801fec8
 800f158:	08020020 	.word	0x08020020
 800f15c:	0801ff0c 	.word	0x0801ff0c
 800f160:	08020030 	.word	0x08020030
 800f164:	0802004c 	.word	0x0802004c
 800f168:	08020068 	.word	0x08020068

0800f16c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f005 fcb3 	bl	8014ae8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f182:	490a      	ldr	r1, [pc, #40]	@ (800f1ac <setup_tcp+0x40>)
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f005 fcc1 	bl	8014b0c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f18a:	4909      	ldr	r1, [pc, #36]	@ (800f1b0 <setup_tcp+0x44>)
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f005 fcdf 	bl	8014b50 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f192:	2202      	movs	r2, #2
 800f194:	4907      	ldr	r1, [pc, #28]	@ (800f1b4 <setup_tcp+0x48>)
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f005 fd36 	bl	8014c08 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f19c:	4906      	ldr	r1, [pc, #24]	@ (800f1b8 <setup_tcp+0x4c>)
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f005 fcf8 	bl	8014b94 <tcp_err>
}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	0800ed45 	.word	0x0800ed45
 800f1b0:	0800ef19 	.word	0x0800ef19
 800f1b4:	0800ee51 	.word	0x0800ee51
 800f1b8:	0800efc1 	.word	0x0800efc1

0800f1bc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b089      	sub	sp, #36	@ 0x24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d102      	bne.n	800f1da <accept_function+0x1e>
    return ERR_VAL;
 800f1d4:	f06f 0305 	mvn.w	r3, #5
 800f1d8:	e0a1      	b.n	800f31e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	3314      	adds	r3, #20
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f00d faf1 	bl	801c7c6 <sys_mbox_valid>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f1ea:	f06f 0305 	mvn.w	r3, #5
 800f1ee:	e096      	b.n	800f31e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d11b      	bne.n	800f22e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	f103 0414 	add.w	r4, r3, #20
 800f1fc:	f06f 000c 	mvn.w	r0, #12
 800f200:	f7ff fcb2 	bl	800eb68 <lwip_netconn_err_to_msg>
 800f204:	4603      	mov	r3, r0
 800f206:	4619      	mov	r1, r3
 800f208:	4620      	mov	r0, r4
 800f20a:	f00d fa67 	bl	801c6dc <sys_mbox_trypost>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d109      	bne.n	800f228 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d005      	beq.n	800f228 <accept_function+0x6c>
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f220:	2200      	movs	r2, #0
 800f222:	2100      	movs	r1, #0
 800f224:	69f8      	ldr	r0, [r7, #28]
 800f226:	4798      	blx	r3
    }
    return ERR_VAL;
 800f228:	f06f 0305 	mvn.w	r3, #5
 800f22c:	e077      	b.n	800f31e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d006      	beq.n	800f244 <accept_function+0x88>
 800f236:	4b3c      	ldr	r3, [pc, #240]	@ (800f328 <accept_function+0x16c>)
 800f238:	f240 222a 	movw	r2, #554	@ 0x22a
 800f23c:	493b      	ldr	r1, [pc, #236]	@ (800f32c <accept_function+0x170>)
 800f23e:	483c      	ldr	r0, [pc, #240]	@ (800f330 <accept_function+0x174>)
 800f240:	f00e f952 	bl	801d4e8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f244:	69fb      	ldr	r3, [r7, #28]
 800f246:	781a      	ldrb	r2, [r3, #0]
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f24c:	4619      	mov	r1, r3
 800f24e:	4610      	mov	r0, r2
 800f250:	f000 f8f0 	bl	800f434 <netconn_alloc>
 800f254:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d11b      	bne.n	800f294 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	f103 0414 	add.w	r4, r3, #20
 800f262:	f06f 000c 	mvn.w	r0, #12
 800f266:	f7ff fc7f 	bl	800eb68 <lwip_netconn_err_to_msg>
 800f26a:	4603      	mov	r3, r0
 800f26c:	4619      	mov	r1, r3
 800f26e:	4620      	mov	r0, r4
 800f270:	f00d fa34 	bl	801c6dc <sys_mbox_trypost>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d109      	bne.n	800f28e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d005      	beq.n	800f28e <accept_function+0xd2>
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f286:	2200      	movs	r2, #0
 800f288:	2100      	movs	r1, #0
 800f28a:	69f8      	ldr	r0, [r7, #28]
 800f28c:	4798      	blx	r3
    }
    return ERR_MEM;
 800f28e:	f04f 33ff 	mov.w	r3, #4294967295
 800f292:	e044      	b.n	800f31e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f29a:	69b8      	ldr	r0, [r7, #24]
 800f29c:	f7ff ff66 	bl	800f16c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	3314      	adds	r3, #20
 800f2a4:	69b9      	ldr	r1, [r7, #24]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f00d fa18 	bl	801c6dc <sys_mbox_trypost>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d02a      	beq.n	800f308 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	6978      	ldr	r0, [r7, #20]
 800f2bc:	f005 fc14 	bl	8014ae8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	6978      	ldr	r0, [r7, #20]
 800f2c4:	f005 fc22 	bl	8014b0c <tcp_recv>
    tcp_sent(pcb, NULL);
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	6978      	ldr	r0, [r7, #20]
 800f2cc:	f005 fc40 	bl	8014b50 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	6978      	ldr	r0, [r7, #20]
 800f2d6:	f005 fc97 	bl	8014c08 <tcp_poll>
    tcp_err(pcb, NULL);
 800f2da:	2100      	movs	r1, #0
 800f2dc:	6978      	ldr	r0, [r7, #20]
 800f2de:	f005 fc59 	bl	8014b94 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	3310      	adds	r3, #16
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f00d f9e3 	bl	801c6b8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f2f2:	69bb      	ldr	r3, [r7, #24]
 800f2f4:	3310      	adds	r3, #16
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f00d fa76 	bl	801c7e8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f2fc:	69b8      	ldr	r0, [r7, #24]
 800f2fe:	f000 f907 	bl	800f510 <netconn_free>
    return ERR_MEM;
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	e00a      	b.n	800f31e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d005      	beq.n	800f31c <accept_function+0x160>
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f314:	2200      	movs	r2, #0
 800f316:	2100      	movs	r1, #0
 800f318:	69f8      	ldr	r0, [r7, #28]
 800f31a:	4798      	blx	r3
  }

  return ERR_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3724      	adds	r7, #36	@ 0x24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd90      	pop	{r4, r7, pc}
 800f326:	bf00      	nop
 800f328:	0801fec8 	.word	0x0801fec8
 800f32c:	08020084 	.word	0x08020084
 800f330:	0801ff0c 	.word	0x0801ff0c

0800f334 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f334:	b590      	push	{r4, r7, lr}
 800f336:	b085      	sub	sp, #20
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d006      	beq.n	800f358 <pcb_new+0x24>
 800f34a:	4b2b      	ldr	r3, [pc, #172]	@ (800f3f8 <pcb_new+0xc4>)
 800f34c:	f240 2265 	movw	r2, #613	@ 0x265
 800f350:	492a      	ldr	r1, [pc, #168]	@ (800f3fc <pcb_new+0xc8>)
 800f352:	482b      	ldr	r0, [pc, #172]	@ (800f400 <pcb_new+0xcc>)
 800f354:	f00e f8c8 	bl	801d4e8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f362:	2b10      	cmp	r3, #16
 800f364:	d022      	beq.n	800f3ac <pcb_new+0x78>
 800f366:	2b20      	cmp	r3, #32
 800f368:	d133      	bne.n	800f3d2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681c      	ldr	r4, [r3, #0]
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
 800f370:	4618      	mov	r0, r3
 800f372:	f00a fe7c 	bl	801a06e <udp_new_ip_type>
 800f376:	4603      	mov	r3, r0
 800f378:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d02a      	beq.n	800f3da <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2b22      	cmp	r3, #34	@ 0x22
 800f38c:	d104      	bne.n	800f398 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	2201      	movs	r2, #1
 800f396:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6858      	ldr	r0, [r3, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	4917      	ldr	r1, [pc, #92]	@ (800f404 <pcb_new+0xd0>)
 800f3a6:	f00a fde9 	bl	8019f7c <udp_recv>
      }
      break;
 800f3aa:	e016      	b.n	800f3da <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681c      	ldr	r4, [r3, #0]
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f005 fb8a 	bl	8014acc <tcp_new_ip_type>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00b      	beq.n	800f3de <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fece 	bl	800f16c <setup_tcp>
      }
      break;
 800f3d0:	e005      	b.n	800f3de <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	22fa      	movs	r2, #250	@ 0xfa
 800f3d6:	711a      	strb	r2, [r3, #4]
      return;
 800f3d8:	e00a      	b.n	800f3f0 <pcb_new+0xbc>
      break;
 800f3da:	bf00      	nop
 800f3dc:	e000      	b.n	800f3e0 <pcb_new+0xac>
      break;
 800f3de:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d102      	bne.n	800f3f0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	22ff      	movs	r2, #255	@ 0xff
 800f3ee:	711a      	strb	r2, [r3, #4]
  }
}
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd90      	pop	{r4, r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	0801fec8 	.word	0x0801fec8
 800f3fc:	080200ac 	.word	0x080200ac
 800f400:	0801ff0c 	.word	0x0801ff0c
 800f404:	0800ec49 	.word	0x0800ec49

0800f408 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d102      	bne.n	800f42a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7ff ff85 	bl	800f334 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f42a:	bf00      	nop
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b086      	sub	sp, #24
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f444:	2007      	movs	r0, #7
 800f446:	f002 fd75 	bl	8011f34 <memp_malloc>
 800f44a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <netconn_alloc+0x22>
    return NULL;
 800f452:	2300      	movs	r3, #0
 800f454:	e052      	b.n	800f4fc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	79fa      	ldrb	r2, [r7, #7]
 800f460:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f468:	79fb      	ldrb	r3, [r7, #7]
 800f46a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f46e:	2b10      	cmp	r3, #16
 800f470:	d004      	beq.n	800f47c <netconn_alloc+0x48>
 800f472:	2b20      	cmp	r3, #32
 800f474:	d105      	bne.n	800f482 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f476:	2306      	movs	r3, #6
 800f478:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f47a:	e00a      	b.n	800f492 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f47c:	2306      	movs	r3, #6
 800f47e:	617b      	str	r3, [r7, #20]
      break;
 800f480:	e007      	b.n	800f492 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f482:	4b20      	ldr	r3, [pc, #128]	@ (800f504 <netconn_alloc+0xd0>)
 800f484:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800f488:	491f      	ldr	r1, [pc, #124]	@ (800f508 <netconn_alloc+0xd4>)
 800f48a:	4820      	ldr	r0, [pc, #128]	@ (800f50c <netconn_alloc+0xd8>)
 800f48c:	f00e f82c 	bl	801d4e8 <iprintf>
      goto free_and_return;
 800f490:	e02f      	b.n	800f4f2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3310      	adds	r3, #16
 800f496:	6979      	ldr	r1, [r7, #20]
 800f498:	4618      	mov	r0, r3
 800f49a:	f00d f8eb 	bl	801c674 <sys_mbox_new>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d125      	bne.n	800f4f0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	330c      	adds	r3, #12
 800f4a8:	2100      	movs	r1, #0
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f00d f9a9 	bl	801c802 <sys_sem_new>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d005      	beq.n	800f4c2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3310      	adds	r3, #16
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f00d f8fc 	bl	801c6b8 <sys_mbox_free>
    goto free_and_return;
 800f4c0:	e017      	b.n	800f4f2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	3314      	adds	r3, #20
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f00d f98e 	bl	801c7e8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	7cfa      	ldrb	r2, [r7, #19]
 800f4ea:	771a      	strb	r2, [r3, #28]
  return conn;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	e005      	b.n	800f4fc <netconn_alloc+0xc8>
    goto free_and_return;
 800f4f0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f4f2:	68f9      	ldr	r1, [r7, #12]
 800f4f4:	2007      	movs	r0, #7
 800f4f6:	f002 fd93 	bl	8012020 <memp_free>
  return NULL;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3718      	adds	r7, #24
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	0801fec8 	.word	0x0801fec8
 800f508:	080200cc 	.word	0x080200cc
 800f50c:	0801ff0c 	.word	0x0801ff0c

0800f510 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d006      	beq.n	800f52e <netconn_free+0x1e>
 800f520:	4b1b      	ldr	r3, [pc, #108]	@ (800f590 <netconn_free+0x80>)
 800f522:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f526:	491b      	ldr	r1, [pc, #108]	@ (800f594 <netconn_free+0x84>)
 800f528:	481b      	ldr	r0, [pc, #108]	@ (800f598 <netconn_free+0x88>)
 800f52a:	f00d ffdd 	bl	801d4e8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	3310      	adds	r3, #16
 800f532:	4618      	mov	r0, r3
 800f534:	f00d f947 	bl	801c7c6 <sys_mbox_valid>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d006      	beq.n	800f54c <netconn_free+0x3c>
 800f53e:	4b14      	ldr	r3, [pc, #80]	@ (800f590 <netconn_free+0x80>)
 800f540:	f240 3223 	movw	r2, #803	@ 0x323
 800f544:	4915      	ldr	r1, [pc, #84]	@ (800f59c <netconn_free+0x8c>)
 800f546:	4814      	ldr	r0, [pc, #80]	@ (800f598 <netconn_free+0x88>)
 800f548:	f00d ffce 	bl	801d4e8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3314      	adds	r3, #20
 800f550:	4618      	mov	r0, r3
 800f552:	f00d f938 	bl	801c7c6 <sys_mbox_valid>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d006      	beq.n	800f56a <netconn_free+0x5a>
 800f55c:	4b0c      	ldr	r3, [pc, #48]	@ (800f590 <netconn_free+0x80>)
 800f55e:	f240 3226 	movw	r2, #806	@ 0x326
 800f562:	490f      	ldr	r1, [pc, #60]	@ (800f5a0 <netconn_free+0x90>)
 800f564:	480c      	ldr	r0, [pc, #48]	@ (800f598 <netconn_free+0x88>)
 800f566:	f00d ffbf 	bl	801d4e8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	330c      	adds	r3, #12
 800f56e:	4618      	mov	r0, r3
 800f570:	f00d f9ad 	bl	801c8ce <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	330c      	adds	r3, #12
 800f578:	4618      	mov	r0, r3
 800f57a:	f00d f9c6 	bl	801c90a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f57e:	6879      	ldr	r1, [r7, #4]
 800f580:	2007      	movs	r0, #7
 800f582:	f002 fd4d 	bl	8012020 <memp_free>
}
 800f586:	bf00      	nop
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	0801fec8 	.word	0x0801fec8
 800f594:	080200f4 	.word	0x080200f4
 800f598:	0801ff0c 	.word	0x0801ff0c
 800f59c:	08020124 	.word	0x08020124
 800f5a0:	08020160 	.word	0x08020160

0800f5a4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3310      	adds	r3, #16
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f00d f908 	bl	801c7c6 <sys_mbox_valid>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d02f      	beq.n	800f61c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f5bc:	e018      	b.n	800f5f0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f5c6:	2b10      	cmp	r3, #16
 800f5c8:	d10e      	bne.n	800f5e8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	f107 020f 	add.w	r2, r7, #15
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7ff fafe 	bl	800ebd4 <lwip_netconn_is_err_msg>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d108      	bne.n	800f5f0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f003 fbc1 	bl	8012d68 <pbuf_free>
 800f5e6:	e003      	b.n	800f5f0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fede 	bl	80103ac <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3310      	adds	r3, #16
 800f5f4:	f107 0210 	add.w	r2, r7, #16
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f00d f8c7 	bl	801c78e <sys_arch_mbox_tryfetch>
 800f600:	4603      	mov	r3, r0
 800f602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f606:	d1da      	bne.n	800f5be <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3310      	adds	r3, #16
 800f60c:	4618      	mov	r0, r3
 800f60e:	f00d f853 	bl	801c6b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3310      	adds	r3, #16
 800f616:	4618      	mov	r0, r3
 800f618:	f00d f8e6 	bl	801c7e8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	3314      	adds	r3, #20
 800f620:	4618      	mov	r0, r3
 800f622:	f00d f8d0 	bl	801c7c6 <sys_mbox_valid>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d034      	beq.n	800f696 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f62c:	e01d      	b.n	800f66a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	f107 020e 	add.w	r2, r7, #14
 800f634:	4611      	mov	r1, r2
 800f636:	4618      	mov	r0, r3
 800f638:	f7ff facc 	bl	800ebd4 <lwip_netconn_is_err_msg>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d113      	bne.n	800f66a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f646:	6978      	ldr	r0, [r7, #20]
 800f648:	f7ff ffac 	bl	800f5a4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d007      	beq.n	800f664 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	f004 f985 	bl	8013968 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	2200      	movs	r2, #0
 800f662:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f664:	6978      	ldr	r0, [r7, #20]
 800f666:	f7ff ff53 	bl	800f510 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3314      	adds	r3, #20
 800f66e:	f107 0210 	add.w	r2, r7, #16
 800f672:	4611      	mov	r1, r2
 800f674:	4618      	mov	r0, r3
 800f676:	f00d f88a 	bl	801c78e <sys_arch_mbox_tryfetch>
 800f67a:	4603      	mov	r3, r0
 800f67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f680:	d1d5      	bne.n	800f62e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3314      	adds	r3, #20
 800f686:	4618      	mov	r0, r3
 800f688:	f00d f816 	bl	801c6b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3314      	adds	r3, #20
 800f690:	4618      	mov	r0, r3
 800f692:	f00d f8a9 	bl	801c7e8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f696:	bf00      	nop
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
	...

0800f6a0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d106      	bne.n	800f6c4 <lwip_netconn_do_close_internal+0x24>
 800f6b6:	4b87      	ldr	r3, [pc, #540]	@ (800f8d4 <lwip_netconn_do_close_internal+0x234>)
 800f6b8:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f6bc:	4986      	ldr	r1, [pc, #536]	@ (800f8d8 <lwip_netconn_do_close_internal+0x238>)
 800f6be:	4887      	ldr	r0, [pc, #540]	@ (800f8dc <lwip_netconn_do_close_internal+0x23c>)
 800f6c0:	f00d ff12 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f6cc:	2b10      	cmp	r3, #16
 800f6ce:	d006      	beq.n	800f6de <lwip_netconn_do_close_internal+0x3e>
 800f6d0:	4b80      	ldr	r3, [pc, #512]	@ (800f8d4 <lwip_netconn_do_close_internal+0x234>)
 800f6d2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f6d6:	4982      	ldr	r1, [pc, #520]	@ (800f8e0 <lwip_netconn_do_close_internal+0x240>)
 800f6d8:	4880      	ldr	r0, [pc, #512]	@ (800f8dc <lwip_netconn_do_close_internal+0x23c>)
 800f6da:	f00d ff05 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	785b      	ldrb	r3, [r3, #1]
 800f6e2:	2b04      	cmp	r3, #4
 800f6e4:	d006      	beq.n	800f6f4 <lwip_netconn_do_close_internal+0x54>
 800f6e6:	4b7b      	ldr	r3, [pc, #492]	@ (800f8d4 <lwip_netconn_do_close_internal+0x234>)
 800f6e8:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f6ec:	497d      	ldr	r1, [pc, #500]	@ (800f8e4 <lwip_netconn_do_close_internal+0x244>)
 800f6ee:	487b      	ldr	r0, [pc, #492]	@ (800f8dc <lwip_netconn_do_close_internal+0x23c>)
 800f6f0:	f00d fefa 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d106      	bne.n	800f70a <lwip_netconn_do_close_internal+0x6a>
 800f6fc:	4b75      	ldr	r3, [pc, #468]	@ (800f8d4 <lwip_netconn_do_close_internal+0x234>)
 800f6fe:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f702:	4979      	ldr	r1, [pc, #484]	@ (800f8e8 <lwip_netconn_do_close_internal+0x248>)
 800f704:	4875      	ldr	r0, [pc, #468]	@ (800f8dc <lwip_netconn_do_close_internal+0x23c>)
 800f706:	f00d feef 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a1b      	ldr	r3, [r3, #32]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d106      	bne.n	800f720 <lwip_netconn_do_close_internal+0x80>
 800f712:	4b70      	ldr	r3, [pc, #448]	@ (800f8d4 <lwip_netconn_do_close_internal+0x234>)
 800f714:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f718:	4974      	ldr	r1, [pc, #464]	@ (800f8ec <lwip_netconn_do_close_internal+0x24c>)
 800f71a:	4870      	ldr	r0, [pc, #448]	@ (800f8dc <lwip_netconn_do_close_internal+0x23c>)
 800f71c:	f00d fee4 	bl	801d4e8 <iprintf>

  tpcb = conn->pcb.tcp;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	7a1b      	ldrb	r3, [r3, #8]
 800f72c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f72e:	7bfb      	ldrb	r3, [r7, #15]
 800f730:	f003 0301 	and.w	r3, r3, #1
 800f734:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	f003 0302 	and.w	r3, r3, #2
 800f73c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f73e:	7bfb      	ldrb	r3, [r7, #15]
 800f740:	2b03      	cmp	r3, #3
 800f742:	d102      	bne.n	800f74a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f744:	2301      	movs	r3, #1
 800f746:	75bb      	strb	r3, [r7, #22]
 800f748:	e01f      	b.n	800f78a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f74a:	7bbb      	ldrb	r3, [r7, #14]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00e      	beq.n	800f76e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f754:	2b05      	cmp	r3, #5
 800f756:	d007      	beq.n	800f768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f75c:	2b06      	cmp	r3, #6
 800f75e:	d003      	beq.n	800f768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f764:	2b08      	cmp	r3, #8
 800f766:	d102      	bne.n	800f76e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f768:	2301      	movs	r3, #1
 800f76a:	75bb      	strb	r3, [r7, #22]
 800f76c:	e00d      	b.n	800f78a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f76e:	7b7b      	ldrb	r3, [r7, #13]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d008      	beq.n	800f786 <lwip_netconn_do_close_internal+0xe6>
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	8b5b      	ldrh	r3, [r3, #26]
 800f778:	f003 0310 	and.w	r3, r3, #16
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d002      	beq.n	800f786 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f780:	2301      	movs	r3, #1
 800f782:	75bb      	strb	r3, [r7, #22]
 800f784:	e001      	b.n	800f78a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f78a:	7dbb      	ldrb	r3, [r7, #22]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d003      	beq.n	800f798 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f790:	2100      	movs	r1, #0
 800f792:	6938      	ldr	r0, [r7, #16]
 800f794:	f005 f9a8 	bl	8014ae8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	7d1b      	ldrb	r3, [r3, #20]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d104      	bne.n	800f7aa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	6938      	ldr	r0, [r7, #16]
 800f7a4:	f005 fa18 	bl	8014bd8 <tcp_accept>
 800f7a8:	e01d      	b.n	800f7e6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f7aa:	7bbb      	ldrb	r3, [r7, #14]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d007      	beq.n	800f7c0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	6938      	ldr	r0, [r7, #16]
 800f7b4:	f005 f9aa 	bl	8014b0c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	6938      	ldr	r0, [r7, #16]
 800f7bc:	f005 fa0c 	bl	8014bd8 <tcp_accept>
    }
    if (shut_tx) {
 800f7c0:	7b7b      	ldrb	r3, [r7, #13]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d003      	beq.n	800f7ce <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	6938      	ldr	r0, [r7, #16]
 800f7ca:	f005 f9c1 	bl	8014b50 <tcp_sent>
    }
    if (shut_close) {
 800f7ce:	7dbb      	ldrb	r3, [r7, #22]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d008      	beq.n	800f7e6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	6938      	ldr	r0, [r7, #16]
 800f7da:	f005 fa15 	bl	8014c08 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f7de:	2100      	movs	r1, #0
 800f7e0:	6938      	ldr	r0, [r7, #16]
 800f7e2:	f005 f9d7 	bl	8014b94 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f7e6:	7dbb      	ldrb	r3, [r7, #22]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d005      	beq.n	800f7f8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f7ec:	6938      	ldr	r0, [r7, #16]
 800f7ee:	f003 ff75 	bl	80136dc <tcp_close>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	75fb      	strb	r3, [r7, #23]
 800f7f6:	e007      	b.n	800f808 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f7f8:	7bbb      	ldrb	r3, [r7, #14]
 800f7fa:	7b7a      	ldrb	r2, [r7, #13]
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	6938      	ldr	r0, [r7, #16]
 800f800:	f003 ff98 	bl	8013734 <tcp_shutdown>
 800f804:	4603      	mov	r3, r0
 800f806:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d102      	bne.n	800f816 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f810:	2301      	movs	r3, #1
 800f812:	757b      	strb	r3, [r7, #21]
 800f814:	e016      	b.n	800f844 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f81e:	d10f      	bne.n	800f840 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a1b      	ldr	r3, [r3, #32]
 800f824:	7a5b      	ldrb	r3, [r3, #9]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d10c      	bne.n	800f844 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f82a:	2301      	movs	r3, #1
 800f82c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f82e:	7dbb      	ldrb	r3, [r7, #22]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d007      	beq.n	800f844 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f834:	6938      	ldr	r0, [r7, #16]
 800f836:	f004 f897 	bl	8013968 <tcp_abort>
          err = ERR_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	75fb      	strb	r3, [r7, #23]
 800f83e:	e001      	b.n	800f844 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f840:	2301      	movs	r3, #1
 800f842:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f844:	7d7b      	ldrb	r3, [r7, #21]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d052      	beq.n	800f8f0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	6a1b      	ldr	r3, [r3, #32]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	330c      	adds	r3, #12
 800f852:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a1b      	ldr	r3, [r3, #32]
 800f858:	7dfa      	ldrb	r2, [r7, #23]
 800f85a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d129      	bne.n	800f8c4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f870:	7dbb      	ldrb	r3, [r7, #22]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00c      	beq.n	800f890 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <lwip_netconn_do_close_internal+0x1f0>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f888:	2200      	movs	r2, #0
 800f88a:	2104      	movs	r1, #4
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	4798      	blx	r3
      }
      if (shut_rx) {
 800f890:	7bbb      	ldrb	r3, [r7, #14]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d009      	beq.n	800f8aa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d005      	beq.n	800f8aa <lwip_netconn_do_close_internal+0x20a>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	2100      	movs	r1, #0
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	4798      	blx	r3
      }
      if (shut_tx) {
 800f8aa:	7b7b      	ldrb	r3, [r7, #13]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d009      	beq.n	800f8c4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d005      	beq.n	800f8c4 <lwip_netconn_do_close_internal+0x224>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8bc:	2200      	movs	r2, #0
 800f8be:	2102      	movs	r1, #2
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d002      	beq.n	800f8d0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f8ca:	68b8      	ldr	r0, [r7, #8]
 800f8cc:	f00c fff2 	bl	801c8b4 <sys_sem_signal>
    }
    return ERR_OK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	e03c      	b.n	800f94e <lwip_netconn_do_close_internal+0x2ae>
 800f8d4:	0801fec8 	.word	0x0801fec8
 800f8d8:	0802019c 	.word	0x0802019c
 800f8dc:	0801ff0c 	.word	0x0801ff0c
 800f8e0:	080201ac 	.word	0x080201ac
 800f8e4:	080201cc 	.word	0x080201cc
 800f8e8:	080201f0 	.word	0x080201f0
 800f8ec:	08020030 	.word	0x08020030
  }
  if (!close_finished) {
 800f8f0:	7d7b      	ldrb	r3, [r7, #21]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d11e      	bne.n	800f934 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	7d1b      	ldrb	r3, [r3, #20]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d106      	bne.n	800f90c <lwip_netconn_do_close_internal+0x26c>
 800f8fe:	4b16      	ldr	r3, [pc, #88]	@ (800f958 <lwip_netconn_do_close_internal+0x2b8>)
 800f900:	f240 4241 	movw	r2, #1089	@ 0x441
 800f904:	4915      	ldr	r1, [pc, #84]	@ (800f95c <lwip_netconn_do_close_internal+0x2bc>)
 800f906:	4816      	ldr	r0, [pc, #88]	@ (800f960 <lwip_netconn_do_close_internal+0x2c0>)
 800f908:	f00d fdee 	bl	801d4e8 <iprintf>
    if (shut_tx) {
 800f90c:	7b7b      	ldrb	r3, [r7, #13]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d003      	beq.n	800f91a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f912:	4914      	ldr	r1, [pc, #80]	@ (800f964 <lwip_netconn_do_close_internal+0x2c4>)
 800f914:	6938      	ldr	r0, [r7, #16]
 800f916:	f005 f91b 	bl	8014b50 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f91a:	2201      	movs	r2, #1
 800f91c:	4912      	ldr	r1, [pc, #72]	@ (800f968 <lwip_netconn_do_close_internal+0x2c8>)
 800f91e:	6938      	ldr	r0, [r7, #16]
 800f920:	f005 f972 	bl	8014c08 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f924:	4911      	ldr	r1, [pc, #68]	@ (800f96c <lwip_netconn_do_close_internal+0x2cc>)
 800f926:	6938      	ldr	r0, [r7, #16]
 800f928:	f005 f934 	bl	8014b94 <tcp_err>
    tcp_arg(tpcb, conn);
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	6938      	ldr	r0, [r7, #16]
 800f930:	f005 f8da 	bl	8014ae8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d106      	bne.n	800f94a <lwip_netconn_do_close_internal+0x2aa>
 800f93c:	4b06      	ldr	r3, [pc, #24]	@ (800f958 <lwip_netconn_do_close_internal+0x2b8>)
 800f93e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800f942:	490b      	ldr	r1, [pc, #44]	@ (800f970 <lwip_netconn_do_close_internal+0x2d0>)
 800f944:	4806      	ldr	r0, [pc, #24]	@ (800f960 <lwip_netconn_do_close_internal+0x2c0>)
 800f946:	f00d fdcf 	bl	801d4e8 <iprintf>
  return err;
 800f94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3718      	adds	r7, #24
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	0801fec8 	.word	0x0801fec8
 800f95c:	08020204 	.word	0x08020204
 800f960:	0801ff0c 	.word	0x0801ff0c
 800f964:	0800ef19 	.word	0x0800ef19
 800f968:	0800ee51 	.word	0x0800ee51
 800f96c:	0800efc1 	.word	0x0800efc1
 800f970:	08020228 	.word	0x08020228

0800f974 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	785b      	ldrb	r3, [r3, #1]
 800f986:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f988:	7afb      	ldrb	r3, [r7, #11]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00d      	beq.n	800f9aa <lwip_netconn_do_delconn+0x36>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f998:	2b10      	cmp	r3, #16
 800f99a:	d006      	beq.n	800f9aa <lwip_netconn_do_delconn+0x36>
 800f99c:	4b60      	ldr	r3, [pc, #384]	@ (800fb20 <lwip_netconn_do_delconn+0x1ac>)
 800f99e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800f9a2:	4960      	ldr	r1, [pc, #384]	@ (800fb24 <lwip_netconn_do_delconn+0x1b0>)
 800f9a4:	4860      	ldr	r0, [pc, #384]	@ (800fb28 <lwip_netconn_do_delconn+0x1b4>)
 800f9a6:	f00d fd9f 	bl	801d4e8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f9aa:	7afb      	ldrb	r3, [r7, #11]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d005      	beq.n	800f9bc <lwip_netconn_do_delconn+0x48>
 800f9b0:	7afb      	ldrb	r3, [r7, #11]
 800f9b2:	2b02      	cmp	r3, #2
 800f9b4:	d002      	beq.n	800f9bc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f9b6:	7afb      	ldrb	r3, [r7, #11]
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d109      	bne.n	800f9d0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f9bc:	7afb      	ldrb	r3, [r7, #11]
 800f9be:	2b03      	cmp	r3, #3
 800f9c0:	d10a      	bne.n	800f9d8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	7f1b      	ldrb	r3, [r3, #28]
 800f9c8:	f003 0304 	and.w	r3, r3, #4
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d103      	bne.n	800f9d8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	22fb      	movs	r2, #251	@ 0xfb
 800f9d4:	711a      	strb	r2, [r3, #4]
 800f9d6:	e097      	b.n	800fb08 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f9d8:	7afb      	ldrb	r3, [r7, #11]
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d10d      	bne.n	800f9fa <lwip_netconn_do_delconn+0x86>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	7f1b      	ldrb	r3, [r3, #28]
 800f9e4:	f003 0304 	and.w	r3, r3, #4
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <lwip_netconn_do_delconn+0x86>
 800f9ec:	4b4c      	ldr	r3, [pc, #304]	@ (800fb20 <lwip_netconn_do_delconn+0x1ac>)
 800f9ee:	f240 427a 	movw	r2, #1146	@ 0x47a
 800f9f2:	494e      	ldr	r1, [pc, #312]	@ (800fb2c <lwip_netconn_do_delconn+0x1b8>)
 800f9f4:	484c      	ldr	r0, [pc, #304]	@ (800fb28 <lwip_netconn_do_delconn+0x1b4>)
 800f9f6:	f00d fd77 	bl	801d4e8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7ff fdcd 	bl	800f5a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d05f      	beq.n	800fad4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa1e:	2b10      	cmp	r3, #16
 800fa20:	d00d      	beq.n	800fa3e <lwip_netconn_do_delconn+0xca>
 800fa22:	2b20      	cmp	r3, #32
 800fa24:	d151      	bne.n	800faca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f00a fac0 	bl	8019fbc <udp_remove>
          break;
 800fa3c:	e046      	b.n	800facc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d006      	beq.n	800fa56 <lwip_netconn_do_delconn+0xe2>
 800fa48:	4b35      	ldr	r3, [pc, #212]	@ (800fb20 <lwip_netconn_do_delconn+0x1ac>)
 800fa4a:	f240 4294 	movw	r2, #1172	@ 0x494
 800fa4e:	4938      	ldr	r1, [pc, #224]	@ (800fb30 <lwip_netconn_do_delconn+0x1bc>)
 800fa50:	4835      	ldr	r0, [pc, #212]	@ (800fb28 <lwip_netconn_do_delconn+0x1b4>)
 800fa52:	f00d fd49 	bl	801d4e8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2204      	movs	r2, #4
 800fa5c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2203      	movs	r2, #3
 800fa62:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2100      	movs	r1, #0
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7ff fe14 	bl	800f6a0 <lwip_netconn_do_close_internal>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d04b      	beq.n	800fb16 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	785b      	ldrb	r3, [r3, #1]
 800fa84:	2b04      	cmp	r3, #4
 800fa86:	d006      	beq.n	800fa96 <lwip_netconn_do_delconn+0x122>
 800fa88:	4b25      	ldr	r3, [pc, #148]	@ (800fb20 <lwip_netconn_do_delconn+0x1ac>)
 800fa8a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800fa8e:	4929      	ldr	r1, [pc, #164]	@ (800fb34 <lwip_netconn_do_delconn+0x1c0>)
 800fa90:	4825      	ldr	r0, [pc, #148]	@ (800fb28 <lwip_netconn_do_delconn+0x1b4>)
 800fa92:	f00d fd29 	bl	801d4e8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fa96:	4828      	ldr	r0, [pc, #160]	@ (800fb38 <lwip_netconn_do_delconn+0x1c4>)
 800fa98:	f00c ff7d 	bl	801c996 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	330c      	adds	r3, #12
 800faa2:	2100      	movs	r1, #0
 800faa4:	4618      	mov	r0, r3
 800faa6:	f00c fed4 	bl	801c852 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800faaa:	4823      	ldr	r0, [pc, #140]	@ (800fb38 <lwip_netconn_do_delconn+0x1c4>)
 800faac:	f00c ff64 	bl	801c978 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	785b      	ldrb	r3, [r3, #1]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d02d      	beq.n	800fb16 <lwip_netconn_do_delconn+0x1a2>
 800faba:	4b19      	ldr	r3, [pc, #100]	@ (800fb20 <lwip_netconn_do_delconn+0x1ac>)
 800fabc:	f240 429e 	movw	r2, #1182	@ 0x49e
 800fac0:	491c      	ldr	r1, [pc, #112]	@ (800fb34 <lwip_netconn_do_delconn+0x1c0>)
 800fac2:	4819      	ldr	r0, [pc, #100]	@ (800fb28 <lwip_netconn_do_delconn+0x1b4>)
 800fac4:	f00d fd10 	bl	801d4e8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fac8:	e025      	b.n	800fb16 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800faca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2200      	movs	r2, #0
 800fad2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d007      	beq.n	800faee <lwip_netconn_do_delconn+0x17a>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	6810      	ldr	r0, [r2, #0]
 800fae8:	2200      	movs	r2, #0
 800faea:	2100      	movs	r1, #0
 800faec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d007      	beq.n	800fb08 <lwip_netconn_do_delconn+0x194>
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	6810      	ldr	r0, [r2, #0]
 800fb02:	2200      	movs	r2, #0
 800fb04:	2102      	movs	r1, #2
 800fb06:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	330c      	adds	r3, #12
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f00c feea 	bl	801c8e8 <sys_sem_valid>
 800fb14:	e000      	b.n	800fb18 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fb16:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	0801fec8 	.word	0x0801fec8
 800fb24:	08020238 	.word	0x08020238
 800fb28:	0801ff0c 	.word	0x0801ff0c
 800fb2c:	0802024c 	.word	0x0802024c
 800fb30:	0802026c 	.word	0x0802026c
 800fb34:	08020288 	.word	0x08020288
 800fb38:	2000b7fc 	.word	0x2000b7fc

0800fb3c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d025      	beq.n	800fb9e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb5c:	2b10      	cmp	r3, #16
 800fb5e:	d00e      	beq.n	800fb7e <lwip_netconn_do_bind+0x42>
 800fb60:	2b20      	cmp	r3, #32
 800fb62:	d119      	bne.n	800fb98 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6858      	ldr	r0, [r3, #4]
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	6899      	ldr	r1, [r3, #8]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	899b      	ldrh	r3, [r3, #12]
 800fb72:	461a      	mov	r2, r3
 800fb74:	f00a f97a 	bl	8019e6c <udp_bind>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	73fb      	strb	r3, [r7, #15]
        break;
 800fb7c:	e011      	b.n	800fba2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	6858      	ldr	r0, [r3, #4]
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	6899      	ldr	r1, [r3, #8]
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f003 fef7 	bl	8013980 <tcp_bind>
 800fb92:	4603      	mov	r3, r0
 800fb94:	73fb      	strb	r3, [r7, #15]
        break;
 800fb96:	e004      	b.n	800fba2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fb98:	23fa      	movs	r3, #250	@ 0xfa
 800fb9a:	73fb      	strb	r3, [r7, #15]
        break;
 800fb9c:	e001      	b.n	800fba2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fb9e:	23fa      	movs	r3, #250	@ 0xfa
 800fba0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	7bfa      	ldrb	r2, [r7, #15]
 800fba6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d07f      	beq.n	800fcc6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fbd0:	2b10      	cmp	r3, #16
 800fbd2:	d175      	bne.n	800fcc0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	785b      	ldrb	r3, [r3, #1]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d165      	bne.n	800fcaa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	7d1b      	ldrb	r3, [r3, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fbea:	23fa      	movs	r3, #250	@ 0xfa
 800fbec:	72fb      	strb	r3, [r7, #11]
 800fbee:	e06c      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fbf0:	23ff      	movs	r3, #255	@ 0xff
 800fbf2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	f107 020b 	add.w	r2, r7, #11
 800fbfe:	7cf9      	ldrb	r1, [r7, #19]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f003 ff87 	bl	8013b14 <tcp_listen_with_backlog_and_err>
 800fc06:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d05d      	beq.n	800fcca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	3310      	adds	r3, #16
 800fc14:	4618      	mov	r0, r3
 800fc16:	f00c fdd6 	bl	801c7c6 <sys_mbox_valid>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d00b      	beq.n	800fc38 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3310      	adds	r3, #16
 800fc26:	4618      	mov	r0, r3
 800fc28:	f00c fd46 	bl	801c6b8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3310      	adds	r3, #16
 800fc32:	4618      	mov	r0, r3
 800fc34:	f00c fdd8 	bl	801c7e8 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	3314      	adds	r3, #20
 800fc42:	4618      	mov	r0, r3
 800fc44:	f00c fdbf 	bl	801c7c6 <sys_mbox_valid>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d108      	bne.n	800fc60 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	3314      	adds	r3, #20
 800fc54:	2106      	movs	r1, #6
 800fc56:	4618      	mov	r0, r3
 800fc58:	f00c fd0c 	bl	801c674 <sys_mbox_new>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800fc60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d118      	bne.n	800fc9a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2202      	movs	r2, #2
 800fc6e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4619      	mov	r1, r3
 800fc84:	4610      	mov	r0, r2
 800fc86:	f004 ff2f 	bl	8014ae8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	4912      	ldr	r1, [pc, #72]	@ (800fcdc <lwip_netconn_do_listen+0x12c>)
 800fc92:	4618      	mov	r0, r3
 800fc94:	f004 ffa0 	bl	8014bd8 <tcp_accept>
 800fc98:	e017      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f003 fd1e 	bl	80136dc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2200      	movs	r2, #0
 800fca6:	605a      	str	r2, [r3, #4]
 800fca8:	e00f      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	785b      	ldrb	r3, [r3, #1]
 800fcb0:	2b02      	cmp	r3, #2
 800fcb2:	d102      	bne.n	800fcba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	72fb      	strb	r3, [r7, #11]
 800fcb8:	e007      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800fcba:	23f5      	movs	r3, #245	@ 0xf5
 800fcbc:	72fb      	strb	r3, [r7, #11]
 800fcbe:	e004      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800fcc0:	23f0      	movs	r3, #240	@ 0xf0
 800fcc2:	72fb      	strb	r3, [r7, #11]
 800fcc4:	e001      	b.n	800fcca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800fcc6:	23f5      	movs	r3, #245	@ 0xf5
 800fcc8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800fcca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fcd2:	bf00      	nop
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	0800f1bd 	.word	0x0800f1bd

0800fce0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe ff1e 	bl	800eb32 <netconn_err>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d134      	bne.n	800fd6c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d02d      	beq.n	800fd68 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd16:	2b20      	cmp	r3, #32
 800fd18:	d123      	bne.n	800fd62 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d10c      	bne.n	800fd3e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	685a      	ldr	r2, [r3, #4]
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4619      	mov	r1, r3
 800fd32:	4610      	mov	r0, r2
 800fd34:	f009 feb0 	bl	8019a98 <udp_send>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800fd3c:	e016      	b.n	800fd6c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6858      	ldr	r0, [r3, #4]
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	6819      	ldr	r1, [r3, #0]
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	f103 0208 	add.w	r2, r3, #8
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	899b      	ldrh	r3, [r3, #12]
 800fd58:	f009 fed2 	bl	8019b00 <udp_sendto>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
          break;
 800fd60:	e004      	b.n	800fd6c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800fd62:	23f5      	movs	r3, #245	@ 0xf5
 800fd64:	73fb      	strb	r3, [r7, #15]
          break;
 800fd66:	e001      	b.n	800fd6c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fd68:	23f5      	movs	r3, #245	@ 0xf5
 800fd6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	7bfa      	ldrb	r2, [r7, #15]
 800fd70:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fd72:	bf00      	nop
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b086      	sub	sp, #24
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d022      	beq.n	800fddc <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fda0:	2b10      	cmp	r3, #16
 800fda2:	d11b      	bne.n	800fddc <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	689b      	ldr	r3, [r3, #8]
 800fda8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdb0:	d202      	bcs.n	800fdb8 <lwip_netconn_do_recv+0x3e>
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	e001      	b.n	800fdbc <lwip_netconn_do_recv+0x42>
 800fdb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdbc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	89fa      	ldrh	r2, [r7, #14]
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f003 ffa7 	bl	8013d1c <tcp_recved>
        remaining -= recved;
 800fdce:	89fb      	ldrh	r3, [r7, #14]
 800fdd0:	697a      	ldr	r2, [r7, #20]
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1e6      	bne.n	800fdaa <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fddc:	bf00      	nop
 800fdde:	3718      	adds	r7, #24
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b088      	sub	sp, #32
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	460b      	mov	r3, r1
 800fdee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d106      	bne.n	800fe08 <lwip_netconn_do_writemore+0x24>
 800fdfa:	4b96      	ldr	r3, [pc, #600]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fdfc:	f240 6273 	movw	r2, #1651	@ 0x673
 800fe00:	4995      	ldr	r1, [pc, #596]	@ (8010058 <lwip_netconn_do_writemore+0x274>)
 800fe02:	4896      	ldr	r0, [pc, #600]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe04:	f00d fb70 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	785b      	ldrb	r3, [r3, #1]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d006      	beq.n	800fe1e <lwip_netconn_do_writemore+0x3a>
 800fe10:	4b90      	ldr	r3, [pc, #576]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fe12:	f240 6274 	movw	r2, #1652	@ 0x674
 800fe16:	4992      	ldr	r1, [pc, #584]	@ (8010060 <lwip_netconn_do_writemore+0x27c>)
 800fe18:	4890      	ldr	r0, [pc, #576]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe1a:	f00d fb65 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <lwip_netconn_do_writemore+0x50>
 800fe26:	4b8b      	ldr	r3, [pc, #556]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fe28:	f240 6275 	movw	r2, #1653	@ 0x675
 800fe2c:	498d      	ldr	r1, [pc, #564]	@ (8010064 <lwip_netconn_do_writemore+0x280>)
 800fe2e:	488b      	ldr	r0, [pc, #556]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe30:	f00d fb5a 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d106      	bne.n	800fe4a <lwip_netconn_do_writemore+0x66>
 800fe3c:	4b85      	ldr	r3, [pc, #532]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fe3e:	f240 6276 	movw	r2, #1654	@ 0x676
 800fe42:	4989      	ldr	r1, [pc, #548]	@ (8010068 <lwip_netconn_do_writemore+0x284>)
 800fe44:	4885      	ldr	r0, [pc, #532]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe46:	f00d fb4f 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a1b      	ldr	r3, [r3, #32]
 800fe4e:	699a      	ldr	r2, [r3, #24]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a1b      	ldr	r3, [r3, #32]
 800fe54:	695b      	ldr	r3, [r3, #20]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d306      	bcc.n	800fe68 <lwip_netconn_do_writemore+0x84>
 800fe5a:	4b7e      	ldr	r3, [pc, #504]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fe5c:	f240 6277 	movw	r2, #1655	@ 0x677
 800fe60:	4982      	ldr	r1, [pc, #520]	@ (801006c <lwip_netconn_do_writemore+0x288>)
 800fe62:	487e      	ldr	r0, [pc, #504]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe64:	f00d fb40 	bl	801d4e8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	899b      	ldrh	r3, [r3, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d106      	bne.n	800fe80 <lwip_netconn_do_writemore+0x9c>
 800fe72:	4b78      	ldr	r3, [pc, #480]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800fe74:	f240 6279 	movw	r2, #1657	@ 0x679
 800fe78:	497d      	ldr	r1, [pc, #500]	@ (8010070 <lwip_netconn_do_writemore+0x28c>)
 800fe7a:	4878      	ldr	r0, [pc, #480]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800fe7c:	f00d fb34 	bl	801d4e8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a1b      	ldr	r3, [r3, #32]
 800fe84:	7f1b      	ldrb	r3, [r3, #28]
 800fe86:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	7f1b      	ldrb	r3, [r3, #28]
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d104      	bne.n	800fe9e <lwip_netconn_do_writemore+0xba>
 800fe94:	7ebb      	ldrb	r3, [r7, #26]
 800fe96:	f003 0304 	and.w	r3, r3, #4
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <lwip_netconn_do_writemore+0xbe>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e000      	b.n	800fea4 <lwip_netconn_do_writemore+0xc0>
 800fea2:	2300      	movs	r3, #0
 800fea4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a1b      	ldr	r3, [r3, #32]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	691b      	ldr	r3, [r3, #16]
 800feb4:	4413      	add	r3, r2
 800feb6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6a1b      	ldr	r3, [r3, #32]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	685a      	ldr	r2, [r3, #4]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6a1b      	ldr	r3, [r3, #32]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fed0:	d307      	bcc.n	800fee2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fed6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fed8:	7ebb      	ldrb	r3, [r7, #26]
 800feda:	f043 0302 	orr.w	r3, r3, #2
 800fede:	76bb      	strb	r3, [r7, #26]
 800fee0:	e001      	b.n	800fee6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800feee:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fef0:	89fa      	ldrh	r2, [r7, #14]
 800fef2:	8bbb      	ldrh	r3, [r7, #28]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d216      	bcs.n	800ff26 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fef8:	89fb      	ldrh	r3, [r7, #14]
 800fefa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fefc:	7e3b      	ldrb	r3, [r7, #24]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00d      	beq.n	800ff1e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ff02:	8bbb      	ldrh	r3, [r7, #28]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10e      	bne.n	800ff26 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a1b      	ldr	r3, [r3, #32]
 800ff0c:	699b      	ldr	r3, [r3, #24]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <lwip_netconn_do_writemore+0x134>
 800ff12:	f06f 0306 	mvn.w	r3, #6
 800ff16:	e000      	b.n	800ff1a <lwip_netconn_do_writemore+0x136>
 800ff18:	2300      	movs	r3, #0
 800ff1a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ff1c:	e07d      	b.n	801001a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ff1e:	7ebb      	ldrb	r3, [r7, #26]
 800ff20:	f043 0302 	orr.w	r3, r3, #2
 800ff24:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	691a      	ldr	r2, [r3, #16]
 800ff2c:	8bbb      	ldrh	r3, [r7, #28]
 800ff2e:	441a      	add	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a1b      	ldr	r3, [r3, #32]
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d906      	bls.n	800ff4a <lwip_netconn_do_writemore+0x166>
 800ff3c:	4b45      	ldr	r3, [pc, #276]	@ (8010054 <lwip_netconn_do_writemore+0x270>)
 800ff3e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800ff42:	494c      	ldr	r1, [pc, #304]	@ (8010074 <lwip_netconn_do_writemore+0x290>)
 800ff44:	4845      	ldr	r0, [pc, #276]	@ (801005c <lwip_netconn_do_writemore+0x278>)
 800ff46:	f00d facf 	bl	801d4e8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ff4a:	8bbb      	ldrh	r3, [r7, #28]
 800ff4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d103      	bne.n	800ff5c <lwip_netconn_do_writemore+0x178>
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff5a:	d209      	bcs.n	800ff70 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ff60:	8bba      	ldrh	r2, [r7, #28]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d10b      	bne.n	800ff7e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	899b      	ldrh	r3, [r3, #12]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d906      	bls.n	800ff7e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ff70:	2301      	movs	r3, #1
 800ff72:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ff74:	7ebb      	ldrb	r3, [r7, #26]
 800ff76:	f043 0302 	orr.w	r3, r3, #2
 800ff7a:	76bb      	strb	r3, [r7, #26]
 800ff7c:	e001      	b.n	800ff82 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6858      	ldr	r0, [r3, #4]
 800ff86:	7ebb      	ldrb	r3, [r7, #26]
 800ff88:	8bba      	ldrh	r2, [r7, #28]
 800ff8a:	6979      	ldr	r1, [r7, #20]
 800ff8c:	f007 fce8 	bl	8017960 <tcp_write>
 800ff90:	4603      	mov	r3, r0
 800ff92:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ff94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d12c      	bne.n	800fff6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	6999      	ldr	r1, [r3, #24]
 800ffa2:	8bba      	ldrh	r2, [r7, #28]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6a1b      	ldr	r3, [r3, #32]
 800ffa8:	440a      	add	r2, r1
 800ffaa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a1b      	ldr	r3, [r3, #32]
 800ffb0:	6919      	ldr	r1, [r3, #16]
 800ffb2:	8bba      	ldrh	r2, [r7, #28]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a1b      	ldr	r3, [r3, #32]
 800ffb8:	440a      	add	r2, r1
 800ffba:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a1b      	ldr	r3, [r3, #32]
 800ffc0:	691a      	ldr	r2, [r3, #16]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a1b      	ldr	r3, [r3, #32]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d113      	bne.n	800fff6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a1b      	ldr	r3, [r3, #32]
 800ffd2:	899a      	ldrh	r2, [r3, #12]
 800ffd4:	3a01      	subs	r2, #1
 800ffd6:	b292      	uxth	r2, r2
 800ffd8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	899b      	ldrh	r3, [r3, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d008      	beq.n	800fff6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	689a      	ldr	r2, [r3, #8]
 800ffea:	3208      	adds	r2, #8
 800ffec:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6a1b      	ldr	r3, [r3, #32]
 800fff2:	2200      	movs	r2, #0
 800fff4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800fff6:	7e7b      	ldrb	r3, [r7, #25]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d004      	beq.n	8010006 <lwip_netconn_do_writemore+0x222>
 800fffc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010000:	2b00      	cmp	r3, #0
 8010002:	f43f af50 	beq.w	800fea6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010006:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <lwip_netconn_do_writemore+0x234>
 801000e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010016:	d146      	bne.n	80100a6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010018:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801001a:	7e3b      	ldrb	r3, [r7, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d02b      	beq.n	8010078 <lwip_netconn_do_writemore+0x294>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	699a      	ldr	r2, [r3, #24]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6a1b      	ldr	r3, [r3, #32]
 801002a:	695b      	ldr	r3, [r3, #20]
 801002c:	429a      	cmp	r2, r3
 801002e:	d223      	bcs.n	8010078 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010034:	2b00      	cmp	r3, #0
 8010036:	d005      	beq.n	8010044 <lwip_netconn_do_writemore+0x260>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801003c:	2200      	movs	r2, #0
 801003e:	2103      	movs	r1, #3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	7f1b      	ldrb	r3, [r3, #28]
 8010048:	f043 0310 	orr.w	r3, r3, #16
 801004c:	b2da      	uxtb	r2, r3
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	771a      	strb	r2, [r3, #28]
 8010052:	e028      	b.n	80100a6 <lwip_netconn_do_writemore+0x2c2>
 8010054:	0801fec8 	.word	0x0801fec8
 8010058:	08020020 	.word	0x08020020
 801005c:	0801ff0c 	.word	0x0801ff0c
 8010060:	08020328 	.word	0x08020328
 8010064:	08020030 	.word	0x08020030
 8010068:	08020348 	.word	0x08020348
 801006c:	08020360 	.word	0x08020360
 8010070:	080203a0 	.word	0x080203a0
 8010074:	080203c8 	.word	0x080203c8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010080:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010084:	d305      	bcc.n	8010092 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801008e:	2b04      	cmp	r3, #4
 8010090:	d909      	bls.n	80100a6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010096:	2b00      	cmp	r3, #0
 8010098:	d005      	beq.n	80100a6 <lwip_netconn_do_writemore+0x2c2>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801009e:	2200      	movs	r2, #0
 80100a0:	2103      	movs	r1, #3
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80100a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d11d      	bne.n	80100ea <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a1b      	ldr	r3, [r3, #32]
 80100b2:	699a      	ldr	r2, [r3, #24]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6a1b      	ldr	r3, [r3, #32]
 80100b8:	695b      	ldr	r3, [r3, #20]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d002      	beq.n	80100c4 <lwip_netconn_do_writemore+0x2e0>
 80100be:	7e3b      	ldrb	r3, [r7, #24]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d001      	beq.n	80100c8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80100c4:	2301      	movs	r3, #1
 80100c6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f008 fa31 	bl	8018534 <tcp_output>
 80100d2:	4603      	mov	r3, r0
 80100d4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80100d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80100da:	f113 0f04 	cmn.w	r3, #4
 80100de:	d12c      	bne.n	801013a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80100e0:	7b3b      	ldrb	r3, [r7, #12]
 80100e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80100e4:	2301      	movs	r3, #1
 80100e6:	76fb      	strb	r3, [r7, #27]
 80100e8:	e027      	b.n	801013a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80100ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80100ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f2:	d120      	bne.n	8010136 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f008 fa1b 	bl	8018534 <tcp_output>
 80100fe:	4603      	mov	r3, r0
 8010100:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010102:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010106:	f113 0f04 	cmn.w	r3, #4
 801010a:	d104      	bne.n	8010116 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801010c:	7b7b      	ldrb	r3, [r7, #13]
 801010e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010110:	2301      	movs	r3, #1
 8010112:	76fb      	strb	r3, [r7, #27]
 8010114:	e011      	b.n	801013a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010116:	7e3b      	ldrb	r3, [r7, #24]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d00e      	beq.n	801013a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a1b      	ldr	r3, [r3, #32]
 8010120:	699b      	ldr	r3, [r3, #24]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d102      	bne.n	801012c <lwip_netconn_do_writemore+0x348>
 8010126:	f06f 0306 	mvn.w	r3, #6
 801012a:	e000      	b.n	801012e <lwip_netconn_do_writemore+0x34a>
 801012c:	2300      	movs	r3, #0
 801012e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010130:	2301      	movs	r3, #1
 8010132:	76fb      	strb	r3, [r7, #27]
 8010134:	e001      	b.n	801013a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010136:	2301      	movs	r3, #1
 8010138:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801013a:	7efb      	ldrb	r3, [r7, #27]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d015      	beq.n	801016c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a1b      	ldr	r3, [r3, #32]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	330c      	adds	r3, #12
 8010148:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	7ffa      	ldrb	r2, [r7, #31]
 8010150:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2200      	movs	r2, #0
 8010156:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801015e:	78fb      	ldrb	r3, [r7, #3]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d006      	beq.n	8010172 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010164:	68b8      	ldr	r0, [r7, #8]
 8010166:	f00c fba5 	bl	801c8b4 <sys_sem_signal>
 801016a:	e002      	b.n	8010172 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801016c:	f04f 33ff 	mov.w	r3, #4294967295
 8010170:	e000      	b.n	8010174 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3720      	adds	r7, #32
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fcd0 	bl	800eb32 <netconn_err>
 8010192:	4603      	mov	r3, r0
 8010194:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d166      	bne.n	801026c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101a8:	2b10      	cmp	r3, #16
 80101aa:	d15d      	bne.n	8010268 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	785b      	ldrb	r3, [r3, #1]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d002      	beq.n	80101bc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80101b6:	23fb      	movs	r3, #251	@ 0xfb
 80101b8:	73fb      	strb	r3, [r7, #15]
 80101ba:	e057      	b.n	801026c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d04d      	beq.n	8010262 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2201      	movs	r2, #1
 80101cc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6a1b      	ldr	r3, [r3, #32]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d006      	beq.n	80101e6 <lwip_netconn_do_write+0x6a>
 80101d8:	4b28      	ldr	r3, [pc, #160]	@ (801027c <lwip_netconn_do_write+0x100>)
 80101da:	f240 7223 	movw	r2, #1827	@ 0x723
 80101de:	4928      	ldr	r1, [pc, #160]	@ (8010280 <lwip_netconn_do_write+0x104>)
 80101e0:	4828      	ldr	r0, [pc, #160]	@ (8010284 <lwip_netconn_do_write+0x108>)
 80101e2:	f00d f981 	bl	801d4e8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	695b      	ldr	r3, [r3, #20]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d106      	bne.n	80101fc <lwip_netconn_do_write+0x80>
 80101ee:	4b23      	ldr	r3, [pc, #140]	@ (801027c <lwip_netconn_do_write+0x100>)
 80101f0:	f240 7224 	movw	r2, #1828	@ 0x724
 80101f4:	4924      	ldr	r1, [pc, #144]	@ (8010288 <lwip_netconn_do_write+0x10c>)
 80101f6:	4823      	ldr	r0, [pc, #140]	@ (8010284 <lwip_netconn_do_write+0x108>)
 80101f8:	f00d f976 	bl	801d4e8 <iprintf>
        msg->conn->current_msg = msg;
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	68ba      	ldr	r2, [r7, #8]
 8010202:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2100      	movs	r1, #0
 801020a:	4618      	mov	r0, r3
 801020c:	f7ff fdea 	bl	800fde4 <lwip_netconn_do_writemore>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d02e      	beq.n	8010274 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	785b      	ldrb	r3, [r3, #1]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d006      	beq.n	801022e <lwip_netconn_do_write+0xb2>
 8010220:	4b16      	ldr	r3, [pc, #88]	@ (801027c <lwip_netconn_do_write+0x100>)
 8010222:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8010226:	4919      	ldr	r1, [pc, #100]	@ (801028c <lwip_netconn_do_write+0x110>)
 8010228:	4816      	ldr	r0, [pc, #88]	@ (8010284 <lwip_netconn_do_write+0x108>)
 801022a:	f00d f95d 	bl	801d4e8 <iprintf>
          UNLOCK_TCPIP_CORE();
 801022e:	4818      	ldr	r0, [pc, #96]	@ (8010290 <lwip_netconn_do_write+0x114>)
 8010230:	f00c fbb1 	bl	801c996 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	330c      	adds	r3, #12
 801023a:	2100      	movs	r1, #0
 801023c:	4618      	mov	r0, r3
 801023e:	f00c fb08 	bl	801c852 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010242:	4813      	ldr	r0, [pc, #76]	@ (8010290 <lwip_netconn_do_write+0x114>)
 8010244:	f00c fb98 	bl	801c978 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	785b      	ldrb	r3, [r3, #1]
 801024e:	2b01      	cmp	r3, #1
 8010250:	d110      	bne.n	8010274 <lwip_netconn_do_write+0xf8>
 8010252:	4b0a      	ldr	r3, [pc, #40]	@ (801027c <lwip_netconn_do_write+0x100>)
 8010254:	f240 722c 	movw	r2, #1836	@ 0x72c
 8010258:	490c      	ldr	r1, [pc, #48]	@ (801028c <lwip_netconn_do_write+0x110>)
 801025a:	480a      	ldr	r0, [pc, #40]	@ (8010284 <lwip_netconn_do_write+0x108>)
 801025c:	f00d f944 	bl	801d4e8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010260:	e008      	b.n	8010274 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010262:	23f5      	movs	r3, #245	@ 0xf5
 8010264:	73fb      	strb	r3, [r7, #15]
 8010266:	e001      	b.n	801026c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010268:	23fa      	movs	r3, #250	@ 0xfa
 801026a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	7bfa      	ldrb	r2, [r7, #15]
 8010270:	711a      	strb	r2, [r3, #4]
 8010272:	e000      	b.n	8010276 <lwip_netconn_do_write+0xfa>
        return;
 8010274:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	0801fec8 	.word	0x0801fec8
 8010280:	0802026c 	.word	0x0802026c
 8010284:	0801ff0c 	.word	0x0801ff0c
 8010288:	080203f4 	.word	0x080203f4
 801028c:	08020288 	.word	0x08020288
 8010290:	2000b7fc 	.word	0x2000b7fc

08010294 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	785b      	ldrb	r3, [r3, #1]
 80102a6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d069      	beq.n	8010386 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	781b      	ldrb	r3, [r3, #0]
 80102b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80102bc:	2b10      	cmp	r3, #16
 80102be:	d162      	bne.n	8010386 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80102c4:	2b03      	cmp	r3, #3
 80102c6:	d002      	beq.n	80102ce <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80102c8:	7afb      	ldrb	r3, [r7, #11]
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d05b      	beq.n	8010386 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80102ce:	7afb      	ldrb	r3, [r7, #11]
 80102d0:	2b03      	cmp	r3, #3
 80102d2:	d103      	bne.n	80102dc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	22f5      	movs	r2, #245	@ 0xf5
 80102d8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80102da:	e059      	b.n	8010390 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80102dc:	7afb      	ldrb	r3, [r7, #11]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d103      	bne.n	80102ea <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	22fb      	movs	r2, #251	@ 0xfb
 80102e6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80102e8:	e052      	b.n	8010390 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	7a1b      	ldrb	r3, [r3, #8]
 80102ee:	f003 0301 	and.w	r3, r3, #1
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff f952 	bl	800f5a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	6a1b      	ldr	r3, [r3, #32]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <lwip_netconn_do_close+0x84>
 801030a:	4b23      	ldr	r3, [pc, #140]	@ (8010398 <lwip_netconn_do_close+0x104>)
 801030c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8010310:	4922      	ldr	r1, [pc, #136]	@ (801039c <lwip_netconn_do_close+0x108>)
 8010312:	4823      	ldr	r0, [pc, #140]	@ (80103a0 <lwip_netconn_do_close+0x10c>)
 8010314:	f00d f8e8 	bl	801d4e8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2204      	movs	r2, #4
 801031e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2100      	movs	r1, #0
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff f9b6 	bl	800f6a0 <lwip_netconn_do_close_internal>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d029      	beq.n	801038e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	785b      	ldrb	r3, [r3, #1]
 8010340:	2b04      	cmp	r3, #4
 8010342:	d006      	beq.n	8010352 <lwip_netconn_do_close+0xbe>
 8010344:	4b14      	ldr	r3, [pc, #80]	@ (8010398 <lwip_netconn_do_close+0x104>)
 8010346:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 801034a:	4916      	ldr	r1, [pc, #88]	@ (80103a4 <lwip_netconn_do_close+0x110>)
 801034c:	4814      	ldr	r0, [pc, #80]	@ (80103a0 <lwip_netconn_do_close+0x10c>)
 801034e:	f00d f8cb 	bl	801d4e8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8010352:	4815      	ldr	r0, [pc, #84]	@ (80103a8 <lwip_netconn_do_close+0x114>)
 8010354:	f00c fb1f 	bl	801c996 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	330c      	adds	r3, #12
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f00c fa76 	bl	801c852 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010366:	4810      	ldr	r0, [pc, #64]	@ (80103a8 <lwip_netconn_do_close+0x114>)
 8010368:	f00c fb06 	bl	801c978 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	785b      	ldrb	r3, [r3, #1]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00b      	beq.n	801038e <lwip_netconn_do_close+0xfa>
 8010376:	4b08      	ldr	r3, [pc, #32]	@ (8010398 <lwip_netconn_do_close+0x104>)
 8010378:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 801037c:	4909      	ldr	r1, [pc, #36]	@ (80103a4 <lwip_netconn_do_close+0x110>)
 801037e:	4808      	ldr	r0, [pc, #32]	@ (80103a0 <lwip_netconn_do_close+0x10c>)
 8010380:	f00d f8b2 	bl	801d4e8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010384:	e003      	b.n	801038e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	22f5      	movs	r2, #245	@ 0xf5
 801038a:	711a      	strb	r2, [r3, #4]
 801038c:	e000      	b.n	8010390 <lwip_netconn_do_close+0xfc>
      return;
 801038e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	0801fec8 	.word	0x0801fec8
 801039c:	0802026c 	.word	0x0802026c
 80103a0:	0801ff0c 	.word	0x0801ff0c
 80103a4:	08020288 	.word	0x08020288
 80103a8:	2000b7fc 	.word	0x2000b7fc

080103ac <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d013      	beq.n	80103e2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00b      	beq.n	80103da <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f002 fcce 	bl	8012d68 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	605a      	str	r2, [r3, #4]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	2006      	movs	r0, #6
 80103de:	f001 fe1f 	bl	8012020 <memp_free>
  }
}
 80103e2:	bf00      	nop
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
	...

080103ec <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	4613      	mov	r3, r2
 80103f8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d108      	bne.n	8010412 <netbuf_ref+0x26>
 8010400:	4b1c      	ldr	r3, [pc, #112]	@ (8010474 <netbuf_ref+0x88>)
 8010402:	2299      	movs	r2, #153	@ 0x99
 8010404:	491c      	ldr	r1, [pc, #112]	@ (8010478 <netbuf_ref+0x8c>)
 8010406:	481d      	ldr	r0, [pc, #116]	@ (801047c <netbuf_ref+0x90>)
 8010408:	f00d f86e 	bl	801d4e8 <iprintf>
 801040c:	f06f 030f 	mvn.w	r3, #15
 8010410:	e02b      	b.n	801046a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4618      	mov	r0, r3
 8010420:	f002 fca2 	bl	8012d68 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010424:	2241      	movs	r2, #65	@ 0x41
 8010426:	2100      	movs	r1, #0
 8010428:	2036      	movs	r0, #54	@ 0x36
 801042a:	f002 f9b9 	bl	80127a0 <pbuf_alloc>
 801042e:	4602      	mov	r2, r0
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d105      	bne.n	8010448 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2200      	movs	r2, #0
 8010440:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8010442:	f04f 33ff 	mov.w	r3, #4294967295
 8010446:	e010      	b.n	801046a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	88fa      	ldrh	r2, [r7, #6]
 8010456:	811a      	strh	r2, [r3, #8]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	6812      	ldr	r2, [r2, #0]
 801045c:	891b      	ldrh	r3, [r3, #8]
 801045e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	08020420 	.word	0x08020420
 8010478:	080204d8 	.word	0x080204d8
 801047c:	08020470 	.word	0x08020470

08010480 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d108      	bne.n	80104a4 <netbuf_data+0x24>
 8010492:	4b1b      	ldr	r3, [pc, #108]	@ (8010500 <netbuf_data+0x80>)
 8010494:	22c6      	movs	r2, #198	@ 0xc6
 8010496:	491b      	ldr	r1, [pc, #108]	@ (8010504 <netbuf_data+0x84>)
 8010498:	481b      	ldr	r0, [pc, #108]	@ (8010508 <netbuf_data+0x88>)
 801049a:	f00d f825 	bl	801d4e8 <iprintf>
 801049e:	f06f 030f 	mvn.w	r3, #15
 80104a2:	e029      	b.n	80104f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d108      	bne.n	80104bc <netbuf_data+0x3c>
 80104aa:	4b15      	ldr	r3, [pc, #84]	@ (8010500 <netbuf_data+0x80>)
 80104ac:	22c7      	movs	r2, #199	@ 0xc7
 80104ae:	4917      	ldr	r1, [pc, #92]	@ (801050c <netbuf_data+0x8c>)
 80104b0:	4815      	ldr	r0, [pc, #84]	@ (8010508 <netbuf_data+0x88>)
 80104b2:	f00d f819 	bl	801d4e8 <iprintf>
 80104b6:	f06f 030f 	mvn.w	r3, #15
 80104ba:	e01d      	b.n	80104f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d108      	bne.n	80104d4 <netbuf_data+0x54>
 80104c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010500 <netbuf_data+0x80>)
 80104c4:	22c8      	movs	r2, #200	@ 0xc8
 80104c6:	4912      	ldr	r1, [pc, #72]	@ (8010510 <netbuf_data+0x90>)
 80104c8:	480f      	ldr	r0, [pc, #60]	@ (8010508 <netbuf_data+0x88>)
 80104ca:	f00d f80d 	bl	801d4e8 <iprintf>
 80104ce:	f06f 030f 	mvn.w	r3, #15
 80104d2:	e011      	b.n	80104f8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d102      	bne.n	80104e2 <netbuf_data+0x62>
    return ERR_BUF;
 80104dc:	f06f 0301 	mvn.w	r3, #1
 80104e0:	e00a      	b.n	80104f8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	685a      	ldr	r2, [r3, #4]
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	895a      	ldrh	r2, [r3, #10]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80104f6:	2300      	movs	r3, #0
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3710      	adds	r7, #16
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	08020420 	.word	0x08020420
 8010504:	08020528 	.word	0x08020528
 8010508:	08020470 	.word	0x08020470
 801050c:	08020544 	.word	0x08020544
 8010510:	08020564 	.word	0x08020564

08010514 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d108      	bne.n	8010534 <netbuf_next+0x20>
 8010522:	4b11      	ldr	r3, [pc, #68]	@ (8010568 <netbuf_next+0x54>)
 8010524:	22e0      	movs	r2, #224	@ 0xe0
 8010526:	4911      	ldr	r1, [pc, #68]	@ (801056c <netbuf_next+0x58>)
 8010528:	4811      	ldr	r0, [pc, #68]	@ (8010570 <netbuf_next+0x5c>)
 801052a:	f00c ffdd 	bl	801d4e8 <iprintf>
 801052e:	f04f 33ff 	mov.w	r3, #4294967295
 8010532:	e014      	b.n	801055e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d102      	bne.n	8010544 <netbuf_next+0x30>
    return -1;
 801053e:	f04f 33ff 	mov.w	r3, #4294967295
 8010542:	e00c      	b.n	801055e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d101      	bne.n	801055c <netbuf_next+0x48>
    return 1;
 8010558:	2301      	movs	r3, #1
 801055a:	e000      	b.n	801055e <netbuf_next+0x4a>
  }
  return 0;
 801055c:	2300      	movs	r3, #0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	08020420 	.word	0x08020420
 801056c:	08020580 	.word	0x08020580
 8010570:	08020470 	.word	0x08020470

08010574 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b084      	sub	sp, #16
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801057e:	f009 f891 	bl	80196a4 <sys_timeouts_sleeptime>
 8010582:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801058a:	d10b      	bne.n	80105a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801058c:	4813      	ldr	r0, [pc, #76]	@ (80105dc <tcpip_timeouts_mbox_fetch+0x68>)
 801058e:	f00c fa02 	bl	801c996 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010592:	2200      	movs	r2, #0
 8010594:	6839      	ldr	r1, [r7, #0]
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f00c f8ba 	bl	801c710 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801059c:	480f      	ldr	r0, [pc, #60]	@ (80105dc <tcpip_timeouts_mbox_fetch+0x68>)
 801059e:	f00c f9eb 	bl	801c978 <sys_mutex_lock>
    return;
 80105a2:	e018      	b.n	80105d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d102      	bne.n	80105b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80105aa:	f009 f841 	bl	8019630 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80105ae:	e7e6      	b.n	801057e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80105b0:	480a      	ldr	r0, [pc, #40]	@ (80105dc <tcpip_timeouts_mbox_fetch+0x68>)
 80105b2:	f00c f9f0 	bl	801c996 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f00c f8a8 	bl	801c710 <sys_arch_mbox_fetch>
 80105c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80105c2:	4806      	ldr	r0, [pc, #24]	@ (80105dc <tcpip_timeouts_mbox_fetch+0x68>)
 80105c4:	f00c f9d8 	bl	801c978 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d102      	bne.n	80105d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80105d0:	f009 f82e 	bl	8019630 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80105d4:	e7d3      	b.n	801057e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	2000b7fc 	.word	0x2000b7fc

080105e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80105e8:	4810      	ldr	r0, [pc, #64]	@ (801062c <tcpip_thread+0x4c>)
 80105ea:	f00c f9c5 	bl	801c978 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80105ee:	4b10      	ldr	r3, [pc, #64]	@ (8010630 <tcpip_thread+0x50>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d005      	beq.n	8010602 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80105f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010630 <tcpip_thread+0x50>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a0e      	ldr	r2, [pc, #56]	@ (8010634 <tcpip_thread+0x54>)
 80105fc:	6812      	ldr	r2, [r2, #0]
 80105fe:	4610      	mov	r0, r2
 8010600:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	4619      	mov	r1, r3
 8010608:	480b      	ldr	r0, [pc, #44]	@ (8010638 <tcpip_thread+0x58>)
 801060a:	f7ff ffb3 	bl	8010574 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d106      	bne.n	8010622 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010614:	4b09      	ldr	r3, [pc, #36]	@ (801063c <tcpip_thread+0x5c>)
 8010616:	2291      	movs	r2, #145	@ 0x91
 8010618:	4909      	ldr	r1, [pc, #36]	@ (8010640 <tcpip_thread+0x60>)
 801061a:	480a      	ldr	r0, [pc, #40]	@ (8010644 <tcpip_thread+0x64>)
 801061c:	f00c ff64 	bl	801d4e8 <iprintf>
      continue;
 8010620:	e003      	b.n	801062a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	4618      	mov	r0, r3
 8010626:	f000 f80f 	bl	8010648 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801062a:	e7ea      	b.n	8010602 <tcpip_thread+0x22>
 801062c:	2000b7fc 	.word	0x2000b7fc
 8010630:	2000b7f0 	.word	0x2000b7f0
 8010634:	2000b7f4 	.word	0x2000b7f4
 8010638:	2000b7f8 	.word	0x2000b7f8
 801063c:	080205b8 	.word	0x080205b8
 8010640:	080205e8 	.word	0x080205e8
 8010644:	08020608 	.word	0x08020608

08010648 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b082      	sub	sp, #8
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b02      	cmp	r3, #2
 8010656:	d026      	beq.n	80106a6 <tcpip_thread_handle_msg+0x5e>
 8010658:	2b02      	cmp	r3, #2
 801065a:	dc2b      	bgt.n	80106b4 <tcpip_thread_handle_msg+0x6c>
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <tcpip_thread_handle_msg+0x1e>
 8010660:	2b01      	cmp	r3, #1
 8010662:	d015      	beq.n	8010690 <tcpip_thread_handle_msg+0x48>
 8010664:	e026      	b.n	80106b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	6850      	ldr	r0, [r2, #4]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	6892      	ldr	r2, [r2, #8]
 8010672:	4611      	mov	r1, r2
 8010674:	4798      	blx	r3
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d004      	beq.n	8010686 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	685b      	ldr	r3, [r3, #4]
 8010680:	4618      	mov	r0, r3
 8010682:	f002 fb71 	bl	8012d68 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010686:	6879      	ldr	r1, [r7, #4]
 8010688:	2009      	movs	r0, #9
 801068a:	f001 fcc9 	bl	8012020 <memp_free>
      break;
 801068e:	e018      	b.n	80106c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	6892      	ldr	r2, [r2, #8]
 8010698:	4610      	mov	r0, r2
 801069a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801069c:	6879      	ldr	r1, [r7, #4]
 801069e:	2008      	movs	r0, #8
 80106a0:	f001 fcbe 	bl	8012020 <memp_free>
      break;
 80106a4:	e00d      	b.n	80106c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	6892      	ldr	r2, [r2, #8]
 80106ae:	4610      	mov	r0, r2
 80106b0:	4798      	blx	r3
      break;
 80106b2:	e006      	b.n	80106c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80106b4:	4b05      	ldr	r3, [pc, #20]	@ (80106cc <tcpip_thread_handle_msg+0x84>)
 80106b6:	22cf      	movs	r2, #207	@ 0xcf
 80106b8:	4905      	ldr	r1, [pc, #20]	@ (80106d0 <tcpip_thread_handle_msg+0x88>)
 80106ba:	4806      	ldr	r0, [pc, #24]	@ (80106d4 <tcpip_thread_handle_msg+0x8c>)
 80106bc:	f00c ff14 	bl	801d4e8 <iprintf>
      break;
 80106c0:	bf00      	nop
  }
}
 80106c2:	bf00      	nop
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	080205b8 	.word	0x080205b8
 80106d0:	080205e8 	.word	0x080205e8
 80106d4:	08020608 	.word	0x08020608

080106d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80106e4:	481a      	ldr	r0, [pc, #104]	@ (8010750 <tcpip_inpkt+0x78>)
 80106e6:	f00c f86e 	bl	801c7c6 <sys_mbox_valid>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d105      	bne.n	80106fc <tcpip_inpkt+0x24>
 80106f0:	4b18      	ldr	r3, [pc, #96]	@ (8010754 <tcpip_inpkt+0x7c>)
 80106f2:	22fc      	movs	r2, #252	@ 0xfc
 80106f4:	4918      	ldr	r1, [pc, #96]	@ (8010758 <tcpip_inpkt+0x80>)
 80106f6:	4819      	ldr	r0, [pc, #100]	@ (801075c <tcpip_inpkt+0x84>)
 80106f8:	f00c fef6 	bl	801d4e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80106fc:	2009      	movs	r0, #9
 80106fe:	f001 fc19 	bl	8011f34 <memp_malloc>
 8010702:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801070a:	f04f 33ff 	mov.w	r3, #4294967295
 801070e:	e01a      	b.n	8010746 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	2200      	movs	r2, #0
 8010714:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010728:	6979      	ldr	r1, [r7, #20]
 801072a:	4809      	ldr	r0, [pc, #36]	@ (8010750 <tcpip_inpkt+0x78>)
 801072c:	f00b ffd6 	bl	801c6dc <sys_mbox_trypost>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d006      	beq.n	8010744 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010736:	6979      	ldr	r1, [r7, #20]
 8010738:	2009      	movs	r0, #9
 801073a:	f001 fc71 	bl	8012020 <memp_free>
    return ERR_MEM;
 801073e:	f04f 33ff 	mov.w	r3, #4294967295
 8010742:	e000      	b.n	8010746 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010744:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010746:	4618      	mov	r0, r3
 8010748:	3718      	adds	r7, #24
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	2000b7f8 	.word	0x2000b7f8
 8010754:	080205b8 	.word	0x080205b8
 8010758:	08020630 	.word	0x08020630
 801075c:	08020608 	.word	0x08020608

08010760 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010770:	f003 0318 	and.w	r3, r3, #24
 8010774:	2b00      	cmp	r3, #0
 8010776:	d006      	beq.n	8010786 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010778:	4a08      	ldr	r2, [pc, #32]	@ (801079c <tcpip_input+0x3c>)
 801077a:	6839      	ldr	r1, [r7, #0]
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7ff ffab 	bl	80106d8 <tcpip_inpkt>
 8010782:	4603      	mov	r3, r0
 8010784:	e005      	b.n	8010792 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010786:	4a06      	ldr	r2, [pc, #24]	@ (80107a0 <tcpip_input+0x40>)
 8010788:	6839      	ldr	r1, [r7, #0]
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff ffa4 	bl	80106d8 <tcpip_inpkt>
 8010790:	4603      	mov	r3, r0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	0801c4c9 	.word	0x0801c4c9
 80107a0:	0801b3d1 	.word	0x0801b3d1

080107a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80107ae:	4819      	ldr	r0, [pc, #100]	@ (8010814 <tcpip_try_callback+0x70>)
 80107b0:	f00c f809 	bl	801c7c6 <sys_mbox_valid>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <tcpip_try_callback+0x24>
 80107ba:	4b17      	ldr	r3, [pc, #92]	@ (8010818 <tcpip_try_callback+0x74>)
 80107bc:	f240 125d 	movw	r2, #349	@ 0x15d
 80107c0:	4916      	ldr	r1, [pc, #88]	@ (801081c <tcpip_try_callback+0x78>)
 80107c2:	4817      	ldr	r0, [pc, #92]	@ (8010820 <tcpip_try_callback+0x7c>)
 80107c4:	f00c fe90 	bl	801d4e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80107c8:	2008      	movs	r0, #8
 80107ca:	f001 fbb3 	bl	8011f34 <memp_malloc>
 80107ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d102      	bne.n	80107dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80107d6:	f04f 33ff 	mov.w	r3, #4294967295
 80107da:	e017      	b.n	801080c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2201      	movs	r2, #1
 80107e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	683a      	ldr	r2, [r7, #0]
 80107ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80107ee:	68f9      	ldr	r1, [r7, #12]
 80107f0:	4808      	ldr	r0, [pc, #32]	@ (8010814 <tcpip_try_callback+0x70>)
 80107f2:	f00b ff73 	bl	801c6dc <sys_mbox_trypost>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d006      	beq.n	801080a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80107fc:	68f9      	ldr	r1, [r7, #12]
 80107fe:	2008      	movs	r0, #8
 8010800:	f001 fc0e 	bl	8012020 <memp_free>
    return ERR_MEM;
 8010804:	f04f 33ff 	mov.w	r3, #4294967295
 8010808:	e000      	b.n	801080c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3710      	adds	r7, #16
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	2000b7f8 	.word	0x2000b7f8
 8010818:	080205b8 	.word	0x080205b8
 801081c:	08020630 	.word	0x08020630
 8010820:	08020608 	.word	0x08020608

08010824 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010830:	4806      	ldr	r0, [pc, #24]	@ (801084c <tcpip_send_msg_wait_sem+0x28>)
 8010832:	f00c f8a1 	bl	801c978 <sys_mutex_lock>
  fn(apimsg);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	68b8      	ldr	r0, [r7, #8]
 801083a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801083c:	4803      	ldr	r0, [pc, #12]	@ (801084c <tcpip_send_msg_wait_sem+0x28>)
 801083e:	f00c f8aa 	bl	801c996 <sys_mutex_unlock>
  return ERR_OK;
 8010842:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	2000b7fc 	.word	0x2000b7fc

08010850 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af02      	add	r7, sp, #8
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  lwip_init();
 801085a:	f000 fec1 	bl	80115e0 <lwip_init>

  tcpip_init_done = initfunc;
 801085e:	4a17      	ldr	r2, [pc, #92]	@ (80108bc <tcpip_init+0x6c>)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010864:	4a16      	ldr	r2, [pc, #88]	@ (80108c0 <tcpip_init+0x70>)
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801086a:	2106      	movs	r1, #6
 801086c:	4815      	ldr	r0, [pc, #84]	@ (80108c4 <tcpip_init+0x74>)
 801086e:	f00b ff01 	bl	801c674 <sys_mbox_new>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d006      	beq.n	8010886 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010878:	4b13      	ldr	r3, [pc, #76]	@ (80108c8 <tcpip_init+0x78>)
 801087a:	f240 2261 	movw	r2, #609	@ 0x261
 801087e:	4913      	ldr	r1, [pc, #76]	@ (80108cc <tcpip_init+0x7c>)
 8010880:	4813      	ldr	r0, [pc, #76]	@ (80108d0 <tcpip_init+0x80>)
 8010882:	f00c fe31 	bl	801d4e8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010886:	4813      	ldr	r0, [pc, #76]	@ (80108d4 <tcpip_init+0x84>)
 8010888:	f00c f85a 	bl	801c940 <sys_mutex_new>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d006      	beq.n	80108a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010892:	4b0d      	ldr	r3, [pc, #52]	@ (80108c8 <tcpip_init+0x78>)
 8010894:	f240 2265 	movw	r2, #613	@ 0x265
 8010898:	490f      	ldr	r1, [pc, #60]	@ (80108d8 <tcpip_init+0x88>)
 801089a:	480d      	ldr	r0, [pc, #52]	@ (80108d0 <tcpip_init+0x80>)
 801089c:	f00c fe24 	bl	801d4e8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80108a0:	2300      	movs	r3, #0
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108a8:	2200      	movs	r2, #0
 80108aa:	490c      	ldr	r1, [pc, #48]	@ (80108dc <tcpip_init+0x8c>)
 80108ac:	480c      	ldr	r0, [pc, #48]	@ (80108e0 <tcpip_init+0x90>)
 80108ae:	f00c f87f 	bl	801c9b0 <sys_thread_new>
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	2000b7f0 	.word	0x2000b7f0
 80108c0:	2000b7f4 	.word	0x2000b7f4
 80108c4:	2000b7f8 	.word	0x2000b7f8
 80108c8:	080205b8 	.word	0x080205b8
 80108cc:	08020640 	.word	0x08020640
 80108d0:	08020608 	.word	0x08020608
 80108d4:	2000b7fc 	.word	0x2000b7fc
 80108d8:	08020664 	.word	0x08020664
 80108dc:	080105e1 	.word	0x080105e1
 80108e0:	08020688 	.word	0x08020688

080108e4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d002      	beq.n	80108fa <fs_open+0x16>
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d102      	bne.n	8010900 <fs_open+0x1c>
    return ERR_ARG;
 80108fa:	f06f 030f 	mvn.w	r3, #15
 80108fe:	e028      	b.n	8010952 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010900:	4b16      	ldr	r3, [pc, #88]	@ (801095c <fs_open+0x78>)
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	e020      	b.n	8010948 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	4619      	mov	r1, r3
 801090c:	6838      	ldr	r0, [r7, #0]
 801090e:	f7ef fc7f 	bl	8000210 <strcmp>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d114      	bne.n	8010942 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	689a      	ldr	r2, [r3, #8]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	68da      	ldr	r2, [r3, #12]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	68da      	ldr	r2, [r3, #12]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	7c1a      	ldrb	r2, [r3, #16]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801093e:	2300      	movs	r3, #0
 8010940:	e007      	b.n	8010952 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1db      	bne.n	8010906 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801094e:	f06f 0305 	mvn.w	r3, #5
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	08024930 	.word	0x08024930

08010960 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8010960:	b480      	push	{r7}
 8010962:	b083      	sub	sp, #12
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8010968:	bf00      	nop
 801096a:	370c      	adds	r7, #12
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8010974:	b480      	push	{r7}
 8010976:	b083      	sub	sp, #12
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	685a      	ldr	r2, [r3, #4]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	1ad3      	subs	r3, r2, r3
}
 8010986:	4618      	mov	r0, r3
 8010988:	370c      	adds	r7, #12
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr

08010992 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8010992:	b580      	push	{r7, lr}
 8010994:	b082      	sub	sp, #8
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 801099a:	222c      	movs	r2, #44	@ 0x2c
 801099c:	2100      	movs	r1, #0
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f00c fe41 	bl	801d626 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80109b2:	202c      	movs	r0, #44	@ 0x2c
 80109b4:	f001 f91a 	bl	8011bec <mem_malloc>
 80109b8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <http_state_alloc+0x1a>
    http_state_init(ret);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff ffe6 	bl	8010992 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80109c6:	687b      	ldr	r3, [r7, #4]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	695b      	ldr	r3, [r3, #20]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d007      	beq.n	80109f0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	695b      	ldr	r3, [r3, #20]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7ff ffbb 	bl	8010960 <fs_close>
    hs->handle = NULL;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2200      	movs	r2, #0
 80109ee:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a1b      	ldr	r3, [r3, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d007      	beq.n	8010a08 <http_state_eof+0x38>
    pbuf_free(hs->req);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a1b      	ldr	r3, [r3, #32]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f002 f9b3 	bl	8012d68 <pbuf_free>
    hs->req = NULL;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b082      	sub	sp, #8
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d005      	beq.n	8010a2a <http_state_free+0x1a>
    http_state_eof(hs);
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff ffd6 	bl	80109d0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 ff47 	bl	80118b8 <mem_free>
  }
}
 8010a2a:	bf00      	nop
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
	...

08010a34 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
 8010a40:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d106      	bne.n	8010a56 <http_write+0x22>
 8010a48:	4b2c      	ldr	r3, [pc, #176]	@ (8010afc <http_write+0xc8>)
 8010a4a:	f240 2219 	movw	r2, #537	@ 0x219
 8010a4e:	492c      	ldr	r1, [pc, #176]	@ (8010b00 <http_write+0xcc>)
 8010a50:	482c      	ldr	r0, [pc, #176]	@ (8010b04 <http_write+0xd0>)
 8010a52:	f00c fd49 	bl	801d4e8 <iprintf>
  len = *length;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8010a5c:	8afb      	ldrh	r3, [r7, #22]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d101      	bne.n	8010a66 <http_write+0x32>
    return ERR_OK;
 8010a62:	2300      	movs	r3, #0
 8010a64:	e045      	b.n	8010af2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a6c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8010a6e:	8aba      	ldrh	r2, [r7, #20]
 8010a70:	8afb      	ldrh	r3, [r7, #22]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d201      	bcs.n	8010a7a <http_write+0x46>
    len = max_len;
 8010a76:	8abb      	ldrh	r3, [r7, #20]
 8010a78:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8010a82:	8afa      	ldrh	r2, [r7, #22]
 8010a84:	8abb      	ldrh	r3, [r7, #20]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d901      	bls.n	8010a8e <http_write+0x5a>
    len = max_len;
 8010a8a:	8abb      	ldrh	r3, [r7, #20]
 8010a8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8010a8e:	78fb      	ldrb	r3, [r7, #3]
 8010a90:	8afa      	ldrh	r2, [r7, #22]
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f006 ff63 	bl	8017960 <tcp_write>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8010a9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa6:	d10f      	bne.n	8010ac8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d004      	beq.n	8010abc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8010ab8:	2b08      	cmp	r3, #8
 8010aba:	d902      	bls.n	8010ac2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8010abc:	2301      	movs	r3, #1
 8010abe:	82fb      	strh	r3, [r7, #22]
 8010ac0:	e002      	b.n	8010ac8 <http_write+0x94>
      } else {
        len /= 2;
 8010ac2:	8afb      	ldrh	r3, [r7, #22]
 8010ac4:	085b      	lsrs	r3, r3, #1
 8010ac6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8010ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad0:	d102      	bne.n	8010ad8 <http_write+0xa4>
 8010ad2:	8afb      	ldrh	r3, [r7, #22]
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d8da      	bhi.n	8010a8e <http_write+0x5a>

  if (err == ERR_OK) {
 8010ad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d103      	bne.n	8010ae8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	8afa      	ldrh	r2, [r7, #22]
 8010ae4:	801a      	strh	r2, [r3, #0]
 8010ae6:	e002      	b.n	8010aee <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8010aee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3718      	adds	r7, #24
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	080206d8 	.word	0x080206d8
 8010b00:	08020710 	.word	0x08020710
 8010b04:	08020720 	.word	0x08020720

08010b08 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	4613      	mov	r3, r2
 8010b14:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8010b16:	2100      	movs	r1, #0
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f003 ffe5 	bl	8014ae8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8010b1e:	2100      	movs	r1, #0
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f003 fff3 	bl	8014b0c <tcp_recv>
  altcp_err(pcb, NULL);
 8010b26:	2100      	movs	r1, #0
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f004 f833 	bl	8014b94 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8010b2e:	2200      	movs	r2, #0
 8010b30:	2100      	movs	r1, #0
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f004 f868 	bl	8014c08 <tcp_poll>
  altcp_sent(pcb, NULL);
 8010b38:	2100      	movs	r1, #0
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f004 f808 	bl	8014b50 <tcp_sent>
  if (hs != NULL) {
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d002      	beq.n	8010b4c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8010b46:	68b8      	ldr	r0, [r7, #8]
 8010b48:	f7ff ff62 	bl	8010a10 <http_state_free>
  }

  if (abort_conn) {
 8010b4c:	79fb      	ldrb	r3, [r7, #7]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d004      	beq.n	8010b5c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f002 ff08 	bl	8013968 <tcp_abort>
    return ERR_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	e00f      	b.n	8010b7c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f002 fdbd 	bl	80136dc <tcp_close>
 8010b62:	4603      	mov	r3, r0
 8010b64:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8010b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d004      	beq.n	8010b78 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8010b6e:	2204      	movs	r2, #4
 8010b70:	4904      	ldr	r1, [pc, #16]	@ (8010b84 <http_close_or_abort_conn+0x7c>)
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f004 f848 	bl	8014c08 <tcp_poll>
  }
  return err;
 8010b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	0801124b 	.word	0x0801124b

08010b88 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8010b92:	2200      	movs	r2, #0
 8010b94:	6839      	ldr	r1, [r7, #0]
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f7ff ffb6 	bl	8010b08 <http_close_or_abort_conn>
 8010b9c:	4603      	mov	r3, r0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8010bb0:	6839      	ldr	r1, [r7, #0]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff ffe8 	bl	8010b88 <http_close_conn>
  }
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	695b      	ldr	r3, [r3, #20]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d105      	bne.n	8010bde <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8010bd2:	6839      	ldr	r1, [r7, #0]
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f7ff ffe6 	bl	8010ba6 <http_eof>
    return 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	e016      	b.n	8010c0c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fec6 	bl	8010974 <fs_bytes_left>
 8010be8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	dc05      	bgt.n	8010bfc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010bf0:	6839      	ldr	r1, [r7, #0]
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7ff ffd7 	bl	8010ba6 <http_eof>
    return 0;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	e007      	b.n	8010c0c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8010bfc:	4b05      	ldr	r3, [pc, #20]	@ (8010c14 <http_check_eof+0x54>)
 8010bfe:	f240 429d 	movw	r2, #1181	@ 0x49d
 8010c02:	4905      	ldr	r1, [pc, #20]	@ (8010c18 <http_check_eof+0x58>)
 8010c04:	4805      	ldr	r0, [pc, #20]	@ (8010c1c <http_check_eof+0x5c>)
 8010c06:	f00c fc6f 	bl	801d4e8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8010c0a:	2301      	movs	r3, #1
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3710      	adds	r7, #16
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	080206d8 	.word	0x080206d8
 8010c18:	08020748 	.word	0x08020748
 8010c1c:	08020720 	.word	0x08020720

08010c20 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d803      	bhi.n	8010c42 <http_send_data_nonssi+0x22>
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	e001      	b.n	8010c46 <http_send_data_nonssi+0x26>
 8010c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c46:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	6999      	ldr	r1, [r3, #24]
 8010c4c:	f107 020c 	add.w	r2, r7, #12
 8010c50:	2300      	movs	r3, #0
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff feee 	bl	8010a34 <http_write>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8010c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10d      	bne.n	8010c80 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8010c64:	2301      	movs	r3, #1
 8010c66:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	699b      	ldr	r3, [r3, #24]
 8010c6c:	89ba      	ldrh	r2, [r7, #12]
 8010c6e:	441a      	add	r2, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c78:	89ba      	ldrh	r2, [r7, #12]
 8010c7a:	1a9a      	subs	r2, r3, r2
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010c8a:	b580      	push	{r7, lr}
 8010c8c:	b084      	sub	sp, #16
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
 8010c92:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8010c94:	2300      	movs	r3, #0
 8010c96:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d101      	bne.n	8010ca2 <http_send+0x18>
    return 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	e025      	b.n	8010cee <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d108      	bne.n	8010cbc <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8010caa:	6839      	ldr	r1, [r7, #0]
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff ff87 	bl	8010bc0 <http_check_eof>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d101      	bne.n	8010cbc <http_send+0x32>
      return 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	e018      	b.n	8010cee <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff ffae 	bl	8010c20 <http_send_data_nonssi>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10d      	bne.n	8010cec <http_send+0x62>
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	695b      	ldr	r3, [r3, #20]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff fe4d 	bl	8010974 <fs_bytes_left>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dc05      	bgt.n	8010cec <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010ce0:	6839      	ldr	r1, [r7, #0]
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff ff5f 	bl	8010ba6 <http_eof>
    return 0;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	e000      	b.n	8010cee <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
	...

08010cf8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	4a1c      	ldr	r2, [pc, #112]	@ (8010d78 <http_get_404_file+0x80>)
 8010d06:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4610      	mov	r0, r2
 8010d12:	f7ff fde7 	bl	80108e4 <fs_open>
 8010d16:	4603      	mov	r3, r0
 8010d18:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d024      	beq.n	8010d6c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	4a15      	ldr	r2, [pc, #84]	@ (8010d7c <http_get_404_file+0x84>)
 8010d26:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	4610      	mov	r0, r2
 8010d32:	f7ff fdd7 	bl	80108e4 <fs_open>
 8010d36:	4603      	mov	r3, r0
 8010d38:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d014      	beq.n	8010d6c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	4a0e      	ldr	r2, [pc, #56]	@ (8010d80 <http_get_404_file+0x88>)
 8010d46:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	4610      	mov	r0, r2
 8010d52:	f7ff fdc7 	bl	80108e4 <fs_open>
 8010d56:	4603      	mov	r3, r0
 8010d58:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8010d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d004      	beq.n	8010d6c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2200      	movs	r2, #0
 8010d66:	601a      	str	r2, [r3, #0]
        return NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	e000      	b.n	8010d6e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8010d6c:	687b      	ldr	r3, [r7, #4]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3710      	adds	r7, #16
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	bf00      	nop
 8010d78:	08020780 	.word	0x08020780
 8010d7c:	0802078c 	.word	0x0802078c
 8010d80:	08020798 	.word	0x08020798

08010d84 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08e      	sub	sp, #56	@ 0x38
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8010d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d106      	bne.n	8010da8 <http_parse_request+0x24>
 8010d9a:	4b65      	ldr	r3, [pc, #404]	@ (8010f30 <http_parse_request+0x1ac>)
 8010d9c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8010da0:	4964      	ldr	r1, [pc, #400]	@ (8010f34 <http_parse_request+0x1b0>)
 8010da2:	4865      	ldr	r0, [pc, #404]	@ (8010f38 <http_parse_request+0x1b4>)
 8010da4:	f00c fba0 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <http_parse_request+0x38>
 8010dae:	4b60      	ldr	r3, [pc, #384]	@ (8010f30 <http_parse_request+0x1ac>)
 8010db0:	f240 72af 	movw	r2, #1967	@ 0x7af
 8010db4:	4961      	ldr	r1, [pc, #388]	@ (8010f3c <http_parse_request+0x1b8>)
 8010db6:	4860      	ldr	r0, [pc, #384]	@ (8010f38 <http_parse_request+0x1b4>)
 8010db8:	f00c fb96 	bl	801d4e8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	695b      	ldr	r3, [r3, #20]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d103      	bne.n	8010dcc <http_parse_request+0x48>
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8010dcc:	f06f 0307 	mvn.w	r3, #7
 8010dd0:	e0a9      	b.n	8010f26 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	6a1b      	ldr	r3, [r3, #32]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d103      	bne.n	8010de2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dde:	621a      	str	r2, [r3, #32]
 8010de0:	e005      	b.n	8010dee <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	6a1b      	ldr	r3, [r3, #32]
 8010de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010de8:	4618      	mov	r0, r3
 8010dea:	f002 f88b 	bl	8012f04 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8010dee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010df0:	f002 f860 	bl	8012eb4 <pbuf_ref>

  if (hs->req->next != NULL) {
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d012      	beq.n	8010e24 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	6a1b      	ldr	r3, [r3, #32]
 8010e02:	891b      	ldrh	r3, [r3, #8]
 8010e04:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	bf28      	it	cs
 8010e0c:	4613      	movcs	r3, r2
 8010e0e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	6a18      	ldr	r0, [r3, #32]
 8010e14:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010e16:	2300      	movs	r3, #0
 8010e18:	4949      	ldr	r1, [pc, #292]	@ (8010f40 <http_parse_request+0x1bc>)
 8010e1a:	f002 f9ab 	bl	8013174 <pbuf_copy_partial>
    data = httpd_req_buf;
 8010e1e:	4b48      	ldr	r3, [pc, #288]	@ (8010f40 <http_parse_request+0x1bc>)
 8010e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e22:	e005      	b.n	8010e30 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8010e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2c:	895b      	ldrh	r3, [r3, #10]
 8010e2e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8010e30:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010e32:	2b06      	cmp	r3, #6
 8010e34:	d962      	bls.n	8010efc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8010e36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010e38:	461a      	mov	r2, r3
 8010e3a:	4942      	ldr	r1, [pc, #264]	@ (8010f44 <http_parse_request+0x1c0>)
 8010e3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010e3e:	f000 fb99 	bl	8011574 <lwip_strnstr>
 8010e42:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8010e44:	6a3b      	ldr	r3, [r7, #32]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d058      	beq.n	8010efc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8010e4e:	2204      	movs	r2, #4
 8010e50:	493d      	ldr	r1, [pc, #244]	@ (8010f48 <http_parse_request+0x1c4>)
 8010e52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010e54:	f00c fbfc 	bl	801d650 <strncmp>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d116      	bne.n	8010e8c <http_parse_request+0x108>
        sp1 = data + 3;
 8010e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e60:	3303      	adds	r3, #3
 8010e62:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	1c5a      	adds	r2, r3, #1
 8010e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	3301      	adds	r3, #1
 8010e78:	8b7a      	ldrh	r2, [r7, #26]
 8010e7a:	4934      	ldr	r1, [pc, #208]	@ (8010f4c <http_parse_request+0x1c8>)
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f000 fb79 	bl	8011574 <lwip_strnstr>
 8010e82:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8010e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d111      	bne.n	8010eae <http_parse_request+0x12a>
 8010e8a:	e006      	b.n	8010e9a <http_parse_request+0x116>
        data[4] = 0;
 8010e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e8e:	3304      	adds	r3, #4
 8010e90:	2200      	movs	r2, #0
 8010e92:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8010e94:	f06f 030f 	mvn.w	r3, #15
 8010e98:	e045      	b.n	8010f26 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	8b7a      	ldrh	r2, [r7, #26]
 8010ea0:	4928      	ldr	r1, [pc, #160]	@ (8010f44 <http_parse_request+0x1c0>)
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 fb66 	bl	8011574 <lwip_strnstr>
 8010ea8:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8010eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d01e      	beq.n	8010efc <http_parse_request+0x178>
 8010ebe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d91a      	bls.n	8010efc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8010ec6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4921      	ldr	r1, [pc, #132]	@ (8010f50 <http_parse_request+0x1cc>)
 8010ecc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010ece:	f000 fb51 	bl	8011574 <lwip_strnstr>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d011      	beq.n	8010efc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	3301      	adds	r3, #1
 8010edc:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8010ee4:	8b3b      	ldrh	r3, [r7, #24]
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	4413      	add	r3, r2
 8010eea:	2200      	movs	r2, #0
 8010eec:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8010eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ef0:	6979      	ldr	r1, [r7, #20]
 8010ef2:	68b8      	ldr	r0, [r7, #8]
 8010ef4:	f000 f82e 	bl	8010f54 <http_find_file>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	e014      	b.n	8010f26 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	6a1b      	ldr	r3, [r3, #32]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f001 ffbf 	bl	8012e84 <pbuf_clen>
 8010f06:	4603      	mov	r3, r0
 8010f08:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	6a1b      	ldr	r3, [r3, #32]
 8010f0e:	891b      	ldrh	r3, [r3, #8]
 8010f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010f14:	d205      	bcs.n	8010f22 <http_parse_request+0x19e>
 8010f16:	8a7b      	ldrh	r3, [r7, #18]
 8010f18:	2b05      	cmp	r3, #5
 8010f1a:	d802      	bhi.n	8010f22 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8010f1c:	f06f 0304 	mvn.w	r3, #4
 8010f20:	e001      	b.n	8010f26 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8010f22:	f06f 030f 	mvn.w	r3, #15
  }
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3738      	adds	r7, #56	@ 0x38
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	080206d8 	.word	0x080206d8
 8010f34:	080207a4 	.word	0x080207a4
 8010f38:	08020720 	.word	0x08020720
 8010f3c:	080207b0 	.word	0x080207b0
 8010f40:	2000b800 	.word	0x2000b800
 8010f44:	080207bc 	.word	0x080207bc
 8010f48:	080207c0 	.word	0x080207c0
 8010f4c:	080207c8 	.word	0x080207c8
 8010f50:	080207cc 	.word	0x080207cc

08010f54 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b092      	sub	sp, #72	@ 0x48
 8010f58:	af02      	add	r7, sp, #8
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8010f60:	2300      	movs	r3, #0
 8010f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8010f64:	2300      	movs	r3, #0
 8010f66:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ef f9ad 	bl	80002d0 <strlen>
 8010f76:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d06b      	beq.n	8011056 <http_find_file+0x102>
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f82:	3b01      	subs	r3, #1
 8010f84:	4413      	add	r3, r2
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f8a:	d164      	bne.n	8011056 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010f8c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010f8e:	4a53      	ldr	r2, [pc, #332]	@ (80110dc <http_find_file+0x188>)
 8010f90:	4293      	cmp	r3, r2
 8010f92:	d102      	bne.n	8010f9a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d15d      	bne.n	8011056 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8010f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9c:	3b01      	subs	r3, #1
 8010f9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010fa0:	bf28      	it	cs
 8010fa2:	233f      	movcs	r3, #63	@ 0x3f
 8010fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00a      	beq.n	8010fc2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	484a      	ldr	r0, [pc, #296]	@ (80110dc <http_find_file+0x188>)
 8010fb4:	f00c fc25 	bl	801d802 <memcpy>
      http_uri_buf[copy_len] = 0;
 8010fb8:	4a48      	ldr	r2, [pc, #288]	@ (80110dc <http_find_file+0x188>)
 8010fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbc:	4413      	add	r3, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fc6:	e043      	b.n	8011050 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d028      	beq.n	8011020 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8010fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd0:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8010fd4:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8010fd6:	6a3b      	ldr	r3, [r7, #32]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d01e      	beq.n	801101a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8010fdc:	4a40      	ldr	r2, [pc, #256]	@ (80110e0 <http_find_file+0x18c>)
 8010fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7ef f973 	bl	80002d0 <strlen>
 8010fea:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8010fec:	69fa      	ldr	r2, [r7, #28]
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	4293      	cmp	r3, r2
 8010ff2:	bf28      	it	cs
 8010ff4:	4613      	movcs	r3, r2
 8010ff6:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffa:	4a38      	ldr	r2, [pc, #224]	@ (80110dc <http_find_file+0x188>)
 8010ffc:	1898      	adds	r0, r3, r2
 8010ffe:	4a38      	ldr	r2, [pc, #224]	@ (80110e0 <http_find_file+0x18c>)
 8011000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011002:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011006:	69ba      	ldr	r2, [r7, #24]
 8011008:	4619      	mov	r1, r3
 801100a:	f00c fbfa 	bl	801d802 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	4413      	add	r3, r2
 8011014:	4a31      	ldr	r2, [pc, #196]	@ (80110dc <http_find_file+0x188>)
 8011016:	2100      	movs	r1, #0
 8011018:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 801101a:	4b30      	ldr	r3, [pc, #192]	@ (80110dc <http_find_file+0x188>)
 801101c:	633b      	str	r3, [r7, #48]	@ 0x30
 801101e:	e004      	b.n	801102a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8011020:	4a2f      	ldr	r2, [pc, #188]	@ (80110e0 <http_find_file+0x18c>)
 8011022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011028:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801102e:	4618      	mov	r0, r3
 8011030:	f7ff fc58 	bl	80108e4 <fs_open>
 8011034:	4603      	mov	r3, r0
 8011036:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8011038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d104      	bne.n	801104a <http_find_file+0xf6>
        uri = file_name;
 8011040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011042:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8011048:	e005      	b.n	8011056 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801104a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801104c:	3301      	adds	r3, #1
 801104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011052:	2b04      	cmp	r3, #4
 8011054:	d9b8      	bls.n	8010fc8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8011056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011058:	2b00      	cmp	r3, #0
 801105a:	d124      	bne.n	80110a6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	213f      	movs	r1, #63	@ 0x3f
 8011060:	4618      	mov	r0, r3
 8011062:	f00c fae8 	bl	801d636 <strchr>
 8011066:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8011068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801106a:	2b00      	cmp	r3, #0
 801106c:	d005      	beq.n	801107a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 801106e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011070:	2200      	movs	r2, #0
 8011072:	701a      	strb	r2, [r3, #0]
      params++;
 8011074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011076:	3301      	adds	r3, #1
 8011078:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	4611      	mov	r1, r2
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff fc2f 	bl	80108e4 <fs_open>
 8011086:	4603      	mov	r3, r0
 8011088:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 801108a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d102      	bne.n	8011098 <http_find_file+0x144>
      file = &hs->file_handle;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011096:	e006      	b.n	80110a6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8011098:	f107 0308 	add.w	r3, r7, #8
 801109c:	4619      	mov	r1, r3
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f7ff fe2a 	bl	8010cf8 <http_get_404_file>
 80110a4:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d106      	bne.n	80110ba <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80110ac:	f107 0308 	add.w	r3, r7, #8
 80110b0:	4619      	mov	r1, r3
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f7ff fe20 	bl	8010cf8 <http_get_404_file>
 80110b8:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110be:	9301      	str	r3, [sp, #4]
 80110c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	4613      	mov	r3, r2
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f000 f809 	bl	80110e4 <http_init_file>
 80110d2:	4603      	mov	r3, r0
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3740      	adds	r7, #64	@ 0x40
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	2000bc00 	.word	0x2000bc00
 80110e0:	08024944 	.word	0x08024944

080110e4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	60f8      	str	r0, [r7, #12]
 80110ec:	60b9      	str	r1, [r7, #8]
 80110ee:	607a      	str	r2, [r7, #4]
 80110f0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d05c      	beq.n	80111b2 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d106      	bne.n	801110e <http_init_file+0x2a>
 8011100:	4b35      	ldr	r3, [pc, #212]	@ (80111d8 <http_init_file+0xf4>)
 8011102:	f640 120b 	movw	r2, #2315	@ 0x90b
 8011106:	4935      	ldr	r1, [pc, #212]	@ (80111dc <http_init_file+0xf8>)
 8011108:	4835      	ldr	r0, [pc, #212]	@ (80111e0 <http_init_file+0xfc>)
 801110a:	f00c f9ed 	bl	801d4e8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	68ba      	ldr	r2, [r7, #8]
 8011112:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	da06      	bge.n	8011132 <http_init_file+0x4e>
 8011124:	4b2c      	ldr	r3, [pc, #176]	@ (80111d8 <http_init_file+0xf4>)
 8011126:	f640 1234 	movw	r2, #2356	@ 0x934
 801112a:	492e      	ldr	r1, [pc, #184]	@ (80111e4 <http_init_file+0x100>)
 801112c:	482c      	ldr	r0, [pc, #176]	@ (80111e0 <http_init_file+0xfc>)
 801112e:	f00c f9db 	bl	801d4e8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	461a      	mov	r2, r3
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2200      	movs	r2, #0
 8011140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	7c1b      	ldrb	r3, [r3, #16]
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	d106      	bne.n	8011160 <http_init_file+0x7c>
 8011152:	4b21      	ldr	r3, [pc, #132]	@ (80111d8 <http_init_file+0xf4>)
 8011154:	f640 1243 	movw	r2, #2371	@ 0x943
 8011158:	4923      	ldr	r1, [pc, #140]	@ (80111e8 <http_init_file+0x104>)
 801115a:	4821      	ldr	r0, [pc, #132]	@ (80111e0 <http_init_file+0xfc>)
 801115c:	f00c f9c4 	bl	801d4e8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d032      	beq.n	80111cc <http_init_file+0xe8>
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	695b      	ldr	r3, [r3, #20]
 801116a:	7c1b      	ldrb	r3, [r3, #16]
 801116c:	f003 0301 	and.w	r3, r3, #1
 8011170:	2b00      	cmp	r3, #0
 8011172:	d02b      	beq.n	80111cc <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6998      	ldr	r0, [r3, #24]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801117c:	461a      	mov	r2, r3
 801117e:	491b      	ldr	r1, [pc, #108]	@ (80111ec <http_init_file+0x108>)
 8011180:	f000 f9f8 	bl	8011574 <lwip_strnstr>
 8011184:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d01f      	beq.n	80111cc <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	1d1a      	adds	r2, r3, #4
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	699a      	ldr	r2, [r3, #24]
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	441a      	add	r2, r3
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	1ad2      	subs	r2, r2, r3
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80111b0:	e00c      	b.n	80111cc <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2200      	movs	r2, #0
 80111b6:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2200      	movs	r2, #0
 80111bc:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2200      	movs	r2, #0
 80111c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	080206d8 	.word	0x080206d8
 80111dc:	080207d4 	.word	0x080207d4
 80111e0:	08020720 	.word	0x08020720
 80111e4:	080207e8 	.word	0x080207e8
 80111e8:	08020808 	.word	0x08020808
 80111ec:	080207cc 	.word	0x080207cc

080111f0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <http_err+0x1c>
    http_state_free(hs);
 8011206:	68f8      	ldr	r0, [r7, #12]
 8011208:	f7ff fc02 	bl	8010a10 <http_state_free>
  }
}
 801120c:	bf00      	nop
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b086      	sub	sp, #24
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	4613      	mov	r3, r2
 8011220:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <http_sent+0x1c>
    return ERR_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	e008      	b.n	8011242 <http_sent+0x2e>
  }

  hs->retries = 0;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8011238:	6979      	ldr	r1, [r7, #20]
 801123a:	68b8      	ldr	r0, [r7, #8]
 801123c:	f7ff fd25 	bl	8010c8a <http_send>

  return ERR_OK;
 8011240:	2300      	movs	r3, #0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3718      	adds	r7, #24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}

0801124a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 801124a:	b580      	push	{r7, lr}
 801124c:	b084      	sub	sp, #16
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
 8011252:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d107      	bne.n	801126e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 801125e:	2100      	movs	r1, #0
 8011260:	6838      	ldr	r0, [r7, #0]
 8011262:	f7ff fc91 	bl	8010b88 <http_close_conn>
 8011266:	4603      	mov	r3, r0
 8011268:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	e021      	b.n	80112b2 <http_poll+0x68>
  } else {
    hs->retries++;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011274:	3301      	adds	r3, #1
 8011276:	b2da      	uxtb	r2, r3
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011284:	2b04      	cmp	r3, #4
 8011286:	d105      	bne.n	8011294 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8011288:	68f9      	ldr	r1, [r7, #12]
 801128a:	6838      	ldr	r0, [r7, #0]
 801128c:	f7ff fc7c 	bl	8010b88 <http_close_conn>
      return ERR_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	e00e      	b.n	80112b2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	695b      	ldr	r3, [r3, #20]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d009      	beq.n	80112b0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 801129c:	68f9      	ldr	r1, [r7, #12]
 801129e:	6838      	ldr	r0, [r7, #0]
 80112a0:	f7ff fcf3 	bl	8010c8a <http_send>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d002      	beq.n	80112b0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80112aa:	6838      	ldr	r0, [r7, #0]
 80112ac:	f007 f942 	bl	8018534 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
	...

080112bc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80112ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d105      	bne.n	80112e2 <http_recv+0x26>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <http_recv+0x26>
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d111      	bne.n	8011306 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d008      	beq.n	80112fa <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	891b      	ldrh	r3, [r3, #8]
 80112ec:	4619      	mov	r1, r3
 80112ee:	68b8      	ldr	r0, [r7, #8]
 80112f0:	f002 fd14 	bl	8013d1c <tcp_recved>
      pbuf_free(p);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f001 fd37 	bl	8012d68 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80112fa:	6979      	ldr	r1, [r7, #20]
 80112fc:	68b8      	ldr	r0, [r7, #8]
 80112fe:	f7ff fc43 	bl	8010b88 <http_close_conn>
    return ERR_OK;
 8011302:	2300      	movs	r3, #0
 8011304:	e055      	b.n	80113b2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	891b      	ldrh	r3, [r3, #8]
 801130a:	4619      	mov	r1, r3
 801130c:	68b8      	ldr	r0, [r7, #8]
 801130e:	f002 fd05 	bl	8013d1c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	695b      	ldr	r3, [r3, #20]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d147      	bne.n	80113aa <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 801131a:	68ba      	ldr	r2, [r7, #8]
 801131c:	6979      	ldr	r1, [r7, #20]
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff fd30 	bl	8010d84 <http_parse_request>
 8011324:	4603      	mov	r3, r0
 8011326:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8011328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d015      	beq.n	801135c <http_recv+0xa0>
 8011330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011334:	f113 0f05 	cmn.w	r3, #5
 8011338:	d010      	beq.n	801135c <http_recv+0xa0>
 801133a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801133e:	f113 0f10 	cmn.w	r3, #16
 8011342:	d00b      	beq.n	801135c <http_recv+0xa0>
 8011344:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011348:	f113 0f08 	cmn.w	r3, #8
 801134c:	d006      	beq.n	801135c <http_recv+0xa0>
 801134e:	4b1b      	ldr	r3, [pc, #108]	@ (80113bc <http_recv+0x100>)
 8011350:	f640 2204 	movw	r2, #2564	@ 0xa04
 8011354:	491a      	ldr	r1, [pc, #104]	@ (80113c0 <http_recv+0x104>)
 8011356:	481b      	ldr	r0, [pc, #108]	@ (80113c4 <http_recv+0x108>)
 8011358:	f00c f8c6 	bl	801d4e8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 801135c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011360:	f113 0f05 	cmn.w	r3, #5
 8011364:	d00b      	beq.n	801137e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	6a1b      	ldr	r3, [r3, #32]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d007      	beq.n	801137e <http_recv+0xc2>
          pbuf_free(hs->req);
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	6a1b      	ldr	r3, [r3, #32]
 8011372:	4618      	mov	r0, r3
 8011374:	f001 fcf8 	bl	8012d68 <pbuf_free>
          hs->req = NULL;
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	2200      	movs	r2, #0
 801137c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f001 fcf2 	bl	8012d68 <pbuf_free>
      if (parsed == ERR_OK) {
 8011384:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d104      	bne.n	8011396 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 801138c:	6979      	ldr	r1, [r7, #20]
 801138e:	68b8      	ldr	r0, [r7, #8]
 8011390:	f7ff fc7b 	bl	8010c8a <http_send>
 8011394:	e00c      	b.n	80113b0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8011396:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801139a:	f113 0f10 	cmn.w	r3, #16
 801139e:	d107      	bne.n	80113b0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80113a0:	6979      	ldr	r1, [r7, #20]
 80113a2:	68b8      	ldr	r0, [r7, #8]
 80113a4:	f7ff fbf0 	bl	8010b88 <http_close_conn>
 80113a8:	e002      	b.n	80113b0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f001 fcdc 	bl	8012d68 <pbuf_free>
    }
  }
  return ERR_OK;
 80113b0:	2300      	movs	r3, #0
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	080206d8 	.word	0x080206d8
 80113c0:	08020834 	.word	0x08020834
 80113c4:	08020720 	.word	0x08020720

080113c8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	4613      	mov	r3, r2
 80113d4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80113d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d102      	bne.n	80113e4 <http_accept+0x1c>
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d102      	bne.n	80113ea <http_accept+0x22>
    return ERR_VAL;
 80113e4:	f06f 0305 	mvn.w	r3, #5
 80113e8:	e025      	b.n	8011436 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80113ea:	2101      	movs	r1, #1
 80113ec:	68b8      	ldr	r0, [r7, #8]
 80113ee:	f003 f97b 	bl	80146e8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80113f2:	f7ff fadb 	bl	80109ac <http_state_alloc>
 80113f6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d102      	bne.n	8011404 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011402:	e018      	b.n	8011436 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801140a:	6979      	ldr	r1, [r7, #20]
 801140c:	68b8      	ldr	r0, [r7, #8]
 801140e:	f003 fb6b 	bl	8014ae8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8011412:	490b      	ldr	r1, [pc, #44]	@ (8011440 <http_accept+0x78>)
 8011414:	68b8      	ldr	r0, [r7, #8]
 8011416:	f003 fb79 	bl	8014b0c <tcp_recv>
  altcp_err(pcb, http_err);
 801141a:	490a      	ldr	r1, [pc, #40]	@ (8011444 <http_accept+0x7c>)
 801141c:	68b8      	ldr	r0, [r7, #8]
 801141e:	f003 fbb9 	bl	8014b94 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8011422:	2204      	movs	r2, #4
 8011424:	4908      	ldr	r1, [pc, #32]	@ (8011448 <http_accept+0x80>)
 8011426:	68b8      	ldr	r0, [r7, #8]
 8011428:	f003 fbee 	bl	8014c08 <tcp_poll>
  altcp_sent(pcb, http_sent);
 801142c:	4907      	ldr	r1, [pc, #28]	@ (801144c <http_accept+0x84>)
 801142e:	68b8      	ldr	r0, [r7, #8]
 8011430:	f003 fb8e 	bl	8014b50 <tcp_sent>

  return ERR_OK;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3718      	adds	r7, #24
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	080112bd 	.word	0x080112bd
 8011444:	080111f1 	.word	0x080111f1
 8011448:	0801124b 	.word	0x0801124b
 801144c:	08011215 	.word	0x08011215

08011450 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d029      	beq.n	80114b6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8011462:	2101      	movs	r1, #1
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f003 f93f 	bl	80146e8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801146a:	887b      	ldrh	r3, [r7, #2]
 801146c:	461a      	mov	r2, r3
 801146e:	4914      	ldr	r1, [pc, #80]	@ (80114c0 <httpd_init_pcb+0x70>)
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f002 fa85 	bl	8013980 <tcp_bind>
 8011476:	4603      	mov	r3, r0
 8011478:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d006      	beq.n	8011490 <httpd_init_pcb+0x40>
 8011482:	4b10      	ldr	r3, [pc, #64]	@ (80114c4 <httpd_init_pcb+0x74>)
 8011484:	f640 2257 	movw	r2, #2647	@ 0xa57
 8011488:	490f      	ldr	r1, [pc, #60]	@ (80114c8 <httpd_init_pcb+0x78>)
 801148a:	4810      	ldr	r0, [pc, #64]	@ (80114cc <httpd_init_pcb+0x7c>)
 801148c:	f00c f82c 	bl	801d4e8 <iprintf>
    pcb = altcp_listen(pcb);
 8011490:	21ff      	movs	r1, #255	@ 0xff
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f002 fb2c 	bl	8013af0 <tcp_listen_with_backlog>
 8011498:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d106      	bne.n	80114ae <httpd_init_pcb+0x5e>
 80114a0:	4b08      	ldr	r3, [pc, #32]	@ (80114c4 <httpd_init_pcb+0x74>)
 80114a2:	f640 2259 	movw	r2, #2649	@ 0xa59
 80114a6:	490a      	ldr	r1, [pc, #40]	@ (80114d0 <httpd_init_pcb+0x80>)
 80114a8:	4808      	ldr	r0, [pc, #32]	@ (80114cc <httpd_init_pcb+0x7c>)
 80114aa:	f00c f81d 	bl	801d4e8 <iprintf>
    altcp_accept(pcb, http_accept);
 80114ae:	4909      	ldr	r1, [pc, #36]	@ (80114d4 <httpd_init_pcb+0x84>)
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f003 fb91 	bl	8014bd8 <tcp_accept>
  }
}
 80114b6:	bf00      	nop
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08024a7c 	.word	0x08024a7c
 80114c4:	080206d8 	.word	0x080206d8
 80114c8:	08020860 	.word	0x08020860
 80114cc:	08020720 	.word	0x08020720
 80114d0:	0802087c 	.word	0x0802087c
 80114d4:	080113c9 	.word	0x080113c9

080114d8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80114de:	202e      	movs	r0, #46	@ 0x2e
 80114e0:	f003 faf4 	bl	8014acc <tcp_new_ip_type>
 80114e4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d106      	bne.n	80114fa <httpd_init+0x22>
 80114ec:	4b07      	ldr	r3, [pc, #28]	@ (801150c <httpd_init+0x34>)
 80114ee:	f640 2272 	movw	r2, #2674	@ 0xa72
 80114f2:	4907      	ldr	r1, [pc, #28]	@ (8011510 <httpd_init+0x38>)
 80114f4:	4807      	ldr	r0, [pc, #28]	@ (8011514 <httpd_init+0x3c>)
 80114f6:	f00b fff7 	bl	801d4e8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80114fa:	2150      	movs	r1, #80	@ 0x50
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff ffa7 	bl	8011450 <httpd_init_pcb>
}
 8011502:	bf00      	nop
 8011504:	3708      	adds	r7, #8
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	080206d8 	.word	0x080206d8
 8011510:	0802089c 	.word	0x0802089c
 8011514:	08020720 	.word	0x08020720

08011518 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	4603      	mov	r3, r0
 8011520:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011522:	88fb      	ldrh	r3, [r7, #6]
 8011524:	021b      	lsls	r3, r3, #8
 8011526:	b21a      	sxth	r2, r3
 8011528:	88fb      	ldrh	r3, [r7, #6]
 801152a:	0a1b      	lsrs	r3, r3, #8
 801152c:	b29b      	uxth	r3, r3
 801152e:	b21b      	sxth	r3, r3
 8011530:	4313      	orrs	r3, r2
 8011532:	b21b      	sxth	r3, r3
 8011534:	b29b      	uxth	r3, r3
}
 8011536:	4618      	mov	r0, r3
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr

08011542 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011542:	b480      	push	{r7}
 8011544:	b083      	sub	sp, #12
 8011546:	af00      	add	r7, sp, #0
 8011548:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	061a      	lsls	r2, r3, #24
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	021b      	lsls	r3, r3, #8
 8011552:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011556:	431a      	orrs	r2, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	0a1b      	lsrs	r3, r3, #8
 801155c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011560:	431a      	orrs	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	0e1b      	lsrs	r3, r3, #24
 8011566:	4313      	orrs	r3, r2
}
 8011568:	4618      	mov	r0, r3
 801156a:	370c      	adds	r7, #12
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b086      	sub	sp, #24
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8011580:	68b8      	ldr	r0, [r7, #8]
 8011582:	f7ee fea5 	bl	80002d0 <strlen>
 8011586:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	e022      	b.n	80115d8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	617b      	str	r3, [r7, #20]
 8011596:	e012      	b.n	80115be <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	781a      	ldrb	r2, [r3, #0]
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d109      	bne.n	80115b8 <lwip_strnstr+0x44>
 80115a4:	693a      	ldr	r2, [r7, #16]
 80115a6:	68b9      	ldr	r1, [r7, #8]
 80115a8:	6978      	ldr	r0, [r7, #20]
 80115aa:	f00c f851 	bl	801d650 <strncmp>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d101      	bne.n	80115b8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	e00f      	b.n	80115d8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	3301      	adds	r3, #1
 80115bc:	617b      	str	r3, [r7, #20]
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <lwip_strnstr+0x62>
 80115c6:	697a      	ldr	r2, [r7, #20]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	441a      	add	r2, r3
 80115cc:	68f9      	ldr	r1, [r7, #12]
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	440b      	add	r3, r1
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d9e0      	bls.n	8011598 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80115d6:	2300      	movs	r3, #0
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3718      	adds	r7, #24
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80115ea:	f00b f99b 	bl	801c924 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80115ee:	f000 f8d5 	bl	801179c <mem_init>
  memp_init();
 80115f2:	f000 fc31 	bl	8011e58 <memp_init>
  pbuf_init();
  netif_init();
 80115f6:	f000 fd3d 	bl	8012074 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80115fa:	f008 f88b 	bl	8019714 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80115fe:	f001 fe5d 	bl	80132bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011602:	f007 ffcd 	bl	80195a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
	...

08011610 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011610:	b480      	push	{r7}
 8011612:	b083      	sub	sp, #12
 8011614:	af00      	add	r7, sp, #0
 8011616:	4603      	mov	r3, r0
 8011618:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801161a:	4b05      	ldr	r3, [pc, #20]	@ (8011630 <ptr_to_mem+0x20>)
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	88fb      	ldrh	r3, [r7, #6]
 8011620:	4413      	add	r3, r2
}
 8011622:	4618      	mov	r0, r3
 8011624:	370c      	adds	r7, #12
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	2000c2ac 	.word	0x2000c2ac

08011634 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801163c:	4b05      	ldr	r3, [pc, #20]	@ (8011654 <mem_to_ptr+0x20>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	b29b      	uxth	r3, r3
}
 8011646:	4618      	mov	r0, r3
 8011648:	370c      	adds	r7, #12
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	2000c2ac 	.word	0x2000c2ac

08011658 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011658:	b590      	push	{r4, r7, lr}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011660:	4b45      	ldr	r3, [pc, #276]	@ (8011778 <plug_holes+0x120>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	687a      	ldr	r2, [r7, #4]
 8011666:	429a      	cmp	r2, r3
 8011668:	d206      	bcs.n	8011678 <plug_holes+0x20>
 801166a:	4b44      	ldr	r3, [pc, #272]	@ (801177c <plug_holes+0x124>)
 801166c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011670:	4943      	ldr	r1, [pc, #268]	@ (8011780 <plug_holes+0x128>)
 8011672:	4844      	ldr	r0, [pc, #272]	@ (8011784 <plug_holes+0x12c>)
 8011674:	f00b ff38 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011678:	4b43      	ldr	r3, [pc, #268]	@ (8011788 <plug_holes+0x130>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	429a      	cmp	r2, r3
 8011680:	d306      	bcc.n	8011690 <plug_holes+0x38>
 8011682:	4b3e      	ldr	r3, [pc, #248]	@ (801177c <plug_holes+0x124>)
 8011684:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011688:	4940      	ldr	r1, [pc, #256]	@ (801178c <plug_holes+0x134>)
 801168a:	483e      	ldr	r0, [pc, #248]	@ (8011784 <plug_holes+0x12c>)
 801168c:	f00b ff2c 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	791b      	ldrb	r3, [r3, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d006      	beq.n	80116a6 <plug_holes+0x4e>
 8011698:	4b38      	ldr	r3, [pc, #224]	@ (801177c <plug_holes+0x124>)
 801169a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801169e:	493c      	ldr	r1, [pc, #240]	@ (8011790 <plug_holes+0x138>)
 80116a0:	4838      	ldr	r0, [pc, #224]	@ (8011784 <plug_holes+0x12c>)
 80116a2:	f00b ff21 	bl	801d4e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	881b      	ldrh	r3, [r3, #0]
 80116aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80116ae:	d906      	bls.n	80116be <plug_holes+0x66>
 80116b0:	4b32      	ldr	r3, [pc, #200]	@ (801177c <plug_holes+0x124>)
 80116b2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80116b6:	4937      	ldr	r1, [pc, #220]	@ (8011794 <plug_holes+0x13c>)
 80116b8:	4832      	ldr	r0, [pc, #200]	@ (8011784 <plug_holes+0x12c>)
 80116ba:	f00b ff15 	bl	801d4e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7ff ffa4 	bl	8011610 <ptr_to_mem>
 80116c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d024      	beq.n	801171c <plug_holes+0xc4>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	791b      	ldrb	r3, [r3, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d120      	bne.n	801171c <plug_holes+0xc4>
 80116da:	4b2b      	ldr	r3, [pc, #172]	@ (8011788 <plug_holes+0x130>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d01b      	beq.n	801171c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80116e4:	4b2c      	ldr	r3, [pc, #176]	@ (8011798 <plug_holes+0x140>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d102      	bne.n	80116f4 <plug_holes+0x9c>
      lfree = mem;
 80116ee:	4a2a      	ldr	r2, [pc, #168]	@ (8011798 <plug_holes+0x140>)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	881a      	ldrh	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011704:	d00a      	beq.n	801171c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	881b      	ldrh	r3, [r3, #0]
 801170a:	4618      	mov	r0, r3
 801170c:	f7ff ff80 	bl	8011610 <ptr_to_mem>
 8011710:	4604      	mov	r4, r0
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7ff ff8e 	bl	8011634 <mem_to_ptr>
 8011718:	4603      	mov	r3, r0
 801171a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	885b      	ldrh	r3, [r3, #2]
 8011720:	4618      	mov	r0, r3
 8011722:	f7ff ff75 	bl	8011610 <ptr_to_mem>
 8011726:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d01f      	beq.n	8011770 <plug_holes+0x118>
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	791b      	ldrb	r3, [r3, #4]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d11b      	bne.n	8011770 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011738:	4b17      	ldr	r3, [pc, #92]	@ (8011798 <plug_holes+0x140>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	429a      	cmp	r2, r3
 8011740:	d102      	bne.n	8011748 <plug_holes+0xf0>
      lfree = pmem;
 8011742:	4a15      	ldr	r2, [pc, #84]	@ (8011798 <plug_holes+0x140>)
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	881a      	ldrh	r2, [r3, #0]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011758:	d00a      	beq.n	8011770 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff ff56 	bl	8011610 <ptr_to_mem>
 8011764:	4604      	mov	r4, r0
 8011766:	68b8      	ldr	r0, [r7, #8]
 8011768:	f7ff ff64 	bl	8011634 <mem_to_ptr>
 801176c:	4603      	mov	r3, r0
 801176e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011770:	bf00      	nop
 8011772:	3714      	adds	r7, #20
 8011774:	46bd      	mov	sp, r7
 8011776:	bd90      	pop	{r4, r7, pc}
 8011778:	2000c2ac 	.word	0x2000c2ac
 801177c:	080208b8 	.word	0x080208b8
 8011780:	080208e8 	.word	0x080208e8
 8011784:	08020900 	.word	0x08020900
 8011788:	2000c2b0 	.word	0x2000c2b0
 801178c:	08020928 	.word	0x08020928
 8011790:	08020944 	.word	0x08020944
 8011794:	08020960 	.word	0x08020960
 8011798:	2000c2b8 	.word	0x2000c2b8

0801179c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80117a2:	4b1f      	ldr	r3, [pc, #124]	@ (8011820 <mem_init+0x84>)
 80117a4:	3303      	adds	r3, #3
 80117a6:	f023 0303 	bic.w	r3, r3, #3
 80117aa:	461a      	mov	r2, r3
 80117ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011824 <mem_init+0x88>)
 80117ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80117b0:	4b1c      	ldr	r3, [pc, #112]	@ (8011824 <mem_init+0x88>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80117bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2200      	movs	r2, #0
 80117c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80117ca:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80117ce:	f7ff ff1f 	bl	8011610 <ptr_to_mem>
 80117d2:	4603      	mov	r3, r0
 80117d4:	4a14      	ldr	r2, [pc, #80]	@ (8011828 <mem_init+0x8c>)
 80117d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80117d8:	4b13      	ldr	r3, [pc, #76]	@ (8011828 <mem_init+0x8c>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2201      	movs	r2, #1
 80117de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80117e0:	4b11      	ldr	r3, [pc, #68]	@ (8011828 <mem_init+0x8c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80117e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80117ea:	4b0f      	ldr	r3, [pc, #60]	@ (8011828 <mem_init+0x8c>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80117f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80117f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011824 <mem_init+0x88>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4a0c      	ldr	r2, [pc, #48]	@ (801182c <mem_init+0x90>)
 80117fa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80117fc:	480c      	ldr	r0, [pc, #48]	@ (8011830 <mem_init+0x94>)
 80117fe:	f00b f89f 	bl	801c940 <sys_mutex_new>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d006      	beq.n	8011816 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011808:	4b0a      	ldr	r3, [pc, #40]	@ (8011834 <mem_init+0x98>)
 801180a:	f240 221f 	movw	r2, #543	@ 0x21f
 801180e:	490a      	ldr	r1, [pc, #40]	@ (8011838 <mem_init+0x9c>)
 8011810:	480a      	ldr	r0, [pc, #40]	@ (801183c <mem_init+0xa0>)
 8011812:	f00b fe69 	bl	801d4e8 <iprintf>
  }
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	2000bc58 	.word	0x2000bc58
 8011824:	2000c2ac 	.word	0x2000c2ac
 8011828:	2000c2b0 	.word	0x2000c2b0
 801182c:	2000c2b8 	.word	0x2000c2b8
 8011830:	2000c2b4 	.word	0x2000c2b4
 8011834:	080208b8 	.word	0x080208b8
 8011838:	0802098c 	.word	0x0802098c
 801183c:	08020900 	.word	0x08020900

08011840 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b086      	sub	sp, #24
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff fef3 	bl	8011634 <mem_to_ptr>
 801184e:	4603      	mov	r3, r0
 8011850:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	4618      	mov	r0, r3
 8011858:	f7ff feda 	bl	8011610 <ptr_to_mem>
 801185c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	885b      	ldrh	r3, [r3, #2]
 8011862:	4618      	mov	r0, r3
 8011864:	f7ff fed4 	bl	8011610 <ptr_to_mem>
 8011868:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011872:	d818      	bhi.n	80118a6 <mem_link_valid+0x66>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	885b      	ldrh	r3, [r3, #2]
 8011878:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801187c:	d813      	bhi.n	80118a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011882:	8afa      	ldrh	r2, [r7, #22]
 8011884:	429a      	cmp	r2, r3
 8011886:	d004      	beq.n	8011892 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	8afa      	ldrh	r2, [r7, #22]
 801188e:	429a      	cmp	r2, r3
 8011890:	d109      	bne.n	80118a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011892:	4b08      	ldr	r3, [pc, #32]	@ (80118b4 <mem_link_valid+0x74>)
 8011894:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011896:	693a      	ldr	r2, [r7, #16]
 8011898:	429a      	cmp	r2, r3
 801189a:	d006      	beq.n	80118aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	885b      	ldrh	r3, [r3, #2]
 80118a0:	8afa      	ldrh	r2, [r7, #22]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d001      	beq.n	80118aa <mem_link_valid+0x6a>
    return 0;
 80118a6:	2300      	movs	r3, #0
 80118a8:	e000      	b.n	80118ac <mem_link_valid+0x6c>
  }
  return 1;
 80118aa:	2301      	movs	r3, #1
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3718      	adds	r7, #24
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	2000c2b0 	.word	0x2000c2b0

080118b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b088      	sub	sp, #32
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d070      	beq.n	80119a8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f003 0303 	and.w	r3, r3, #3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d00d      	beq.n	80118ec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80118d0:	4b37      	ldr	r3, [pc, #220]	@ (80119b0 <mem_free+0xf8>)
 80118d2:	f240 2273 	movw	r2, #627	@ 0x273
 80118d6:	4937      	ldr	r1, [pc, #220]	@ (80119b4 <mem_free+0xfc>)
 80118d8:	4837      	ldr	r0, [pc, #220]	@ (80119b8 <mem_free+0x100>)
 80118da:	f00b fe05 	bl	801d4e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118de:	f00b f88d 	bl	801c9fc <sys_arch_protect>
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f00b f897 	bl	801ca18 <sys_arch_unprotect>
    return;
 80118ea:	e05e      	b.n	80119aa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3b08      	subs	r3, #8
 80118f0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80118f2:	4b32      	ldr	r3, [pc, #200]	@ (80119bc <mem_free+0x104>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	69fa      	ldr	r2, [r7, #28]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d306      	bcc.n	801190a <mem_free+0x52>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f103 020c 	add.w	r2, r3, #12
 8011902:	4b2f      	ldr	r3, [pc, #188]	@ (80119c0 <mem_free+0x108>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	429a      	cmp	r2, r3
 8011908:	d90d      	bls.n	8011926 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801190a:	4b29      	ldr	r3, [pc, #164]	@ (80119b0 <mem_free+0xf8>)
 801190c:	f240 227f 	movw	r2, #639	@ 0x27f
 8011910:	492c      	ldr	r1, [pc, #176]	@ (80119c4 <mem_free+0x10c>)
 8011912:	4829      	ldr	r0, [pc, #164]	@ (80119b8 <mem_free+0x100>)
 8011914:	f00b fde8 	bl	801d4e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011918:	f00b f870 	bl	801c9fc <sys_arch_protect>
 801191c:	6138      	str	r0, [r7, #16]
 801191e:	6938      	ldr	r0, [r7, #16]
 8011920:	f00b f87a 	bl	801ca18 <sys_arch_unprotect>
    return;
 8011924:	e041      	b.n	80119aa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011926:	4828      	ldr	r0, [pc, #160]	@ (80119c8 <mem_free+0x110>)
 8011928:	f00b f826 	bl	801c978 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	791b      	ldrb	r3, [r3, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d110      	bne.n	8011956 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011934:	4b1e      	ldr	r3, [pc, #120]	@ (80119b0 <mem_free+0xf8>)
 8011936:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801193a:	4924      	ldr	r1, [pc, #144]	@ (80119cc <mem_free+0x114>)
 801193c:	481e      	ldr	r0, [pc, #120]	@ (80119b8 <mem_free+0x100>)
 801193e:	f00b fdd3 	bl	801d4e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011942:	4821      	ldr	r0, [pc, #132]	@ (80119c8 <mem_free+0x110>)
 8011944:	f00b f827 	bl	801c996 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011948:	f00b f858 	bl	801c9fc <sys_arch_protect>
 801194c:	6178      	str	r0, [r7, #20]
 801194e:	6978      	ldr	r0, [r7, #20]
 8011950:	f00b f862 	bl	801ca18 <sys_arch_unprotect>
    return;
 8011954:	e029      	b.n	80119aa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011956:	69f8      	ldr	r0, [r7, #28]
 8011958:	f7ff ff72 	bl	8011840 <mem_link_valid>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d110      	bne.n	8011984 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011962:	4b13      	ldr	r3, [pc, #76]	@ (80119b0 <mem_free+0xf8>)
 8011964:	f240 2295 	movw	r2, #661	@ 0x295
 8011968:	4919      	ldr	r1, [pc, #100]	@ (80119d0 <mem_free+0x118>)
 801196a:	4813      	ldr	r0, [pc, #76]	@ (80119b8 <mem_free+0x100>)
 801196c:	f00b fdbc 	bl	801d4e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011970:	4815      	ldr	r0, [pc, #84]	@ (80119c8 <mem_free+0x110>)
 8011972:	f00b f810 	bl	801c996 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011976:	f00b f841 	bl	801c9fc <sys_arch_protect>
 801197a:	61b8      	str	r0, [r7, #24]
 801197c:	69b8      	ldr	r0, [r7, #24]
 801197e:	f00b f84b 	bl	801ca18 <sys_arch_unprotect>
    return;
 8011982:	e012      	b.n	80119aa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	2200      	movs	r2, #0
 8011988:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801198a:	4b12      	ldr	r3, [pc, #72]	@ (80119d4 <mem_free+0x11c>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	69fa      	ldr	r2, [r7, #28]
 8011990:	429a      	cmp	r2, r3
 8011992:	d202      	bcs.n	801199a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011994:	4a0f      	ldr	r2, [pc, #60]	@ (80119d4 <mem_free+0x11c>)
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801199a:	69f8      	ldr	r0, [r7, #28]
 801199c:	f7ff fe5c 	bl	8011658 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80119a0:	4809      	ldr	r0, [pc, #36]	@ (80119c8 <mem_free+0x110>)
 80119a2:	f00a fff8 	bl	801c996 <sys_mutex_unlock>
 80119a6:	e000      	b.n	80119aa <mem_free+0xf2>
    return;
 80119a8:	bf00      	nop
}
 80119aa:	3720      	adds	r7, #32
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	080208b8 	.word	0x080208b8
 80119b4:	080209a8 	.word	0x080209a8
 80119b8:	08020900 	.word	0x08020900
 80119bc:	2000c2ac 	.word	0x2000c2ac
 80119c0:	2000c2b0 	.word	0x2000c2b0
 80119c4:	080209cc 	.word	0x080209cc
 80119c8:	2000c2b4 	.word	0x2000c2b4
 80119cc:	080209e8 	.word	0x080209e8
 80119d0:	08020a10 	.word	0x08020a10
 80119d4:	2000c2b8 	.word	0x2000c2b8

080119d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b088      	sub	sp, #32
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	460b      	mov	r3, r1
 80119e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80119e4:	887b      	ldrh	r3, [r7, #2]
 80119e6:	3303      	adds	r3, #3
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	f023 0303 	bic.w	r3, r3, #3
 80119ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80119f0:	8bfb      	ldrh	r3, [r7, #30]
 80119f2:	2b0b      	cmp	r3, #11
 80119f4:	d801      	bhi.n	80119fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80119f6:	230c      	movs	r3, #12
 80119f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80119fa:	8bfb      	ldrh	r3, [r7, #30]
 80119fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011a00:	d803      	bhi.n	8011a0a <mem_trim+0x32>
 8011a02:	8bfa      	ldrh	r2, [r7, #30]
 8011a04:	887b      	ldrh	r3, [r7, #2]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d201      	bcs.n	8011a0e <mem_trim+0x36>
    return NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	e0d8      	b.n	8011bc0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8011bc8 <mem_trim+0x1f0>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d304      	bcc.n	8011a22 <mem_trim+0x4a>
 8011a18:	4b6c      	ldr	r3, [pc, #432]	@ (8011bcc <mem_trim+0x1f4>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d306      	bcc.n	8011a30 <mem_trim+0x58>
 8011a22:	4b6b      	ldr	r3, [pc, #428]	@ (8011bd0 <mem_trim+0x1f8>)
 8011a24:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011a28:	496a      	ldr	r1, [pc, #424]	@ (8011bd4 <mem_trim+0x1fc>)
 8011a2a:	486b      	ldr	r0, [pc, #428]	@ (8011bd8 <mem_trim+0x200>)
 8011a2c:	f00b fd5c 	bl	801d4e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011a30:	4b65      	ldr	r3, [pc, #404]	@ (8011bc8 <mem_trim+0x1f0>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d304      	bcc.n	8011a44 <mem_trim+0x6c>
 8011a3a:	4b64      	ldr	r3, [pc, #400]	@ (8011bcc <mem_trim+0x1f4>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d307      	bcc.n	8011a54 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a44:	f00a ffda 	bl	801c9fc <sys_arch_protect>
 8011a48:	60b8      	str	r0, [r7, #8]
 8011a4a:	68b8      	ldr	r0, [r7, #8]
 8011a4c:	f00a ffe4 	bl	801ca18 <sys_arch_unprotect>
    return rmem;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	e0b5      	b.n	8011bc0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	3b08      	subs	r3, #8
 8011a58:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011a5a:	69b8      	ldr	r0, [r7, #24]
 8011a5c:	f7ff fdea 	bl	8011634 <mem_to_ptr>
 8011a60:	4603      	mov	r3, r0
 8011a62:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	881a      	ldrh	r2, [r3, #0]
 8011a68:	8afb      	ldrh	r3, [r7, #22]
 8011a6a:	1ad3      	subs	r3, r2, r3
 8011a6c:	b29b      	uxth	r3, r3
 8011a6e:	3b08      	subs	r3, #8
 8011a70:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011a72:	8bfa      	ldrh	r2, [r7, #30]
 8011a74:	8abb      	ldrh	r3, [r7, #20]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d906      	bls.n	8011a88 <mem_trim+0xb0>
 8011a7a:	4b55      	ldr	r3, [pc, #340]	@ (8011bd0 <mem_trim+0x1f8>)
 8011a7c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011a80:	4956      	ldr	r1, [pc, #344]	@ (8011bdc <mem_trim+0x204>)
 8011a82:	4855      	ldr	r0, [pc, #340]	@ (8011bd8 <mem_trim+0x200>)
 8011a84:	f00b fd30 	bl	801d4e8 <iprintf>
  if (newsize > size) {
 8011a88:	8bfa      	ldrh	r2, [r7, #30]
 8011a8a:	8abb      	ldrh	r3, [r7, #20]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d901      	bls.n	8011a94 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011a90:	2300      	movs	r3, #0
 8011a92:	e095      	b.n	8011bc0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011a94:	8bfa      	ldrh	r2, [r7, #30]
 8011a96:	8abb      	ldrh	r3, [r7, #20]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d101      	bne.n	8011aa0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	e08f      	b.n	8011bc0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011aa0:	484f      	ldr	r0, [pc, #316]	@ (8011be0 <mem_trim+0x208>)
 8011aa2:	f00a ff69 	bl	801c978 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	881b      	ldrh	r3, [r3, #0]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7ff fdb0 	bl	8011610 <ptr_to_mem>
 8011ab0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	791b      	ldrb	r3, [r3, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d13f      	bne.n	8011b3a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011aba:	69bb      	ldr	r3, [r7, #24]
 8011abc:	881b      	ldrh	r3, [r3, #0]
 8011abe:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011ac2:	d106      	bne.n	8011ad2 <mem_trim+0xfa>
 8011ac4:	4b42      	ldr	r3, [pc, #264]	@ (8011bd0 <mem_trim+0x1f8>)
 8011ac6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011aca:	4946      	ldr	r1, [pc, #280]	@ (8011be4 <mem_trim+0x20c>)
 8011acc:	4842      	ldr	r0, [pc, #264]	@ (8011bd8 <mem_trim+0x200>)
 8011ace:	f00b fd0b 	bl	801d4e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011ad8:	8afa      	ldrh	r2, [r7, #22]
 8011ada:	8bfb      	ldrh	r3, [r7, #30]
 8011adc:	4413      	add	r3, r2
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	3308      	adds	r3, #8
 8011ae2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011ae4:	4b40      	ldr	r3, [pc, #256]	@ (8011be8 <mem_trim+0x210>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	693a      	ldr	r2, [r7, #16]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d106      	bne.n	8011afc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011aee:	89fb      	ldrh	r3, [r7, #14]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff fd8d 	bl	8011610 <ptr_to_mem>
 8011af6:	4603      	mov	r3, r0
 8011af8:	4a3b      	ldr	r2, [pc, #236]	@ (8011be8 <mem_trim+0x210>)
 8011afa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011afc:	89fb      	ldrh	r3, [r7, #14]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff fd86 	bl	8011610 <ptr_to_mem>
 8011b04:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	89ba      	ldrh	r2, [r7, #12]
 8011b10:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	8afa      	ldrh	r2, [r7, #22]
 8011b16:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	89fa      	ldrh	r2, [r7, #14]
 8011b1c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b26:	d047      	beq.n	8011bb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7ff fd6f 	bl	8011610 <ptr_to_mem>
 8011b32:	4602      	mov	r2, r0
 8011b34:	89fb      	ldrh	r3, [r7, #14]
 8011b36:	8053      	strh	r3, [r2, #2]
 8011b38:	e03e      	b.n	8011bb8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011b3a:	8bfb      	ldrh	r3, [r7, #30]
 8011b3c:	f103 0214 	add.w	r2, r3, #20
 8011b40:	8abb      	ldrh	r3, [r7, #20]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d838      	bhi.n	8011bb8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b46:	8afa      	ldrh	r2, [r7, #22]
 8011b48:	8bfb      	ldrh	r3, [r7, #30]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	3308      	adds	r3, #8
 8011b50:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011b52:	69bb      	ldr	r3, [r7, #24]
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b5a:	d106      	bne.n	8011b6a <mem_trim+0x192>
 8011b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8011bd0 <mem_trim+0x1f8>)
 8011b5e:	f240 3216 	movw	r2, #790	@ 0x316
 8011b62:	4920      	ldr	r1, [pc, #128]	@ (8011be4 <mem_trim+0x20c>)
 8011b64:	481c      	ldr	r0, [pc, #112]	@ (8011bd8 <mem_trim+0x200>)
 8011b66:	f00b fcbf 	bl	801d4e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011b6a:	89fb      	ldrh	r3, [r7, #14]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7ff fd4f 	bl	8011610 <ptr_to_mem>
 8011b72:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011b74:	4b1c      	ldr	r3, [pc, #112]	@ (8011be8 <mem_trim+0x210>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	693a      	ldr	r2, [r7, #16]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d202      	bcs.n	8011b84 <mem_trim+0x1ac>
      lfree = mem2;
 8011b7e:	4a1a      	ldr	r2, [pc, #104]	@ (8011be8 <mem_trim+0x210>)
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	2200      	movs	r2, #0
 8011b88:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	881a      	ldrh	r2, [r3, #0]
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	8afa      	ldrh	r2, [r7, #22]
 8011b96:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	89fa      	ldrh	r2, [r7, #14]
 8011b9c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	881b      	ldrh	r3, [r3, #0]
 8011ba2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011ba6:	d007      	beq.n	8011bb8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff fd2f 	bl	8011610 <ptr_to_mem>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	89fb      	ldrh	r3, [r7, #14]
 8011bb6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011bb8:	4809      	ldr	r0, [pc, #36]	@ (8011be0 <mem_trim+0x208>)
 8011bba:	f00a feec 	bl	801c996 <sys_mutex_unlock>
  return rmem;
 8011bbe:	687b      	ldr	r3, [r7, #4]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3720      	adds	r7, #32
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	2000c2ac 	.word	0x2000c2ac
 8011bcc:	2000c2b0 	.word	0x2000c2b0
 8011bd0:	080208b8 	.word	0x080208b8
 8011bd4:	08020a44 	.word	0x08020a44
 8011bd8:	08020900 	.word	0x08020900
 8011bdc:	08020a5c 	.word	0x08020a5c
 8011be0:	2000c2b4 	.word	0x2000c2b4
 8011be4:	08020a7c 	.word	0x08020a7c
 8011be8:	2000c2b8 	.word	0x2000c2b8

08011bec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011bf6:	88fb      	ldrh	r3, [r7, #6]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d101      	bne.n	8011c00 <mem_malloc+0x14>
    return NULL;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	e0e2      	b.n	8011dc6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011c00:	88fb      	ldrh	r3, [r7, #6]
 8011c02:	3303      	adds	r3, #3
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	f023 0303 	bic.w	r3, r3, #3
 8011c0a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011c0c:	8bbb      	ldrh	r3, [r7, #28]
 8011c0e:	2b0b      	cmp	r3, #11
 8011c10:	d801      	bhi.n	8011c16 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011c12:	230c      	movs	r3, #12
 8011c14:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011c16:	8bbb      	ldrh	r3, [r7, #28]
 8011c18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c1c:	d803      	bhi.n	8011c26 <mem_malloc+0x3a>
 8011c1e:	8bba      	ldrh	r2, [r7, #28]
 8011c20:	88fb      	ldrh	r3, [r7, #6]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d201      	bcs.n	8011c2a <mem_malloc+0x3e>
    return NULL;
 8011c26:	2300      	movs	r3, #0
 8011c28:	e0cd      	b.n	8011dc6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011c2a:	4869      	ldr	r0, [pc, #420]	@ (8011dd0 <mem_malloc+0x1e4>)
 8011c2c:	f00a fea4 	bl	801c978 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c30:	4b68      	ldr	r3, [pc, #416]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff fcfd 	bl	8011634 <mem_to_ptr>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	83fb      	strh	r3, [r7, #30]
 8011c3e:	e0b7      	b.n	8011db0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011c40:	8bfb      	ldrh	r3, [r7, #30]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7ff fce4 	bl	8011610 <ptr_to_mem>
 8011c48:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	791b      	ldrb	r3, [r3, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f040 80a7 	bne.w	8011da2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	461a      	mov	r2, r3
 8011c5a:	8bfb      	ldrh	r3, [r7, #30]
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	f1a3 0208 	sub.w	r2, r3, #8
 8011c62:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011c64:	429a      	cmp	r2, r3
 8011c66:	f0c0 809c 	bcc.w	8011da2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	881b      	ldrh	r3, [r3, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	8bfb      	ldrh	r3, [r7, #30]
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	f1a3 0208 	sub.w	r2, r3, #8
 8011c78:	8bbb      	ldrh	r3, [r7, #28]
 8011c7a:	3314      	adds	r3, #20
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d333      	bcc.n	8011ce8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011c80:	8bfa      	ldrh	r2, [r7, #30]
 8011c82:	8bbb      	ldrh	r3, [r7, #28]
 8011c84:	4413      	add	r3, r2
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	3308      	adds	r3, #8
 8011c8a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011c8c:	8a7b      	ldrh	r3, [r7, #18]
 8011c8e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c92:	d106      	bne.n	8011ca2 <mem_malloc+0xb6>
 8011c94:	4b50      	ldr	r3, [pc, #320]	@ (8011dd8 <mem_malloc+0x1ec>)
 8011c96:	f240 3287 	movw	r2, #903	@ 0x387
 8011c9a:	4950      	ldr	r1, [pc, #320]	@ (8011ddc <mem_malloc+0x1f0>)
 8011c9c:	4850      	ldr	r0, [pc, #320]	@ (8011de0 <mem_malloc+0x1f4>)
 8011c9e:	f00b fc23 	bl	801d4e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011ca2:	8a7b      	ldrh	r3, [r7, #18]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff fcb3 	bl	8011610 <ptr_to_mem>
 8011caa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	881a      	ldrh	r2, [r3, #0]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	8bfa      	ldrh	r2, [r7, #30]
 8011cbe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	8a7a      	ldrh	r2, [r7, #18]
 8011cc4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011cd4:	d00b      	beq.n	8011cee <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7ff fc98 	bl	8011610 <ptr_to_mem>
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	8a7b      	ldrh	r3, [r7, #18]
 8011ce4:	8053      	strh	r3, [r2, #2]
 8011ce6:	e002      	b.n	8011cee <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	2201      	movs	r2, #1
 8011cec:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011cee:	4b39      	ldr	r3, [pc, #228]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	697a      	ldr	r2, [r7, #20]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d127      	bne.n	8011d48 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011cf8:	4b36      	ldr	r3, [pc, #216]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011cfe:	e005      	b.n	8011d0c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff fc83 	bl	8011610 <ptr_to_mem>
 8011d0a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011d0c:	69bb      	ldr	r3, [r7, #24]
 8011d0e:	791b      	ldrb	r3, [r3, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d004      	beq.n	8011d1e <mem_malloc+0x132>
 8011d14:	4b33      	ldr	r3, [pc, #204]	@ (8011de4 <mem_malloc+0x1f8>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	69ba      	ldr	r2, [r7, #24]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d1f0      	bne.n	8011d00 <mem_malloc+0x114>
          }
          lfree = cur;
 8011d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011d24:	4b2b      	ldr	r3, [pc, #172]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	4b2e      	ldr	r3, [pc, #184]	@ (8011de4 <mem_malloc+0x1f8>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d00b      	beq.n	8011d48 <mem_malloc+0x15c>
 8011d30:	4b28      	ldr	r3, [pc, #160]	@ (8011dd4 <mem_malloc+0x1e8>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	791b      	ldrb	r3, [r3, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d006      	beq.n	8011d48 <mem_malloc+0x15c>
 8011d3a:	4b27      	ldr	r3, [pc, #156]	@ (8011dd8 <mem_malloc+0x1ec>)
 8011d3c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011d40:	4929      	ldr	r1, [pc, #164]	@ (8011de8 <mem_malloc+0x1fc>)
 8011d42:	4827      	ldr	r0, [pc, #156]	@ (8011de0 <mem_malloc+0x1f4>)
 8011d44:	f00b fbd0 	bl	801d4e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011d48:	4821      	ldr	r0, [pc, #132]	@ (8011dd0 <mem_malloc+0x1e4>)
 8011d4a:	f00a fe24 	bl	801c996 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011d4e:	8bba      	ldrh	r2, [r7, #28]
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	4413      	add	r3, r2
 8011d54:	3308      	adds	r3, #8
 8011d56:	4a23      	ldr	r2, [pc, #140]	@ (8011de4 <mem_malloc+0x1f8>)
 8011d58:	6812      	ldr	r2, [r2, #0]
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d906      	bls.n	8011d6c <mem_malloc+0x180>
 8011d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011dd8 <mem_malloc+0x1ec>)
 8011d60:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011d64:	4921      	ldr	r1, [pc, #132]	@ (8011dec <mem_malloc+0x200>)
 8011d66:	481e      	ldr	r0, [pc, #120]	@ (8011de0 <mem_malloc+0x1f4>)
 8011d68:	f00b fbbe 	bl	801d4e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	f003 0303 	and.w	r3, r3, #3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d006      	beq.n	8011d84 <mem_malloc+0x198>
 8011d76:	4b18      	ldr	r3, [pc, #96]	@ (8011dd8 <mem_malloc+0x1ec>)
 8011d78:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011d7c:	491c      	ldr	r1, [pc, #112]	@ (8011df0 <mem_malloc+0x204>)
 8011d7e:	4818      	ldr	r0, [pc, #96]	@ (8011de0 <mem_malloc+0x1f4>)
 8011d80:	f00b fbb2 	bl	801d4e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	f003 0303 	and.w	r3, r3, #3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d006      	beq.n	8011d9c <mem_malloc+0x1b0>
 8011d8e:	4b12      	ldr	r3, [pc, #72]	@ (8011dd8 <mem_malloc+0x1ec>)
 8011d90:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011d94:	4917      	ldr	r1, [pc, #92]	@ (8011df4 <mem_malloc+0x208>)
 8011d96:	4812      	ldr	r0, [pc, #72]	@ (8011de0 <mem_malloc+0x1f4>)
 8011d98:	f00b fba6 	bl	801d4e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	3308      	adds	r3, #8
 8011da0:	e011      	b.n	8011dc6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011da2:	8bfb      	ldrh	r3, [r7, #30]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7ff fc33 	bl	8011610 <ptr_to_mem>
 8011daa:	4603      	mov	r3, r0
 8011dac:	881b      	ldrh	r3, [r3, #0]
 8011dae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011db0:	8bfa      	ldrh	r2, [r7, #30]
 8011db2:	8bbb      	ldrh	r3, [r7, #28]
 8011db4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8011db8:	429a      	cmp	r2, r3
 8011dba:	f4ff af41 	bcc.w	8011c40 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011dbe:	4804      	ldr	r0, [pc, #16]	@ (8011dd0 <mem_malloc+0x1e4>)
 8011dc0:	f00a fde9 	bl	801c996 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3720      	adds	r7, #32
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	2000c2b4 	.word	0x2000c2b4
 8011dd4:	2000c2b8 	.word	0x2000c2b8
 8011dd8:	080208b8 	.word	0x080208b8
 8011ddc:	08020a7c 	.word	0x08020a7c
 8011de0:	08020900 	.word	0x08020900
 8011de4:	2000c2b0 	.word	0x2000c2b0
 8011de8:	08020a90 	.word	0x08020a90
 8011dec:	08020aac 	.word	0x08020aac
 8011df0:	08020adc 	.word	0x08020adc
 8011df4:	08020b0c 	.word	0x08020b0c

08011df8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	2200      	movs	r2, #0
 8011e06:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	3303      	adds	r3, #3
 8011e0e:	f023 0303 	bic.w	r3, r3, #3
 8011e12:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011e14:	2300      	movs	r3, #0
 8011e16:	60fb      	str	r3, [r7, #12]
 8011e18:	e011      	b.n	8011e3e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	689b      	ldr	r3, [r3, #8]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	461a      	mov	r2, r3
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	4413      	add	r3, r2
 8011e36:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	60fb      	str	r3, [r7, #12]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	885b      	ldrh	r3, [r3, #2]
 8011e42:	461a      	mov	r2, r3
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	4293      	cmp	r3, r2
 8011e48:	dbe7      	blt.n	8011e1a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011e4a:	bf00      	nop
 8011e4c:	bf00      	nop
 8011e4e:	3714      	adds	r7, #20
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr

08011e58 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e5e:	2300      	movs	r3, #0
 8011e60:	80fb      	strh	r3, [r7, #6]
 8011e62:	e009      	b.n	8011e78 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011e64:	88fb      	ldrh	r3, [r7, #6]
 8011e66:	4a08      	ldr	r2, [pc, #32]	@ (8011e88 <memp_init+0x30>)
 8011e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff ffc3 	bl	8011df8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e72:	88fb      	ldrh	r3, [r7, #6]
 8011e74:	3301      	adds	r3, #1
 8011e76:	80fb      	strh	r3, [r7, #6]
 8011e78:	88fb      	ldrh	r3, [r7, #6]
 8011e7a:	2b0c      	cmp	r3, #12
 8011e7c:	d9f2      	bls.n	8011e64 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011e7e:	bf00      	nop
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	08024a08 	.word	0x08024a08

08011e8c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011e94:	f00a fdb2 	bl	801c9fc <sys_arch_protect>
 8011e98:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	689b      	ldr	r3, [r3, #8]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d015      	beq.n	8011ed4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	6812      	ldr	r2, [r2, #0]
 8011eb0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	f003 0303 	and.w	r3, r3, #3
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d006      	beq.n	8011eca <do_memp_malloc_pool+0x3e>
 8011ebc:	4b09      	ldr	r3, [pc, #36]	@ (8011ee4 <do_memp_malloc_pool+0x58>)
 8011ebe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011ec2:	4909      	ldr	r1, [pc, #36]	@ (8011ee8 <do_memp_malloc_pool+0x5c>)
 8011ec4:	4809      	ldr	r0, [pc, #36]	@ (8011eec <do_memp_malloc_pool+0x60>)
 8011ec6:	f00b fb0f 	bl	801d4e8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f00a fda4 	bl	801ca18 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	e003      	b.n	8011edc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f00a fd9f 	bl	801ca18 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011eda:	2300      	movs	r3, #0
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	08020b30 	.word	0x08020b30
 8011ee8:	08020b60 	.word	0x08020b60
 8011eec:	08020b84 	.word	0x08020b84

08011ef0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d106      	bne.n	8011f0c <memp_malloc_pool+0x1c>
 8011efe:	4b0a      	ldr	r3, [pc, #40]	@ (8011f28 <memp_malloc_pool+0x38>)
 8011f00:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011f04:	4909      	ldr	r1, [pc, #36]	@ (8011f2c <memp_malloc_pool+0x3c>)
 8011f06:	480a      	ldr	r0, [pc, #40]	@ (8011f30 <memp_malloc_pool+0x40>)
 8011f08:	f00b faee 	bl	801d4e8 <iprintf>
  if (desc == NULL) {
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d101      	bne.n	8011f16 <memp_malloc_pool+0x26>
    return NULL;
 8011f12:	2300      	movs	r3, #0
 8011f14:	e003      	b.n	8011f1e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff ffb8 	bl	8011e8c <do_memp_malloc_pool>
 8011f1c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	08020b30 	.word	0x08020b30
 8011f2c:	08020bac 	.word	0x08020bac
 8011f30:	08020b84 	.word	0x08020b84

08011f34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b0c      	cmp	r3, #12
 8011f42:	d908      	bls.n	8011f56 <memp_malloc+0x22>
 8011f44:	4b0a      	ldr	r3, [pc, #40]	@ (8011f70 <memp_malloc+0x3c>)
 8011f46:	f240 1257 	movw	r2, #343	@ 0x157
 8011f4a:	490a      	ldr	r1, [pc, #40]	@ (8011f74 <memp_malloc+0x40>)
 8011f4c:	480a      	ldr	r0, [pc, #40]	@ (8011f78 <memp_malloc+0x44>)
 8011f4e:	f00b facb 	bl	801d4e8 <iprintf>
 8011f52:	2300      	movs	r3, #0
 8011f54:	e008      	b.n	8011f68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	4a08      	ldr	r2, [pc, #32]	@ (8011f7c <memp_malloc+0x48>)
 8011f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff ff94 	bl	8011e8c <do_memp_malloc_pool>
 8011f64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011f66:	68fb      	ldr	r3, [r7, #12]
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	08020b30 	.word	0x08020b30
 8011f74:	08020bc0 	.word	0x08020bc0
 8011f78:	08020b84 	.word	0x08020b84
 8011f7c:	08024a08 	.word	0x08024a08

08011f80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	f003 0303 	and.w	r3, r3, #3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d006      	beq.n	8011fa2 <do_memp_free_pool+0x22>
 8011f94:	4b0d      	ldr	r3, [pc, #52]	@ (8011fcc <do_memp_free_pool+0x4c>)
 8011f96:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011f9a:	490d      	ldr	r1, [pc, #52]	@ (8011fd0 <do_memp_free_pool+0x50>)
 8011f9c:	480d      	ldr	r0, [pc, #52]	@ (8011fd4 <do_memp_free_pool+0x54>)
 8011f9e:	f00b faa3 	bl	801d4e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011fa6:	f00a fd29 	bl	801c9fc <sys_arch_protect>
 8011faa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011fbe:	68b8      	ldr	r0, [r7, #8]
 8011fc0:	f00a fd2a 	bl	801ca18 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011fc4:	bf00      	nop
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}
 8011fcc:	08020b30 	.word	0x08020b30
 8011fd0:	08020be0 	.word	0x08020be0
 8011fd4:	08020b84 	.word	0x08020b84

08011fd8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d106      	bne.n	8011ff6 <memp_free_pool+0x1e>
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8012014 <memp_free_pool+0x3c>)
 8011fea:	f240 1295 	movw	r2, #405	@ 0x195
 8011fee:	490a      	ldr	r1, [pc, #40]	@ (8012018 <memp_free_pool+0x40>)
 8011ff0:	480a      	ldr	r0, [pc, #40]	@ (801201c <memp_free_pool+0x44>)
 8011ff2:	f00b fa79 	bl	801d4e8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d007      	beq.n	801200c <memp_free_pool+0x34>
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d004      	beq.n	801200c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012002:	6839      	ldr	r1, [r7, #0]
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff ffbb 	bl	8011f80 <do_memp_free_pool>
 801200a:	e000      	b.n	801200e <memp_free_pool+0x36>
    return;
 801200c:	bf00      	nop
}
 801200e:	3708      	adds	r7, #8
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	08020b30 	.word	0x08020b30
 8012018:	08020bac 	.word	0x08020bac
 801201c:	08020b84 	.word	0x08020b84

08012020 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	4603      	mov	r3, r0
 8012028:	6039      	str	r1, [r7, #0]
 801202a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801202c:	79fb      	ldrb	r3, [r7, #7]
 801202e:	2b0c      	cmp	r3, #12
 8012030:	d907      	bls.n	8012042 <memp_free+0x22>
 8012032:	4b0c      	ldr	r3, [pc, #48]	@ (8012064 <memp_free+0x44>)
 8012034:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012038:	490b      	ldr	r1, [pc, #44]	@ (8012068 <memp_free+0x48>)
 801203a:	480c      	ldr	r0, [pc, #48]	@ (801206c <memp_free+0x4c>)
 801203c:	f00b fa54 	bl	801d4e8 <iprintf>
 8012040:	e00c      	b.n	801205c <memp_free+0x3c>

  if (mem == NULL) {
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d008      	beq.n	801205a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012048:	79fb      	ldrb	r3, [r7, #7]
 801204a:	4a09      	ldr	r2, [pc, #36]	@ (8012070 <memp_free+0x50>)
 801204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012050:	6839      	ldr	r1, [r7, #0]
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff ff94 	bl	8011f80 <do_memp_free_pool>
 8012058:	e000      	b.n	801205c <memp_free+0x3c>
    return;
 801205a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801205c:	3708      	adds	r7, #8
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	08020b30 	.word	0x08020b30
 8012068:	08020c00 	.word	0x08020c00
 801206c:	08020b84 	.word	0x08020b84
 8012070:	08024a08 	.word	0x08024a08

08012074 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012074:	b480      	push	{r7}
 8012076:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012078:	bf00      	nop
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr
	...

08012084 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b086      	sub	sp, #24
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d108      	bne.n	80120aa <netif_add+0x26>
 8012098:	4b57      	ldr	r3, [pc, #348]	@ (80121f8 <netif_add+0x174>)
 801209a:	f240 1227 	movw	r2, #295	@ 0x127
 801209e:	4957      	ldr	r1, [pc, #348]	@ (80121fc <netif_add+0x178>)
 80120a0:	4857      	ldr	r0, [pc, #348]	@ (8012200 <netif_add+0x17c>)
 80120a2:	f00b fa21 	bl	801d4e8 <iprintf>
 80120a6:	2300      	movs	r3, #0
 80120a8:	e0a2      	b.n	80121f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80120aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d108      	bne.n	80120c2 <netif_add+0x3e>
 80120b0:	4b51      	ldr	r3, [pc, #324]	@ (80121f8 <netif_add+0x174>)
 80120b2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80120b6:	4953      	ldr	r1, [pc, #332]	@ (8012204 <netif_add+0x180>)
 80120b8:	4851      	ldr	r0, [pc, #324]	@ (8012200 <netif_add+0x17c>)
 80120ba:	f00b fa15 	bl	801d4e8 <iprintf>
 80120be:	2300      	movs	r3, #0
 80120c0:	e096      	b.n	80121f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d101      	bne.n	80120cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80120c8:	4b4f      	ldr	r3, [pc, #316]	@ (8012208 <netif_add+0x184>)
 80120ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d101      	bne.n	80120d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80120d2:	4b4d      	ldr	r3, [pc, #308]	@ (8012208 <netif_add+0x184>)
 80120d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d101      	bne.n	80120e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80120dc:	4b4a      	ldr	r3, [pc, #296]	@ (8012208 <netif_add+0x184>)
 80120de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	2200      	movs	r2, #0
 80120f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	4a45      	ldr	r2, [pc, #276]	@ (801220c <netif_add+0x188>)
 80120f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2200      	movs	r2, #0
 80120fc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	2200      	movs	r2, #0
 8012102:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2200      	movs	r2, #0
 801210a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6a3a      	ldr	r2, [r7, #32]
 8012110:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012112:	4b3f      	ldr	r3, [pc, #252]	@ (8012210 <netif_add+0x18c>)
 8012114:	781a      	ldrb	r2, [r3, #0]
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012120:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	68b9      	ldr	r1, [r7, #8]
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f000 f913 	bl	8012354 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	4798      	blx	r3
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <netif_add+0xba>
    return NULL;
 801213a:	2300      	movs	r3, #0
 801213c:	e058      	b.n	80121f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012144:	2bff      	cmp	r3, #255	@ 0xff
 8012146:	d103      	bne.n	8012150 <netif_add+0xcc>
        netif->num = 0;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2200      	movs	r2, #0
 801214c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012154:	4b2f      	ldr	r3, [pc, #188]	@ (8012214 <netif_add+0x190>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	617b      	str	r3, [r7, #20]
 801215a:	e02b      	b.n	80121b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801215c:	697a      	ldr	r2, [r7, #20]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	429a      	cmp	r2, r3
 8012162:	d106      	bne.n	8012172 <netif_add+0xee>
 8012164:	4b24      	ldr	r3, [pc, #144]	@ (80121f8 <netif_add+0x174>)
 8012166:	f240 128b 	movw	r2, #395	@ 0x18b
 801216a:	492b      	ldr	r1, [pc, #172]	@ (8012218 <netif_add+0x194>)
 801216c:	4824      	ldr	r0, [pc, #144]	@ (8012200 <netif_add+0x17c>)
 801216e:	f00b f9bb 	bl	801d4e8 <iprintf>
        num_netifs++;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	3301      	adds	r3, #1
 8012176:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	2bff      	cmp	r3, #255	@ 0xff
 801217c:	dd06      	ble.n	801218c <netif_add+0x108>
 801217e:	4b1e      	ldr	r3, [pc, #120]	@ (80121f8 <netif_add+0x174>)
 8012180:	f240 128d 	movw	r2, #397	@ 0x18d
 8012184:	4925      	ldr	r1, [pc, #148]	@ (801221c <netif_add+0x198>)
 8012186:	481e      	ldr	r0, [pc, #120]	@ (8012200 <netif_add+0x17c>)
 8012188:	f00b f9ae 	bl	801d4e8 <iprintf>
        if (netif2->num == netif->num) {
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012198:	429a      	cmp	r2, r3
 801219a:	d108      	bne.n	80121ae <netif_add+0x12a>
          netif->num++;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121a2:	3301      	adds	r3, #1
 80121a4:	b2da      	uxtb	r2, r3
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80121ac:	e005      	b.n	80121ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	617b      	str	r3, [r7, #20]
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1d0      	bne.n	801215c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1be      	bne.n	801213e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80121c8:	d103      	bne.n	80121d2 <netif_add+0x14e>
    netif_num = 0;
 80121ca:	4b11      	ldr	r3, [pc, #68]	@ (8012210 <netif_add+0x18c>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	701a      	strb	r2, [r3, #0]
 80121d0:	e006      	b.n	80121e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121d8:	3301      	adds	r3, #1
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	4b0c      	ldr	r3, [pc, #48]	@ (8012210 <netif_add+0x18c>)
 80121de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80121e0:	4b0c      	ldr	r3, [pc, #48]	@ (8012214 <netif_add+0x190>)
 80121e2:	681a      	ldr	r2, [r3, #0]
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80121e8:	4a0a      	ldr	r2, [pc, #40]	@ (8012214 <netif_add+0x190>)
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80121ee:	68fb      	ldr	r3, [r7, #12]
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3718      	adds	r7, #24
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	08020c1c 	.word	0x08020c1c
 80121fc:	08020cb0 	.word	0x08020cb0
 8012200:	08020c6c 	.word	0x08020c6c
 8012204:	08020ccc 	.word	0x08020ccc
 8012208:	08024a7c 	.word	0x08024a7c
 801220c:	0801262f 	.word	0x0801262f
 8012210:	2000f390 	.word	0x2000f390
 8012214:	2000f388 	.word	0x2000f388
 8012218:	08020cf0 	.word	0x08020cf0
 801221c:	08020d04 	.word	0x08020d04

08012220 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801222a:	6839      	ldr	r1, [r7, #0]
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f002 fe91 	bl	8014f54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012232:	6839      	ldr	r1, [r7, #0]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f007 ff27 	bl	801a088 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801223a:	bf00      	nop
 801223c:	3708      	adds	r7, #8
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
	...

08012244 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d106      	bne.n	8012264 <netif_do_set_ipaddr+0x20>
 8012256:	4b1d      	ldr	r3, [pc, #116]	@ (80122cc <netif_do_set_ipaddr+0x88>)
 8012258:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801225c:	491c      	ldr	r1, [pc, #112]	@ (80122d0 <netif_do_set_ipaddr+0x8c>)
 801225e:	481d      	ldr	r0, [pc, #116]	@ (80122d4 <netif_do_set_ipaddr+0x90>)
 8012260:	f00b f942 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d106      	bne.n	8012278 <netif_do_set_ipaddr+0x34>
 801226a:	4b18      	ldr	r3, [pc, #96]	@ (80122cc <netif_do_set_ipaddr+0x88>)
 801226c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012270:	4917      	ldr	r1, [pc, #92]	@ (80122d0 <netif_do_set_ipaddr+0x8c>)
 8012272:	4818      	ldr	r0, [pc, #96]	@ (80122d4 <netif_do_set_ipaddr+0x90>)
 8012274:	f00b f938 	bl	801d4e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012278:	68bb      	ldr	r3, [r7, #8]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	3304      	adds	r3, #4
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	429a      	cmp	r2, r3
 8012284:	d01c      	beq.n	80122c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	3304      	adds	r3, #4
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012296:	f107 0314 	add.w	r3, r7, #20
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff ffbf 	bl	8012220 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d002      	beq.n	80122ae <netif_do_set_ipaddr+0x6a>
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	e000      	b.n	80122b0 <netif_do_set_ipaddr+0x6c>
 80122ae:	2300      	movs	r3, #0
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80122b4:	2101      	movs	r1, #1
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f000 f8d2 	bl	8012460 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80122bc:	2301      	movs	r3, #1
 80122be:	e000      	b.n	80122c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3718      	adds	r7, #24
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	08020c1c 	.word	0x08020c1c
 80122d0:	08020d34 	.word	0x08020d34
 80122d4:	08020c6c 	.word	0x08020c6c

080122d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80122d8:	b480      	push	{r7}
 80122da:	b085      	sub	sp, #20
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	3308      	adds	r3, #8
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d00a      	beq.n	8012308 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <netif_do_set_netmask+0x26>
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	e000      	b.n	8012300 <netif_do_set_netmask+0x28>
 80122fe:	2300      	movs	r3, #0
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012304:	2301      	movs	r3, #1
 8012306:	e000      	b.n	801230a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012308:	2300      	movs	r3, #0
}
 801230a:	4618      	mov	r0, r3
 801230c:	3714      	adds	r7, #20
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr

08012316 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012316:	b480      	push	{r7}
 8012318:	b085      	sub	sp, #20
 801231a:	af00      	add	r7, sp, #0
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	681a      	ldr	r2, [r3, #0]
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	330c      	adds	r3, #12
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	429a      	cmp	r2, r3
 801232e:	d00a      	beq.n	8012346 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d002      	beq.n	801233c <netif_do_set_gw+0x26>
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	e000      	b.n	801233e <netif_do_set_gw+0x28>
 801233c:	2300      	movs	r3, #0
 801233e:	68fa      	ldr	r2, [r7, #12]
 8012340:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012342:	2301      	movs	r3, #1
 8012344:	e000      	b.n	8012348 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012346:	2300      	movs	r3, #0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b088      	sub	sp, #32
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012362:	2300      	movs	r3, #0
 8012364:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012366:	2300      	movs	r3, #0
 8012368:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d101      	bne.n	8012374 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012370:	4b1c      	ldr	r3, [pc, #112]	@ (80123e4 <netif_set_addr+0x90>)
 8012372:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d101      	bne.n	801237e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801237a:	4b1a      	ldr	r3, [pc, #104]	@ (80123e4 <netif_set_addr+0x90>)
 801237c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d101      	bne.n	8012388 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012384:	4b17      	ldr	r3, [pc, #92]	@ (80123e4 <netif_set_addr+0x90>)
 8012386:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d003      	beq.n	8012396 <netif_set_addr+0x42>
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d101      	bne.n	801239a <netif_set_addr+0x46>
 8012396:	2301      	movs	r3, #1
 8012398:	e000      	b.n	801239c <netif_set_addr+0x48>
 801239a:	2300      	movs	r3, #0
 801239c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d006      	beq.n	80123b2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123a4:	f107 0310 	add.w	r3, r7, #16
 80123a8:	461a      	mov	r2, r3
 80123aa:	68b9      	ldr	r1, [r7, #8]
 80123ac:	68f8      	ldr	r0, [r7, #12]
 80123ae:	f7ff ff49 	bl	8012244 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80123b2:	69fa      	ldr	r2, [r7, #28]
 80123b4:	6879      	ldr	r1, [r7, #4]
 80123b6:	68f8      	ldr	r0, [r7, #12]
 80123b8:	f7ff ff8e 	bl	80122d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80123bc:	69ba      	ldr	r2, [r7, #24]
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	68f8      	ldr	r0, [r7, #12]
 80123c2:	f7ff ffa8 	bl	8012316 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d106      	bne.n	80123da <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80123cc:	f107 0310 	add.w	r3, r7, #16
 80123d0:	461a      	mov	r2, r3
 80123d2:	68b9      	ldr	r1, [r7, #8]
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f7ff ff35 	bl	8012244 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80123da:	bf00      	nop
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	08024a7c 	.word	0x08024a7c

080123e8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80123f0:	4a04      	ldr	r2, [pc, #16]	@ (8012404 <netif_set_default+0x1c>)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80123f6:	bf00      	nop
 80123f8:	370c      	adds	r7, #12
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	2000f38c 	.word	0x2000f38c

08012408 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d107      	bne.n	8012426 <netif_set_up+0x1e>
 8012416:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <netif_set_up+0x4c>)
 8012418:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801241c:	490e      	ldr	r1, [pc, #56]	@ (8012458 <netif_set_up+0x50>)
 801241e:	480f      	ldr	r0, [pc, #60]	@ (801245c <netif_set_up+0x54>)
 8012420:	f00b f862 	bl	801d4e8 <iprintf>
 8012424:	e013      	b.n	801244e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801242c:	f003 0301 	and.w	r3, r3, #1
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10c      	bne.n	801244e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801243a:	f043 0301 	orr.w	r3, r3, #1
 801243e:	b2da      	uxtb	r2, r3
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012446:	2103      	movs	r1, #3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 f809 	bl	8012460 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801244e:	3708      	adds	r7, #8
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	08020c1c 	.word	0x08020c1c
 8012458:	08020da4 	.word	0x08020da4
 801245c:	08020c6c 	.word	0x08020c6c

08012460 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	460b      	mov	r3, r1
 801246a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d106      	bne.n	8012480 <netif_issue_reports+0x20>
 8012472:	4b18      	ldr	r3, [pc, #96]	@ (80124d4 <netif_issue_reports+0x74>)
 8012474:	f240 326d 	movw	r2, #877	@ 0x36d
 8012478:	4917      	ldr	r1, [pc, #92]	@ (80124d8 <netif_issue_reports+0x78>)
 801247a:	4818      	ldr	r0, [pc, #96]	@ (80124dc <netif_issue_reports+0x7c>)
 801247c:	f00b f834 	bl	801d4e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012486:	f003 0304 	and.w	r3, r3, #4
 801248a:	2b00      	cmp	r3, #0
 801248c:	d01e      	beq.n	80124cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012494:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012498:	2b00      	cmp	r3, #0
 801249a:	d017      	beq.n	80124cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801249c:	78fb      	ldrb	r3, [r7, #3]
 801249e:	f003 0301 	and.w	r3, r3, #1
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d013      	beq.n	80124ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3304      	adds	r3, #4
 80124aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d00e      	beq.n	80124ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124b6:	f003 0308 	and.w	r3, r3, #8
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d007      	beq.n	80124ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	3304      	adds	r3, #4
 80124c2:	4619      	mov	r1, r3
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f008 fd49 	bl	801af5c <etharp_request>
 80124ca:	e000      	b.n	80124ce <netif_issue_reports+0x6e>
    return;
 80124cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80124ce:	3708      	adds	r7, #8
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	08020c1c 	.word	0x08020c1c
 80124d8:	08020dc0 	.word	0x08020dc0
 80124dc:	08020c6c 	.word	0x08020c6c

080124e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d107      	bne.n	80124fe <netif_set_down+0x1e>
 80124ee:	4b12      	ldr	r3, [pc, #72]	@ (8012538 <netif_set_down+0x58>)
 80124f0:	f240 329b 	movw	r2, #923	@ 0x39b
 80124f4:	4911      	ldr	r1, [pc, #68]	@ (801253c <netif_set_down+0x5c>)
 80124f6:	4812      	ldr	r0, [pc, #72]	@ (8012540 <netif_set_down+0x60>)
 80124f8:	f00a fff6 	bl	801d4e8 <iprintf>
 80124fc:	e019      	b.n	8012532 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012504:	f003 0301 	and.w	r3, r3, #1
 8012508:	2b00      	cmp	r3, #0
 801250a:	d012      	beq.n	8012532 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012512:	f023 0301 	bic.w	r3, r3, #1
 8012516:	b2da      	uxtb	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012524:	f003 0308 	and.w	r3, r3, #8
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f008 f8d3 	bl	801a6d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012532:	3708      	adds	r7, #8
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	08020c1c 	.word	0x08020c1c
 801253c:	08020de4 	.word	0x08020de4
 8012540:	08020c6c 	.word	0x08020c6c

08012544 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d107      	bne.n	8012562 <netif_set_link_up+0x1e>
 8012552:	4b13      	ldr	r3, [pc, #76]	@ (80125a0 <netif_set_link_up+0x5c>)
 8012554:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012558:	4912      	ldr	r1, [pc, #72]	@ (80125a4 <netif_set_link_up+0x60>)
 801255a:	4813      	ldr	r0, [pc, #76]	@ (80125a8 <netif_set_link_up+0x64>)
 801255c:	f00a ffc4 	bl	801d4e8 <iprintf>
 8012560:	e01b      	b.n	801259a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012568:	f003 0304 	and.w	r3, r3, #4
 801256c:	2b00      	cmp	r3, #0
 801256e:	d114      	bne.n	801259a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012576:	f043 0304 	orr.w	r3, r3, #4
 801257a:	b2da      	uxtb	r2, r3
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012582:	2103      	movs	r1, #3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff ff6b 	bl	8012460 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	69db      	ldr	r3, [r3, #28]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <netif_set_link_up+0x56>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	69db      	ldr	r3, [r3, #28]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	08020c1c 	.word	0x08020c1c
 80125a4:	08020e04 	.word	0x08020e04
 80125a8:	08020c6c 	.word	0x08020c6c

080125ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d107      	bne.n	80125ca <netif_set_link_down+0x1e>
 80125ba:	4b11      	ldr	r3, [pc, #68]	@ (8012600 <netif_set_link_down+0x54>)
 80125bc:	f240 4206 	movw	r2, #1030	@ 0x406
 80125c0:	4910      	ldr	r1, [pc, #64]	@ (8012604 <netif_set_link_down+0x58>)
 80125c2:	4811      	ldr	r0, [pc, #68]	@ (8012608 <netif_set_link_down+0x5c>)
 80125c4:	f00a ff90 	bl	801d4e8 <iprintf>
 80125c8:	e017      	b.n	80125fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80125d0:	f003 0304 	and.w	r3, r3, #4
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d010      	beq.n	80125fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80125de:	f023 0304 	bic.w	r3, r3, #4
 80125e2:	b2da      	uxtb	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	69db      	ldr	r3, [r3, #28]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d003      	beq.n	80125fa <netif_set_link_down+0x4e>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	69db      	ldr	r3, [r3, #28]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80125fa:	3708      	adds	r7, #8
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	08020c1c 	.word	0x08020c1c
 8012604:	08020e28 	.word	0x08020e28
 8012608:	08020c6c 	.word	0x08020c6c

0801260c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d002      	beq.n	8012622 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	683a      	ldr	r2, [r7, #0]
 8012620:	61da      	str	r2, [r3, #28]
  }
}
 8012622:	bf00      	nop
 8012624:	370c      	adds	r7, #12
 8012626:	46bd      	mov	sp, r7
 8012628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262c:	4770      	bx	lr

0801262e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801262e:	b480      	push	{r7}
 8012630:	b085      	sub	sp, #20
 8012632:	af00      	add	r7, sp, #0
 8012634:	60f8      	str	r0, [r7, #12]
 8012636:	60b9      	str	r1, [r7, #8]
 8012638:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801263a:	f06f 030b 	mvn.w	r3, #11
}
 801263e:	4618      	mov	r0, r3
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
	...

0801264c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801264c:	b480      	push	{r7}
 801264e:	b085      	sub	sp, #20
 8012650:	af00      	add	r7, sp, #0
 8012652:	4603      	mov	r3, r0
 8012654:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012656:	79fb      	ldrb	r3, [r7, #7]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d013      	beq.n	8012684 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801265c:	4b0d      	ldr	r3, [pc, #52]	@ (8012694 <netif_get_by_index+0x48>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	60fb      	str	r3, [r7, #12]
 8012662:	e00c      	b.n	801267e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801266a:	3301      	adds	r3, #1
 801266c:	b2db      	uxtb	r3, r3
 801266e:	79fa      	ldrb	r2, [r7, #7]
 8012670:	429a      	cmp	r2, r3
 8012672:	d101      	bne.n	8012678 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	e006      	b.n	8012686 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d1ef      	bne.n	8012664 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3714      	adds	r7, #20
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	2000f388 	.word	0x2000f388

08012698 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801269e:	f00a f9ad 	bl	801c9fc <sys_arch_protect>
 80126a2:	6038      	str	r0, [r7, #0]
 80126a4:	4b0d      	ldr	r3, [pc, #52]	@ (80126dc <pbuf_free_ooseq+0x44>)
 80126a6:	2200      	movs	r2, #0
 80126a8:	701a      	strb	r2, [r3, #0]
 80126aa:	6838      	ldr	r0, [r7, #0]
 80126ac:	f00a f9b4 	bl	801ca18 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80126b0:	4b0b      	ldr	r3, [pc, #44]	@ (80126e0 <pbuf_free_ooseq+0x48>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	607b      	str	r3, [r7, #4]
 80126b6:	e00a      	b.n	80126ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d003      	beq.n	80126c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f002 fc85 	bl	8014fd0 <tcp_free_ooseq>
      return;
 80126c6:	e005      	b.n	80126d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	607b      	str	r3, [r7, #4]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1f1      	bne.n	80126b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	2000f391 	.word	0x2000f391
 80126e0:	2000f3a0 	.word	0x2000f3a0

080126e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80126ec:	f7ff ffd4 	bl	8012698 <pbuf_free_ooseq>
}
 80126f0:	bf00      	nop
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80126fe:	f00a f97d 	bl	801c9fc <sys_arch_protect>
 8012702:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012704:	4b0f      	ldr	r3, [pc, #60]	@ (8012744 <pbuf_pool_is_empty+0x4c>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801270a:	4b0e      	ldr	r3, [pc, #56]	@ (8012744 <pbuf_pool_is_empty+0x4c>)
 801270c:	2201      	movs	r2, #1
 801270e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f00a f981 	bl	801ca18 <sys_arch_unprotect>

  if (!queued) {
 8012716:	78fb      	ldrb	r3, [r7, #3]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10f      	bne.n	801273c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801271c:	2100      	movs	r1, #0
 801271e:	480a      	ldr	r0, [pc, #40]	@ (8012748 <pbuf_pool_is_empty+0x50>)
 8012720:	f7fe f840 	bl	80107a4 <tcpip_try_callback>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d008      	beq.n	801273c <pbuf_pool_is_empty+0x44>
 801272a:	f00a f967 	bl	801c9fc <sys_arch_protect>
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	4b04      	ldr	r3, [pc, #16]	@ (8012744 <pbuf_pool_is_empty+0x4c>)
 8012732:	2200      	movs	r2, #0
 8012734:	701a      	strb	r2, [r3, #0]
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f00a f96e 	bl	801ca18 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801273c:	bf00      	nop
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	2000f391 	.word	0x2000f391
 8012748:	080126e5 	.word	0x080126e5

0801274c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	4611      	mov	r1, r2
 8012758:	461a      	mov	r2, r3
 801275a:	460b      	mov	r3, r1
 801275c:	80fb      	strh	r3, [r7, #6]
 801275e:	4613      	mov	r3, r2
 8012760:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2200      	movs	r2, #0
 8012766:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	68ba      	ldr	r2, [r7, #8]
 801276c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	88fa      	ldrh	r2, [r7, #6]
 8012772:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	88ba      	ldrh	r2, [r7, #4]
 8012778:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801277a:	8b3b      	ldrh	r3, [r7, #24]
 801277c:	b2da      	uxtb	r2, r3
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	7f3a      	ldrb	r2, [r7, #28]
 8012786:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	2201      	movs	r2, #1
 801278c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	2200      	movs	r2, #0
 8012792:	73da      	strb	r2, [r3, #15]
}
 8012794:	bf00      	nop
 8012796:	3714      	adds	r7, #20
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b08c      	sub	sp, #48	@ 0x30
 80127a4:	af02      	add	r7, sp, #8
 80127a6:	4603      	mov	r3, r0
 80127a8:	71fb      	strb	r3, [r7, #7]
 80127aa:	460b      	mov	r3, r1
 80127ac:	80bb      	strh	r3, [r7, #4]
 80127ae:	4613      	mov	r3, r2
 80127b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80127b2:	79fb      	ldrb	r3, [r7, #7]
 80127b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80127b6:	887b      	ldrh	r3, [r7, #2]
 80127b8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80127bc:	d07f      	beq.n	80128be <pbuf_alloc+0x11e>
 80127be:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80127c2:	f300 80c8 	bgt.w	8012956 <pbuf_alloc+0x1b6>
 80127c6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80127ca:	d010      	beq.n	80127ee <pbuf_alloc+0x4e>
 80127cc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80127d0:	f300 80c1 	bgt.w	8012956 <pbuf_alloc+0x1b6>
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d002      	beq.n	80127de <pbuf_alloc+0x3e>
 80127d8:	2b41      	cmp	r3, #65	@ 0x41
 80127da:	f040 80bc 	bne.w	8012956 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80127de:	887a      	ldrh	r2, [r7, #2]
 80127e0:	88bb      	ldrh	r3, [r7, #4]
 80127e2:	4619      	mov	r1, r3
 80127e4:	2000      	movs	r0, #0
 80127e6:	f000 f8d1 	bl	801298c <pbuf_alloc_reference>
 80127ea:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80127ec:	e0bd      	b.n	801296a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80127f2:	2300      	movs	r3, #0
 80127f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80127f6:	88bb      	ldrh	r3, [r7, #4]
 80127f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80127fa:	200c      	movs	r0, #12
 80127fc:	f7ff fb9a 	bl	8011f34 <memp_malloc>
 8012800:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012808:	f7ff ff76 	bl	80126f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801280e:	2b00      	cmp	r3, #0
 8012810:	d002      	beq.n	8012818 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012814:	f000 faa8 	bl	8012d68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012818:	2300      	movs	r3, #0
 801281a:	e0a7      	b.n	801296c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801281c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801281e:	3303      	adds	r3, #3
 8012820:	b29b      	uxth	r3, r3
 8012822:	f023 0303 	bic.w	r3, r3, #3
 8012826:	b29b      	uxth	r3, r3
 8012828:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801282c:	b29b      	uxth	r3, r3
 801282e:	8b7a      	ldrh	r2, [r7, #26]
 8012830:	4293      	cmp	r3, r2
 8012832:	bf28      	it	cs
 8012834:	4613      	movcs	r3, r2
 8012836:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801283a:	3310      	adds	r3, #16
 801283c:	693a      	ldr	r2, [r7, #16]
 801283e:	4413      	add	r3, r2
 8012840:	3303      	adds	r3, #3
 8012842:	f023 0303 	bic.w	r3, r3, #3
 8012846:	4618      	mov	r0, r3
 8012848:	89f9      	ldrh	r1, [r7, #14]
 801284a:	8b7a      	ldrh	r2, [r7, #26]
 801284c:	2300      	movs	r3, #0
 801284e:	9301      	str	r3, [sp, #4]
 8012850:	887b      	ldrh	r3, [r7, #2]
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	460b      	mov	r3, r1
 8012856:	4601      	mov	r1, r0
 8012858:	6938      	ldr	r0, [r7, #16]
 801285a:	f7ff ff77 	bl	801274c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	f003 0303 	and.w	r3, r3, #3
 8012866:	2b00      	cmp	r3, #0
 8012868:	d006      	beq.n	8012878 <pbuf_alloc+0xd8>
 801286a:	4b42      	ldr	r3, [pc, #264]	@ (8012974 <pbuf_alloc+0x1d4>)
 801286c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012870:	4941      	ldr	r1, [pc, #260]	@ (8012978 <pbuf_alloc+0x1d8>)
 8012872:	4842      	ldr	r0, [pc, #264]	@ (801297c <pbuf_alloc+0x1dc>)
 8012874:	f00a fe38 	bl	801d4e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801287a:	3303      	adds	r3, #3
 801287c:	f023 0303 	bic.w	r3, r3, #3
 8012880:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012884:	d106      	bne.n	8012894 <pbuf_alloc+0xf4>
 8012886:	4b3b      	ldr	r3, [pc, #236]	@ (8012974 <pbuf_alloc+0x1d4>)
 8012888:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801288c:	493c      	ldr	r1, [pc, #240]	@ (8012980 <pbuf_alloc+0x1e0>)
 801288e:	483b      	ldr	r0, [pc, #236]	@ (801297c <pbuf_alloc+0x1dc>)
 8012890:	f00a fe2a 	bl	801d4e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012896:	2b00      	cmp	r3, #0
 8012898:	d102      	bne.n	80128a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	627b      	str	r3, [r7, #36]	@ 0x24
 801289e:	e002      	b.n	80128a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	693a      	ldr	r2, [r7, #16]
 80128a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80128aa:	8b7a      	ldrh	r2, [r7, #26]
 80128ac:	89fb      	ldrh	r3, [r7, #14]
 80128ae:	1ad3      	subs	r3, r2, r3
 80128b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80128b2:	2300      	movs	r3, #0
 80128b4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80128b6:	8b7b      	ldrh	r3, [r7, #26]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d19e      	bne.n	80127fa <pbuf_alloc+0x5a>
      break;
 80128bc:	e055      	b.n	801296a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80128be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80128c0:	3303      	adds	r3, #3
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	f023 0303 	bic.w	r3, r3, #3
 80128c8:	b29a      	uxth	r2, r3
 80128ca:	88bb      	ldrh	r3, [r7, #4]
 80128cc:	3303      	adds	r3, #3
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	f023 0303 	bic.w	r3, r3, #3
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	4413      	add	r3, r2
 80128d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80128da:	8b3b      	ldrh	r3, [r7, #24]
 80128dc:	3310      	adds	r3, #16
 80128de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80128e0:	8b3a      	ldrh	r2, [r7, #24]
 80128e2:	88bb      	ldrh	r3, [r7, #4]
 80128e4:	3303      	adds	r3, #3
 80128e6:	f023 0303 	bic.w	r3, r3, #3
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d306      	bcc.n	80128fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80128ee:	8afa      	ldrh	r2, [r7, #22]
 80128f0:	88bb      	ldrh	r3, [r7, #4]
 80128f2:	3303      	adds	r3, #3
 80128f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d201      	bcs.n	8012900 <pbuf_alloc+0x160>
        return NULL;
 80128fc:	2300      	movs	r3, #0
 80128fe:	e035      	b.n	801296c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012900:	8afb      	ldrh	r3, [r7, #22]
 8012902:	4618      	mov	r0, r3
 8012904:	f7ff f972 	bl	8011bec <mem_malloc>
 8012908:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290c:	2b00      	cmp	r3, #0
 801290e:	d101      	bne.n	8012914 <pbuf_alloc+0x174>
        return NULL;
 8012910:	2300      	movs	r3, #0
 8012912:	e02b      	b.n	801296c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012914:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012916:	3310      	adds	r3, #16
 8012918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801291a:	4413      	add	r3, r2
 801291c:	3303      	adds	r3, #3
 801291e:	f023 0303 	bic.w	r3, r3, #3
 8012922:	4618      	mov	r0, r3
 8012924:	88b9      	ldrh	r1, [r7, #4]
 8012926:	88ba      	ldrh	r2, [r7, #4]
 8012928:	2300      	movs	r3, #0
 801292a:	9301      	str	r3, [sp, #4]
 801292c:	887b      	ldrh	r3, [r7, #2]
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	460b      	mov	r3, r1
 8012932:	4601      	mov	r1, r0
 8012934:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012936:	f7ff ff09 	bl	801274c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	f003 0303 	and.w	r3, r3, #3
 8012942:	2b00      	cmp	r3, #0
 8012944:	d010      	beq.n	8012968 <pbuf_alloc+0x1c8>
 8012946:	4b0b      	ldr	r3, [pc, #44]	@ (8012974 <pbuf_alloc+0x1d4>)
 8012948:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801294c:	490d      	ldr	r1, [pc, #52]	@ (8012984 <pbuf_alloc+0x1e4>)
 801294e:	480b      	ldr	r0, [pc, #44]	@ (801297c <pbuf_alloc+0x1dc>)
 8012950:	f00a fdca 	bl	801d4e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012954:	e008      	b.n	8012968 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012956:	4b07      	ldr	r3, [pc, #28]	@ (8012974 <pbuf_alloc+0x1d4>)
 8012958:	f240 1227 	movw	r2, #295	@ 0x127
 801295c:	490a      	ldr	r1, [pc, #40]	@ (8012988 <pbuf_alloc+0x1e8>)
 801295e:	4807      	ldr	r0, [pc, #28]	@ (801297c <pbuf_alloc+0x1dc>)
 8012960:	f00a fdc2 	bl	801d4e8 <iprintf>
      return NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	e001      	b.n	801296c <pbuf_alloc+0x1cc>
      break;
 8012968:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801296c:	4618      	mov	r0, r3
 801296e:	3728      	adds	r7, #40	@ 0x28
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	08020e4c 	.word	0x08020e4c
 8012978:	08020e7c 	.word	0x08020e7c
 801297c:	08020eac 	.word	0x08020eac
 8012980:	08020ed4 	.word	0x08020ed4
 8012984:	08020f08 	.word	0x08020f08
 8012988:	08020f34 	.word	0x08020f34

0801298c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af02      	add	r7, sp, #8
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	460b      	mov	r3, r1
 8012996:	807b      	strh	r3, [r7, #2]
 8012998:	4613      	mov	r3, r2
 801299a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801299c:	883b      	ldrh	r3, [r7, #0]
 801299e:	2b41      	cmp	r3, #65	@ 0x41
 80129a0:	d009      	beq.n	80129b6 <pbuf_alloc_reference+0x2a>
 80129a2:	883b      	ldrh	r3, [r7, #0]
 80129a4:	2b01      	cmp	r3, #1
 80129a6:	d006      	beq.n	80129b6 <pbuf_alloc_reference+0x2a>
 80129a8:	4b0f      	ldr	r3, [pc, #60]	@ (80129e8 <pbuf_alloc_reference+0x5c>)
 80129aa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80129ae:	490f      	ldr	r1, [pc, #60]	@ (80129ec <pbuf_alloc_reference+0x60>)
 80129b0:	480f      	ldr	r0, [pc, #60]	@ (80129f0 <pbuf_alloc_reference+0x64>)
 80129b2:	f00a fd99 	bl	801d4e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80129b6:	200b      	movs	r0, #11
 80129b8:	f7ff fabc 	bl	8011f34 <memp_malloc>
 80129bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d101      	bne.n	80129c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	e00b      	b.n	80129e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80129c8:	8879      	ldrh	r1, [r7, #2]
 80129ca:	887a      	ldrh	r2, [r7, #2]
 80129cc:	2300      	movs	r3, #0
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	883b      	ldrh	r3, [r7, #0]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	460b      	mov	r3, r1
 80129d6:	6879      	ldr	r1, [r7, #4]
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f7ff feb7 	bl	801274c <pbuf_init_alloced_pbuf>
  return p;
 80129de:	68fb      	ldr	r3, [r7, #12]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3710      	adds	r7, #16
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	08020e4c 	.word	0x08020e4c
 80129ec:	08020f50 	.word	0x08020f50
 80129f0:	08020eac 	.word	0x08020eac

080129f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b088      	sub	sp, #32
 80129f8:	af02      	add	r7, sp, #8
 80129fa:	607b      	str	r3, [r7, #4]
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]
 8012a00:	460b      	mov	r3, r1
 8012a02:	81bb      	strh	r3, [r7, #12]
 8012a04:	4613      	mov	r3, r2
 8012a06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012a0c:	8a7b      	ldrh	r3, [r7, #18]
 8012a0e:	3303      	adds	r3, #3
 8012a10:	f023 0203 	bic.w	r2, r3, #3
 8012a14:	89bb      	ldrh	r3, [r7, #12]
 8012a16:	441a      	add	r2, r3
 8012a18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d901      	bls.n	8012a22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	e018      	b.n	8012a54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d007      	beq.n	8012a38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012a28:	8a7b      	ldrh	r3, [r7, #18]
 8012a2a:	3303      	adds	r3, #3
 8012a2c:	f023 0303 	bic.w	r3, r3, #3
 8012a30:	6a3a      	ldr	r2, [r7, #32]
 8012a32:	4413      	add	r3, r2
 8012a34:	617b      	str	r3, [r7, #20]
 8012a36:	e001      	b.n	8012a3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	89b9      	ldrh	r1, [r7, #12]
 8012a40:	89ba      	ldrh	r2, [r7, #12]
 8012a42:	2302      	movs	r3, #2
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	897b      	ldrh	r3, [r7, #10]
 8012a48:	9300      	str	r3, [sp, #0]
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	6979      	ldr	r1, [r7, #20]
 8012a4e:	f7ff fe7d 	bl	801274c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012a52:	687b      	ldr	r3, [r7, #4]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3718      	adds	r7, #24
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	460b      	mov	r3, r1
 8012a66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <pbuf_realloc+0x20>
 8012a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8012b58 <pbuf_realloc+0xfc>)
 8012a70:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012a74:	4939      	ldr	r1, [pc, #228]	@ (8012b5c <pbuf_realloc+0x100>)
 8012a76:	483a      	ldr	r0, [pc, #232]	@ (8012b60 <pbuf_realloc+0x104>)
 8012a78:	f00a fd36 	bl	801d4e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	891b      	ldrh	r3, [r3, #8]
 8012a80:	887a      	ldrh	r2, [r7, #2]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d263      	bcs.n	8012b4e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	891a      	ldrh	r2, [r3, #8]
 8012a8a:	887b      	ldrh	r3, [r7, #2]
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012a90:	887b      	ldrh	r3, [r7, #2]
 8012a92:	817b      	strh	r3, [r7, #10]
  q = p;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012a98:	e018      	b.n	8012acc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	895b      	ldrh	r3, [r3, #10]
 8012a9e:	897a      	ldrh	r2, [r7, #10]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	891a      	ldrh	r2, [r3, #8]
 8012aa8:	893b      	ldrh	r3, [r7, #8]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d106      	bne.n	8012acc <pbuf_realloc+0x70>
 8012abe:	4b26      	ldr	r3, [pc, #152]	@ (8012b58 <pbuf_realloc+0xfc>)
 8012ac0:	f240 12af 	movw	r2, #431	@ 0x1af
 8012ac4:	4927      	ldr	r1, [pc, #156]	@ (8012b64 <pbuf_realloc+0x108>)
 8012ac6:	4826      	ldr	r0, [pc, #152]	@ (8012b60 <pbuf_realloc+0x104>)
 8012ac8:	f00a fd0e 	bl	801d4e8 <iprintf>
  while (rem_len > q->len) {
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	895b      	ldrh	r3, [r3, #10]
 8012ad0:	897a      	ldrh	r2, [r7, #10]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d8e1      	bhi.n	8012a9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	7b1b      	ldrb	r3, [r3, #12]
 8012ada:	f003 030f 	and.w	r3, r3, #15
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d121      	bne.n	8012b26 <pbuf_realloc+0xca>
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	895b      	ldrh	r3, [r3, #10]
 8012ae6:	897a      	ldrh	r2, [r7, #10]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d01c      	beq.n	8012b26 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	7b5b      	ldrb	r3, [r3, #13]
 8012af0:	f003 0302 	and.w	r3, r3, #2
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d116      	bne.n	8012b26 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	685a      	ldr	r2, [r3, #4]
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	1ad3      	subs	r3, r2, r3
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	897b      	ldrh	r3, [r7, #10]
 8012b04:	4413      	add	r3, r2
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	4619      	mov	r1, r3
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	f7fe ff64 	bl	80119d8 <mem_trim>
 8012b10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d106      	bne.n	8012b26 <pbuf_realloc+0xca>
 8012b18:	4b0f      	ldr	r3, [pc, #60]	@ (8012b58 <pbuf_realloc+0xfc>)
 8012b1a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012b1e:	4912      	ldr	r1, [pc, #72]	@ (8012b68 <pbuf_realloc+0x10c>)
 8012b20:	480f      	ldr	r0, [pc, #60]	@ (8012b60 <pbuf_realloc+0x104>)
 8012b22:	f00a fce1 	bl	801d4e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	897a      	ldrh	r2, [r7, #10]
 8012b2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	895a      	ldrh	r2, [r3, #10]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d004      	beq.n	8012b46 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f000 f911 	bl	8012d68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	601a      	str	r2, [r3, #0]
 8012b4c:	e000      	b.n	8012b50 <pbuf_realloc+0xf4>
    return;
 8012b4e:	bf00      	nop

}
 8012b50:	3710      	adds	r7, #16
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	08020e4c 	.word	0x08020e4c
 8012b5c:	08020f64 	.word	0x08020f64
 8012b60:	08020eac 	.word	0x08020eac
 8012b64:	08020f7c 	.word	0x08020f7c
 8012b68:	08020f94 	.word	0x08020f94

08012b6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	4613      	mov	r3, r2
 8012b78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d106      	bne.n	8012b8e <pbuf_add_header_impl+0x22>
 8012b80:	4b2b      	ldr	r3, [pc, #172]	@ (8012c30 <pbuf_add_header_impl+0xc4>)
 8012b82:	f240 12df 	movw	r2, #479	@ 0x1df
 8012b86:	492b      	ldr	r1, [pc, #172]	@ (8012c34 <pbuf_add_header_impl+0xc8>)
 8012b88:	482b      	ldr	r0, [pc, #172]	@ (8012c38 <pbuf_add_header_impl+0xcc>)
 8012b8a:	f00a fcad 	bl	801d4e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d003      	beq.n	8012b9c <pbuf_add_header_impl+0x30>
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b9a:	d301      	bcc.n	8012ba0 <pbuf_add_header_impl+0x34>
    return 1;
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	e043      	b.n	8012c28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d101      	bne.n	8012baa <pbuf_add_header_impl+0x3e>
    return 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	e03e      	b.n	8012c28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	891a      	ldrh	r2, [r3, #8]
 8012bb2:	8a7b      	ldrh	r3, [r7, #18]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	8a7a      	ldrh	r2, [r7, #18]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d901      	bls.n	8012bc2 <pbuf_add_header_impl+0x56>
    return 1;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	e032      	b.n	8012c28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	7b1b      	ldrb	r3, [r3, #12]
 8012bc6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012bc8:	8a3b      	ldrh	r3, [r7, #16]
 8012bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00c      	beq.n	8012bec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	685a      	ldr	r2, [r3, #4]
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	425b      	negs	r3, r3
 8012bda:	4413      	add	r3, r2
 8012bdc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	3310      	adds	r3, #16
 8012be2:	697a      	ldr	r2, [r7, #20]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d20d      	bcs.n	8012c04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012be8:	2301      	movs	r3, #1
 8012bea:	e01d      	b.n	8012c28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012bec:	79fb      	ldrb	r3, [r7, #7]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d006      	beq.n	8012c00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	425b      	negs	r3, r3
 8012bfa:	4413      	add	r3, r2
 8012bfc:	617b      	str	r3, [r7, #20]
 8012bfe:	e001      	b.n	8012c04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012c00:	2301      	movs	r3, #1
 8012c02:	e011      	b.n	8012c28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	697a      	ldr	r2, [r7, #20]
 8012c08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	895a      	ldrh	r2, [r3, #10]
 8012c0e:	8a7b      	ldrh	r3, [r7, #18]
 8012c10:	4413      	add	r3, r2
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	891a      	ldrh	r2, [r3, #8]
 8012c1c:	8a7b      	ldrh	r3, [r7, #18]
 8012c1e:	4413      	add	r3, r2
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	811a      	strh	r2, [r3, #8]


  return 0;
 8012c26:	2300      	movs	r3, #0
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3718      	adds	r7, #24
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}
 8012c30:	08020e4c 	.word	0x08020e4c
 8012c34:	08020fb0 	.word	0x08020fb0
 8012c38:	08020eac 	.word	0x08020eac

08012c3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012c46:	2200      	movs	r2, #0
 8012c48:	6839      	ldr	r1, [r7, #0]
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7ff ff8e 	bl	8012b6c <pbuf_add_header_impl>
 8012c50:	4603      	mov	r3, r0
}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
	...

08012c5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <pbuf_remove_header+0x1e>
 8012c6c:	4b20      	ldr	r3, [pc, #128]	@ (8012cf0 <pbuf_remove_header+0x94>)
 8012c6e:	f240 224b 	movw	r2, #587	@ 0x24b
 8012c72:	4920      	ldr	r1, [pc, #128]	@ (8012cf4 <pbuf_remove_header+0x98>)
 8012c74:	4820      	ldr	r0, [pc, #128]	@ (8012cf8 <pbuf_remove_header+0x9c>)
 8012c76:	f00a fc37 	bl	801d4e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d003      	beq.n	8012c88 <pbuf_remove_header+0x2c>
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c86:	d301      	bcc.n	8012c8c <pbuf_remove_header+0x30>
    return 1;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	e02c      	b.n	8012ce6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d101      	bne.n	8012c96 <pbuf_remove_header+0x3a>
    return 0;
 8012c92:	2300      	movs	r3, #0
 8012c94:	e027      	b.n	8012ce6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	895b      	ldrh	r3, [r3, #10]
 8012c9e:	89fa      	ldrh	r2, [r7, #14]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d908      	bls.n	8012cb6 <pbuf_remove_header+0x5a>
 8012ca4:	4b12      	ldr	r3, [pc, #72]	@ (8012cf0 <pbuf_remove_header+0x94>)
 8012ca6:	f240 2255 	movw	r2, #597	@ 0x255
 8012caa:	4914      	ldr	r1, [pc, #80]	@ (8012cfc <pbuf_remove_header+0xa0>)
 8012cac:	4812      	ldr	r0, [pc, #72]	@ (8012cf8 <pbuf_remove_header+0x9c>)
 8012cae:	f00a fc1b 	bl	801d4e8 <iprintf>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e017      	b.n	8012ce6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	685a      	ldr	r2, [r3, #4]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	441a      	add	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	895a      	ldrh	r2, [r3, #10]
 8012ccc:	89fb      	ldrh	r3, [r7, #14]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	b29a      	uxth	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	891a      	ldrh	r2, [r3, #8]
 8012cda:	89fb      	ldrh	r3, [r7, #14]
 8012cdc:	1ad3      	subs	r3, r2, r3
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012ce4:	2300      	movs	r3, #0
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	08020e4c 	.word	0x08020e4c
 8012cf4:	08020fb0 	.word	0x08020fb0
 8012cf8:	08020eac 	.word	0x08020eac
 8012cfc:	08020fbc 	.word	0x08020fbc

08012d00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	460b      	mov	r3, r1
 8012d0a:	807b      	strh	r3, [r7, #2]
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012d10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	da08      	bge.n	8012d2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d1c:	425b      	negs	r3, r3
 8012d1e:	4619      	mov	r1, r3
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f7ff ff9b 	bl	8012c5c <pbuf_remove_header>
 8012d26:	4603      	mov	r3, r0
 8012d28:	e007      	b.n	8012d3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012d2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d2e:	787a      	ldrb	r2, [r7, #1]
 8012d30:	4619      	mov	r1, r3
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff ff1a 	bl	8012b6c <pbuf_add_header_impl>
 8012d38:	4603      	mov	r3, r0
  }
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3708      	adds	r7, #8
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}

08012d42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b082      	sub	sp, #8
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012d4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d52:	2201      	movs	r2, #1
 8012d54:	4619      	mov	r1, r3
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7ff ffd2 	bl	8012d00 <pbuf_header_impl>
 8012d5c:	4603      	mov	r3, r0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3708      	adds	r7, #8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
	...

08012d68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b088      	sub	sp, #32
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d10b      	bne.n	8012d8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d106      	bne.n	8012d8a <pbuf_free+0x22>
 8012d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8012e6c <pbuf_free+0x104>)
 8012d7e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012d82:	493b      	ldr	r1, [pc, #236]	@ (8012e70 <pbuf_free+0x108>)
 8012d84:	483b      	ldr	r0, [pc, #236]	@ (8012e74 <pbuf_free+0x10c>)
 8012d86:	f00a fbaf 	bl	801d4e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	e069      	b.n	8012e62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012d92:	e062      	b.n	8012e5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012d94:	f009 fe32 	bl	801c9fc <sys_arch_protect>
 8012d98:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	7b9b      	ldrb	r3, [r3, #14]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d106      	bne.n	8012db0 <pbuf_free+0x48>
 8012da2:	4b32      	ldr	r3, [pc, #200]	@ (8012e6c <pbuf_free+0x104>)
 8012da4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012da8:	4933      	ldr	r1, [pc, #204]	@ (8012e78 <pbuf_free+0x110>)
 8012daa:	4832      	ldr	r0, [pc, #200]	@ (8012e74 <pbuf_free+0x10c>)
 8012dac:	f00a fb9c 	bl	801d4e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	7b9b      	ldrb	r3, [r3, #14]
 8012db4:	3b01      	subs	r3, #1
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	739a      	strb	r2, [r3, #14]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	7b9b      	ldrb	r3, [r3, #14]
 8012dc0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012dc2:	69b8      	ldr	r0, [r7, #24]
 8012dc4:	f009 fe28 	bl	801ca18 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012dc8:	7dfb      	ldrb	r3, [r7, #23]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d143      	bne.n	8012e56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	7b1b      	ldrb	r3, [r3, #12]
 8012dd8:	f003 030f 	and.w	r3, r3, #15
 8012ddc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	7b5b      	ldrb	r3, [r3, #13]
 8012de2:	f003 0302 	and.w	r3, r3, #2
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d011      	beq.n	8012e0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	691b      	ldr	r3, [r3, #16]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <pbuf_free+0x9c>
 8012df6:	4b1d      	ldr	r3, [pc, #116]	@ (8012e6c <pbuf_free+0x104>)
 8012df8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012dfc:	491f      	ldr	r1, [pc, #124]	@ (8012e7c <pbuf_free+0x114>)
 8012dfe:	481d      	ldr	r0, [pc, #116]	@ (8012e74 <pbuf_free+0x10c>)
 8012e00:	f00a fb72 	bl	801d4e8 <iprintf>
        pc->custom_free_function(p);
 8012e04:	68bb      	ldr	r3, [r7, #8]
 8012e06:	691b      	ldr	r3, [r3, #16]
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	4798      	blx	r3
 8012e0c:	e01d      	b.n	8012e4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012e0e:	7bfb      	ldrb	r3, [r7, #15]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d104      	bne.n	8012e1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012e14:	6879      	ldr	r1, [r7, #4]
 8012e16:	200c      	movs	r0, #12
 8012e18:	f7ff f902 	bl	8012020 <memp_free>
 8012e1c:	e015      	b.n	8012e4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012e1e:	7bfb      	ldrb	r3, [r7, #15]
 8012e20:	2b01      	cmp	r3, #1
 8012e22:	d104      	bne.n	8012e2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012e24:	6879      	ldr	r1, [r7, #4]
 8012e26:	200b      	movs	r0, #11
 8012e28:	f7ff f8fa 	bl	8012020 <memp_free>
 8012e2c:	e00d      	b.n	8012e4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d103      	bne.n	8012e3c <pbuf_free+0xd4>
          mem_free(p);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7fe fd3f 	bl	80118b8 <mem_free>
 8012e3a:	e006      	b.n	8012e4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8012e6c <pbuf_free+0x104>)
 8012e3e:	f240 320f 	movw	r2, #783	@ 0x30f
 8012e42:	490f      	ldr	r1, [pc, #60]	@ (8012e80 <pbuf_free+0x118>)
 8012e44:	480b      	ldr	r0, [pc, #44]	@ (8012e74 <pbuf_free+0x10c>)
 8012e46:	f00a fb4f 	bl	801d4e8 <iprintf>
        }
      }
      count++;
 8012e4a:	7ffb      	ldrb	r3, [r7, #31]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	607b      	str	r3, [r7, #4]
 8012e54:	e001      	b.n	8012e5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012e56:	2300      	movs	r3, #0
 8012e58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d199      	bne.n	8012d94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e62:	4618      	mov	r0, r3
 8012e64:	3720      	adds	r7, #32
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08020e4c 	.word	0x08020e4c
 8012e70:	08020fb0 	.word	0x08020fb0
 8012e74:	08020eac 	.word	0x08020eac
 8012e78:	08020fdc 	.word	0x08020fdc
 8012e7c:	08020ff4 	.word	0x08020ff4
 8012e80:	08021018 	.word	0x08021018

08012e84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b085      	sub	sp, #20
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012e90:	e005      	b.n	8012e9e <pbuf_clen+0x1a>
    ++len;
 8012e92:	89fb      	ldrh	r3, [r7, #14]
 8012e94:	3301      	adds	r3, #1
 8012e96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d1f6      	bne.n	8012e92 <pbuf_clen+0xe>
  }
  return len;
 8012ea4:	89fb      	ldrh	r3, [r7, #14]
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
	...

08012eb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d016      	beq.n	8012ef0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012ec2:	f009 fd9b 	bl	801c9fc <sys_arch_protect>
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	7b9b      	ldrb	r3, [r3, #14]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	b2da      	uxtb	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	739a      	strb	r2, [r3, #14]
 8012ed4:	68f8      	ldr	r0, [r7, #12]
 8012ed6:	f009 fd9f 	bl	801ca18 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	7b9b      	ldrb	r3, [r3, #14]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <pbuf_ref+0x3c>
 8012ee2:	4b05      	ldr	r3, [pc, #20]	@ (8012ef8 <pbuf_ref+0x44>)
 8012ee4:	f240 3242 	movw	r2, #834	@ 0x342
 8012ee8:	4904      	ldr	r1, [pc, #16]	@ (8012efc <pbuf_ref+0x48>)
 8012eea:	4805      	ldr	r0, [pc, #20]	@ (8012f00 <pbuf_ref+0x4c>)
 8012eec:	f00a fafc 	bl	801d4e8 <iprintf>
  }
}
 8012ef0:	bf00      	nop
 8012ef2:	3710      	adds	r7, #16
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}
 8012ef8:	08020e4c 	.word	0x08020e4c
 8012efc:	0802102c 	.word	0x0802102c
 8012f00:	08020eac 	.word	0x08020eac

08012f04 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d002      	beq.n	8012f1a <pbuf_cat+0x16>
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d107      	bne.n	8012f2a <pbuf_cat+0x26>
 8012f1a:	4b20      	ldr	r3, [pc, #128]	@ (8012f9c <pbuf_cat+0x98>)
 8012f1c:	f240 3259 	movw	r2, #857	@ 0x359
 8012f20:	491f      	ldr	r1, [pc, #124]	@ (8012fa0 <pbuf_cat+0x9c>)
 8012f22:	4820      	ldr	r0, [pc, #128]	@ (8012fa4 <pbuf_cat+0xa0>)
 8012f24:	f00a fae0 	bl	801d4e8 <iprintf>
 8012f28:	e034      	b.n	8012f94 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	60fb      	str	r3, [r7, #12]
 8012f2e:	e00a      	b.n	8012f46 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	891a      	ldrh	r2, [r3, #8]
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	891b      	ldrh	r3, [r3, #8]
 8012f38:	4413      	add	r3, r2
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	60fb      	str	r3, [r7, #12]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d1f0      	bne.n	8012f30 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	891a      	ldrh	r2, [r3, #8]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	895b      	ldrh	r3, [r3, #10]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d006      	beq.n	8012f68 <pbuf_cat+0x64>
 8012f5a:	4b10      	ldr	r3, [pc, #64]	@ (8012f9c <pbuf_cat+0x98>)
 8012f5c:	f240 3262 	movw	r2, #866	@ 0x362
 8012f60:	4911      	ldr	r1, [pc, #68]	@ (8012fa8 <pbuf_cat+0xa4>)
 8012f62:	4810      	ldr	r0, [pc, #64]	@ (8012fa4 <pbuf_cat+0xa0>)
 8012f64:	f00a fac0 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d006      	beq.n	8012f7e <pbuf_cat+0x7a>
 8012f70:	4b0a      	ldr	r3, [pc, #40]	@ (8012f9c <pbuf_cat+0x98>)
 8012f72:	f240 3263 	movw	r2, #867	@ 0x363
 8012f76:	490d      	ldr	r1, [pc, #52]	@ (8012fac <pbuf_cat+0xa8>)
 8012f78:	480a      	ldr	r0, [pc, #40]	@ (8012fa4 <pbuf_cat+0xa0>)
 8012f7a:	f00a fab5 	bl	801d4e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	891a      	ldrh	r2, [r3, #8]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	891b      	ldrh	r3, [r3, #8]
 8012f86:	4413      	add	r3, r2
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	683a      	ldr	r2, [r7, #0]
 8012f92:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	08020e4c 	.word	0x08020e4c
 8012fa0:	08021040 	.word	0x08021040
 8012fa4:	08020eac 	.word	0x08020eac
 8012fa8:	08021078 	.word	0x08021078
 8012fac:	080210a8 	.word	0x080210a8

08012fb0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b082      	sub	sp, #8
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012fba:	6839      	ldr	r1, [r7, #0]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff ffa1 	bl	8012f04 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012fc2:	6838      	ldr	r0, [r7, #0]
 8012fc4:	f7ff ff76 	bl	8012eb4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012fc8:	bf00      	nop
 8012fca:	3708      	adds	r7, #8
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}

08012fd0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
 8012fd8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	617b      	str	r3, [r7, #20]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d008      	beq.n	8012ffa <pbuf_copy+0x2a>
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d005      	beq.n	8012ffa <pbuf_copy+0x2a>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	891a      	ldrh	r2, [r3, #8]
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	891b      	ldrh	r3, [r3, #8]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d209      	bcs.n	801300e <pbuf_copy+0x3e>
 8012ffa:	4b57      	ldr	r3, [pc, #348]	@ (8013158 <pbuf_copy+0x188>)
 8012ffc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013000:	4956      	ldr	r1, [pc, #344]	@ (801315c <pbuf_copy+0x18c>)
 8013002:	4857      	ldr	r0, [pc, #348]	@ (8013160 <pbuf_copy+0x190>)
 8013004:	f00a fa70 	bl	801d4e8 <iprintf>
 8013008:	f06f 030f 	mvn.w	r3, #15
 801300c:	e09f      	b.n	801314e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	895b      	ldrh	r3, [r3, #10]
 8013012:	461a      	mov	r2, r3
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	1ad2      	subs	r2, r2, r3
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	895b      	ldrh	r3, [r3, #10]
 801301c:	4619      	mov	r1, r3
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	1acb      	subs	r3, r1, r3
 8013022:	429a      	cmp	r2, r3
 8013024:	d306      	bcc.n	8013034 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	895b      	ldrh	r3, [r3, #10]
 801302a:	461a      	mov	r2, r3
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	1ad3      	subs	r3, r2, r3
 8013030:	60fb      	str	r3, [r7, #12]
 8013032:	e005      	b.n	8013040 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	895b      	ldrh	r3, [r3, #10]
 8013038:	461a      	mov	r2, r3
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	1ad3      	subs	r3, r2, r3
 801303e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	685a      	ldr	r2, [r3, #4]
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	18d0      	adds	r0, r2, r3
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	685a      	ldr	r2, [r3, #4]
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	4413      	add	r3, r2
 8013050:	68fa      	ldr	r2, [r7, #12]
 8013052:	4619      	mov	r1, r3
 8013054:	f00a fbd5 	bl	801d802 <memcpy>
    offset_to += len;
 8013058:	697a      	ldr	r2, [r7, #20]
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	4413      	add	r3, r2
 801305e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013060:	693a      	ldr	r2, [r7, #16]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	4413      	add	r3, r2
 8013066:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	895b      	ldrh	r3, [r3, #10]
 801306c:	461a      	mov	r2, r3
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	4293      	cmp	r3, r2
 8013072:	d906      	bls.n	8013082 <pbuf_copy+0xb2>
 8013074:	4b38      	ldr	r3, [pc, #224]	@ (8013158 <pbuf_copy+0x188>)
 8013076:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801307a:	493a      	ldr	r1, [pc, #232]	@ (8013164 <pbuf_copy+0x194>)
 801307c:	4838      	ldr	r0, [pc, #224]	@ (8013160 <pbuf_copy+0x190>)
 801307e:	f00a fa33 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	895b      	ldrh	r3, [r3, #10]
 8013086:	461a      	mov	r2, r3
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	4293      	cmp	r3, r2
 801308c:	d906      	bls.n	801309c <pbuf_copy+0xcc>
 801308e:	4b32      	ldr	r3, [pc, #200]	@ (8013158 <pbuf_copy+0x188>)
 8013090:	f240 32da 	movw	r2, #986	@ 0x3da
 8013094:	4934      	ldr	r1, [pc, #208]	@ (8013168 <pbuf_copy+0x198>)
 8013096:	4832      	ldr	r0, [pc, #200]	@ (8013160 <pbuf_copy+0x190>)
 8013098:	f00a fa26 	bl	801d4e8 <iprintf>
    if (offset_from >= p_from->len) {
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	895b      	ldrh	r3, [r3, #10]
 80130a0:	461a      	mov	r2, r3
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d304      	bcc.n	80130b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80130a8:	2300      	movs	r3, #0
 80130aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	895b      	ldrh	r3, [r3, #10]
 80130b6:	461a      	mov	r2, r3
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d114      	bne.n	80130e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80130be:	2300      	movs	r3, #0
 80130c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d10c      	bne.n	80130e8 <pbuf_copy+0x118>
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d009      	beq.n	80130e8 <pbuf_copy+0x118>
 80130d4:	4b20      	ldr	r3, [pc, #128]	@ (8013158 <pbuf_copy+0x188>)
 80130d6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80130da:	4924      	ldr	r1, [pc, #144]	@ (801316c <pbuf_copy+0x19c>)
 80130dc:	4820      	ldr	r0, [pc, #128]	@ (8013160 <pbuf_copy+0x190>)
 80130de:	f00a fa03 	bl	801d4e8 <iprintf>
 80130e2:	f06f 030f 	mvn.w	r3, #15
 80130e6:	e032      	b.n	801314e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d013      	beq.n	8013116 <pbuf_copy+0x146>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	895a      	ldrh	r2, [r3, #10]
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	891b      	ldrh	r3, [r3, #8]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d10d      	bne.n	8013116 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d009      	beq.n	8013116 <pbuf_copy+0x146>
 8013102:	4b15      	ldr	r3, [pc, #84]	@ (8013158 <pbuf_copy+0x188>)
 8013104:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8013108:	4919      	ldr	r1, [pc, #100]	@ (8013170 <pbuf_copy+0x1a0>)
 801310a:	4815      	ldr	r0, [pc, #84]	@ (8013160 <pbuf_copy+0x190>)
 801310c:	f00a f9ec 	bl	801d4e8 <iprintf>
 8013110:	f06f 0305 	mvn.w	r3, #5
 8013114:	e01b      	b.n	801314e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d013      	beq.n	8013144 <pbuf_copy+0x174>
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	895a      	ldrh	r2, [r3, #10]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	891b      	ldrh	r3, [r3, #8]
 8013124:	429a      	cmp	r2, r3
 8013126:	d10d      	bne.n	8013144 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d009      	beq.n	8013144 <pbuf_copy+0x174>
 8013130:	4b09      	ldr	r3, [pc, #36]	@ (8013158 <pbuf_copy+0x188>)
 8013132:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8013136:	490e      	ldr	r1, [pc, #56]	@ (8013170 <pbuf_copy+0x1a0>)
 8013138:	4809      	ldr	r0, [pc, #36]	@ (8013160 <pbuf_copy+0x190>)
 801313a:	f00a f9d5 	bl	801d4e8 <iprintf>
 801313e:	f06f 0305 	mvn.w	r3, #5
 8013142:	e004      	b.n	801314e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	f47f af61 	bne.w	801300e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3718      	adds	r7, #24
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	08020e4c 	.word	0x08020e4c
 801315c:	080210f4 	.word	0x080210f4
 8013160:	08020eac 	.word	0x08020eac
 8013164:	08021124 	.word	0x08021124
 8013168:	0802113c 	.word	0x0802113c
 801316c:	08021158 	.word	0x08021158
 8013170:	08021168 	.word	0x08021168

08013174 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b088      	sub	sp, #32
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	4611      	mov	r1, r2
 8013180:	461a      	mov	r2, r3
 8013182:	460b      	mov	r3, r1
 8013184:	80fb      	strh	r3, [r7, #6]
 8013186:	4613      	mov	r3, r2
 8013188:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801318e:	2300      	movs	r3, #0
 8013190:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d108      	bne.n	80131aa <pbuf_copy_partial+0x36>
 8013198:	4b2b      	ldr	r3, [pc, #172]	@ (8013248 <pbuf_copy_partial+0xd4>)
 801319a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801319e:	492b      	ldr	r1, [pc, #172]	@ (801324c <pbuf_copy_partial+0xd8>)
 80131a0:	482b      	ldr	r0, [pc, #172]	@ (8013250 <pbuf_copy_partial+0xdc>)
 80131a2:	f00a f9a1 	bl	801d4e8 <iprintf>
 80131a6:	2300      	movs	r3, #0
 80131a8:	e04a      	b.n	8013240 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d108      	bne.n	80131c2 <pbuf_copy_partial+0x4e>
 80131b0:	4b25      	ldr	r3, [pc, #148]	@ (8013248 <pbuf_copy_partial+0xd4>)
 80131b2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80131b6:	4927      	ldr	r1, [pc, #156]	@ (8013254 <pbuf_copy_partial+0xe0>)
 80131b8:	4825      	ldr	r0, [pc, #148]	@ (8013250 <pbuf_copy_partial+0xdc>)
 80131ba:	f00a f995 	bl	801d4e8 <iprintf>
 80131be:	2300      	movs	r3, #0
 80131c0:	e03e      	b.n	8013240 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	61fb      	str	r3, [r7, #28]
 80131c6:	e034      	b.n	8013232 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80131c8:	88bb      	ldrh	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d00a      	beq.n	80131e4 <pbuf_copy_partial+0x70>
 80131ce:	69fb      	ldr	r3, [r7, #28]
 80131d0:	895b      	ldrh	r3, [r3, #10]
 80131d2:	88ba      	ldrh	r2, [r7, #4]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d305      	bcc.n	80131e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	895b      	ldrh	r3, [r3, #10]
 80131dc:	88ba      	ldrh	r2, [r7, #4]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	80bb      	strh	r3, [r7, #4]
 80131e2:	e023      	b.n	801322c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	895a      	ldrh	r2, [r3, #10]
 80131e8:	88bb      	ldrh	r3, [r7, #4]
 80131ea:	1ad3      	subs	r3, r2, r3
 80131ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80131ee:	8b3a      	ldrh	r2, [r7, #24]
 80131f0:	88fb      	ldrh	r3, [r7, #6]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d901      	bls.n	80131fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80131f6:	88fb      	ldrh	r3, [r7, #6]
 80131f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80131fa:	8b7b      	ldrh	r3, [r7, #26]
 80131fc:	68ba      	ldr	r2, [r7, #8]
 80131fe:	18d0      	adds	r0, r2, r3
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	685a      	ldr	r2, [r3, #4]
 8013204:	88bb      	ldrh	r3, [r7, #4]
 8013206:	4413      	add	r3, r2
 8013208:	8b3a      	ldrh	r2, [r7, #24]
 801320a:	4619      	mov	r1, r3
 801320c:	f00a faf9 	bl	801d802 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013210:	8afa      	ldrh	r2, [r7, #22]
 8013212:	8b3b      	ldrh	r3, [r7, #24]
 8013214:	4413      	add	r3, r2
 8013216:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013218:	8b7a      	ldrh	r2, [r7, #26]
 801321a:	8b3b      	ldrh	r3, [r7, #24]
 801321c:	4413      	add	r3, r2
 801321e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013220:	88fa      	ldrh	r2, [r7, #6]
 8013222:	8b3b      	ldrh	r3, [r7, #24]
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013228:	2300      	movs	r3, #0
 801322a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801322c:	69fb      	ldr	r3, [r7, #28]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	61fb      	str	r3, [r7, #28]
 8013232:	88fb      	ldrh	r3, [r7, #6]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d002      	beq.n	801323e <pbuf_copy_partial+0xca>
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d1c4      	bne.n	80131c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801323e:	8afb      	ldrh	r3, [r7, #22]
}
 8013240:	4618      	mov	r0, r3
 8013242:	3720      	adds	r7, #32
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	08020e4c 	.word	0x08020e4c
 801324c:	08021194 	.word	0x08021194
 8013250:	08020eac 	.word	0x08020eac
 8013254:	080211b4 	.word	0x080211b4

08013258 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	4603      	mov	r3, r0
 8013260:	603a      	str	r2, [r7, #0]
 8013262:	71fb      	strb	r3, [r7, #7]
 8013264:	460b      	mov	r3, r1
 8013266:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	8919      	ldrh	r1, [r3, #8]
 801326c:	88ba      	ldrh	r2, [r7, #4]
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	4618      	mov	r0, r3
 8013272:	f7ff fa95 	bl	80127a0 <pbuf_alloc>
 8013276:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d101      	bne.n	8013282 <pbuf_clone+0x2a>
    return NULL;
 801327e:	2300      	movs	r3, #0
 8013280:	e011      	b.n	80132a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013282:	6839      	ldr	r1, [r7, #0]
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f7ff fea3 	bl	8012fd0 <pbuf_copy>
 801328a:	4603      	mov	r3, r0
 801328c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801328e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d006      	beq.n	80132a4 <pbuf_clone+0x4c>
 8013296:	4b06      	ldr	r3, [pc, #24]	@ (80132b0 <pbuf_clone+0x58>)
 8013298:	f240 5224 	movw	r2, #1316	@ 0x524
 801329c:	4905      	ldr	r1, [pc, #20]	@ (80132b4 <pbuf_clone+0x5c>)
 801329e:	4806      	ldr	r0, [pc, #24]	@ (80132b8 <pbuf_clone+0x60>)
 80132a0:	f00a f922 	bl	801d4e8 <iprintf>
  return q;
 80132a4:	68fb      	ldr	r3, [r7, #12]
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3710      	adds	r7, #16
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	08020e4c 	.word	0x08020e4c
 80132b4:	080212c0 	.word	0x080212c0
 80132b8:	08020eac 	.word	0x08020eac

080132bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80132c0:	f009 fbba 	bl	801ca38 <rand>
 80132c4:	4603      	mov	r3, r0
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	4b01      	ldr	r3, [pc, #4]	@ (80132dc <tcp_init+0x20>)
 80132d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80132d8:	bf00      	nop
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	2000007c 	.word	0x2000007c

080132e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	7d1b      	ldrb	r3, [r3, #20]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d105      	bne.n	80132fc <tcp_free+0x1c>
 80132f0:	4b06      	ldr	r3, [pc, #24]	@ (801330c <tcp_free+0x2c>)
 80132f2:	22d4      	movs	r2, #212	@ 0xd4
 80132f4:	4906      	ldr	r1, [pc, #24]	@ (8013310 <tcp_free+0x30>)
 80132f6:	4807      	ldr	r0, [pc, #28]	@ (8013314 <tcp_free+0x34>)
 80132f8:	f00a f8f6 	bl	801d4e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80132fc:	6879      	ldr	r1, [r7, #4]
 80132fe:	2001      	movs	r0, #1
 8013300:	f7fe fe8e 	bl	8012020 <memp_free>
}
 8013304:	bf00      	nop
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	0802134c 	.word	0x0802134c
 8013310:	0802137c 	.word	0x0802137c
 8013314:	08021390 	.word	0x08021390

08013318 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	7d1b      	ldrb	r3, [r3, #20]
 8013324:	2b01      	cmp	r3, #1
 8013326:	d105      	bne.n	8013334 <tcp_free_listen+0x1c>
 8013328:	4b06      	ldr	r3, [pc, #24]	@ (8013344 <tcp_free_listen+0x2c>)
 801332a:	22df      	movs	r2, #223	@ 0xdf
 801332c:	4906      	ldr	r1, [pc, #24]	@ (8013348 <tcp_free_listen+0x30>)
 801332e:	4807      	ldr	r0, [pc, #28]	@ (801334c <tcp_free_listen+0x34>)
 8013330:	f00a f8da 	bl	801d4e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013334:	6879      	ldr	r1, [r7, #4]
 8013336:	2002      	movs	r0, #2
 8013338:	f7fe fe72 	bl	8012020 <memp_free>
}
 801333c:	bf00      	nop
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	0802134c 	.word	0x0802134c
 8013348:	080213b8 	.word	0x080213b8
 801334c:	08021390 	.word	0x08021390

08013350 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013354:	f001 f8ba 	bl	80144cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013358:	4b07      	ldr	r3, [pc, #28]	@ (8013378 <tcp_tmr+0x28>)
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	3301      	adds	r3, #1
 801335e:	b2da      	uxtb	r2, r3
 8013360:	4b05      	ldr	r3, [pc, #20]	@ (8013378 <tcp_tmr+0x28>)
 8013362:	701a      	strb	r2, [r3, #0]
 8013364:	4b04      	ldr	r3, [pc, #16]	@ (8013378 <tcp_tmr+0x28>)
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	f003 0301 	and.w	r3, r3, #1
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013370:	f000 fd6a 	bl	8013e48 <tcp_slowtmr>
  }
}
 8013374:	bf00      	nop
 8013376:	bd80      	pop	{r7, pc}
 8013378:	2000f3a9 	.word	0x2000f3a9

0801337c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d105      	bne.n	8013398 <tcp_remove_listener+0x1c>
 801338c:	4b0d      	ldr	r3, [pc, #52]	@ (80133c4 <tcp_remove_listener+0x48>)
 801338e:	22ff      	movs	r2, #255	@ 0xff
 8013390:	490d      	ldr	r1, [pc, #52]	@ (80133c8 <tcp_remove_listener+0x4c>)
 8013392:	480e      	ldr	r0, [pc, #56]	@ (80133cc <tcp_remove_listener+0x50>)
 8013394:	f00a f8a8 	bl	801d4e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	e00a      	b.n	80133b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133a2:	683a      	ldr	r2, [r7, #0]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d102      	bne.n	80133ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2200      	movs	r2, #0
 80133ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	60fb      	str	r3, [r7, #12]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1f1      	bne.n	801339e <tcp_remove_listener+0x22>
    }
  }
}
 80133ba:	bf00      	nop
 80133bc:	bf00      	nop
 80133be:	3710      	adds	r7, #16
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	0802134c 	.word	0x0802134c
 80133c8:	080213d4 	.word	0x080213d4
 80133cc:	08021390 	.word	0x08021390

080133d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d106      	bne.n	80133ec <tcp_listen_closed+0x1c>
 80133de:	4b14      	ldr	r3, [pc, #80]	@ (8013430 <tcp_listen_closed+0x60>)
 80133e0:	f240 1211 	movw	r2, #273	@ 0x111
 80133e4:	4913      	ldr	r1, [pc, #76]	@ (8013434 <tcp_listen_closed+0x64>)
 80133e6:	4814      	ldr	r0, [pc, #80]	@ (8013438 <tcp_listen_closed+0x68>)
 80133e8:	f00a f87e 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	7d1b      	ldrb	r3, [r3, #20]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d006      	beq.n	8013402 <tcp_listen_closed+0x32>
 80133f4:	4b0e      	ldr	r3, [pc, #56]	@ (8013430 <tcp_listen_closed+0x60>)
 80133f6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80133fa:	4910      	ldr	r1, [pc, #64]	@ (801343c <tcp_listen_closed+0x6c>)
 80133fc:	480e      	ldr	r0, [pc, #56]	@ (8013438 <tcp_listen_closed+0x68>)
 80133fe:	f00a f873 	bl	801d4e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013402:	2301      	movs	r3, #1
 8013404:	60fb      	str	r3, [r7, #12]
 8013406:	e00b      	b.n	8013420 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013408:	4a0d      	ldr	r2, [pc, #52]	@ (8013440 <tcp_listen_closed+0x70>)
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	6879      	ldr	r1, [r7, #4]
 8013414:	4618      	mov	r0, r3
 8013416:	f7ff ffb1 	bl	801337c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	3301      	adds	r3, #1
 801341e:	60fb      	str	r3, [r7, #12]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b03      	cmp	r3, #3
 8013424:	d9f0      	bls.n	8013408 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013426:	bf00      	nop
 8013428:	bf00      	nop
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	0802134c 	.word	0x0802134c
 8013434:	080213fc 	.word	0x080213fc
 8013438:	08021390 	.word	0x08021390
 801343c:	08021408 	.word	0x08021408
 8013440:	08024a54 	.word	0x08024a54

08013444 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013444:	b5b0      	push	{r4, r5, r7, lr}
 8013446:	b088      	sub	sp, #32
 8013448:	af04      	add	r7, sp, #16
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	460b      	mov	r3, r1
 801344e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d106      	bne.n	8013464 <tcp_close_shutdown+0x20>
 8013456:	4b63      	ldr	r3, [pc, #396]	@ (80135e4 <tcp_close_shutdown+0x1a0>)
 8013458:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801345c:	4962      	ldr	r1, [pc, #392]	@ (80135e8 <tcp_close_shutdown+0x1a4>)
 801345e:	4863      	ldr	r0, [pc, #396]	@ (80135ec <tcp_close_shutdown+0x1a8>)
 8013460:	f00a f842 	bl	801d4e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013464:	78fb      	ldrb	r3, [r7, #3]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d066      	beq.n	8013538 <tcp_close_shutdown+0xf4>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	7d1b      	ldrb	r3, [r3, #20]
 801346e:	2b04      	cmp	r3, #4
 8013470:	d003      	beq.n	801347a <tcp_close_shutdown+0x36>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	7d1b      	ldrb	r3, [r3, #20]
 8013476:	2b07      	cmp	r3, #7
 8013478:	d15e      	bne.n	8013538 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801347e:	2b00      	cmp	r3, #0
 8013480:	d104      	bne.n	801348c <tcp_close_shutdown+0x48>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013486:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801348a:	d055      	beq.n	8013538 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	8b5b      	ldrh	r3, [r3, #26]
 8013490:	f003 0310 	and.w	r3, r3, #16
 8013494:	2b00      	cmp	r3, #0
 8013496:	d106      	bne.n	80134a6 <tcp_close_shutdown+0x62>
 8013498:	4b52      	ldr	r3, [pc, #328]	@ (80135e4 <tcp_close_shutdown+0x1a0>)
 801349a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801349e:	4954      	ldr	r1, [pc, #336]	@ (80135f0 <tcp_close_shutdown+0x1ac>)
 80134a0:	4852      	ldr	r0, [pc, #328]	@ (80135ec <tcp_close_shutdown+0x1a8>)
 80134a2:	f00a f821 	bl	801d4e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80134ae:	687d      	ldr	r5, [r7, #4]
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	3304      	adds	r3, #4
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	8ad2      	ldrh	r2, [r2, #22]
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	8b09      	ldrh	r1, [r1, #24]
 80134bc:	9102      	str	r1, [sp, #8]
 80134be:	9201      	str	r2, [sp, #4]
 80134c0:	9300      	str	r3, [sp, #0]
 80134c2:	462b      	mov	r3, r5
 80134c4:	4622      	mov	r2, r4
 80134c6:	4601      	mov	r1, r0
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f005 fde7 	bl	801909c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f001 fbca 	bl	8014c68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80134d4:	4b47      	ldr	r3, [pc, #284]	@ (80135f4 <tcp_close_shutdown+0x1b0>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d105      	bne.n	80134ea <tcp_close_shutdown+0xa6>
 80134de:	4b45      	ldr	r3, [pc, #276]	@ (80135f4 <tcp_close_shutdown+0x1b0>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	68db      	ldr	r3, [r3, #12]
 80134e4:	4a43      	ldr	r2, [pc, #268]	@ (80135f4 <tcp_close_shutdown+0x1b0>)
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	e013      	b.n	8013512 <tcp_close_shutdown+0xce>
 80134ea:	4b42      	ldr	r3, [pc, #264]	@ (80135f4 <tcp_close_shutdown+0x1b0>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	60fb      	str	r3, [r7, #12]
 80134f0:	e00c      	b.n	801350c <tcp_close_shutdown+0xc8>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d104      	bne.n	8013506 <tcp_close_shutdown+0xc2>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	68da      	ldr	r2, [r3, #12]
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	60da      	str	r2, [r3, #12]
 8013504:	e005      	b.n	8013512 <tcp_close_shutdown+0xce>
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	60fb      	str	r3, [r7, #12]
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d1ef      	bne.n	80134f2 <tcp_close_shutdown+0xae>
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	60da      	str	r2, [r3, #12]
 8013518:	4b37      	ldr	r3, [pc, #220]	@ (80135f8 <tcp_close_shutdown+0x1b4>)
 801351a:	2201      	movs	r2, #1
 801351c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801351e:	4b37      	ldr	r3, [pc, #220]	@ (80135fc <tcp_close_shutdown+0x1b8>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	429a      	cmp	r2, r3
 8013526:	d102      	bne.n	801352e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013528:	f004 f85e 	bl	80175e8 <tcp_trigger_input_pcb_close>
 801352c:	e002      	b.n	8013534 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f7ff fed6 	bl	80132e0 <tcp_free>
      }
      return ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	e050      	b.n	80135da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	7d1b      	ldrb	r3, [r3, #20]
 801353c:	2b02      	cmp	r3, #2
 801353e:	d03b      	beq.n	80135b8 <tcp_close_shutdown+0x174>
 8013540:	2b02      	cmp	r3, #2
 8013542:	dc44      	bgt.n	80135ce <tcp_close_shutdown+0x18a>
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <tcp_close_shutdown+0x10a>
 8013548:	2b01      	cmp	r3, #1
 801354a:	d02a      	beq.n	80135a2 <tcp_close_shutdown+0x15e>
 801354c:	e03f      	b.n	80135ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	8adb      	ldrh	r3, [r3, #22]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d021      	beq.n	801359a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013556:	4b2a      	ldr	r3, [pc, #168]	@ (8013600 <tcp_close_shutdown+0x1bc>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	429a      	cmp	r2, r3
 801355e:	d105      	bne.n	801356c <tcp_close_shutdown+0x128>
 8013560:	4b27      	ldr	r3, [pc, #156]	@ (8013600 <tcp_close_shutdown+0x1bc>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	4a26      	ldr	r2, [pc, #152]	@ (8013600 <tcp_close_shutdown+0x1bc>)
 8013568:	6013      	str	r3, [r2, #0]
 801356a:	e013      	b.n	8013594 <tcp_close_shutdown+0x150>
 801356c:	4b24      	ldr	r3, [pc, #144]	@ (8013600 <tcp_close_shutdown+0x1bc>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	60bb      	str	r3, [r7, #8]
 8013572:	e00c      	b.n	801358e <tcp_close_shutdown+0x14a>
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	68db      	ldr	r3, [r3, #12]
 8013578:	687a      	ldr	r2, [r7, #4]
 801357a:	429a      	cmp	r2, r3
 801357c:	d104      	bne.n	8013588 <tcp_close_shutdown+0x144>
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	68da      	ldr	r2, [r3, #12]
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	60da      	str	r2, [r3, #12]
 8013586:	e005      	b.n	8013594 <tcp_close_shutdown+0x150>
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	60bb      	str	r3, [r7, #8]
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d1ef      	bne.n	8013574 <tcp_close_shutdown+0x130>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2200      	movs	r2, #0
 8013598:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7ff fea0 	bl	80132e0 <tcp_free>
      break;
 80135a0:	e01a      	b.n	80135d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f7ff ff14 	bl	80133d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80135a8:	6879      	ldr	r1, [r7, #4]
 80135aa:	4816      	ldr	r0, [pc, #88]	@ (8013604 <tcp_close_shutdown+0x1c0>)
 80135ac:	f001 fbac 	bl	8014d08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff feb1 	bl	8013318 <tcp_free_listen>
      break;
 80135b6:	e00f      	b.n	80135d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80135b8:	6879      	ldr	r1, [r7, #4]
 80135ba:	480e      	ldr	r0, [pc, #56]	@ (80135f4 <tcp_close_shutdown+0x1b0>)
 80135bc:	f001 fba4 	bl	8014d08 <tcp_pcb_remove>
 80135c0:	4b0d      	ldr	r3, [pc, #52]	@ (80135f8 <tcp_close_shutdown+0x1b4>)
 80135c2:	2201      	movs	r2, #1
 80135c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f7ff fe8a 	bl	80132e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80135cc:	e004      	b.n	80135d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f000 f81a 	bl	8013608 <tcp_close_shutdown_fin>
 80135d4:	4603      	mov	r3, r0
 80135d6:	e000      	b.n	80135da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3710      	adds	r7, #16
 80135de:	46bd      	mov	sp, r7
 80135e0:	bdb0      	pop	{r4, r5, r7, pc}
 80135e2:	bf00      	nop
 80135e4:	0802134c 	.word	0x0802134c
 80135e8:	08021420 	.word	0x08021420
 80135ec:	08021390 	.word	0x08021390
 80135f0:	08021440 	.word	0x08021440
 80135f4:	2000f3a0 	.word	0x2000f3a0
 80135f8:	2000f3a8 	.word	0x2000f3a8
 80135fc:	2000f3e0 	.word	0x2000f3e0
 8013600:	2000f398 	.word	0x2000f398
 8013604:	2000f39c 	.word	0x2000f39c

08013608 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <tcp_close_shutdown_fin+0x1c>
 8013616:	4b2e      	ldr	r3, [pc, #184]	@ (80136d0 <tcp_close_shutdown_fin+0xc8>)
 8013618:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801361c:	492d      	ldr	r1, [pc, #180]	@ (80136d4 <tcp_close_shutdown_fin+0xcc>)
 801361e:	482e      	ldr	r0, [pc, #184]	@ (80136d8 <tcp_close_shutdown_fin+0xd0>)
 8013620:	f009 ff62 	bl	801d4e8 <iprintf>

  switch (pcb->state) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	7d1b      	ldrb	r3, [r3, #20]
 8013628:	2b07      	cmp	r3, #7
 801362a:	d020      	beq.n	801366e <tcp_close_shutdown_fin+0x66>
 801362c:	2b07      	cmp	r3, #7
 801362e:	dc2b      	bgt.n	8013688 <tcp_close_shutdown_fin+0x80>
 8013630:	2b03      	cmp	r3, #3
 8013632:	d002      	beq.n	801363a <tcp_close_shutdown_fin+0x32>
 8013634:	2b04      	cmp	r3, #4
 8013636:	d00d      	beq.n	8013654 <tcp_close_shutdown_fin+0x4c>
 8013638:	e026      	b.n	8013688 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f004 fe3c 	bl	80182b8 <tcp_send_fin>
 8013640:	4603      	mov	r3, r0
 8013642:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d11f      	bne.n	801368c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2205      	movs	r2, #5
 8013650:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013652:	e01b      	b.n	801368c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f004 fe2f 	bl	80182b8 <tcp_send_fin>
 801365a:	4603      	mov	r3, r0
 801365c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d114      	bne.n	8013690 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2205      	movs	r2, #5
 801366a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801366c:	e010      	b.n	8013690 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801366e:	6878      	ldr	r0, [r7, #4]
 8013670:	f004 fe22 	bl	80182b8 <tcp_send_fin>
 8013674:	4603      	mov	r3, r0
 8013676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d109      	bne.n	8013694 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2209      	movs	r2, #9
 8013684:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013686:	e005      	b.n	8013694 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	e01c      	b.n	80136c6 <tcp_close_shutdown_fin+0xbe>
      break;
 801368c:	bf00      	nop
 801368e:	e002      	b.n	8013696 <tcp_close_shutdown_fin+0x8e>
      break;
 8013690:	bf00      	nop
 8013692:	e000      	b.n	8013696 <tcp_close_shutdown_fin+0x8e>
      break;
 8013694:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d103      	bne.n	80136a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f004 ff48 	bl	8018534 <tcp_output>
 80136a4:	e00d      	b.n	80136c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80136a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ae:	d108      	bne.n	80136c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	8b5b      	ldrh	r3, [r3, #26]
 80136b4:	f043 0308 	orr.w	r3, r3, #8
 80136b8:	b29a      	uxth	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80136be:	2300      	movs	r3, #0
 80136c0:	e001      	b.n	80136c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80136c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	0802134c 	.word	0x0802134c
 80136d4:	080213fc 	.word	0x080213fc
 80136d8:	08021390 	.word	0x08021390

080136dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d109      	bne.n	80136fe <tcp_close+0x22>
 80136ea:	4b0f      	ldr	r3, [pc, #60]	@ (8013728 <tcp_close+0x4c>)
 80136ec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80136f0:	490e      	ldr	r1, [pc, #56]	@ (801372c <tcp_close+0x50>)
 80136f2:	480f      	ldr	r0, [pc, #60]	@ (8013730 <tcp_close+0x54>)
 80136f4:	f009 fef8 	bl	801d4e8 <iprintf>
 80136f8:	f06f 030f 	mvn.w	r3, #15
 80136fc:	e00f      	b.n	801371e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	7d1b      	ldrb	r3, [r3, #20]
 8013702:	2b01      	cmp	r3, #1
 8013704:	d006      	beq.n	8013714 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	8b5b      	ldrh	r3, [r3, #26]
 801370a:	f043 0310 	orr.w	r3, r3, #16
 801370e:	b29a      	uxth	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013714:	2101      	movs	r1, #1
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f7ff fe94 	bl	8013444 <tcp_close_shutdown>
 801371c:	4603      	mov	r3, r0
}
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	0802134c 	.word	0x0802134c
 801372c:	0802145c 	.word	0x0802145c
 8013730:	08021390 	.word	0x08021390

08013734 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d109      	bne.n	801375a <tcp_shutdown+0x26>
 8013746:	4b26      	ldr	r3, [pc, #152]	@ (80137e0 <tcp_shutdown+0xac>)
 8013748:	f240 2207 	movw	r2, #519	@ 0x207
 801374c:	4925      	ldr	r1, [pc, #148]	@ (80137e4 <tcp_shutdown+0xb0>)
 801374e:	4826      	ldr	r0, [pc, #152]	@ (80137e8 <tcp_shutdown+0xb4>)
 8013750:	f009 feca 	bl	801d4e8 <iprintf>
 8013754:	f06f 030f 	mvn.w	r3, #15
 8013758:	e03d      	b.n	80137d6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	7d1b      	ldrb	r3, [r3, #20]
 801375e:	2b01      	cmp	r3, #1
 8013760:	d102      	bne.n	8013768 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013762:	f06f 030a 	mvn.w	r3, #10
 8013766:	e036      	b.n	80137d6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d01b      	beq.n	80137a6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	8b5b      	ldrh	r3, [r3, #26]
 8013772:	f043 0310 	orr.w	r3, r3, #16
 8013776:	b29a      	uxth	r2, r3
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d005      	beq.n	801378e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013782:	2101      	movs	r1, #1
 8013784:	68f8      	ldr	r0, [r7, #12]
 8013786:	f7ff fe5d 	bl	8013444 <tcp_close_shutdown>
 801378a:	4603      	mov	r3, r0
 801378c:	e023      	b.n	80137d6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013792:	2b00      	cmp	r3, #0
 8013794:	d007      	beq.n	80137a6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fae4 	bl	8012d68 <pbuf_free>
      pcb->refused_data = NULL;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2200      	movs	r2, #0
 80137a4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d013      	beq.n	80137d4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	7d1b      	ldrb	r3, [r3, #20]
 80137b0:	2b04      	cmp	r3, #4
 80137b2:	dc02      	bgt.n	80137ba <tcp_shutdown+0x86>
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	da02      	bge.n	80137be <tcp_shutdown+0x8a>
 80137b8:	e009      	b.n	80137ce <tcp_shutdown+0x9a>
 80137ba:	2b07      	cmp	r3, #7
 80137bc:	d107      	bne.n	80137ce <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	4619      	mov	r1, r3
 80137c4:	68f8      	ldr	r0, [r7, #12]
 80137c6:	f7ff fe3d 	bl	8013444 <tcp_close_shutdown>
 80137ca:	4603      	mov	r3, r0
 80137cc:	e003      	b.n	80137d6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80137ce:	f06f 030a 	mvn.w	r3, #10
 80137d2:	e000      	b.n	80137d6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	0802134c 	.word	0x0802134c
 80137e4:	08021474 	.word	0x08021474
 80137e8:	08021390 	.word	0x08021390

080137ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b08e      	sub	sp, #56	@ 0x38
 80137f0:	af04      	add	r7, sp, #16
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d107      	bne.n	801380c <tcp_abandon+0x20>
 80137fc:	4b52      	ldr	r3, [pc, #328]	@ (8013948 <tcp_abandon+0x15c>)
 80137fe:	f240 223d 	movw	r2, #573	@ 0x23d
 8013802:	4952      	ldr	r1, [pc, #328]	@ (801394c <tcp_abandon+0x160>)
 8013804:	4852      	ldr	r0, [pc, #328]	@ (8013950 <tcp_abandon+0x164>)
 8013806:	f009 fe6f 	bl	801d4e8 <iprintf>
 801380a:	e099      	b.n	8013940 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	7d1b      	ldrb	r3, [r3, #20]
 8013810:	2b01      	cmp	r3, #1
 8013812:	d106      	bne.n	8013822 <tcp_abandon+0x36>
 8013814:	4b4c      	ldr	r3, [pc, #304]	@ (8013948 <tcp_abandon+0x15c>)
 8013816:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801381a:	494e      	ldr	r1, [pc, #312]	@ (8013954 <tcp_abandon+0x168>)
 801381c:	484c      	ldr	r0, [pc, #304]	@ (8013950 <tcp_abandon+0x164>)
 801381e:	f009 fe63 	bl	801d4e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	7d1b      	ldrb	r3, [r3, #20]
 8013826:	2b0a      	cmp	r3, #10
 8013828:	d107      	bne.n	801383a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801382a:	6879      	ldr	r1, [r7, #4]
 801382c:	484a      	ldr	r0, [pc, #296]	@ (8013958 <tcp_abandon+0x16c>)
 801382e:	f001 fa6b 	bl	8014d08 <tcp_pcb_remove>
    tcp_free(pcb);
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f7ff fd54 	bl	80132e0 <tcp_free>
 8013838:	e082      	b.n	8013940 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801383a:	2300      	movs	r3, #0
 801383c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013846:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801384c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013854:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	7d1b      	ldrb	r3, [r3, #20]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d126      	bne.n	80138b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	8adb      	ldrh	r3, [r3, #22]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d02e      	beq.n	80138ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801386c:	4b3b      	ldr	r3, [pc, #236]	@ (801395c <tcp_abandon+0x170>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	429a      	cmp	r2, r3
 8013874:	d105      	bne.n	8013882 <tcp_abandon+0x96>
 8013876:	4b39      	ldr	r3, [pc, #228]	@ (801395c <tcp_abandon+0x170>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	4a37      	ldr	r2, [pc, #220]	@ (801395c <tcp_abandon+0x170>)
 801387e:	6013      	str	r3, [r2, #0]
 8013880:	e013      	b.n	80138aa <tcp_abandon+0xbe>
 8013882:	4b36      	ldr	r3, [pc, #216]	@ (801395c <tcp_abandon+0x170>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	61fb      	str	r3, [r7, #28]
 8013888:	e00c      	b.n	80138a4 <tcp_abandon+0xb8>
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	68db      	ldr	r3, [r3, #12]
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	429a      	cmp	r2, r3
 8013892:	d104      	bne.n	801389e <tcp_abandon+0xb2>
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	68da      	ldr	r2, [r3, #12]
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	60da      	str	r2, [r3, #12]
 801389c:	e005      	b.n	80138aa <tcp_abandon+0xbe>
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	61fb      	str	r3, [r7, #28]
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d1ef      	bne.n	801388a <tcp_abandon+0x9e>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	2200      	movs	r2, #0
 80138ae:	60da      	str	r2, [r3, #12]
 80138b0:	e00b      	b.n	80138ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	8adb      	ldrh	r3, [r3, #22]
 80138ba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80138bc:	6879      	ldr	r1, [r7, #4]
 80138be:	4828      	ldr	r0, [pc, #160]	@ (8013960 <tcp_abandon+0x174>)
 80138c0:	f001 fa22 	bl	8014d08 <tcp_pcb_remove>
 80138c4:	4b27      	ldr	r3, [pc, #156]	@ (8013964 <tcp_abandon+0x178>)
 80138c6:	2201      	movs	r2, #1
 80138c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d004      	beq.n	80138dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 fed8 	bl	801468c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d004      	beq.n	80138ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fecf 	bl	801468c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d004      	beq.n	8013900 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80138fa:	4618      	mov	r0, r3
 80138fc:	f000 fec6 	bl	801468c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00e      	beq.n	8013924 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013906:	6879      	ldr	r1, [r7, #4]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	3304      	adds	r3, #4
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	8b12      	ldrh	r2, [r2, #24]
 8013910:	9202      	str	r2, [sp, #8]
 8013912:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013914:	9201      	str	r2, [sp, #4]
 8013916:	9300      	str	r3, [sp, #0]
 8013918:	460b      	mov	r3, r1
 801391a:	697a      	ldr	r2, [r7, #20]
 801391c:	69b9      	ldr	r1, [r7, #24]
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f005 fbbc 	bl	801909c <tcp_rst>
    }
    last_state = pcb->state;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	7d1b      	ldrb	r3, [r3, #20]
 8013928:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fcd8 	bl	80132e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013930:	693b      	ldr	r3, [r7, #16]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d004      	beq.n	8013940 <tcp_abandon+0x154>
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	f06f 010c 	mvn.w	r1, #12
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	4798      	blx	r3
  }
}
 8013940:	3728      	adds	r7, #40	@ 0x28
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	0802134c 	.word	0x0802134c
 801394c:	08021490 	.word	0x08021490
 8013950:	08021390 	.word	0x08021390
 8013954:	080214ac 	.word	0x080214ac
 8013958:	2000f3a4 	.word	0x2000f3a4
 801395c:	2000f398 	.word	0x2000f398
 8013960:	2000f3a0 	.word	0x2000f3a0
 8013964:	2000f3a8 	.word	0x2000f3a8

08013968 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013970:	2101      	movs	r1, #1
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7ff ff3a 	bl	80137ec <tcp_abandon>
}
 8013978:	bf00      	nop
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b088      	sub	sp, #32
 8013984:	af00      	add	r7, sp, #0
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	4613      	mov	r3, r2
 801398c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801398e:	2304      	movs	r3, #4
 8013990:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d101      	bne.n	801399c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013998:	4b3e      	ldr	r3, [pc, #248]	@ (8013a94 <tcp_bind+0x114>)
 801399a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d109      	bne.n	80139b6 <tcp_bind+0x36>
 80139a2:	4b3d      	ldr	r3, [pc, #244]	@ (8013a98 <tcp_bind+0x118>)
 80139a4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80139a8:	493c      	ldr	r1, [pc, #240]	@ (8013a9c <tcp_bind+0x11c>)
 80139aa:	483d      	ldr	r0, [pc, #244]	@ (8013aa0 <tcp_bind+0x120>)
 80139ac:	f009 fd9c 	bl	801d4e8 <iprintf>
 80139b0:	f06f 030f 	mvn.w	r3, #15
 80139b4:	e06a      	b.n	8013a8c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	7d1b      	ldrb	r3, [r3, #20]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d009      	beq.n	80139d2 <tcp_bind+0x52>
 80139be:	4b36      	ldr	r3, [pc, #216]	@ (8013a98 <tcp_bind+0x118>)
 80139c0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80139c4:	4937      	ldr	r1, [pc, #220]	@ (8013aa4 <tcp_bind+0x124>)
 80139c6:	4836      	ldr	r0, [pc, #216]	@ (8013aa0 <tcp_bind+0x120>)
 80139c8:	f009 fd8e 	bl	801d4e8 <iprintf>
 80139cc:	f06f 0305 	mvn.w	r3, #5
 80139d0:	e05c      	b.n	8013a8c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80139d2:	88fb      	ldrh	r3, [r7, #6]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d109      	bne.n	80139ec <tcp_bind+0x6c>
    port = tcp_new_port();
 80139d8:	f000 f9f0 	bl	8013dbc <tcp_new_port>
 80139dc:	4603      	mov	r3, r0
 80139de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80139e0:	88fb      	ldrh	r3, [r7, #6]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d135      	bne.n	8013a52 <tcp_bind+0xd2>
      return ERR_BUF;
 80139e6:	f06f 0301 	mvn.w	r3, #1
 80139ea:	e04f      	b.n	8013a8c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80139ec:	2300      	movs	r3, #0
 80139ee:	61fb      	str	r3, [r7, #28]
 80139f0:	e02b      	b.n	8013a4a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80139f2:	4a2d      	ldr	r2, [pc, #180]	@ (8013aa8 <tcp_bind+0x128>)
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	61bb      	str	r3, [r7, #24]
 80139fe:	e01e      	b.n	8013a3e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013a00:	69bb      	ldr	r3, [r7, #24]
 8013a02:	8adb      	ldrh	r3, [r3, #22]
 8013a04:	88fa      	ldrh	r2, [r7, #6]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d116      	bne.n	8013a38 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013a0a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d010      	beq.n	8013a32 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d00c      	beq.n	8013a32 <tcp_bind+0xb2>
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d009      	beq.n	8013a32 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d005      	beq.n	8013a32 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	681a      	ldr	r2, [r3, #0]
 8013a2a:	68bb      	ldr	r3, [r7, #8]
 8013a2c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d102      	bne.n	8013a38 <tcp_bind+0xb8>
              return ERR_USE;
 8013a32:	f06f 0307 	mvn.w	r3, #7
 8013a36:	e029      	b.n	8013a8c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013a38:	69bb      	ldr	r3, [r7, #24]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	61bb      	str	r3, [r7, #24]
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d1dd      	bne.n	8013a00 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	3301      	adds	r3, #1
 8013a48:	61fb      	str	r3, [r7, #28]
 8013a4a:	69fa      	ldr	r2, [r7, #28]
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	dbcf      	blt.n	80139f2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d00c      	beq.n	8013a72 <tcp_bind+0xf2>
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d008      	beq.n	8013a72 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d002      	beq.n	8013a6c <tcp_bind+0xec>
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	e000      	b.n	8013a6e <tcp_bind+0xee>
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	88fa      	ldrh	r2, [r7, #6]
 8013a76:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013a78:	4b0c      	ldr	r3, [pc, #48]	@ (8013aac <tcp_bind+0x12c>)
 8013a7a:	681a      	ldr	r2, [r3, #0]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	60da      	str	r2, [r3, #12]
 8013a80:	4a0a      	ldr	r2, [pc, #40]	@ (8013aac <tcp_bind+0x12c>)
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6013      	str	r3, [r2, #0]
 8013a86:	f005 fccb 	bl	8019420 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3720      	adds	r7, #32
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	08024a7c 	.word	0x08024a7c
 8013a98:	0802134c 	.word	0x0802134c
 8013a9c:	080214e0 	.word	0x080214e0
 8013aa0:	08021390 	.word	0x08021390
 8013aa4:	080214f8 	.word	0x080214f8
 8013aa8:	08024a54 	.word	0x08024a54
 8013aac:	2000f398 	.word	0x2000f398

08013ab0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b084      	sub	sp, #16
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	60f8      	str	r0, [r7, #12]
 8013ab8:	60b9      	str	r1, [r7, #8]
 8013aba:	4613      	mov	r3, r2
 8013abc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d106      	bne.n	8013ad2 <tcp_accept_null+0x22>
 8013ac4:	4b07      	ldr	r3, [pc, #28]	@ (8013ae4 <tcp_accept_null+0x34>)
 8013ac6:	f240 320f 	movw	r2, #783	@ 0x30f
 8013aca:	4907      	ldr	r1, [pc, #28]	@ (8013ae8 <tcp_accept_null+0x38>)
 8013acc:	4807      	ldr	r0, [pc, #28]	@ (8013aec <tcp_accept_null+0x3c>)
 8013ace:	f009 fd0b 	bl	801d4e8 <iprintf>

  tcp_abort(pcb);
 8013ad2:	68b8      	ldr	r0, [r7, #8]
 8013ad4:	f7ff ff48 	bl	8013968 <tcp_abort>

  return ERR_ABRT;
 8013ad8:	f06f 030c 	mvn.w	r3, #12
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	0802134c 	.word	0x0802134c
 8013ae8:	08021520 	.word	0x08021520
 8013aec:	08021390 	.word	0x08021390

08013af0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	460b      	mov	r3, r1
 8013afa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8013afc:	78fb      	ldrb	r3, [r7, #3]
 8013afe:	2200      	movs	r2, #0
 8013b00:	4619      	mov	r1, r3
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 f806 	bl	8013b14 <tcp_listen_with_backlog_and_err>
 8013b08:	4603      	mov	r3, r0
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b088      	sub	sp, #32
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	460b      	mov	r3, r1
 8013b1e:	607a      	str	r2, [r7, #4]
 8013b20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d109      	bne.n	8013b40 <tcp_listen_with_backlog_and_err+0x2c>
 8013b2c:	4b47      	ldr	r3, [pc, #284]	@ (8013c4c <tcp_listen_with_backlog_and_err+0x138>)
 8013b2e:	f240 3259 	movw	r2, #857	@ 0x359
 8013b32:	4947      	ldr	r1, [pc, #284]	@ (8013c50 <tcp_listen_with_backlog_and_err+0x13c>)
 8013b34:	4847      	ldr	r0, [pc, #284]	@ (8013c54 <tcp_listen_with_backlog_and_err+0x140>)
 8013b36:	f009 fcd7 	bl	801d4e8 <iprintf>
 8013b3a:	23f0      	movs	r3, #240	@ 0xf0
 8013b3c:	76fb      	strb	r3, [r7, #27]
 8013b3e:	e079      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	7d1b      	ldrb	r3, [r3, #20]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d009      	beq.n	8013b5c <tcp_listen_with_backlog_and_err+0x48>
 8013b48:	4b40      	ldr	r3, [pc, #256]	@ (8013c4c <tcp_listen_with_backlog_and_err+0x138>)
 8013b4a:	f240 325a 	movw	r2, #858	@ 0x35a
 8013b4e:	4942      	ldr	r1, [pc, #264]	@ (8013c58 <tcp_listen_with_backlog_and_err+0x144>)
 8013b50:	4840      	ldr	r0, [pc, #256]	@ (8013c54 <tcp_listen_with_backlog_and_err+0x140>)
 8013b52:	f009 fcc9 	bl	801d4e8 <iprintf>
 8013b56:	23f1      	movs	r3, #241	@ 0xf1
 8013b58:	76fb      	strb	r3, [r7, #27]
 8013b5a:	e06b      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	7d1b      	ldrb	r3, [r3, #20]
 8013b60:	2b01      	cmp	r3, #1
 8013b62:	d104      	bne.n	8013b6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013b68:	23f7      	movs	r3, #247	@ 0xf7
 8013b6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013b6c:	e062      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013b6e:	2002      	movs	r0, #2
 8013b70:	f7fe f9e0 	bl	8011f34 <memp_malloc>
 8013b74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d102      	bne.n	8013b82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013b7c:	23ff      	movs	r3, #255	@ 0xff
 8013b7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013b80:	e058      	b.n	8013c34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	691a      	ldr	r2, [r3, #16]
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	8ada      	ldrh	r2, [r3, #22]
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	2201      	movs	r2, #1
 8013b96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	7d5a      	ldrb	r2, [r3, #21]
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	7a5a      	ldrb	r2, [r3, #9]
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2200      	movs	r2, #0
 8013bac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	7ada      	ldrb	r2, [r3, #11]
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	7a9a      	ldrb	r2, [r3, #10]
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	8adb      	ldrh	r3, [r3, #22]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d021      	beq.n	8013c12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013bce:	4b23      	ldr	r3, [pc, #140]	@ (8013c5c <tcp_listen_with_backlog_and_err+0x148>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d105      	bne.n	8013be4 <tcp_listen_with_backlog_and_err+0xd0>
 8013bd8:	4b20      	ldr	r3, [pc, #128]	@ (8013c5c <tcp_listen_with_backlog_and_err+0x148>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	4a1f      	ldr	r2, [pc, #124]	@ (8013c5c <tcp_listen_with_backlog_and_err+0x148>)
 8013be0:	6013      	str	r3, [r2, #0]
 8013be2:	e013      	b.n	8013c0c <tcp_listen_with_backlog_and_err+0xf8>
 8013be4:	4b1d      	ldr	r3, [pc, #116]	@ (8013c5c <tcp_listen_with_backlog_and_err+0x148>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	617b      	str	r3, [r7, #20]
 8013bea:	e00c      	b.n	8013c06 <tcp_listen_with_backlog_and_err+0xf2>
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	d104      	bne.n	8013c00 <tcp_listen_with_backlog_and_err+0xec>
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	68da      	ldr	r2, [r3, #12]
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	60da      	str	r2, [r3, #12]
 8013bfe:	e005      	b.n	8013c0c <tcp_listen_with_backlog_and_err+0xf8>
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	617b      	str	r3, [r7, #20]
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d1ef      	bne.n	8013bec <tcp_listen_with_backlog_and_err+0xd8>
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f7ff fb64 	bl	80132e0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	4a11      	ldr	r2, [pc, #68]	@ (8013c60 <tcp_listen_with_backlog_and_err+0x14c>)
 8013c1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013c1e:	4b11      	ldr	r3, [pc, #68]	@ (8013c64 <tcp_listen_with_backlog_and_err+0x150>)
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	60da      	str	r2, [r3, #12]
 8013c26:	4a0f      	ldr	r2, [pc, #60]	@ (8013c64 <tcp_listen_with_backlog_and_err+0x150>)
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	6013      	str	r3, [r2, #0]
 8013c2c:	f005 fbf8 	bl	8019420 <tcp_timer_needed>
  res = ERR_OK;
 8013c30:	2300      	movs	r3, #0
 8013c32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d002      	beq.n	8013c40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	7efa      	ldrb	r2, [r7, #27]
 8013c3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013c40:	69fb      	ldr	r3, [r7, #28]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3720      	adds	r7, #32
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	0802134c 	.word	0x0802134c
 8013c50:	08021540 	.word	0x08021540
 8013c54:	08021390 	.word	0x08021390
 8013c58:	08021570 	.word	0x08021570
 8013c5c:	2000f398 	.word	0x2000f398
 8013c60:	08013ab1 	.word	0x08013ab1
 8013c64:	2000f39c 	.word	0x2000f39c

08013c68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d106      	bne.n	8013c84 <tcp_update_rcv_ann_wnd+0x1c>
 8013c76:	4b25      	ldr	r3, [pc, #148]	@ (8013d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8013c78:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013c7c:	4924      	ldr	r1, [pc, #144]	@ (8013d10 <tcp_update_rcv_ann_wnd+0xa8>)
 8013c7e:	4825      	ldr	r0, [pc, #148]	@ (8013d14 <tcp_update_rcv_ann_wnd+0xac>)
 8013c80:	f009 fc32 	bl	801d4e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013c8c:	4413      	add	r3, r2
 8013c8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c94:	687a      	ldr	r2, [r7, #4]
 8013c96:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013c98:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013c9c:	bf28      	it	cs
 8013c9e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013ca2:	b292      	uxth	r2, r2
 8013ca4:	4413      	add	r3, r2
 8013ca6:	68fa      	ldr	r2, [r7, #12]
 8013ca8:	1ad3      	subs	r3, r2, r3
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	db08      	blt.n	8013cc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	e020      	b.n	8013d02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	dd03      	ble.n	8013cd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013cd4:	e014      	b.n	8013d00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cde:	1ad3      	subs	r3, r2, r3
 8013ce0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ce8:	d306      	bcc.n	8013cf8 <tcp_update_rcv_ann_wnd+0x90>
 8013cea:	4b08      	ldr	r3, [pc, #32]	@ (8013d0c <tcp_update_rcv_ann_wnd+0xa4>)
 8013cec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013cf0:	4909      	ldr	r1, [pc, #36]	@ (8013d18 <tcp_update_rcv_ann_wnd+0xb0>)
 8013cf2:	4808      	ldr	r0, [pc, #32]	@ (8013d14 <tcp_update_rcv_ann_wnd+0xac>)
 8013cf4:	f009 fbf8 	bl	801d4e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013d00:	2300      	movs	r3, #0
  }
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	0802134c 	.word	0x0802134c
 8013d10:	080215a8 	.word	0x080215a8
 8013d14:	08021390 	.word	0x08021390
 8013d18:	080215cc 	.word	0x080215cc

08013d1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	460b      	mov	r3, r1
 8013d26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d107      	bne.n	8013d3e <tcp_recved+0x22>
 8013d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8013dac <tcp_recved+0x90>)
 8013d30:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013d34:	491e      	ldr	r1, [pc, #120]	@ (8013db0 <tcp_recved+0x94>)
 8013d36:	481f      	ldr	r0, [pc, #124]	@ (8013db4 <tcp_recved+0x98>)
 8013d38:	f009 fbd6 	bl	801d4e8 <iprintf>
 8013d3c:	e032      	b.n	8013da4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	7d1b      	ldrb	r3, [r3, #20]
 8013d42:	2b01      	cmp	r3, #1
 8013d44:	d106      	bne.n	8013d54 <tcp_recved+0x38>
 8013d46:	4b19      	ldr	r3, [pc, #100]	@ (8013dac <tcp_recved+0x90>)
 8013d48:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013d4c:	491a      	ldr	r1, [pc, #104]	@ (8013db8 <tcp_recved+0x9c>)
 8013d4e:	4819      	ldr	r0, [pc, #100]	@ (8013db4 <tcp_recved+0x98>)
 8013d50:	f009 fbca 	bl	801d4e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013d58:	887b      	ldrh	r3, [r7, #2]
 8013d5a:	4413      	add	r3, r2
 8013d5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013d5e:	89fb      	ldrh	r3, [r7, #14]
 8013d60:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013d64:	d804      	bhi.n	8013d70 <tcp_recved+0x54>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d6a:	89fa      	ldrh	r2, [r7, #14]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d204      	bcs.n	8013d7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013d76:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013d78:	e002      	b.n	8013d80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	89fa      	ldrh	r2, [r7, #14]
 8013d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7ff ff71 	bl	8013c68 <tcp_update_rcv_ann_wnd>
 8013d86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013d8e:	d309      	bcc.n	8013da4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	8b5b      	ldrh	r3, [r3, #26]
 8013d94:	f043 0302 	orr.w	r3, r3, #2
 8013d98:	b29a      	uxth	r2, r3
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f004 fbc8 	bl	8018534 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	0802134c 	.word	0x0802134c
 8013db0:	080215e8 	.word	0x080215e8
 8013db4:	08021390 	.word	0x08021390
 8013db8:	08021600 	.word	0x08021600

08013dbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8013e40 <tcp_new_port+0x84>)
 8013dc8:	881b      	ldrh	r3, [r3, #0]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	4b1c      	ldr	r3, [pc, #112]	@ (8013e40 <tcp_new_port+0x84>)
 8013dd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e40 <tcp_new_port+0x84>)
 8013dd4:	881b      	ldrh	r3, [r3, #0]
 8013dd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d103      	bne.n	8013de6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013dde:	4b18      	ldr	r3, [pc, #96]	@ (8013e40 <tcp_new_port+0x84>)
 8013de0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013de4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013de6:	2300      	movs	r3, #0
 8013de8:	71fb      	strb	r3, [r7, #7]
 8013dea:	e01e      	b.n	8013e2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013dec:	79fb      	ldrb	r3, [r7, #7]
 8013dee:	4a15      	ldr	r2, [pc, #84]	@ (8013e44 <tcp_new_port+0x88>)
 8013df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	603b      	str	r3, [r7, #0]
 8013df8:	e011      	b.n	8013e1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	8ada      	ldrh	r2, [r3, #22]
 8013dfe:	4b10      	ldr	r3, [pc, #64]	@ (8013e40 <tcp_new_port+0x84>)
 8013e00:	881b      	ldrh	r3, [r3, #0]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d108      	bne.n	8013e18 <tcp_new_port+0x5c>
        n++;
 8013e06:	88bb      	ldrh	r3, [r7, #4]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013e0c:	88bb      	ldrh	r3, [r7, #4]
 8013e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e12:	d3d8      	bcc.n	8013dc6 <tcp_new_port+0xa>
          return 0;
 8013e14:	2300      	movs	r3, #0
 8013e16:	e00d      	b.n	8013e34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	603b      	str	r3, [r7, #0]
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d1ea      	bne.n	8013dfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013e24:	79fb      	ldrb	r3, [r7, #7]
 8013e26:	3301      	adds	r3, #1
 8013e28:	71fb      	strb	r3, [r7, #7]
 8013e2a:	79fb      	ldrb	r3, [r7, #7]
 8013e2c:	2b03      	cmp	r3, #3
 8013e2e:	d9dd      	bls.n	8013dec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013e30:	4b03      	ldr	r3, [pc, #12]	@ (8013e40 <tcp_new_port+0x84>)
 8013e32:	881b      	ldrh	r3, [r3, #0]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr
 8013e40:	2000007c 	.word	0x2000007c
 8013e44:	08024a54 	.word	0x08024a54

08013e48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013e48:	b5b0      	push	{r4, r5, r7, lr}
 8013e4a:	b090      	sub	sp, #64	@ 0x40
 8013e4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013e54:	4b95      	ldr	r3, [pc, #596]	@ (80140ac <tcp_slowtmr+0x264>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	4a94      	ldr	r2, [pc, #592]	@ (80140ac <tcp_slowtmr+0x264>)
 8013e5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013e5e:	4b94      	ldr	r3, [pc, #592]	@ (80140b0 <tcp_slowtmr+0x268>)
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	3301      	adds	r3, #1
 8013e64:	b2da      	uxtb	r2, r3
 8013e66:	4b92      	ldr	r3, [pc, #584]	@ (80140b0 <tcp_slowtmr+0x268>)
 8013e68:	701a      	strb	r2, [r3, #0]
 8013e6a:	e000      	b.n	8013e6e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013e6c:	bf00      	nop
  prev = NULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013e72:	4b90      	ldr	r3, [pc, #576]	@ (80140b4 <tcp_slowtmr+0x26c>)
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013e78:	e29d      	b.n	80143b6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e7c:	7d1b      	ldrb	r3, [r3, #20]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d106      	bne.n	8013e90 <tcp_slowtmr+0x48>
 8013e82:	4b8d      	ldr	r3, [pc, #564]	@ (80140b8 <tcp_slowtmr+0x270>)
 8013e84:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013e88:	498c      	ldr	r1, [pc, #560]	@ (80140bc <tcp_slowtmr+0x274>)
 8013e8a:	488d      	ldr	r0, [pc, #564]	@ (80140c0 <tcp_slowtmr+0x278>)
 8013e8c:	f009 fb2c 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e92:	7d1b      	ldrb	r3, [r3, #20]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d106      	bne.n	8013ea6 <tcp_slowtmr+0x5e>
 8013e98:	4b87      	ldr	r3, [pc, #540]	@ (80140b8 <tcp_slowtmr+0x270>)
 8013e9a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013e9e:	4989      	ldr	r1, [pc, #548]	@ (80140c4 <tcp_slowtmr+0x27c>)
 8013ea0:	4887      	ldr	r0, [pc, #540]	@ (80140c0 <tcp_slowtmr+0x278>)
 8013ea2:	f009 fb21 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea8:	7d1b      	ldrb	r3, [r3, #20]
 8013eaa:	2b0a      	cmp	r3, #10
 8013eac:	d106      	bne.n	8013ebc <tcp_slowtmr+0x74>
 8013eae:	4b82      	ldr	r3, [pc, #520]	@ (80140b8 <tcp_slowtmr+0x270>)
 8013eb0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013eb4:	4984      	ldr	r1, [pc, #528]	@ (80140c8 <tcp_slowtmr+0x280>)
 8013eb6:	4882      	ldr	r0, [pc, #520]	@ (80140c0 <tcp_slowtmr+0x278>)
 8013eb8:	f009 fb16 	bl	801d4e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ebe:	7f9a      	ldrb	r2, [r3, #30]
 8013ec0:	4b7b      	ldr	r3, [pc, #492]	@ (80140b0 <tcp_slowtmr+0x268>)
 8013ec2:	781b      	ldrb	r3, [r3, #0]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d105      	bne.n	8013ed4 <tcp_slowtmr+0x8c>
      prev = pcb;
 8013ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013ed2:	e270      	b.n	80143b6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8013ed4:	4b76      	ldr	r3, [pc, #472]	@ (80140b0 <tcp_slowtmr+0x268>)
 8013ed6:	781a      	ldrb	r2, [r3, #0]
 8013ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eda:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013edc:	2300      	movs	r3, #0
 8013ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eea:	7d1b      	ldrb	r3, [r3, #20]
 8013eec:	2b02      	cmp	r3, #2
 8013eee:	d10a      	bne.n	8013f06 <tcp_slowtmr+0xbe>
 8013ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013ef6:	2b05      	cmp	r3, #5
 8013ef8:	d905      	bls.n	8013f06 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013efe:	3301      	adds	r3, #1
 8013f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f04:	e11e      	b.n	8014144 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013f0c:	2b0b      	cmp	r3, #11
 8013f0e:	d905      	bls.n	8013f1c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f14:	3301      	adds	r3, #1
 8013f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f1a:	e113      	b.n	8014144 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d075      	beq.n	8014012 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d006      	beq.n	8013f3c <tcp_slowtmr+0xf4>
 8013f2e:	4b62      	ldr	r3, [pc, #392]	@ (80140b8 <tcp_slowtmr+0x270>)
 8013f30:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013f34:	4965      	ldr	r1, [pc, #404]	@ (80140cc <tcp_slowtmr+0x284>)
 8013f36:	4862      	ldr	r0, [pc, #392]	@ (80140c0 <tcp_slowtmr+0x278>)
 8013f38:	f009 fad6 	bl	801d4e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d106      	bne.n	8013f52 <tcp_slowtmr+0x10a>
 8013f44:	4b5c      	ldr	r3, [pc, #368]	@ (80140b8 <tcp_slowtmr+0x270>)
 8013f46:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013f4a:	4961      	ldr	r1, [pc, #388]	@ (80140d0 <tcp_slowtmr+0x288>)
 8013f4c:	485c      	ldr	r0, [pc, #368]	@ (80140c0 <tcp_slowtmr+0x278>)
 8013f4e:	f009 facb 	bl	801d4e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f54:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013f58:	2b0b      	cmp	r3, #11
 8013f5a:	d905      	bls.n	8013f68 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f60:	3301      	adds	r3, #1
 8013f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f66:	e0ed      	b.n	8014144 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f6a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	4a58      	ldr	r2, [pc, #352]	@ (80140d4 <tcp_slowtmr+0x28c>)
 8013f72:	5cd3      	ldrb	r3, [r2, r3]
 8013f74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f78:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f7c:	7c7a      	ldrb	r2, [r7, #17]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d907      	bls.n	8013f92 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f84:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f88:	3301      	adds	r3, #1
 8013f8a:	b2da      	uxtb	r2, r3
 8013f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f98:	7c7a      	ldrb	r2, [r7, #17]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	f200 80d2 	bhi.w	8014144 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d108      	bne.n	8013fc0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fb0:	f005 f968 	bl	8019284 <tcp_zero_window_probe>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d014      	beq.n	8013fe4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013fba:	2300      	movs	r3, #0
 8013fbc:	623b      	str	r3, [r7, #32]
 8013fbe:	e011      	b.n	8013fe4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fca:	f004 f82d 	bl	8018028 <tcp_split_unsent_seg>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d107      	bne.n	8013fe4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013fd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fd6:	f004 faad 	bl	8018534 <tcp_output>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d101      	bne.n	8013fe4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013fe4:	6a3b      	ldr	r3, [r7, #32]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	f000 80ac 	beq.w	8014144 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013ffa:	2b06      	cmp	r3, #6
 8013ffc:	f200 80a2 	bhi.w	8014144 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014002:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014006:	3301      	adds	r3, #1
 8014008:	b2da      	uxtb	r2, r3
 801400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014010:	e098      	b.n	8014144 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014014:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014018:	2b00      	cmp	r3, #0
 801401a:	db0f      	blt.n	801403c <tcp_slowtmr+0x1f4>
 801401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014022:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014026:	4293      	cmp	r3, r2
 8014028:	d008      	beq.n	801403c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014030:	b29b      	uxth	r3, r3
 8014032:	3301      	adds	r3, #1
 8014034:	b29b      	uxth	r3, r3
 8014036:	b21a      	sxth	r2, r3
 8014038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801403a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801403e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8014042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014044:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014048:	429a      	cmp	r2, r3
 801404a:	db7b      	blt.n	8014144 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801404c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801404e:	f004 fd65 	bl	8018b1c <tcp_rexmit_rto_prepare>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d007      	beq.n	8014068 <tcp_slowtmr+0x220>
 8014058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801405a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801405c:	2b00      	cmp	r3, #0
 801405e:	d171      	bne.n	8014144 <tcp_slowtmr+0x2fc>
 8014060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014064:	2b00      	cmp	r3, #0
 8014066:	d06d      	beq.n	8014144 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8014068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801406a:	7d1b      	ldrb	r3, [r3, #20]
 801406c:	2b02      	cmp	r3, #2
 801406e:	d03a      	beq.n	80140e6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014076:	2b0c      	cmp	r3, #12
 8014078:	bf28      	it	cs
 801407a:	230c      	movcs	r3, #12
 801407c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801407e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014080:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014084:	10db      	asrs	r3, r3, #3
 8014086:	b21b      	sxth	r3, r3
 8014088:	461a      	mov	r2, r3
 801408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801408c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014090:	4413      	add	r3, r2
 8014092:	7efa      	ldrb	r2, [r7, #27]
 8014094:	4910      	ldr	r1, [pc, #64]	@ (80140d8 <tcp_slowtmr+0x290>)
 8014096:	5c8a      	ldrb	r2, [r1, r2]
 8014098:	4093      	lsls	r3, r2
 801409a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80140a2:	4293      	cmp	r3, r2
 80140a4:	dc1a      	bgt.n	80140dc <tcp_slowtmr+0x294>
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	b21a      	sxth	r2, r3
 80140aa:	e019      	b.n	80140e0 <tcp_slowtmr+0x298>
 80140ac:	2000f394 	.word	0x2000f394
 80140b0:	2000f3aa 	.word	0x2000f3aa
 80140b4:	2000f3a0 	.word	0x2000f3a0
 80140b8:	0802134c 	.word	0x0802134c
 80140bc:	08021690 	.word	0x08021690
 80140c0:	08021390 	.word	0x08021390
 80140c4:	080216bc 	.word	0x080216bc
 80140c8:	080216e8 	.word	0x080216e8
 80140cc:	08021718 	.word	0x08021718
 80140d0:	0802174c 	.word	0x0802174c
 80140d4:	08024a4c 	.word	0x08024a4c
 80140d8:	08024a3c 	.word	0x08024a3c
 80140dc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80140e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80140e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e8:	2200      	movs	r2, #0
 80140ea:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80140ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80140f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80140f8:	4293      	cmp	r3, r2
 80140fa:	bf28      	it	cs
 80140fc:	4613      	movcs	r3, r2
 80140fe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014100:	8a7b      	ldrh	r3, [r7, #18]
 8014102:	085b      	lsrs	r3, r3, #1
 8014104:	b29a      	uxth	r2, r3
 8014106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014108:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801410c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801410e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014116:	005b      	lsls	r3, r3, #1
 8014118:	b29b      	uxth	r3, r3
 801411a:	429a      	cmp	r2, r3
 801411c:	d206      	bcs.n	801412c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801411e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	b29a      	uxth	r2, r3
 8014126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014128:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801412e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014132:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014138:	2200      	movs	r2, #0
 801413a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801413e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014140:	f004 fd5c 	bl	8018bfc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8014144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014146:	7d1b      	ldrb	r3, [r3, #20]
 8014148:	2b06      	cmp	r3, #6
 801414a:	d111      	bne.n	8014170 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 801414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414e:	8b5b      	ldrh	r3, [r3, #26]
 8014150:	f003 0310 	and.w	r3, r3, #16
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00b      	beq.n	8014170 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014158:	4b9c      	ldr	r3, [pc, #624]	@ (80143cc <tcp_slowtmr+0x584>)
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415e:	6a1b      	ldr	r3, [r3, #32]
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	2b28      	cmp	r3, #40	@ 0x28
 8014164:	d904      	bls.n	8014170 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801416a:	3301      	adds	r3, #1
 801416c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014172:	7a5b      	ldrb	r3, [r3, #9]
 8014174:	f003 0308 	and.w	r3, r3, #8
 8014178:	2b00      	cmp	r3, #0
 801417a:	d04a      	beq.n	8014212 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801417e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014180:	2b04      	cmp	r3, #4
 8014182:	d003      	beq.n	801418c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014186:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014188:	2b07      	cmp	r3, #7
 801418a:	d142      	bne.n	8014212 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801418c:	4b8f      	ldr	r3, [pc, #572]	@ (80143cc <tcp_slowtmr+0x584>)
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014192:	6a1b      	ldr	r3, [r3, #32]
 8014194:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014198:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801419c:	4b8c      	ldr	r3, [pc, #560]	@ (80143d0 <tcp_slowtmr+0x588>)
 801419e:	440b      	add	r3, r1
 80141a0:	498c      	ldr	r1, [pc, #560]	@ (80143d4 <tcp_slowtmr+0x58c>)
 80141a2:	fba1 1303 	umull	r1, r3, r1, r3
 80141a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d90a      	bls.n	80141c2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80141ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141b0:	3301      	adds	r3, #1
 80141b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80141b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141ba:	3301      	adds	r3, #1
 80141bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80141c0:	e027      	b.n	8014212 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141c2:	4b82      	ldr	r3, [pc, #520]	@ (80143cc <tcp_slowtmr+0x584>)
 80141c4:	681a      	ldr	r2, [r3, #0]
 80141c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c8:	6a1b      	ldr	r3, [r3, #32]
 80141ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80141cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80141d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141d4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80141d8:	4618      	mov	r0, r3
 80141da:	4b7f      	ldr	r3, [pc, #508]	@ (80143d8 <tcp_slowtmr+0x590>)
 80141dc:	fb00 f303 	mul.w	r3, r0, r3
 80141e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80141e2:	497c      	ldr	r1, [pc, #496]	@ (80143d4 <tcp_slowtmr+0x58c>)
 80141e4:	fba1 1303 	umull	r1, r3, r1, r3
 80141e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d911      	bls.n	8014212 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80141ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80141f0:	f005 f808 	bl	8019204 <tcp_keepalive>
 80141f4:	4603      	mov	r3, r0
 80141f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80141fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d107      	bne.n	8014212 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014204:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014208:	3301      	adds	r3, #1
 801420a:	b2da      	uxtb	r2, r3
 801420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801420e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014216:	2b00      	cmp	r3, #0
 8014218:	d011      	beq.n	801423e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801421a:	4b6c      	ldr	r3, [pc, #432]	@ (80143cc <tcp_slowtmr+0x584>)
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014220:	6a1b      	ldr	r3, [r3, #32]
 8014222:	1ad2      	subs	r2, r2, r3
 8014224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014226:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801422a:	4619      	mov	r1, r3
 801422c:	460b      	mov	r3, r1
 801422e:	005b      	lsls	r3, r3, #1
 8014230:	440b      	add	r3, r1
 8014232:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014234:	429a      	cmp	r2, r3
 8014236:	d302      	bcc.n	801423e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014238:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801423a:	f000 fec9 	bl	8014fd0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014240:	7d1b      	ldrb	r3, [r3, #20]
 8014242:	2b03      	cmp	r3, #3
 8014244:	d10b      	bne.n	801425e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014246:	4b61      	ldr	r3, [pc, #388]	@ (80143cc <tcp_slowtmr+0x584>)
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424c:	6a1b      	ldr	r3, [r3, #32]
 801424e:	1ad3      	subs	r3, r2, r3
 8014250:	2b28      	cmp	r3, #40	@ 0x28
 8014252:	d904      	bls.n	801425e <tcp_slowtmr+0x416>
        ++pcb_remove;
 8014254:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014258:	3301      	adds	r3, #1
 801425a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014260:	7d1b      	ldrb	r3, [r3, #20]
 8014262:	2b09      	cmp	r3, #9
 8014264:	d10b      	bne.n	801427e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014266:	4b59      	ldr	r3, [pc, #356]	@ (80143cc <tcp_slowtmr+0x584>)
 8014268:	681a      	ldr	r2, [r3, #0]
 801426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801426c:	6a1b      	ldr	r3, [r3, #32]
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	2bf0      	cmp	r3, #240	@ 0xf0
 8014272:	d904      	bls.n	801427e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014278:	3301      	adds	r3, #1
 801427a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801427e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014282:	2b00      	cmp	r3, #0
 8014284:	d060      	beq.n	8014348 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801428c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801428e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014290:	f000 fcea 	bl	8014c68 <tcp_pcb_purge>
      if (prev != NULL) {
 8014294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014296:	2b00      	cmp	r3, #0
 8014298:	d010      	beq.n	80142bc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801429a:	4b50      	ldr	r3, [pc, #320]	@ (80143dc <tcp_slowtmr+0x594>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d106      	bne.n	80142b2 <tcp_slowtmr+0x46a>
 80142a4:	4b4e      	ldr	r3, [pc, #312]	@ (80143e0 <tcp_slowtmr+0x598>)
 80142a6:	f240 526d 	movw	r2, #1389	@ 0x56d
 80142aa:	494e      	ldr	r1, [pc, #312]	@ (80143e4 <tcp_slowtmr+0x59c>)
 80142ac:	484e      	ldr	r0, [pc, #312]	@ (80143e8 <tcp_slowtmr+0x5a0>)
 80142ae:	f009 f91b 	bl	801d4e8 <iprintf>
        prev->next = pcb->next;
 80142b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b4:	68da      	ldr	r2, [r3, #12]
 80142b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142b8:	60da      	str	r2, [r3, #12]
 80142ba:	e00f      	b.n	80142dc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80142bc:	4b47      	ldr	r3, [pc, #284]	@ (80143dc <tcp_slowtmr+0x594>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d006      	beq.n	80142d4 <tcp_slowtmr+0x48c>
 80142c6:	4b46      	ldr	r3, [pc, #280]	@ (80143e0 <tcp_slowtmr+0x598>)
 80142c8:	f240 5271 	movw	r2, #1393	@ 0x571
 80142cc:	4947      	ldr	r1, [pc, #284]	@ (80143ec <tcp_slowtmr+0x5a4>)
 80142ce:	4846      	ldr	r0, [pc, #280]	@ (80143e8 <tcp_slowtmr+0x5a0>)
 80142d0:	f009 f90a 	bl	801d4e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80142d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	4a40      	ldr	r2, [pc, #256]	@ (80143dc <tcp_slowtmr+0x594>)
 80142da:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80142dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d013      	beq.n	801430c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80142e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80142e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80142ec:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80142ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f0:	3304      	adds	r3, #4
 80142f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80142f4:	8ad2      	ldrh	r2, [r2, #22]
 80142f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80142f8:	8b09      	ldrh	r1, [r1, #24]
 80142fa:	9102      	str	r1, [sp, #8]
 80142fc:	9201      	str	r2, [sp, #4]
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	462b      	mov	r3, r5
 8014302:	4622      	mov	r2, r4
 8014304:	4601      	mov	r1, r0
 8014306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014308:	f004 fec8 	bl	801909c <tcp_rst>
      err_arg = pcb->callback_arg;
 801430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430e:	691b      	ldr	r3, [r3, #16]
 8014310:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014314:	7d1b      	ldrb	r3, [r3, #20]
 8014316:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801431a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014322:	6838      	ldr	r0, [r7, #0]
 8014324:	f7fe ffdc 	bl	80132e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014328:	4b31      	ldr	r3, [pc, #196]	@ (80143f0 <tcp_slowtmr+0x5a8>)
 801432a:	2200      	movs	r2, #0
 801432c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d004      	beq.n	801433e <tcp_slowtmr+0x4f6>
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	f06f 010c 	mvn.w	r1, #12
 801433a:	68b8      	ldr	r0, [r7, #8]
 801433c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801433e:	4b2c      	ldr	r3, [pc, #176]	@ (80143f0 <tcp_slowtmr+0x5a8>)
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d037      	beq.n	80143b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014346:	e592      	b.n	8013e6e <tcp_slowtmr+0x26>
      prev = pcb;
 8014348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801434c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434e:	68db      	ldr	r3, [r3, #12]
 8014350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8014352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014354:	7f1b      	ldrb	r3, [r3, #28]
 8014356:	3301      	adds	r3, #1
 8014358:	b2da      	uxtb	r2, r3
 801435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801435c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014360:	7f1a      	ldrb	r2, [r3, #28]
 8014362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014364:	7f5b      	ldrb	r3, [r3, #29]
 8014366:	429a      	cmp	r2, r3
 8014368:	d325      	bcc.n	80143b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801436c:	2200      	movs	r2, #0
 801436e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8014370:	4b1f      	ldr	r3, [pc, #124]	@ (80143f0 <tcp_slowtmr+0x5a8>)
 8014372:	2200      	movs	r2, #0
 8014374:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014378:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00b      	beq.n	8014398 <tcp_slowtmr+0x550>
 8014380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014388:	6912      	ldr	r2, [r2, #16]
 801438a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801438c:	4610      	mov	r0, r2
 801438e:	4798      	blx	r3
 8014390:	4603      	mov	r3, r0
 8014392:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014396:	e002      	b.n	801439e <tcp_slowtmr+0x556>
 8014398:	2300      	movs	r3, #0
 801439a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801439e:	4b14      	ldr	r3, [pc, #80]	@ (80143f0 <tcp_slowtmr+0x5a8>)
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f47f ad62 	bne.w	8013e6c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80143a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d102      	bne.n	80143b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80143b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143b2:	f004 f8bf 	bl	8018534 <tcp_output>
  while (pcb != NULL) {
 80143b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f47f ad5e 	bne.w	8013e7a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80143be:	2300      	movs	r3, #0
 80143c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80143c2:	4b0c      	ldr	r3, [pc, #48]	@ (80143f4 <tcp_slowtmr+0x5ac>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80143c8:	e069      	b.n	801449e <tcp_slowtmr+0x656>
 80143ca:	bf00      	nop
 80143cc:	2000f394 	.word	0x2000f394
 80143d0:	000a4cb8 	.word	0x000a4cb8
 80143d4:	10624dd3 	.word	0x10624dd3
 80143d8:	000124f8 	.word	0x000124f8
 80143dc:	2000f3a0 	.word	0x2000f3a0
 80143e0:	0802134c 	.word	0x0802134c
 80143e4:	08021784 	.word	0x08021784
 80143e8:	08021390 	.word	0x08021390
 80143ec:	080217b0 	.word	0x080217b0
 80143f0:	2000f3a8 	.word	0x2000f3a8
 80143f4:	2000f3a4 	.word	0x2000f3a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80143f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fa:	7d1b      	ldrb	r3, [r3, #20]
 80143fc:	2b0a      	cmp	r3, #10
 80143fe:	d006      	beq.n	801440e <tcp_slowtmr+0x5c6>
 8014400:	4b2b      	ldr	r3, [pc, #172]	@ (80144b0 <tcp_slowtmr+0x668>)
 8014402:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8014406:	492b      	ldr	r1, [pc, #172]	@ (80144b4 <tcp_slowtmr+0x66c>)
 8014408:	482b      	ldr	r0, [pc, #172]	@ (80144b8 <tcp_slowtmr+0x670>)
 801440a:	f009 f86d 	bl	801d4e8 <iprintf>
    pcb_remove = 0;
 801440e:	2300      	movs	r3, #0
 8014410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014414:	4b29      	ldr	r3, [pc, #164]	@ (80144bc <tcp_slowtmr+0x674>)
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	6a1b      	ldr	r3, [r3, #32]
 801441c:	1ad3      	subs	r3, r2, r3
 801441e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014420:	d904      	bls.n	801442c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8014422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014426:	3301      	adds	r3, #1
 8014428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801442c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014430:	2b00      	cmp	r3, #0
 8014432:	d02f      	beq.n	8014494 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014434:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014436:	f000 fc17 	bl	8014c68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801443c:	2b00      	cmp	r3, #0
 801443e:	d010      	beq.n	8014462 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014440:	4b1f      	ldr	r3, [pc, #124]	@ (80144c0 <tcp_slowtmr+0x678>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014446:	429a      	cmp	r2, r3
 8014448:	d106      	bne.n	8014458 <tcp_slowtmr+0x610>
 801444a:	4b19      	ldr	r3, [pc, #100]	@ (80144b0 <tcp_slowtmr+0x668>)
 801444c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8014450:	491c      	ldr	r1, [pc, #112]	@ (80144c4 <tcp_slowtmr+0x67c>)
 8014452:	4819      	ldr	r0, [pc, #100]	@ (80144b8 <tcp_slowtmr+0x670>)
 8014454:	f009 f848 	bl	801d4e8 <iprintf>
        prev->next = pcb->next;
 8014458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801445a:	68da      	ldr	r2, [r3, #12]
 801445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801445e:	60da      	str	r2, [r3, #12]
 8014460:	e00f      	b.n	8014482 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014462:	4b17      	ldr	r3, [pc, #92]	@ (80144c0 <tcp_slowtmr+0x678>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014468:	429a      	cmp	r2, r3
 801446a:	d006      	beq.n	801447a <tcp_slowtmr+0x632>
 801446c:	4b10      	ldr	r3, [pc, #64]	@ (80144b0 <tcp_slowtmr+0x668>)
 801446e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8014472:	4915      	ldr	r1, [pc, #84]	@ (80144c8 <tcp_slowtmr+0x680>)
 8014474:	4810      	ldr	r0, [pc, #64]	@ (80144b8 <tcp_slowtmr+0x670>)
 8014476:	f009 f837 	bl	801d4e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801447a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801447c:	68db      	ldr	r3, [r3, #12]
 801447e:	4a10      	ldr	r2, [pc, #64]	@ (80144c0 <tcp_slowtmr+0x678>)
 8014480:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014484:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014488:	68db      	ldr	r3, [r3, #12]
 801448a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801448c:	69f8      	ldr	r0, [r7, #28]
 801448e:	f7fe ff27 	bl	80132e0 <tcp_free>
 8014492:	e004      	b.n	801449e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8014494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014496:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801449e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1a9      	bne.n	80143f8 <tcp_slowtmr+0x5b0>
    }
  }
}
 80144a4:	bf00      	nop
 80144a6:	bf00      	nop
 80144a8:	3730      	adds	r7, #48	@ 0x30
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bdb0      	pop	{r4, r5, r7, pc}
 80144ae:	bf00      	nop
 80144b0:	0802134c 	.word	0x0802134c
 80144b4:	080217dc 	.word	0x080217dc
 80144b8:	08021390 	.word	0x08021390
 80144bc:	2000f394 	.word	0x2000f394
 80144c0:	2000f3a4 	.word	0x2000f3a4
 80144c4:	0802180c 	.word	0x0802180c
 80144c8:	08021834 	.word	0x08021834

080144cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80144d2:	4b2d      	ldr	r3, [pc, #180]	@ (8014588 <tcp_fasttmr+0xbc>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	3301      	adds	r3, #1
 80144d8:	b2da      	uxtb	r2, r3
 80144da:	4b2b      	ldr	r3, [pc, #172]	@ (8014588 <tcp_fasttmr+0xbc>)
 80144dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80144de:	4b2b      	ldr	r3, [pc, #172]	@ (801458c <tcp_fasttmr+0xc0>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80144e4:	e048      	b.n	8014578 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	7f9a      	ldrb	r2, [r3, #30]
 80144ea:	4b27      	ldr	r3, [pc, #156]	@ (8014588 <tcp_fasttmr+0xbc>)
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d03f      	beq.n	8014572 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80144f2:	4b25      	ldr	r3, [pc, #148]	@ (8014588 <tcp_fasttmr+0xbc>)
 80144f4:	781a      	ldrb	r2, [r3, #0]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	8b5b      	ldrh	r3, [r3, #26]
 80144fe:	f003 0301 	and.w	r3, r3, #1
 8014502:	2b00      	cmp	r3, #0
 8014504:	d010      	beq.n	8014528 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	8b5b      	ldrh	r3, [r3, #26]
 801450a:	f043 0302 	orr.w	r3, r3, #2
 801450e:	b29a      	uxth	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f004 f80d 	bl	8018534 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	8b5b      	ldrh	r3, [r3, #26]
 801451e:	f023 0303 	bic.w	r3, r3, #3
 8014522:	b29a      	uxth	r2, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	8b5b      	ldrh	r3, [r3, #26]
 801452c:	f003 0308 	and.w	r3, r3, #8
 8014530:	2b00      	cmp	r3, #0
 8014532:	d009      	beq.n	8014548 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	8b5b      	ldrh	r3, [r3, #26]
 8014538:	f023 0308 	bic.w	r3, r3, #8
 801453c:	b29a      	uxth	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014542:	6878      	ldr	r0, [r7, #4]
 8014544:	f7ff f860 	bl	8013608 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014552:	2b00      	cmp	r3, #0
 8014554:	d00a      	beq.n	801456c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014556:	4b0e      	ldr	r3, [pc, #56]	@ (8014590 <tcp_fasttmr+0xc4>)
 8014558:	2200      	movs	r2, #0
 801455a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 f819 	bl	8014594 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014562:	4b0b      	ldr	r3, [pc, #44]	@ (8014590 <tcp_fasttmr+0xc4>)
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d000      	beq.n	801456c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801456a:	e7b8      	b.n	80144de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	607b      	str	r3, [r7, #4]
 8014570:	e002      	b.n	8014578 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d1b3      	bne.n	80144e6 <tcp_fasttmr+0x1a>
    }
  }
}
 801457e:	bf00      	nop
 8014580:	bf00      	nop
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	2000f3aa 	.word	0x2000f3aa
 801458c:	2000f3a0 	.word	0x2000f3a0
 8014590:	2000f3a8 	.word	0x2000f3a8

08014594 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014594:	b590      	push	{r4, r7, lr}
 8014596:	b085      	sub	sp, #20
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d109      	bne.n	80145b6 <tcp_process_refused_data+0x22>
 80145a2:	4b37      	ldr	r3, [pc, #220]	@ (8014680 <tcp_process_refused_data+0xec>)
 80145a4:	f240 6209 	movw	r2, #1545	@ 0x609
 80145a8:	4936      	ldr	r1, [pc, #216]	@ (8014684 <tcp_process_refused_data+0xf0>)
 80145aa:	4837      	ldr	r0, [pc, #220]	@ (8014688 <tcp_process_refused_data+0xf4>)
 80145ac:	f008 ff9c 	bl	801d4e8 <iprintf>
 80145b0:	f06f 030f 	mvn.w	r3, #15
 80145b4:	e060      	b.n	8014678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145ba:	7b5b      	ldrb	r3, [r3, #13]
 80145bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d00b      	beq.n	80145ec <tcp_process_refused_data+0x58>
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6918      	ldr	r0, [r3, #16]
 80145de:	2300      	movs	r3, #0
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	6879      	ldr	r1, [r7, #4]
 80145e4:	47a0      	blx	r4
 80145e6:	4603      	mov	r3, r0
 80145e8:	73fb      	strb	r3, [r7, #15]
 80145ea:	e007      	b.n	80145fc <tcp_process_refused_data+0x68>
 80145ec:	2300      	movs	r3, #0
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	6879      	ldr	r1, [r7, #4]
 80145f2:	2000      	movs	r0, #0
 80145f4:	f000 f8c2 	bl	801477c <tcp_recv_null>
 80145f8:	4603      	mov	r3, r0
 80145fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80145fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d12a      	bne.n	801465a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014604:	7bbb      	ldrb	r3, [r7, #14]
 8014606:	f003 0320 	and.w	r3, r3, #32
 801460a:	2b00      	cmp	r3, #0
 801460c:	d033      	beq.n	8014676 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014612:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014616:	d005      	beq.n	8014624 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801461c:	3301      	adds	r3, #1
 801461e:	b29a      	uxth	r2, r3
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00b      	beq.n	8014646 <tcp_process_refused_data+0xb2>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6918      	ldr	r0, [r3, #16]
 8014638:	2300      	movs	r3, #0
 801463a:	2200      	movs	r2, #0
 801463c:	6879      	ldr	r1, [r7, #4]
 801463e:	47a0      	blx	r4
 8014640:	4603      	mov	r3, r0
 8014642:	73fb      	strb	r3, [r7, #15]
 8014644:	e001      	b.n	801464a <tcp_process_refused_data+0xb6>
 8014646:	2300      	movs	r3, #0
 8014648:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801464e:	f113 0f0d 	cmn.w	r3, #13
 8014652:	d110      	bne.n	8014676 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014654:	f06f 030c 	mvn.w	r3, #12
 8014658:	e00e      	b.n	8014678 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801465e:	f113 0f0d 	cmn.w	r3, #13
 8014662:	d102      	bne.n	801466a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014664:	f06f 030c 	mvn.w	r3, #12
 8014668:	e006      	b.n	8014678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	68ba      	ldr	r2, [r7, #8]
 801466e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8014670:	f06f 0304 	mvn.w	r3, #4
 8014674:	e000      	b.n	8014678 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014676:	2300      	movs	r3, #0
}
 8014678:	4618      	mov	r0, r3
 801467a:	3714      	adds	r7, #20
 801467c:	46bd      	mov	sp, r7
 801467e:	bd90      	pop	{r4, r7, pc}
 8014680:	0802134c 	.word	0x0802134c
 8014684:	0802185c 	.word	0x0802185c
 8014688:	08021390 	.word	0x08021390

0801468c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014694:	e007      	b.n	80146a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f80a 	bl	80146b6 <tcp_seg_free>
    seg = next;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d1f4      	bne.n	8014696 <tcp_segs_free+0xa>
  }
}
 80146ac:	bf00      	nop
 80146ae:	bf00      	nop
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80146b6:	b580      	push	{r7, lr}
 80146b8:	b082      	sub	sp, #8
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00c      	beq.n	80146de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d004      	beq.n	80146d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fe fb49 	bl	8012d68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80146d6:	6879      	ldr	r1, [r7, #4]
 80146d8:	2003      	movs	r0, #3
 80146da:	f7fd fca1 	bl	8012020 <memp_free>
  }
}
 80146de:	bf00      	nop
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
	...

080146e8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d107      	bne.n	801470a <tcp_setprio+0x22>
 80146fa:	4b07      	ldr	r3, [pc, #28]	@ (8014718 <tcp_setprio+0x30>)
 80146fc:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8014700:	4906      	ldr	r1, [pc, #24]	@ (801471c <tcp_setprio+0x34>)
 8014702:	4807      	ldr	r0, [pc, #28]	@ (8014720 <tcp_setprio+0x38>)
 8014704:	f008 fef0 	bl	801d4e8 <iprintf>
 8014708:	e002      	b.n	8014710 <tcp_setprio+0x28>

  pcb->prio = prio;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	78fa      	ldrb	r2, [r7, #3]
 801470e:	755a      	strb	r2, [r3, #21]
}
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	0802134c 	.word	0x0802134c
 801471c:	08021884 	.word	0x08021884
 8014720:	08021390 	.word	0x08021390

08014724 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d106      	bne.n	8014740 <tcp_seg_copy+0x1c>
 8014732:	4b0f      	ldr	r3, [pc, #60]	@ (8014770 <tcp_seg_copy+0x4c>)
 8014734:	f240 6282 	movw	r2, #1666	@ 0x682
 8014738:	490e      	ldr	r1, [pc, #56]	@ (8014774 <tcp_seg_copy+0x50>)
 801473a:	480f      	ldr	r0, [pc, #60]	@ (8014778 <tcp_seg_copy+0x54>)
 801473c:	f008 fed4 	bl	801d4e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014740:	2003      	movs	r0, #3
 8014742:	f7fd fbf7 	bl	8011f34 <memp_malloc>
 8014746:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d101      	bne.n	8014752 <tcp_seg_copy+0x2e>
    return NULL;
 801474e:	2300      	movs	r3, #0
 8014750:	e00a      	b.n	8014768 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014752:	2210      	movs	r2, #16
 8014754:	6879      	ldr	r1, [r7, #4]
 8014756:	68f8      	ldr	r0, [r7, #12]
 8014758:	f009 f853 	bl	801d802 <memcpy>
  pbuf_ref(cseg->p);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	4618      	mov	r0, r3
 8014762:	f7fe fba7 	bl	8012eb4 <pbuf_ref>
  return cseg;
 8014766:	68fb      	ldr	r3, [r7, #12]
}
 8014768:	4618      	mov	r0, r3
 801476a:	3710      	adds	r7, #16
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	0802134c 	.word	0x0802134c
 8014774:	080218a0 	.word	0x080218a0
 8014778:	08021390 	.word	0x08021390

0801477c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	607a      	str	r2, [r7, #4]
 8014788:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d109      	bne.n	80147a4 <tcp_recv_null+0x28>
 8014790:	4b12      	ldr	r3, [pc, #72]	@ (80147dc <tcp_recv_null+0x60>)
 8014792:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014796:	4912      	ldr	r1, [pc, #72]	@ (80147e0 <tcp_recv_null+0x64>)
 8014798:	4812      	ldr	r0, [pc, #72]	@ (80147e4 <tcp_recv_null+0x68>)
 801479a:	f008 fea5 	bl	801d4e8 <iprintf>
 801479e:	f06f 030f 	mvn.w	r3, #15
 80147a2:	e016      	b.n	80147d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d009      	beq.n	80147be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	891b      	ldrh	r3, [r3, #8]
 80147ae:	4619      	mov	r1, r3
 80147b0:	68b8      	ldr	r0, [r7, #8]
 80147b2:	f7ff fab3 	bl	8013d1c <tcp_recved>
    pbuf_free(p);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7fe fad6 	bl	8012d68 <pbuf_free>
 80147bc:	e008      	b.n	80147d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80147be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d104      	bne.n	80147d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80147c6:	68b8      	ldr	r0, [r7, #8]
 80147c8:	f7fe ff88 	bl	80136dc <tcp_close>
 80147cc:	4603      	mov	r3, r0
 80147ce:	e000      	b.n	80147d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80147d0:	2300      	movs	r3, #0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	0802134c 	.word	0x0802134c
 80147e0:	080218bc 	.word	0x080218bc
 80147e4:	08021390 	.word	0x08021390

080147e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	4603      	mov	r3, r0
 80147f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80147f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	db01      	blt.n	80147fe <tcp_kill_prio+0x16>
 80147fa:	79fb      	ldrb	r3, [r7, #7]
 80147fc:	e000      	b.n	8014800 <tcp_kill_prio+0x18>
 80147fe:	237f      	movs	r3, #127	@ 0x7f
 8014800:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d034      	beq.n	8014872 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	3b01      	subs	r3, #1
 801480c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801480e:	2300      	movs	r3, #0
 8014810:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014812:	2300      	movs	r3, #0
 8014814:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014816:	4b19      	ldr	r3, [pc, #100]	@ (801487c <tcp_kill_prio+0x94>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	617b      	str	r3, [r7, #20]
 801481c:	e01f      	b.n	801485e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	7d5b      	ldrb	r3, [r3, #21]
 8014822:	7afa      	ldrb	r2, [r7, #11]
 8014824:	429a      	cmp	r2, r3
 8014826:	d80c      	bhi.n	8014842 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801482c:	7afa      	ldrb	r2, [r7, #11]
 801482e:	429a      	cmp	r2, r3
 8014830:	d112      	bne.n	8014858 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014832:	4b13      	ldr	r3, [pc, #76]	@ (8014880 <tcp_kill_prio+0x98>)
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	6a1b      	ldr	r3, [r3, #32]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	429a      	cmp	r2, r3
 8014840:	d80a      	bhi.n	8014858 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014842:	4b0f      	ldr	r3, [pc, #60]	@ (8014880 <tcp_kill_prio+0x98>)
 8014844:	681a      	ldr	r2, [r3, #0]
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	6a1b      	ldr	r3, [r3, #32]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801484e:	697b      	ldr	r3, [r7, #20]
 8014850:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014852:	697b      	ldr	r3, [r7, #20]
 8014854:	7d5b      	ldrb	r3, [r3, #21]
 8014856:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	617b      	str	r3, [r7, #20]
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d1dc      	bne.n	801481e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d004      	beq.n	8014874 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801486a:	6938      	ldr	r0, [r7, #16]
 801486c:	f7ff f87c 	bl	8013968 <tcp_abort>
 8014870:	e000      	b.n	8014874 <tcp_kill_prio+0x8c>
    return;
 8014872:	bf00      	nop
  }
}
 8014874:	3718      	adds	r7, #24
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	2000f3a0 	.word	0x2000f3a0
 8014880:	2000f394 	.word	0x2000f394

08014884 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b086      	sub	sp, #24
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801488e:	79fb      	ldrb	r3, [r7, #7]
 8014890:	2b08      	cmp	r3, #8
 8014892:	d009      	beq.n	80148a8 <tcp_kill_state+0x24>
 8014894:	79fb      	ldrb	r3, [r7, #7]
 8014896:	2b09      	cmp	r3, #9
 8014898:	d006      	beq.n	80148a8 <tcp_kill_state+0x24>
 801489a:	4b1a      	ldr	r3, [pc, #104]	@ (8014904 <tcp_kill_state+0x80>)
 801489c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80148a0:	4919      	ldr	r1, [pc, #100]	@ (8014908 <tcp_kill_state+0x84>)
 80148a2:	481a      	ldr	r0, [pc, #104]	@ (801490c <tcp_kill_state+0x88>)
 80148a4:	f008 fe20 	bl	801d4e8 <iprintf>

  inactivity = 0;
 80148a8:	2300      	movs	r3, #0
 80148aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80148ac:	2300      	movs	r3, #0
 80148ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148b0:	4b17      	ldr	r3, [pc, #92]	@ (8014910 <tcp_kill_state+0x8c>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	617b      	str	r3, [r7, #20]
 80148b6:	e017      	b.n	80148e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	7d1b      	ldrb	r3, [r3, #20]
 80148bc:	79fa      	ldrb	r2, [r7, #7]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d10f      	bne.n	80148e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80148c2:	4b14      	ldr	r3, [pc, #80]	@ (8014914 <tcp_kill_state+0x90>)
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	6a1b      	ldr	r3, [r3, #32]
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	429a      	cmp	r2, r3
 80148d0:	d807      	bhi.n	80148e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80148d2:	4b10      	ldr	r3, [pc, #64]	@ (8014914 <tcp_kill_state+0x90>)
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	6a1b      	ldr	r3, [r3, #32]
 80148da:	1ad3      	subs	r3, r2, r3
 80148dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	617b      	str	r3, [r7, #20]
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1e4      	bne.n	80148b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80148ee:	693b      	ldr	r3, [r7, #16]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d003      	beq.n	80148fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80148f4:	2100      	movs	r1, #0
 80148f6:	6938      	ldr	r0, [r7, #16]
 80148f8:	f7fe ff78 	bl	80137ec <tcp_abandon>
  }
}
 80148fc:	bf00      	nop
 80148fe:	3718      	adds	r7, #24
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	0802134c 	.word	0x0802134c
 8014908:	080218d8 	.word	0x080218d8
 801490c:	08021390 	.word	0x08021390
 8014910:	2000f3a0 	.word	0x2000f3a0
 8014914:	2000f394 	.word	0x2000f394

08014918 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801491e:	2300      	movs	r3, #0
 8014920:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014922:	2300      	movs	r3, #0
 8014924:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014926:	4b12      	ldr	r3, [pc, #72]	@ (8014970 <tcp_kill_timewait+0x58>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	60fb      	str	r3, [r7, #12]
 801492c:	e012      	b.n	8014954 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801492e:	4b11      	ldr	r3, [pc, #68]	@ (8014974 <tcp_kill_timewait+0x5c>)
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	6a1b      	ldr	r3, [r3, #32]
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	687a      	ldr	r2, [r7, #4]
 801493a:	429a      	cmp	r2, r3
 801493c:	d807      	bhi.n	801494e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801493e:	4b0d      	ldr	r3, [pc, #52]	@ (8014974 <tcp_kill_timewait+0x5c>)
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	6a1b      	ldr	r3, [r3, #32]
 8014946:	1ad3      	subs	r3, r2, r3
 8014948:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	60fb      	str	r3, [r7, #12]
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d1e9      	bne.n	801492e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d002      	beq.n	8014966 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014960:	68b8      	ldr	r0, [r7, #8]
 8014962:	f7ff f801 	bl	8013968 <tcp_abort>
  }
}
 8014966:	bf00      	nop
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	2000f3a4 	.word	0x2000f3a4
 8014974:	2000f394 	.word	0x2000f394

08014978 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801497e:	4b10      	ldr	r3, [pc, #64]	@ (80149c0 <tcp_handle_closepend+0x48>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014984:	e014      	b.n	80149b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	8b5b      	ldrh	r3, [r3, #26]
 8014990:	f003 0308 	and.w	r3, r3, #8
 8014994:	2b00      	cmp	r3, #0
 8014996:	d009      	beq.n	80149ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	8b5b      	ldrh	r3, [r3, #26]
 801499c:	f023 0308 	bic.w	r3, r3, #8
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f7fe fe2e 	bl	8013608 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1e7      	bne.n	8014986 <tcp_handle_closepend+0xe>
  }
}
 80149b6:	bf00      	nop
 80149b8:	bf00      	nop
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	2000f3a0 	.word	0x2000f3a0

080149c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	4603      	mov	r3, r0
 80149cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149ce:	2001      	movs	r0, #1
 80149d0:	f7fd fab0 	bl	8011f34 <memp_malloc>
 80149d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d126      	bne.n	8014a2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80149dc:	f7ff ffcc 	bl	8014978 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80149e0:	f7ff ff9a 	bl	8014918 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149e4:	2001      	movs	r0, #1
 80149e6:	f7fd faa5 	bl	8011f34 <memp_malloc>
 80149ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d11b      	bne.n	8014a2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80149f2:	2009      	movs	r0, #9
 80149f4:	f7ff ff46 	bl	8014884 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149f8:	2001      	movs	r0, #1
 80149fa:	f7fd fa9b 	bl	8011f34 <memp_malloc>
 80149fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d111      	bne.n	8014a2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014a06:	2008      	movs	r0, #8
 8014a08:	f7ff ff3c 	bl	8014884 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a0c:	2001      	movs	r0, #1
 8014a0e:	f7fd fa91 	bl	8011f34 <memp_malloc>
 8014a12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d107      	bne.n	8014a2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014a1a:	79fb      	ldrb	r3, [r7, #7]
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7ff fee3 	bl	80147e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014a22:	2001      	movs	r0, #1
 8014a24:	f7fd fa86 	bl	8011f34 <memp_malloc>
 8014a28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d03f      	beq.n	8014ab0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014a30:	229c      	movs	r2, #156	@ 0x9c
 8014a32:	2100      	movs	r1, #0
 8014a34:	68f8      	ldr	r0, [r7, #12]
 8014a36:	f008 fdf6 	bl	801d626 <memset>
    pcb->prio = prio;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	79fa      	ldrb	r2, [r7, #7]
 8014a3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014a46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	22ff      	movs	r2, #255	@ 0xff
 8014a5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014a66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2206      	movs	r2, #6
 8014a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2206      	movs	r2, #6
 8014a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2201      	movs	r2, #1
 8014a82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014a86:	4b0d      	ldr	r3, [pc, #52]	@ (8014abc <tcp_alloc+0xf8>)
 8014a88:	681a      	ldr	r2, [r3, #0]
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8014ac0 <tcp_alloc+0xfc>)
 8014a90:	781a      	ldrb	r2, [r3, #0]
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014a9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	4a08      	ldr	r2, [pc, #32]	@ (8014ac4 <tcp_alloc+0x100>)
 8014aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	4a07      	ldr	r2, [pc, #28]	@ (8014ac8 <tcp_alloc+0x104>)
 8014aac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	2000f394 	.word	0x2000f394
 8014ac0:	2000f3aa 	.word	0x2000f3aa
 8014ac4:	0801477d 	.word	0x0801477d
 8014ac8:	006ddd00 	.word	0x006ddd00

08014acc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014ad6:	2040      	movs	r0, #64	@ 0x40
 8014ad8:	f7ff ff74 	bl	80149c4 <tcp_alloc>
 8014adc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014ade:	68fb      	ldr	r3, [r7, #12]
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	683a      	ldr	r2, [r7, #0]
 8014afc:	611a      	str	r2, [r3, #16]
  }
}
 8014afe:	bf00      	nop
 8014b00:	370c      	adds	r7, #12
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr
	...

08014b0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00e      	beq.n	8014b3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	7d1b      	ldrb	r3, [r3, #20]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d106      	bne.n	8014b32 <tcp_recv+0x26>
 8014b24:	4b07      	ldr	r3, [pc, #28]	@ (8014b44 <tcp_recv+0x38>)
 8014b26:	f240 72df 	movw	r2, #2015	@ 0x7df
 8014b2a:	4907      	ldr	r1, [pc, #28]	@ (8014b48 <tcp_recv+0x3c>)
 8014b2c:	4807      	ldr	r0, [pc, #28]	@ (8014b4c <tcp_recv+0x40>)
 8014b2e:	f008 fcdb 	bl	801d4e8 <iprintf>
    pcb->recv = recv;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	683a      	ldr	r2, [r7, #0]
 8014b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8014b3a:	bf00      	nop
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	0802134c 	.word	0x0802134c
 8014b48:	080218e8 	.word	0x080218e8
 8014b4c:	08021390 	.word	0x08021390

08014b50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
 8014b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d00e      	beq.n	8014b7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	7d1b      	ldrb	r3, [r3, #20]
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d106      	bne.n	8014b76 <tcp_sent+0x26>
 8014b68:	4b07      	ldr	r3, [pc, #28]	@ (8014b88 <tcp_sent+0x38>)
 8014b6a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8014b6e:	4907      	ldr	r1, [pc, #28]	@ (8014b8c <tcp_sent+0x3c>)
 8014b70:	4807      	ldr	r0, [pc, #28]	@ (8014b90 <tcp_sent+0x40>)
 8014b72:	f008 fcb9 	bl	801d4e8 <iprintf>
    pcb->sent = sent;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	683a      	ldr	r2, [r7, #0]
 8014b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8014b7e:	bf00      	nop
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	0802134c 	.word	0x0802134c
 8014b8c:	08021910 	.word	0x08021910
 8014b90:	08021390 	.word	0x08021390

08014b94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d00e      	beq.n	8014bc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	7d1b      	ldrb	r3, [r3, #20]
 8014ba8:	2b01      	cmp	r3, #1
 8014baa:	d106      	bne.n	8014bba <tcp_err+0x26>
 8014bac:	4b07      	ldr	r3, [pc, #28]	@ (8014bcc <tcp_err+0x38>)
 8014bae:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014bb2:	4907      	ldr	r1, [pc, #28]	@ (8014bd0 <tcp_err+0x3c>)
 8014bb4:	4807      	ldr	r0, [pc, #28]	@ (8014bd4 <tcp_err+0x40>)
 8014bb6:	f008 fc97 	bl	801d4e8 <iprintf>
    pcb->errf = err;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	683a      	ldr	r2, [r7, #0]
 8014bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8014bc2:	bf00      	nop
 8014bc4:	3708      	adds	r7, #8
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	0802134c 	.word	0x0802134c
 8014bd0:	08021938 	.word	0x08021938
 8014bd4:	08021390 	.word	0x08021390

08014bd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b085      	sub	sp, #20
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d008      	beq.n	8014bfa <tcp_accept+0x22>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	7d1b      	ldrb	r3, [r3, #20]
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d104      	bne.n	8014bfa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	683a      	ldr	r2, [r7, #0]
 8014bf8:	619a      	str	r2, [r3, #24]
  }
}
 8014bfa:	bf00      	nop
 8014bfc:	3714      	adds	r7, #20
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c04:	4770      	bx	lr
	...

08014c08 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	60b9      	str	r1, [r7, #8]
 8014c12:	4613      	mov	r3, r2
 8014c14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d107      	bne.n	8014c2c <tcp_poll+0x24>
 8014c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8014c58 <tcp_poll+0x50>)
 8014c1e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014c22:	490e      	ldr	r1, [pc, #56]	@ (8014c5c <tcp_poll+0x54>)
 8014c24:	480e      	ldr	r0, [pc, #56]	@ (8014c60 <tcp_poll+0x58>)
 8014c26:	f008 fc5f 	bl	801d4e8 <iprintf>
 8014c2a:	e011      	b.n	8014c50 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	7d1b      	ldrb	r3, [r3, #20]
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d106      	bne.n	8014c42 <tcp_poll+0x3a>
 8014c34:	4b08      	ldr	r3, [pc, #32]	@ (8014c58 <tcp_poll+0x50>)
 8014c36:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014c3a:	490a      	ldr	r1, [pc, #40]	@ (8014c64 <tcp_poll+0x5c>)
 8014c3c:	4808      	ldr	r0, [pc, #32]	@ (8014c60 <tcp_poll+0x58>)
 8014c3e:	f008 fc53 	bl	801d4e8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	68ba      	ldr	r2, [r7, #8]
 8014c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	79fa      	ldrb	r2, [r7, #7]
 8014c4e:	775a      	strb	r2, [r3, #29]
}
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	0802134c 	.word	0x0802134c
 8014c5c:	08021960 	.word	0x08021960
 8014c60:	08021390 	.word	0x08021390
 8014c64:	08021978 	.word	0x08021978

08014c68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d107      	bne.n	8014c86 <tcp_pcb_purge+0x1e>
 8014c76:	4b21      	ldr	r3, [pc, #132]	@ (8014cfc <tcp_pcb_purge+0x94>)
 8014c78:	f640 0251 	movw	r2, #2129	@ 0x851
 8014c7c:	4920      	ldr	r1, [pc, #128]	@ (8014d00 <tcp_pcb_purge+0x98>)
 8014c7e:	4821      	ldr	r0, [pc, #132]	@ (8014d04 <tcp_pcb_purge+0x9c>)
 8014c80:	f008 fc32 	bl	801d4e8 <iprintf>
 8014c84:	e037      	b.n	8014cf6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	7d1b      	ldrb	r3, [r3, #20]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d033      	beq.n	8014cf6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014c92:	2b0a      	cmp	r3, #10
 8014c94:	d02f      	beq.n	8014cf6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d02b      	beq.n	8014cf6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d007      	beq.n	8014cb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fe f85c 	bl	8012d68 <pbuf_free>
      pcb->refused_data = NULL;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d002      	beq.n	8014cc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f000 f986 	bl	8014fd0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014cca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f7ff fcdb 	bl	801468c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f7ff fcd6 	bl	801468c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	0802134c 	.word	0x0802134c
 8014d00:	08021998 	.word	0x08021998
 8014d04:	08021390 	.word	0x08021390

08014d08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b084      	sub	sp, #16
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d106      	bne.n	8014d26 <tcp_pcb_remove+0x1e>
 8014d18:	4b3e      	ldr	r3, [pc, #248]	@ (8014e14 <tcp_pcb_remove+0x10c>)
 8014d1a:	f640 0283 	movw	r2, #2179	@ 0x883
 8014d1e:	493e      	ldr	r1, [pc, #248]	@ (8014e18 <tcp_pcb_remove+0x110>)
 8014d20:	483e      	ldr	r0, [pc, #248]	@ (8014e1c <tcp_pcb_remove+0x114>)
 8014d22:	f008 fbe1 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d106      	bne.n	8014d3a <tcp_pcb_remove+0x32>
 8014d2c:	4b39      	ldr	r3, [pc, #228]	@ (8014e14 <tcp_pcb_remove+0x10c>)
 8014d2e:	f640 0284 	movw	r2, #2180	@ 0x884
 8014d32:	493b      	ldr	r1, [pc, #236]	@ (8014e20 <tcp_pcb_remove+0x118>)
 8014d34:	4839      	ldr	r0, [pc, #228]	@ (8014e1c <tcp_pcb_remove+0x114>)
 8014d36:	f008 fbd7 	bl	801d4e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d105      	bne.n	8014d50 <tcp_pcb_remove+0x48>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	68da      	ldr	r2, [r3, #12]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	601a      	str	r2, [r3, #0]
 8014d4e:	e013      	b.n	8014d78 <tcp_pcb_remove+0x70>
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	60fb      	str	r3, [r7, #12]
 8014d56:	e00c      	b.n	8014d72 <tcp_pcb_remove+0x6a>
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	683a      	ldr	r2, [r7, #0]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d104      	bne.n	8014d6c <tcp_pcb_remove+0x64>
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	68da      	ldr	r2, [r3, #12]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	60da      	str	r2, [r3, #12]
 8014d6a:	e005      	b.n	8014d78 <tcp_pcb_remove+0x70>
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	60fb      	str	r3, [r7, #12]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d1ef      	bne.n	8014d58 <tcp_pcb_remove+0x50>
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014d7e:	6838      	ldr	r0, [r7, #0]
 8014d80:	f7ff ff72 	bl	8014c68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	7d1b      	ldrb	r3, [r3, #20]
 8014d88:	2b0a      	cmp	r3, #10
 8014d8a:	d013      	beq.n	8014db4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d00f      	beq.n	8014db4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	8b5b      	ldrh	r3, [r3, #26]
 8014d98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d009      	beq.n	8014db4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	8b5b      	ldrh	r3, [r3, #26]
 8014da4:	f043 0302 	orr.w	r3, r3, #2
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014dae:	6838      	ldr	r0, [r7, #0]
 8014db0:	f003 fbc0 	bl	8018534 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	7d1b      	ldrb	r3, [r3, #20]
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d020      	beq.n	8014dfe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d006      	beq.n	8014dd2 <tcp_pcb_remove+0xca>
 8014dc4:	4b13      	ldr	r3, [pc, #76]	@ (8014e14 <tcp_pcb_remove+0x10c>)
 8014dc6:	f640 0293 	movw	r2, #2195	@ 0x893
 8014dca:	4916      	ldr	r1, [pc, #88]	@ (8014e24 <tcp_pcb_remove+0x11c>)
 8014dcc:	4813      	ldr	r0, [pc, #76]	@ (8014e1c <tcp_pcb_remove+0x114>)
 8014dce:	f008 fb8b 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d006      	beq.n	8014de8 <tcp_pcb_remove+0xe0>
 8014dda:	4b0e      	ldr	r3, [pc, #56]	@ (8014e14 <tcp_pcb_remove+0x10c>)
 8014ddc:	f640 0294 	movw	r2, #2196	@ 0x894
 8014de0:	4911      	ldr	r1, [pc, #68]	@ (8014e28 <tcp_pcb_remove+0x120>)
 8014de2:	480e      	ldr	r0, [pc, #56]	@ (8014e1c <tcp_pcb_remove+0x114>)
 8014de4:	f008 fb80 	bl	801d4e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d006      	beq.n	8014dfe <tcp_pcb_remove+0xf6>
 8014df0:	4b08      	ldr	r3, [pc, #32]	@ (8014e14 <tcp_pcb_remove+0x10c>)
 8014df2:	f640 0296 	movw	r2, #2198	@ 0x896
 8014df6:	490d      	ldr	r1, [pc, #52]	@ (8014e2c <tcp_pcb_remove+0x124>)
 8014df8:	4808      	ldr	r0, [pc, #32]	@ (8014e1c <tcp_pcb_remove+0x114>)
 8014dfa:	f008 fb75 	bl	801d4e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	2200      	movs	r2, #0
 8014e02:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	2200      	movs	r2, #0
 8014e08:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014e0a:	bf00      	nop
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	0802134c 	.word	0x0802134c
 8014e18:	080219b4 	.word	0x080219b4
 8014e1c:	08021390 	.word	0x08021390
 8014e20:	080219d0 	.word	0x080219d0
 8014e24:	080219f0 	.word	0x080219f0
 8014e28:	08021a08 	.word	0x08021a08
 8014e2c:	08021a24 	.word	0x08021a24

08014e30 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d106      	bne.n	8014e4c <tcp_next_iss+0x1c>
 8014e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8014e68 <tcp_next_iss+0x38>)
 8014e40:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014e44:	4909      	ldr	r1, [pc, #36]	@ (8014e6c <tcp_next_iss+0x3c>)
 8014e46:	480a      	ldr	r0, [pc, #40]	@ (8014e70 <tcp_next_iss+0x40>)
 8014e48:	f008 fb4e 	bl	801d4e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014e4c:	4b09      	ldr	r3, [pc, #36]	@ (8014e74 <tcp_next_iss+0x44>)
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	4b09      	ldr	r3, [pc, #36]	@ (8014e78 <tcp_next_iss+0x48>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	4413      	add	r3, r2
 8014e56:	4a07      	ldr	r2, [pc, #28]	@ (8014e74 <tcp_next_iss+0x44>)
 8014e58:	6013      	str	r3, [r2, #0]
  return iss;
 8014e5a:	4b06      	ldr	r3, [pc, #24]	@ (8014e74 <tcp_next_iss+0x44>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	0802134c 	.word	0x0802134c
 8014e6c:	08021a3c 	.word	0x08021a3c
 8014e70:	08021390 	.word	0x08021390
 8014e74:	20000080 	.word	0x20000080
 8014e78:	2000f394 	.word	0x2000f394

08014e7c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b086      	sub	sp, #24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	4603      	mov	r3, r0
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
 8014e88:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d106      	bne.n	8014e9e <tcp_eff_send_mss_netif+0x22>
 8014e90:	4b14      	ldr	r3, [pc, #80]	@ (8014ee4 <tcp_eff_send_mss_netif+0x68>)
 8014e92:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014e96:	4914      	ldr	r1, [pc, #80]	@ (8014ee8 <tcp_eff_send_mss_netif+0x6c>)
 8014e98:	4814      	ldr	r0, [pc, #80]	@ (8014eec <tcp_eff_send_mss_netif+0x70>)
 8014e9a:	f008 fb25 	bl	801d4e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d101      	bne.n	8014ea8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014ea4:	89fb      	ldrh	r3, [r7, #14]
 8014ea6:	e019      	b.n	8014edc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014eac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014eae:	8afb      	ldrh	r3, [r7, #22]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d012      	beq.n	8014eda <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014eb4:	2328      	movs	r3, #40	@ 0x28
 8014eb6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014eb8:	8afa      	ldrh	r2, [r7, #22]
 8014eba:	8abb      	ldrh	r3, [r7, #20]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d904      	bls.n	8014eca <tcp_eff_send_mss_netif+0x4e>
 8014ec0:	8afa      	ldrh	r2, [r7, #22]
 8014ec2:	8abb      	ldrh	r3, [r7, #20]
 8014ec4:	1ad3      	subs	r3, r2, r3
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	e000      	b.n	8014ecc <tcp_eff_send_mss_netif+0x50>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014ece:	8a7a      	ldrh	r2, [r7, #18]
 8014ed0:	89fb      	ldrh	r3, [r7, #14]
 8014ed2:	4293      	cmp	r3, r2
 8014ed4:	bf28      	it	cs
 8014ed6:	4613      	movcs	r3, r2
 8014ed8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014eda:	89fb      	ldrh	r3, [r7, #14]
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3718      	adds	r7, #24
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	0802134c 	.word	0x0802134c
 8014ee8:	08021a58 	.word	0x08021a58
 8014eec:	08021390 	.word	0x08021390

08014ef0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b084      	sub	sp, #16
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d119      	bne.n	8014f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014f04:	4b10      	ldr	r3, [pc, #64]	@ (8014f48 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014f06:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014f0a:	4910      	ldr	r1, [pc, #64]	@ (8014f4c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014f0c:	4810      	ldr	r0, [pc, #64]	@ (8014f50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014f0e:	f008 faeb 	bl	801d4e8 <iprintf>

  while (pcb != NULL) {
 8014f12:	e011      	b.n	8014f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d108      	bne.n	8014f32 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	68db      	ldr	r3, [r3, #12]
 8014f24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f7fe fd1e 	bl	8013968 <tcp_abort>
      pcb = next;
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	60fb      	str	r3, [r7, #12]
 8014f30:	e002      	b.n	8014f38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d1ea      	bne.n	8014f14 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014f3e:	bf00      	nop
 8014f40:	bf00      	nop
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	0802134c 	.word	0x0802134c
 8014f4c:	08021a80 	.word	0x08021a80
 8014f50:	08021390 	.word	0x08021390

08014f54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
 8014f5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d02a      	beq.n	8014fba <tcp_netif_ip_addr_changed+0x66>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d026      	beq.n	8014fba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014f6c:	4b15      	ldr	r3, [pc, #84]	@ (8014fc4 <tcp_netif_ip_addr_changed+0x70>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	4619      	mov	r1, r3
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7ff ffbc 	bl	8014ef0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014f78:	4b13      	ldr	r3, [pc, #76]	@ (8014fc8 <tcp_netif_ip_addr_changed+0x74>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	6878      	ldr	r0, [r7, #4]
 8014f80:	f7ff ffb6 	bl	8014ef0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d017      	beq.n	8014fba <tcp_netif_ip_addr_changed+0x66>
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d013      	beq.n	8014fba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f92:	4b0e      	ldr	r3, [pc, #56]	@ (8014fcc <tcp_netif_ip_addr_changed+0x78>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	60fb      	str	r3, [r7, #12]
 8014f98:	e00c      	b.n	8014fb4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	681a      	ldr	r2, [r3, #0]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	429a      	cmp	r2, r3
 8014fa4:	d103      	bne.n	8014fae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	60fb      	str	r3, [r7, #12]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d1ef      	bne.n	8014f9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014fba:	bf00      	nop
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	2000f3a0 	.word	0x2000f3a0
 8014fc8:	2000f398 	.word	0x2000f398
 8014fcc:	2000f39c 	.word	0x2000f39c

08014fd0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d007      	beq.n	8014ff0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7ff fb51 	bl	801468c <tcp_segs_free>
    pcb->ooseq = NULL;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014ff0:	bf00      	nop
 8014ff2:	3708      	adds	r7, #8
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014ff8:	b590      	push	{r4, r7, lr}
 8014ffa:	b08d      	sub	sp, #52	@ 0x34
 8014ffc:	af04      	add	r7, sp, #16
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d105      	bne.n	8015014 <tcp_input+0x1c>
 8015008:	4b9b      	ldr	r3, [pc, #620]	@ (8015278 <tcp_input+0x280>)
 801500a:	2283      	movs	r2, #131	@ 0x83
 801500c:	499b      	ldr	r1, [pc, #620]	@ (801527c <tcp_input+0x284>)
 801500e:	489c      	ldr	r0, [pc, #624]	@ (8015280 <tcp_input+0x288>)
 8015010:	f008 fa6a 	bl	801d4e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	4a9a      	ldr	r2, [pc, #616]	@ (8015284 <tcp_input+0x28c>)
 801501a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	895b      	ldrh	r3, [r3, #10]
 8015020:	2b13      	cmp	r3, #19
 8015022:	f240 83d1 	bls.w	80157c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015026:	4b98      	ldr	r3, [pc, #608]	@ (8015288 <tcp_input+0x290>)
 8015028:	695b      	ldr	r3, [r3, #20]
 801502a:	4a97      	ldr	r2, [pc, #604]	@ (8015288 <tcp_input+0x290>)
 801502c:	6812      	ldr	r2, [r2, #0]
 801502e:	4611      	mov	r1, r2
 8015030:	4618      	mov	r0, r3
 8015032:	f006 fbc9 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	f040 83c7 	bne.w	80157cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801503e:	4b92      	ldr	r3, [pc, #584]	@ (8015288 <tcp_input+0x290>)
 8015040:	695b      	ldr	r3, [r3, #20]
 8015042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015046:	2be0      	cmp	r3, #224	@ 0xe0
 8015048:	f000 83c0 	beq.w	80157cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801504c:	4b8d      	ldr	r3, [pc, #564]	@ (8015284 <tcp_input+0x28c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	899b      	ldrh	r3, [r3, #12]
 8015052:	b29b      	uxth	r3, r3
 8015054:	4618      	mov	r0, r3
 8015056:	f7fc fa5f 	bl	8011518 <lwip_htons>
 801505a:	4603      	mov	r3, r0
 801505c:	0b1b      	lsrs	r3, r3, #12
 801505e:	b29b      	uxth	r3, r3
 8015060:	b2db      	uxtb	r3, r3
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015066:	7cbb      	ldrb	r3, [r7, #18]
 8015068:	2b13      	cmp	r3, #19
 801506a:	f240 83b1 	bls.w	80157d0 <tcp_input+0x7d8>
 801506e:	7cbb      	ldrb	r3, [r7, #18]
 8015070:	b29a      	uxth	r2, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	891b      	ldrh	r3, [r3, #8]
 8015076:	429a      	cmp	r2, r3
 8015078:	f200 83aa 	bhi.w	80157d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801507c:	7cbb      	ldrb	r3, [r7, #18]
 801507e:	b29b      	uxth	r3, r3
 8015080:	3b14      	subs	r3, #20
 8015082:	b29a      	uxth	r2, r3
 8015084:	4b81      	ldr	r3, [pc, #516]	@ (801528c <tcp_input+0x294>)
 8015086:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015088:	4b81      	ldr	r3, [pc, #516]	@ (8015290 <tcp_input+0x298>)
 801508a:	2200      	movs	r2, #0
 801508c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	895a      	ldrh	r2, [r3, #10]
 8015092:	7cbb      	ldrb	r3, [r7, #18]
 8015094:	b29b      	uxth	r3, r3
 8015096:	429a      	cmp	r2, r3
 8015098:	d309      	bcc.n	80150ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801509a:	4b7c      	ldr	r3, [pc, #496]	@ (801528c <tcp_input+0x294>)
 801509c:	881a      	ldrh	r2, [r3, #0]
 801509e:	4b7d      	ldr	r3, [pc, #500]	@ (8015294 <tcp_input+0x29c>)
 80150a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80150a2:	7cbb      	ldrb	r3, [r7, #18]
 80150a4:	4619      	mov	r1, r3
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f7fd fdd8 	bl	8012c5c <pbuf_remove_header>
 80150ac:	e04e      	b.n	801514c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d105      	bne.n	80150c2 <tcp_input+0xca>
 80150b6:	4b70      	ldr	r3, [pc, #448]	@ (8015278 <tcp_input+0x280>)
 80150b8:	22c2      	movs	r2, #194	@ 0xc2
 80150ba:	4977      	ldr	r1, [pc, #476]	@ (8015298 <tcp_input+0x2a0>)
 80150bc:	4870      	ldr	r0, [pc, #448]	@ (8015280 <tcp_input+0x288>)
 80150be:	f008 fa13 	bl	801d4e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80150c2:	2114      	movs	r1, #20
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7fd fdc9 	bl	8012c5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	895a      	ldrh	r2, [r3, #10]
 80150ce:	4b71      	ldr	r3, [pc, #452]	@ (8015294 <tcp_input+0x29c>)
 80150d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80150d2:	4b6e      	ldr	r3, [pc, #440]	@ (801528c <tcp_input+0x294>)
 80150d4:	881a      	ldrh	r2, [r3, #0]
 80150d6:	4b6f      	ldr	r3, [pc, #444]	@ (8015294 <tcp_input+0x29c>)
 80150d8:	881b      	ldrh	r3, [r3, #0]
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80150de:	4b6d      	ldr	r3, [pc, #436]	@ (8015294 <tcp_input+0x29c>)
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	4619      	mov	r1, r3
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f7fd fdb9 	bl	8012c5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	895b      	ldrh	r3, [r3, #10]
 80150f0:	8a3a      	ldrh	r2, [r7, #16]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	f200 836e 	bhi.w	80157d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	4a64      	ldr	r2, [pc, #400]	@ (8015290 <tcp_input+0x298>)
 8015100:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	8a3a      	ldrh	r2, [r7, #16]
 8015108:	4611      	mov	r1, r2
 801510a:	4618      	mov	r0, r3
 801510c:	f7fd fda6 	bl	8012c5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	891a      	ldrh	r2, [r3, #8]
 8015114:	8a3b      	ldrh	r3, [r7, #16]
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	b29a      	uxth	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	895b      	ldrh	r3, [r3, #10]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d005      	beq.n	8015132 <tcp_input+0x13a>
 8015126:	4b54      	ldr	r3, [pc, #336]	@ (8015278 <tcp_input+0x280>)
 8015128:	22df      	movs	r2, #223	@ 0xdf
 801512a:	495c      	ldr	r1, [pc, #368]	@ (801529c <tcp_input+0x2a4>)
 801512c:	4854      	ldr	r0, [pc, #336]	@ (8015280 <tcp_input+0x288>)
 801512e:	f008 f9db 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	891a      	ldrh	r2, [r3, #8]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	891b      	ldrh	r3, [r3, #8]
 801513c:	429a      	cmp	r2, r3
 801513e:	d005      	beq.n	801514c <tcp_input+0x154>
 8015140:	4b4d      	ldr	r3, [pc, #308]	@ (8015278 <tcp_input+0x280>)
 8015142:	22e0      	movs	r2, #224	@ 0xe0
 8015144:	4956      	ldr	r1, [pc, #344]	@ (80152a0 <tcp_input+0x2a8>)
 8015146:	484e      	ldr	r0, [pc, #312]	@ (8015280 <tcp_input+0x288>)
 8015148:	f008 f9ce 	bl	801d4e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801514c:	4b4d      	ldr	r3, [pc, #308]	@ (8015284 <tcp_input+0x28c>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	881b      	ldrh	r3, [r3, #0]
 8015152:	b29b      	uxth	r3, r3
 8015154:	4a4b      	ldr	r2, [pc, #300]	@ (8015284 <tcp_input+0x28c>)
 8015156:	6814      	ldr	r4, [r2, #0]
 8015158:	4618      	mov	r0, r3
 801515a:	f7fc f9dd 	bl	8011518 <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015162:	4b48      	ldr	r3, [pc, #288]	@ (8015284 <tcp_input+0x28c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	885b      	ldrh	r3, [r3, #2]
 8015168:	b29b      	uxth	r3, r3
 801516a:	4a46      	ldr	r2, [pc, #280]	@ (8015284 <tcp_input+0x28c>)
 801516c:	6814      	ldr	r4, [r2, #0]
 801516e:	4618      	mov	r0, r3
 8015170:	f7fc f9d2 	bl	8011518 <lwip_htons>
 8015174:	4603      	mov	r3, r0
 8015176:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015178:	4b42      	ldr	r3, [pc, #264]	@ (8015284 <tcp_input+0x28c>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	4a41      	ldr	r2, [pc, #260]	@ (8015284 <tcp_input+0x28c>)
 8015180:	6814      	ldr	r4, [r2, #0]
 8015182:	4618      	mov	r0, r3
 8015184:	f7fc f9dd 	bl	8011542 <lwip_htonl>
 8015188:	4603      	mov	r3, r0
 801518a:	6063      	str	r3, [r4, #4]
 801518c:	6863      	ldr	r3, [r4, #4]
 801518e:	4a45      	ldr	r2, [pc, #276]	@ (80152a4 <tcp_input+0x2ac>)
 8015190:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015192:	4b3c      	ldr	r3, [pc, #240]	@ (8015284 <tcp_input+0x28c>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	689b      	ldr	r3, [r3, #8]
 8015198:	4a3a      	ldr	r2, [pc, #232]	@ (8015284 <tcp_input+0x28c>)
 801519a:	6814      	ldr	r4, [r2, #0]
 801519c:	4618      	mov	r0, r3
 801519e:	f7fc f9d0 	bl	8011542 <lwip_htonl>
 80151a2:	4603      	mov	r3, r0
 80151a4:	60a3      	str	r3, [r4, #8]
 80151a6:	68a3      	ldr	r3, [r4, #8]
 80151a8:	4a3f      	ldr	r2, [pc, #252]	@ (80152a8 <tcp_input+0x2b0>)
 80151aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80151ac:	4b35      	ldr	r3, [pc, #212]	@ (8015284 <tcp_input+0x28c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	89db      	ldrh	r3, [r3, #14]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	4a33      	ldr	r2, [pc, #204]	@ (8015284 <tcp_input+0x28c>)
 80151b6:	6814      	ldr	r4, [r2, #0]
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7fc f9ad 	bl	8011518 <lwip_htons>
 80151be:	4603      	mov	r3, r0
 80151c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80151c2:	4b30      	ldr	r3, [pc, #192]	@ (8015284 <tcp_input+0x28c>)
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	899b      	ldrh	r3, [r3, #12]
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fc f9a4 	bl	8011518 <lwip_htons>
 80151d0:	4603      	mov	r3, r0
 80151d2:	b2db      	uxtb	r3, r3
 80151d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80151d8:	b2da      	uxtb	r2, r3
 80151da:	4b34      	ldr	r3, [pc, #208]	@ (80152ac <tcp_input+0x2b4>)
 80151dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	891a      	ldrh	r2, [r3, #8]
 80151e2:	4b33      	ldr	r3, [pc, #204]	@ (80152b0 <tcp_input+0x2b8>)
 80151e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80151e6:	4b31      	ldr	r3, [pc, #196]	@ (80152ac <tcp_input+0x2b4>)
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	f003 0303 	and.w	r3, r3, #3
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d00c      	beq.n	801520c <tcp_input+0x214>
    tcplen++;
 80151f2:	4b2f      	ldr	r3, [pc, #188]	@ (80152b0 <tcp_input+0x2b8>)
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	3301      	adds	r3, #1
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	4b2d      	ldr	r3, [pc, #180]	@ (80152b0 <tcp_input+0x2b8>)
 80151fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	891a      	ldrh	r2, [r3, #8]
 8015202:	4b2b      	ldr	r3, [pc, #172]	@ (80152b0 <tcp_input+0x2b8>)
 8015204:	881b      	ldrh	r3, [r3, #0]
 8015206:	429a      	cmp	r2, r3
 8015208:	f200 82e6 	bhi.w	80157d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801520c:	2300      	movs	r3, #0
 801520e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015210:	4b28      	ldr	r3, [pc, #160]	@ (80152b4 <tcp_input+0x2bc>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	61fb      	str	r3, [r7, #28]
 8015216:	e09d      	b.n	8015354 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	7d1b      	ldrb	r3, [r3, #20]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d105      	bne.n	801522c <tcp_input+0x234>
 8015220:	4b15      	ldr	r3, [pc, #84]	@ (8015278 <tcp_input+0x280>)
 8015222:	22fb      	movs	r2, #251	@ 0xfb
 8015224:	4924      	ldr	r1, [pc, #144]	@ (80152b8 <tcp_input+0x2c0>)
 8015226:	4816      	ldr	r0, [pc, #88]	@ (8015280 <tcp_input+0x288>)
 8015228:	f008 f95e 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	7d1b      	ldrb	r3, [r3, #20]
 8015230:	2b0a      	cmp	r3, #10
 8015232:	d105      	bne.n	8015240 <tcp_input+0x248>
 8015234:	4b10      	ldr	r3, [pc, #64]	@ (8015278 <tcp_input+0x280>)
 8015236:	22fc      	movs	r2, #252	@ 0xfc
 8015238:	4920      	ldr	r1, [pc, #128]	@ (80152bc <tcp_input+0x2c4>)
 801523a:	4811      	ldr	r0, [pc, #68]	@ (8015280 <tcp_input+0x288>)
 801523c:	f008 f954 	bl	801d4e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	7d1b      	ldrb	r3, [r3, #20]
 8015244:	2b01      	cmp	r3, #1
 8015246:	d105      	bne.n	8015254 <tcp_input+0x25c>
 8015248:	4b0b      	ldr	r3, [pc, #44]	@ (8015278 <tcp_input+0x280>)
 801524a:	22fd      	movs	r2, #253	@ 0xfd
 801524c:	491c      	ldr	r1, [pc, #112]	@ (80152c0 <tcp_input+0x2c8>)
 801524e:	480c      	ldr	r0, [pc, #48]	@ (8015280 <tcp_input+0x288>)
 8015250:	f008 f94a 	bl	801d4e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015254:	69fb      	ldr	r3, [r7, #28]
 8015256:	7a1b      	ldrb	r3, [r3, #8]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d033      	beq.n	80152c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	7a1a      	ldrb	r2, [r3, #8]
 8015260:	4b09      	ldr	r3, [pc, #36]	@ (8015288 <tcp_input+0x290>)
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015268:	3301      	adds	r3, #1
 801526a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801526c:	429a      	cmp	r2, r3
 801526e:	d029      	beq.n	80152c4 <tcp_input+0x2cc>
      prev = pcb;
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	61bb      	str	r3, [r7, #24]
      continue;
 8015274:	e06b      	b.n	801534e <tcp_input+0x356>
 8015276:	bf00      	nop
 8015278:	08021ab4 	.word	0x08021ab4
 801527c:	08021ae8 	.word	0x08021ae8
 8015280:	08021b00 	.word	0x08021b00
 8015284:	2000f3bc 	.word	0x2000f3bc
 8015288:	2000bc40 	.word	0x2000bc40
 801528c:	2000f3c0 	.word	0x2000f3c0
 8015290:	2000f3c4 	.word	0x2000f3c4
 8015294:	2000f3c2 	.word	0x2000f3c2
 8015298:	08021b28 	.word	0x08021b28
 801529c:	08021b38 	.word	0x08021b38
 80152a0:	08021b44 	.word	0x08021b44
 80152a4:	2000f3cc 	.word	0x2000f3cc
 80152a8:	2000f3d0 	.word	0x2000f3d0
 80152ac:	2000f3d8 	.word	0x2000f3d8
 80152b0:	2000f3d6 	.word	0x2000f3d6
 80152b4:	2000f3a0 	.word	0x2000f3a0
 80152b8:	08021b64 	.word	0x08021b64
 80152bc:	08021b8c 	.word	0x08021b8c
 80152c0:	08021bb8 	.word	0x08021bb8
    }

    if (pcb->remote_port == tcphdr->src &&
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	8b1a      	ldrh	r2, [r3, #24]
 80152c8:	4b72      	ldr	r3, [pc, #456]	@ (8015494 <tcp_input+0x49c>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	881b      	ldrh	r3, [r3, #0]
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d13a      	bne.n	801534a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	8ada      	ldrh	r2, [r3, #22]
 80152d8:	4b6e      	ldr	r3, [pc, #440]	@ (8015494 <tcp_input+0x49c>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	885b      	ldrh	r3, [r3, #2]
 80152de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80152e0:	429a      	cmp	r2, r3
 80152e2:	d132      	bne.n	801534a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	685a      	ldr	r2, [r3, #4]
 80152e8:	4b6b      	ldr	r3, [pc, #428]	@ (8015498 <tcp_input+0x4a0>)
 80152ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d12c      	bne.n	801534a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	4b68      	ldr	r3, [pc, #416]	@ (8015498 <tcp_input+0x4a0>)
 80152f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d126      	bne.n	801534a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	69fa      	ldr	r2, [r7, #28]
 8015302:	429a      	cmp	r2, r3
 8015304:	d106      	bne.n	8015314 <tcp_input+0x31c>
 8015306:	4b65      	ldr	r3, [pc, #404]	@ (801549c <tcp_input+0x4a4>)
 8015308:	f240 120d 	movw	r2, #269	@ 0x10d
 801530c:	4964      	ldr	r1, [pc, #400]	@ (80154a0 <tcp_input+0x4a8>)
 801530e:	4865      	ldr	r0, [pc, #404]	@ (80154a4 <tcp_input+0x4ac>)
 8015310:	f008 f8ea 	bl	801d4e8 <iprintf>
      if (prev != NULL) {
 8015314:	69bb      	ldr	r3, [r7, #24]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d00a      	beq.n	8015330 <tcp_input+0x338>
        prev->next = pcb->next;
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	68da      	ldr	r2, [r3, #12]
 801531e:	69bb      	ldr	r3, [r7, #24]
 8015320:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015322:	4b61      	ldr	r3, [pc, #388]	@ (80154a8 <tcp_input+0x4b0>)
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801532a:	4a5f      	ldr	r2, [pc, #380]	@ (80154a8 <tcp_input+0x4b0>)
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	68db      	ldr	r3, [r3, #12]
 8015334:	69fa      	ldr	r2, [r7, #28]
 8015336:	429a      	cmp	r2, r3
 8015338:	d111      	bne.n	801535e <tcp_input+0x366>
 801533a:	4b58      	ldr	r3, [pc, #352]	@ (801549c <tcp_input+0x4a4>)
 801533c:	f240 1215 	movw	r2, #277	@ 0x115
 8015340:	495a      	ldr	r1, [pc, #360]	@ (80154ac <tcp_input+0x4b4>)
 8015342:	4858      	ldr	r0, [pc, #352]	@ (80154a4 <tcp_input+0x4ac>)
 8015344:	f008 f8d0 	bl	801d4e8 <iprintf>
      break;
 8015348:	e009      	b.n	801535e <tcp_input+0x366>
    }
    prev = pcb;
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	68db      	ldr	r3, [r3, #12]
 8015352:	61fb      	str	r3, [r7, #28]
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	2b00      	cmp	r3, #0
 8015358:	f47f af5e 	bne.w	8015218 <tcp_input+0x220>
 801535c:	e000      	b.n	8015360 <tcp_input+0x368>
      break;
 801535e:	bf00      	nop
  }

  if (pcb == NULL) {
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	2b00      	cmp	r3, #0
 8015364:	f040 80aa 	bne.w	80154bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015368:	4b51      	ldr	r3, [pc, #324]	@ (80154b0 <tcp_input+0x4b8>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	61fb      	str	r3, [r7, #28]
 801536e:	e03f      	b.n	80153f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015370:	69fb      	ldr	r3, [r7, #28]
 8015372:	7d1b      	ldrb	r3, [r3, #20]
 8015374:	2b0a      	cmp	r3, #10
 8015376:	d006      	beq.n	8015386 <tcp_input+0x38e>
 8015378:	4b48      	ldr	r3, [pc, #288]	@ (801549c <tcp_input+0x4a4>)
 801537a:	f240 121f 	movw	r2, #287	@ 0x11f
 801537e:	494d      	ldr	r1, [pc, #308]	@ (80154b4 <tcp_input+0x4bc>)
 8015380:	4848      	ldr	r0, [pc, #288]	@ (80154a4 <tcp_input+0x4ac>)
 8015382:	f008 f8b1 	bl	801d4e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015386:	69fb      	ldr	r3, [r7, #28]
 8015388:	7a1b      	ldrb	r3, [r3, #8]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d009      	beq.n	80153a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801538e:	69fb      	ldr	r3, [r7, #28]
 8015390:	7a1a      	ldrb	r2, [r3, #8]
 8015392:	4b41      	ldr	r3, [pc, #260]	@ (8015498 <tcp_input+0x4a0>)
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801539a:	3301      	adds	r3, #1
 801539c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801539e:	429a      	cmp	r2, r3
 80153a0:	d122      	bne.n	80153e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80153a2:	69fb      	ldr	r3, [r7, #28]
 80153a4:	8b1a      	ldrh	r2, [r3, #24]
 80153a6:	4b3b      	ldr	r3, [pc, #236]	@ (8015494 <tcp_input+0x49c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	881b      	ldrh	r3, [r3, #0]
 80153ac:	b29b      	uxth	r3, r3
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d11b      	bne.n	80153ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	8ada      	ldrh	r2, [r3, #22]
 80153b6:	4b37      	ldr	r3, [pc, #220]	@ (8015494 <tcp_input+0x49c>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	885b      	ldrh	r3, [r3, #2]
 80153bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80153be:	429a      	cmp	r2, r3
 80153c0:	d113      	bne.n	80153ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153c2:	69fb      	ldr	r3, [r7, #28]
 80153c4:	685a      	ldr	r2, [r3, #4]
 80153c6:	4b34      	ldr	r3, [pc, #208]	@ (8015498 <tcp_input+0x4a0>)
 80153c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10d      	bne.n	80153ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	681a      	ldr	r2, [r3, #0]
 80153d2:	4b31      	ldr	r3, [pc, #196]	@ (8015498 <tcp_input+0x4a0>)
 80153d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d107      	bne.n	80153ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80153da:	69f8      	ldr	r0, [r7, #28]
 80153dc:	f000 fb56 	bl	8015a8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7fd fcc1 	bl	8012d68 <pbuf_free>
        return;
 80153e6:	e1fd      	b.n	80157e4 <tcp_input+0x7ec>
        continue;
 80153e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	68db      	ldr	r3, [r3, #12]
 80153ee:	61fb      	str	r3, [r7, #28]
 80153f0:	69fb      	ldr	r3, [r7, #28]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d1bc      	bne.n	8015370 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80153fa:	4b2f      	ldr	r3, [pc, #188]	@ (80154b8 <tcp_input+0x4c0>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	617b      	str	r3, [r7, #20]
 8015400:	e02a      	b.n	8015458 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	7a1b      	ldrb	r3, [r3, #8]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d00c      	beq.n	8015424 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	7a1a      	ldrb	r2, [r3, #8]
 801540e:	4b22      	ldr	r3, [pc, #136]	@ (8015498 <tcp_input+0x4a0>)
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015416:	3301      	adds	r3, #1
 8015418:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801541a:	429a      	cmp	r2, r3
 801541c:	d002      	beq.n	8015424 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	61bb      	str	r3, [r7, #24]
        continue;
 8015422:	e016      	b.n	8015452 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	8ada      	ldrh	r2, [r3, #22]
 8015428:	4b1a      	ldr	r3, [pc, #104]	@ (8015494 <tcp_input+0x49c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	885b      	ldrh	r3, [r3, #2]
 801542e:	b29b      	uxth	r3, r3
 8015430:	429a      	cmp	r2, r3
 8015432:	d10c      	bne.n	801544e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	4b17      	ldr	r3, [pc, #92]	@ (8015498 <tcp_input+0x4a0>)
 801543a:	695b      	ldr	r3, [r3, #20]
 801543c:	429a      	cmp	r2, r3
 801543e:	d00f      	beq.n	8015460 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d00d      	beq.n	8015462 <tcp_input+0x46a>
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d009      	beq.n	8015462 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	617b      	str	r3, [r7, #20]
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d1d1      	bne.n	8015402 <tcp_input+0x40a>
 801545e:	e000      	b.n	8015462 <tcp_input+0x46a>
            break;
 8015460:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d029      	beq.n	80154bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00a      	beq.n	8015484 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	68da      	ldr	r2, [r3, #12]
 8015472:	69bb      	ldr	r3, [r7, #24]
 8015474:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015476:	4b10      	ldr	r3, [pc, #64]	@ (80154b8 <tcp_input+0x4c0>)
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801547e:	4a0e      	ldr	r2, [pc, #56]	@ (80154b8 <tcp_input+0x4c0>)
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015484:	6978      	ldr	r0, [r7, #20]
 8015486:	f000 fa03 	bl	8015890 <tcp_listen_input>
      }
      pbuf_free(p);
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f7fd fc6c 	bl	8012d68 <pbuf_free>
      return;
 8015490:	e1a8      	b.n	80157e4 <tcp_input+0x7ec>
 8015492:	bf00      	nop
 8015494:	2000f3bc 	.word	0x2000f3bc
 8015498:	2000bc40 	.word	0x2000bc40
 801549c:	08021ab4 	.word	0x08021ab4
 80154a0:	08021be0 	.word	0x08021be0
 80154a4:	08021b00 	.word	0x08021b00
 80154a8:	2000f3a0 	.word	0x2000f3a0
 80154ac:	08021c0c 	.word	0x08021c0c
 80154b0:	2000f3a4 	.word	0x2000f3a4
 80154b4:	08021c38 	.word	0x08021c38
 80154b8:	2000f39c 	.word	0x2000f39c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f000 8158 	beq.w	8015774 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80154c4:	4b95      	ldr	r3, [pc, #596]	@ (801571c <tcp_input+0x724>)
 80154c6:	2200      	movs	r2, #0
 80154c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	891a      	ldrh	r2, [r3, #8]
 80154ce:	4b93      	ldr	r3, [pc, #588]	@ (801571c <tcp_input+0x724>)
 80154d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80154d2:	4a92      	ldr	r2, [pc, #584]	@ (801571c <tcp_input+0x724>)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80154d8:	4b91      	ldr	r3, [pc, #580]	@ (8015720 <tcp_input+0x728>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	4a8f      	ldr	r2, [pc, #572]	@ (801571c <tcp_input+0x724>)
 80154de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80154e0:	4b90      	ldr	r3, [pc, #576]	@ (8015724 <tcp_input+0x72c>)
 80154e2:	2200      	movs	r2, #0
 80154e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80154e6:	4b90      	ldr	r3, [pc, #576]	@ (8015728 <tcp_input+0x730>)
 80154e8:	2200      	movs	r2, #0
 80154ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80154ec:	4b8f      	ldr	r3, [pc, #572]	@ (801572c <tcp_input+0x734>)
 80154ee:	2200      	movs	r2, #0
 80154f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80154f2:	4b8f      	ldr	r3, [pc, #572]	@ (8015730 <tcp_input+0x738>)
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	f003 0308 	and.w	r3, r3, #8
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d006      	beq.n	801550c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	7b5b      	ldrb	r3, [r3, #13]
 8015502:	f043 0301 	orr.w	r3, r3, #1
 8015506:	b2da      	uxtb	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015510:	2b00      	cmp	r3, #0
 8015512:	d017      	beq.n	8015544 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015514:	69f8      	ldr	r0, [r7, #28]
 8015516:	f7ff f83d 	bl	8014594 <tcp_process_refused_data>
 801551a:	4603      	mov	r3, r0
 801551c:	f113 0f0d 	cmn.w	r3, #13
 8015520:	d007      	beq.n	8015532 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015526:	2b00      	cmp	r3, #0
 8015528:	d00c      	beq.n	8015544 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801552a:	4b82      	ldr	r3, [pc, #520]	@ (8015734 <tcp_input+0x73c>)
 801552c:	881b      	ldrh	r3, [r3, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d008      	beq.n	8015544 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015532:	69fb      	ldr	r3, [r7, #28]
 8015534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015536:	2b00      	cmp	r3, #0
 8015538:	f040 80e3 	bne.w	8015702 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801553c:	69f8      	ldr	r0, [r7, #28]
 801553e:	f003 fdff 	bl	8019140 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015542:	e0de      	b.n	8015702 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015544:	4a7c      	ldr	r2, [pc, #496]	@ (8015738 <tcp_input+0x740>)
 8015546:	69fb      	ldr	r3, [r7, #28]
 8015548:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801554a:	69f8      	ldr	r0, [r7, #28]
 801554c:	f000 fb18 	bl	8015b80 <tcp_process>
 8015550:	4603      	mov	r3, r0
 8015552:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015558:	f113 0f0d 	cmn.w	r3, #13
 801555c:	f000 80d3 	beq.w	8015706 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015560:	4b71      	ldr	r3, [pc, #452]	@ (8015728 <tcp_input+0x730>)
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	f003 0308 	and.w	r3, r3, #8
 8015568:	2b00      	cmp	r3, #0
 801556a:	d015      	beq.n	8015598 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015572:	2b00      	cmp	r3, #0
 8015574:	d008      	beq.n	8015588 <tcp_input+0x590>
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801557c:	69fa      	ldr	r2, [r7, #28]
 801557e:	6912      	ldr	r2, [r2, #16]
 8015580:	f06f 010d 	mvn.w	r1, #13
 8015584:	4610      	mov	r0, r2
 8015586:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015588:	69f9      	ldr	r1, [r7, #28]
 801558a:	486c      	ldr	r0, [pc, #432]	@ (801573c <tcp_input+0x744>)
 801558c:	f7ff fbbc 	bl	8014d08 <tcp_pcb_remove>
        tcp_free(pcb);
 8015590:	69f8      	ldr	r0, [r7, #28]
 8015592:	f7fd fea5 	bl	80132e0 <tcp_free>
 8015596:	e0da      	b.n	801574e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015598:	2300      	movs	r3, #0
 801559a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801559c:	4b63      	ldr	r3, [pc, #396]	@ (801572c <tcp_input+0x734>)
 801559e:	881b      	ldrh	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d01d      	beq.n	80155e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80155a4:	4b61      	ldr	r3, [pc, #388]	@ (801572c <tcp_input+0x734>)
 80155a6:	881b      	ldrh	r3, [r3, #0]
 80155a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00a      	beq.n	80155ca <tcp_input+0x5d2>
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155ba:	69fa      	ldr	r2, [r7, #28]
 80155bc:	6910      	ldr	r0, [r2, #16]
 80155be:	89fa      	ldrh	r2, [r7, #14]
 80155c0:	69f9      	ldr	r1, [r7, #28]
 80155c2:	4798      	blx	r3
 80155c4:	4603      	mov	r3, r0
 80155c6:	74fb      	strb	r3, [r7, #19]
 80155c8:	e001      	b.n	80155ce <tcp_input+0x5d6>
 80155ca:	2300      	movs	r3, #0
 80155cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80155ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155d2:	f113 0f0d 	cmn.w	r3, #13
 80155d6:	f000 8098 	beq.w	801570a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80155da:	4b54      	ldr	r3, [pc, #336]	@ (801572c <tcp_input+0x734>)
 80155dc:	2200      	movs	r2, #0
 80155de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80155e0:	69f8      	ldr	r0, [r7, #28]
 80155e2:	f000 f915 	bl	8015810 <tcp_input_delayed_close>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	f040 8090 	bne.w	801570e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80155ee:	4b4d      	ldr	r3, [pc, #308]	@ (8015724 <tcp_input+0x72c>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d041      	beq.n	801567a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80155f6:	69fb      	ldr	r3, [r7, #28]
 80155f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d006      	beq.n	801560c <tcp_input+0x614>
 80155fe:	4b50      	ldr	r3, [pc, #320]	@ (8015740 <tcp_input+0x748>)
 8015600:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015604:	494f      	ldr	r1, [pc, #316]	@ (8015744 <tcp_input+0x74c>)
 8015606:	4850      	ldr	r0, [pc, #320]	@ (8015748 <tcp_input+0x750>)
 8015608:	f007 ff6e 	bl	801d4e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	8b5b      	ldrh	r3, [r3, #26]
 8015610:	f003 0310 	and.w	r3, r3, #16
 8015614:	2b00      	cmp	r3, #0
 8015616:	d008      	beq.n	801562a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015618:	4b42      	ldr	r3, [pc, #264]	@ (8015724 <tcp_input+0x72c>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4618      	mov	r0, r3
 801561e:	f7fd fba3 	bl	8012d68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015622:	69f8      	ldr	r0, [r7, #28]
 8015624:	f7fe f9a0 	bl	8013968 <tcp_abort>
            goto aborted;
 8015628:	e091      	b.n	801574e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015630:	2b00      	cmp	r3, #0
 8015632:	d00c      	beq.n	801564e <tcp_input+0x656>
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	6918      	ldr	r0, [r3, #16]
 801563e:	4b39      	ldr	r3, [pc, #228]	@ (8015724 <tcp_input+0x72c>)
 8015640:	681a      	ldr	r2, [r3, #0]
 8015642:	2300      	movs	r3, #0
 8015644:	69f9      	ldr	r1, [r7, #28]
 8015646:	47a0      	blx	r4
 8015648:	4603      	mov	r3, r0
 801564a:	74fb      	strb	r3, [r7, #19]
 801564c:	e008      	b.n	8015660 <tcp_input+0x668>
 801564e:	4b35      	ldr	r3, [pc, #212]	@ (8015724 <tcp_input+0x72c>)
 8015650:	681a      	ldr	r2, [r3, #0]
 8015652:	2300      	movs	r3, #0
 8015654:	69f9      	ldr	r1, [r7, #28]
 8015656:	2000      	movs	r0, #0
 8015658:	f7ff f890 	bl	801477c <tcp_recv_null>
 801565c:	4603      	mov	r3, r0
 801565e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015664:	f113 0f0d 	cmn.w	r3, #13
 8015668:	d053      	beq.n	8015712 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801566a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d003      	beq.n	801567a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015672:	4b2c      	ldr	r3, [pc, #176]	@ (8015724 <tcp_input+0x72c>)
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	69fb      	ldr	r3, [r7, #28]
 8015678:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801567a:	4b2b      	ldr	r3, [pc, #172]	@ (8015728 <tcp_input+0x730>)
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	f003 0320 	and.w	r3, r3, #32
 8015682:	2b00      	cmp	r3, #0
 8015684:	d030      	beq.n	80156e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801568a:	2b00      	cmp	r3, #0
 801568c:	d009      	beq.n	80156a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015692:	7b5a      	ldrb	r2, [r3, #13]
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015698:	f042 0220 	orr.w	r2, r2, #32
 801569c:	b2d2      	uxtb	r2, r2
 801569e:	735a      	strb	r2, [r3, #13]
 80156a0:	e022      	b.n	80156e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80156a2:	69fb      	ldr	r3, [r7, #28]
 80156a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156a6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80156aa:	d005      	beq.n	80156b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156b0:	3301      	adds	r3, #1
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d00b      	beq.n	80156da <tcp_input+0x6e2>
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	6918      	ldr	r0, [r3, #16]
 80156cc:	2300      	movs	r3, #0
 80156ce:	2200      	movs	r2, #0
 80156d0:	69f9      	ldr	r1, [r7, #28]
 80156d2:	47a0      	blx	r4
 80156d4:	4603      	mov	r3, r0
 80156d6:	74fb      	strb	r3, [r7, #19]
 80156d8:	e001      	b.n	80156de <tcp_input+0x6e6>
 80156da:	2300      	movs	r3, #0
 80156dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80156de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156e2:	f113 0f0d 	cmn.w	r3, #13
 80156e6:	d016      	beq.n	8015716 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80156e8:	4b13      	ldr	r3, [pc, #76]	@ (8015738 <tcp_input+0x740>)
 80156ea:	2200      	movs	r2, #0
 80156ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80156ee:	69f8      	ldr	r0, [r7, #28]
 80156f0:	f000 f88e 	bl	8015810 <tcp_input_delayed_close>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d128      	bne.n	801574c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80156fa:	69f8      	ldr	r0, [r7, #28]
 80156fc:	f002 ff1a 	bl	8018534 <tcp_output>
 8015700:	e025      	b.n	801574e <tcp_input+0x756>
        goto aborted;
 8015702:	bf00      	nop
 8015704:	e023      	b.n	801574e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015706:	bf00      	nop
 8015708:	e021      	b.n	801574e <tcp_input+0x756>
              goto aborted;
 801570a:	bf00      	nop
 801570c:	e01f      	b.n	801574e <tcp_input+0x756>
          goto aborted;
 801570e:	bf00      	nop
 8015710:	e01d      	b.n	801574e <tcp_input+0x756>
            goto aborted;
 8015712:	bf00      	nop
 8015714:	e01b      	b.n	801574e <tcp_input+0x756>
              goto aborted;
 8015716:	bf00      	nop
 8015718:	e019      	b.n	801574e <tcp_input+0x756>
 801571a:	bf00      	nop
 801571c:	2000f3ac 	.word	0x2000f3ac
 8015720:	2000f3bc 	.word	0x2000f3bc
 8015724:	2000f3dc 	.word	0x2000f3dc
 8015728:	2000f3d9 	.word	0x2000f3d9
 801572c:	2000f3d4 	.word	0x2000f3d4
 8015730:	2000f3d8 	.word	0x2000f3d8
 8015734:	2000f3d6 	.word	0x2000f3d6
 8015738:	2000f3e0 	.word	0x2000f3e0
 801573c:	2000f3a0 	.word	0x2000f3a0
 8015740:	08021ab4 	.word	0x08021ab4
 8015744:	08021c68 	.word	0x08021c68
 8015748:	08021b00 	.word	0x08021b00
          goto aborted;
 801574c:	bf00      	nop
    tcp_input_pcb = NULL;
 801574e:	4b27      	ldr	r3, [pc, #156]	@ (80157ec <tcp_input+0x7f4>)
 8015750:	2200      	movs	r2, #0
 8015752:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015754:	4b26      	ldr	r3, [pc, #152]	@ (80157f0 <tcp_input+0x7f8>)
 8015756:	2200      	movs	r2, #0
 8015758:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801575a:	4b26      	ldr	r3, [pc, #152]	@ (80157f4 <tcp_input+0x7fc>)
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d03f      	beq.n	80157e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015762:	4b24      	ldr	r3, [pc, #144]	@ (80157f4 <tcp_input+0x7fc>)
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	4618      	mov	r0, r3
 8015768:	f7fd fafe 	bl	8012d68 <pbuf_free>
      inseg.p = NULL;
 801576c:	4b21      	ldr	r3, [pc, #132]	@ (80157f4 <tcp_input+0x7fc>)
 801576e:	2200      	movs	r2, #0
 8015770:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015772:	e036      	b.n	80157e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015774:	4b20      	ldr	r3, [pc, #128]	@ (80157f8 <tcp_input+0x800>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	899b      	ldrh	r3, [r3, #12]
 801577a:	b29b      	uxth	r3, r3
 801577c:	4618      	mov	r0, r3
 801577e:	f7fb fecb 	bl	8011518 <lwip_htons>
 8015782:	4603      	mov	r3, r0
 8015784:	b2db      	uxtb	r3, r3
 8015786:	f003 0304 	and.w	r3, r3, #4
 801578a:	2b00      	cmp	r3, #0
 801578c:	d118      	bne.n	80157c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801578e:	4b1b      	ldr	r3, [pc, #108]	@ (80157fc <tcp_input+0x804>)
 8015790:	6819      	ldr	r1, [r3, #0]
 8015792:	4b1b      	ldr	r3, [pc, #108]	@ (8015800 <tcp_input+0x808>)
 8015794:	881b      	ldrh	r3, [r3, #0]
 8015796:	461a      	mov	r2, r3
 8015798:	4b1a      	ldr	r3, [pc, #104]	@ (8015804 <tcp_input+0x80c>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801579e:	4b16      	ldr	r3, [pc, #88]	@ (80157f8 <tcp_input+0x800>)
 80157a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157a2:	885b      	ldrh	r3, [r3, #2]
 80157a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80157a6:	4a14      	ldr	r2, [pc, #80]	@ (80157f8 <tcp_input+0x800>)
 80157a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80157aa:	8812      	ldrh	r2, [r2, #0]
 80157ac:	b292      	uxth	r2, r2
 80157ae:	9202      	str	r2, [sp, #8]
 80157b0:	9301      	str	r3, [sp, #4]
 80157b2:	4b15      	ldr	r3, [pc, #84]	@ (8015808 <tcp_input+0x810>)
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	4b15      	ldr	r3, [pc, #84]	@ (801580c <tcp_input+0x814>)
 80157b8:	4602      	mov	r2, r0
 80157ba:	2000      	movs	r0, #0
 80157bc:	f003 fc6e 	bl	801909c <tcp_rst>
    pbuf_free(p);
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f7fd fad1 	bl	8012d68 <pbuf_free>
  return;
 80157c6:	e00c      	b.n	80157e2 <tcp_input+0x7ea>
    goto dropped;
 80157c8:	bf00      	nop
 80157ca:	e006      	b.n	80157da <tcp_input+0x7e2>
    goto dropped;
 80157cc:	bf00      	nop
 80157ce:	e004      	b.n	80157da <tcp_input+0x7e2>
    goto dropped;
 80157d0:	bf00      	nop
 80157d2:	e002      	b.n	80157da <tcp_input+0x7e2>
      goto dropped;
 80157d4:	bf00      	nop
 80157d6:	e000      	b.n	80157da <tcp_input+0x7e2>
      goto dropped;
 80157d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f7fd fac4 	bl	8012d68 <pbuf_free>
 80157e0:	e000      	b.n	80157e4 <tcp_input+0x7ec>
  return;
 80157e2:	bf00      	nop
}
 80157e4:	3724      	adds	r7, #36	@ 0x24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd90      	pop	{r4, r7, pc}
 80157ea:	bf00      	nop
 80157ec:	2000f3e0 	.word	0x2000f3e0
 80157f0:	2000f3dc 	.word	0x2000f3dc
 80157f4:	2000f3ac 	.word	0x2000f3ac
 80157f8:	2000f3bc 	.word	0x2000f3bc
 80157fc:	2000f3d0 	.word	0x2000f3d0
 8015800:	2000f3d6 	.word	0x2000f3d6
 8015804:	2000f3cc 	.word	0x2000f3cc
 8015808:	2000bc50 	.word	0x2000bc50
 801580c:	2000bc54 	.word	0x2000bc54

08015810 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d106      	bne.n	801582c <tcp_input_delayed_close+0x1c>
 801581e:	4b17      	ldr	r3, [pc, #92]	@ (801587c <tcp_input_delayed_close+0x6c>)
 8015820:	f240 225a 	movw	r2, #602	@ 0x25a
 8015824:	4916      	ldr	r1, [pc, #88]	@ (8015880 <tcp_input_delayed_close+0x70>)
 8015826:	4817      	ldr	r0, [pc, #92]	@ (8015884 <tcp_input_delayed_close+0x74>)
 8015828:	f007 fe5e 	bl	801d4e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801582c:	4b16      	ldr	r3, [pc, #88]	@ (8015888 <tcp_input_delayed_close+0x78>)
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	f003 0310 	and.w	r3, r3, #16
 8015834:	2b00      	cmp	r3, #0
 8015836:	d01c      	beq.n	8015872 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	8b5b      	ldrh	r3, [r3, #26]
 801583c:	f003 0310 	and.w	r3, r3, #16
 8015840:	2b00      	cmp	r3, #0
 8015842:	d10d      	bne.n	8015860 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801584a:	2b00      	cmp	r3, #0
 801584c:	d008      	beq.n	8015860 <tcp_input_delayed_close+0x50>
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015854:	687a      	ldr	r2, [r7, #4]
 8015856:	6912      	ldr	r2, [r2, #16]
 8015858:	f06f 010e 	mvn.w	r1, #14
 801585c:	4610      	mov	r0, r2
 801585e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015860:	6879      	ldr	r1, [r7, #4]
 8015862:	480a      	ldr	r0, [pc, #40]	@ (801588c <tcp_input_delayed_close+0x7c>)
 8015864:	f7ff fa50 	bl	8014d08 <tcp_pcb_remove>
    tcp_free(pcb);
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7fd fd39 	bl	80132e0 <tcp_free>
    return 1;
 801586e:	2301      	movs	r3, #1
 8015870:	e000      	b.n	8015874 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015872:	2300      	movs	r3, #0
}
 8015874:	4618      	mov	r0, r3
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	08021ab4 	.word	0x08021ab4
 8015880:	08021c84 	.word	0x08021c84
 8015884:	08021b00 	.word	0x08021b00
 8015888:	2000f3d9 	.word	0x2000f3d9
 801588c:	2000f3a0 	.word	0x2000f3a0

08015890 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015890:	b590      	push	{r4, r7, lr}
 8015892:	b08b      	sub	sp, #44	@ 0x2c
 8015894:	af04      	add	r7, sp, #16
 8015896:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015898:	4b6f      	ldr	r3, [pc, #444]	@ (8015a58 <tcp_listen_input+0x1c8>)
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	f003 0304 	and.w	r3, r3, #4
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	f040 80d2 	bne.w	8015a4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <tcp_listen_input+0x2a>
 80158ac:	4b6b      	ldr	r3, [pc, #428]	@ (8015a5c <tcp_listen_input+0x1cc>)
 80158ae:	f240 2281 	movw	r2, #641	@ 0x281
 80158b2:	496b      	ldr	r1, [pc, #428]	@ (8015a60 <tcp_listen_input+0x1d0>)
 80158b4:	486b      	ldr	r0, [pc, #428]	@ (8015a64 <tcp_listen_input+0x1d4>)
 80158b6:	f007 fe17 	bl	801d4e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80158ba:	4b67      	ldr	r3, [pc, #412]	@ (8015a58 <tcp_listen_input+0x1c8>)
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	f003 0310 	and.w	r3, r3, #16
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d019      	beq.n	80158fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158c6:	4b68      	ldr	r3, [pc, #416]	@ (8015a68 <tcp_listen_input+0x1d8>)
 80158c8:	6819      	ldr	r1, [r3, #0]
 80158ca:	4b68      	ldr	r3, [pc, #416]	@ (8015a6c <tcp_listen_input+0x1dc>)
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	461a      	mov	r2, r3
 80158d0:	4b67      	ldr	r3, [pc, #412]	@ (8015a70 <tcp_listen_input+0x1e0>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158d6:	4b67      	ldr	r3, [pc, #412]	@ (8015a74 <tcp_listen_input+0x1e4>)
 80158d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158da:	885b      	ldrh	r3, [r3, #2]
 80158dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158de:	4a65      	ldr	r2, [pc, #404]	@ (8015a74 <tcp_listen_input+0x1e4>)
 80158e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158e2:	8812      	ldrh	r2, [r2, #0]
 80158e4:	b292      	uxth	r2, r2
 80158e6:	9202      	str	r2, [sp, #8]
 80158e8:	9301      	str	r3, [sp, #4]
 80158ea:	4b63      	ldr	r3, [pc, #396]	@ (8015a78 <tcp_listen_input+0x1e8>)
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	4b63      	ldr	r3, [pc, #396]	@ (8015a7c <tcp_listen_input+0x1ec>)
 80158f0:	4602      	mov	r2, r0
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f003 fbd2 	bl	801909c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80158f8:	e0a9      	b.n	8015a4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80158fa:	4b57      	ldr	r3, [pc, #348]	@ (8015a58 <tcp_listen_input+0x1c8>)
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	f003 0302 	and.w	r3, r3, #2
 8015902:	2b00      	cmp	r3, #0
 8015904:	f000 80a3 	beq.w	8015a4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	7d5b      	ldrb	r3, [r3, #21]
 801590c:	4618      	mov	r0, r3
 801590e:	f7ff f859 	bl	80149c4 <tcp_alloc>
 8015912:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d111      	bne.n	801593e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	699b      	ldr	r3, [r3, #24]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d00a      	beq.n	8015938 <tcp_listen_input+0xa8>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	699b      	ldr	r3, [r3, #24]
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	6910      	ldr	r0, [r2, #16]
 801592a:	f04f 32ff 	mov.w	r2, #4294967295
 801592e:	2100      	movs	r1, #0
 8015930:	4798      	blx	r3
 8015932:	4603      	mov	r3, r0
 8015934:	73bb      	strb	r3, [r7, #14]
      return;
 8015936:	e08b      	b.n	8015a50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015938:	23f0      	movs	r3, #240	@ 0xf0
 801593a:	73bb      	strb	r3, [r7, #14]
      return;
 801593c:	e088      	b.n	8015a50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801593e:	4b50      	ldr	r3, [pc, #320]	@ (8015a80 <tcp_listen_input+0x1f0>)
 8015940:	695a      	ldr	r2, [r3, #20]
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015946:	4b4e      	ldr	r3, [pc, #312]	@ (8015a80 <tcp_listen_input+0x1f0>)
 8015948:	691a      	ldr	r2, [r3, #16]
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	8ada      	ldrh	r2, [r3, #22]
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015956:	4b47      	ldr	r3, [pc, #284]	@ (8015a74 <tcp_listen_input+0x1e4>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	881b      	ldrh	r3, [r3, #0]
 801595c:	b29a      	uxth	r2, r3
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	2203      	movs	r2, #3
 8015966:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015968:	4b41      	ldr	r3, [pc, #260]	@ (8015a70 <tcp_listen_input+0x1e0>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	1c5a      	adds	r2, r3, #1
 801596e:	697b      	ldr	r3, [r7, #20]
 8015970:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801597a:	6978      	ldr	r0, [r7, #20]
 801597c:	f7ff fa58 	bl	8014e30 <tcp_next_iss>
 8015980:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	693a      	ldr	r2, [r7, #16]
 801598c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	693a      	ldr	r2, [r7, #16]
 8015992:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	693a      	ldr	r2, [r7, #16]
 8015998:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801599a:	4b35      	ldr	r3, [pc, #212]	@ (8015a70 <tcp_listen_input+0x1e0>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	1e5a      	subs	r2, r3, #1
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	691a      	ldr	r2, [r3, #16]
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	7a5b      	ldrb	r3, [r3, #9]
 80159b6:	f003 030c 	and.w	r3, r3, #12
 80159ba:	b2da      	uxtb	r2, r3
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	7a1a      	ldrb	r2, [r3, #8]
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80159c8:	4b2e      	ldr	r3, [pc, #184]	@ (8015a84 <tcp_listen_input+0x1f4>)
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	60da      	str	r2, [r3, #12]
 80159d0:	4a2c      	ldr	r2, [pc, #176]	@ (8015a84 <tcp_listen_input+0x1f4>)
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	6013      	str	r3, [r2, #0]
 80159d6:	f003 fd23 	bl	8019420 <tcp_timer_needed>
 80159da:	4b2b      	ldr	r3, [pc, #172]	@ (8015a88 <tcp_listen_input+0x1f8>)
 80159dc:	2201      	movs	r2, #1
 80159de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80159e0:	6978      	ldr	r0, [r7, #20]
 80159e2:	f001 fd8b 	bl	80174fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80159e6:	4b23      	ldr	r3, [pc, #140]	@ (8015a74 <tcp_listen_input+0x1e4>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	89db      	ldrh	r3, [r3, #14]
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015a00:	697b      	ldr	r3, [r7, #20]
 8015a02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	3304      	adds	r3, #4
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f005 fc47 	bl	801b29c <ip4_route>
 8015a0e:	4601      	mov	r1, r0
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	3304      	adds	r3, #4
 8015a14:	461a      	mov	r2, r3
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff fa30 	bl	8014e7c <tcp_eff_send_mss_netif>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	461a      	mov	r2, r3
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015a24:	2112      	movs	r1, #18
 8015a26:	6978      	ldr	r0, [r7, #20]
 8015a28:	f002 fc96 	bl	8018358 <tcp_enqueue_flags>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d004      	beq.n	8015a42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015a38:	2100      	movs	r1, #0
 8015a3a:	6978      	ldr	r0, [r7, #20]
 8015a3c:	f7fd fed6 	bl	80137ec <tcp_abandon>
      return;
 8015a40:	e006      	b.n	8015a50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015a42:	6978      	ldr	r0, [r7, #20]
 8015a44:	f002 fd76 	bl	8018534 <tcp_output>
  return;
 8015a48:	e001      	b.n	8015a4e <tcp_listen_input+0x1be>
    return;
 8015a4a:	bf00      	nop
 8015a4c:	e000      	b.n	8015a50 <tcp_listen_input+0x1c0>
  return;
 8015a4e:	bf00      	nop
}
 8015a50:	371c      	adds	r7, #28
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd90      	pop	{r4, r7, pc}
 8015a56:	bf00      	nop
 8015a58:	2000f3d8 	.word	0x2000f3d8
 8015a5c:	08021ab4 	.word	0x08021ab4
 8015a60:	08021cac 	.word	0x08021cac
 8015a64:	08021b00 	.word	0x08021b00
 8015a68:	2000f3d0 	.word	0x2000f3d0
 8015a6c:	2000f3d6 	.word	0x2000f3d6
 8015a70:	2000f3cc 	.word	0x2000f3cc
 8015a74:	2000f3bc 	.word	0x2000f3bc
 8015a78:	2000bc50 	.word	0x2000bc50
 8015a7c:	2000bc54 	.word	0x2000bc54
 8015a80:	2000bc40 	.word	0x2000bc40
 8015a84:	2000f3a0 	.word	0x2000f3a0
 8015a88:	2000f3a8 	.word	0x2000f3a8

08015a8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af04      	add	r7, sp, #16
 8015a92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015a94:	4b2f      	ldr	r3, [pc, #188]	@ (8015b54 <tcp_timewait_input+0xc8>)
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	f003 0304 	and.w	r3, r3, #4
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d153      	bne.n	8015b48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d106      	bne.n	8015ab4 <tcp_timewait_input+0x28>
 8015aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8015b58 <tcp_timewait_input+0xcc>)
 8015aa8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015aac:	492b      	ldr	r1, [pc, #172]	@ (8015b5c <tcp_timewait_input+0xd0>)
 8015aae:	482c      	ldr	r0, [pc, #176]	@ (8015b60 <tcp_timewait_input+0xd4>)
 8015ab0:	f007 fd1a 	bl	801d4e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015ab4:	4b27      	ldr	r3, [pc, #156]	@ (8015b54 <tcp_timewait_input+0xc8>)
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	f003 0302 	and.w	r3, r3, #2
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d02a      	beq.n	8015b16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015ac0:	4b28      	ldr	r3, [pc, #160]	@ (8015b64 <tcp_timewait_input+0xd8>)
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ac8:	1ad3      	subs	r3, r2, r3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	db2d      	blt.n	8015b2a <tcp_timewait_input+0x9e>
 8015ace:	4b25      	ldr	r3, [pc, #148]	@ (8015b64 <tcp_timewait_input+0xd8>)
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015ada:	440b      	add	r3, r1
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	dc23      	bgt.n	8015b2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ae2:	4b21      	ldr	r3, [pc, #132]	@ (8015b68 <tcp_timewait_input+0xdc>)
 8015ae4:	6819      	ldr	r1, [r3, #0]
 8015ae6:	4b21      	ldr	r3, [pc, #132]	@ (8015b6c <tcp_timewait_input+0xe0>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	461a      	mov	r2, r3
 8015aec:	4b1d      	ldr	r3, [pc, #116]	@ (8015b64 <tcp_timewait_input+0xd8>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015af2:	4b1f      	ldr	r3, [pc, #124]	@ (8015b70 <tcp_timewait_input+0xe4>)
 8015af4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015af6:	885b      	ldrh	r3, [r3, #2]
 8015af8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015afa:	4a1d      	ldr	r2, [pc, #116]	@ (8015b70 <tcp_timewait_input+0xe4>)
 8015afc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015afe:	8812      	ldrh	r2, [r2, #0]
 8015b00:	b292      	uxth	r2, r2
 8015b02:	9202      	str	r2, [sp, #8]
 8015b04:	9301      	str	r3, [sp, #4]
 8015b06:	4b1b      	ldr	r3, [pc, #108]	@ (8015b74 <tcp_timewait_input+0xe8>)
 8015b08:	9300      	str	r3, [sp, #0]
 8015b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8015b78 <tcp_timewait_input+0xec>)
 8015b0c:	4602      	mov	r2, r0
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f003 fac4 	bl	801909c <tcp_rst>
      return;
 8015b14:	e01b      	b.n	8015b4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015b16:	4b0f      	ldr	r3, [pc, #60]	@ (8015b54 <tcp_timewait_input+0xc8>)
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d003      	beq.n	8015b2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015b22:	4b16      	ldr	r3, [pc, #88]	@ (8015b7c <tcp_timewait_input+0xf0>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015b2a:	4b10      	ldr	r3, [pc, #64]	@ (8015b6c <tcp_timewait_input+0xe0>)
 8015b2c:	881b      	ldrh	r3, [r3, #0]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d00c      	beq.n	8015b4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	8b5b      	ldrh	r3, [r3, #26]
 8015b36:	f043 0302 	orr.w	r3, r3, #2
 8015b3a:	b29a      	uxth	r2, r3
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f002 fcf7 	bl	8018534 <tcp_output>
  }
  return;
 8015b46:	e001      	b.n	8015b4c <tcp_timewait_input+0xc0>
    return;
 8015b48:	bf00      	nop
 8015b4a:	e000      	b.n	8015b4e <tcp_timewait_input+0xc2>
  return;
 8015b4c:	bf00      	nop
}
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	2000f3d8 	.word	0x2000f3d8
 8015b58:	08021ab4 	.word	0x08021ab4
 8015b5c:	08021ccc 	.word	0x08021ccc
 8015b60:	08021b00 	.word	0x08021b00
 8015b64:	2000f3cc 	.word	0x2000f3cc
 8015b68:	2000f3d0 	.word	0x2000f3d0
 8015b6c:	2000f3d6 	.word	0x2000f3d6
 8015b70:	2000f3bc 	.word	0x2000f3bc
 8015b74:	2000bc50 	.word	0x2000bc50
 8015b78:	2000bc54 	.word	0x2000bc54
 8015b7c:	2000f394 	.word	0x2000f394

08015b80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015b80:	b590      	push	{r4, r7, lr}
 8015b82:	b08d      	sub	sp, #52	@ 0x34
 8015b84:	af04      	add	r7, sp, #16
 8015b86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d106      	bne.n	8015ba4 <tcp_process+0x24>
 8015b96:	4b9d      	ldr	r3, [pc, #628]	@ (8015e0c <tcp_process+0x28c>)
 8015b98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015b9c:	499c      	ldr	r1, [pc, #624]	@ (8015e10 <tcp_process+0x290>)
 8015b9e:	489d      	ldr	r0, [pc, #628]	@ (8015e14 <tcp_process+0x294>)
 8015ba0:	f007 fca2 	bl	801d4e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8015e18 <tcp_process+0x298>)
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	f003 0304 	and.w	r3, r3, #4
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d04e      	beq.n	8015c4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7d1b      	ldrb	r3, [r3, #20]
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d108      	bne.n	8015bca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bbc:	4b97      	ldr	r3, [pc, #604]	@ (8015e1c <tcp_process+0x29c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d123      	bne.n	8015c0c <tcp_process+0x8c>
        acceptable = 1;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	76fb      	strb	r3, [r7, #27]
 8015bc8:	e020      	b.n	8015c0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015bce:	4b94      	ldr	r3, [pc, #592]	@ (8015e20 <tcp_process+0x2a0>)
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d102      	bne.n	8015bdc <tcp_process+0x5c>
        acceptable = 1;
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	76fb      	strb	r3, [r7, #27]
 8015bda:	e017      	b.n	8015c0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015bdc:	4b90      	ldr	r3, [pc, #576]	@ (8015e20 <tcp_process+0x2a0>)
 8015bde:	681a      	ldr	r2, [r3, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015be4:	1ad3      	subs	r3, r2, r3
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	db10      	blt.n	8015c0c <tcp_process+0x8c>
 8015bea:	4b8d      	ldr	r3, [pc, #564]	@ (8015e20 <tcp_process+0x2a0>)
 8015bec:	681a      	ldr	r2, [r3, #0]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bf2:	6879      	ldr	r1, [r7, #4]
 8015bf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015bf6:	440b      	add	r3, r1
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	dc06      	bgt.n	8015c0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8b5b      	ldrh	r3, [r3, #26]
 8015c02:	f043 0302 	orr.w	r3, r3, #2
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015c0c:	7efb      	ldrb	r3, [r7, #27]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d01b      	beq.n	8015c4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	7d1b      	ldrb	r3, [r3, #20]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <tcp_process+0xa8>
 8015c1a:	4b7c      	ldr	r3, [pc, #496]	@ (8015e0c <tcp_process+0x28c>)
 8015c1c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015c20:	4980      	ldr	r1, [pc, #512]	@ (8015e24 <tcp_process+0x2a4>)
 8015c22:	487c      	ldr	r0, [pc, #496]	@ (8015e14 <tcp_process+0x294>)
 8015c24:	f007 fc60 	bl	801d4e8 <iprintf>
      recv_flags |= TF_RESET;
 8015c28:	4b7f      	ldr	r3, [pc, #508]	@ (8015e28 <tcp_process+0x2a8>)
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	f043 0308 	orr.w	r3, r3, #8
 8015c30:	b2da      	uxtb	r2, r3
 8015c32:	4b7d      	ldr	r3, [pc, #500]	@ (8015e28 <tcp_process+0x2a8>)
 8015c34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	8b5b      	ldrh	r3, [r3, #26]
 8015c3a:	f023 0301 	bic.w	r3, r3, #1
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015c44:	f06f 030d 	mvn.w	r3, #13
 8015c48:	e37a      	b.n	8016340 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	e378      	b.n	8016340 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015c4e:	4b72      	ldr	r3, [pc, #456]	@ (8015e18 <tcp_process+0x298>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	f003 0302 	and.w	r3, r3, #2
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d010      	beq.n	8015c7c <tcp_process+0xfc>
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	7d1b      	ldrb	r3, [r3, #20]
 8015c5e:	2b02      	cmp	r3, #2
 8015c60:	d00c      	beq.n	8015c7c <tcp_process+0xfc>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	7d1b      	ldrb	r3, [r3, #20]
 8015c66:	2b03      	cmp	r3, #3
 8015c68:	d008      	beq.n	8015c7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8b5b      	ldrh	r3, [r3, #26]
 8015c6e:	f043 0302 	orr.w	r3, r3, #2
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e361      	b.n	8016340 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	8b5b      	ldrh	r3, [r3, #26]
 8015c80:	f003 0310 	and.w	r3, r3, #16
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d103      	bne.n	8015c90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015c88:	4b68      	ldr	r3, [pc, #416]	@ (8015e2c <tcp_process+0x2ac>)
 8015c8a:	681a      	ldr	r2, [r3, #0]
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f001 fc2b 	bl	80174fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	7d1b      	ldrb	r3, [r3, #20]
 8015caa:	3b02      	subs	r3, #2
 8015cac:	2b07      	cmp	r3, #7
 8015cae:	f200 8337 	bhi.w	8016320 <tcp_process+0x7a0>
 8015cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8015cb8 <tcp_process+0x138>)
 8015cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cb8:	08015cd9 	.word	0x08015cd9
 8015cbc:	08015f09 	.word	0x08015f09
 8015cc0:	08016081 	.word	0x08016081
 8015cc4:	080160ab 	.word	0x080160ab
 8015cc8:	080161cf 	.word	0x080161cf
 8015ccc:	08016081 	.word	0x08016081
 8015cd0:	0801625b 	.word	0x0801625b
 8015cd4:	080162eb 	.word	0x080162eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8015e18 <tcp_process+0x298>)
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	f003 0310 	and.w	r3, r3, #16
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	f000 80e4 	beq.w	8015eae <tcp_process+0x32e>
 8015ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8015e18 <tcp_process+0x298>)
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	f003 0302 	and.w	r3, r3, #2
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	f000 80dd 	beq.w	8015eae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cf8:	1c5a      	adds	r2, r3, #1
 8015cfa:	4b48      	ldr	r3, [pc, #288]	@ (8015e1c <tcp_process+0x29c>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	f040 80d5 	bne.w	8015eae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015d04:	4b46      	ldr	r3, [pc, #280]	@ (8015e20 <tcp_process+0x2a0>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	1c5a      	adds	r2, r3, #1
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015d16:	4b41      	ldr	r3, [pc, #260]	@ (8015e1c <tcp_process+0x29c>)
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015d1e:	4b44      	ldr	r3, [pc, #272]	@ (8015e30 <tcp_process+0x2b0>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	89db      	ldrh	r3, [r3, #14]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015d38:	4b39      	ldr	r3, [pc, #228]	@ (8015e20 <tcp_process+0x2a0>)
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	1e5a      	subs	r2, r3, #1
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2204      	movs	r2, #4
 8015d46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	3304      	adds	r3, #4
 8015d50:	4618      	mov	r0, r3
 8015d52:	f005 faa3 	bl	801b29c <ip4_route>
 8015d56:	4601      	mov	r1, r0
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f7ff f88c 	bl	8014e7c <tcp_eff_send_mss_netif>
 8015d64:	4603      	mov	r3, r0
 8015d66:	461a      	mov	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d70:	009a      	lsls	r2, r3, #2
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015d7c:	428b      	cmp	r3, r1
 8015d7e:	bf38      	it	cc
 8015d80:	460b      	movcc	r3, r1
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d204      	bcs.n	8015d90 <tcp_process+0x210>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d8a:	009b      	lsls	r3, r3, #2
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	e00d      	b.n	8015dac <tcp_process+0x22c>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d94:	005b      	lsls	r3, r3, #1
 8015d96:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015d9a:	4293      	cmp	r3, r2
 8015d9c:	d904      	bls.n	8015da8 <tcp_process+0x228>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	e001      	b.n	8015dac <tcp_process+0x22c>
 8015da8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d106      	bne.n	8015dca <tcp_process+0x24a>
 8015dbc:	4b13      	ldr	r3, [pc, #76]	@ (8015e0c <tcp_process+0x28c>)
 8015dbe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015dc2:	491c      	ldr	r1, [pc, #112]	@ (8015e34 <tcp_process+0x2b4>)
 8015dc4:	4813      	ldr	r0, [pc, #76]	@ (8015e14 <tcp_process+0x294>)
 8015dc6:	f007 fb8f 	bl	801d4e8 <iprintf>
        --pcb->snd_queuelen;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015de0:	69fb      	ldr	r3, [r7, #28]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d12a      	bne.n	8015e3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015dec:	69fb      	ldr	r3, [r7, #28]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d106      	bne.n	8015e00 <tcp_process+0x280>
 8015df2:	4b06      	ldr	r3, [pc, #24]	@ (8015e0c <tcp_process+0x28c>)
 8015df4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015df8:	490f      	ldr	r1, [pc, #60]	@ (8015e38 <tcp_process+0x2b8>)
 8015dfa:	4806      	ldr	r0, [pc, #24]	@ (8015e14 <tcp_process+0x294>)
 8015dfc:	f007 fb74 	bl	801d4e8 <iprintf>
          pcb->unsent = rseg->next;
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	681a      	ldr	r2, [r3, #0]
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015e08:	e01c      	b.n	8015e44 <tcp_process+0x2c4>
 8015e0a:	bf00      	nop
 8015e0c:	08021ab4 	.word	0x08021ab4
 8015e10:	08021cec 	.word	0x08021cec
 8015e14:	08021b00 	.word	0x08021b00
 8015e18:	2000f3d8 	.word	0x2000f3d8
 8015e1c:	2000f3d0 	.word	0x2000f3d0
 8015e20:	2000f3cc 	.word	0x2000f3cc
 8015e24:	08021d08 	.word	0x08021d08
 8015e28:	2000f3d9 	.word	0x2000f3d9
 8015e2c:	2000f394 	.word	0x2000f394
 8015e30:	2000f3bc 	.word	0x2000f3bc
 8015e34:	08021d28 	.word	0x08021d28
 8015e38:	08021d40 	.word	0x08021d40
        } else {
          pcb->unacked = rseg->next;
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015e44:	69f8      	ldr	r0, [r7, #28]
 8015e46:	f7fe fc36 	bl	80146b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d104      	bne.n	8015e5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e58:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015e5a:	e006      	b.n	8015e6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d00a      	beq.n	8015e8a <tcp_process+0x30a>
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	6910      	ldr	r0, [r2, #16]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	6879      	ldr	r1, [r7, #4]
 8015e82:	4798      	blx	r3
 8015e84:	4603      	mov	r3, r0
 8015e86:	76bb      	strb	r3, [r7, #26]
 8015e88:	e001      	b.n	8015e8e <tcp_process+0x30e>
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015e8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e92:	f113 0f0d 	cmn.w	r3, #13
 8015e96:	d102      	bne.n	8015e9e <tcp_process+0x31e>
          return ERR_ABRT;
 8015e98:	f06f 030c 	mvn.w	r3, #12
 8015e9c:	e250      	b.n	8016340 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8b5b      	ldrh	r3, [r3, #26]
 8015ea2:	f043 0302 	orr.w	r3, r3, #2
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015eac:	e23a      	b.n	8016324 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015eae:	4b98      	ldr	r3, [pc, #608]	@ (8016110 <tcp_process+0x590>)
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	f003 0310 	and.w	r3, r3, #16
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f000 8234 	beq.w	8016324 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ebc:	4b95      	ldr	r3, [pc, #596]	@ (8016114 <tcp_process+0x594>)
 8015ebe:	6819      	ldr	r1, [r3, #0]
 8015ec0:	4b95      	ldr	r3, [pc, #596]	@ (8016118 <tcp_process+0x598>)
 8015ec2:	881b      	ldrh	r3, [r3, #0]
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	4b95      	ldr	r3, [pc, #596]	@ (801611c <tcp_process+0x59c>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ecc:	4b94      	ldr	r3, [pc, #592]	@ (8016120 <tcp_process+0x5a0>)
 8015ece:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ed0:	885b      	ldrh	r3, [r3, #2]
 8015ed2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ed4:	4a92      	ldr	r2, [pc, #584]	@ (8016120 <tcp_process+0x5a0>)
 8015ed6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ed8:	8812      	ldrh	r2, [r2, #0]
 8015eda:	b292      	uxth	r2, r2
 8015edc:	9202      	str	r2, [sp, #8]
 8015ede:	9301      	str	r3, [sp, #4]
 8015ee0:	4b90      	ldr	r3, [pc, #576]	@ (8016124 <tcp_process+0x5a4>)
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	4b90      	ldr	r3, [pc, #576]	@ (8016128 <tcp_process+0x5a8>)
 8015ee6:	4602      	mov	r2, r0
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f003 f8d7 	bl	801909c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ef4:	2b05      	cmp	r3, #5
 8015ef6:	f200 8215 	bhi.w	8016324 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f002 fea3 	bl	8018c4c <tcp_rexmit_rto>
      break;
 8015f06:	e20d      	b.n	8016324 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015f08:	4b81      	ldr	r3, [pc, #516]	@ (8016110 <tcp_process+0x590>)
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	f003 0310 	and.w	r3, r3, #16
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	f000 80a1 	beq.w	8016058 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f16:	4b7f      	ldr	r3, [pc, #508]	@ (8016114 <tcp_process+0x594>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	3b01      	subs	r3, #1
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	db7e      	blt.n	8016024 <tcp_process+0x4a4>
 8015f26:	4b7b      	ldr	r3, [pc, #492]	@ (8016114 <tcp_process+0x594>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	dc77      	bgt.n	8016024 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2204      	movs	r2, #4
 8015f38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d102      	bne.n	8015f48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015f42:	23fa      	movs	r3, #250	@ 0xfa
 8015f44:	76bb      	strb	r3, [r7, #26]
 8015f46:	e01d      	b.n	8015f84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f4c:	699b      	ldr	r3, [r3, #24]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <tcp_process+0x3e0>
 8015f52:	4b76      	ldr	r3, [pc, #472]	@ (801612c <tcp_process+0x5ac>)
 8015f54:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015f58:	4975      	ldr	r1, [pc, #468]	@ (8016130 <tcp_process+0x5b0>)
 8015f5a:	4876      	ldr	r0, [pc, #472]	@ (8016134 <tcp_process+0x5b4>)
 8015f5c:	f007 fac4 	bl	801d4e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f64:	699b      	ldr	r3, [r3, #24]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d00a      	beq.n	8015f80 <tcp_process+0x400>
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f6e:	699b      	ldr	r3, [r3, #24]
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	6910      	ldr	r0, [r2, #16]
 8015f74:	2200      	movs	r2, #0
 8015f76:	6879      	ldr	r1, [r7, #4]
 8015f78:	4798      	blx	r3
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	76bb      	strb	r3, [r7, #26]
 8015f7e:	e001      	b.n	8015f84 <tcp_process+0x404>
 8015f80:	23f0      	movs	r3, #240	@ 0xf0
 8015f82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015f84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d00a      	beq.n	8015fa2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015f8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f90:	f113 0f0d 	cmn.w	r3, #13
 8015f94:	d002      	beq.n	8015f9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f7fd fce6 	bl	8013968 <tcp_abort>
            }
            return ERR_ABRT;
 8015f9c:	f06f 030c 	mvn.w	r3, #12
 8015fa0:	e1ce      	b.n	8016340 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f000 fae0 	bl	8016568 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015fa8:	4b63      	ldr	r3, [pc, #396]	@ (8016138 <tcp_process+0x5b8>)
 8015faa:	881b      	ldrh	r3, [r3, #0]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d005      	beq.n	8015fbc <tcp_process+0x43c>
            recv_acked--;
 8015fb0:	4b61      	ldr	r3, [pc, #388]	@ (8016138 <tcp_process+0x5b8>)
 8015fb2:	881b      	ldrh	r3, [r3, #0]
 8015fb4:	3b01      	subs	r3, #1
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	4b5f      	ldr	r3, [pc, #380]	@ (8016138 <tcp_process+0x5b8>)
 8015fba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fc0:	009a      	lsls	r2, r3, #2
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fc6:	005b      	lsls	r3, r3, #1
 8015fc8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015fcc:	428b      	cmp	r3, r1
 8015fce:	bf38      	it	cc
 8015fd0:	460b      	movcc	r3, r1
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d204      	bcs.n	8015fe0 <tcp_process+0x460>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	e00d      	b.n	8015ffc <tcp_process+0x47c>
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d904      	bls.n	8015ff8 <tcp_process+0x478>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ff2:	005b      	lsls	r3, r3, #1
 8015ff4:	b29b      	uxth	r3, r3
 8015ff6:	e001      	b.n	8015ffc <tcp_process+0x47c>
 8015ff8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016002:	4b4e      	ldr	r3, [pc, #312]	@ (801613c <tcp_process+0x5bc>)
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	f003 0320 	and.w	r3, r3, #32
 801600a:	2b00      	cmp	r3, #0
 801600c:	d037      	beq.n	801607e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	8b5b      	ldrh	r3, [r3, #26]
 8016012:	f043 0302 	orr.w	r3, r3, #2
 8016016:	b29a      	uxth	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2207      	movs	r2, #7
 8016020:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016022:	e02c      	b.n	801607e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016024:	4b3b      	ldr	r3, [pc, #236]	@ (8016114 <tcp_process+0x594>)
 8016026:	6819      	ldr	r1, [r3, #0]
 8016028:	4b3b      	ldr	r3, [pc, #236]	@ (8016118 <tcp_process+0x598>)
 801602a:	881b      	ldrh	r3, [r3, #0]
 801602c:	461a      	mov	r2, r3
 801602e:	4b3b      	ldr	r3, [pc, #236]	@ (801611c <tcp_process+0x59c>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016034:	4b3a      	ldr	r3, [pc, #232]	@ (8016120 <tcp_process+0x5a0>)
 8016036:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016038:	885b      	ldrh	r3, [r3, #2]
 801603a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801603c:	4a38      	ldr	r2, [pc, #224]	@ (8016120 <tcp_process+0x5a0>)
 801603e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016040:	8812      	ldrh	r2, [r2, #0]
 8016042:	b292      	uxth	r2, r2
 8016044:	9202      	str	r2, [sp, #8]
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	4b36      	ldr	r3, [pc, #216]	@ (8016124 <tcp_process+0x5a4>)
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	4b36      	ldr	r3, [pc, #216]	@ (8016128 <tcp_process+0x5a8>)
 801604e:	4602      	mov	r2, r0
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f003 f823 	bl	801909c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016056:	e167      	b.n	8016328 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016058:	4b2d      	ldr	r3, [pc, #180]	@ (8016110 <tcp_process+0x590>)
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	f003 0302 	and.w	r3, r3, #2
 8016060:	2b00      	cmp	r3, #0
 8016062:	f000 8161 	beq.w	8016328 <tcp_process+0x7a8>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801606a:	1e5a      	subs	r2, r3, #1
 801606c:	4b2b      	ldr	r3, [pc, #172]	@ (801611c <tcp_process+0x59c>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	429a      	cmp	r2, r3
 8016072:	f040 8159 	bne.w	8016328 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f002 fe0a 	bl	8018c90 <tcp_rexmit>
      break;
 801607c:	e154      	b.n	8016328 <tcp_process+0x7a8>
 801607e:	e153      	b.n	8016328 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f000 fa71 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016086:	4b2d      	ldr	r3, [pc, #180]	@ (801613c <tcp_process+0x5bc>)
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	f003 0320 	and.w	r3, r3, #32
 801608e:	2b00      	cmp	r3, #0
 8016090:	f000 814c 	beq.w	801632c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	8b5b      	ldrh	r3, [r3, #26]
 8016098:	f043 0302 	orr.w	r3, r3, #2
 801609c:	b29a      	uxth	r2, r3
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	2207      	movs	r2, #7
 80160a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80160a8:	e140      	b.n	801632c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 fa5c 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80160b0:	4b22      	ldr	r3, [pc, #136]	@ (801613c <tcp_process+0x5bc>)
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	f003 0320 	and.w	r3, r3, #32
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d071      	beq.n	80161a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160bc:	4b14      	ldr	r3, [pc, #80]	@ (8016110 <tcp_process+0x590>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	f003 0310 	and.w	r3, r3, #16
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d060      	beq.n	801618a <tcp_process+0x60a>
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160cc:	4b11      	ldr	r3, [pc, #68]	@ (8016114 <tcp_process+0x594>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d15a      	bne.n	801618a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d156      	bne.n	801618a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	8b5b      	ldrh	r3, [r3, #26]
 80160e0:	f043 0302 	orr.w	r3, r3, #2
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7fe fdbc 	bl	8014c68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80160f0:	4b13      	ldr	r3, [pc, #76]	@ (8016140 <tcp_process+0x5c0>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d105      	bne.n	8016106 <tcp_process+0x586>
 80160fa:	4b11      	ldr	r3, [pc, #68]	@ (8016140 <tcp_process+0x5c0>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	68db      	ldr	r3, [r3, #12]
 8016100:	4a0f      	ldr	r2, [pc, #60]	@ (8016140 <tcp_process+0x5c0>)
 8016102:	6013      	str	r3, [r2, #0]
 8016104:	e02e      	b.n	8016164 <tcp_process+0x5e4>
 8016106:	4b0e      	ldr	r3, [pc, #56]	@ (8016140 <tcp_process+0x5c0>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	617b      	str	r3, [r7, #20]
 801610c:	e027      	b.n	801615e <tcp_process+0x5de>
 801610e:	bf00      	nop
 8016110:	2000f3d8 	.word	0x2000f3d8
 8016114:	2000f3d0 	.word	0x2000f3d0
 8016118:	2000f3d6 	.word	0x2000f3d6
 801611c:	2000f3cc 	.word	0x2000f3cc
 8016120:	2000f3bc 	.word	0x2000f3bc
 8016124:	2000bc50 	.word	0x2000bc50
 8016128:	2000bc54 	.word	0x2000bc54
 801612c:	08021ab4 	.word	0x08021ab4
 8016130:	08021d54 	.word	0x08021d54
 8016134:	08021b00 	.word	0x08021b00
 8016138:	2000f3d4 	.word	0x2000f3d4
 801613c:	2000f3d9 	.word	0x2000f3d9
 8016140:	2000f3a0 	.word	0x2000f3a0
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	68db      	ldr	r3, [r3, #12]
 8016148:	687a      	ldr	r2, [r7, #4]
 801614a:	429a      	cmp	r2, r3
 801614c:	d104      	bne.n	8016158 <tcp_process+0x5d8>
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	68da      	ldr	r2, [r3, #12]
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	60da      	str	r2, [r3, #12]
 8016156:	e005      	b.n	8016164 <tcp_process+0x5e4>
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	617b      	str	r3, [r7, #20]
 801615e:	697b      	ldr	r3, [r7, #20]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d1ef      	bne.n	8016144 <tcp_process+0x5c4>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	2200      	movs	r2, #0
 8016168:	60da      	str	r2, [r3, #12]
 801616a:	4b77      	ldr	r3, [pc, #476]	@ (8016348 <tcp_process+0x7c8>)
 801616c:	2201      	movs	r2, #1
 801616e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	220a      	movs	r2, #10
 8016174:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016176:	4b75      	ldr	r3, [pc, #468]	@ (801634c <tcp_process+0x7cc>)
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	60da      	str	r2, [r3, #12]
 801617e:	4a73      	ldr	r2, [pc, #460]	@ (801634c <tcp_process+0x7cc>)
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	6013      	str	r3, [r2, #0]
 8016184:	f003 f94c 	bl	8019420 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016188:	e0d2      	b.n	8016330 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	8b5b      	ldrh	r3, [r3, #26]
 801618e:	f043 0302 	orr.w	r3, r3, #2
 8016192:	b29a      	uxth	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	2208      	movs	r2, #8
 801619c:	751a      	strb	r2, [r3, #20]
      break;
 801619e:	e0c7      	b.n	8016330 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161a0:	4b6b      	ldr	r3, [pc, #428]	@ (8016350 <tcp_process+0x7d0>)
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	f003 0310 	and.w	r3, r3, #16
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f000 80c1 	beq.w	8016330 <tcp_process+0x7b0>
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80161b2:	4b68      	ldr	r3, [pc, #416]	@ (8016354 <tcp_process+0x7d4>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	f040 80ba 	bne.w	8016330 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f040 80b5 	bne.w	8016330 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2206      	movs	r2, #6
 80161ca:	751a      	strb	r2, [r3, #20]
      break;
 80161cc:	e0b0      	b.n	8016330 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 f9ca 	bl	8016568 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80161d4:	4b60      	ldr	r3, [pc, #384]	@ (8016358 <tcp_process+0x7d8>)
 80161d6:	781b      	ldrb	r3, [r3, #0]
 80161d8:	f003 0320 	and.w	r3, r3, #32
 80161dc:	2b00      	cmp	r3, #0
 80161de:	f000 80a9 	beq.w	8016334 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	8b5b      	ldrh	r3, [r3, #26]
 80161e6:	f043 0302 	orr.w	r3, r3, #2
 80161ea:	b29a      	uxth	r2, r3
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7fe fd39 	bl	8014c68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80161f6:	4b59      	ldr	r3, [pc, #356]	@ (801635c <tcp_process+0x7dc>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	687a      	ldr	r2, [r7, #4]
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d105      	bne.n	801620c <tcp_process+0x68c>
 8016200:	4b56      	ldr	r3, [pc, #344]	@ (801635c <tcp_process+0x7dc>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	68db      	ldr	r3, [r3, #12]
 8016206:	4a55      	ldr	r2, [pc, #340]	@ (801635c <tcp_process+0x7dc>)
 8016208:	6013      	str	r3, [r2, #0]
 801620a:	e013      	b.n	8016234 <tcp_process+0x6b4>
 801620c:	4b53      	ldr	r3, [pc, #332]	@ (801635c <tcp_process+0x7dc>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	613b      	str	r3, [r7, #16]
 8016212:	e00c      	b.n	801622e <tcp_process+0x6ae>
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	68db      	ldr	r3, [r3, #12]
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	429a      	cmp	r2, r3
 801621c:	d104      	bne.n	8016228 <tcp_process+0x6a8>
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	68da      	ldr	r2, [r3, #12]
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	60da      	str	r2, [r3, #12]
 8016226:	e005      	b.n	8016234 <tcp_process+0x6b4>
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	613b      	str	r3, [r7, #16]
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d1ef      	bne.n	8016214 <tcp_process+0x694>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2200      	movs	r2, #0
 8016238:	60da      	str	r2, [r3, #12]
 801623a:	4b43      	ldr	r3, [pc, #268]	@ (8016348 <tcp_process+0x7c8>)
 801623c:	2201      	movs	r2, #1
 801623e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	220a      	movs	r2, #10
 8016244:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016246:	4b41      	ldr	r3, [pc, #260]	@ (801634c <tcp_process+0x7cc>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	60da      	str	r2, [r3, #12]
 801624e:	4a3f      	ldr	r2, [pc, #252]	@ (801634c <tcp_process+0x7cc>)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6013      	str	r3, [r2, #0]
 8016254:	f003 f8e4 	bl	8019420 <tcp_timer_needed>
      }
      break;
 8016258:	e06c      	b.n	8016334 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f984 	bl	8016568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016260:	4b3b      	ldr	r3, [pc, #236]	@ (8016350 <tcp_process+0x7d0>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	f003 0310 	and.w	r3, r3, #16
 8016268:	2b00      	cmp	r3, #0
 801626a:	d065      	beq.n	8016338 <tcp_process+0x7b8>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016270:	4b38      	ldr	r3, [pc, #224]	@ (8016354 <tcp_process+0x7d4>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	429a      	cmp	r2, r3
 8016276:	d15f      	bne.n	8016338 <tcp_process+0x7b8>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801627c:	2b00      	cmp	r3, #0
 801627e:	d15b      	bne.n	8016338 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7fe fcf1 	bl	8014c68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016286:	4b35      	ldr	r3, [pc, #212]	@ (801635c <tcp_process+0x7dc>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	687a      	ldr	r2, [r7, #4]
 801628c:	429a      	cmp	r2, r3
 801628e:	d105      	bne.n	801629c <tcp_process+0x71c>
 8016290:	4b32      	ldr	r3, [pc, #200]	@ (801635c <tcp_process+0x7dc>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	4a31      	ldr	r2, [pc, #196]	@ (801635c <tcp_process+0x7dc>)
 8016298:	6013      	str	r3, [r2, #0]
 801629a:	e013      	b.n	80162c4 <tcp_process+0x744>
 801629c:	4b2f      	ldr	r3, [pc, #188]	@ (801635c <tcp_process+0x7dc>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	60fb      	str	r3, [r7, #12]
 80162a2:	e00c      	b.n	80162be <tcp_process+0x73e>
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d104      	bne.n	80162b8 <tcp_process+0x738>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68da      	ldr	r2, [r3, #12]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	60da      	str	r2, [r3, #12]
 80162b6:	e005      	b.n	80162c4 <tcp_process+0x744>
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	60fb      	str	r3, [r7, #12]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1ef      	bne.n	80162a4 <tcp_process+0x724>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	60da      	str	r2, [r3, #12]
 80162ca:	4b1f      	ldr	r3, [pc, #124]	@ (8016348 <tcp_process+0x7c8>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	220a      	movs	r2, #10
 80162d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80162d6:	4b1d      	ldr	r3, [pc, #116]	@ (801634c <tcp_process+0x7cc>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	60da      	str	r2, [r3, #12]
 80162de:	4a1b      	ldr	r2, [pc, #108]	@ (801634c <tcp_process+0x7cc>)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	f003 f89c 	bl	8019420 <tcp_timer_needed>
      }
      break;
 80162e8:	e026      	b.n	8016338 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 f93c 	bl	8016568 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80162f0:	4b17      	ldr	r3, [pc, #92]	@ (8016350 <tcp_process+0x7d0>)
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	f003 0310 	and.w	r3, r3, #16
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d01f      	beq.n	801633c <tcp_process+0x7bc>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016300:	4b14      	ldr	r3, [pc, #80]	@ (8016354 <tcp_process+0x7d4>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	429a      	cmp	r2, r3
 8016306:	d119      	bne.n	801633c <tcp_process+0x7bc>
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801630c:	2b00      	cmp	r3, #0
 801630e:	d115      	bne.n	801633c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016310:	4b11      	ldr	r3, [pc, #68]	@ (8016358 <tcp_process+0x7d8>)
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	f043 0310 	orr.w	r3, r3, #16
 8016318:	b2da      	uxtb	r2, r3
 801631a:	4b0f      	ldr	r3, [pc, #60]	@ (8016358 <tcp_process+0x7d8>)
 801631c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801631e:	e00d      	b.n	801633c <tcp_process+0x7bc>
    default:
      break;
 8016320:	bf00      	nop
 8016322:	e00c      	b.n	801633e <tcp_process+0x7be>
      break;
 8016324:	bf00      	nop
 8016326:	e00a      	b.n	801633e <tcp_process+0x7be>
      break;
 8016328:	bf00      	nop
 801632a:	e008      	b.n	801633e <tcp_process+0x7be>
      break;
 801632c:	bf00      	nop
 801632e:	e006      	b.n	801633e <tcp_process+0x7be>
      break;
 8016330:	bf00      	nop
 8016332:	e004      	b.n	801633e <tcp_process+0x7be>
      break;
 8016334:	bf00      	nop
 8016336:	e002      	b.n	801633e <tcp_process+0x7be>
      break;
 8016338:	bf00      	nop
 801633a:	e000      	b.n	801633e <tcp_process+0x7be>
      break;
 801633c:	bf00      	nop
  }
  return ERR_OK;
 801633e:	2300      	movs	r3, #0
}
 8016340:	4618      	mov	r0, r3
 8016342:	3724      	adds	r7, #36	@ 0x24
 8016344:	46bd      	mov	sp, r7
 8016346:	bd90      	pop	{r4, r7, pc}
 8016348:	2000f3a8 	.word	0x2000f3a8
 801634c:	2000f3a4 	.word	0x2000f3a4
 8016350:	2000f3d8 	.word	0x2000f3d8
 8016354:	2000f3d0 	.word	0x2000f3d0
 8016358:	2000f3d9 	.word	0x2000f3d9
 801635c:	2000f3a0 	.word	0x2000f3a0

08016360 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016360:	b590      	push	{r4, r7, lr}
 8016362:	b085      	sub	sp, #20
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d106      	bne.n	801637e <tcp_oos_insert_segment+0x1e>
 8016370:	4b3b      	ldr	r3, [pc, #236]	@ (8016460 <tcp_oos_insert_segment+0x100>)
 8016372:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016376:	493b      	ldr	r1, [pc, #236]	@ (8016464 <tcp_oos_insert_segment+0x104>)
 8016378:	483b      	ldr	r0, [pc, #236]	@ (8016468 <tcp_oos_insert_segment+0x108>)
 801637a:	f007 f8b5 	bl	801d4e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	68db      	ldr	r3, [r3, #12]
 8016382:	899b      	ldrh	r3, [r3, #12]
 8016384:	b29b      	uxth	r3, r3
 8016386:	4618      	mov	r0, r3
 8016388:	f7fb f8c6 	bl	8011518 <lwip_htons>
 801638c:	4603      	mov	r3, r0
 801638e:	b2db      	uxtb	r3, r3
 8016390:	f003 0301 	and.w	r3, r3, #1
 8016394:	2b00      	cmp	r3, #0
 8016396:	d028      	beq.n	80163ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016398:	6838      	ldr	r0, [r7, #0]
 801639a:	f7fe f977 	bl	801468c <tcp_segs_free>
    next = NULL;
 801639e:	2300      	movs	r3, #0
 80163a0:	603b      	str	r3, [r7, #0]
 80163a2:	e056      	b.n	8016452 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	899b      	ldrh	r3, [r3, #12]
 80163aa:	b29b      	uxth	r3, r3
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7fb f8b3 	bl	8011518 <lwip_htons>
 80163b2:	4603      	mov	r3, r0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	f003 0301 	and.w	r3, r3, #1
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00d      	beq.n	80163da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	68db      	ldr	r3, [r3, #12]
 80163c2:	899b      	ldrh	r3, [r3, #12]
 80163c4:	b29c      	uxth	r4, r3
 80163c6:	2001      	movs	r0, #1
 80163c8:	f7fb f8a6 	bl	8011518 <lwip_htons>
 80163cc:	4603      	mov	r3, r0
 80163ce:	461a      	mov	r2, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	4322      	orrs	r2, r4
 80163d6:	b292      	uxth	r2, r2
 80163d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7fe f966 	bl	80146b6 <tcp_seg_free>
    while (next &&
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d00e      	beq.n	801640e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	891b      	ldrh	r3, [r3, #8]
 80163f4:	461a      	mov	r2, r3
 80163f6:	4b1d      	ldr	r3, [pc, #116]	@ (801646c <tcp_oos_insert_segment+0x10c>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	441a      	add	r2, r3
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	8909      	ldrh	r1, [r1, #8]
 8016406:	440b      	add	r3, r1
 8016408:	1ad3      	subs	r3, r2, r3
    while (next &&
 801640a:	2b00      	cmp	r3, #0
 801640c:	daca      	bge.n	80163a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d01e      	beq.n	8016452 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	891b      	ldrh	r3, [r3, #8]
 8016418:	461a      	mov	r2, r3
 801641a:	4b14      	ldr	r3, [pc, #80]	@ (801646c <tcp_oos_insert_segment+0x10c>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	441a      	add	r2, r3
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	68db      	ldr	r3, [r3, #12]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016428:	2b00      	cmp	r3, #0
 801642a:	dd12      	ble.n	8016452 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	68db      	ldr	r3, [r3, #12]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	b29a      	uxth	r2, r3
 8016434:	4b0d      	ldr	r3, [pc, #52]	@ (801646c <tcp_oos_insert_segment+0x10c>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	b29b      	uxth	r3, r3
 801643a:	1ad3      	subs	r3, r2, r3
 801643c:	b29a      	uxth	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	685a      	ldr	r2, [r3, #4]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	891b      	ldrh	r3, [r3, #8]
 801644a:	4619      	mov	r1, r3
 801644c:	4610      	mov	r0, r2
 801644e:	f7fc fb05 	bl	8012a5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	683a      	ldr	r2, [r7, #0]
 8016456:	601a      	str	r2, [r3, #0]
}
 8016458:	bf00      	nop
 801645a:	3714      	adds	r7, #20
 801645c:	46bd      	mov	sp, r7
 801645e:	bd90      	pop	{r4, r7, pc}
 8016460:	08021ab4 	.word	0x08021ab4
 8016464:	08021d74 	.word	0x08021d74
 8016468:	08021b00 	.word	0x08021b00
 801646c:	2000f3cc 	.word	0x2000f3cc

08016470 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016470:	b5b0      	push	{r4, r5, r7, lr}
 8016472:	b086      	sub	sp, #24
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801647e:	e03e      	b.n	80164fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	4618      	mov	r0, r3
 8016490:	f7fc fcf8 	bl	8012e84 <pbuf_clen>
 8016494:	4603      	mov	r3, r0
 8016496:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801649e:	8a7a      	ldrh	r2, [r7, #18]
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d906      	bls.n	80164b2 <tcp_free_acked_segments+0x42>
 80164a4:	4b2a      	ldr	r3, [pc, #168]	@ (8016550 <tcp_free_acked_segments+0xe0>)
 80164a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80164aa:	492a      	ldr	r1, [pc, #168]	@ (8016554 <tcp_free_acked_segments+0xe4>)
 80164ac:	482a      	ldr	r0, [pc, #168]	@ (8016558 <tcp_free_acked_segments+0xe8>)
 80164ae:	f007 f81b 	bl	801d4e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80164b8:	8a7b      	ldrh	r3, [r7, #18]
 80164ba:	1ad3      	subs	r3, r2, r3
 80164bc:	b29a      	uxth	r2, r3
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	891a      	ldrh	r2, [r3, #8]
 80164c8:	4b24      	ldr	r3, [pc, #144]	@ (801655c <tcp_free_acked_segments+0xec>)
 80164ca:	881b      	ldrh	r3, [r3, #0]
 80164cc:	4413      	add	r3, r2
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	4b22      	ldr	r3, [pc, #136]	@ (801655c <tcp_free_acked_segments+0xec>)
 80164d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80164d4:	6978      	ldr	r0, [r7, #20]
 80164d6:	f7fe f8ee 	bl	80146b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d00c      	beq.n	80164fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80164e4:	68bb      	ldr	r3, [r7, #8]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d109      	bne.n	80164fe <tcp_free_acked_segments+0x8e>
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d106      	bne.n	80164fe <tcp_free_acked_segments+0x8e>
 80164f0:	4b17      	ldr	r3, [pc, #92]	@ (8016550 <tcp_free_acked_segments+0xe0>)
 80164f2:	f240 4261 	movw	r2, #1121	@ 0x461
 80164f6:	491a      	ldr	r1, [pc, #104]	@ (8016560 <tcp_free_acked_segments+0xf0>)
 80164f8:	4817      	ldr	r0, [pc, #92]	@ (8016558 <tcp_free_acked_segments+0xe8>)
 80164fa:	f006 fff5 	bl	801d4e8 <iprintf>
  while (seg_list != NULL &&
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d020      	beq.n	8016546 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016504:	68bb      	ldr	r3, [r7, #8]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	685b      	ldr	r3, [r3, #4]
 801650a:	4618      	mov	r0, r3
 801650c:	f7fb f819 	bl	8011542 <lwip_htonl>
 8016510:	4604      	mov	r4, r0
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	891b      	ldrh	r3, [r3, #8]
 8016516:	461d      	mov	r5, r3
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	68db      	ldr	r3, [r3, #12]
 801651c:	899b      	ldrh	r3, [r3, #12]
 801651e:	b29b      	uxth	r3, r3
 8016520:	4618      	mov	r0, r3
 8016522:	f7fa fff9 	bl	8011518 <lwip_htons>
 8016526:	4603      	mov	r3, r0
 8016528:	b2db      	uxtb	r3, r3
 801652a:	f003 0303 	and.w	r3, r3, #3
 801652e:	2b00      	cmp	r3, #0
 8016530:	d001      	beq.n	8016536 <tcp_free_acked_segments+0xc6>
 8016532:	2301      	movs	r3, #1
 8016534:	e000      	b.n	8016538 <tcp_free_acked_segments+0xc8>
 8016536:	2300      	movs	r3, #0
 8016538:	442b      	add	r3, r5
 801653a:	18e2      	adds	r2, r4, r3
 801653c:	4b09      	ldr	r3, [pc, #36]	@ (8016564 <tcp_free_acked_segments+0xf4>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016542:	2b00      	cmp	r3, #0
 8016544:	dd9c      	ble.n	8016480 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016546:	68bb      	ldr	r3, [r7, #8]
}
 8016548:	4618      	mov	r0, r3
 801654a:	3718      	adds	r7, #24
 801654c:	46bd      	mov	sp, r7
 801654e:	bdb0      	pop	{r4, r5, r7, pc}
 8016550:	08021ab4 	.word	0x08021ab4
 8016554:	08021d9c 	.word	0x08021d9c
 8016558:	08021b00 	.word	0x08021b00
 801655c:	2000f3d4 	.word	0x2000f3d4
 8016560:	08021dc4 	.word	0x08021dc4
 8016564:	2000f3d0 	.word	0x2000f3d0

08016568 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016568:	b5b0      	push	{r4, r5, r7, lr}
 801656a:	b094      	sub	sp, #80	@ 0x50
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016570:	2300      	movs	r3, #0
 8016572:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d106      	bne.n	8016588 <tcp_receive+0x20>
 801657a:	4b91      	ldr	r3, [pc, #580]	@ (80167c0 <tcp_receive+0x258>)
 801657c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016580:	4990      	ldr	r1, [pc, #576]	@ (80167c4 <tcp_receive+0x25c>)
 8016582:	4891      	ldr	r0, [pc, #580]	@ (80167c8 <tcp_receive+0x260>)
 8016584:	f006 ffb0 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	7d1b      	ldrb	r3, [r3, #20]
 801658c:	2b03      	cmp	r3, #3
 801658e:	d806      	bhi.n	801659e <tcp_receive+0x36>
 8016590:	4b8b      	ldr	r3, [pc, #556]	@ (80167c0 <tcp_receive+0x258>)
 8016592:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016596:	498d      	ldr	r1, [pc, #564]	@ (80167cc <tcp_receive+0x264>)
 8016598:	488b      	ldr	r0, [pc, #556]	@ (80167c8 <tcp_receive+0x260>)
 801659a:	f006 ffa5 	bl	801d4e8 <iprintf>

  if (flags & TCP_ACK) {
 801659e:	4b8c      	ldr	r3, [pc, #560]	@ (80167d0 <tcp_receive+0x268>)
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	f003 0310 	and.w	r3, r3, #16
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 8264 	beq.w	8016a74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80165b2:	461a      	mov	r2, r3
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80165b8:	4413      	add	r3, r2
 80165ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80165c0:	4b84      	ldr	r3, [pc, #528]	@ (80167d4 <tcp_receive+0x26c>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	1ad3      	subs	r3, r2, r3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	db1b      	blt.n	8016602 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80165ce:	4b81      	ldr	r3, [pc, #516]	@ (80167d4 <tcp_receive+0x26c>)
 80165d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d106      	bne.n	80165e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80165da:	4b7f      	ldr	r3, [pc, #508]	@ (80167d8 <tcp_receive+0x270>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	1ad3      	subs	r3, r2, r3
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	db0e      	blt.n	8016602 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80165e8:	4b7b      	ldr	r3, [pc, #492]	@ (80167d8 <tcp_receive+0x270>)
 80165ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d125      	bne.n	801663c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80165f0:	4b7a      	ldr	r3, [pc, #488]	@ (80167dc <tcp_receive+0x274>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	89db      	ldrh	r3, [r3, #14]
 80165f6:	b29a      	uxth	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80165fe:	429a      	cmp	r2, r3
 8016600:	d91c      	bls.n	801663c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016602:	4b76      	ldr	r3, [pc, #472]	@ (80167dc <tcp_receive+0x274>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	89db      	ldrh	r3, [r3, #14]
 8016608:	b29a      	uxth	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801661c:	429a      	cmp	r2, r3
 801661e:	d205      	bcs.n	801662c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801662c:	4b69      	ldr	r3, [pc, #420]	@ (80167d4 <tcp_receive+0x26c>)
 801662e:	681a      	ldr	r2, [r3, #0]
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016634:	4b68      	ldr	r3, [pc, #416]	@ (80167d8 <tcp_receive+0x270>)
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801663c:	4b66      	ldr	r3, [pc, #408]	@ (80167d8 <tcp_receive+0x270>)
 801663e:	681a      	ldr	r2, [r3, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016644:	1ad3      	subs	r3, r2, r3
 8016646:	2b00      	cmp	r3, #0
 8016648:	dc58      	bgt.n	80166fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801664a:	4b65      	ldr	r3, [pc, #404]	@ (80167e0 <tcp_receive+0x278>)
 801664c:	881b      	ldrh	r3, [r3, #0]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d14b      	bne.n	80166ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801665c:	4413      	add	r3, r2
 801665e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016660:	429a      	cmp	r2, r3
 8016662:	d142      	bne.n	80166ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801666a:	2b00      	cmp	r3, #0
 801666c:	db3d      	blt.n	80166ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016672:	4b59      	ldr	r3, [pc, #356]	@ (80167d8 <tcp_receive+0x270>)
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	429a      	cmp	r2, r3
 8016678:	d137      	bne.n	80166ea <tcp_receive+0x182>
              found_dupack = 1;
 801667a:	2301      	movs	r3, #1
 801667c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016684:	2bff      	cmp	r3, #255	@ 0xff
 8016686:	d007      	beq.n	8016698 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801668e:	3301      	adds	r3, #1
 8016690:	b2da      	uxtb	r2, r3
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801669e:	2b03      	cmp	r3, #3
 80166a0:	d91b      	bls.n	80166da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166ac:	4413      	add	r3, r2
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d30a      	bcc.n	80166d0 <tcp_receive+0x168>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166c4:	4413      	add	r3, r2
 80166c6:	b29a      	uxth	r2, r3
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80166ce:	e004      	b.n	80166da <tcp_receive+0x172>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80166e0:	2b02      	cmp	r3, #2
 80166e2:	d902      	bls.n	80166ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f002 fb3f 	bl	8018d68 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80166ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f040 8161 	bne.w	80169b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80166fa:	e15b      	b.n	80169b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80166fc:	4b36      	ldr	r3, [pc, #216]	@ (80167d8 <tcp_receive+0x270>)
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	3b01      	subs	r3, #1
 8016708:	2b00      	cmp	r3, #0
 801670a:	f2c0 814e 	blt.w	80169aa <tcp_receive+0x442>
 801670e:	4b32      	ldr	r3, [pc, #200]	@ (80167d8 <tcp_receive+0x270>)
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016716:	1ad3      	subs	r3, r2, r3
 8016718:	2b00      	cmp	r3, #0
 801671a:	f300 8146 	bgt.w	80169aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	8b5b      	ldrh	r3, [r3, #26]
 8016722:	f003 0304 	and.w	r3, r3, #4
 8016726:	2b00      	cmp	r3, #0
 8016728:	d010      	beq.n	801674c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	8b5b      	ldrh	r3, [r3, #26]
 801672e:	f023 0304 	bic.w	r3, r3, #4
 8016732:	b29a      	uxth	r2, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2200      	movs	r2, #0
 8016748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801675a:	10db      	asrs	r3, r3, #3
 801675c:	b21b      	sxth	r3, r3
 801675e:	b29a      	uxth	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016766:	b29b      	uxth	r3, r3
 8016768:	4413      	add	r3, r2
 801676a:	b29b      	uxth	r3, r3
 801676c:	b21a      	sxth	r2, r3
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016774:	4b18      	ldr	r3, [pc, #96]	@ (80167d8 <tcp_receive+0x270>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	b29a      	uxth	r2, r3
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801677e:	b29b      	uxth	r3, r3
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801678c:	4b12      	ldr	r3, [pc, #72]	@ (80167d8 <tcp_receive+0x270>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	7d1b      	ldrb	r3, [r3, #20]
 8016798:	2b03      	cmp	r3, #3
 801679a:	f240 8097 	bls.w	80168cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d245      	bcs.n	801683a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	8b5b      	ldrh	r3, [r3, #26]
 80167b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d014      	beq.n	80167e4 <tcp_receive+0x27c>
 80167ba:	2301      	movs	r3, #1
 80167bc:	e013      	b.n	80167e6 <tcp_receive+0x27e>
 80167be:	bf00      	nop
 80167c0:	08021ab4 	.word	0x08021ab4
 80167c4:	08021de4 	.word	0x08021de4
 80167c8:	08021b00 	.word	0x08021b00
 80167cc:	08021e00 	.word	0x08021e00
 80167d0:	2000f3d8 	.word	0x2000f3d8
 80167d4:	2000f3cc 	.word	0x2000f3cc
 80167d8:	2000f3d0 	.word	0x2000f3d0
 80167dc:	2000f3bc 	.word	0x2000f3bc
 80167e0:	2000f3d6 	.word	0x2000f3d6
 80167e4:	2302      	movs	r3, #2
 80167e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80167ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80167ee:	b29a      	uxth	r2, r3
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80167f4:	fb12 f303 	smulbb	r3, r2, r3
 80167f8:	b29b      	uxth	r3, r3
 80167fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80167fc:	4293      	cmp	r3, r2
 80167fe:	bf28      	it	cs
 8016800:	4613      	movcs	r3, r2
 8016802:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801680a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801680c:	4413      	add	r3, r2
 801680e:	b29a      	uxth	r2, r3
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016816:	429a      	cmp	r2, r3
 8016818:	d309      	bcc.n	801682e <tcp_receive+0x2c6>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016820:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016822:	4413      	add	r3, r2
 8016824:	b29a      	uxth	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801682c:	e04e      	b.n	80168cc <tcp_receive+0x364>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016834:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016838:	e048      	b.n	80168cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016840:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016842:	4413      	add	r3, r2
 8016844:	b29a      	uxth	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801684c:	429a      	cmp	r2, r3
 801684e:	d309      	bcc.n	8016864 <tcp_receive+0x2fc>
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016856:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016858:	4413      	add	r3, r2
 801685a:	b29a      	uxth	r2, r3
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016862:	e004      	b.n	801686e <tcp_receive+0x306>
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801686a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801687a:	429a      	cmp	r2, r3
 801687c:	d326      	bcc.n	80168cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801688a:	1ad3      	subs	r3, r2, r3
 801688c:	b29a      	uxth	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801689e:	4413      	add	r3, r2
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d30a      	bcc.n	80168c2 <tcp_receive+0x35a>
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80168b6:	4413      	add	r3, r2
 80168b8:	b29a      	uxth	r2, r3
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80168c0:	e004      	b.n	80168cc <tcp_receive+0x364>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168d4:	4a98      	ldr	r2, [pc, #608]	@ (8016b38 <tcp_receive+0x5d0>)
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f7ff fdca 	bl	8016470 <tcp_free_acked_segments>
 80168dc:	4602      	mov	r2, r0
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168ea:	4a94      	ldr	r2, [pc, #592]	@ (8016b3c <tcp_receive+0x5d4>)
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f7ff fdbf 	bl	8016470 <tcp_free_acked_segments>
 80168f2:	4602      	mov	r2, r0
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d104      	bne.n	801690a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016906:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016908:	e002      	b.n	8016910 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2200      	movs	r2, #0
 801690e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2200      	movs	r2, #0
 8016914:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801691a:	2b00      	cmp	r3, #0
 801691c:	d103      	bne.n	8016926 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2200      	movs	r2, #0
 8016922:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801692c:	4b84      	ldr	r3, [pc, #528]	@ (8016b40 <tcp_receive+0x5d8>)
 801692e:	881b      	ldrh	r3, [r3, #0]
 8016930:	4413      	add	r3, r2
 8016932:	b29a      	uxth	r2, r3
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	8b5b      	ldrh	r3, [r3, #26]
 801693e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016942:	2b00      	cmp	r3, #0
 8016944:	d035      	beq.n	80169b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801694a:	2b00      	cmp	r3, #0
 801694c:	d118      	bne.n	8016980 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016952:	2b00      	cmp	r3, #0
 8016954:	d00c      	beq.n	8016970 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	4618      	mov	r0, r3
 8016964:	f7fa fded 	bl	8011542 <lwip_htonl>
 8016968:	4603      	mov	r3, r0
 801696a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801696c:	2b00      	cmp	r3, #0
 801696e:	dc20      	bgt.n	80169b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	8b5b      	ldrh	r3, [r3, #26]
 8016974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016978:	b29a      	uxth	r2, r3
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801697e:	e018      	b.n	80169b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	4618      	mov	r0, r3
 801698e:	f7fa fdd8 	bl	8011542 <lwip_htonl>
 8016992:	4603      	mov	r3, r0
 8016994:	1ae3      	subs	r3, r4, r3
 8016996:	2b00      	cmp	r3, #0
 8016998:	dc0b      	bgt.n	80169b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	8b5b      	ldrh	r3, [r3, #26]
 801699e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80169a2:	b29a      	uxth	r2, r3
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169a8:	e003      	b.n	80169b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f002 fbc8 	bl	8019140 <tcp_send_empty_ack>
 80169b0:	e000      	b.n	80169b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80169b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d05b      	beq.n	8016a74 <tcp_receive+0x50c>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80169c0:	4b60      	ldr	r3, [pc, #384]	@ (8016b44 <tcp_receive+0x5dc>)
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	1ad3      	subs	r3, r2, r3
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	da54      	bge.n	8016a74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80169ca:	4b5f      	ldr	r3, [pc, #380]	@ (8016b48 <tcp_receive+0x5e0>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80169d4:	b29b      	uxth	r3, r3
 80169d6:	1ad3      	subs	r3, r2, r3
 80169d8:	b29b      	uxth	r3, r3
 80169da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80169de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80169e8:	10db      	asrs	r3, r3, #3
 80169ea:	b21b      	sxth	r3, r3
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	1ad3      	subs	r3, r2, r3
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016a02:	4413      	add	r3, r2
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	b21a      	sxth	r2, r3
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8016a0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	da05      	bge.n	8016a20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016a14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016a18:	425b      	negs	r3, r3
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016a20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016a2a:	109b      	asrs	r3, r3, #2
 8016a2c:	b21b      	sxth	r3, r3
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	1ad3      	subs	r3, r2, r3
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016a44:	4413      	add	r3, r2
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	b21a      	sxth	r2, r3
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016a54:	10db      	asrs	r3, r3, #3
 8016a56:	b21b      	sxth	r3, r3
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	4413      	add	r3, r2
 8016a64:	b29b      	uxth	r3, r3
 8016a66:	b21a      	sxth	r2, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2200      	movs	r2, #0
 8016a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016a74:	4b35      	ldr	r3, [pc, #212]	@ (8016b4c <tcp_receive+0x5e4>)
 8016a76:	881b      	ldrh	r3, [r3, #0]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f000 84df 	beq.w	801743c <tcp_receive+0xed4>
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	7d1b      	ldrb	r3, [r3, #20]
 8016a82:	2b06      	cmp	r3, #6
 8016a84:	f200 84da 	bhi.w	801743c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a8c:	4b30      	ldr	r3, [pc, #192]	@ (8016b50 <tcp_receive+0x5e8>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	1ad3      	subs	r3, r2, r3
 8016a92:	3b01      	subs	r3, #1
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	f2c0 808f 	blt.w	8016bb8 <tcp_receive+0x650>
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8016b4c <tcp_receive+0x5e4>)
 8016aa0:	881b      	ldrh	r3, [r3, #0]
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8016b50 <tcp_receive+0x5e8>)
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	440b      	add	r3, r1
 8016aaa:	1ad3      	subs	r3, r2, r3
 8016aac:	3301      	adds	r3, #1
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f300 8082 	bgt.w	8016bb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016ab4:	4b27      	ldr	r3, [pc, #156]	@ (8016b54 <tcp_receive+0x5ec>)
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016abe:	4b24      	ldr	r3, [pc, #144]	@ (8016b50 <tcp_receive+0x5e8>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	1ad3      	subs	r3, r2, r3
 8016ac4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016ac6:	4b23      	ldr	r3, [pc, #140]	@ (8016b54 <tcp_receive+0x5ec>)
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d106      	bne.n	8016adc <tcp_receive+0x574>
 8016ace:	4b22      	ldr	r3, [pc, #136]	@ (8016b58 <tcp_receive+0x5f0>)
 8016ad0:	f240 5294 	movw	r2, #1428	@ 0x594
 8016ad4:	4921      	ldr	r1, [pc, #132]	@ (8016b5c <tcp_receive+0x5f4>)
 8016ad6:	4822      	ldr	r0, [pc, #136]	@ (8016b60 <tcp_receive+0x5f8>)
 8016ad8:	f006 fd06 	bl	801d4e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016ae2:	4293      	cmp	r3, r2
 8016ae4:	d906      	bls.n	8016af4 <tcp_receive+0x58c>
 8016ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8016b58 <tcp_receive+0x5f0>)
 8016ae8:	f240 5295 	movw	r2, #1429	@ 0x595
 8016aec:	491d      	ldr	r1, [pc, #116]	@ (8016b64 <tcp_receive+0x5fc>)
 8016aee:	481c      	ldr	r0, [pc, #112]	@ (8016b60 <tcp_receive+0x5f8>)
 8016af0:	f006 fcfa 	bl	801d4e8 <iprintf>
      off = (u16_t)off32;
 8016af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016afa:	4b16      	ldr	r3, [pc, #88]	@ (8016b54 <tcp_receive+0x5ec>)
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	891b      	ldrh	r3, [r3, #8]
 8016b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d906      	bls.n	8016b16 <tcp_receive+0x5ae>
 8016b08:	4b13      	ldr	r3, [pc, #76]	@ (8016b58 <tcp_receive+0x5f0>)
 8016b0a:	f240 5297 	movw	r2, #1431	@ 0x597
 8016b0e:	4916      	ldr	r1, [pc, #88]	@ (8016b68 <tcp_receive+0x600>)
 8016b10:	4813      	ldr	r0, [pc, #76]	@ (8016b60 <tcp_receive+0x5f8>)
 8016b12:	f006 fce9 	bl	801d4e8 <iprintf>
      inseg.len -= off;
 8016b16:	4b0f      	ldr	r3, [pc, #60]	@ (8016b54 <tcp_receive+0x5ec>)
 8016b18:	891a      	ldrh	r2, [r3, #8]
 8016b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016b1e:	1ad3      	subs	r3, r2, r3
 8016b20:	b29a      	uxth	r2, r3
 8016b22:	4b0c      	ldr	r3, [pc, #48]	@ (8016b54 <tcp_receive+0x5ec>)
 8016b24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016b26:	4b0b      	ldr	r3, [pc, #44]	@ (8016b54 <tcp_receive+0x5ec>)
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	891a      	ldrh	r2, [r3, #8]
 8016b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016b30:	1ad3      	subs	r3, r2, r3
 8016b32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016b34:	e02a      	b.n	8016b8c <tcp_receive+0x624>
 8016b36:	bf00      	nop
 8016b38:	08021e1c 	.word	0x08021e1c
 8016b3c:	08021e24 	.word	0x08021e24
 8016b40:	2000f3d4 	.word	0x2000f3d4
 8016b44:	2000f3d0 	.word	0x2000f3d0
 8016b48:	2000f394 	.word	0x2000f394
 8016b4c:	2000f3d6 	.word	0x2000f3d6
 8016b50:	2000f3cc 	.word	0x2000f3cc
 8016b54:	2000f3ac 	.word	0x2000f3ac
 8016b58:	08021ab4 	.word	0x08021ab4
 8016b5c:	08021e2c 	.word	0x08021e2c
 8016b60:	08021b00 	.word	0x08021b00
 8016b64:	08021e3c 	.word	0x08021e3c
 8016b68:	08021e4c 	.word	0x08021e4c
        off -= p->len;
 8016b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b6e:	895b      	ldrh	r3, [r3, #10]
 8016b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b74:	1ad3      	subs	r3, r2, r3
 8016b76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016b7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b82:	2200      	movs	r2, #0
 8016b84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b8e:	895b      	ldrh	r3, [r3, #10]
 8016b90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b94:	429a      	cmp	r2, r3
 8016b96:	d8e9      	bhi.n	8016b6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016ba0:	f7fc f85c 	bl	8012c5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ba8:	4a90      	ldr	r2, [pc, #576]	@ (8016dec <tcp_receive+0x884>)
 8016baa:	6013      	str	r3, [r2, #0]
 8016bac:	4b90      	ldr	r3, [pc, #576]	@ (8016df0 <tcp_receive+0x888>)
 8016bae:	68db      	ldr	r3, [r3, #12]
 8016bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8016dec <tcp_receive+0x884>)
 8016bb2:	6812      	ldr	r2, [r2, #0]
 8016bb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016bb6:	e00d      	b.n	8016bd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8016dec <tcp_receive+0x884>)
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bc0:	1ad3      	subs	r3, r2, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	da06      	bge.n	8016bd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	8b5b      	ldrh	r3, [r3, #26]
 8016bca:	f043 0302 	orr.w	r3, r3, #2
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016bd4:	4b85      	ldr	r3, [pc, #532]	@ (8016dec <tcp_receive+0x884>)
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bdc:	1ad3      	subs	r3, r2, r3
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f2c0 8427 	blt.w	8017432 <tcp_receive+0xeca>
 8016be4:	4b81      	ldr	r3, [pc, #516]	@ (8016dec <tcp_receive+0x884>)
 8016be6:	681a      	ldr	r2, [r3, #0]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bec:	6879      	ldr	r1, [r7, #4]
 8016bee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016bf0:	440b      	add	r3, r1
 8016bf2:	1ad3      	subs	r3, r2, r3
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	f300 841b 	bgt.w	8017432 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c00:	4b7a      	ldr	r3, [pc, #488]	@ (8016dec <tcp_receive+0x884>)
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	429a      	cmp	r2, r3
 8016c06:	f040 8298 	bne.w	801713a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016c0a:	4b79      	ldr	r3, [pc, #484]	@ (8016df0 <tcp_receive+0x888>)
 8016c0c:	891c      	ldrh	r4, [r3, #8]
 8016c0e:	4b78      	ldr	r3, [pc, #480]	@ (8016df0 <tcp_receive+0x888>)
 8016c10:	68db      	ldr	r3, [r3, #12]
 8016c12:	899b      	ldrh	r3, [r3, #12]
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7fa fc7e 	bl	8011518 <lwip_htons>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	b2db      	uxtb	r3, r3
 8016c20:	f003 0303 	and.w	r3, r3, #3
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d001      	beq.n	8016c2c <tcp_receive+0x6c4>
 8016c28:	2301      	movs	r3, #1
 8016c2a:	e000      	b.n	8016c2e <tcp_receive+0x6c6>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	4423      	add	r3, r4
 8016c30:	b29a      	uxth	r2, r3
 8016c32:	4b70      	ldr	r3, [pc, #448]	@ (8016df4 <tcp_receive+0x88c>)
 8016c34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8016df4 <tcp_receive+0x88c>)
 8016c3c:	881b      	ldrh	r3, [r3, #0]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d274      	bcs.n	8016d2c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016c42:	4b6b      	ldr	r3, [pc, #428]	@ (8016df0 <tcp_receive+0x888>)
 8016c44:	68db      	ldr	r3, [r3, #12]
 8016c46:	899b      	ldrh	r3, [r3, #12]
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fa fc64 	bl	8011518 <lwip_htons>
 8016c50:	4603      	mov	r3, r0
 8016c52:	b2db      	uxtb	r3, r3
 8016c54:	f003 0301 	and.w	r3, r3, #1
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d01e      	beq.n	8016c9a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016c5c:	4b64      	ldr	r3, [pc, #400]	@ (8016df0 <tcp_receive+0x888>)
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	899b      	ldrh	r3, [r3, #12]
 8016c62:	b29b      	uxth	r3, r3
 8016c64:	b21b      	sxth	r3, r3
 8016c66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016c6a:	b21c      	sxth	r4, r3
 8016c6c:	4b60      	ldr	r3, [pc, #384]	@ (8016df0 <tcp_receive+0x888>)
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	899b      	ldrh	r3, [r3, #12]
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fa fc4f 	bl	8011518 <lwip_htons>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7fa fc47 	bl	8011518 <lwip_htons>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	b21b      	sxth	r3, r3
 8016c8e:	4323      	orrs	r3, r4
 8016c90:	b21a      	sxth	r2, r3
 8016c92:	4b57      	ldr	r3, [pc, #348]	@ (8016df0 <tcp_receive+0x888>)
 8016c94:	68db      	ldr	r3, [r3, #12]
 8016c96:	b292      	uxth	r2, r2
 8016c98:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016c9e:	4b54      	ldr	r3, [pc, #336]	@ (8016df0 <tcp_receive+0x888>)
 8016ca0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016ca2:	4b53      	ldr	r3, [pc, #332]	@ (8016df0 <tcp_receive+0x888>)
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	899b      	ldrh	r3, [r3, #12]
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7fa fc34 	bl	8011518 <lwip_htons>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	b2db      	uxtb	r3, r3
 8016cb4:	f003 0302 	and.w	r3, r3, #2
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d005      	beq.n	8016cc8 <tcp_receive+0x760>
            inseg.len -= 1;
 8016cbc:	4b4c      	ldr	r3, [pc, #304]	@ (8016df0 <tcp_receive+0x888>)
 8016cbe:	891b      	ldrh	r3, [r3, #8]
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	b29a      	uxth	r2, r3
 8016cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8016df0 <tcp_receive+0x888>)
 8016cc6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016cc8:	4b49      	ldr	r3, [pc, #292]	@ (8016df0 <tcp_receive+0x888>)
 8016cca:	685b      	ldr	r3, [r3, #4]
 8016ccc:	4a48      	ldr	r2, [pc, #288]	@ (8016df0 <tcp_receive+0x888>)
 8016cce:	8912      	ldrh	r2, [r2, #8]
 8016cd0:	4611      	mov	r1, r2
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7fb fec2 	bl	8012a5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016cd8:	4b45      	ldr	r3, [pc, #276]	@ (8016df0 <tcp_receive+0x888>)
 8016cda:	891c      	ldrh	r4, [r3, #8]
 8016cdc:	4b44      	ldr	r3, [pc, #272]	@ (8016df0 <tcp_receive+0x888>)
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	899b      	ldrh	r3, [r3, #12]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7fa fc17 	bl	8011518 <lwip_htons>
 8016cea:	4603      	mov	r3, r0
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	f003 0303 	and.w	r3, r3, #3
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d001      	beq.n	8016cfa <tcp_receive+0x792>
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	e000      	b.n	8016cfc <tcp_receive+0x794>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	4423      	add	r3, r4
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	4b3c      	ldr	r3, [pc, #240]	@ (8016df4 <tcp_receive+0x88c>)
 8016d02:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d04:	4b3b      	ldr	r3, [pc, #236]	@ (8016df4 <tcp_receive+0x88c>)
 8016d06:	881b      	ldrh	r3, [r3, #0]
 8016d08:	461a      	mov	r2, r3
 8016d0a:	4b38      	ldr	r3, [pc, #224]	@ (8016dec <tcp_receive+0x884>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	441a      	add	r2, r3
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d14:	6879      	ldr	r1, [r7, #4]
 8016d16:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d18:	440b      	add	r3, r1
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d006      	beq.n	8016d2c <tcp_receive+0x7c4>
 8016d1e:	4b36      	ldr	r3, [pc, #216]	@ (8016df8 <tcp_receive+0x890>)
 8016d20:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016d24:	4935      	ldr	r1, [pc, #212]	@ (8016dfc <tcp_receive+0x894>)
 8016d26:	4836      	ldr	r0, [pc, #216]	@ (8016e00 <tcp_receive+0x898>)
 8016d28:	f006 fbde 	bl	801d4e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	f000 80e6 	beq.w	8016f02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d36:	4b2e      	ldr	r3, [pc, #184]	@ (8016df0 <tcp_receive+0x888>)
 8016d38:	68db      	ldr	r3, [r3, #12]
 8016d3a:	899b      	ldrh	r3, [r3, #12]
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7fa fbea 	bl	8011518 <lwip_htons>
 8016d44:	4603      	mov	r3, r0
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	f003 0301 	and.w	r3, r3, #1
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d010      	beq.n	8016d72 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016d50:	e00a      	b.n	8016d68 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d56:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	f7fd fca7 	bl	80146b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d1f0      	bne.n	8016d52 <tcp_receive+0x7ea>
 8016d70:	e0c7      	b.n	8016f02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016d78:	e051      	b.n	8016e1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d7c:	68db      	ldr	r3, [r3, #12]
 8016d7e:	899b      	ldrh	r3, [r3, #12]
 8016d80:	b29b      	uxth	r3, r3
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7fa fbc8 	bl	8011518 <lwip_htons>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	b2db      	uxtb	r3, r3
 8016d8c:	f003 0301 	and.w	r3, r3, #1
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d03c      	beq.n	8016e0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016d94:	4b16      	ldr	r3, [pc, #88]	@ (8016df0 <tcp_receive+0x888>)
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	899b      	ldrh	r3, [r3, #12]
 8016d9a:	b29b      	uxth	r3, r3
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f7fa fbbb 	bl	8011518 <lwip_htons>
 8016da2:	4603      	mov	r3, r0
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d12f      	bne.n	8016e0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016dae:	4b10      	ldr	r3, [pc, #64]	@ (8016df0 <tcp_receive+0x888>)
 8016db0:	68db      	ldr	r3, [r3, #12]
 8016db2:	899b      	ldrh	r3, [r3, #12]
 8016db4:	b29c      	uxth	r4, r3
 8016db6:	2001      	movs	r0, #1
 8016db8:	f7fa fbae 	bl	8011518 <lwip_htons>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8016df0 <tcp_receive+0x888>)
 8016dc2:	68db      	ldr	r3, [r3, #12]
 8016dc4:	4322      	orrs	r2, r4
 8016dc6:	b292      	uxth	r2, r2
 8016dc8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016dca:	4b09      	ldr	r3, [pc, #36]	@ (8016df0 <tcp_receive+0x888>)
 8016dcc:	891c      	ldrh	r4, [r3, #8]
 8016dce:	4b08      	ldr	r3, [pc, #32]	@ (8016df0 <tcp_receive+0x888>)
 8016dd0:	68db      	ldr	r3, [r3, #12]
 8016dd2:	899b      	ldrh	r3, [r3, #12]
 8016dd4:	b29b      	uxth	r3, r3
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7fa fb9e 	bl	8011518 <lwip_htons>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	f003 0303 	and.w	r3, r3, #3
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d00d      	beq.n	8016e04 <tcp_receive+0x89c>
 8016de8:	2301      	movs	r3, #1
 8016dea:	e00c      	b.n	8016e06 <tcp_receive+0x89e>
 8016dec:	2000f3cc 	.word	0x2000f3cc
 8016df0:	2000f3ac 	.word	0x2000f3ac
 8016df4:	2000f3d6 	.word	0x2000f3d6
 8016df8:	08021ab4 	.word	0x08021ab4
 8016dfc:	08021e5c 	.word	0x08021e5c
 8016e00:	08021b00 	.word	0x08021b00
 8016e04:	2300      	movs	r3, #0
 8016e06:	4423      	add	r3, r4
 8016e08:	b29a      	uxth	r2, r3
 8016e0a:	4b98      	ldr	r3, [pc, #608]	@ (801706c <tcp_receive+0xb04>)
 8016e0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e10:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016e18:	6938      	ldr	r0, [r7, #16]
 8016e1a:	f7fd fc4c 	bl	80146b6 <tcp_seg_free>
            while (next &&
 8016e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d00e      	beq.n	8016e42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016e24:	4b91      	ldr	r3, [pc, #580]	@ (801706c <tcp_receive+0xb04>)
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	461a      	mov	r2, r3
 8016e2a:	4b91      	ldr	r3, [pc, #580]	@ (8017070 <tcp_receive+0xb08>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	441a      	add	r2, r3
 8016e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	685b      	ldr	r3, [r3, #4]
 8016e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016e38:	8909      	ldrh	r1, [r1, #8]
 8016e3a:	440b      	add	r3, r1
 8016e3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	da9b      	bge.n	8016d7a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d059      	beq.n	8016efc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016e48:	4b88      	ldr	r3, [pc, #544]	@ (801706c <tcp_receive+0xb04>)
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4b88      	ldr	r3, [pc, #544]	@ (8017070 <tcp_receive+0xb08>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	441a      	add	r2, r3
 8016e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e56:	68db      	ldr	r3, [r3, #12]
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	dd4d      	ble.n	8016efc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e62:	68db      	ldr	r3, [r3, #12]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	b29a      	uxth	r2, r3
 8016e68:	4b81      	ldr	r3, [pc, #516]	@ (8017070 <tcp_receive+0xb08>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	b29b      	uxth	r3, r3
 8016e6e:	1ad3      	subs	r3, r2, r3
 8016e70:	b29a      	uxth	r2, r3
 8016e72:	4b80      	ldr	r3, [pc, #512]	@ (8017074 <tcp_receive+0xb0c>)
 8016e74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e76:	4b7f      	ldr	r3, [pc, #508]	@ (8017074 <tcp_receive+0xb0c>)
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	899b      	ldrh	r3, [r3, #12]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	4618      	mov	r0, r3
 8016e80:	f7fa fb4a 	bl	8011518 <lwip_htons>
 8016e84:	4603      	mov	r3, r0
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	f003 0302 	and.w	r3, r3, #2
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d005      	beq.n	8016e9c <tcp_receive+0x934>
                inseg.len -= 1;
 8016e90:	4b78      	ldr	r3, [pc, #480]	@ (8017074 <tcp_receive+0xb0c>)
 8016e92:	891b      	ldrh	r3, [r3, #8]
 8016e94:	3b01      	subs	r3, #1
 8016e96:	b29a      	uxth	r2, r3
 8016e98:	4b76      	ldr	r3, [pc, #472]	@ (8017074 <tcp_receive+0xb0c>)
 8016e9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016e9c:	4b75      	ldr	r3, [pc, #468]	@ (8017074 <tcp_receive+0xb0c>)
 8016e9e:	685b      	ldr	r3, [r3, #4]
 8016ea0:	4a74      	ldr	r2, [pc, #464]	@ (8017074 <tcp_receive+0xb0c>)
 8016ea2:	8912      	ldrh	r2, [r2, #8]
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fb fdd8 	bl	8012a5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016eac:	4b71      	ldr	r3, [pc, #452]	@ (8017074 <tcp_receive+0xb0c>)
 8016eae:	891c      	ldrh	r4, [r3, #8]
 8016eb0:	4b70      	ldr	r3, [pc, #448]	@ (8017074 <tcp_receive+0xb0c>)
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	899b      	ldrh	r3, [r3, #12]
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fa fb2d 	bl	8011518 <lwip_htons>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	f003 0303 	and.w	r3, r3, #3
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d001      	beq.n	8016ece <tcp_receive+0x966>
 8016eca:	2301      	movs	r3, #1
 8016ecc:	e000      	b.n	8016ed0 <tcp_receive+0x968>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	4423      	add	r3, r4
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	4b65      	ldr	r3, [pc, #404]	@ (801706c <tcp_receive+0xb04>)
 8016ed6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016ed8:	4b64      	ldr	r3, [pc, #400]	@ (801706c <tcp_receive+0xb04>)
 8016eda:	881b      	ldrh	r3, [r3, #0]
 8016edc:	461a      	mov	r2, r3
 8016ede:	4b64      	ldr	r3, [pc, #400]	@ (8017070 <tcp_receive+0xb08>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	441a      	add	r2, r3
 8016ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	685b      	ldr	r3, [r3, #4]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d006      	beq.n	8016efc <tcp_receive+0x994>
 8016eee:	4b62      	ldr	r3, [pc, #392]	@ (8017078 <tcp_receive+0xb10>)
 8016ef0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016ef4:	4961      	ldr	r1, [pc, #388]	@ (801707c <tcp_receive+0xb14>)
 8016ef6:	4862      	ldr	r0, [pc, #392]	@ (8017080 <tcp_receive+0xb18>)
 8016ef8:	f006 faf6 	bl	801d4e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016f00:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016f02:	4b5a      	ldr	r3, [pc, #360]	@ (801706c <tcp_receive+0xb04>)
 8016f04:	881b      	ldrh	r3, [r3, #0]
 8016f06:	461a      	mov	r2, r3
 8016f08:	4b59      	ldr	r3, [pc, #356]	@ (8017070 <tcp_receive+0xb08>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	441a      	add	r2, r3
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016f16:	4b55      	ldr	r3, [pc, #340]	@ (801706c <tcp_receive+0xb04>)
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	d206      	bcs.n	8016f2c <tcp_receive+0x9c4>
 8016f1e:	4b56      	ldr	r3, [pc, #344]	@ (8017078 <tcp_receive+0xb10>)
 8016f20:	f240 6207 	movw	r2, #1543	@ 0x607
 8016f24:	4957      	ldr	r1, [pc, #348]	@ (8017084 <tcp_receive+0xb1c>)
 8016f26:	4856      	ldr	r0, [pc, #344]	@ (8017080 <tcp_receive+0xb18>)
 8016f28:	f006 fade 	bl	801d4e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016f30:	4b4e      	ldr	r3, [pc, #312]	@ (801706c <tcp_receive+0xb04>)
 8016f32:	881b      	ldrh	r3, [r3, #0]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	b29a      	uxth	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f7fc fe93 	bl	8013c68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016f42:	4b4c      	ldr	r3, [pc, #304]	@ (8017074 <tcp_receive+0xb0c>)
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	891b      	ldrh	r3, [r3, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d006      	beq.n	8016f5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016f4c:	4b49      	ldr	r3, [pc, #292]	@ (8017074 <tcp_receive+0xb0c>)
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	4a4d      	ldr	r2, [pc, #308]	@ (8017088 <tcp_receive+0xb20>)
 8016f52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016f54:	4b47      	ldr	r3, [pc, #284]	@ (8017074 <tcp_receive+0xb0c>)
 8016f56:	2200      	movs	r2, #0
 8016f58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f5a:	4b46      	ldr	r3, [pc, #280]	@ (8017074 <tcp_receive+0xb0c>)
 8016f5c:	68db      	ldr	r3, [r3, #12]
 8016f5e:	899b      	ldrh	r3, [r3, #12]
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7fa fad8 	bl	8011518 <lwip_htons>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	f003 0301 	and.w	r3, r3, #1
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	f000 80b8 	beq.w	80170e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016f76:	4b45      	ldr	r3, [pc, #276]	@ (801708c <tcp_receive+0xb24>)
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	f043 0320 	orr.w	r3, r3, #32
 8016f7e:	b2da      	uxtb	r2, r3
 8016f80:	4b42      	ldr	r3, [pc, #264]	@ (801708c <tcp_receive+0xb24>)
 8016f82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016f84:	e0af      	b.n	80170e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	4a36      	ldr	r2, [pc, #216]	@ (8017070 <tcp_receive+0xb08>)
 8016f96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	891b      	ldrh	r3, [r3, #8]
 8016f9c:	461c      	mov	r4, r3
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	899b      	ldrh	r3, [r3, #12]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fa fab6 	bl	8011518 <lwip_htons>
 8016fac:	4603      	mov	r3, r0
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	f003 0303 	and.w	r3, r3, #3
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d001      	beq.n	8016fbc <tcp_receive+0xa54>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	e000      	b.n	8016fbe <tcp_receive+0xa56>
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	191a      	adds	r2, r3, r4
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fc4:	441a      	add	r2, r3
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fce:	461c      	mov	r4, r3
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	891b      	ldrh	r3, [r3, #8]
 8016fd4:	461d      	mov	r5, r3
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fa9a 	bl	8011518 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0303 	and.w	r3, r3, #3
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d001      	beq.n	8016ff4 <tcp_receive+0xa8c>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	e000      	b.n	8016ff6 <tcp_receive+0xa8e>
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	442b      	add	r3, r5
 8016ff8:	429c      	cmp	r4, r3
 8016ffa:	d206      	bcs.n	801700a <tcp_receive+0xaa2>
 8016ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8017078 <tcp_receive+0xb10>)
 8016ffe:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017002:	4923      	ldr	r1, [pc, #140]	@ (8017090 <tcp_receive+0xb28>)
 8017004:	481e      	ldr	r0, [pc, #120]	@ (8017080 <tcp_receive+0xb18>)
 8017006:	f006 fa6f 	bl	801d4e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	891b      	ldrh	r3, [r3, #8]
 801700e:	461c      	mov	r4, r3
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	899b      	ldrh	r3, [r3, #12]
 8017016:	b29b      	uxth	r3, r3
 8017018:	4618      	mov	r0, r3
 801701a:	f7fa fa7d 	bl	8011518 <lwip_htons>
 801701e:	4603      	mov	r3, r0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	f003 0303 	and.w	r3, r3, #3
 8017026:	2b00      	cmp	r3, #0
 8017028:	d001      	beq.n	801702e <tcp_receive+0xac6>
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <tcp_receive+0xac8>
 801702e:	2300      	movs	r3, #0
 8017030:	1919      	adds	r1, r3, r4
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017036:	b28b      	uxth	r3, r1
 8017038:	1ad3      	subs	r3, r2, r3
 801703a:	b29a      	uxth	r2, r3
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7fc fe11 	bl	8013c68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	891b      	ldrh	r3, [r3, #8]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d028      	beq.n	80170a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017050:	4b0d      	ldr	r3, [pc, #52]	@ (8017088 <tcp_receive+0xb20>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d01d      	beq.n	8017094 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017058:	4b0b      	ldr	r3, [pc, #44]	@ (8017088 <tcp_receive+0xb20>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	4619      	mov	r1, r3
 8017062:	4610      	mov	r0, r2
 8017064:	f7fb ff4e 	bl	8012f04 <pbuf_cat>
 8017068:	e018      	b.n	801709c <tcp_receive+0xb34>
 801706a:	bf00      	nop
 801706c:	2000f3d6 	.word	0x2000f3d6
 8017070:	2000f3cc 	.word	0x2000f3cc
 8017074:	2000f3ac 	.word	0x2000f3ac
 8017078:	08021ab4 	.word	0x08021ab4
 801707c:	08021e94 	.word	0x08021e94
 8017080:	08021b00 	.word	0x08021b00
 8017084:	08021ed0 	.word	0x08021ed0
 8017088:	2000f3dc 	.word	0x2000f3dc
 801708c:	2000f3d9 	.word	0x2000f3d9
 8017090:	08021ef0 	.word	0x08021ef0
            } else {
              recv_data = cseg->p;
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	4a70      	ldr	r2, [pc, #448]	@ (801725c <tcp_receive+0xcf4>)
 801709a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	2200      	movs	r2, #0
 80170a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	899b      	ldrh	r3, [r3, #12]
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fa fa34 	bl	8011518 <lwip_htons>
 80170b0:	4603      	mov	r3, r0
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	f003 0301 	and.w	r3, r3, #1
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d00d      	beq.n	80170d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80170bc:	4b68      	ldr	r3, [pc, #416]	@ (8017260 <tcp_receive+0xcf8>)
 80170be:	781b      	ldrb	r3, [r3, #0]
 80170c0:	f043 0320 	orr.w	r3, r3, #32
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	4b66      	ldr	r3, [pc, #408]	@ (8017260 <tcp_receive+0xcf8>)
 80170c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	7d1b      	ldrb	r3, [r3, #20]
 80170ce:	2b04      	cmp	r3, #4
 80170d0:	d102      	bne.n	80170d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2207      	movs	r2, #7
 80170d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80170d8:	68bb      	ldr	r3, [r7, #8]
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80170e0:	68b8      	ldr	r0, [r7, #8]
 80170e2:	f7fd fae8 	bl	80146b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d008      	beq.n	8017100 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	685a      	ldr	r2, [r3, #4]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80170fa:	429a      	cmp	r2, r3
 80170fc:	f43f af43 	beq.w	8016f86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	8b5b      	ldrh	r3, [r3, #26]
 8017104:	f003 0301 	and.w	r3, r3, #1
 8017108:	2b00      	cmp	r3, #0
 801710a:	d00e      	beq.n	801712a <tcp_receive+0xbc2>
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	8b5b      	ldrh	r3, [r3, #26]
 8017110:	f023 0301 	bic.w	r3, r3, #1
 8017114:	b29a      	uxth	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	835a      	strh	r2, [r3, #26]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	8b5b      	ldrh	r3, [r3, #26]
 801711e:	f043 0302 	orr.w	r3, r3, #2
 8017122:	b29a      	uxth	r2, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017128:	e187      	b.n	801743a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8b5b      	ldrh	r3, [r3, #26]
 801712e:	f043 0301 	orr.w	r3, r3, #1
 8017132:	b29a      	uxth	r2, r3
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017138:	e17f      	b.n	801743a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017142:	4848      	ldr	r0, [pc, #288]	@ (8017264 <tcp_receive+0xcfc>)
 8017144:	f7fd faee 	bl	8014724 <tcp_seg_copy>
 8017148:	4602      	mov	r2, r0
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	675a      	str	r2, [r3, #116]	@ 0x74
 801714e:	e16c      	b.n	801742a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017150:	2300      	movs	r3, #0
 8017152:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017158:	63bb      	str	r3, [r7, #56]	@ 0x38
 801715a:	e156      	b.n	801740a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801715e:	68db      	ldr	r3, [r3, #12]
 8017160:	685a      	ldr	r2, [r3, #4]
 8017162:	4b41      	ldr	r3, [pc, #260]	@ (8017268 <tcp_receive+0xd00>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	429a      	cmp	r2, r3
 8017168:	d11d      	bne.n	80171a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801716a:	4b3e      	ldr	r3, [pc, #248]	@ (8017264 <tcp_receive+0xcfc>)
 801716c:	891a      	ldrh	r2, [r3, #8]
 801716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017170:	891b      	ldrh	r3, [r3, #8]
 8017172:	429a      	cmp	r2, r3
 8017174:	f240 814e 	bls.w	8017414 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017178:	483a      	ldr	r0, [pc, #232]	@ (8017264 <tcp_receive+0xcfc>)
 801717a:	f7fd fad3 	bl	8014724 <tcp_seg_copy>
 801717e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	2b00      	cmp	r3, #0
 8017184:	f000 8148 	beq.w	8017418 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801718a:	2b00      	cmp	r3, #0
 801718c:	d003      	beq.n	8017196 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801718e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017190:	697a      	ldr	r2, [r7, #20]
 8017192:	601a      	str	r2, [r3, #0]
 8017194:	e002      	b.n	801719c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	697a      	ldr	r2, [r7, #20]
 801719a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801719c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801719e:	6978      	ldr	r0, [r7, #20]
 80171a0:	f7ff f8de 	bl	8016360 <tcp_oos_insert_segment>
                }
                break;
 80171a4:	e138      	b.n	8017418 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80171a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d117      	bne.n	80171dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80171ac:	4b2e      	ldr	r3, [pc, #184]	@ (8017268 <tcp_receive+0xd00>)
 80171ae:	681a      	ldr	r2, [r3, #0]
 80171b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	1ad3      	subs	r3, r2, r3
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	da57      	bge.n	801726c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171bc:	4829      	ldr	r0, [pc, #164]	@ (8017264 <tcp_receive+0xcfc>)
 80171be:	f7fd fab1 	bl	8014724 <tcp_seg_copy>
 80171c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f000 8128 	beq.w	801741c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	69ba      	ldr	r2, [r7, #24]
 80171d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80171d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80171d4:	69b8      	ldr	r0, [r7, #24]
 80171d6:	f7ff f8c3 	bl	8016360 <tcp_oos_insert_segment>
                  }
                  break;
 80171da:	e11f      	b.n	801741c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80171dc:	4b22      	ldr	r3, [pc, #136]	@ (8017268 <tcp_receive+0xd00>)
 80171de:	681a      	ldr	r2, [r3, #0]
 80171e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	1ad3      	subs	r3, r2, r3
 80171e8:	3b01      	subs	r3, #1
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	db3e      	blt.n	801726c <tcp_receive+0xd04>
 80171ee:	4b1e      	ldr	r3, [pc, #120]	@ (8017268 <tcp_receive+0xd00>)
 80171f0:	681a      	ldr	r2, [r3, #0]
 80171f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	1ad3      	subs	r3, r2, r3
 80171fa:	3301      	adds	r3, #1
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	dc35      	bgt.n	801726c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017200:	4818      	ldr	r0, [pc, #96]	@ (8017264 <tcp_receive+0xcfc>)
 8017202:	f7fd fa8f 	bl	8014724 <tcp_seg_copy>
 8017206:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	2b00      	cmp	r3, #0
 801720c:	f000 8108 	beq.w	8017420 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	685b      	ldr	r3, [r3, #4]
 8017216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017218:	8912      	ldrh	r2, [r2, #8]
 801721a:	441a      	add	r2, r3
 801721c:	4b12      	ldr	r3, [pc, #72]	@ (8017268 <tcp_receive+0xd00>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	1ad3      	subs	r3, r2, r3
 8017222:	2b00      	cmp	r3, #0
 8017224:	dd12      	ble.n	801724c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017226:	4b10      	ldr	r3, [pc, #64]	@ (8017268 <tcp_receive+0xd00>)
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	b29a      	uxth	r2, r3
 801722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801722e:	68db      	ldr	r3, [r3, #12]
 8017230:	685b      	ldr	r3, [r3, #4]
 8017232:	b29b      	uxth	r3, r3
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	b29a      	uxth	r2, r3
 8017238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801723a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801723e:	685a      	ldr	r2, [r3, #4]
 8017240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017242:	891b      	ldrh	r3, [r3, #8]
 8017244:	4619      	mov	r1, r3
 8017246:	4610      	mov	r0, r2
 8017248:	f7fb fc08 	bl	8012a5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801724c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801724e:	69fa      	ldr	r2, [r7, #28]
 8017250:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017254:	69f8      	ldr	r0, [r7, #28]
 8017256:	f7ff f883 	bl	8016360 <tcp_oos_insert_segment>
                  }
                  break;
 801725a:	e0e1      	b.n	8017420 <tcp_receive+0xeb8>
 801725c:	2000f3dc 	.word	0x2000f3dc
 8017260:	2000f3d9 	.word	0x2000f3d9
 8017264:	2000f3ac 	.word	0x2000f3ac
 8017268:	2000f3cc 	.word	0x2000f3cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801726e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	f040 80c5 	bne.w	8017404 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801727a:	4b7f      	ldr	r3, [pc, #508]	@ (8017478 <tcp_receive+0xf10>)
 801727c:	681a      	ldr	r2, [r3, #0]
 801727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017280:	68db      	ldr	r3, [r3, #12]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017286:	2b00      	cmp	r3, #0
 8017288:	f340 80bc 	ble.w	8017404 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801728c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801728e:	68db      	ldr	r3, [r3, #12]
 8017290:	899b      	ldrh	r3, [r3, #12]
 8017292:	b29b      	uxth	r3, r3
 8017294:	4618      	mov	r0, r3
 8017296:	f7fa f93f 	bl	8011518 <lwip_htons>
 801729a:	4603      	mov	r3, r0
 801729c:	b2db      	uxtb	r3, r3
 801729e:	f003 0301 	and.w	r3, r3, #1
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	f040 80be 	bne.w	8017424 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80172a8:	4874      	ldr	r0, [pc, #464]	@ (801747c <tcp_receive+0xf14>)
 80172aa:	f7fd fa3b 	bl	8014724 <tcp_seg_copy>
 80172ae:	4602      	mov	r2, r0
 80172b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80172b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	f000 80b5 	beq.w	8017428 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80172be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80172c6:	8912      	ldrh	r2, [r2, #8]
 80172c8:	441a      	add	r2, r3
 80172ca:	4b6b      	ldr	r3, [pc, #428]	@ (8017478 <tcp_receive+0xf10>)
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	1ad3      	subs	r3, r2, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dd12      	ble.n	80172fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80172d4:	4b68      	ldr	r3, [pc, #416]	@ (8017478 <tcp_receive+0xf10>)
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	b29a      	uxth	r2, r3
 80172da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172dc:	68db      	ldr	r3, [r3, #12]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	1ad3      	subs	r3, r2, r3
 80172e4:	b29a      	uxth	r2, r3
 80172e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80172ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ec:	685a      	ldr	r2, [r3, #4]
 80172ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172f0:	891b      	ldrh	r3, [r3, #8]
 80172f2:	4619      	mov	r1, r3
 80172f4:	4610      	mov	r0, r2
 80172f6:	f7fb fbb1 	bl	8012a5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80172fa:	4b61      	ldr	r3, [pc, #388]	@ (8017480 <tcp_receive+0xf18>)
 80172fc:	881b      	ldrh	r3, [r3, #0]
 80172fe:	461a      	mov	r2, r3
 8017300:	4b5d      	ldr	r3, [pc, #372]	@ (8017478 <tcp_receive+0xf10>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	441a      	add	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801730a:	6879      	ldr	r1, [r7, #4]
 801730c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801730e:	440b      	add	r3, r1
 8017310:	1ad3      	subs	r3, r2, r3
 8017312:	2b00      	cmp	r3, #0
 8017314:	f340 8088 	ble.w	8017428 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	899b      	ldrh	r3, [r3, #12]
 8017320:	b29b      	uxth	r3, r3
 8017322:	4618      	mov	r0, r3
 8017324:	f7fa f8f8 	bl	8011518 <lwip_htons>
 8017328:	4603      	mov	r3, r0
 801732a:	b2db      	uxtb	r3, r3
 801732c:	f003 0301 	and.w	r3, r3, #1
 8017330:	2b00      	cmp	r3, #0
 8017332:	d021      	beq.n	8017378 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	68db      	ldr	r3, [r3, #12]
 801733a:	899b      	ldrh	r3, [r3, #12]
 801733c:	b29b      	uxth	r3, r3
 801733e:	b21b      	sxth	r3, r3
 8017340:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017344:	b21c      	sxth	r4, r3
 8017346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	68db      	ldr	r3, [r3, #12]
 801734c:	899b      	ldrh	r3, [r3, #12]
 801734e:	b29b      	uxth	r3, r3
 8017350:	4618      	mov	r0, r3
 8017352:	f7fa f8e1 	bl	8011518 <lwip_htons>
 8017356:	4603      	mov	r3, r0
 8017358:	b2db      	uxtb	r3, r3
 801735a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801735e:	b29b      	uxth	r3, r3
 8017360:	4618      	mov	r0, r3
 8017362:	f7fa f8d9 	bl	8011518 <lwip_htons>
 8017366:	4603      	mov	r3, r0
 8017368:	b21b      	sxth	r3, r3
 801736a:	4323      	orrs	r3, r4
 801736c:	b21a      	sxth	r2, r3
 801736e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	68db      	ldr	r3, [r3, #12]
 8017374:	b292      	uxth	r2, r2
 8017376:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801737c:	b29a      	uxth	r2, r3
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017382:	4413      	add	r3, r2
 8017384:	b299      	uxth	r1, r3
 8017386:	4b3c      	ldr	r3, [pc, #240]	@ (8017478 <tcp_receive+0xf10>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	b29a      	uxth	r2, r3
 801738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	1a8a      	subs	r2, r1, r2
 8017392:	b292      	uxth	r2, r2
 8017394:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	891b      	ldrh	r3, [r3, #8]
 80173a2:	4619      	mov	r1, r3
 80173a4:	4610      	mov	r0, r2
 80173a6:	f7fb fb59 	bl	8012a5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80173aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	891c      	ldrh	r4, [r3, #8]
 80173b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	68db      	ldr	r3, [r3, #12]
 80173b6:	899b      	ldrh	r3, [r3, #12]
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7fa f8ac 	bl	8011518 <lwip_htons>
 80173c0:	4603      	mov	r3, r0
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	f003 0303 	and.w	r3, r3, #3
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d001      	beq.n	80173d0 <tcp_receive+0xe68>
 80173cc:	2301      	movs	r3, #1
 80173ce:	e000      	b.n	80173d2 <tcp_receive+0xe6a>
 80173d0:	2300      	movs	r3, #0
 80173d2:	4423      	add	r3, r4
 80173d4:	b29a      	uxth	r2, r3
 80173d6:	4b2a      	ldr	r3, [pc, #168]	@ (8017480 <tcp_receive+0xf18>)
 80173d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80173da:	4b29      	ldr	r3, [pc, #164]	@ (8017480 <tcp_receive+0xf18>)
 80173dc:	881b      	ldrh	r3, [r3, #0]
 80173de:	461a      	mov	r2, r3
 80173e0:	4b25      	ldr	r3, [pc, #148]	@ (8017478 <tcp_receive+0xf10>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	441a      	add	r2, r3
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173ea:	6879      	ldr	r1, [r7, #4]
 80173ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80173ee:	440b      	add	r3, r1
 80173f0:	429a      	cmp	r2, r3
 80173f2:	d019      	beq.n	8017428 <tcp_receive+0xec0>
 80173f4:	4b23      	ldr	r3, [pc, #140]	@ (8017484 <tcp_receive+0xf1c>)
 80173f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80173fa:	4923      	ldr	r1, [pc, #140]	@ (8017488 <tcp_receive+0xf20>)
 80173fc:	4823      	ldr	r0, [pc, #140]	@ (801748c <tcp_receive+0xf24>)
 80173fe:	f006 f873 	bl	801d4e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017402:	e011      	b.n	8017428 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	63bb      	str	r3, [r7, #56]	@ 0x38
 801740a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801740c:	2b00      	cmp	r3, #0
 801740e:	f47f aea5 	bne.w	801715c <tcp_receive+0xbf4>
 8017412:	e00a      	b.n	801742a <tcp_receive+0xec2>
                break;
 8017414:	bf00      	nop
 8017416:	e008      	b.n	801742a <tcp_receive+0xec2>
                break;
 8017418:	bf00      	nop
 801741a:	e006      	b.n	801742a <tcp_receive+0xec2>
                  break;
 801741c:	bf00      	nop
 801741e:	e004      	b.n	801742a <tcp_receive+0xec2>
                  break;
 8017420:	bf00      	nop
 8017422:	e002      	b.n	801742a <tcp_receive+0xec2>
                  break;
 8017424:	bf00      	nop
 8017426:	e000      	b.n	801742a <tcp_receive+0xec2>
                break;
 8017428:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f001 fe88 	bl	8019140 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017430:	e003      	b.n	801743a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017432:	6878      	ldr	r0, [r7, #4]
 8017434:	f001 fe84 	bl	8019140 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017438:	e01a      	b.n	8017470 <tcp_receive+0xf08>
 801743a:	e019      	b.n	8017470 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801743c:	4b0e      	ldr	r3, [pc, #56]	@ (8017478 <tcp_receive+0xf10>)
 801743e:	681a      	ldr	r2, [r3, #0]
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017444:	1ad3      	subs	r3, r2, r3
 8017446:	2b00      	cmp	r3, #0
 8017448:	db0a      	blt.n	8017460 <tcp_receive+0xef8>
 801744a:	4b0b      	ldr	r3, [pc, #44]	@ (8017478 <tcp_receive+0xf10>)
 801744c:	681a      	ldr	r2, [r3, #0]
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017452:	6879      	ldr	r1, [r7, #4]
 8017454:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017456:	440b      	add	r3, r1
 8017458:	1ad3      	subs	r3, r2, r3
 801745a:	3301      	adds	r3, #1
 801745c:	2b00      	cmp	r3, #0
 801745e:	dd07      	ble.n	8017470 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	8b5b      	ldrh	r3, [r3, #26]
 8017464:	f043 0302 	orr.w	r3, r3, #2
 8017468:	b29a      	uxth	r2, r3
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801746e:	e7ff      	b.n	8017470 <tcp_receive+0xf08>
 8017470:	bf00      	nop
 8017472:	3750      	adds	r7, #80	@ 0x50
 8017474:	46bd      	mov	sp, r7
 8017476:	bdb0      	pop	{r4, r5, r7, pc}
 8017478:	2000f3cc 	.word	0x2000f3cc
 801747c:	2000f3ac 	.word	0x2000f3ac
 8017480:	2000f3d6 	.word	0x2000f3d6
 8017484:	08021ab4 	.word	0x08021ab4
 8017488:	08021e5c 	.word	0x08021e5c
 801748c:	08021b00 	.word	0x08021b00

08017490 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017490:	b480      	push	{r7}
 8017492:	b083      	sub	sp, #12
 8017494:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017496:	4b15      	ldr	r3, [pc, #84]	@ (80174ec <tcp_get_next_optbyte+0x5c>)
 8017498:	881b      	ldrh	r3, [r3, #0]
 801749a:	1c5a      	adds	r2, r3, #1
 801749c:	b291      	uxth	r1, r2
 801749e:	4a13      	ldr	r2, [pc, #76]	@ (80174ec <tcp_get_next_optbyte+0x5c>)
 80174a0:	8011      	strh	r1, [r2, #0]
 80174a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80174a4:	4b12      	ldr	r3, [pc, #72]	@ (80174f0 <tcp_get_next_optbyte+0x60>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d004      	beq.n	80174b6 <tcp_get_next_optbyte+0x26>
 80174ac:	4b11      	ldr	r3, [pc, #68]	@ (80174f4 <tcp_get_next_optbyte+0x64>)
 80174ae:	881b      	ldrh	r3, [r3, #0]
 80174b0:	88fa      	ldrh	r2, [r7, #6]
 80174b2:	429a      	cmp	r2, r3
 80174b4:	d208      	bcs.n	80174c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80174b6:	4b10      	ldr	r3, [pc, #64]	@ (80174f8 <tcp_get_next_optbyte+0x68>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	3314      	adds	r3, #20
 80174bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80174be:	88fb      	ldrh	r3, [r7, #6]
 80174c0:	683a      	ldr	r2, [r7, #0]
 80174c2:	4413      	add	r3, r2
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	e00b      	b.n	80174e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80174c8:	88fb      	ldrh	r3, [r7, #6]
 80174ca:	b2da      	uxtb	r2, r3
 80174cc:	4b09      	ldr	r3, [pc, #36]	@ (80174f4 <tcp_get_next_optbyte+0x64>)
 80174ce:	881b      	ldrh	r3, [r3, #0]
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	1ad3      	subs	r3, r2, r3
 80174d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80174d6:	4b06      	ldr	r3, [pc, #24]	@ (80174f0 <tcp_get_next_optbyte+0x60>)
 80174d8:	681a      	ldr	r2, [r3, #0]
 80174da:	797b      	ldrb	r3, [r7, #5]
 80174dc:	4413      	add	r3, r2
 80174de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr
 80174ec:	2000f3c8 	.word	0x2000f3c8
 80174f0:	2000f3c4 	.word	0x2000f3c4
 80174f4:	2000f3c2 	.word	0x2000f3c2
 80174f8:	2000f3bc 	.word	0x2000f3bc

080174fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d106      	bne.n	8017518 <tcp_parseopt+0x1c>
 801750a:	4b32      	ldr	r3, [pc, #200]	@ (80175d4 <tcp_parseopt+0xd8>)
 801750c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017510:	4931      	ldr	r1, [pc, #196]	@ (80175d8 <tcp_parseopt+0xdc>)
 8017512:	4832      	ldr	r0, [pc, #200]	@ (80175dc <tcp_parseopt+0xe0>)
 8017514:	f005 ffe8 	bl	801d4e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017518:	4b31      	ldr	r3, [pc, #196]	@ (80175e0 <tcp_parseopt+0xe4>)
 801751a:	881b      	ldrh	r3, [r3, #0]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d056      	beq.n	80175ce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017520:	4b30      	ldr	r3, [pc, #192]	@ (80175e4 <tcp_parseopt+0xe8>)
 8017522:	2200      	movs	r2, #0
 8017524:	801a      	strh	r2, [r3, #0]
 8017526:	e046      	b.n	80175b6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8017528:	f7ff ffb2 	bl	8017490 <tcp_get_next_optbyte>
 801752c:	4603      	mov	r3, r0
 801752e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017530:	7bfb      	ldrb	r3, [r7, #15]
 8017532:	2b02      	cmp	r3, #2
 8017534:	d006      	beq.n	8017544 <tcp_parseopt+0x48>
 8017536:	2b02      	cmp	r3, #2
 8017538:	dc2a      	bgt.n	8017590 <tcp_parseopt+0x94>
 801753a:	2b00      	cmp	r3, #0
 801753c:	d042      	beq.n	80175c4 <tcp_parseopt+0xc8>
 801753e:	2b01      	cmp	r3, #1
 8017540:	d038      	beq.n	80175b4 <tcp_parseopt+0xb8>
 8017542:	e025      	b.n	8017590 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017544:	f7ff ffa4 	bl	8017490 <tcp_get_next_optbyte>
 8017548:	4603      	mov	r3, r0
 801754a:	2b04      	cmp	r3, #4
 801754c:	d13c      	bne.n	80175c8 <tcp_parseopt+0xcc>
 801754e:	4b25      	ldr	r3, [pc, #148]	@ (80175e4 <tcp_parseopt+0xe8>)
 8017550:	881b      	ldrh	r3, [r3, #0]
 8017552:	3301      	adds	r3, #1
 8017554:	4a22      	ldr	r2, [pc, #136]	@ (80175e0 <tcp_parseopt+0xe4>)
 8017556:	8812      	ldrh	r2, [r2, #0]
 8017558:	4293      	cmp	r3, r2
 801755a:	da35      	bge.n	80175c8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801755c:	f7ff ff98 	bl	8017490 <tcp_get_next_optbyte>
 8017560:	4603      	mov	r3, r0
 8017562:	021b      	lsls	r3, r3, #8
 8017564:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017566:	f7ff ff93 	bl	8017490 <tcp_get_next_optbyte>
 801756a:	4603      	mov	r3, r0
 801756c:	461a      	mov	r2, r3
 801756e:	89bb      	ldrh	r3, [r7, #12]
 8017570:	4313      	orrs	r3, r2
 8017572:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017574:	89bb      	ldrh	r3, [r7, #12]
 8017576:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801757a:	d804      	bhi.n	8017586 <tcp_parseopt+0x8a>
 801757c:	89bb      	ldrh	r3, [r7, #12]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d001      	beq.n	8017586 <tcp_parseopt+0x8a>
 8017582:	89ba      	ldrh	r2, [r7, #12]
 8017584:	e001      	b.n	801758a <tcp_parseopt+0x8e>
 8017586:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801758e:	e012      	b.n	80175b6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017590:	f7ff ff7e 	bl	8017490 <tcp_get_next_optbyte>
 8017594:	4603      	mov	r3, r0
 8017596:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017598:	7afb      	ldrb	r3, [r7, #11]
 801759a:	2b01      	cmp	r3, #1
 801759c:	d916      	bls.n	80175cc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801759e:	7afb      	ldrb	r3, [r7, #11]
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	4b10      	ldr	r3, [pc, #64]	@ (80175e4 <tcp_parseopt+0xe8>)
 80175a4:	881b      	ldrh	r3, [r3, #0]
 80175a6:	4413      	add	r3, r2
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	3b02      	subs	r3, #2
 80175ac:	b29a      	uxth	r2, r3
 80175ae:	4b0d      	ldr	r3, [pc, #52]	@ (80175e4 <tcp_parseopt+0xe8>)
 80175b0:	801a      	strh	r2, [r3, #0]
 80175b2:	e000      	b.n	80175b6 <tcp_parseopt+0xba>
          break;
 80175b4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80175b6:	4b0b      	ldr	r3, [pc, #44]	@ (80175e4 <tcp_parseopt+0xe8>)
 80175b8:	881a      	ldrh	r2, [r3, #0]
 80175ba:	4b09      	ldr	r3, [pc, #36]	@ (80175e0 <tcp_parseopt+0xe4>)
 80175bc:	881b      	ldrh	r3, [r3, #0]
 80175be:	429a      	cmp	r2, r3
 80175c0:	d3b2      	bcc.n	8017528 <tcp_parseopt+0x2c>
 80175c2:	e004      	b.n	80175ce <tcp_parseopt+0xd2>
          return;
 80175c4:	bf00      	nop
 80175c6:	e002      	b.n	80175ce <tcp_parseopt+0xd2>
            return;
 80175c8:	bf00      	nop
 80175ca:	e000      	b.n	80175ce <tcp_parseopt+0xd2>
            return;
 80175cc:	bf00      	nop
      }
    }
  }
}
 80175ce:	3710      	adds	r7, #16
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}
 80175d4:	08021ab4 	.word	0x08021ab4
 80175d8:	08021f18 	.word	0x08021f18
 80175dc:	08021b00 	.word	0x08021b00
 80175e0:	2000f3c0 	.word	0x2000f3c0
 80175e4:	2000f3c8 	.word	0x2000f3c8

080175e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80175e8:	b480      	push	{r7}
 80175ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80175ec:	4b05      	ldr	r3, [pc, #20]	@ (8017604 <tcp_trigger_input_pcb_close+0x1c>)
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	f043 0310 	orr.w	r3, r3, #16
 80175f4:	b2da      	uxtb	r2, r3
 80175f6:	4b03      	ldr	r3, [pc, #12]	@ (8017604 <tcp_trigger_input_pcb_close+0x1c>)
 80175f8:	701a      	strb	r2, [r3, #0]
}
 80175fa:	bf00      	nop
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr
 8017604:	2000f3d9 	.word	0x2000f3d9

08017608 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b084      	sub	sp, #16
 801760c:	af00      	add	r7, sp, #0
 801760e:	60f8      	str	r0, [r7, #12]
 8017610:	60b9      	str	r1, [r7, #8]
 8017612:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00a      	beq.n	8017630 <tcp_route+0x28>
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	7a1b      	ldrb	r3, [r3, #8]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d006      	beq.n	8017630 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	7a1b      	ldrb	r3, [r3, #8]
 8017626:	4618      	mov	r0, r3
 8017628:	f7fb f810 	bl	801264c <netif_get_by_index>
 801762c:	4603      	mov	r3, r0
 801762e:	e003      	b.n	8017638 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f003 fe33 	bl	801b29c <ip4_route>
 8017636:	4603      	mov	r3, r0
  }
}
 8017638:	4618      	mov	r0, r3
 801763a:	3710      	adds	r7, #16
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}

08017640 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017640:	b590      	push	{r4, r7, lr}
 8017642:	b087      	sub	sp, #28
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	603b      	str	r3, [r7, #0]
 801764c:	4613      	mov	r3, r2
 801764e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d105      	bne.n	8017662 <tcp_create_segment+0x22>
 8017656:	4b43      	ldr	r3, [pc, #268]	@ (8017764 <tcp_create_segment+0x124>)
 8017658:	22a3      	movs	r2, #163	@ 0xa3
 801765a:	4943      	ldr	r1, [pc, #268]	@ (8017768 <tcp_create_segment+0x128>)
 801765c:	4843      	ldr	r0, [pc, #268]	@ (801776c <tcp_create_segment+0x12c>)
 801765e:	f005 ff43 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d105      	bne.n	8017674 <tcp_create_segment+0x34>
 8017668:	4b3e      	ldr	r3, [pc, #248]	@ (8017764 <tcp_create_segment+0x124>)
 801766a:	22a4      	movs	r2, #164	@ 0xa4
 801766c:	4940      	ldr	r1, [pc, #256]	@ (8017770 <tcp_create_segment+0x130>)
 801766e:	483f      	ldr	r0, [pc, #252]	@ (801776c <tcp_create_segment+0x12c>)
 8017670:	f005 ff3a 	bl	801d4e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017674:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	b2db      	uxtb	r3, r3
 801767c:	f003 0304 	and.w	r3, r3, #4
 8017680:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017682:	2003      	movs	r0, #3
 8017684:	f7fa fc56 	bl	8011f34 <memp_malloc>
 8017688:	6138      	str	r0, [r7, #16]
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d104      	bne.n	801769a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017690:	68b8      	ldr	r0, [r7, #8]
 8017692:	f7fb fb69 	bl	8012d68 <pbuf_free>
    return NULL;
 8017696:	2300      	movs	r3, #0
 8017698:	e060      	b.n	801775c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801769a:	693b      	ldr	r3, [r7, #16]
 801769c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80176a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	2200      	movs	r2, #0
 80176a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	68ba      	ldr	r2, [r7, #8]
 80176ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	891a      	ldrh	r2, [r3, #8]
 80176b2:	7dfb      	ldrb	r3, [r7, #23]
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d205      	bcs.n	80176c6 <tcp_create_segment+0x86>
 80176ba:	4b2a      	ldr	r3, [pc, #168]	@ (8017764 <tcp_create_segment+0x124>)
 80176bc:	22b0      	movs	r2, #176	@ 0xb0
 80176be:	492d      	ldr	r1, [pc, #180]	@ (8017774 <tcp_create_segment+0x134>)
 80176c0:	482a      	ldr	r0, [pc, #168]	@ (801776c <tcp_create_segment+0x12c>)
 80176c2:	f005 ff11 	bl	801d4e8 <iprintf>
  seg->len = p->tot_len - optlen;
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	891a      	ldrh	r2, [r3, #8]
 80176ca:	7dfb      	ldrb	r3, [r7, #23]
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	1ad3      	subs	r3, r2, r3
 80176d0:	b29a      	uxth	r2, r3
 80176d2:	693b      	ldr	r3, [r7, #16]
 80176d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80176d6:	2114      	movs	r1, #20
 80176d8:	68b8      	ldr	r0, [r7, #8]
 80176da:	f7fb faaf 	bl	8012c3c <pbuf_add_header>
 80176de:	4603      	mov	r3, r0
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d004      	beq.n	80176ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80176e4:	6938      	ldr	r0, [r7, #16]
 80176e6:	f7fc ffe6 	bl	80146b6 <tcp_seg_free>
    return NULL;
 80176ea:	2300      	movs	r3, #0
 80176ec:	e036      	b.n	801775c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	685a      	ldr	r2, [r3, #4]
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	8ada      	ldrh	r2, [r3, #22]
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	68dc      	ldr	r4, [r3, #12]
 8017700:	4610      	mov	r0, r2
 8017702:	f7f9 ff09 	bl	8011518 <lwip_htons>
 8017706:	4603      	mov	r3, r0
 8017708:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	8b1a      	ldrh	r2, [r3, #24]
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	68dc      	ldr	r4, [r3, #12]
 8017712:	4610      	mov	r0, r2
 8017714:	f7f9 ff00 	bl	8011518 <lwip_htons>
 8017718:	4603      	mov	r3, r0
 801771a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801771c:	693b      	ldr	r3, [r7, #16]
 801771e:	68dc      	ldr	r4, [r3, #12]
 8017720:	6838      	ldr	r0, [r7, #0]
 8017722:	f7f9 ff0e 	bl	8011542 <lwip_htonl>
 8017726:	4603      	mov	r3, r0
 8017728:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801772a:	7dfb      	ldrb	r3, [r7, #23]
 801772c:	089b      	lsrs	r3, r3, #2
 801772e:	b2db      	uxtb	r3, r3
 8017730:	3305      	adds	r3, #5
 8017732:	b29b      	uxth	r3, r3
 8017734:	031b      	lsls	r3, r3, #12
 8017736:	b29a      	uxth	r2, r3
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	b29b      	uxth	r3, r3
 801773c:	4313      	orrs	r3, r2
 801773e:	b29a      	uxth	r2, r3
 8017740:	693b      	ldr	r3, [r7, #16]
 8017742:	68dc      	ldr	r4, [r3, #12]
 8017744:	4610      	mov	r0, r2
 8017746:	f7f9 fee7 	bl	8011518 <lwip_htons>
 801774a:	4603      	mov	r3, r0
 801774c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	2200      	movs	r2, #0
 8017754:	749a      	strb	r2, [r3, #18]
 8017756:	2200      	movs	r2, #0
 8017758:	74da      	strb	r2, [r3, #19]
  return seg;
 801775a:	693b      	ldr	r3, [r7, #16]
}
 801775c:	4618      	mov	r0, r3
 801775e:	371c      	adds	r7, #28
 8017760:	46bd      	mov	sp, r7
 8017762:	bd90      	pop	{r4, r7, pc}
 8017764:	08021f34 	.word	0x08021f34
 8017768:	08021f68 	.word	0x08021f68
 801776c:	08021f88 	.word	0x08021f88
 8017770:	08021fb0 	.word	0x08021fb0
 8017774:	08021fd4 	.word	0x08021fd4

08017778 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b086      	sub	sp, #24
 801777c:	af00      	add	r7, sp, #0
 801777e:	607b      	str	r3, [r7, #4]
 8017780:	4603      	mov	r3, r0
 8017782:	73fb      	strb	r3, [r7, #15]
 8017784:	460b      	mov	r3, r1
 8017786:	81bb      	strh	r3, [r7, #12]
 8017788:	4613      	mov	r3, r2
 801778a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801778c:	89bb      	ldrh	r3, [r7, #12]
 801778e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d105      	bne.n	80177a2 <tcp_pbuf_prealloc+0x2a>
 8017796:	4b30      	ldr	r3, [pc, #192]	@ (8017858 <tcp_pbuf_prealloc+0xe0>)
 8017798:	22e8      	movs	r2, #232	@ 0xe8
 801779a:	4930      	ldr	r1, [pc, #192]	@ (801785c <tcp_pbuf_prealloc+0xe4>)
 801779c:	4830      	ldr	r0, [pc, #192]	@ (8017860 <tcp_pbuf_prealloc+0xe8>)
 801779e:	f005 fea3 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d105      	bne.n	80177b4 <tcp_pbuf_prealloc+0x3c>
 80177a8:	4b2b      	ldr	r3, [pc, #172]	@ (8017858 <tcp_pbuf_prealloc+0xe0>)
 80177aa:	22e9      	movs	r2, #233	@ 0xe9
 80177ac:	492d      	ldr	r1, [pc, #180]	@ (8017864 <tcp_pbuf_prealloc+0xec>)
 80177ae:	482c      	ldr	r0, [pc, #176]	@ (8017860 <tcp_pbuf_prealloc+0xe8>)
 80177b0:	f005 fe9a 	bl	801d4e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80177b4:	89ba      	ldrh	r2, [r7, #12]
 80177b6:	897b      	ldrh	r3, [r7, #10]
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d221      	bcs.n	8017800 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80177c0:	f003 0302 	and.w	r3, r3, #2
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d111      	bne.n	80177ec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80177c8:	6a3b      	ldr	r3, [r7, #32]
 80177ca:	8b5b      	ldrh	r3, [r3, #26]
 80177cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d115      	bne.n	8017800 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80177d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d007      	beq.n	80177ec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80177dc:	6a3b      	ldr	r3, [r7, #32]
 80177de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d103      	bne.n	80177ec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80177e4:	6a3b      	ldr	r3, [r7, #32]
 80177e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d009      	beq.n	8017800 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80177ec:	89bb      	ldrh	r3, [r7, #12]
 80177ee:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80177f2:	f023 0203 	bic.w	r2, r3, #3
 80177f6:	897b      	ldrh	r3, [r7, #10]
 80177f8:	4293      	cmp	r3, r2
 80177fa:	bf28      	it	cs
 80177fc:	4613      	movcs	r3, r2
 80177fe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017800:	8af9      	ldrh	r1, [r7, #22]
 8017802:	7bfb      	ldrb	r3, [r7, #15]
 8017804:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017808:	4618      	mov	r0, r3
 801780a:	f7fa ffc9 	bl	80127a0 <pbuf_alloc>
 801780e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d101      	bne.n	801781a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017816:	2300      	movs	r3, #0
 8017818:	e019      	b.n	801784e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801781a:	693b      	ldr	r3, [r7, #16]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d006      	beq.n	8017830 <tcp_pbuf_prealloc+0xb8>
 8017822:	4b0d      	ldr	r3, [pc, #52]	@ (8017858 <tcp_pbuf_prealloc+0xe0>)
 8017824:	f240 120b 	movw	r2, #267	@ 0x10b
 8017828:	490f      	ldr	r1, [pc, #60]	@ (8017868 <tcp_pbuf_prealloc+0xf0>)
 801782a:	480d      	ldr	r0, [pc, #52]	@ (8017860 <tcp_pbuf_prealloc+0xe8>)
 801782c:	f005 fe5c 	bl	801d4e8 <iprintf>
  *oversize = p->len - length;
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	895a      	ldrh	r2, [r3, #10]
 8017834:	89bb      	ldrh	r3, [r7, #12]
 8017836:	1ad3      	subs	r3, r2, r3
 8017838:	b29a      	uxth	r2, r3
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	89ba      	ldrh	r2, [r7, #12]
 8017842:	811a      	strh	r2, [r3, #8]
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	891a      	ldrh	r2, [r3, #8]
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	815a      	strh	r2, [r3, #10]
  return p;
 801784c:	693b      	ldr	r3, [r7, #16]
}
 801784e:	4618      	mov	r0, r3
 8017850:	3718      	adds	r7, #24
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	08021f34 	.word	0x08021f34
 801785c:	08021fec 	.word	0x08021fec
 8017860:	08021f88 	.word	0x08021f88
 8017864:	08022010 	.word	0x08022010
 8017868:	08022030 	.word	0x08022030

0801786c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	460b      	mov	r3, r1
 8017876:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d106      	bne.n	801788c <tcp_write_checks+0x20>
 801787e:	4b33      	ldr	r3, [pc, #204]	@ (801794c <tcp_write_checks+0xe0>)
 8017880:	f240 1233 	movw	r2, #307	@ 0x133
 8017884:	4932      	ldr	r1, [pc, #200]	@ (8017950 <tcp_write_checks+0xe4>)
 8017886:	4833      	ldr	r0, [pc, #204]	@ (8017954 <tcp_write_checks+0xe8>)
 8017888:	f005 fe2e 	bl	801d4e8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	7d1b      	ldrb	r3, [r3, #20]
 8017890:	2b04      	cmp	r3, #4
 8017892:	d00e      	beq.n	80178b2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017898:	2b07      	cmp	r3, #7
 801789a:	d00a      	beq.n	80178b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80178a0:	2b02      	cmp	r3, #2
 80178a2:	d006      	beq.n	80178b2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80178a8:	2b03      	cmp	r3, #3
 80178aa:	d002      	beq.n	80178b2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80178ac:	f06f 030a 	mvn.w	r3, #10
 80178b0:	e048      	b.n	8017944 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80178b2:	887b      	ldrh	r3, [r7, #2]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d101      	bne.n	80178bc <tcp_write_checks+0x50>
    return ERR_OK;
 80178b8:	2300      	movs	r3, #0
 80178ba:	e043      	b.n	8017944 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80178c2:	887a      	ldrh	r2, [r7, #2]
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d909      	bls.n	80178dc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	8b5b      	ldrh	r3, [r3, #26]
 80178cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178d0:	b29a      	uxth	r2, r3
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178d6:	f04f 33ff 	mov.w	r3, #4294967295
 80178da:	e033      	b.n	8017944 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80178e2:	2b08      	cmp	r3, #8
 80178e4:	d909      	bls.n	80178fa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	8b5b      	ldrh	r3, [r3, #26]
 80178ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178ee:	b29a      	uxth	r2, r3
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80178f4:	f04f 33ff 	mov.w	r3, #4294967295
 80178f8:	e024      	b.n	8017944 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017900:	2b00      	cmp	r3, #0
 8017902:	d00f      	beq.n	8017924 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017908:	2b00      	cmp	r3, #0
 801790a:	d11a      	bne.n	8017942 <tcp_write_checks+0xd6>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017910:	2b00      	cmp	r3, #0
 8017912:	d116      	bne.n	8017942 <tcp_write_checks+0xd6>
 8017914:	4b0d      	ldr	r3, [pc, #52]	@ (801794c <tcp_write_checks+0xe0>)
 8017916:	f240 1255 	movw	r2, #341	@ 0x155
 801791a:	490f      	ldr	r1, [pc, #60]	@ (8017958 <tcp_write_checks+0xec>)
 801791c:	480d      	ldr	r0, [pc, #52]	@ (8017954 <tcp_write_checks+0xe8>)
 801791e:	f005 fde3 	bl	801d4e8 <iprintf>
 8017922:	e00e      	b.n	8017942 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017928:	2b00      	cmp	r3, #0
 801792a:	d103      	bne.n	8017934 <tcp_write_checks+0xc8>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017930:	2b00      	cmp	r3, #0
 8017932:	d006      	beq.n	8017942 <tcp_write_checks+0xd6>
 8017934:	4b05      	ldr	r3, [pc, #20]	@ (801794c <tcp_write_checks+0xe0>)
 8017936:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801793a:	4908      	ldr	r1, [pc, #32]	@ (801795c <tcp_write_checks+0xf0>)
 801793c:	4805      	ldr	r0, [pc, #20]	@ (8017954 <tcp_write_checks+0xe8>)
 801793e:	f005 fdd3 	bl	801d4e8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3708      	adds	r7, #8
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	08021f34 	.word	0x08021f34
 8017950:	08022044 	.word	0x08022044
 8017954:	08021f88 	.word	0x08021f88
 8017958:	08022064 	.word	0x08022064
 801795c:	080220a0 	.word	0x080220a0

08017960 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017960:	b590      	push	{r4, r7, lr}
 8017962:	b09b      	sub	sp, #108	@ 0x6c
 8017964:	af04      	add	r7, sp, #16
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	60b9      	str	r1, [r7, #8]
 801796a:	4611      	mov	r1, r2
 801796c:	461a      	mov	r2, r3
 801796e:	460b      	mov	r3, r1
 8017970:	80fb      	strh	r3, [r7, #6]
 8017972:	4613      	mov	r3, r2
 8017974:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017976:	2300      	movs	r3, #0
 8017978:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801797a:	2300      	movs	r3, #0
 801797c:	653b      	str	r3, [r7, #80]	@ 0x50
 801797e:	2300      	movs	r3, #0
 8017980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017982:	2300      	movs	r3, #0
 8017984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017986:	2300      	movs	r3, #0
 8017988:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801798a:	2300      	movs	r3, #0
 801798c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017990:	2300      	movs	r3, #0
 8017992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017996:	2300      	movs	r3, #0
 8017998:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801799a:	2300      	movs	r3, #0
 801799c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801799e:	2300      	movs	r3, #0
 80179a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d109      	bne.n	80179bc <tcp_write+0x5c>
 80179a8:	4ba4      	ldr	r3, [pc, #656]	@ (8017c3c <tcp_write+0x2dc>)
 80179aa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80179ae:	49a4      	ldr	r1, [pc, #656]	@ (8017c40 <tcp_write+0x2e0>)
 80179b0:	48a4      	ldr	r0, [pc, #656]	@ (8017c44 <tcp_write+0x2e4>)
 80179b2:	f005 fd99 	bl	801d4e8 <iprintf>
 80179b6:	f06f 030f 	mvn.w	r3, #15
 80179ba:	e32a      	b.n	8018012 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80179c2:	085b      	lsrs	r3, r3, #1
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179ca:	4293      	cmp	r3, r2
 80179cc:	bf28      	it	cs
 80179ce:	4613      	movcs	r3, r2
 80179d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80179d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d102      	bne.n	80179de <tcp_write+0x7e>
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179dc:	e000      	b.n	80179e0 <tcp_write+0x80>
 80179de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80179e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d109      	bne.n	80179fc <tcp_write+0x9c>
 80179e8:	4b94      	ldr	r3, [pc, #592]	@ (8017c3c <tcp_write+0x2dc>)
 80179ea:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80179ee:	4996      	ldr	r1, [pc, #600]	@ (8017c48 <tcp_write+0x2e8>)
 80179f0:	4894      	ldr	r0, [pc, #592]	@ (8017c44 <tcp_write+0x2e4>)
 80179f2:	f005 fd79 	bl	801d4e8 <iprintf>
 80179f6:	f06f 030f 	mvn.w	r3, #15
 80179fa:	e30a      	b.n	8018012 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80179fc:	88fb      	ldrh	r3, [r7, #6]
 80179fe:	4619      	mov	r1, r3
 8017a00:	68f8      	ldr	r0, [r7, #12]
 8017a02:	f7ff ff33 	bl	801786c <tcp_write_checks>
 8017a06:	4603      	mov	r3, r0
 8017a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8017a0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d002      	beq.n	8017a1a <tcp_write+0xba>
    return err;
 8017a14:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017a18:	e2fb      	b.n	8018012 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a24:	2300      	movs	r3, #0
 8017a26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f000 80f6 	beq.w	8017c20 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8017a3a:	e002      	b.n	8017a42 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d1f8      	bne.n	8017a3c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a4c:	7a9b      	ldrb	r3, [r3, #10]
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	f003 0304 	and.w	r3, r3, #4
 8017a56:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017a58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a5c:	891b      	ldrh	r3, [r3, #8]
 8017a5e:	4619      	mov	r1, r3
 8017a60:	8c3b      	ldrh	r3, [r7, #32]
 8017a62:	440b      	add	r3, r1
 8017a64:	429a      	cmp	r2, r3
 8017a66:	da06      	bge.n	8017a76 <tcp_write+0x116>
 8017a68:	4b74      	ldr	r3, [pc, #464]	@ (8017c3c <tcp_write+0x2dc>)
 8017a6a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017a6e:	4977      	ldr	r1, [pc, #476]	@ (8017c4c <tcp_write+0x2ec>)
 8017a70:	4874      	ldr	r0, [pc, #464]	@ (8017c44 <tcp_write+0x2e4>)
 8017a72:	f005 fd39 	bl	801d4e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a78:	891a      	ldrh	r2, [r3, #8]
 8017a7a:	8c3b      	ldrh	r3, [r7, #32]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	b29b      	uxth	r3, r3
 8017a80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017a82:	1ad3      	subs	r3, r2, r3
 8017a84:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017a8c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017a8e:	8a7b      	ldrh	r3, [r7, #18]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d026      	beq.n	8017ae2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017a94:	8a7b      	ldrh	r3, [r7, #18]
 8017a96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d206      	bcs.n	8017aaa <tcp_write+0x14a>
 8017a9c:	4b67      	ldr	r3, [pc, #412]	@ (8017c3c <tcp_write+0x2dc>)
 8017a9e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017aa2:	496b      	ldr	r1, [pc, #428]	@ (8017c50 <tcp_write+0x2f0>)
 8017aa4:	4867      	ldr	r0, [pc, #412]	@ (8017c44 <tcp_write+0x2e4>)
 8017aa6:	f005 fd1f 	bl	801d4e8 <iprintf>
      seg = last_unsent;
 8017aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017aae:	8a7b      	ldrh	r3, [r7, #18]
 8017ab0:	88fa      	ldrh	r2, [r7, #6]
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	bf28      	it	cs
 8017ab6:	4613      	movcs	r3, r2
 8017ab8:	b29b      	uxth	r3, r3
 8017aba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017abc:	4293      	cmp	r3, r2
 8017abe:	bf28      	it	cs
 8017ac0:	4613      	movcs	r3, r2
 8017ac2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ac8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017aca:	4413      	add	r3, r2
 8017acc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017ad0:	8a7a      	ldrh	r2, [r7, #18]
 8017ad2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ad4:	1ad3      	subs	r3, r2, r3
 8017ad6:	b29b      	uxth	r3, r3
 8017ad8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017ada:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017adc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ade:	1ad3      	subs	r3, r2, r3
 8017ae0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017ae2:	8a7b      	ldrh	r3, [r7, #18]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d00b      	beq.n	8017b00 <tcp_write+0x1a0>
 8017ae8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017aec:	88fb      	ldrh	r3, [r7, #6]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d006      	beq.n	8017b00 <tcp_write+0x1a0>
 8017af2:	4b52      	ldr	r3, [pc, #328]	@ (8017c3c <tcp_write+0x2dc>)
 8017af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017af8:	4956      	ldr	r1, [pc, #344]	@ (8017c54 <tcp_write+0x2f4>)
 8017afa:	4852      	ldr	r0, [pc, #328]	@ (8017c44 <tcp_write+0x2e4>)
 8017afc:	f005 fcf4 	bl	801d4e8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b04:	88fb      	ldrh	r3, [r7, #6]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	f080 8167 	bcs.w	8017dda <tcp_write+0x47a>
 8017b0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	f000 8163 	beq.w	8017dda <tcp_write+0x47a>
 8017b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b16:	891b      	ldrh	r3, [r3, #8]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	f000 815e 	beq.w	8017dda <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017b1e:	88fa      	ldrh	r2, [r7, #6]
 8017b20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b24:	1ad2      	subs	r2, r2, r3
 8017b26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	bfa8      	it	ge
 8017b2c:	4613      	movge	r3, r2
 8017b2e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b32:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b34:	797b      	ldrb	r3, [r7, #5]
 8017b36:	f003 0301 	and.w	r3, r3, #1
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d027      	beq.n	8017b8e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017b3e:	f107 0012 	add.w	r0, r7, #18
 8017b42:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017b44:	8bf9      	ldrh	r1, [r7, #30]
 8017b46:	2301      	movs	r3, #1
 8017b48:	9302      	str	r3, [sp, #8]
 8017b4a:	797b      	ldrb	r3, [r7, #5]
 8017b4c:	9301      	str	r3, [sp, #4]
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	9300      	str	r3, [sp, #0]
 8017b52:	4603      	mov	r3, r0
 8017b54:	2000      	movs	r0, #0
 8017b56:	f7ff fe0f 	bl	8017778 <tcp_pbuf_prealloc>
 8017b5a:	6578      	str	r0, [r7, #84]	@ 0x54
 8017b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	f000 8225 	beq.w	8017fae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b66:	6858      	ldr	r0, [r3, #4]
 8017b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b6c:	68ba      	ldr	r2, [r7, #8]
 8017b6e:	4413      	add	r3, r2
 8017b70:	8bfa      	ldrh	r2, [r7, #30]
 8017b72:	4619      	mov	r1, r3
 8017b74:	f005 fe45 	bl	801d802 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017b78:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017b7a:	f7fb f983 	bl	8012e84 <pbuf_clen>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	461a      	mov	r2, r3
 8017b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017b86:	4413      	add	r3, r2
 8017b88:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017b8c:	e041      	b.n	8017c12 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b94:	e002      	b.n	8017b9c <tcp_write+0x23c>
 8017b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d1f8      	bne.n	8017b96 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ba6:	7b1b      	ldrb	r3, [r3, #12]
 8017ba8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d115      	bne.n	8017bdc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017bb6:	8952      	ldrh	r2, [r2, #10]
 8017bb8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017bba:	68ba      	ldr	r2, [r7, #8]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d10d      	bne.n	8017bdc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017bc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d006      	beq.n	8017bd6 <tcp_write+0x276>
 8017bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8017c3c <tcp_write+0x2dc>)
 8017bca:	f240 2231 	movw	r2, #561	@ 0x231
 8017bce:	4922      	ldr	r1, [pc, #136]	@ (8017c58 <tcp_write+0x2f8>)
 8017bd0:	481c      	ldr	r0, [pc, #112]	@ (8017c44 <tcp_write+0x2e4>)
 8017bd2:	f005 fc89 	bl	801d4e8 <iprintf>
          extendlen = seglen;
 8017bd6:	8bfb      	ldrh	r3, [r7, #30]
 8017bd8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017bda:	e01a      	b.n	8017c12 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017bdc:	8bfb      	ldrh	r3, [r7, #30]
 8017bde:	2201      	movs	r2, #1
 8017be0:	4619      	mov	r1, r3
 8017be2:	2000      	movs	r0, #0
 8017be4:	f7fa fddc 	bl	80127a0 <pbuf_alloc>
 8017be8:	6578      	str	r0, [r7, #84]	@ 0x54
 8017bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	f000 81e0 	beq.w	8017fb2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017bf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017bf6:	68ba      	ldr	r2, [r7, #8]
 8017bf8:	441a      	add	r2, r3
 8017bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bfc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017bfe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017c00:	f7fb f940 	bl	8012e84 <pbuf_clen>
 8017c04:	4603      	mov	r3, r0
 8017c06:	461a      	mov	r2, r3
 8017c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017c0c:	4413      	add	r3, r2
 8017c0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017c12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c16:	8bfb      	ldrh	r3, [r7, #30]
 8017c18:	4413      	add	r3, r2
 8017c1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017c1e:	e0dc      	b.n	8017dda <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	f000 80d7 	beq.w	8017dda <tcp_write+0x47a>
 8017c2c:	4b03      	ldr	r3, [pc, #12]	@ (8017c3c <tcp_write+0x2dc>)
 8017c2e:	f240 224a 	movw	r2, #586	@ 0x24a
 8017c32:	490a      	ldr	r1, [pc, #40]	@ (8017c5c <tcp_write+0x2fc>)
 8017c34:	4803      	ldr	r0, [pc, #12]	@ (8017c44 <tcp_write+0x2e4>)
 8017c36:	f005 fc57 	bl	801d4e8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017c3a:	e0ce      	b.n	8017dda <tcp_write+0x47a>
 8017c3c:	08021f34 	.word	0x08021f34
 8017c40:	080220d4 	.word	0x080220d4
 8017c44:	08021f88 	.word	0x08021f88
 8017c48:	080220ec 	.word	0x080220ec
 8017c4c:	08022120 	.word	0x08022120
 8017c50:	08022138 	.word	0x08022138
 8017c54:	08022158 	.word	0x08022158
 8017c58:	08022178 	.word	0x08022178
 8017c5c:	080221a4 	.word	0x080221a4
    struct pbuf *p;
    u16_t left = len - pos;
 8017c60:	88fa      	ldrh	r2, [r7, #6]
 8017c62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c66:	1ad3      	subs	r3, r2, r3
 8017c68:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017c6a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017c72:	1ad3      	subs	r3, r2, r3
 8017c74:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017c76:	8b7a      	ldrh	r2, [r7, #26]
 8017c78:	8bbb      	ldrh	r3, [r7, #28]
 8017c7a:	4293      	cmp	r3, r2
 8017c7c:	bf28      	it	cs
 8017c7e:	4613      	movcs	r3, r2
 8017c80:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017c82:	797b      	ldrb	r3, [r7, #5]
 8017c84:	f003 0301 	and.w	r3, r3, #1
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d036      	beq.n	8017cfa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	8b3b      	ldrh	r3, [r7, #24]
 8017c94:	4413      	add	r3, r2
 8017c96:	b299      	uxth	r1, r3
 8017c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	bf0c      	ite	eq
 8017c9e:	2301      	moveq	r3, #1
 8017ca0:	2300      	movne	r3, #0
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	f107 0012 	add.w	r0, r7, #18
 8017ca8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017caa:	9302      	str	r3, [sp, #8]
 8017cac:	797b      	ldrb	r3, [r7, #5]
 8017cae:	9301      	str	r3, [sp, #4]
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	9300      	str	r3, [sp, #0]
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	2036      	movs	r0, #54	@ 0x36
 8017cb8:	f7ff fd5e 	bl	8017778 <tcp_pbuf_prealloc>
 8017cbc:	6338      	str	r0, [r7, #48]	@ 0x30
 8017cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f000 8178 	beq.w	8017fb6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017cc8:	895b      	ldrh	r3, [r3, #10]
 8017cca:	8b3a      	ldrh	r2, [r7, #24]
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d906      	bls.n	8017cde <tcp_write+0x37e>
 8017cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8017f04 <tcp_write+0x5a4>)
 8017cd2:	f240 2266 	movw	r2, #614	@ 0x266
 8017cd6:	498c      	ldr	r1, [pc, #560]	@ (8017f08 <tcp_write+0x5a8>)
 8017cd8:	488c      	ldr	r0, [pc, #560]	@ (8017f0c <tcp_write+0x5ac>)
 8017cda:	f005 fc05 	bl	801d4e8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ce0:	685a      	ldr	r2, [r3, #4]
 8017ce2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017ce6:	18d0      	adds	r0, r2, r3
 8017ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017cec:	68ba      	ldr	r2, [r7, #8]
 8017cee:	4413      	add	r3, r2
 8017cf0:	8b3a      	ldrh	r2, [r7, #24]
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	f005 fd85 	bl	801d802 <memcpy>
 8017cf8:	e02f      	b.n	8017d5a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017cfa:	8a7b      	ldrh	r3, [r7, #18]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d006      	beq.n	8017d0e <tcp_write+0x3ae>
 8017d00:	4b80      	ldr	r3, [pc, #512]	@ (8017f04 <tcp_write+0x5a4>)
 8017d02:	f240 2271 	movw	r2, #625	@ 0x271
 8017d06:	4982      	ldr	r1, [pc, #520]	@ (8017f10 <tcp_write+0x5b0>)
 8017d08:	4880      	ldr	r0, [pc, #512]	@ (8017f0c <tcp_write+0x5ac>)
 8017d0a:	f005 fbed 	bl	801d4e8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017d0e:	8b3b      	ldrh	r3, [r7, #24]
 8017d10:	2201      	movs	r2, #1
 8017d12:	4619      	mov	r1, r3
 8017d14:	2036      	movs	r0, #54	@ 0x36
 8017d16:	f7fa fd43 	bl	80127a0 <pbuf_alloc>
 8017d1a:	6178      	str	r0, [r7, #20]
 8017d1c:	697b      	ldr	r3, [r7, #20]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	f000 814b 	beq.w	8017fba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017d24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d28:	68ba      	ldr	r2, [r7, #8]
 8017d2a:	441a      	add	r2, r3
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017d30:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017d34:	b29b      	uxth	r3, r3
 8017d36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	2036      	movs	r0, #54	@ 0x36
 8017d3e:	f7fa fd2f 	bl	80127a0 <pbuf_alloc>
 8017d42:	6338      	str	r0, [r7, #48]	@ 0x30
 8017d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d103      	bne.n	8017d52 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017d4a:	6978      	ldr	r0, [r7, #20]
 8017d4c:	f7fb f80c 	bl	8012d68 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017d50:	e136      	b.n	8017fc0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017d52:	6979      	ldr	r1, [r7, #20]
 8017d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d56:	f7fb f8d5 	bl	8012f04 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d5c:	f7fb f892 	bl	8012e84 <pbuf_clen>
 8017d60:	4603      	mov	r3, r0
 8017d62:	461a      	mov	r2, r3
 8017d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d68:	4413      	add	r3, r2
 8017d6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017d6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d72:	2b09      	cmp	r3, #9
 8017d74:	d903      	bls.n	8017d7e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017d76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d78:	f7fa fff6 	bl	8012d68 <pbuf_free>
      goto memerr;
 8017d7c:	e120      	b.n	8017fc0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017d82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d86:	441a      	add	r2, r3
 8017d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d8c:	9300      	str	r3, [sp, #0]
 8017d8e:	4613      	mov	r3, r2
 8017d90:	2200      	movs	r2, #0
 8017d92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	f7ff fc53 	bl	8017640 <tcp_create_segment>
 8017d9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	f000 810d 	beq.w	8017fbe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d102      	bne.n	8017db0 <tcp_write+0x450>
      queue = seg;
 8017daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8017dae:	e00c      	b.n	8017dca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d106      	bne.n	8017dc4 <tcp_write+0x464>
 8017db6:	4b53      	ldr	r3, [pc, #332]	@ (8017f04 <tcp_write+0x5a4>)
 8017db8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017dbc:	4955      	ldr	r1, [pc, #340]	@ (8017f14 <tcp_write+0x5b4>)
 8017dbe:	4853      	ldr	r0, [pc, #332]	@ (8017f0c <tcp_write+0x5ac>)
 8017dc0:	f005 fb92 	bl	801d4e8 <iprintf>
      prev_seg->next = seg;
 8017dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017dc8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dcc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017dce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017dd2:	8b3b      	ldrh	r3, [r7, #24]
 8017dd4:	4413      	add	r3, r2
 8017dd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017dda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017dde:	88fb      	ldrh	r3, [r7, #6]
 8017de0:	429a      	cmp	r2, r3
 8017de2:	f4ff af3d 	bcc.w	8017c60 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017de6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d02c      	beq.n	8017e46 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017df2:	e01e      	b.n	8017e32 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017df6:	891a      	ldrh	r2, [r3, #8]
 8017df8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017dfa:	4413      	add	r3, r2
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e00:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d110      	bne.n	8017e2c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e0c:	685b      	ldr	r3, [r3, #4]
 8017e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e10:	8952      	ldrh	r2, [r2, #10]
 8017e12:	4413      	add	r3, r2
 8017e14:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017e16:	68b9      	ldr	r1, [r7, #8]
 8017e18:	4618      	mov	r0, r3
 8017e1a:	f005 fcf2 	bl	801d802 <memcpy>
        p->len += oversize_used;
 8017e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e20:	895a      	ldrh	r2, [r3, #10]
 8017e22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017e24:	4413      	add	r3, r2
 8017e26:	b29a      	uxth	r2, r3
 8017e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e2a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d1dd      	bne.n	8017df4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e3a:	891a      	ldrh	r2, [r3, #8]
 8017e3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017e3e:	4413      	add	r3, r2
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e44:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017e46:	8a7a      	ldrh	r2, [r7, #18]
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d018      	beq.n	8017e86 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d106      	bne.n	8017e68 <tcp_write+0x508>
 8017e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8017f04 <tcp_write+0x5a4>)
 8017e5c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8017e60:	492d      	ldr	r1, [pc, #180]	@ (8017f18 <tcp_write+0x5b8>)
 8017e62:	482a      	ldr	r0, [pc, #168]	@ (8017f0c <tcp_write+0x5ac>)
 8017e64:	f005 fb40 	bl	801d4e8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e6a:	685b      	ldr	r3, [r3, #4]
 8017e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7fb f848 	bl	8012f04 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e76:	891a      	ldrh	r2, [r3, #8]
 8017e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e7a:	891b      	ldrh	r3, [r3, #8]
 8017e7c:	4413      	add	r3, r2
 8017e7e:	b29a      	uxth	r2, r3
 8017e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e82:	811a      	strh	r2, [r3, #8]
 8017e84:	e037      	b.n	8017ef6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017e86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d034      	beq.n	8017ef6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d003      	beq.n	8017e9a <tcp_write+0x53a>
 8017e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d106      	bne.n	8017ea8 <tcp_write+0x548>
 8017e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8017f04 <tcp_write+0x5a4>)
 8017e9c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8017ea0:	491e      	ldr	r1, [pc, #120]	@ (8017f1c <tcp_write+0x5bc>)
 8017ea2:	481a      	ldr	r0, [pc, #104]	@ (8017f0c <tcp_write+0x5ac>)
 8017ea4:	f005 fb20 	bl	801d4e8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017eaa:	685b      	ldr	r3, [r3, #4]
 8017eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017eae:	e009      	b.n	8017ec4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eb2:	891a      	ldrh	r2, [r3, #8]
 8017eb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017eb6:	4413      	add	r3, r2
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ebc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d1f1      	bne.n	8017eb0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ece:	891a      	ldrh	r2, [r3, #8]
 8017ed0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ed2:	4413      	add	r3, r2
 8017ed4:	b29a      	uxth	r2, r3
 8017ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ed8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017edc:	895a      	ldrh	r2, [r3, #10]
 8017ede:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ee0:	4413      	add	r3, r2
 8017ee2:	b29a      	uxth	r2, r3
 8017ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ee6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017eea:	891a      	ldrh	r2, [r3, #8]
 8017eec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017eee:	4413      	add	r3, r2
 8017ef0:	b29a      	uxth	r2, r3
 8017ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ef4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d111      	bne.n	8017f20 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017f00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017f02:	e010      	b.n	8017f26 <tcp_write+0x5c6>
 8017f04:	08021f34 	.word	0x08021f34
 8017f08:	080221d4 	.word	0x080221d4
 8017f0c:	08021f88 	.word	0x08021f88
 8017f10:	08022214 	.word	0x08022214
 8017f14:	08022224 	.word	0x08022224
 8017f18:	08022238 	.word	0x08022238
 8017f1c:	08022270 	.word	0x08022270
  } else {
    last_unsent->next = queue;
 8017f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017f24:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017f2a:	88fb      	ldrh	r3, [r7, #6]
 8017f2c:	441a      	add	r2, r3
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017f38:	88fb      	ldrh	r3, [r7, #6]
 8017f3a:	1ad3      	subs	r3, r2, r3
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017f4a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d00e      	beq.n	8017f76 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d10a      	bne.n	8017f76 <tcp_write+0x616>
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d106      	bne.n	8017f76 <tcp_write+0x616>
 8017f68:	4b2c      	ldr	r3, [pc, #176]	@ (801801c <tcp_write+0x6bc>)
 8017f6a:	f240 3212 	movw	r2, #786	@ 0x312
 8017f6e:	492c      	ldr	r1, [pc, #176]	@ (8018020 <tcp_write+0x6c0>)
 8017f70:	482c      	ldr	r0, [pc, #176]	@ (8018024 <tcp_write+0x6c4>)
 8017f72:	f005 fab9 	bl	801d4e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d016      	beq.n	8017faa <tcp_write+0x64a>
 8017f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d012      	beq.n	8017faa <tcp_write+0x64a>
 8017f84:	797b      	ldrb	r3, [r7, #5]
 8017f86:	f003 0302 	and.w	r3, r3, #2
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d10d      	bne.n	8017faa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	899b      	ldrh	r3, [r3, #12]
 8017f94:	b29c      	uxth	r4, r3
 8017f96:	2008      	movs	r0, #8
 8017f98:	f7f9 fabe 	bl	8011518 <lwip_htons>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	4322      	orrs	r2, r4
 8017fa6:	b292      	uxth	r2, r2
 8017fa8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017faa:	2300      	movs	r3, #0
 8017fac:	e031      	b.n	8018012 <tcp_write+0x6b2>
          goto memerr;
 8017fae:	bf00      	nop
 8017fb0:	e006      	b.n	8017fc0 <tcp_write+0x660>
            goto memerr;
 8017fb2:	bf00      	nop
 8017fb4:	e004      	b.n	8017fc0 <tcp_write+0x660>
        goto memerr;
 8017fb6:	bf00      	nop
 8017fb8:	e002      	b.n	8017fc0 <tcp_write+0x660>
        goto memerr;
 8017fba:	bf00      	nop
 8017fbc:	e000      	b.n	8017fc0 <tcp_write+0x660>
      goto memerr;
 8017fbe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	8b5b      	ldrh	r3, [r3, #26]
 8017fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017fc8:	b29a      	uxth	r2, r3
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d002      	beq.n	8017fda <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017fd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017fd6:	f7fa fec7 	bl	8012d68 <pbuf_free>
  }
  if (queue != NULL) {
 8017fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d002      	beq.n	8017fe6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017fe0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017fe2:	f7fc fb53 	bl	801468c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d00e      	beq.n	801800e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d10a      	bne.n	801800e <tcp_write+0x6ae>
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d106      	bne.n	801800e <tcp_write+0x6ae>
 8018000:	4b06      	ldr	r3, [pc, #24]	@ (801801c <tcp_write+0x6bc>)
 8018002:	f240 3227 	movw	r2, #807	@ 0x327
 8018006:	4906      	ldr	r1, [pc, #24]	@ (8018020 <tcp_write+0x6c0>)
 8018008:	4806      	ldr	r0, [pc, #24]	@ (8018024 <tcp_write+0x6c4>)
 801800a:	f005 fa6d 	bl	801d4e8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801800e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018012:	4618      	mov	r0, r3
 8018014:	375c      	adds	r7, #92	@ 0x5c
 8018016:	46bd      	mov	sp, r7
 8018018:	bd90      	pop	{r4, r7, pc}
 801801a:	bf00      	nop
 801801c:	08021f34 	.word	0x08021f34
 8018020:	080222a8 	.word	0x080222a8
 8018024:	08021f88 	.word	0x08021f88

08018028 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018028:	b590      	push	{r4, r7, lr}
 801802a:	b08b      	sub	sp, #44	@ 0x2c
 801802c:	af02      	add	r7, sp, #8
 801802e:	6078      	str	r0, [r7, #4]
 8018030:	460b      	mov	r3, r1
 8018032:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018034:	2300      	movs	r3, #0
 8018036:	61fb      	str	r3, [r7, #28]
 8018038:	2300      	movs	r3, #0
 801803a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801803c:	2300      	movs	r3, #0
 801803e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <tcp_split_unsent_seg+0x2c>
 8018046:	4b95      	ldr	r3, [pc, #596]	@ (801829c <tcp_split_unsent_seg+0x274>)
 8018048:	f240 324b 	movw	r2, #843	@ 0x34b
 801804c:	4994      	ldr	r1, [pc, #592]	@ (80182a0 <tcp_split_unsent_seg+0x278>)
 801804e:	4895      	ldr	r0, [pc, #596]	@ (80182a4 <tcp_split_unsent_seg+0x27c>)
 8018050:	f005 fa4a 	bl	801d4e8 <iprintf>

  useg = pcb->unsent;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018058:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801805a:	697b      	ldr	r3, [r7, #20]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d102      	bne.n	8018066 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018060:	f04f 33ff 	mov.w	r3, #4294967295
 8018064:	e116      	b.n	8018294 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018066:	887b      	ldrh	r3, [r7, #2]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d109      	bne.n	8018080 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801806c:	4b8b      	ldr	r3, [pc, #556]	@ (801829c <tcp_split_unsent_seg+0x274>)
 801806e:	f240 3253 	movw	r2, #851	@ 0x353
 8018072:	498d      	ldr	r1, [pc, #564]	@ (80182a8 <tcp_split_unsent_seg+0x280>)
 8018074:	488b      	ldr	r0, [pc, #556]	@ (80182a4 <tcp_split_unsent_seg+0x27c>)
 8018076:	f005 fa37 	bl	801d4e8 <iprintf>
    return ERR_VAL;
 801807a:	f06f 0305 	mvn.w	r3, #5
 801807e:	e109      	b.n	8018294 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	891b      	ldrh	r3, [r3, #8]
 8018084:	887a      	ldrh	r2, [r7, #2]
 8018086:	429a      	cmp	r2, r3
 8018088:	d301      	bcc.n	801808e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801808a:	2300      	movs	r3, #0
 801808c:	e102      	b.n	8018294 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018092:	887a      	ldrh	r2, [r7, #2]
 8018094:	429a      	cmp	r2, r3
 8018096:	d906      	bls.n	80180a6 <tcp_split_unsent_seg+0x7e>
 8018098:	4b80      	ldr	r3, [pc, #512]	@ (801829c <tcp_split_unsent_seg+0x274>)
 801809a:	f240 325b 	movw	r2, #859	@ 0x35b
 801809e:	4983      	ldr	r1, [pc, #524]	@ (80182ac <tcp_split_unsent_seg+0x284>)
 80180a0:	4880      	ldr	r0, [pc, #512]	@ (80182a4 <tcp_split_unsent_seg+0x27c>)
 80180a2:	f005 fa21 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	891b      	ldrh	r3, [r3, #8]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d106      	bne.n	80180bc <tcp_split_unsent_seg+0x94>
 80180ae:	4b7b      	ldr	r3, [pc, #492]	@ (801829c <tcp_split_unsent_seg+0x274>)
 80180b0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80180b4:	497e      	ldr	r1, [pc, #504]	@ (80182b0 <tcp_split_unsent_seg+0x288>)
 80180b6:	487b      	ldr	r0, [pc, #492]	@ (80182a4 <tcp_split_unsent_seg+0x27c>)
 80180b8:	f005 fa16 	bl	801d4e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	7a9b      	ldrb	r3, [r3, #10]
 80180c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80180c2:	7bfb      	ldrb	r3, [r7, #15]
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	f003 0304 	and.w	r3, r3, #4
 80180cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	891a      	ldrh	r2, [r3, #8]
 80180d2:	887b      	ldrh	r3, [r7, #2]
 80180d4:	1ad3      	subs	r3, r2, r3
 80180d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80180d8:	7bbb      	ldrb	r3, [r7, #14]
 80180da:	b29a      	uxth	r2, r3
 80180dc:	89bb      	ldrh	r3, [r7, #12]
 80180de:	4413      	add	r3, r2
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80180e6:	4619      	mov	r1, r3
 80180e8:	2036      	movs	r0, #54	@ 0x36
 80180ea:	f7fa fb59 	bl	80127a0 <pbuf_alloc>
 80180ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f000 80b7 	beq.w	8018266 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	891a      	ldrh	r2, [r3, #8]
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	891b      	ldrh	r3, [r3, #8]
 8018102:	1ad3      	subs	r3, r2, r3
 8018104:	b29a      	uxth	r2, r3
 8018106:	887b      	ldrh	r3, [r7, #2]
 8018108:	4413      	add	r3, r2
 801810a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	6858      	ldr	r0, [r3, #4]
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	685a      	ldr	r2, [r3, #4]
 8018114:	7bbb      	ldrb	r3, [r7, #14]
 8018116:	18d1      	adds	r1, r2, r3
 8018118:	897b      	ldrh	r3, [r7, #10]
 801811a:	89ba      	ldrh	r2, [r7, #12]
 801811c:	f7fb f82a 	bl	8013174 <pbuf_copy_partial>
 8018120:	4603      	mov	r3, r0
 8018122:	461a      	mov	r2, r3
 8018124:	89bb      	ldrh	r3, [r7, #12]
 8018126:	4293      	cmp	r3, r2
 8018128:	f040 809f 	bne.w	801826a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801812c:	697b      	ldr	r3, [r7, #20]
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	899b      	ldrh	r3, [r3, #12]
 8018132:	b29b      	uxth	r3, r3
 8018134:	4618      	mov	r0, r3
 8018136:	f7f9 f9ef 	bl	8011518 <lwip_htons>
 801813a:	4603      	mov	r3, r0
 801813c:	b2db      	uxtb	r3, r3
 801813e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018142:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018144:	2300      	movs	r3, #0
 8018146:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018148:	7efb      	ldrb	r3, [r7, #27]
 801814a:	f003 0308 	and.w	r3, r3, #8
 801814e:	2b00      	cmp	r3, #0
 8018150:	d007      	beq.n	8018162 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018152:	7efb      	ldrb	r3, [r7, #27]
 8018154:	f023 0308 	bic.w	r3, r3, #8
 8018158:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801815a:	7ebb      	ldrb	r3, [r7, #26]
 801815c:	f043 0308 	orr.w	r3, r3, #8
 8018160:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018162:	7efb      	ldrb	r3, [r7, #27]
 8018164:	f003 0301 	and.w	r3, r3, #1
 8018168:	2b00      	cmp	r3, #0
 801816a:	d007      	beq.n	801817c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801816c:	7efb      	ldrb	r3, [r7, #27]
 801816e:	f023 0301 	bic.w	r3, r3, #1
 8018172:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018174:	7ebb      	ldrb	r3, [r7, #26]
 8018176:	f043 0301 	orr.w	r3, r3, #1
 801817a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	68db      	ldr	r3, [r3, #12]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	4618      	mov	r0, r3
 8018184:	f7f9 f9dd 	bl	8011542 <lwip_htonl>
 8018188:	4602      	mov	r2, r0
 801818a:	887b      	ldrh	r3, [r7, #2]
 801818c:	18d1      	adds	r1, r2, r3
 801818e:	7eba      	ldrb	r2, [r7, #26]
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	9300      	str	r3, [sp, #0]
 8018194:	460b      	mov	r3, r1
 8018196:	6939      	ldr	r1, [r7, #16]
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7ff fa51 	bl	8017640 <tcp_create_segment>
 801819e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80181a0:	69fb      	ldr	r3, [r7, #28]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d063      	beq.n	801826e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7fa fe6a 	bl	8012e84 <pbuf_clen>
 80181b0:	4603      	mov	r3, r0
 80181b2:	461a      	mov	r2, r3
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181ba:	1a9b      	subs	r3, r3, r2
 80181bc:	b29a      	uxth	r2, r3
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	6858      	ldr	r0, [r3, #4]
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	685b      	ldr	r3, [r3, #4]
 80181cc:	891a      	ldrh	r2, [r3, #8]
 80181ce:	89bb      	ldrh	r3, [r7, #12]
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	4619      	mov	r1, r3
 80181d6:	f7fa fc41 	bl	8012a5c <pbuf_realloc>
  useg->len -= remainder;
 80181da:	697b      	ldr	r3, [r7, #20]
 80181dc:	891a      	ldrh	r2, [r3, #8]
 80181de:	89bb      	ldrh	r3, [r7, #12]
 80181e0:	1ad3      	subs	r3, r2, r3
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	68db      	ldr	r3, [r3, #12]
 80181ec:	899b      	ldrh	r3, [r3, #12]
 80181ee:	b29c      	uxth	r4, r3
 80181f0:	7efb      	ldrb	r3, [r7, #27]
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7f9 f98f 	bl	8011518 <lwip_htons>
 80181fa:	4603      	mov	r3, r0
 80181fc:	461a      	mov	r2, r3
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	68db      	ldr	r3, [r3, #12]
 8018202:	4322      	orrs	r2, r4
 8018204:	b292      	uxth	r2, r2
 8018206:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018208:	697b      	ldr	r3, [r7, #20]
 801820a:	685b      	ldr	r3, [r3, #4]
 801820c:	4618      	mov	r0, r3
 801820e:	f7fa fe39 	bl	8012e84 <pbuf_clen>
 8018212:	4603      	mov	r3, r0
 8018214:	461a      	mov	r2, r3
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801821c:	4413      	add	r3, r2
 801821e:	b29a      	uxth	r2, r3
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018226:	69fb      	ldr	r3, [r7, #28]
 8018228:	685b      	ldr	r3, [r3, #4]
 801822a:	4618      	mov	r0, r3
 801822c:	f7fa fe2a 	bl	8012e84 <pbuf_clen>
 8018230:	4603      	mov	r3, r0
 8018232:	461a      	mov	r2, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801823a:	4413      	add	r3, r2
 801823c:	b29a      	uxth	r2, r3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	681a      	ldr	r2, [r3, #0]
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	69fa      	ldr	r2, [r7, #28]
 8018250:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018252:	69fb      	ldr	r3, [r7, #28]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d103      	bne.n	8018262 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2200      	movs	r2, #0
 801825e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018262:	2300      	movs	r3, #0
 8018264:	e016      	b.n	8018294 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018266:	bf00      	nop
 8018268:	e002      	b.n	8018270 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801826a:	bf00      	nop
 801826c:	e000      	b.n	8018270 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801826e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d006      	beq.n	8018284 <tcp_split_unsent_seg+0x25c>
 8018276:	4b09      	ldr	r3, [pc, #36]	@ (801829c <tcp_split_unsent_seg+0x274>)
 8018278:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801827c:	490d      	ldr	r1, [pc, #52]	@ (80182b4 <tcp_split_unsent_seg+0x28c>)
 801827e:	4809      	ldr	r0, [pc, #36]	@ (80182a4 <tcp_split_unsent_seg+0x27c>)
 8018280:	f005 f932 	bl	801d4e8 <iprintf>
  if (p != NULL) {
 8018284:	693b      	ldr	r3, [r7, #16]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d002      	beq.n	8018290 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801828a:	6938      	ldr	r0, [r7, #16]
 801828c:	f7fa fd6c 	bl	8012d68 <pbuf_free>
  }

  return ERR_MEM;
 8018290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018294:	4618      	mov	r0, r3
 8018296:	3724      	adds	r7, #36	@ 0x24
 8018298:	46bd      	mov	sp, r7
 801829a:	bd90      	pop	{r4, r7, pc}
 801829c:	08021f34 	.word	0x08021f34
 80182a0:	080222c8 	.word	0x080222c8
 80182a4:	08021f88 	.word	0x08021f88
 80182a8:	080222ec 	.word	0x080222ec
 80182ac:	08022310 	.word	0x08022310
 80182b0:	08022320 	.word	0x08022320
 80182b4:	08022330 	.word	0x08022330

080182b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80182b8:	b590      	push	{r4, r7, lr}
 80182ba:	b085      	sub	sp, #20
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d106      	bne.n	80182d4 <tcp_send_fin+0x1c>
 80182c6:	4b21      	ldr	r3, [pc, #132]	@ (801834c <tcp_send_fin+0x94>)
 80182c8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80182cc:	4920      	ldr	r1, [pc, #128]	@ (8018350 <tcp_send_fin+0x98>)
 80182ce:	4821      	ldr	r0, [pc, #132]	@ (8018354 <tcp_send_fin+0x9c>)
 80182d0:	f005 f90a 	bl	801d4e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d02e      	beq.n	801833a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182e0:	60fb      	str	r3, [r7, #12]
 80182e2:	e002      	b.n	80182ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1f8      	bne.n	80182e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	68db      	ldr	r3, [r3, #12]
 80182f6:	899b      	ldrh	r3, [r3, #12]
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7f9 f90c 	bl	8011518 <lwip_htons>
 8018300:	4603      	mov	r3, r0
 8018302:	b2db      	uxtb	r3, r3
 8018304:	f003 0307 	and.w	r3, r3, #7
 8018308:	2b00      	cmp	r3, #0
 801830a:	d116      	bne.n	801833a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	68db      	ldr	r3, [r3, #12]
 8018310:	899b      	ldrh	r3, [r3, #12]
 8018312:	b29c      	uxth	r4, r3
 8018314:	2001      	movs	r0, #1
 8018316:	f7f9 f8ff 	bl	8011518 <lwip_htons>
 801831a:	4603      	mov	r3, r0
 801831c:	461a      	mov	r2, r3
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	68db      	ldr	r3, [r3, #12]
 8018322:	4322      	orrs	r2, r4
 8018324:	b292      	uxth	r2, r2
 8018326:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	8b5b      	ldrh	r3, [r3, #26]
 801832c:	f043 0320 	orr.w	r3, r3, #32
 8018330:	b29a      	uxth	r2, r3
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018336:	2300      	movs	r3, #0
 8018338:	e004      	b.n	8018344 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801833a:	2101      	movs	r1, #1
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f000 f80b 	bl	8018358 <tcp_enqueue_flags>
 8018342:	4603      	mov	r3, r0
}
 8018344:	4618      	mov	r0, r3
 8018346:	3714      	adds	r7, #20
 8018348:	46bd      	mov	sp, r7
 801834a:	bd90      	pop	{r4, r7, pc}
 801834c:	08021f34 	.word	0x08021f34
 8018350:	0802233c 	.word	0x0802233c
 8018354:	08021f88 	.word	0x08021f88

08018358 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b08a      	sub	sp, #40	@ 0x28
 801835c:	af02      	add	r7, sp, #8
 801835e:	6078      	str	r0, [r7, #4]
 8018360:	460b      	mov	r3, r1
 8018362:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018364:	2300      	movs	r3, #0
 8018366:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018368:	2300      	movs	r3, #0
 801836a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801836c:	78fb      	ldrb	r3, [r7, #3]
 801836e:	f003 0303 	and.w	r3, r3, #3
 8018372:	2b00      	cmp	r3, #0
 8018374:	d106      	bne.n	8018384 <tcp_enqueue_flags+0x2c>
 8018376:	4b67      	ldr	r3, [pc, #412]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 8018378:	f240 4211 	movw	r2, #1041	@ 0x411
 801837c:	4966      	ldr	r1, [pc, #408]	@ (8018518 <tcp_enqueue_flags+0x1c0>)
 801837e:	4867      	ldr	r0, [pc, #412]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 8018380:	f005 f8b2 	bl	801d4e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d106      	bne.n	8018398 <tcp_enqueue_flags+0x40>
 801838a:	4b62      	ldr	r3, [pc, #392]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 801838c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018390:	4963      	ldr	r1, [pc, #396]	@ (8018520 <tcp_enqueue_flags+0x1c8>)
 8018392:	4862      	ldr	r0, [pc, #392]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 8018394:	f005 f8a8 	bl	801d4e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018398:	78fb      	ldrb	r3, [r7, #3]
 801839a:	f003 0302 	and.w	r3, r3, #2
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d001      	beq.n	80183a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80183a2:	2301      	movs	r3, #1
 80183a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80183a6:	7ffb      	ldrb	r3, [r7, #31]
 80183a8:	009b      	lsls	r3, r3, #2
 80183aa:	b2db      	uxtb	r3, r3
 80183ac:	f003 0304 	and.w	r3, r3, #4
 80183b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80183b2:	7dfb      	ldrb	r3, [r7, #23]
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80183ba:	4619      	mov	r1, r3
 80183bc:	2036      	movs	r0, #54	@ 0x36
 80183be:	f7fa f9ef 	bl	80127a0 <pbuf_alloc>
 80183c2:	6138      	str	r0, [r7, #16]
 80183c4:	693b      	ldr	r3, [r7, #16]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d109      	bne.n	80183de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	8b5b      	ldrh	r3, [r3, #26]
 80183ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183d2:	b29a      	uxth	r2, r3
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80183d8:	f04f 33ff 	mov.w	r3, #4294967295
 80183dc:	e095      	b.n	801850a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80183de:	693b      	ldr	r3, [r7, #16]
 80183e0:	895a      	ldrh	r2, [r3, #10]
 80183e2:	7dfb      	ldrb	r3, [r7, #23]
 80183e4:	b29b      	uxth	r3, r3
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d206      	bcs.n	80183f8 <tcp_enqueue_flags+0xa0>
 80183ea:	4b4a      	ldr	r3, [pc, #296]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 80183ec:	f240 4239 	movw	r2, #1081	@ 0x439
 80183f0:	494c      	ldr	r1, [pc, #304]	@ (8018524 <tcp_enqueue_flags+0x1cc>)
 80183f2:	484a      	ldr	r0, [pc, #296]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 80183f4:	f005 f878 	bl	801d4e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80183fc:	78fa      	ldrb	r2, [r7, #3]
 80183fe:	7ffb      	ldrb	r3, [r7, #31]
 8018400:	9300      	str	r3, [sp, #0]
 8018402:	460b      	mov	r3, r1
 8018404:	6939      	ldr	r1, [r7, #16]
 8018406:	6878      	ldr	r0, [r7, #4]
 8018408:	f7ff f91a 	bl	8017640 <tcp_create_segment>
 801840c:	60f8      	str	r0, [r7, #12]
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d109      	bne.n	8018428 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	8b5b      	ldrh	r3, [r3, #26]
 8018418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801841c:	b29a      	uxth	r2, r3
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018422:	f04f 33ff 	mov.w	r3, #4294967295
 8018426:	e070      	b.n	801850a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	68db      	ldr	r3, [r3, #12]
 801842c:	f003 0303 	and.w	r3, r3, #3
 8018430:	2b00      	cmp	r3, #0
 8018432:	d006      	beq.n	8018442 <tcp_enqueue_flags+0xea>
 8018434:	4b37      	ldr	r3, [pc, #220]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 8018436:	f240 4242 	movw	r2, #1090	@ 0x442
 801843a:	493b      	ldr	r1, [pc, #236]	@ (8018528 <tcp_enqueue_flags+0x1d0>)
 801843c:	4837      	ldr	r0, [pc, #220]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 801843e:	f005 f853 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	891b      	ldrh	r3, [r3, #8]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d006      	beq.n	8018458 <tcp_enqueue_flags+0x100>
 801844a:	4b32      	ldr	r3, [pc, #200]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 801844c:	f240 4243 	movw	r2, #1091	@ 0x443
 8018450:	4936      	ldr	r1, [pc, #216]	@ (801852c <tcp_enqueue_flags+0x1d4>)
 8018452:	4832      	ldr	r0, [pc, #200]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 8018454:	f005 f848 	bl	801d4e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801845c:	2b00      	cmp	r3, #0
 801845e:	d103      	bne.n	8018468 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	68fa      	ldr	r2, [r7, #12]
 8018464:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018466:	e00d      	b.n	8018484 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801846c:	61bb      	str	r3, [r7, #24]
 801846e:	e002      	b.n	8018476 <tcp_enqueue_flags+0x11e>
 8018470:	69bb      	ldr	r3, [r7, #24]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	61bb      	str	r3, [r7, #24]
 8018476:	69bb      	ldr	r3, [r7, #24]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d1f8      	bne.n	8018470 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801847e:	69bb      	ldr	r3, [r7, #24]
 8018480:	68fa      	ldr	r2, [r7, #12]
 8018482:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2200      	movs	r2, #0
 8018488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801848c:	78fb      	ldrb	r3, [r7, #3]
 801848e:	f003 0302 	and.w	r3, r3, #2
 8018492:	2b00      	cmp	r3, #0
 8018494:	d104      	bne.n	80184a0 <tcp_enqueue_flags+0x148>
 8018496:	78fb      	ldrb	r3, [r7, #3]
 8018498:	f003 0301 	and.w	r3, r3, #1
 801849c:	2b00      	cmp	r3, #0
 801849e:	d004      	beq.n	80184aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80184a4:	1c5a      	adds	r2, r3, #1
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80184aa:	78fb      	ldrb	r3, [r7, #3]
 80184ac:	f003 0301 	and.w	r3, r3, #1
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d006      	beq.n	80184c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	8b5b      	ldrh	r3, [r3, #26]
 80184b8:	f043 0320 	orr.w	r3, r3, #32
 80184bc:	b29a      	uxth	r2, r3
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fa fcdc 	bl	8012e84 <pbuf_clen>
 80184cc:	4603      	mov	r3, r0
 80184ce:	461a      	mov	r2, r3
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184d6:	4413      	add	r3, r2
 80184d8:	b29a      	uxth	r2, r3
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d00e      	beq.n	8018508 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d10a      	bne.n	8018508 <tcp_enqueue_flags+0x1b0>
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d106      	bne.n	8018508 <tcp_enqueue_flags+0x1b0>
 80184fa:	4b06      	ldr	r3, [pc, #24]	@ (8018514 <tcp_enqueue_flags+0x1bc>)
 80184fc:	f240 4265 	movw	r2, #1125	@ 0x465
 8018500:	490b      	ldr	r1, [pc, #44]	@ (8018530 <tcp_enqueue_flags+0x1d8>)
 8018502:	4806      	ldr	r0, [pc, #24]	@ (801851c <tcp_enqueue_flags+0x1c4>)
 8018504:	f004 fff0 	bl	801d4e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018508:	2300      	movs	r3, #0
}
 801850a:	4618      	mov	r0, r3
 801850c:	3720      	adds	r7, #32
 801850e:	46bd      	mov	sp, r7
 8018510:	bd80      	pop	{r7, pc}
 8018512:	bf00      	nop
 8018514:	08021f34 	.word	0x08021f34
 8018518:	08022358 	.word	0x08022358
 801851c:	08021f88 	.word	0x08021f88
 8018520:	080223b0 	.word	0x080223b0
 8018524:	080223d0 	.word	0x080223d0
 8018528:	0802240c 	.word	0x0802240c
 801852c:	08022424 	.word	0x08022424
 8018530:	08022450 	.word	0x08022450

08018534 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018534:	b5b0      	push	{r4, r5, r7, lr}
 8018536:	b08a      	sub	sp, #40	@ 0x28
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d106      	bne.n	8018550 <tcp_output+0x1c>
 8018542:	4b8a      	ldr	r3, [pc, #552]	@ (801876c <tcp_output+0x238>)
 8018544:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018548:	4989      	ldr	r1, [pc, #548]	@ (8018770 <tcp_output+0x23c>)
 801854a:	488a      	ldr	r0, [pc, #552]	@ (8018774 <tcp_output+0x240>)
 801854c:	f004 ffcc 	bl	801d4e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	7d1b      	ldrb	r3, [r3, #20]
 8018554:	2b01      	cmp	r3, #1
 8018556:	d106      	bne.n	8018566 <tcp_output+0x32>
 8018558:	4b84      	ldr	r3, [pc, #528]	@ (801876c <tcp_output+0x238>)
 801855a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801855e:	4986      	ldr	r1, [pc, #536]	@ (8018778 <tcp_output+0x244>)
 8018560:	4884      	ldr	r0, [pc, #528]	@ (8018774 <tcp_output+0x240>)
 8018562:	f004 ffc1 	bl	801d4e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018566:	4b85      	ldr	r3, [pc, #532]	@ (801877c <tcp_output+0x248>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	687a      	ldr	r2, [r7, #4]
 801856c:	429a      	cmp	r2, r3
 801856e:	d101      	bne.n	8018574 <tcp_output+0x40>
    return ERR_OK;
 8018570:	2300      	movs	r3, #0
 8018572:	e1ce      	b.n	8018912 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018580:	4293      	cmp	r3, r2
 8018582:	bf28      	it	cs
 8018584:	4613      	movcs	r3, r2
 8018586:	b29b      	uxth	r3, r3
 8018588:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801858e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018592:	2b00      	cmp	r3, #0
 8018594:	d10b      	bne.n	80185ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	8b5b      	ldrh	r3, [r3, #26]
 801859a:	f003 0302 	and.w	r3, r3, #2
 801859e:	2b00      	cmp	r3, #0
 80185a0:	f000 81aa 	beq.w	80188f8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80185a4:	6878      	ldr	r0, [r7, #4]
 80185a6:	f000 fdcb 	bl	8019140 <tcp_send_empty_ack>
 80185aa:	4603      	mov	r3, r0
 80185ac:	e1b1      	b.n	8018912 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80185ae:	6879      	ldr	r1, [r7, #4]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	3304      	adds	r3, #4
 80185b4:	461a      	mov	r2, r3
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f7ff f826 	bl	8017608 <tcp_route>
 80185bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d102      	bne.n	80185ca <tcp_output+0x96>
    return ERR_RTE;
 80185c4:	f06f 0303 	mvn.w	r3, #3
 80185c8:	e1a3      	b.n	8018912 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d003      	beq.n	80185d8 <tcp_output+0xa4>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d111      	bne.n	80185fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d002      	beq.n	80185e4 <tcp_output+0xb0>
 80185de:	697b      	ldr	r3, [r7, #20]
 80185e0:	3304      	adds	r3, #4
 80185e2:	e000      	b.n	80185e6 <tcp_output+0xb2>
 80185e4:	2300      	movs	r3, #0
 80185e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80185e8:	693b      	ldr	r3, [r7, #16]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d102      	bne.n	80185f4 <tcp_output+0xc0>
      return ERR_RTE;
 80185ee:	f06f 0303 	mvn.w	r3, #3
 80185f2:	e18e      	b.n	8018912 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80185f4:	693b      	ldr	r3, [r7, #16]
 80185f6:	681a      	ldr	r2, [r3, #0]
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80185fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185fe:	68db      	ldr	r3, [r3, #12]
 8018600:	685b      	ldr	r3, [r3, #4]
 8018602:	4618      	mov	r0, r3
 8018604:	f7f8 ff9d 	bl	8011542 <lwip_htonl>
 8018608:	4602      	mov	r2, r0
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801860e:	1ad3      	subs	r3, r2, r3
 8018610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018612:	8912      	ldrh	r2, [r2, #8]
 8018614:	4413      	add	r3, r2
 8018616:	69ba      	ldr	r2, [r7, #24]
 8018618:	429a      	cmp	r2, r3
 801861a:	d227      	bcs.n	801866c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018622:	461a      	mov	r2, r3
 8018624:	69bb      	ldr	r3, [r7, #24]
 8018626:	4293      	cmp	r3, r2
 8018628:	d114      	bne.n	8018654 <tcp_output+0x120>
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801862e:	2b00      	cmp	r3, #0
 8018630:	d110      	bne.n	8018654 <tcp_output+0x120>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018638:	2b00      	cmp	r3, #0
 801863a:	d10b      	bne.n	8018654 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2200      	movs	r2, #0
 8018640:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2201      	movs	r2, #1
 8018648:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	2200      	movs	r2, #0
 8018650:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	8b5b      	ldrh	r3, [r3, #26]
 8018658:	f003 0302 	and.w	r3, r3, #2
 801865c:	2b00      	cmp	r3, #0
 801865e:	f000 814d 	beq.w	80188fc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 fd6c 	bl	8019140 <tcp_send_empty_ack>
 8018668:	4603      	mov	r3, r0
 801866a:	e152      	b.n	8018912 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2200      	movs	r2, #0
 8018670:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018678:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801867a:	6a3b      	ldr	r3, [r7, #32]
 801867c:	2b00      	cmp	r3, #0
 801867e:	f000 811c 	beq.w	80188ba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018682:	e002      	b.n	801868a <tcp_output+0x156>
 8018684:	6a3b      	ldr	r3, [r7, #32]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	623b      	str	r3, [r7, #32]
 801868a:	6a3b      	ldr	r3, [r7, #32]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d1f8      	bne.n	8018684 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018692:	e112      	b.n	80188ba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018696:	68db      	ldr	r3, [r3, #12]
 8018698:	899b      	ldrh	r3, [r3, #12]
 801869a:	b29b      	uxth	r3, r3
 801869c:	4618      	mov	r0, r3
 801869e:	f7f8 ff3b 	bl	8011518 <lwip_htons>
 80186a2:	4603      	mov	r3, r0
 80186a4:	b2db      	uxtb	r3, r3
 80186a6:	f003 0304 	and.w	r3, r3, #4
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d006      	beq.n	80186bc <tcp_output+0x188>
 80186ae:	4b2f      	ldr	r3, [pc, #188]	@ (801876c <tcp_output+0x238>)
 80186b0:	f240 5236 	movw	r2, #1334	@ 0x536
 80186b4:	4932      	ldr	r1, [pc, #200]	@ (8018780 <tcp_output+0x24c>)
 80186b6:	482f      	ldr	r0, [pc, #188]	@ (8018774 <tcp_output+0x240>)
 80186b8:	f004 ff16 	bl	801d4e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d01f      	beq.n	8018704 <tcp_output+0x1d0>
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	8b5b      	ldrh	r3, [r3, #26]
 80186c8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d119      	bne.n	8018704 <tcp_output+0x1d0>
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d00b      	beq.n	80186f0 <tcp_output+0x1bc>
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d110      	bne.n	8018704 <tcp_output+0x1d0>
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186e6:	891a      	ldrh	r2, [r3, #8]
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d209      	bcs.n	8018704 <tcp_output+0x1d0>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d004      	beq.n	8018704 <tcp_output+0x1d0>
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018700:	2b08      	cmp	r3, #8
 8018702:	d901      	bls.n	8018708 <tcp_output+0x1d4>
 8018704:	2301      	movs	r3, #1
 8018706:	e000      	b.n	801870a <tcp_output+0x1d6>
 8018708:	2300      	movs	r3, #0
 801870a:	2b00      	cmp	r3, #0
 801870c:	d106      	bne.n	801871c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	8b5b      	ldrh	r3, [r3, #26]
 8018712:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018716:	2b00      	cmp	r3, #0
 8018718:	f000 80e4 	beq.w	80188e4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7d1b      	ldrb	r3, [r3, #20]
 8018720:	2b02      	cmp	r3, #2
 8018722:	d00d      	beq.n	8018740 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018726:	68db      	ldr	r3, [r3, #12]
 8018728:	899b      	ldrh	r3, [r3, #12]
 801872a:	b29c      	uxth	r4, r3
 801872c:	2010      	movs	r0, #16
 801872e:	f7f8 fef3 	bl	8011518 <lwip_htons>
 8018732:	4603      	mov	r3, r0
 8018734:	461a      	mov	r2, r3
 8018736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018738:	68db      	ldr	r3, [r3, #12]
 801873a:	4322      	orrs	r2, r4
 801873c:	b292      	uxth	r2, r2
 801873e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018740:	697a      	ldr	r2, [r7, #20]
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018746:	f000 f909 	bl	801895c <tcp_output_segment>
 801874a:	4603      	mov	r3, r0
 801874c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801874e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d016      	beq.n	8018784 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	8b5b      	ldrh	r3, [r3, #26]
 801875a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801875e:	b29a      	uxth	r2, r3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	835a      	strh	r2, [r3, #26]
      return err;
 8018764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018768:	e0d3      	b.n	8018912 <tcp_output+0x3de>
 801876a:	bf00      	nop
 801876c:	08021f34 	.word	0x08021f34
 8018770:	08022478 	.word	0x08022478
 8018774:	08021f88 	.word	0x08021f88
 8018778:	08022490 	.word	0x08022490
 801877c:	2000f3e0 	.word	0x2000f3e0
 8018780:	080224b8 	.word	0x080224b8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018786:	681a      	ldr	r2, [r3, #0]
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	7d1b      	ldrb	r3, [r3, #20]
 8018790:	2b02      	cmp	r3, #2
 8018792:	d006      	beq.n	80187a2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	8b5b      	ldrh	r3, [r3, #26]
 8018798:	f023 0303 	bic.w	r3, r3, #3
 801879c:	b29a      	uxth	r2, r3
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80187a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	685b      	ldr	r3, [r3, #4]
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7f8 feca 	bl	8011542 <lwip_htonl>
 80187ae:	4604      	mov	r4, r0
 80187b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b2:	891b      	ldrh	r3, [r3, #8]
 80187b4:	461d      	mov	r5, r3
 80187b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b8:	68db      	ldr	r3, [r3, #12]
 80187ba:	899b      	ldrh	r3, [r3, #12]
 80187bc:	b29b      	uxth	r3, r3
 80187be:	4618      	mov	r0, r3
 80187c0:	f7f8 feaa 	bl	8011518 <lwip_htons>
 80187c4:	4603      	mov	r3, r0
 80187c6:	b2db      	uxtb	r3, r3
 80187c8:	f003 0303 	and.w	r3, r3, #3
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d001      	beq.n	80187d4 <tcp_output+0x2a0>
 80187d0:	2301      	movs	r3, #1
 80187d2:	e000      	b.n	80187d6 <tcp_output+0x2a2>
 80187d4:	2300      	movs	r3, #0
 80187d6:	442b      	add	r3, r5
 80187d8:	4423      	add	r3, r4
 80187da:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	1ad3      	subs	r3, r2, r3
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	da02      	bge.n	80187ee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80187ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f0:	891b      	ldrh	r3, [r3, #8]
 80187f2:	461c      	mov	r4, r3
 80187f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f6:	68db      	ldr	r3, [r3, #12]
 80187f8:	899b      	ldrh	r3, [r3, #12]
 80187fa:	b29b      	uxth	r3, r3
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7f8 fe8b 	bl	8011518 <lwip_htons>
 8018802:	4603      	mov	r3, r0
 8018804:	b2db      	uxtb	r3, r3
 8018806:	f003 0303 	and.w	r3, r3, #3
 801880a:	2b00      	cmp	r3, #0
 801880c:	d001      	beq.n	8018812 <tcp_output+0x2de>
 801880e:	2301      	movs	r3, #1
 8018810:	e000      	b.n	8018814 <tcp_output+0x2e0>
 8018812:	2300      	movs	r3, #0
 8018814:	4423      	add	r3, r4
 8018816:	2b00      	cmp	r3, #0
 8018818:	d049      	beq.n	80188ae <tcp_output+0x37a>
      seg->next = NULL;
 801881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801881c:	2200      	movs	r2, #0
 801881e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018824:	2b00      	cmp	r3, #0
 8018826:	d105      	bne.n	8018834 <tcp_output+0x300>
        pcb->unacked = seg;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801882c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018830:	623b      	str	r3, [r7, #32]
 8018832:	e03f      	b.n	80188b4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018836:	68db      	ldr	r3, [r3, #12]
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	4618      	mov	r0, r3
 801883c:	f7f8 fe81 	bl	8011542 <lwip_htonl>
 8018840:	4604      	mov	r4, r0
 8018842:	6a3b      	ldr	r3, [r7, #32]
 8018844:	68db      	ldr	r3, [r3, #12]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	4618      	mov	r0, r3
 801884a:	f7f8 fe7a 	bl	8011542 <lwip_htonl>
 801884e:	4603      	mov	r3, r0
 8018850:	1ae3      	subs	r3, r4, r3
 8018852:	2b00      	cmp	r3, #0
 8018854:	da24      	bge.n	80188a0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	3370      	adds	r3, #112	@ 0x70
 801885a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801885c:	e002      	b.n	8018864 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801885e:	69fb      	ldr	r3, [r7, #28]
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d011      	beq.n	8018890 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801886c:	69fb      	ldr	r3, [r7, #28]
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	68db      	ldr	r3, [r3, #12]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	4618      	mov	r0, r3
 8018876:	f7f8 fe64 	bl	8011542 <lwip_htonl>
 801887a:	4604      	mov	r4, r0
 801887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801887e:	68db      	ldr	r3, [r3, #12]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	4618      	mov	r0, r3
 8018884:	f7f8 fe5d 	bl	8011542 <lwip_htonl>
 8018888:	4603      	mov	r3, r0
 801888a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801888c:	2b00      	cmp	r3, #0
 801888e:	dbe6      	blt.n	801885e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018896:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018898:	69fb      	ldr	r3, [r7, #28]
 801889a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801889c:	601a      	str	r2, [r3, #0]
 801889e:	e009      	b.n	80188b4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80188a0:	6a3b      	ldr	r3, [r7, #32]
 80188a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188a4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80188a6:	6a3b      	ldr	r3, [r7, #32]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	623b      	str	r3, [r7, #32]
 80188ac:	e002      	b.n	80188b4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80188ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80188b0:	f7fb ff01 	bl	80146b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80188ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d012      	beq.n	80188e6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80188c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188c2:	68db      	ldr	r3, [r3, #12]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7f8 fe3b 	bl	8011542 <lwip_htonl>
 80188cc:	4602      	mov	r2, r0
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188d2:	1ad3      	subs	r3, r2, r3
 80188d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188d6:	8912      	ldrh	r2, [r2, #8]
 80188d8:	4413      	add	r3, r2
  while (seg != NULL &&
 80188da:	69ba      	ldr	r2, [r7, #24]
 80188dc:	429a      	cmp	r2, r3
 80188de:	f4bf aed9 	bcs.w	8018694 <tcp_output+0x160>
 80188e2:	e000      	b.n	80188e6 <tcp_output+0x3b2>
      break;
 80188e4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d108      	bne.n	8018900 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2200      	movs	r2, #0
 80188f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80188f6:	e004      	b.n	8018902 <tcp_output+0x3ce>
    goto output_done;
 80188f8:	bf00      	nop
 80188fa:	e002      	b.n	8018902 <tcp_output+0x3ce>
    goto output_done;
 80188fc:	bf00      	nop
 80188fe:	e000      	b.n	8018902 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018900:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	8b5b      	ldrh	r3, [r3, #26]
 8018906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801890a:	b29a      	uxth	r2, r3
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018910:	2300      	movs	r3, #0
}
 8018912:	4618      	mov	r0, r3
 8018914:	3728      	adds	r7, #40	@ 0x28
 8018916:	46bd      	mov	sp, r7
 8018918:	bdb0      	pop	{r4, r5, r7, pc}
 801891a:	bf00      	nop

0801891c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d106      	bne.n	8018938 <tcp_output_segment_busy+0x1c>
 801892a:	4b09      	ldr	r3, [pc, #36]	@ (8018950 <tcp_output_segment_busy+0x34>)
 801892c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018930:	4908      	ldr	r1, [pc, #32]	@ (8018954 <tcp_output_segment_busy+0x38>)
 8018932:	4809      	ldr	r0, [pc, #36]	@ (8018958 <tcp_output_segment_busy+0x3c>)
 8018934:	f004 fdd8 	bl	801d4e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	7b9b      	ldrb	r3, [r3, #14]
 801893e:	2b01      	cmp	r3, #1
 8018940:	d001      	beq.n	8018946 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018942:	2301      	movs	r3, #1
 8018944:	e000      	b.n	8018948 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018946:	2300      	movs	r3, #0
}
 8018948:	4618      	mov	r0, r3
 801894a:	3708      	adds	r7, #8
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}
 8018950:	08021f34 	.word	0x08021f34
 8018954:	080224d0 	.word	0x080224d0
 8018958:	08021f88 	.word	0x08021f88

0801895c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801895c:	b5b0      	push	{r4, r5, r7, lr}
 801895e:	b08c      	sub	sp, #48	@ 0x30
 8018960:	af04      	add	r7, sp, #16
 8018962:	60f8      	str	r0, [r7, #12]
 8018964:	60b9      	str	r1, [r7, #8]
 8018966:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d106      	bne.n	801897c <tcp_output_segment+0x20>
 801896e:	4b64      	ldr	r3, [pc, #400]	@ (8018b00 <tcp_output_segment+0x1a4>)
 8018970:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018974:	4963      	ldr	r1, [pc, #396]	@ (8018b04 <tcp_output_segment+0x1a8>)
 8018976:	4864      	ldr	r0, [pc, #400]	@ (8018b08 <tcp_output_segment+0x1ac>)
 8018978:	f004 fdb6 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801897c:	68bb      	ldr	r3, [r7, #8]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d106      	bne.n	8018990 <tcp_output_segment+0x34>
 8018982:	4b5f      	ldr	r3, [pc, #380]	@ (8018b00 <tcp_output_segment+0x1a4>)
 8018984:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018988:	4960      	ldr	r1, [pc, #384]	@ (8018b0c <tcp_output_segment+0x1b0>)
 801898a:	485f      	ldr	r0, [pc, #380]	@ (8018b08 <tcp_output_segment+0x1ac>)
 801898c:	f004 fdac 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d106      	bne.n	80189a4 <tcp_output_segment+0x48>
 8018996:	4b5a      	ldr	r3, [pc, #360]	@ (8018b00 <tcp_output_segment+0x1a4>)
 8018998:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801899c:	495c      	ldr	r1, [pc, #368]	@ (8018b10 <tcp_output_segment+0x1b4>)
 801899e:	485a      	ldr	r0, [pc, #360]	@ (8018b08 <tcp_output_segment+0x1ac>)
 80189a0:	f004 fda2 	bl	801d4e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80189a4:	68f8      	ldr	r0, [r7, #12]
 80189a6:	f7ff ffb9 	bl	801891c <tcp_output_segment_busy>
 80189aa:	4603      	mov	r3, r0
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d001      	beq.n	80189b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80189b0:	2300      	movs	r3, #0
 80189b2:	e0a1      	b.n	8018af8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80189b4:	68bb      	ldr	r3, [r7, #8]
 80189b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	68dc      	ldr	r4, [r3, #12]
 80189bc:	4610      	mov	r0, r2
 80189be:	f7f8 fdc0 	bl	8011542 <lwip_htonl>
 80189c2:	4603      	mov	r3, r0
 80189c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	68dc      	ldr	r4, [r3, #12]
 80189ce:	4610      	mov	r0, r2
 80189d0:	f7f8 fda2 	bl	8011518 <lwip_htons>
 80189d4:	4603      	mov	r3, r0
 80189d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189dc:	68ba      	ldr	r2, [r7, #8]
 80189de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80189e0:	441a      	add	r2, r3
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	68db      	ldr	r3, [r3, #12]
 80189ea:	3314      	adds	r3, #20
 80189ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	7a9b      	ldrb	r3, [r3, #10]
 80189f2:	f003 0301 	and.w	r3, r3, #1
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d015      	beq.n	8018a26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	3304      	adds	r3, #4
 80189fe:	461a      	mov	r2, r3
 8018a00:	6879      	ldr	r1, [r7, #4]
 8018a02:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018a06:	f7fc fa39 	bl	8014e7c <tcp_eff_send_mss_netif>
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018a0e:	8b7b      	ldrh	r3, [r7, #26]
 8018a10:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018a14:	4618      	mov	r0, r3
 8018a16:	f7f8 fd94 	bl	8011542 <lwip_htonl>
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	69fb      	ldr	r3, [r7, #28]
 8018a1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018a20:	69fb      	ldr	r3, [r7, #28]
 8018a22:	3304      	adds	r3, #4
 8018a24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018a26:	68bb      	ldr	r3, [r7, #8]
 8018a28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	da02      	bge.n	8018a36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018a30:	68bb      	ldr	r3, [r7, #8]
 8018a32:	2200      	movs	r2, #0
 8018a34:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d10c      	bne.n	8018a58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018a3e:	4b35      	ldr	r3, [pc, #212]	@ (8018b14 <tcp_output_segment+0x1b8>)
 8018a40:	681a      	ldr	r2, [r3, #0]
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	68db      	ldr	r3, [r3, #12]
 8018a4a:	685b      	ldr	r3, [r3, #4]
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f7f8 fd78 	bl	8011542 <lwip_htonl>
 8018a52:	4602      	mov	r2, r0
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	68da      	ldr	r2, [r3, #12]
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	685b      	ldr	r3, [r3, #4]
 8018a60:	685b      	ldr	r3, [r3, #4]
 8018a62:	1ad3      	subs	r3, r2, r3
 8018a64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	8959      	ldrh	r1, [r3, #10]
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	685b      	ldr	r3, [r3, #4]
 8018a70:	8b3a      	ldrh	r2, [r7, #24]
 8018a72:	1a8a      	subs	r2, r1, r2
 8018a74:	b292      	uxth	r2, r2
 8018a76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	685b      	ldr	r3, [r3, #4]
 8018a7c:	8919      	ldrh	r1, [r3, #8]
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	685b      	ldr	r3, [r3, #4]
 8018a82:	8b3a      	ldrh	r2, [r7, #24]
 8018a84:	1a8a      	subs	r2, r1, r2
 8018a86:	b292      	uxth	r2, r2
 8018a88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	68fa      	ldr	r2, [r7, #12]
 8018a90:	68d2      	ldr	r2, [r2, #12]
 8018a92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	68db      	ldr	r3, [r3, #12]
 8018a98:	2200      	movs	r2, #0
 8018a9a:	741a      	strb	r2, [r3, #16]
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	68da      	ldr	r2, [r3, #12]
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	7a9b      	ldrb	r3, [r3, #10]
 8018aa8:	f003 0301 	and.w	r3, r3, #1
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d001      	beq.n	8018ab4 <tcp_output_segment+0x158>
 8018ab0:	2318      	movs	r3, #24
 8018ab2:	e000      	b.n	8018ab6 <tcp_output_segment+0x15a>
 8018ab4:	2314      	movs	r3, #20
 8018ab6:	4413      	add	r3, r2
 8018ab8:	69fa      	ldr	r2, [r7, #28]
 8018aba:	429a      	cmp	r2, r3
 8018abc:	d006      	beq.n	8018acc <tcp_output_segment+0x170>
 8018abe:	4b10      	ldr	r3, [pc, #64]	@ (8018b00 <tcp_output_segment+0x1a4>)
 8018ac0:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018ac4:	4914      	ldr	r1, [pc, #80]	@ (8018b18 <tcp_output_segment+0x1bc>)
 8018ac6:	4810      	ldr	r0, [pc, #64]	@ (8018b08 <tcp_output_segment+0x1ac>)
 8018ac8:	f004 fd0e 	bl	801d4e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	6858      	ldr	r0, [r3, #4]
 8018ad0:	68b9      	ldr	r1, [r7, #8]
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	1d1c      	adds	r4, r3, #4
 8018ad6:	68bb      	ldr	r3, [r7, #8]
 8018ad8:	7add      	ldrb	r5, [r3, #11]
 8018ada:	68bb      	ldr	r3, [r7, #8]
 8018adc:	7a9b      	ldrb	r3, [r3, #10]
 8018ade:	687a      	ldr	r2, [r7, #4]
 8018ae0:	9202      	str	r2, [sp, #8]
 8018ae2:	2206      	movs	r2, #6
 8018ae4:	9201      	str	r2, [sp, #4]
 8018ae6:	9300      	str	r3, [sp, #0]
 8018ae8:	462b      	mov	r3, r5
 8018aea:	4622      	mov	r2, r4
 8018aec:	f002 fd94 	bl	801b618 <ip4_output_if>
 8018af0:	4603      	mov	r3, r0
 8018af2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018af8:	4618      	mov	r0, r3
 8018afa:	3720      	adds	r7, #32
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bdb0      	pop	{r4, r5, r7, pc}
 8018b00:	08021f34 	.word	0x08021f34
 8018b04:	080224f8 	.word	0x080224f8
 8018b08:	08021f88 	.word	0x08021f88
 8018b0c:	08022518 	.word	0x08022518
 8018b10:	08022538 	.word	0x08022538
 8018b14:	2000f394 	.word	0x2000f394
 8018b18:	0802255c 	.word	0x0802255c

08018b1c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018b1c:	b5b0      	push	{r4, r5, r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d106      	bne.n	8018b38 <tcp_rexmit_rto_prepare+0x1c>
 8018b2a:	4b31      	ldr	r3, [pc, #196]	@ (8018bf0 <tcp_rexmit_rto_prepare+0xd4>)
 8018b2c:	f240 6263 	movw	r2, #1635	@ 0x663
 8018b30:	4930      	ldr	r1, [pc, #192]	@ (8018bf4 <tcp_rexmit_rto_prepare+0xd8>)
 8018b32:	4831      	ldr	r0, [pc, #196]	@ (8018bf8 <tcp_rexmit_rto_prepare+0xdc>)
 8018b34:	f004 fcd8 	bl	801d4e8 <iprintf>

  if (pcb->unacked == NULL) {
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d102      	bne.n	8018b46 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018b40:	f06f 0305 	mvn.w	r3, #5
 8018b44:	e050      	b.n	8018be8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018b4a:	60fb      	str	r3, [r7, #12]
 8018b4c:	e00b      	b.n	8018b66 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018b4e:	68f8      	ldr	r0, [r7, #12]
 8018b50:	f7ff fee4 	bl	801891c <tcp_output_segment_busy>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d002      	beq.n	8018b60 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018b5a:	f06f 0305 	mvn.w	r3, #5
 8018b5e:	e043      	b.n	8018be8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	60fb      	str	r3, [r7, #12]
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d1ef      	bne.n	8018b4e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018b6e:	68f8      	ldr	r0, [r7, #12]
 8018b70:	f7ff fed4 	bl	801891c <tcp_output_segment_busy>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d002      	beq.n	8018b80 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018b7a:	f06f 0305 	mvn.w	r3, #5
 8018b7e:	e033      	b.n	8018be8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	2200      	movs	r2, #0
 8018b94:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	8b5b      	ldrh	r3, [r3, #26]
 8018b9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018b9e:	b29a      	uxth	r2, r3
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	685b      	ldr	r3, [r3, #4]
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7f8 fcc9 	bl	8011542 <lwip_htonl>
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	891b      	ldrh	r3, [r3, #8]
 8018bb6:	461d      	mov	r5, r3
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	899b      	ldrh	r3, [r3, #12]
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7f8 fca9 	bl	8011518 <lwip_htons>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	f003 0303 	and.w	r3, r3, #3
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d001      	beq.n	8018bd6 <tcp_rexmit_rto_prepare+0xba>
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	e000      	b.n	8018bd8 <tcp_rexmit_rto_prepare+0xbc>
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	442b      	add	r3, r5
 8018bda:	18e2      	adds	r2, r4, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2200      	movs	r2, #0
 8018be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018be6:	2300      	movs	r3, #0
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3710      	adds	r7, #16
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bdb0      	pop	{r4, r5, r7, pc}
 8018bf0:	08021f34 	.word	0x08021f34
 8018bf4:	08022570 	.word	0x08022570
 8018bf8:	08021f88 	.word	0x08021f88

08018bfc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b082      	sub	sp, #8
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d106      	bne.n	8018c18 <tcp_rexmit_rto_commit+0x1c>
 8018c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8018c40 <tcp_rexmit_rto_commit+0x44>)
 8018c0c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018c10:	490c      	ldr	r1, [pc, #48]	@ (8018c44 <tcp_rexmit_rto_commit+0x48>)
 8018c12:	480d      	ldr	r0, [pc, #52]	@ (8018c48 <tcp_rexmit_rto_commit+0x4c>)
 8018c14:	f004 fc68 	bl	801d4e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018c1e:	2bff      	cmp	r3, #255	@ 0xff
 8018c20:	d007      	beq.n	8018c32 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018c28:	3301      	adds	r3, #1
 8018c2a:	b2da      	uxtb	r2, r3
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f7ff fc7e 	bl	8018534 <tcp_output>
}
 8018c38:	bf00      	nop
 8018c3a:	3708      	adds	r7, #8
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	08021f34 	.word	0x08021f34
 8018c44:	08022594 	.word	0x08022594
 8018c48:	08021f88 	.word	0x08021f88

08018c4c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d106      	bne.n	8018c68 <tcp_rexmit_rto+0x1c>
 8018c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8018c84 <tcp_rexmit_rto+0x38>)
 8018c5c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018c60:	4909      	ldr	r1, [pc, #36]	@ (8018c88 <tcp_rexmit_rto+0x3c>)
 8018c62:	480a      	ldr	r0, [pc, #40]	@ (8018c8c <tcp_rexmit_rto+0x40>)
 8018c64:	f004 fc40 	bl	801d4e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	f7ff ff57 	bl	8018b1c <tcp_rexmit_rto_prepare>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d102      	bne.n	8018c7a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f7ff ffc1 	bl	8018bfc <tcp_rexmit_rto_commit>
  }
}
 8018c7a:	bf00      	nop
 8018c7c:	3708      	adds	r7, #8
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
 8018c82:	bf00      	nop
 8018c84:	08021f34 	.word	0x08021f34
 8018c88:	080225b8 	.word	0x080225b8
 8018c8c:	08021f88 	.word	0x08021f88

08018c90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018c90:	b590      	push	{r4, r7, lr}
 8018c92:	b085      	sub	sp, #20
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d106      	bne.n	8018cac <tcp_rexmit+0x1c>
 8018c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8018d5c <tcp_rexmit+0xcc>)
 8018ca0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018ca4:	492e      	ldr	r1, [pc, #184]	@ (8018d60 <tcp_rexmit+0xd0>)
 8018ca6:	482f      	ldr	r0, [pc, #188]	@ (8018d64 <tcp_rexmit+0xd4>)
 8018ca8:	f004 fc1e 	bl	801d4e8 <iprintf>

  if (pcb->unacked == NULL) {
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d102      	bne.n	8018cba <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018cb4:	f06f 0305 	mvn.w	r3, #5
 8018cb8:	e04c      	b.n	8018d54 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018cbe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018cc0:	68b8      	ldr	r0, [r7, #8]
 8018cc2:	f7ff fe2b 	bl	801891c <tcp_output_segment_busy>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d002      	beq.n	8018cd2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018ccc:	f06f 0305 	mvn.w	r3, #5
 8018cd0:	e040      	b.n	8018d54 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018cd2:	68bb      	ldr	r3, [r7, #8]
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	336c      	adds	r3, #108	@ 0x6c
 8018cde:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ce0:	e002      	b.n	8018ce8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d011      	beq.n	8018d14 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	68db      	ldr	r3, [r3, #12]
 8018cf6:	685b      	ldr	r3, [r3, #4]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7f8 fc22 	bl	8011542 <lwip_htonl>
 8018cfe:	4604      	mov	r4, r0
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	68db      	ldr	r3, [r3, #12]
 8018d04:	685b      	ldr	r3, [r3, #4]
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7f8 fc1b 	bl	8011542 <lwip_htonl>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	dbe6      	blt.n	8018ce2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681a      	ldr	r2, [r3, #0]
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d103      	bne.n	8018d32 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018d38:	2bff      	cmp	r3, #255	@ 0xff
 8018d3a:	d007      	beq.n	8018d4c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018d42:	3301      	adds	r3, #1
 8018d44:	b2da      	uxtb	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2200      	movs	r2, #0
 8018d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018d52:	2300      	movs	r3, #0
}
 8018d54:	4618      	mov	r0, r3
 8018d56:	3714      	adds	r7, #20
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd90      	pop	{r4, r7, pc}
 8018d5c:	08021f34 	.word	0x08021f34
 8018d60:	080225d4 	.word	0x080225d4
 8018d64:	08021f88 	.word	0x08021f88

08018d68 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d106      	bne.n	8018d84 <tcp_rexmit_fast+0x1c>
 8018d76:	4b2a      	ldr	r3, [pc, #168]	@ (8018e20 <tcp_rexmit_fast+0xb8>)
 8018d78:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8018d7c:	4929      	ldr	r1, [pc, #164]	@ (8018e24 <tcp_rexmit_fast+0xbc>)
 8018d7e:	482a      	ldr	r0, [pc, #168]	@ (8018e28 <tcp_rexmit_fast+0xc0>)
 8018d80:	f004 fbb2 	bl	801d4e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d045      	beq.n	8018e18 <tcp_rexmit_fast+0xb0>
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	8b5b      	ldrh	r3, [r3, #26]
 8018d90:	f003 0304 	and.w	r3, r3, #4
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d13f      	bne.n	8018e18 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f7ff ff79 	bl	8018c90 <tcp_rexmit>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d139      	bne.n	8018e18 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018db0:	4293      	cmp	r3, r2
 8018db2:	bf28      	it	cs
 8018db4:	4613      	movcs	r3, r2
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	da00      	bge.n	8018dbe <tcp_rexmit_fast+0x56>
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	105b      	asrs	r3, r3, #1
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018dce:	461a      	mov	r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d206      	bcs.n	8018de8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dde:	005b      	lsls	r3, r3, #1
 8018de0:	b29a      	uxth	r2, r3
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018df2:	4619      	mov	r1, r3
 8018df4:	0049      	lsls	r1, r1, #1
 8018df6:	440b      	add	r3, r1
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	4413      	add	r3, r2
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	8b5b      	ldrh	r3, [r3, #26]
 8018e08:	f043 0304 	orr.w	r3, r3, #4
 8018e0c:	b29a      	uxth	r2, r3
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2200      	movs	r2, #0
 8018e16:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018e18:	bf00      	nop
 8018e1a:	3708      	adds	r7, #8
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd80      	pop	{r7, pc}
 8018e20:	08021f34 	.word	0x08021f34
 8018e24:	080225ec 	.word	0x080225ec
 8018e28:	08021f88 	.word	0x08021f88

08018e2c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b086      	sub	sp, #24
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	60f8      	str	r0, [r7, #12]
 8018e34:	607b      	str	r3, [r7, #4]
 8018e36:	460b      	mov	r3, r1
 8018e38:	817b      	strh	r3, [r7, #10]
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018e3e:	897a      	ldrh	r2, [r7, #10]
 8018e40:	893b      	ldrh	r3, [r7, #8]
 8018e42:	4413      	add	r3, r2
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	3314      	adds	r3, #20
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e4e:	4619      	mov	r1, r3
 8018e50:	2022      	movs	r0, #34	@ 0x22
 8018e52:	f7f9 fca5 	bl	80127a0 <pbuf_alloc>
 8018e56:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d04d      	beq.n	8018efa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018e5e:	897b      	ldrh	r3, [r7, #10]
 8018e60:	3313      	adds	r3, #19
 8018e62:	697a      	ldr	r2, [r7, #20]
 8018e64:	8952      	ldrh	r2, [r2, #10]
 8018e66:	4293      	cmp	r3, r2
 8018e68:	db06      	blt.n	8018e78 <tcp_output_alloc_header_common+0x4c>
 8018e6a:	4b26      	ldr	r3, [pc, #152]	@ (8018f04 <tcp_output_alloc_header_common+0xd8>)
 8018e6c:	f240 7223 	movw	r2, #1827	@ 0x723
 8018e70:	4925      	ldr	r1, [pc, #148]	@ (8018f08 <tcp_output_alloc_header_common+0xdc>)
 8018e72:	4826      	ldr	r0, [pc, #152]	@ (8018f0c <tcp_output_alloc_header_common+0xe0>)
 8018e74:	f004 fb38 	bl	801d4e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018e7e:	8c3b      	ldrh	r3, [r7, #32]
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7f8 fb49 	bl	8011518 <lwip_htons>
 8018e86:	4603      	mov	r3, r0
 8018e88:	461a      	mov	r2, r3
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018e8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7f8 fb41 	bl	8011518 <lwip_htons>
 8018e96:	4603      	mov	r3, r0
 8018e98:	461a      	mov	r2, r3
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018e9e:	693b      	ldr	r3, [r7, #16]
 8018ea0:	687a      	ldr	r2, [r7, #4]
 8018ea2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018ea4:	68f8      	ldr	r0, [r7, #12]
 8018ea6:	f7f8 fb4c 	bl	8011542 <lwip_htonl>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018eb0:	897b      	ldrh	r3, [r7, #10]
 8018eb2:	089b      	lsrs	r3, r3, #2
 8018eb4:	b29b      	uxth	r3, r3
 8018eb6:	3305      	adds	r3, #5
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	031b      	lsls	r3, r3, #12
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018ec2:	b29b      	uxth	r3, r3
 8018ec4:	4313      	orrs	r3, r2
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7f8 fb25 	bl	8011518 <lwip_htons>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	461a      	mov	r2, r3
 8018ed2:	693b      	ldr	r3, [r7, #16]
 8018ed4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018ed6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7f8 fb1d 	bl	8011518 <lwip_htons>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	461a      	mov	r2, r3
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018ee6:	693b      	ldr	r3, [r7, #16]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	741a      	strb	r2, [r3, #16]
 8018eec:	2200      	movs	r2, #0
 8018eee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018ef0:	693b      	ldr	r3, [r7, #16]
 8018ef2:	2200      	movs	r2, #0
 8018ef4:	749a      	strb	r2, [r3, #18]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018efa:	697b      	ldr	r3, [r7, #20]
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3718      	adds	r7, #24
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd80      	pop	{r7, pc}
 8018f04:	08021f34 	.word	0x08021f34
 8018f08:	0802260c 	.word	0x0802260c
 8018f0c:	08021f88 	.word	0x08021f88

08018f10 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018f10:	b5b0      	push	{r4, r5, r7, lr}
 8018f12:	b08a      	sub	sp, #40	@ 0x28
 8018f14:	af04      	add	r7, sp, #16
 8018f16:	60f8      	str	r0, [r7, #12]
 8018f18:	607b      	str	r3, [r7, #4]
 8018f1a:	460b      	mov	r3, r1
 8018f1c:	817b      	strh	r3, [r7, #10]
 8018f1e:	4613      	mov	r3, r2
 8018f20:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d106      	bne.n	8018f36 <tcp_output_alloc_header+0x26>
 8018f28:	4b15      	ldr	r3, [pc, #84]	@ (8018f80 <tcp_output_alloc_header+0x70>)
 8018f2a:	f240 7242 	movw	r2, #1858	@ 0x742
 8018f2e:	4915      	ldr	r1, [pc, #84]	@ (8018f84 <tcp_output_alloc_header+0x74>)
 8018f30:	4815      	ldr	r0, [pc, #84]	@ (8018f88 <tcp_output_alloc_header+0x78>)
 8018f32:	f004 fad9 	bl	801d4e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	8adb      	ldrh	r3, [r3, #22]
 8018f3e:	68fa      	ldr	r2, [r7, #12]
 8018f40:	8b12      	ldrh	r2, [r2, #24]
 8018f42:	68f9      	ldr	r1, [r7, #12]
 8018f44:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8018f46:	893d      	ldrh	r5, [r7, #8]
 8018f48:	897c      	ldrh	r4, [r7, #10]
 8018f4a:	9103      	str	r1, [sp, #12]
 8018f4c:	2110      	movs	r1, #16
 8018f4e:	9102      	str	r1, [sp, #8]
 8018f50:	9201      	str	r2, [sp, #4]
 8018f52:	9300      	str	r3, [sp, #0]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	462a      	mov	r2, r5
 8018f58:	4621      	mov	r1, r4
 8018f5a:	f7ff ff67 	bl	8018e2c <tcp_output_alloc_header_common>
 8018f5e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d006      	beq.n	8018f74 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f6a:	68fa      	ldr	r2, [r7, #12]
 8018f6c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018f6e:	441a      	add	r2, r3
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018f74:	697b      	ldr	r3, [r7, #20]
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3718      	adds	r7, #24
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8018f7e:	bf00      	nop
 8018f80:	08021f34 	.word	0x08021f34
 8018f84:	0802263c 	.word	0x0802263c
 8018f88:	08021f88 	.word	0x08021f88

08018f8c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b088      	sub	sp, #32
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	4611      	mov	r1, r2
 8018f98:	461a      	mov	r2, r3
 8018f9a:	460b      	mov	r3, r1
 8018f9c:	71fb      	strb	r3, [r7, #7]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d106      	bne.n	8018fba <tcp_output_fill_options+0x2e>
 8018fac:	4b12      	ldr	r3, [pc, #72]	@ (8018ff8 <tcp_output_fill_options+0x6c>)
 8018fae:	f240 7256 	movw	r2, #1878	@ 0x756
 8018fb2:	4912      	ldr	r1, [pc, #72]	@ (8018ffc <tcp_output_fill_options+0x70>)
 8018fb4:	4812      	ldr	r0, [pc, #72]	@ (8019000 <tcp_output_fill_options+0x74>)
 8018fb6:	f004 fa97 	bl	801d4e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018fba:	68bb      	ldr	r3, [r7, #8]
 8018fbc:	685b      	ldr	r3, [r3, #4]
 8018fbe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018fc0:	69bb      	ldr	r3, [r7, #24]
 8018fc2:	3314      	adds	r3, #20
 8018fc4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018fc6:	8bfb      	ldrh	r3, [r7, #30]
 8018fc8:	009b      	lsls	r3, r3, #2
 8018fca:	461a      	mov	r2, r3
 8018fcc:	79fb      	ldrb	r3, [r7, #7]
 8018fce:	009b      	lsls	r3, r3, #2
 8018fd0:	f003 0304 	and.w	r3, r3, #4
 8018fd4:	4413      	add	r3, r2
 8018fd6:	3314      	adds	r3, #20
 8018fd8:	69ba      	ldr	r2, [r7, #24]
 8018fda:	4413      	add	r3, r2
 8018fdc:	697a      	ldr	r2, [r7, #20]
 8018fde:	429a      	cmp	r2, r3
 8018fe0:	d006      	beq.n	8018ff0 <tcp_output_fill_options+0x64>
 8018fe2:	4b05      	ldr	r3, [pc, #20]	@ (8018ff8 <tcp_output_fill_options+0x6c>)
 8018fe4:	f240 7275 	movw	r2, #1909	@ 0x775
 8018fe8:	4906      	ldr	r1, [pc, #24]	@ (8019004 <tcp_output_fill_options+0x78>)
 8018fea:	4805      	ldr	r0, [pc, #20]	@ (8019000 <tcp_output_fill_options+0x74>)
 8018fec:	f004 fa7c 	bl	801d4e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018ff0:	bf00      	nop
 8018ff2:	3720      	adds	r7, #32
 8018ff4:	46bd      	mov	sp, r7
 8018ff6:	bd80      	pop	{r7, pc}
 8018ff8:	08021f34 	.word	0x08021f34
 8018ffc:	08022664 	.word	0x08022664
 8019000:	08021f88 	.word	0x08021f88
 8019004:	0802255c 	.word	0x0802255c

08019008 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b08a      	sub	sp, #40	@ 0x28
 801900c:	af04      	add	r7, sp, #16
 801900e:	60f8      	str	r0, [r7, #12]
 8019010:	60b9      	str	r1, [r7, #8]
 8019012:	607a      	str	r2, [r7, #4]
 8019014:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d106      	bne.n	801902a <tcp_output_control_segment+0x22>
 801901c:	4b1c      	ldr	r3, [pc, #112]	@ (8019090 <tcp_output_control_segment+0x88>)
 801901e:	f240 7287 	movw	r2, #1927	@ 0x787
 8019022:	491c      	ldr	r1, [pc, #112]	@ (8019094 <tcp_output_control_segment+0x8c>)
 8019024:	481c      	ldr	r0, [pc, #112]	@ (8019098 <tcp_output_control_segment+0x90>)
 8019026:	f004 fa5f 	bl	801d4e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801902a:	683a      	ldr	r2, [r7, #0]
 801902c:	6879      	ldr	r1, [r7, #4]
 801902e:	68f8      	ldr	r0, [r7, #12]
 8019030:	f7fe faea 	bl	8017608 <tcp_route>
 8019034:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019036:	693b      	ldr	r3, [r7, #16]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d102      	bne.n	8019042 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801903c:	23fc      	movs	r3, #252	@ 0xfc
 801903e:	75fb      	strb	r3, [r7, #23]
 8019040:	e01c      	b.n	801907c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d006      	beq.n	8019056 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	7adb      	ldrb	r3, [r3, #11]
 801904c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	7a9b      	ldrb	r3, [r3, #10]
 8019052:	757b      	strb	r3, [r7, #21]
 8019054:	e003      	b.n	801905e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019056:	23ff      	movs	r3, #255	@ 0xff
 8019058:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801905a:	2300      	movs	r3, #0
 801905c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801905e:	7dba      	ldrb	r2, [r7, #22]
 8019060:	693b      	ldr	r3, [r7, #16]
 8019062:	9302      	str	r3, [sp, #8]
 8019064:	2306      	movs	r3, #6
 8019066:	9301      	str	r3, [sp, #4]
 8019068:	7d7b      	ldrb	r3, [r7, #21]
 801906a:	9300      	str	r3, [sp, #0]
 801906c:	4613      	mov	r3, r2
 801906e:	683a      	ldr	r2, [r7, #0]
 8019070:	6879      	ldr	r1, [r7, #4]
 8019072:	68b8      	ldr	r0, [r7, #8]
 8019074:	f002 fad0 	bl	801b618 <ip4_output_if>
 8019078:	4603      	mov	r3, r0
 801907a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801907c:	68b8      	ldr	r0, [r7, #8]
 801907e:	f7f9 fe73 	bl	8012d68 <pbuf_free>
  return err;
 8019082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019086:	4618      	mov	r0, r3
 8019088:	3718      	adds	r7, #24
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	08021f34 	.word	0x08021f34
 8019094:	0802268c 	.word	0x0802268c
 8019098:	08021f88 	.word	0x08021f88

0801909c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801909c:	b590      	push	{r4, r7, lr}
 801909e:	b08b      	sub	sp, #44	@ 0x2c
 80190a0:	af04      	add	r7, sp, #16
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]
 80190a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d106      	bne.n	80190be <tcp_rst+0x22>
 80190b0:	4b1f      	ldr	r3, [pc, #124]	@ (8019130 <tcp_rst+0x94>)
 80190b2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80190b6:	491f      	ldr	r1, [pc, #124]	@ (8019134 <tcp_rst+0x98>)
 80190b8:	481f      	ldr	r0, [pc, #124]	@ (8019138 <tcp_rst+0x9c>)
 80190ba:	f004 fa15 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80190be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d106      	bne.n	80190d2 <tcp_rst+0x36>
 80190c4:	4b1a      	ldr	r3, [pc, #104]	@ (8019130 <tcp_rst+0x94>)
 80190c6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80190ca:	491c      	ldr	r1, [pc, #112]	@ (801913c <tcp_rst+0xa0>)
 80190cc:	481a      	ldr	r0, [pc, #104]	@ (8019138 <tcp_rst+0x9c>)
 80190ce:	f004 fa0b 	bl	801d4e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190d2:	2300      	movs	r3, #0
 80190d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80190d6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80190da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80190dc:	7dfb      	ldrb	r3, [r7, #23]
 80190de:	b29c      	uxth	r4, r3
 80190e0:	68b8      	ldr	r0, [r7, #8]
 80190e2:	f7f8 fa2e 	bl	8011542 <lwip_htonl>
 80190e6:	4602      	mov	r2, r0
 80190e8:	8abb      	ldrh	r3, [r7, #20]
 80190ea:	9303      	str	r3, [sp, #12]
 80190ec:	2314      	movs	r3, #20
 80190ee:	9302      	str	r3, [sp, #8]
 80190f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80190f2:	9301      	str	r3, [sp, #4]
 80190f4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	4613      	mov	r3, r2
 80190fa:	2200      	movs	r2, #0
 80190fc:	4621      	mov	r1, r4
 80190fe:	6878      	ldr	r0, [r7, #4]
 8019100:	f7ff fe94 	bl	8018e2c <tcp_output_alloc_header_common>
 8019104:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019106:	693b      	ldr	r3, [r7, #16]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d00c      	beq.n	8019126 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801910c:	7dfb      	ldrb	r3, [r7, #23]
 801910e:	2200      	movs	r2, #0
 8019110:	6939      	ldr	r1, [r7, #16]
 8019112:	68f8      	ldr	r0, [r7, #12]
 8019114:	f7ff ff3a 	bl	8018f8c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	6939      	ldr	r1, [r7, #16]
 801911e:	68f8      	ldr	r0, [r7, #12]
 8019120:	f7ff ff72 	bl	8019008 <tcp_output_control_segment>
 8019124:	e000      	b.n	8019128 <tcp_rst+0x8c>
    return;
 8019126:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019128:	371c      	adds	r7, #28
 801912a:	46bd      	mov	sp, r7
 801912c:	bd90      	pop	{r4, r7, pc}
 801912e:	bf00      	nop
 8019130:	08021f34 	.word	0x08021f34
 8019134:	080226b8 	.word	0x080226b8
 8019138:	08021f88 	.word	0x08021f88
 801913c:	080226d4 	.word	0x080226d4

08019140 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019140:	b590      	push	{r4, r7, lr}
 8019142:	b087      	sub	sp, #28
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019148:	2300      	movs	r3, #0
 801914a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801914c:	2300      	movs	r3, #0
 801914e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d106      	bne.n	8019164 <tcp_send_empty_ack+0x24>
 8019156:	4b28      	ldr	r3, [pc, #160]	@ (80191f8 <tcp_send_empty_ack+0xb8>)
 8019158:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801915c:	4927      	ldr	r1, [pc, #156]	@ (80191fc <tcp_send_empty_ack+0xbc>)
 801915e:	4828      	ldr	r0, [pc, #160]	@ (8019200 <tcp_send_empty_ack+0xc0>)
 8019160:	f004 f9c2 	bl	801d4e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019164:	7dfb      	ldrb	r3, [r7, #23]
 8019166:	009b      	lsls	r3, r3, #2
 8019168:	b2db      	uxtb	r3, r3
 801916a:	f003 0304 	and.w	r3, r3, #4
 801916e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019170:	7d7b      	ldrb	r3, [r7, #21]
 8019172:	b29c      	uxth	r4, r3
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019178:	4618      	mov	r0, r3
 801917a:	f7f8 f9e2 	bl	8011542 <lwip_htonl>
 801917e:	4603      	mov	r3, r0
 8019180:	2200      	movs	r2, #0
 8019182:	4621      	mov	r1, r4
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	f7ff fec3 	bl	8018f10 <tcp_output_alloc_header>
 801918a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801918c:	693b      	ldr	r3, [r7, #16]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d109      	bne.n	80191a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	8b5b      	ldrh	r3, [r3, #26]
 8019196:	f043 0303 	orr.w	r3, r3, #3
 801919a:	b29a      	uxth	r2, r3
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80191a0:	f06f 0301 	mvn.w	r3, #1
 80191a4:	e023      	b.n	80191ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80191a6:	7dbb      	ldrb	r3, [r7, #22]
 80191a8:	7dfa      	ldrb	r2, [r7, #23]
 80191aa:	6939      	ldr	r1, [r7, #16]
 80191ac:	6878      	ldr	r0, [r7, #4]
 80191ae:	f7ff feed 	bl	8018f8c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191b2:	687a      	ldr	r2, [r7, #4]
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	3304      	adds	r3, #4
 80191b8:	6939      	ldr	r1, [r7, #16]
 80191ba:	6878      	ldr	r0, [r7, #4]
 80191bc:	f7ff ff24 	bl	8019008 <tcp_output_control_segment>
 80191c0:	4603      	mov	r3, r0
 80191c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80191c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d007      	beq.n	80191dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	8b5b      	ldrh	r3, [r3, #26]
 80191d0:	f043 0303 	orr.w	r3, r3, #3
 80191d4:	b29a      	uxth	r2, r3
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	835a      	strh	r2, [r3, #26]
 80191da:	e006      	b.n	80191ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	8b5b      	ldrh	r3, [r3, #26]
 80191e0:	f023 0303 	bic.w	r3, r3, #3
 80191e4:	b29a      	uxth	r2, r3
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80191ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	371c      	adds	r7, #28
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd90      	pop	{r4, r7, pc}
 80191f6:	bf00      	nop
 80191f8:	08021f34 	.word	0x08021f34
 80191fc:	080226f0 	.word	0x080226f0
 8019200:	08021f88 	.word	0x08021f88

08019204 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019204:	b590      	push	{r4, r7, lr}
 8019206:	b087      	sub	sp, #28
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801920c:	2300      	movs	r3, #0
 801920e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d106      	bne.n	8019224 <tcp_keepalive+0x20>
 8019216:	4b18      	ldr	r3, [pc, #96]	@ (8019278 <tcp_keepalive+0x74>)
 8019218:	f640 0224 	movw	r2, #2084	@ 0x824
 801921c:	4917      	ldr	r1, [pc, #92]	@ (801927c <tcp_keepalive+0x78>)
 801921e:	4818      	ldr	r0, [pc, #96]	@ (8019280 <tcp_keepalive+0x7c>)
 8019220:	f004 f962 	bl	801d4e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019224:	7dfb      	ldrb	r3, [r7, #23]
 8019226:	b29c      	uxth	r4, r3
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801922c:	3b01      	subs	r3, #1
 801922e:	4618      	mov	r0, r3
 8019230:	f7f8 f987 	bl	8011542 <lwip_htonl>
 8019234:	4603      	mov	r3, r0
 8019236:	2200      	movs	r2, #0
 8019238:	4621      	mov	r1, r4
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f7ff fe68 	bl	8018f10 <tcp_output_alloc_header>
 8019240:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019242:	693b      	ldr	r3, [r7, #16]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d102      	bne.n	801924e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019248:	f04f 33ff 	mov.w	r3, #4294967295
 801924c:	e010      	b.n	8019270 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801924e:	7dfb      	ldrb	r3, [r7, #23]
 8019250:	2200      	movs	r2, #0
 8019252:	6939      	ldr	r1, [r7, #16]
 8019254:	6878      	ldr	r0, [r7, #4]
 8019256:	f7ff fe99 	bl	8018f8c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801925a:	687a      	ldr	r2, [r7, #4]
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	3304      	adds	r3, #4
 8019260:	6939      	ldr	r1, [r7, #16]
 8019262:	6878      	ldr	r0, [r7, #4]
 8019264:	f7ff fed0 	bl	8019008 <tcp_output_control_segment>
 8019268:	4603      	mov	r3, r0
 801926a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801926c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019270:	4618      	mov	r0, r3
 8019272:	371c      	adds	r7, #28
 8019274:	46bd      	mov	sp, r7
 8019276:	bd90      	pop	{r4, r7, pc}
 8019278:	08021f34 	.word	0x08021f34
 801927c:	08022710 	.word	0x08022710
 8019280:	08021f88 	.word	0x08021f88

08019284 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019284:	b590      	push	{r4, r7, lr}
 8019286:	b08b      	sub	sp, #44	@ 0x2c
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801928c:	2300      	movs	r3, #0
 801928e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d106      	bne.n	80192a6 <tcp_zero_window_probe+0x22>
 8019298:	4b4c      	ldr	r3, [pc, #304]	@ (80193cc <tcp_zero_window_probe+0x148>)
 801929a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801929e:	494c      	ldr	r1, [pc, #304]	@ (80193d0 <tcp_zero_window_probe+0x14c>)
 80192a0:	484c      	ldr	r0, [pc, #304]	@ (80193d4 <tcp_zero_window_probe+0x150>)
 80192a2:	f004 f921 	bl	801d4e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80192aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80192ac:	6a3b      	ldr	r3, [r7, #32]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d101      	bne.n	80192b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80192b2:	2300      	movs	r3, #0
 80192b4:	e086      	b.n	80193c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80192bc:	2bff      	cmp	r3, #255	@ 0xff
 80192be:	d007      	beq.n	80192d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80192c6:	3301      	adds	r3, #1
 80192c8:	b2da      	uxtb	r2, r3
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80192d0:	6a3b      	ldr	r3, [r7, #32]
 80192d2:	68db      	ldr	r3, [r3, #12]
 80192d4:	899b      	ldrh	r3, [r3, #12]
 80192d6:	b29b      	uxth	r3, r3
 80192d8:	4618      	mov	r0, r3
 80192da:	f7f8 f91d 	bl	8011518 <lwip_htons>
 80192de:	4603      	mov	r3, r0
 80192e0:	b2db      	uxtb	r3, r3
 80192e2:	f003 0301 	and.w	r3, r3, #1
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d005      	beq.n	80192f6 <tcp_zero_window_probe+0x72>
 80192ea:	6a3b      	ldr	r3, [r7, #32]
 80192ec:	891b      	ldrh	r3, [r3, #8]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d101      	bne.n	80192f6 <tcp_zero_window_probe+0x72>
 80192f2:	2301      	movs	r3, #1
 80192f4:	e000      	b.n	80192f8 <tcp_zero_window_probe+0x74>
 80192f6:	2300      	movs	r3, #0
 80192f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80192fa:	7ffb      	ldrb	r3, [r7, #31]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	bf0c      	ite	eq
 8019300:	2301      	moveq	r3, #1
 8019302:	2300      	movne	r3, #0
 8019304:	b2db      	uxtb	r3, r3
 8019306:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801930c:	b299      	uxth	r1, r3
 801930e:	6a3b      	ldr	r3, [r7, #32]
 8019310:	68db      	ldr	r3, [r3, #12]
 8019312:	685b      	ldr	r3, [r3, #4]
 8019314:	8bba      	ldrh	r2, [r7, #28]
 8019316:	6878      	ldr	r0, [r7, #4]
 8019318:	f7ff fdfa 	bl	8018f10 <tcp_output_alloc_header>
 801931c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d102      	bne.n	801932a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019324:	f04f 33ff 	mov.w	r3, #4294967295
 8019328:	e04c      	b.n	80193c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801932a:	69bb      	ldr	r3, [r7, #24]
 801932c:	685b      	ldr	r3, [r3, #4]
 801932e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019330:	7ffb      	ldrb	r3, [r7, #31]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d011      	beq.n	801935a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	899b      	ldrh	r3, [r3, #12]
 801933a:	b29b      	uxth	r3, r3
 801933c:	b21b      	sxth	r3, r3
 801933e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019342:	b21c      	sxth	r4, r3
 8019344:	2011      	movs	r0, #17
 8019346:	f7f8 f8e7 	bl	8011518 <lwip_htons>
 801934a:	4603      	mov	r3, r0
 801934c:	b21b      	sxth	r3, r3
 801934e:	4323      	orrs	r3, r4
 8019350:	b21b      	sxth	r3, r3
 8019352:	b29a      	uxth	r2, r3
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	819a      	strh	r2, [r3, #12]
 8019358:	e010      	b.n	801937c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	3314      	adds	r3, #20
 8019360:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019362:	6a3b      	ldr	r3, [r7, #32]
 8019364:	6858      	ldr	r0, [r3, #4]
 8019366:	6a3b      	ldr	r3, [r7, #32]
 8019368:	685b      	ldr	r3, [r3, #4]
 801936a:	891a      	ldrh	r2, [r3, #8]
 801936c:	6a3b      	ldr	r3, [r7, #32]
 801936e:	891b      	ldrh	r3, [r3, #8]
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	b29b      	uxth	r3, r3
 8019374:	2201      	movs	r2, #1
 8019376:	6939      	ldr	r1, [r7, #16]
 8019378:	f7f9 fefc 	bl	8013174 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801937c:	6a3b      	ldr	r3, [r7, #32]
 801937e:	68db      	ldr	r3, [r3, #12]
 8019380:	685b      	ldr	r3, [r3, #4]
 8019382:	4618      	mov	r0, r3
 8019384:	f7f8 f8dd 	bl	8011542 <lwip_htonl>
 8019388:	4603      	mov	r3, r0
 801938a:	3301      	adds	r3, #1
 801938c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	1ad3      	subs	r3, r2, r3
 8019396:	2b00      	cmp	r3, #0
 8019398:	da02      	bge.n	80193a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	68fa      	ldr	r2, [r7, #12]
 801939e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80193a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193a4:	2200      	movs	r2, #0
 80193a6:	69b9      	ldr	r1, [r7, #24]
 80193a8:	6878      	ldr	r0, [r7, #4]
 80193aa:	f7ff fdef 	bl	8018f8c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	3304      	adds	r3, #4
 80193b4:	69b9      	ldr	r1, [r7, #24]
 80193b6:	6878      	ldr	r0, [r7, #4]
 80193b8:	f7ff fe26 	bl	8019008 <tcp_output_control_segment>
 80193bc:	4603      	mov	r3, r0
 80193be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80193c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80193c4:	4618      	mov	r0, r3
 80193c6:	372c      	adds	r7, #44	@ 0x2c
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd90      	pop	{r4, r7, pc}
 80193cc:	08021f34 	.word	0x08021f34
 80193d0:	0802272c 	.word	0x0802272c
 80193d4:	08021f88 	.word	0x08021f88

080193d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80193e0:	f7f9 ffb6 	bl	8013350 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80193e4:	4b0a      	ldr	r3, [pc, #40]	@ (8019410 <tcpip_tcp_timer+0x38>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d103      	bne.n	80193f4 <tcpip_tcp_timer+0x1c>
 80193ec:	4b09      	ldr	r3, [pc, #36]	@ (8019414 <tcpip_tcp_timer+0x3c>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d005      	beq.n	8019400 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80193f4:	2200      	movs	r2, #0
 80193f6:	4908      	ldr	r1, [pc, #32]	@ (8019418 <tcpip_tcp_timer+0x40>)
 80193f8:	20fa      	movs	r0, #250	@ 0xfa
 80193fa:	f000 f8f3 	bl	80195e4 <sys_timeout>
 80193fe:	e003      	b.n	8019408 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019400:	4b06      	ldr	r3, [pc, #24]	@ (801941c <tcpip_tcp_timer+0x44>)
 8019402:	2200      	movs	r2, #0
 8019404:	601a      	str	r2, [r3, #0]
  }
}
 8019406:	bf00      	nop
 8019408:	bf00      	nop
 801940a:	3708      	adds	r7, #8
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	2000f3a0 	.word	0x2000f3a0
 8019414:	2000f3a4 	.word	0x2000f3a4
 8019418:	080193d9 	.word	0x080193d9
 801941c:	2000f3ec 	.word	0x2000f3ec

08019420 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019424:	4b0a      	ldr	r3, [pc, #40]	@ (8019450 <tcp_timer_needed+0x30>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d10f      	bne.n	801944c <tcp_timer_needed+0x2c>
 801942c:	4b09      	ldr	r3, [pc, #36]	@ (8019454 <tcp_timer_needed+0x34>)
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d103      	bne.n	801943c <tcp_timer_needed+0x1c>
 8019434:	4b08      	ldr	r3, [pc, #32]	@ (8019458 <tcp_timer_needed+0x38>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d007      	beq.n	801944c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801943c:	4b04      	ldr	r3, [pc, #16]	@ (8019450 <tcp_timer_needed+0x30>)
 801943e:	2201      	movs	r2, #1
 8019440:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019442:	2200      	movs	r2, #0
 8019444:	4905      	ldr	r1, [pc, #20]	@ (801945c <tcp_timer_needed+0x3c>)
 8019446:	20fa      	movs	r0, #250	@ 0xfa
 8019448:	f000 f8cc 	bl	80195e4 <sys_timeout>
  }
}
 801944c:	bf00      	nop
 801944e:	bd80      	pop	{r7, pc}
 8019450:	2000f3ec 	.word	0x2000f3ec
 8019454:	2000f3a0 	.word	0x2000f3a0
 8019458:	2000f3a4 	.word	0x2000f3a4
 801945c:	080193d9 	.word	0x080193d9

08019460 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b086      	sub	sp, #24
 8019464:	af00      	add	r7, sp, #0
 8019466:	60f8      	str	r0, [r7, #12]
 8019468:	60b9      	str	r1, [r7, #8]
 801946a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801946c:	200a      	movs	r0, #10
 801946e:	f7f8 fd61 	bl	8011f34 <memp_malloc>
 8019472:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d109      	bne.n	801948e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801947a:	693b      	ldr	r3, [r7, #16]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d151      	bne.n	8019524 <sys_timeout_abs+0xc4>
 8019480:	4b2a      	ldr	r3, [pc, #168]	@ (801952c <sys_timeout_abs+0xcc>)
 8019482:	22be      	movs	r2, #190	@ 0xbe
 8019484:	492a      	ldr	r1, [pc, #168]	@ (8019530 <sys_timeout_abs+0xd0>)
 8019486:	482b      	ldr	r0, [pc, #172]	@ (8019534 <sys_timeout_abs+0xd4>)
 8019488:	f004 f82e 	bl	801d4e8 <iprintf>
    return;
 801948c:	e04a      	b.n	8019524 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	2200      	movs	r2, #0
 8019492:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	68ba      	ldr	r2, [r7, #8]
 8019498:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801949a:	693b      	ldr	r3, [r7, #16]
 801949c:	687a      	ldr	r2, [r7, #4]
 801949e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80194a0:	693b      	ldr	r3, [r7, #16]
 80194a2:	68fa      	ldr	r2, [r7, #12]
 80194a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80194a6:	4b24      	ldr	r3, [pc, #144]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d103      	bne.n	80194b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80194ae:	4a22      	ldr	r2, [pc, #136]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	6013      	str	r3, [r2, #0]
    return;
 80194b4:	e037      	b.n	8019526 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80194b6:	693b      	ldr	r3, [r7, #16]
 80194b8:	685a      	ldr	r2, [r3, #4]
 80194ba:	4b1f      	ldr	r3, [pc, #124]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	1ad3      	subs	r3, r2, r3
 80194c2:	0fdb      	lsrs	r3, r3, #31
 80194c4:	f003 0301 	and.w	r3, r3, #1
 80194c8:	b2db      	uxtb	r3, r3
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d007      	beq.n	80194de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80194ce:	4b1a      	ldr	r3, [pc, #104]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194d0:	681a      	ldr	r2, [r3, #0]
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80194d6:	4a18      	ldr	r2, [pc, #96]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	6013      	str	r3, [r2, #0]
 80194dc:	e023      	b.n	8019526 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80194de:	4b16      	ldr	r3, [pc, #88]	@ (8019538 <sys_timeout_abs+0xd8>)
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	617b      	str	r3, [r7, #20]
 80194e4:	e01a      	b.n	801951c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d00b      	beq.n	8019506 <sys_timeout_abs+0xa6>
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	685a      	ldr	r2, [r3, #4]
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	1ad3      	subs	r3, r2, r3
 80194fa:	0fdb      	lsrs	r3, r3, #31
 80194fc:	f003 0301 	and.w	r3, r3, #1
 8019500:	b2db      	uxtb	r3, r3
 8019502:	2b00      	cmp	r3, #0
 8019504:	d007      	beq.n	8019516 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	693b      	ldr	r3, [r7, #16]
 801950c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	693a      	ldr	r2, [r7, #16]
 8019512:	601a      	str	r2, [r3, #0]
        break;
 8019514:	e007      	b.n	8019526 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019516:	697b      	ldr	r3, [r7, #20]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	617b      	str	r3, [r7, #20]
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d1e1      	bne.n	80194e6 <sys_timeout_abs+0x86>
 8019522:	e000      	b.n	8019526 <sys_timeout_abs+0xc6>
    return;
 8019524:	bf00      	nop
      }
    }
  }
}
 8019526:	3718      	adds	r7, #24
 8019528:	46bd      	mov	sp, r7
 801952a:	bd80      	pop	{r7, pc}
 801952c:	08022750 	.word	0x08022750
 8019530:	08022784 	.word	0x08022784
 8019534:	080227c4 	.word	0x080227c4
 8019538:	2000f3e4 	.word	0x2000f3e4

0801953c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b086      	sub	sp, #24
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	4798      	blx	r3

  now = sys_now();
 801954e:	f7f1 fb3b 	bl	800abc8 <sys_now>
 8019552:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019554:	697b      	ldr	r3, [r7, #20]
 8019556:	681a      	ldr	r2, [r3, #0]
 8019558:	4b0f      	ldr	r3, [pc, #60]	@ (8019598 <lwip_cyclic_timer+0x5c>)
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	4413      	add	r3, r2
 801955e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019560:	68fa      	ldr	r2, [r7, #12]
 8019562:	693b      	ldr	r3, [r7, #16]
 8019564:	1ad3      	subs	r3, r2, r3
 8019566:	0fdb      	lsrs	r3, r3, #31
 8019568:	f003 0301 	and.w	r3, r3, #1
 801956c:	b2db      	uxtb	r3, r3
 801956e:	2b00      	cmp	r3, #0
 8019570:	d009      	beq.n	8019586 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019572:	697b      	ldr	r3, [r7, #20]
 8019574:	681a      	ldr	r2, [r3, #0]
 8019576:	693b      	ldr	r3, [r7, #16]
 8019578:	4413      	add	r3, r2
 801957a:	687a      	ldr	r2, [r7, #4]
 801957c:	4907      	ldr	r1, [pc, #28]	@ (801959c <lwip_cyclic_timer+0x60>)
 801957e:	4618      	mov	r0, r3
 8019580:	f7ff ff6e 	bl	8019460 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019584:	e004      	b.n	8019590 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019586:	687a      	ldr	r2, [r7, #4]
 8019588:	4904      	ldr	r1, [pc, #16]	@ (801959c <lwip_cyclic_timer+0x60>)
 801958a:	68f8      	ldr	r0, [r7, #12]
 801958c:	f7ff ff68 	bl	8019460 <sys_timeout_abs>
}
 8019590:	bf00      	nop
 8019592:	3718      	adds	r7, #24
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	2000f3e8 	.word	0x2000f3e8
 801959c:	0801953d 	.word	0x0801953d

080195a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b082      	sub	sp, #8
 80195a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195a6:	2301      	movs	r3, #1
 80195a8:	607b      	str	r3, [r7, #4]
 80195aa:	e00e      	b.n	80195ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80195ac:	4a0b      	ldr	r2, [pc, #44]	@ (80195dc <sys_timeouts_init+0x3c>)
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	00db      	lsls	r3, r3, #3
 80195b8:	4a08      	ldr	r2, [pc, #32]	@ (80195dc <sys_timeouts_init+0x3c>)
 80195ba:	4413      	add	r3, r2
 80195bc:	461a      	mov	r2, r3
 80195be:	4908      	ldr	r1, [pc, #32]	@ (80195e0 <sys_timeouts_init+0x40>)
 80195c0:	f000 f810 	bl	80195e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	3301      	adds	r3, #1
 80195c8:	607b      	str	r3, [r7, #4]
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2b02      	cmp	r3, #2
 80195ce:	d9ed      	bls.n	80195ac <sys_timeouts_init+0xc>
  }
}
 80195d0:	bf00      	nop
 80195d2:	bf00      	nop
 80195d4:	3708      	adds	r7, #8
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd80      	pop	{r7, pc}
 80195da:	bf00      	nop
 80195dc:	08024a64 	.word	0x08024a64
 80195e0:	0801953d 	.word	0x0801953d

080195e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	b086      	sub	sp, #24
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	60f8      	str	r0, [r7, #12]
 80195ec:	60b9      	str	r1, [r7, #8]
 80195ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80195f6:	d306      	bcc.n	8019606 <sys_timeout+0x22>
 80195f8:	4b0a      	ldr	r3, [pc, #40]	@ (8019624 <sys_timeout+0x40>)
 80195fa:	f240 1229 	movw	r2, #297	@ 0x129
 80195fe:	490a      	ldr	r1, [pc, #40]	@ (8019628 <sys_timeout+0x44>)
 8019600:	480a      	ldr	r0, [pc, #40]	@ (801962c <sys_timeout+0x48>)
 8019602:	f003 ff71 	bl	801d4e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019606:	f7f1 fadf 	bl	800abc8 <sys_now>
 801960a:	4602      	mov	r2, r0
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	4413      	add	r3, r2
 8019610:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019612:	687a      	ldr	r2, [r7, #4]
 8019614:	68b9      	ldr	r1, [r7, #8]
 8019616:	6978      	ldr	r0, [r7, #20]
 8019618:	f7ff ff22 	bl	8019460 <sys_timeout_abs>
#endif
}
 801961c:	bf00      	nop
 801961e:	3718      	adds	r7, #24
 8019620:	46bd      	mov	sp, r7
 8019622:	bd80      	pop	{r7, pc}
 8019624:	08022750 	.word	0x08022750
 8019628:	080227ec 	.word	0x080227ec
 801962c:	080227c4 	.word	0x080227c4

08019630 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b084      	sub	sp, #16
 8019634:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019636:	f7f1 fac7 	bl	800abc8 <sys_now>
 801963a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801963c:	4b17      	ldr	r3, [pc, #92]	@ (801969c <sys_check_timeouts+0x6c>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d022      	beq.n	801968e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019648:	68bb      	ldr	r3, [r7, #8]
 801964a:	685b      	ldr	r3, [r3, #4]
 801964c:	68fa      	ldr	r2, [r7, #12]
 801964e:	1ad3      	subs	r3, r2, r3
 8019650:	0fdb      	lsrs	r3, r3, #31
 8019652:	f003 0301 	and.w	r3, r3, #1
 8019656:	b2db      	uxtb	r3, r3
 8019658:	2b00      	cmp	r3, #0
 801965a:	d11a      	bne.n	8019692 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	4a0e      	ldr	r2, [pc, #56]	@ (801969c <sys_check_timeouts+0x6c>)
 8019662:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	689b      	ldr	r3, [r3, #8]
 8019668:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801966a:	68bb      	ldr	r3, [r7, #8]
 801966c:	68db      	ldr	r3, [r3, #12]
 801966e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	685b      	ldr	r3, [r3, #4]
 8019674:	4a0a      	ldr	r2, [pc, #40]	@ (80196a0 <sys_check_timeouts+0x70>)
 8019676:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019678:	68b9      	ldr	r1, [r7, #8]
 801967a:	200a      	movs	r0, #10
 801967c:	f7f8 fcd0 	bl	8012020 <memp_free>
    if (handler != NULL) {
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d0da      	beq.n	801963c <sys_check_timeouts+0xc>
      handler(arg);
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6838      	ldr	r0, [r7, #0]
 801968a:	4798      	blx	r3
  do {
 801968c:	e7d6      	b.n	801963c <sys_check_timeouts+0xc>
      return;
 801968e:	bf00      	nop
 8019690:	e000      	b.n	8019694 <sys_check_timeouts+0x64>
      return;
 8019692:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019694:	3710      	adds	r7, #16
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}
 801969a:	bf00      	nop
 801969c:	2000f3e4 	.word	0x2000f3e4
 80196a0:	2000f3e8 	.word	0x2000f3e8

080196a4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b082      	sub	sp, #8
 80196a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80196aa:	4b16      	ldr	r3, [pc, #88]	@ (8019704 <sys_timeouts_sleeptime+0x60>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d102      	bne.n	80196b8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80196b2:	f04f 33ff 	mov.w	r3, #4294967295
 80196b6:	e020      	b.n	80196fa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80196b8:	f7f1 fa86 	bl	800abc8 <sys_now>
 80196bc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80196be:	4b11      	ldr	r3, [pc, #68]	@ (8019704 <sys_timeouts_sleeptime+0x60>)
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	685a      	ldr	r2, [r3, #4]
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	1ad3      	subs	r3, r2, r3
 80196c8:	0fdb      	lsrs	r3, r3, #31
 80196ca:	f003 0301 	and.w	r3, r3, #1
 80196ce:	b2db      	uxtb	r3, r3
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d001      	beq.n	80196d8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80196d4:	2300      	movs	r3, #0
 80196d6:	e010      	b.n	80196fa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80196d8:	4b0a      	ldr	r3, [pc, #40]	@ (8019704 <sys_timeouts_sleeptime+0x60>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	685a      	ldr	r2, [r3, #4]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	1ad3      	subs	r3, r2, r3
 80196e2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	da06      	bge.n	80196f8 <sys_timeouts_sleeptime+0x54>
 80196ea:	4b07      	ldr	r3, [pc, #28]	@ (8019708 <sys_timeouts_sleeptime+0x64>)
 80196ec:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80196f0:	4906      	ldr	r1, [pc, #24]	@ (801970c <sys_timeouts_sleeptime+0x68>)
 80196f2:	4807      	ldr	r0, [pc, #28]	@ (8019710 <sys_timeouts_sleeptime+0x6c>)
 80196f4:	f003 fef8 	bl	801d4e8 <iprintf>
    return ret;
 80196f8:	683b      	ldr	r3, [r7, #0]
  }
}
 80196fa:	4618      	mov	r0, r3
 80196fc:	3708      	adds	r7, #8
 80196fe:	46bd      	mov	sp, r7
 8019700:	bd80      	pop	{r7, pc}
 8019702:	bf00      	nop
 8019704:	2000f3e4 	.word	0x2000f3e4
 8019708:	08022750 	.word	0x08022750
 801970c:	08022824 	.word	0x08022824
 8019710:	080227c4 	.word	0x080227c4

08019714 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019714:	b580      	push	{r7, lr}
 8019716:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019718:	f003 f98e 	bl	801ca38 <rand>
 801971c:	4603      	mov	r3, r0
 801971e:	b29b      	uxth	r3, r3
 8019720:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019724:	b29b      	uxth	r3, r3
 8019726:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801972a:	b29a      	uxth	r2, r3
 801972c:	4b01      	ldr	r3, [pc, #4]	@ (8019734 <udp_init+0x20>)
 801972e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019730:	bf00      	nop
 8019732:	bd80      	pop	{r7, pc}
 8019734:	20000084 	.word	0x20000084

08019738 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019738:	b480      	push	{r7}
 801973a:	b083      	sub	sp, #12
 801973c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801973e:	2300      	movs	r3, #0
 8019740:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019742:	4b17      	ldr	r3, [pc, #92]	@ (80197a0 <udp_new_port+0x68>)
 8019744:	881b      	ldrh	r3, [r3, #0]
 8019746:	1c5a      	adds	r2, r3, #1
 8019748:	b291      	uxth	r1, r2
 801974a:	4a15      	ldr	r2, [pc, #84]	@ (80197a0 <udp_new_port+0x68>)
 801974c:	8011      	strh	r1, [r2, #0]
 801974e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019752:	4293      	cmp	r3, r2
 8019754:	d103      	bne.n	801975e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019756:	4b12      	ldr	r3, [pc, #72]	@ (80197a0 <udp_new_port+0x68>)
 8019758:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801975c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801975e:	4b11      	ldr	r3, [pc, #68]	@ (80197a4 <udp_new_port+0x6c>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	603b      	str	r3, [r7, #0]
 8019764:	e011      	b.n	801978a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019766:	683b      	ldr	r3, [r7, #0]
 8019768:	8a5a      	ldrh	r2, [r3, #18]
 801976a:	4b0d      	ldr	r3, [pc, #52]	@ (80197a0 <udp_new_port+0x68>)
 801976c:	881b      	ldrh	r3, [r3, #0]
 801976e:	429a      	cmp	r2, r3
 8019770:	d108      	bne.n	8019784 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019772:	88fb      	ldrh	r3, [r7, #6]
 8019774:	3301      	adds	r3, #1
 8019776:	80fb      	strh	r3, [r7, #6]
 8019778:	88fb      	ldrh	r3, [r7, #6]
 801977a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801977e:	d3e0      	bcc.n	8019742 <udp_new_port+0xa>
        return 0;
 8019780:	2300      	movs	r3, #0
 8019782:	e007      	b.n	8019794 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019784:	683b      	ldr	r3, [r7, #0]
 8019786:	68db      	ldr	r3, [r3, #12]
 8019788:	603b      	str	r3, [r7, #0]
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d1ea      	bne.n	8019766 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019790:	4b03      	ldr	r3, [pc, #12]	@ (80197a0 <udp_new_port+0x68>)
 8019792:	881b      	ldrh	r3, [r3, #0]
}
 8019794:	4618      	mov	r0, r3
 8019796:	370c      	adds	r7, #12
 8019798:	46bd      	mov	sp, r7
 801979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979e:	4770      	bx	lr
 80197a0:	20000084 	.word	0x20000084
 80197a4:	2000f3f0 	.word	0x2000f3f0

080197a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b084      	sub	sp, #16
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	60f8      	str	r0, [r7, #12]
 80197b0:	60b9      	str	r1, [r7, #8]
 80197b2:	4613      	mov	r3, r2
 80197b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80197b6:	68fb      	ldr	r3, [r7, #12]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d105      	bne.n	80197c8 <udp_input_local_match+0x20>
 80197bc:	4b27      	ldr	r3, [pc, #156]	@ (801985c <udp_input_local_match+0xb4>)
 80197be:	2287      	movs	r2, #135	@ 0x87
 80197c0:	4927      	ldr	r1, [pc, #156]	@ (8019860 <udp_input_local_match+0xb8>)
 80197c2:	4828      	ldr	r0, [pc, #160]	@ (8019864 <udp_input_local_match+0xbc>)
 80197c4:	f003 fe90 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d105      	bne.n	80197da <udp_input_local_match+0x32>
 80197ce:	4b23      	ldr	r3, [pc, #140]	@ (801985c <udp_input_local_match+0xb4>)
 80197d0:	2288      	movs	r2, #136	@ 0x88
 80197d2:	4925      	ldr	r1, [pc, #148]	@ (8019868 <udp_input_local_match+0xc0>)
 80197d4:	4823      	ldr	r0, [pc, #140]	@ (8019864 <udp_input_local_match+0xbc>)
 80197d6:	f003 fe87 	bl	801d4e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	7a1b      	ldrb	r3, [r3, #8]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d00b      	beq.n	80197fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	7a1a      	ldrb	r2, [r3, #8]
 80197e6:	4b21      	ldr	r3, [pc, #132]	@ (801986c <udp_input_local_match+0xc4>)
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80197ee:	3301      	adds	r3, #1
 80197f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d001      	beq.n	80197fa <udp_input_local_match+0x52>
    return 0;
 80197f6:	2300      	movs	r3, #0
 80197f8:	e02b      	b.n	8019852 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80197fa:	79fb      	ldrb	r3, [r7, #7]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d018      	beq.n	8019832 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d013      	beq.n	801982e <udp_input_local_match+0x86>
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d00f      	beq.n	801982e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801980e:	4b17      	ldr	r3, [pc, #92]	@ (801986c <udp_input_local_match+0xc4>)
 8019810:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019816:	d00a      	beq.n	801982e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	4b13      	ldr	r3, [pc, #76]	@ (801986c <udp_input_local_match+0xc4>)
 801981e:	695b      	ldr	r3, [r3, #20]
 8019820:	405a      	eors	r2, r3
 8019822:	68bb      	ldr	r3, [r7, #8]
 8019824:	3308      	adds	r3, #8
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801982a:	2b00      	cmp	r3, #0
 801982c:	d110      	bne.n	8019850 <udp_input_local_match+0xa8>
          return 1;
 801982e:	2301      	movs	r3, #1
 8019830:	e00f      	b.n	8019852 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d009      	beq.n	801984c <udp_input_local_match+0xa4>
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d005      	beq.n	801984c <udp_input_local_match+0xa4>
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	4b09      	ldr	r3, [pc, #36]	@ (801986c <udp_input_local_match+0xc4>)
 8019846:	695b      	ldr	r3, [r3, #20]
 8019848:	429a      	cmp	r2, r3
 801984a:	d101      	bne.n	8019850 <udp_input_local_match+0xa8>
        return 1;
 801984c:	2301      	movs	r3, #1
 801984e:	e000      	b.n	8019852 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019850:	2300      	movs	r3, #0
}
 8019852:	4618      	mov	r0, r3
 8019854:	3710      	adds	r7, #16
 8019856:	46bd      	mov	sp, r7
 8019858:	bd80      	pop	{r7, pc}
 801985a:	bf00      	nop
 801985c:	08022838 	.word	0x08022838
 8019860:	08022868 	.word	0x08022868
 8019864:	0802288c 	.word	0x0802288c
 8019868:	080228b4 	.word	0x080228b4
 801986c:	2000bc40 	.word	0x2000bc40

08019870 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019870:	b590      	push	{r4, r7, lr}
 8019872:	b08d      	sub	sp, #52	@ 0x34
 8019874:	af02      	add	r7, sp, #8
 8019876:	6078      	str	r0, [r7, #4]
 8019878:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801987a:	2300      	movs	r3, #0
 801987c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d105      	bne.n	8019890 <udp_input+0x20>
 8019884:	4b7c      	ldr	r3, [pc, #496]	@ (8019a78 <udp_input+0x208>)
 8019886:	22cf      	movs	r2, #207	@ 0xcf
 8019888:	497c      	ldr	r1, [pc, #496]	@ (8019a7c <udp_input+0x20c>)
 801988a:	487d      	ldr	r0, [pc, #500]	@ (8019a80 <udp_input+0x210>)
 801988c:	f003 fe2c 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d105      	bne.n	80198a2 <udp_input+0x32>
 8019896:	4b78      	ldr	r3, [pc, #480]	@ (8019a78 <udp_input+0x208>)
 8019898:	22d0      	movs	r2, #208	@ 0xd0
 801989a:	497a      	ldr	r1, [pc, #488]	@ (8019a84 <udp_input+0x214>)
 801989c:	4878      	ldr	r0, [pc, #480]	@ (8019a80 <udp_input+0x210>)
 801989e:	f003 fe23 	bl	801d4e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	895b      	ldrh	r3, [r3, #10]
 80198a6:	2b07      	cmp	r3, #7
 80198a8:	d803      	bhi.n	80198b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80198aa:	6878      	ldr	r0, [r7, #4]
 80198ac:	f7f9 fa5c 	bl	8012d68 <pbuf_free>
    goto end;
 80198b0:	e0de      	b.n	8019a70 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80198b8:	4b73      	ldr	r3, [pc, #460]	@ (8019a88 <udp_input+0x218>)
 80198ba:	695b      	ldr	r3, [r3, #20]
 80198bc:	4a72      	ldr	r2, [pc, #456]	@ (8019a88 <udp_input+0x218>)
 80198be:	6812      	ldr	r2, [r2, #0]
 80198c0:	4611      	mov	r1, r2
 80198c2:	4618      	mov	r0, r3
 80198c4:	f001 ff80 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 80198c8:	4603      	mov	r3, r0
 80198ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	881b      	ldrh	r3, [r3, #0]
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7f7 fe20 	bl	8011518 <lwip_htons>
 80198d8:	4603      	mov	r3, r0
 80198da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	885b      	ldrh	r3, [r3, #2]
 80198e0:	b29b      	uxth	r3, r3
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7f7 fe18 	bl	8011518 <lwip_htons>
 80198e8:	4603      	mov	r3, r0
 80198ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80198ec:	2300      	movs	r3, #0
 80198ee:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80198f0:	2300      	movs	r3, #0
 80198f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80198f4:	2300      	movs	r3, #0
 80198f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80198f8:	4b64      	ldr	r3, [pc, #400]	@ (8019a8c <udp_input+0x21c>)
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80198fe:	e054      	b.n	80199aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019902:	8a5b      	ldrh	r3, [r3, #18]
 8019904:	89fa      	ldrh	r2, [r7, #14]
 8019906:	429a      	cmp	r2, r3
 8019908:	d14a      	bne.n	80199a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801990a:	7cfb      	ldrb	r3, [r7, #19]
 801990c:	461a      	mov	r2, r3
 801990e:	6839      	ldr	r1, [r7, #0]
 8019910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019912:	f7ff ff49 	bl	80197a8 <udp_input_local_match>
 8019916:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019918:	2b00      	cmp	r3, #0
 801991a:	d041      	beq.n	80199a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801991e:	7c1b      	ldrb	r3, [r3, #16]
 8019920:	f003 0304 	and.w	r3, r3, #4
 8019924:	2b00      	cmp	r3, #0
 8019926:	d11d      	bne.n	8019964 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d102      	bne.n	8019934 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019930:	61fb      	str	r3, [r7, #28]
 8019932:	e017      	b.n	8019964 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019934:	7cfb      	ldrb	r3, [r7, #19]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d014      	beq.n	8019964 <udp_input+0xf4>
 801993a:	4b53      	ldr	r3, [pc, #332]	@ (8019a88 <udp_input+0x218>)
 801993c:	695b      	ldr	r3, [r3, #20]
 801993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019942:	d10f      	bne.n	8019964 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	681a      	ldr	r2, [r3, #0]
 8019948:	683b      	ldr	r3, [r7, #0]
 801994a:	3304      	adds	r3, #4
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	429a      	cmp	r2, r3
 8019950:	d008      	beq.n	8019964 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019954:	681a      	ldr	r2, [r3, #0]
 8019956:	683b      	ldr	r3, [r7, #0]
 8019958:	3304      	adds	r3, #4
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	429a      	cmp	r2, r3
 801995e:	d101      	bne.n	8019964 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019962:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019966:	8a9b      	ldrh	r3, [r3, #20]
 8019968:	8a3a      	ldrh	r2, [r7, #16]
 801996a:	429a      	cmp	r2, r3
 801996c:	d118      	bne.n	80199a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801996e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019970:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019972:	2b00      	cmp	r3, #0
 8019974:	d005      	beq.n	8019982 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019978:	685a      	ldr	r2, [r3, #4]
 801997a:	4b43      	ldr	r3, [pc, #268]	@ (8019a88 <udp_input+0x218>)
 801997c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801997e:	429a      	cmp	r2, r3
 8019980:	d10e      	bne.n	80199a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019982:	6a3b      	ldr	r3, [r7, #32]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d014      	beq.n	80199b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801998a:	68da      	ldr	r2, [r3, #12]
 801998c:	6a3b      	ldr	r3, [r7, #32]
 801998e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019990:	4b3e      	ldr	r3, [pc, #248]	@ (8019a8c <udp_input+0x21c>)
 8019992:	681a      	ldr	r2, [r3, #0]
 8019994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019996:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019998:	4a3c      	ldr	r2, [pc, #240]	@ (8019a8c <udp_input+0x21c>)
 801999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801999c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801999e:	e008      	b.n	80199b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80199a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80199a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199a6:	68db      	ldr	r3, [r3, #12]
 80199a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80199aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d1a7      	bne.n	8019900 <udp_input+0x90>
 80199b0:	e000      	b.n	80199b4 <udp_input+0x144>
        break;
 80199b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80199b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d101      	bne.n	80199be <udp_input+0x14e>
    pcb = uncon_pcb;
 80199ba:	69fb      	ldr	r3, [r7, #28]
 80199bc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80199be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d002      	beq.n	80199ca <udp_input+0x15a>
    for_us = 1;
 80199c4:	2301      	movs	r3, #1
 80199c6:	76fb      	strb	r3, [r7, #27]
 80199c8:	e00a      	b.n	80199e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	3304      	adds	r3, #4
 80199ce:	681a      	ldr	r2, [r3, #0]
 80199d0:	4b2d      	ldr	r3, [pc, #180]	@ (8019a88 <udp_input+0x218>)
 80199d2:	695b      	ldr	r3, [r3, #20]
 80199d4:	429a      	cmp	r2, r3
 80199d6:	bf0c      	ite	eq
 80199d8:	2301      	moveq	r3, #1
 80199da:	2300      	movne	r3, #0
 80199dc:	b2db      	uxtb	r3, r3
 80199de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80199e0:	7efb      	ldrb	r3, [r7, #27]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d041      	beq.n	8019a6a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80199e6:	2108      	movs	r1, #8
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f7f9 f937 	bl	8012c5c <pbuf_remove_header>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d00a      	beq.n	8019a0a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80199f4:	4b20      	ldr	r3, [pc, #128]	@ (8019a78 <udp_input+0x208>)
 80199f6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80199fa:	4925      	ldr	r1, [pc, #148]	@ (8019a90 <udp_input+0x220>)
 80199fc:	4820      	ldr	r0, [pc, #128]	@ (8019a80 <udp_input+0x210>)
 80199fe:	f003 fd73 	bl	801d4e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f7f9 f9b0 	bl	8012d68 <pbuf_free>
      goto end;
 8019a08:	e032      	b.n	8019a70 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d012      	beq.n	8019a36 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a12:	699b      	ldr	r3, [r3, #24]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d00a      	beq.n	8019a2e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a1a:	699c      	ldr	r4, [r3, #24]
 8019a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a1e:	69d8      	ldr	r0, [r3, #28]
 8019a20:	8a3b      	ldrh	r3, [r7, #16]
 8019a22:	9300      	str	r3, [sp, #0]
 8019a24:	4b1b      	ldr	r3, [pc, #108]	@ (8019a94 <udp_input+0x224>)
 8019a26:	687a      	ldr	r2, [r7, #4]
 8019a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019a2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019a2c:	e021      	b.n	8019a72 <udp_input+0x202>
        pbuf_free(p);
 8019a2e:	6878      	ldr	r0, [r7, #4]
 8019a30:	f7f9 f99a 	bl	8012d68 <pbuf_free>
        goto end;
 8019a34:	e01c      	b.n	8019a70 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019a36:	7cfb      	ldrb	r3, [r7, #19]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d112      	bne.n	8019a62 <udp_input+0x1f2>
 8019a3c:	4b12      	ldr	r3, [pc, #72]	@ (8019a88 <udp_input+0x218>)
 8019a3e:	695b      	ldr	r3, [r3, #20]
 8019a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019a44:	2be0      	cmp	r3, #224	@ 0xe0
 8019a46:	d00c      	beq.n	8019a62 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019a48:	4b0f      	ldr	r3, [pc, #60]	@ (8019a88 <udp_input+0x218>)
 8019a4a:	899b      	ldrh	r3, [r3, #12]
 8019a4c:	3308      	adds	r3, #8
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	b21b      	sxth	r3, r3
 8019a52:	4619      	mov	r1, r3
 8019a54:	6878      	ldr	r0, [r7, #4]
 8019a56:	f7f9 f974 	bl	8012d42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019a5a:	2103      	movs	r1, #3
 8019a5c:	6878      	ldr	r0, [r7, #4]
 8019a5e:	f001 fb93 	bl	801b188 <icmp_dest_unreach>
      pbuf_free(p);
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f7f9 f980 	bl	8012d68 <pbuf_free>
  return;
 8019a68:	e003      	b.n	8019a72 <udp_input+0x202>
    pbuf_free(p);
 8019a6a:	6878      	ldr	r0, [r7, #4]
 8019a6c:	f7f9 f97c 	bl	8012d68 <pbuf_free>
  return;
 8019a70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019a72:	372c      	adds	r7, #44	@ 0x2c
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd90      	pop	{r4, r7, pc}
 8019a78:	08022838 	.word	0x08022838
 8019a7c:	080228dc 	.word	0x080228dc
 8019a80:	0802288c 	.word	0x0802288c
 8019a84:	080228f4 	.word	0x080228f4
 8019a88:	2000bc40 	.word	0x2000bc40
 8019a8c:	2000f3f0 	.word	0x2000f3f0
 8019a90:	08022910 	.word	0x08022910
 8019a94:	2000bc50 	.word	0x2000bc50

08019a98 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b082      	sub	sp, #8
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
 8019aa0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d109      	bne.n	8019abc <udp_send+0x24>
 8019aa8:	4b11      	ldr	r3, [pc, #68]	@ (8019af0 <udp_send+0x58>)
 8019aaa:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8019aae:	4911      	ldr	r1, [pc, #68]	@ (8019af4 <udp_send+0x5c>)
 8019ab0:	4811      	ldr	r0, [pc, #68]	@ (8019af8 <udp_send+0x60>)
 8019ab2:	f003 fd19 	bl	801d4e8 <iprintf>
 8019ab6:	f06f 030f 	mvn.w	r3, #15
 8019aba:	e015      	b.n	8019ae8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019abc:	683b      	ldr	r3, [r7, #0]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d109      	bne.n	8019ad6 <udp_send+0x3e>
 8019ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8019af0 <udp_send+0x58>)
 8019ac4:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8019ac8:	490c      	ldr	r1, [pc, #48]	@ (8019afc <udp_send+0x64>)
 8019aca:	480b      	ldr	r0, [pc, #44]	@ (8019af8 <udp_send+0x60>)
 8019acc:	f003 fd0c 	bl	801d4e8 <iprintf>
 8019ad0:	f06f 030f 	mvn.w	r3, #15
 8019ad4:	e008      	b.n	8019ae8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	1d1a      	adds	r2, r3, #4
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	8a9b      	ldrh	r3, [r3, #20]
 8019ade:	6839      	ldr	r1, [r7, #0]
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f000 f80d 	bl	8019b00 <udp_sendto>
 8019ae6:	4603      	mov	r3, r0
}
 8019ae8:	4618      	mov	r0, r3
 8019aea:	3708      	adds	r7, #8
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}
 8019af0:	08022838 	.word	0x08022838
 8019af4:	0802292c 	.word	0x0802292c
 8019af8:	0802288c 	.word	0x0802288c
 8019afc:	08022944 	.word	0x08022944

08019b00 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b088      	sub	sp, #32
 8019b04:	af02      	add	r7, sp, #8
 8019b06:	60f8      	str	r0, [r7, #12]
 8019b08:	60b9      	str	r1, [r7, #8]
 8019b0a:	607a      	str	r2, [r7, #4]
 8019b0c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d109      	bne.n	8019b28 <udp_sendto+0x28>
 8019b14:	4b23      	ldr	r3, [pc, #140]	@ (8019ba4 <udp_sendto+0xa4>)
 8019b16:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019b1a:	4923      	ldr	r1, [pc, #140]	@ (8019ba8 <udp_sendto+0xa8>)
 8019b1c:	4823      	ldr	r0, [pc, #140]	@ (8019bac <udp_sendto+0xac>)
 8019b1e:	f003 fce3 	bl	801d4e8 <iprintf>
 8019b22:	f06f 030f 	mvn.w	r3, #15
 8019b26:	e038      	b.n	8019b9a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d109      	bne.n	8019b42 <udp_sendto+0x42>
 8019b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8019ba4 <udp_sendto+0xa4>)
 8019b30:	f240 2219 	movw	r2, #537	@ 0x219
 8019b34:	491e      	ldr	r1, [pc, #120]	@ (8019bb0 <udp_sendto+0xb0>)
 8019b36:	481d      	ldr	r0, [pc, #116]	@ (8019bac <udp_sendto+0xac>)
 8019b38:	f003 fcd6 	bl	801d4e8 <iprintf>
 8019b3c:	f06f 030f 	mvn.w	r3, #15
 8019b40:	e02b      	b.n	8019b9a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d109      	bne.n	8019b5c <udp_sendto+0x5c>
 8019b48:	4b16      	ldr	r3, [pc, #88]	@ (8019ba4 <udp_sendto+0xa4>)
 8019b4a:	f240 221a 	movw	r2, #538	@ 0x21a
 8019b4e:	4919      	ldr	r1, [pc, #100]	@ (8019bb4 <udp_sendto+0xb4>)
 8019b50:	4816      	ldr	r0, [pc, #88]	@ (8019bac <udp_sendto+0xac>)
 8019b52:	f003 fcc9 	bl	801d4e8 <iprintf>
 8019b56:	f06f 030f 	mvn.w	r3, #15
 8019b5a:	e01e      	b.n	8019b9a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	7a1b      	ldrb	r3, [r3, #8]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d006      	beq.n	8019b72 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	7a1b      	ldrb	r3, [r3, #8]
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f7f8 fd6f 	bl	801264c <netif_get_by_index>
 8019b6e:	6178      	str	r0, [r7, #20]
 8019b70:	e003      	b.n	8019b7a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f001 fb92 	bl	801b29c <ip4_route>
 8019b78:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019b7a:	697b      	ldr	r3, [r7, #20]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d102      	bne.n	8019b86 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019b80:	f06f 0303 	mvn.w	r3, #3
 8019b84:	e009      	b.n	8019b9a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019b86:	887a      	ldrh	r2, [r7, #2]
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	9300      	str	r3, [sp, #0]
 8019b8c:	4613      	mov	r3, r2
 8019b8e:	687a      	ldr	r2, [r7, #4]
 8019b90:	68b9      	ldr	r1, [r7, #8]
 8019b92:	68f8      	ldr	r0, [r7, #12]
 8019b94:	f000 f810 	bl	8019bb8 <udp_sendto_if>
 8019b98:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3718      	adds	r7, #24
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}
 8019ba2:	bf00      	nop
 8019ba4:	08022838 	.word	0x08022838
 8019ba8:	0802295c 	.word	0x0802295c
 8019bac:	0802288c 	.word	0x0802288c
 8019bb0:	08022974 	.word	0x08022974
 8019bb4:	08022990 	.word	0x08022990

08019bb8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b088      	sub	sp, #32
 8019bbc:	af02      	add	r7, sp, #8
 8019bbe:	60f8      	str	r0, [r7, #12]
 8019bc0:	60b9      	str	r1, [r7, #8]
 8019bc2:	607a      	str	r2, [r7, #4]
 8019bc4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d109      	bne.n	8019be0 <udp_sendto_if+0x28>
 8019bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8019c88 <udp_sendto_if+0xd0>)
 8019bce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019bd2:	492e      	ldr	r1, [pc, #184]	@ (8019c8c <udp_sendto_if+0xd4>)
 8019bd4:	482e      	ldr	r0, [pc, #184]	@ (8019c90 <udp_sendto_if+0xd8>)
 8019bd6:	f003 fc87 	bl	801d4e8 <iprintf>
 8019bda:	f06f 030f 	mvn.w	r3, #15
 8019bde:	e04f      	b.n	8019c80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019be0:	68bb      	ldr	r3, [r7, #8]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d109      	bne.n	8019bfa <udp_sendto_if+0x42>
 8019be6:	4b28      	ldr	r3, [pc, #160]	@ (8019c88 <udp_sendto_if+0xd0>)
 8019be8:	f240 2281 	movw	r2, #641	@ 0x281
 8019bec:	4929      	ldr	r1, [pc, #164]	@ (8019c94 <udp_sendto_if+0xdc>)
 8019bee:	4828      	ldr	r0, [pc, #160]	@ (8019c90 <udp_sendto_if+0xd8>)
 8019bf0:	f003 fc7a 	bl	801d4e8 <iprintf>
 8019bf4:	f06f 030f 	mvn.w	r3, #15
 8019bf8:	e042      	b.n	8019c80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d109      	bne.n	8019c14 <udp_sendto_if+0x5c>
 8019c00:	4b21      	ldr	r3, [pc, #132]	@ (8019c88 <udp_sendto_if+0xd0>)
 8019c02:	f240 2282 	movw	r2, #642	@ 0x282
 8019c06:	4924      	ldr	r1, [pc, #144]	@ (8019c98 <udp_sendto_if+0xe0>)
 8019c08:	4821      	ldr	r0, [pc, #132]	@ (8019c90 <udp_sendto_if+0xd8>)
 8019c0a:	f003 fc6d 	bl	801d4e8 <iprintf>
 8019c0e:	f06f 030f 	mvn.w	r3, #15
 8019c12:	e035      	b.n	8019c80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019c14:	6a3b      	ldr	r3, [r7, #32]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d109      	bne.n	8019c2e <udp_sendto_if+0x76>
 8019c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8019c88 <udp_sendto_if+0xd0>)
 8019c1c:	f240 2283 	movw	r2, #643	@ 0x283
 8019c20:	491e      	ldr	r1, [pc, #120]	@ (8019c9c <udp_sendto_if+0xe4>)
 8019c22:	481b      	ldr	r0, [pc, #108]	@ (8019c90 <udp_sendto_if+0xd8>)
 8019c24:	f003 fc60 	bl	801d4e8 <iprintf>
 8019c28:	f06f 030f 	mvn.w	r3, #15
 8019c2c:	e028      	b.n	8019c80 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d009      	beq.n	8019c48 <udp_sendto_if+0x90>
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d005      	beq.n	8019c48 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c44:	2be0      	cmp	r3, #224	@ 0xe0
 8019c46:	d103      	bne.n	8019c50 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019c48:	6a3b      	ldr	r3, [r7, #32]
 8019c4a:	3304      	adds	r3, #4
 8019c4c:	617b      	str	r3, [r7, #20]
 8019c4e:	e00b      	b.n	8019c68 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681a      	ldr	r2, [r3, #0]
 8019c54:	6a3b      	ldr	r3, [r7, #32]
 8019c56:	3304      	adds	r3, #4
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d002      	beq.n	8019c64 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019c5e:	f06f 0303 	mvn.w	r3, #3
 8019c62:	e00d      	b.n	8019c80 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019c68:	887a      	ldrh	r2, [r7, #2]
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	9301      	str	r3, [sp, #4]
 8019c6e:	6a3b      	ldr	r3, [r7, #32]
 8019c70:	9300      	str	r3, [sp, #0]
 8019c72:	4613      	mov	r3, r2
 8019c74:	687a      	ldr	r2, [r7, #4]
 8019c76:	68b9      	ldr	r1, [r7, #8]
 8019c78:	68f8      	ldr	r0, [r7, #12]
 8019c7a:	f000 f811 	bl	8019ca0 <udp_sendto_if_src>
 8019c7e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3718      	adds	r7, #24
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	08022838 	.word	0x08022838
 8019c8c:	080229ac 	.word	0x080229ac
 8019c90:	0802288c 	.word	0x0802288c
 8019c94:	080229c8 	.word	0x080229c8
 8019c98:	080229e4 	.word	0x080229e4
 8019c9c:	08022a04 	.word	0x08022a04

08019ca0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b08c      	sub	sp, #48	@ 0x30
 8019ca4:	af04      	add	r7, sp, #16
 8019ca6:	60f8      	str	r0, [r7, #12]
 8019ca8:	60b9      	str	r1, [r7, #8]
 8019caa:	607a      	str	r2, [r7, #4]
 8019cac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d109      	bne.n	8019cc8 <udp_sendto_if_src+0x28>
 8019cb4:	4b65      	ldr	r3, [pc, #404]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019cb6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019cba:	4965      	ldr	r1, [pc, #404]	@ (8019e50 <udp_sendto_if_src+0x1b0>)
 8019cbc:	4865      	ldr	r0, [pc, #404]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019cbe:	f003 fc13 	bl	801d4e8 <iprintf>
 8019cc2:	f06f 030f 	mvn.w	r3, #15
 8019cc6:	e0bc      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d109      	bne.n	8019ce2 <udp_sendto_if_src+0x42>
 8019cce:	4b5f      	ldr	r3, [pc, #380]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019cd0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019cd4:	4960      	ldr	r1, [pc, #384]	@ (8019e58 <udp_sendto_if_src+0x1b8>)
 8019cd6:	485f      	ldr	r0, [pc, #380]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019cd8:	f003 fc06 	bl	801d4e8 <iprintf>
 8019cdc:	f06f 030f 	mvn.w	r3, #15
 8019ce0:	e0af      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d109      	bne.n	8019cfc <udp_sendto_if_src+0x5c>
 8019ce8:	4b58      	ldr	r3, [pc, #352]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019cea:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019cee:	495b      	ldr	r1, [pc, #364]	@ (8019e5c <udp_sendto_if_src+0x1bc>)
 8019cf0:	4858      	ldr	r0, [pc, #352]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019cf2:	f003 fbf9 	bl	801d4e8 <iprintf>
 8019cf6:	f06f 030f 	mvn.w	r3, #15
 8019cfa:	e0a2      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d109      	bne.n	8019d16 <udp_sendto_if_src+0x76>
 8019d02:	4b52      	ldr	r3, [pc, #328]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019d04:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019d08:	4955      	ldr	r1, [pc, #340]	@ (8019e60 <udp_sendto_if_src+0x1c0>)
 8019d0a:	4852      	ldr	r0, [pc, #328]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019d0c:	f003 fbec 	bl	801d4e8 <iprintf>
 8019d10:	f06f 030f 	mvn.w	r3, #15
 8019d14:	e095      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d109      	bne.n	8019d30 <udp_sendto_if_src+0x90>
 8019d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019d1e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019d22:	4950      	ldr	r1, [pc, #320]	@ (8019e64 <udp_sendto_if_src+0x1c4>)
 8019d24:	484b      	ldr	r0, [pc, #300]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019d26:	f003 fbdf 	bl	801d4e8 <iprintf>
 8019d2a:	f06f 030f 	mvn.w	r3, #15
 8019d2e:	e088      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	8a5b      	ldrh	r3, [r3, #18]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d10f      	bne.n	8019d58 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d38:	68f9      	ldr	r1, [r7, #12]
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	8a5b      	ldrh	r3, [r3, #18]
 8019d3e:	461a      	mov	r2, r3
 8019d40:	68f8      	ldr	r0, [r7, #12]
 8019d42:	f000 f893 	bl	8019e6c <udp_bind>
 8019d46:	4603      	mov	r3, r0
 8019d48:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019d4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d002      	beq.n	8019d58 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019d52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019d56:	e074      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	891b      	ldrh	r3, [r3, #8]
 8019d5c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019d60:	4293      	cmp	r3, r2
 8019d62:	d902      	bls.n	8019d6a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019d64:	f04f 33ff 	mov.w	r3, #4294967295
 8019d68:	e06b      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019d6a:	2108      	movs	r1, #8
 8019d6c:	68b8      	ldr	r0, [r7, #8]
 8019d6e:	f7f8 ff65 	bl	8012c3c <pbuf_add_header>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d015      	beq.n	8019da4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019d78:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d7c:	2108      	movs	r1, #8
 8019d7e:	2022      	movs	r0, #34	@ 0x22
 8019d80:	f7f8 fd0e 	bl	80127a0 <pbuf_alloc>
 8019d84:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019d86:	69fb      	ldr	r3, [r7, #28]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d102      	bne.n	8019d92 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d90:	e057      	b.n	8019e42 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	891b      	ldrh	r3, [r3, #8]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d006      	beq.n	8019da8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019d9a:	68b9      	ldr	r1, [r7, #8]
 8019d9c:	69f8      	ldr	r0, [r7, #28]
 8019d9e:	f7f9 f907 	bl	8012fb0 <pbuf_chain>
 8019da2:	e001      	b.n	8019da8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	895b      	ldrh	r3, [r3, #10]
 8019dac:	2b07      	cmp	r3, #7
 8019dae:	d806      	bhi.n	8019dbe <udp_sendto_if_src+0x11e>
 8019db0:	4b26      	ldr	r3, [pc, #152]	@ (8019e4c <udp_sendto_if_src+0x1ac>)
 8019db2:	f240 320d 	movw	r2, #781	@ 0x30d
 8019db6:	492c      	ldr	r1, [pc, #176]	@ (8019e68 <udp_sendto_if_src+0x1c8>)
 8019db8:	4826      	ldr	r0, [pc, #152]	@ (8019e54 <udp_sendto_if_src+0x1b4>)
 8019dba:	f003 fb95 	bl	801d4e8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019dbe:	69fb      	ldr	r3, [r7, #28]
 8019dc0:	685b      	ldr	r3, [r3, #4]
 8019dc2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	8a5b      	ldrh	r3, [r3, #18]
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f7f7 fba5 	bl	8011518 <lwip_htons>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	461a      	mov	r2, r3
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019dd6:	887b      	ldrh	r3, [r7, #2]
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f7f7 fb9d 	bl	8011518 <lwip_htons>
 8019dde:	4603      	mov	r3, r0
 8019de0:	461a      	mov	r2, r3
 8019de2:	697b      	ldr	r3, [r7, #20]
 8019de4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019de6:	697b      	ldr	r3, [r7, #20]
 8019de8:	2200      	movs	r2, #0
 8019dea:	719a      	strb	r2, [r3, #6]
 8019dec:	2200      	movs	r2, #0
 8019dee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019df0:	69fb      	ldr	r3, [r7, #28]
 8019df2:	891b      	ldrh	r3, [r3, #8]
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7f7 fb8f 	bl	8011518 <lwip_htons>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	697b      	ldr	r3, [r7, #20]
 8019e00:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019e02:	2311      	movs	r3, #17
 8019e04:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	7adb      	ldrb	r3, [r3, #11]
 8019e0a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	7a9b      	ldrb	r3, [r3, #10]
 8019e10:	7cb9      	ldrb	r1, [r7, #18]
 8019e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e14:	9202      	str	r2, [sp, #8]
 8019e16:	7cfa      	ldrb	r2, [r7, #19]
 8019e18:	9201      	str	r2, [sp, #4]
 8019e1a:	9300      	str	r3, [sp, #0]
 8019e1c:	460b      	mov	r3, r1
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e22:	69f8      	ldr	r0, [r7, #28]
 8019e24:	f001 fc22 	bl	801b66c <ip4_output_if_src>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019e2c:	69fa      	ldr	r2, [r7, #28]
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d004      	beq.n	8019e3e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019e34:	69f8      	ldr	r0, [r7, #28]
 8019e36:	f7f8 ff97 	bl	8012d68 <pbuf_free>
    q = NULL;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019e3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3720      	adds	r7, #32
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}
 8019e4a:	bf00      	nop
 8019e4c:	08022838 	.word	0x08022838
 8019e50:	08022a24 	.word	0x08022a24
 8019e54:	0802288c 	.word	0x0802288c
 8019e58:	08022a44 	.word	0x08022a44
 8019e5c:	08022a64 	.word	0x08022a64
 8019e60:	08022a88 	.word	0x08022a88
 8019e64:	08022aac 	.word	0x08022aac
 8019e68:	08022ad0 	.word	0x08022ad0

08019e6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b086      	sub	sp, #24
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	60f8      	str	r0, [r7, #12]
 8019e74:	60b9      	str	r1, [r7, #8]
 8019e76:	4613      	mov	r3, r2
 8019e78:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e7a:	68bb      	ldr	r3, [r7, #8]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d101      	bne.n	8019e84 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019e80:	4b39      	ldr	r3, [pc, #228]	@ (8019f68 <udp_bind+0xfc>)
 8019e82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d109      	bne.n	8019e9e <udp_bind+0x32>
 8019e8a:	4b38      	ldr	r3, [pc, #224]	@ (8019f6c <udp_bind+0x100>)
 8019e8c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8019e90:	4937      	ldr	r1, [pc, #220]	@ (8019f70 <udp_bind+0x104>)
 8019e92:	4838      	ldr	r0, [pc, #224]	@ (8019f74 <udp_bind+0x108>)
 8019e94:	f003 fb28 	bl	801d4e8 <iprintf>
 8019e98:	f06f 030f 	mvn.w	r3, #15
 8019e9c:	e060      	b.n	8019f60 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ea2:	4b35      	ldr	r3, [pc, #212]	@ (8019f78 <udp_bind+0x10c>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	617b      	str	r3, [r7, #20]
 8019ea8:	e009      	b.n	8019ebe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d102      	bne.n	8019eb8 <udp_bind+0x4c>
      rebind = 1;
 8019eb2:	2301      	movs	r3, #1
 8019eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8019eb6:	e005      	b.n	8019ec4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019eb8:	697b      	ldr	r3, [r7, #20]
 8019eba:	68db      	ldr	r3, [r3, #12]
 8019ebc:	617b      	str	r3, [r7, #20]
 8019ebe:	697b      	ldr	r3, [r7, #20]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d1f2      	bne.n	8019eaa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019ec4:	88fb      	ldrh	r3, [r7, #6]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d109      	bne.n	8019ede <udp_bind+0x72>
    port = udp_new_port();
 8019eca:	f7ff fc35 	bl	8019738 <udp_new_port>
 8019ece:	4603      	mov	r3, r0
 8019ed0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019ed2:	88fb      	ldrh	r3, [r7, #6]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d12c      	bne.n	8019f32 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019ed8:	f06f 0307 	mvn.w	r3, #7
 8019edc:	e040      	b.n	8019f60 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ede:	4b26      	ldr	r3, [pc, #152]	@ (8019f78 <udp_bind+0x10c>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	617b      	str	r3, [r7, #20]
 8019ee4:	e022      	b.n	8019f2c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019ee6:	68fa      	ldr	r2, [r7, #12]
 8019ee8:	697b      	ldr	r3, [r7, #20]
 8019eea:	429a      	cmp	r2, r3
 8019eec:	d01b      	beq.n	8019f26 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	8a5b      	ldrh	r3, [r3, #18]
 8019ef2:	88fa      	ldrh	r2, [r7, #6]
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d116      	bne.n	8019f26 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019ef8:	697b      	ldr	r3, [r7, #20]
 8019efa:	681a      	ldr	r2, [r3, #0]
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d00d      	beq.n	8019f20 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d00a      	beq.n	8019f20 <udp_bind+0xb4>
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d006      	beq.n	8019f20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f12:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d003      	beq.n	8019f20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f18:	697b      	ldr	r3, [r7, #20]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d102      	bne.n	8019f26 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f20:	f06f 0307 	mvn.w	r3, #7
 8019f24:	e01c      	b.n	8019f60 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f26:	697b      	ldr	r3, [r7, #20]
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	617b      	str	r3, [r7, #20]
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d1d9      	bne.n	8019ee6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d002      	beq.n	8019f3e <udp_bind+0xd2>
 8019f38:	68bb      	ldr	r3, [r7, #8]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	e000      	b.n	8019f40 <udp_bind+0xd4>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	68fa      	ldr	r2, [r7, #12]
 8019f42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	88fa      	ldrh	r2, [r7, #6]
 8019f48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019f4a:	7cfb      	ldrb	r3, [r7, #19]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d106      	bne.n	8019f5e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019f50:	4b09      	ldr	r3, [pc, #36]	@ (8019f78 <udp_bind+0x10c>)
 8019f52:	681a      	ldr	r2, [r3, #0]
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019f58:	4a07      	ldr	r2, [pc, #28]	@ (8019f78 <udp_bind+0x10c>)
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019f5e:	2300      	movs	r3, #0
}
 8019f60:	4618      	mov	r0, r3
 8019f62:	3718      	adds	r7, #24
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}
 8019f68:	08024a7c 	.word	0x08024a7c
 8019f6c:	08022838 	.word	0x08022838
 8019f70:	08022b00 	.word	0x08022b00
 8019f74:	0802288c 	.word	0x0802288c
 8019f78:	2000f3f0 	.word	0x2000f3f0

08019f7c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b084      	sub	sp, #16
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d107      	bne.n	8019f9e <udp_recv+0x22>
 8019f8e:	4b08      	ldr	r3, [pc, #32]	@ (8019fb0 <udp_recv+0x34>)
 8019f90:	f240 428a 	movw	r2, #1162	@ 0x48a
 8019f94:	4907      	ldr	r1, [pc, #28]	@ (8019fb4 <udp_recv+0x38>)
 8019f96:	4808      	ldr	r0, [pc, #32]	@ (8019fb8 <udp_recv+0x3c>)
 8019f98:	f003 faa6 	bl	801d4e8 <iprintf>
 8019f9c:	e005      	b.n	8019faa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	68ba      	ldr	r2, [r7, #8]
 8019fa2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	687a      	ldr	r2, [r7, #4]
 8019fa8:	61da      	str	r2, [r3, #28]
}
 8019faa:	3710      	adds	r7, #16
 8019fac:	46bd      	mov	sp, r7
 8019fae:	bd80      	pop	{r7, pc}
 8019fb0:	08022838 	.word	0x08022838
 8019fb4:	08022b6c 	.word	0x08022b6c
 8019fb8:	0802288c 	.word	0x0802288c

08019fbc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d107      	bne.n	8019fda <udp_remove+0x1e>
 8019fca:	4b19      	ldr	r3, [pc, #100]	@ (801a030 <udp_remove+0x74>)
 8019fcc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8019fd0:	4918      	ldr	r1, [pc, #96]	@ (801a034 <udp_remove+0x78>)
 8019fd2:	4819      	ldr	r0, [pc, #100]	@ (801a038 <udp_remove+0x7c>)
 8019fd4:	f003 fa88 	bl	801d4e8 <iprintf>
 8019fd8:	e026      	b.n	801a028 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019fda:	4b18      	ldr	r3, [pc, #96]	@ (801a03c <udp_remove+0x80>)
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	687a      	ldr	r2, [r7, #4]
 8019fe0:	429a      	cmp	r2, r3
 8019fe2:	d105      	bne.n	8019ff0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019fe4:	4b15      	ldr	r3, [pc, #84]	@ (801a03c <udp_remove+0x80>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	68db      	ldr	r3, [r3, #12]
 8019fea:	4a14      	ldr	r2, [pc, #80]	@ (801a03c <udp_remove+0x80>)
 8019fec:	6013      	str	r3, [r2, #0]
 8019fee:	e017      	b.n	801a020 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019ff0:	4b12      	ldr	r3, [pc, #72]	@ (801a03c <udp_remove+0x80>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	60fb      	str	r3, [r7, #12]
 8019ff6:	e010      	b.n	801a01a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	68db      	ldr	r3, [r3, #12]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d009      	beq.n	801a014 <udp_remove+0x58>
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	68db      	ldr	r3, [r3, #12]
 801a004:	687a      	ldr	r2, [r7, #4]
 801a006:	429a      	cmp	r2, r3
 801a008:	d104      	bne.n	801a014 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	68da      	ldr	r2, [r3, #12]
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	60da      	str	r2, [r3, #12]
        break;
 801a012:	e005      	b.n	801a020 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	68db      	ldr	r3, [r3, #12]
 801a018:	60fb      	str	r3, [r7, #12]
 801a01a:	68fb      	ldr	r3, [r7, #12]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d1eb      	bne.n	8019ff8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a020:	6879      	ldr	r1, [r7, #4]
 801a022:	2000      	movs	r0, #0
 801a024:	f7f7 fffc 	bl	8012020 <memp_free>
}
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}
 801a02e:	bf00      	nop
 801a030:	08022838 	.word	0x08022838
 801a034:	08022b84 	.word	0x08022b84
 801a038:	0802288c 	.word	0x0802288c
 801a03c:	2000f3f0 	.word	0x2000f3f0

0801a040 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b082      	sub	sp, #8
 801a044:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a046:	2000      	movs	r0, #0
 801a048:	f7f7 ff74 	bl	8011f34 <memp_malloc>
 801a04c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d007      	beq.n	801a064 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a054:	2220      	movs	r2, #32
 801a056:	2100      	movs	r1, #0
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	f003 fae4 	bl	801d626 <memset>
    pcb->ttl = UDP_TTL;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	22ff      	movs	r2, #255	@ 0xff
 801a062:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a064:	687b      	ldr	r3, [r7, #4]
}
 801a066:	4618      	mov	r0, r3
 801a068:	3708      	adds	r7, #8
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}

0801a06e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a06e:	b580      	push	{r7, lr}
 801a070:	b084      	sub	sp, #16
 801a072:	af00      	add	r7, sp, #0
 801a074:	4603      	mov	r3, r0
 801a076:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a078:	f7ff ffe2 	bl	801a040 <udp_new>
 801a07c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a07e:	68fb      	ldr	r3, [r7, #12]
}
 801a080:	4618      	mov	r0, r3
 801a082:	3710      	adds	r7, #16
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}

0801a088 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a088:	b480      	push	{r7}
 801a08a:	b085      	sub	sp, #20
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d01e      	beq.n	801a0d6 <udp_netif_ip_addr_changed+0x4e>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d01a      	beq.n	801a0d6 <udp_netif_ip_addr_changed+0x4e>
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d017      	beq.n	801a0d6 <udp_netif_ip_addr_changed+0x4e>
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d013      	beq.n	801a0d6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (801a0e4 <udp_netif_ip_addr_changed+0x5c>)
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	60fb      	str	r3, [r7, #12]
 801a0b4:	e00c      	b.n	801a0d0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	681a      	ldr	r2, [r3, #0]
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d103      	bne.n	801a0ca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	681a      	ldr	r2, [r3, #0]
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	60fb      	str	r3, [r7, #12]
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d1ef      	bne.n	801a0b6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a0d6:	bf00      	nop
 801a0d8:	3714      	adds	r7, #20
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	2000f3f0 	.word	0x2000f3f0

0801a0e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a0e8:	b580      	push	{r7, lr}
 801a0ea:	b082      	sub	sp, #8
 801a0ec:	af00      	add	r7, sp, #0
 801a0ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a0f0:	4915      	ldr	r1, [pc, #84]	@ (801a148 <etharp_free_entry+0x60>)
 801a0f2:	687a      	ldr	r2, [r7, #4]
 801a0f4:	4613      	mov	r3, r2
 801a0f6:	005b      	lsls	r3, r3, #1
 801a0f8:	4413      	add	r3, r2
 801a0fa:	00db      	lsls	r3, r3, #3
 801a0fc:	440b      	add	r3, r1
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d013      	beq.n	801a12c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a104:	4910      	ldr	r1, [pc, #64]	@ (801a148 <etharp_free_entry+0x60>)
 801a106:	687a      	ldr	r2, [r7, #4]
 801a108:	4613      	mov	r3, r2
 801a10a:	005b      	lsls	r3, r3, #1
 801a10c:	4413      	add	r3, r2
 801a10e:	00db      	lsls	r3, r3, #3
 801a110:	440b      	add	r3, r1
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	4618      	mov	r0, r3
 801a116:	f7f8 fe27 	bl	8012d68 <pbuf_free>
    arp_table[i].q = NULL;
 801a11a:	490b      	ldr	r1, [pc, #44]	@ (801a148 <etharp_free_entry+0x60>)
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	4613      	mov	r3, r2
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	4413      	add	r3, r2
 801a124:	00db      	lsls	r3, r3, #3
 801a126:	440b      	add	r3, r1
 801a128:	2200      	movs	r2, #0
 801a12a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a12c:	4906      	ldr	r1, [pc, #24]	@ (801a148 <etharp_free_entry+0x60>)
 801a12e:	687a      	ldr	r2, [r7, #4]
 801a130:	4613      	mov	r3, r2
 801a132:	005b      	lsls	r3, r3, #1
 801a134:	4413      	add	r3, r2
 801a136:	00db      	lsls	r3, r3, #3
 801a138:	440b      	add	r3, r1
 801a13a:	3314      	adds	r3, #20
 801a13c:	2200      	movs	r2, #0
 801a13e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a140:	bf00      	nop
 801a142:	3708      	adds	r7, #8
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}
 801a148:	2000f3f4 	.word	0x2000f3f4

0801a14c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a152:	2300      	movs	r3, #0
 801a154:	607b      	str	r3, [r7, #4]
 801a156:	e096      	b.n	801a286 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a158:	494f      	ldr	r1, [pc, #316]	@ (801a298 <etharp_tmr+0x14c>)
 801a15a:	687a      	ldr	r2, [r7, #4]
 801a15c:	4613      	mov	r3, r2
 801a15e:	005b      	lsls	r3, r3, #1
 801a160:	4413      	add	r3, r2
 801a162:	00db      	lsls	r3, r3, #3
 801a164:	440b      	add	r3, r1
 801a166:	3314      	adds	r3, #20
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a16c:	78fb      	ldrb	r3, [r7, #3]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	f000 8086 	beq.w	801a280 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a174:	4948      	ldr	r1, [pc, #288]	@ (801a298 <etharp_tmr+0x14c>)
 801a176:	687a      	ldr	r2, [r7, #4]
 801a178:	4613      	mov	r3, r2
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	4413      	add	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	440b      	add	r3, r1
 801a182:	3312      	adds	r3, #18
 801a184:	881b      	ldrh	r3, [r3, #0]
 801a186:	3301      	adds	r3, #1
 801a188:	b298      	uxth	r0, r3
 801a18a:	4943      	ldr	r1, [pc, #268]	@ (801a298 <etharp_tmr+0x14c>)
 801a18c:	687a      	ldr	r2, [r7, #4]
 801a18e:	4613      	mov	r3, r2
 801a190:	005b      	lsls	r3, r3, #1
 801a192:	4413      	add	r3, r2
 801a194:	00db      	lsls	r3, r3, #3
 801a196:	440b      	add	r3, r1
 801a198:	3312      	adds	r3, #18
 801a19a:	4602      	mov	r2, r0
 801a19c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a19e:	493e      	ldr	r1, [pc, #248]	@ (801a298 <etharp_tmr+0x14c>)
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	4613      	mov	r3, r2
 801a1a4:	005b      	lsls	r3, r3, #1
 801a1a6:	4413      	add	r3, r2
 801a1a8:	00db      	lsls	r3, r3, #3
 801a1aa:	440b      	add	r3, r1
 801a1ac:	3312      	adds	r3, #18
 801a1ae:	881b      	ldrh	r3, [r3, #0]
 801a1b0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a1b4:	d215      	bcs.n	801a1e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1b6:	4938      	ldr	r1, [pc, #224]	@ (801a298 <etharp_tmr+0x14c>)
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	4613      	mov	r3, r2
 801a1bc:	005b      	lsls	r3, r3, #1
 801a1be:	4413      	add	r3, r2
 801a1c0:	00db      	lsls	r3, r3, #3
 801a1c2:	440b      	add	r3, r1
 801a1c4:	3314      	adds	r3, #20
 801a1c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1c8:	2b01      	cmp	r3, #1
 801a1ca:	d10e      	bne.n	801a1ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a1cc:	4932      	ldr	r1, [pc, #200]	@ (801a298 <etharp_tmr+0x14c>)
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	4613      	mov	r3, r2
 801a1d2:	005b      	lsls	r3, r3, #1
 801a1d4:	4413      	add	r3, r2
 801a1d6:	00db      	lsls	r3, r3, #3
 801a1d8:	440b      	add	r3, r1
 801a1da:	3312      	adds	r3, #18
 801a1dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1de:	2b04      	cmp	r3, #4
 801a1e0:	d903      	bls.n	801a1ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a1e2:	6878      	ldr	r0, [r7, #4]
 801a1e4:	f7ff ff80 	bl	801a0e8 <etharp_free_entry>
 801a1e8:	e04a      	b.n	801a280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a1ea:	492b      	ldr	r1, [pc, #172]	@ (801a298 <etharp_tmr+0x14c>)
 801a1ec:	687a      	ldr	r2, [r7, #4]
 801a1ee:	4613      	mov	r3, r2
 801a1f0:	005b      	lsls	r3, r3, #1
 801a1f2:	4413      	add	r3, r2
 801a1f4:	00db      	lsls	r3, r3, #3
 801a1f6:	440b      	add	r3, r1
 801a1f8:	3314      	adds	r3, #20
 801a1fa:	781b      	ldrb	r3, [r3, #0]
 801a1fc:	2b03      	cmp	r3, #3
 801a1fe:	d10a      	bne.n	801a216 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a200:	4925      	ldr	r1, [pc, #148]	@ (801a298 <etharp_tmr+0x14c>)
 801a202:	687a      	ldr	r2, [r7, #4]
 801a204:	4613      	mov	r3, r2
 801a206:	005b      	lsls	r3, r3, #1
 801a208:	4413      	add	r3, r2
 801a20a:	00db      	lsls	r3, r3, #3
 801a20c:	440b      	add	r3, r1
 801a20e:	3314      	adds	r3, #20
 801a210:	2204      	movs	r2, #4
 801a212:	701a      	strb	r2, [r3, #0]
 801a214:	e034      	b.n	801a280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a216:	4920      	ldr	r1, [pc, #128]	@ (801a298 <etharp_tmr+0x14c>)
 801a218:	687a      	ldr	r2, [r7, #4]
 801a21a:	4613      	mov	r3, r2
 801a21c:	005b      	lsls	r3, r3, #1
 801a21e:	4413      	add	r3, r2
 801a220:	00db      	lsls	r3, r3, #3
 801a222:	440b      	add	r3, r1
 801a224:	3314      	adds	r3, #20
 801a226:	781b      	ldrb	r3, [r3, #0]
 801a228:	2b04      	cmp	r3, #4
 801a22a:	d10a      	bne.n	801a242 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a22c:	491a      	ldr	r1, [pc, #104]	@ (801a298 <etharp_tmr+0x14c>)
 801a22e:	687a      	ldr	r2, [r7, #4]
 801a230:	4613      	mov	r3, r2
 801a232:	005b      	lsls	r3, r3, #1
 801a234:	4413      	add	r3, r2
 801a236:	00db      	lsls	r3, r3, #3
 801a238:	440b      	add	r3, r1
 801a23a:	3314      	adds	r3, #20
 801a23c:	2202      	movs	r2, #2
 801a23e:	701a      	strb	r2, [r3, #0]
 801a240:	e01e      	b.n	801a280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a242:	4915      	ldr	r1, [pc, #84]	@ (801a298 <etharp_tmr+0x14c>)
 801a244:	687a      	ldr	r2, [r7, #4]
 801a246:	4613      	mov	r3, r2
 801a248:	005b      	lsls	r3, r3, #1
 801a24a:	4413      	add	r3, r2
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	440b      	add	r3, r1
 801a250:	3314      	adds	r3, #20
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	2b01      	cmp	r3, #1
 801a256:	d113      	bne.n	801a280 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a258:	490f      	ldr	r1, [pc, #60]	@ (801a298 <etharp_tmr+0x14c>)
 801a25a:	687a      	ldr	r2, [r7, #4]
 801a25c:	4613      	mov	r3, r2
 801a25e:	005b      	lsls	r3, r3, #1
 801a260:	4413      	add	r3, r2
 801a262:	00db      	lsls	r3, r3, #3
 801a264:	440b      	add	r3, r1
 801a266:	3308      	adds	r3, #8
 801a268:	6818      	ldr	r0, [r3, #0]
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	4613      	mov	r3, r2
 801a26e:	005b      	lsls	r3, r3, #1
 801a270:	4413      	add	r3, r2
 801a272:	00db      	lsls	r3, r3, #3
 801a274:	4a08      	ldr	r2, [pc, #32]	@ (801a298 <etharp_tmr+0x14c>)
 801a276:	4413      	add	r3, r2
 801a278:	3304      	adds	r3, #4
 801a27a:	4619      	mov	r1, r3
 801a27c:	f000 fe6e 	bl	801af5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	3301      	adds	r3, #1
 801a284:	607b      	str	r3, [r7, #4]
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	2b09      	cmp	r3, #9
 801a28a:	f77f af65 	ble.w	801a158 <etharp_tmr+0xc>
      }
    }
  }
}
 801a28e:	bf00      	nop
 801a290:	bf00      	nop
 801a292:	3708      	adds	r7, #8
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}
 801a298:	2000f3f4 	.word	0x2000f3f4

0801a29c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b08a      	sub	sp, #40	@ 0x28
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	60f8      	str	r0, [r7, #12]
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	607a      	str	r2, [r7, #4]
 801a2a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a2aa:	230a      	movs	r3, #10
 801a2ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a2ae:	230a      	movs	r3, #10
 801a2b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a2b2:	230a      	movs	r3, #10
 801a2b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a2ba:	230a      	movs	r3, #10
 801a2bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a2be:	2300      	movs	r3, #0
 801a2c0:	83bb      	strh	r3, [r7, #28]
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	837b      	strh	r3, [r7, #26]
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	843b      	strh	r3, [r7, #32]
 801a2ce:	e0ae      	b.n	801a42e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a2d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2d4:	49a6      	ldr	r1, [pc, #664]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	4413      	add	r3, r2
 801a2dc:	00db      	lsls	r3, r3, #3
 801a2de:	440b      	add	r3, r1
 801a2e0:	3314      	adds	r3, #20
 801a2e2:	781b      	ldrb	r3, [r3, #0]
 801a2e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a2e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a2ea:	2b0a      	cmp	r3, #10
 801a2ec:	d105      	bne.n	801a2fa <etharp_find_entry+0x5e>
 801a2ee:	7dfb      	ldrb	r3, [r7, #23]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d102      	bne.n	801a2fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a2f4:	8c3b      	ldrh	r3, [r7, #32]
 801a2f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a2f8:	e095      	b.n	801a426 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a2fa:	7dfb      	ldrb	r3, [r7, #23]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	f000 8092 	beq.w	801a426 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a302:	7dfb      	ldrb	r3, [r7, #23]
 801a304:	2b01      	cmp	r3, #1
 801a306:	d009      	beq.n	801a31c <etharp_find_entry+0x80>
 801a308:	7dfb      	ldrb	r3, [r7, #23]
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	d806      	bhi.n	801a31c <etharp_find_entry+0x80>
 801a30e:	4b99      	ldr	r3, [pc, #612]	@ (801a574 <etharp_find_entry+0x2d8>)
 801a310:	f240 1223 	movw	r2, #291	@ 0x123
 801a314:	4998      	ldr	r1, [pc, #608]	@ (801a578 <etharp_find_entry+0x2dc>)
 801a316:	4899      	ldr	r0, [pc, #612]	@ (801a57c <etharp_find_entry+0x2e0>)
 801a318:	f003 f8e6 	bl	801d4e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d020      	beq.n	801a364 <etharp_find_entry+0xc8>
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	6819      	ldr	r1, [r3, #0]
 801a326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a32a:	4891      	ldr	r0, [pc, #580]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a32c:	4613      	mov	r3, r2
 801a32e:	005b      	lsls	r3, r3, #1
 801a330:	4413      	add	r3, r2
 801a332:	00db      	lsls	r3, r3, #3
 801a334:	4403      	add	r3, r0
 801a336:	3304      	adds	r3, #4
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	4299      	cmp	r1, r3
 801a33c:	d112      	bne.n	801a364 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	2b00      	cmp	r3, #0
 801a342:	d00c      	beq.n	801a35e <etharp_find_entry+0xc2>
 801a344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a348:	4989      	ldr	r1, [pc, #548]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a34a:	4613      	mov	r3, r2
 801a34c:	005b      	lsls	r3, r3, #1
 801a34e:	4413      	add	r3, r2
 801a350:	00db      	lsls	r3, r3, #3
 801a352:	440b      	add	r3, r1
 801a354:	3308      	adds	r3, #8
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	687a      	ldr	r2, [r7, #4]
 801a35a:	429a      	cmp	r2, r3
 801a35c:	d102      	bne.n	801a364 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a35e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a362:	e100      	b.n	801a566 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a364:	7dfb      	ldrb	r3, [r7, #23]
 801a366:	2b01      	cmp	r3, #1
 801a368:	d140      	bne.n	801a3ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a36a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a36e:	4980      	ldr	r1, [pc, #512]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a370:	4613      	mov	r3, r2
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	4413      	add	r3, r2
 801a376:	00db      	lsls	r3, r3, #3
 801a378:	440b      	add	r3, r1
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d01a      	beq.n	801a3b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a384:	497a      	ldr	r1, [pc, #488]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a386:	4613      	mov	r3, r2
 801a388:	005b      	lsls	r3, r3, #1
 801a38a:	4413      	add	r3, r2
 801a38c:	00db      	lsls	r3, r3, #3
 801a38e:	440b      	add	r3, r1
 801a390:	3312      	adds	r3, #18
 801a392:	881b      	ldrh	r3, [r3, #0]
 801a394:	8bba      	ldrh	r2, [r7, #28]
 801a396:	429a      	cmp	r2, r3
 801a398:	d845      	bhi.n	801a426 <etharp_find_entry+0x18a>
            old_queue = i;
 801a39a:	8c3b      	ldrh	r3, [r7, #32]
 801a39c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a39e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3a2:	4973      	ldr	r1, [pc, #460]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a3a4:	4613      	mov	r3, r2
 801a3a6:	005b      	lsls	r3, r3, #1
 801a3a8:	4413      	add	r3, r2
 801a3aa:	00db      	lsls	r3, r3, #3
 801a3ac:	440b      	add	r3, r1
 801a3ae:	3312      	adds	r3, #18
 801a3b0:	881b      	ldrh	r3, [r3, #0]
 801a3b2:	83bb      	strh	r3, [r7, #28]
 801a3b4:	e037      	b.n	801a426 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a3b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3ba:	496d      	ldr	r1, [pc, #436]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a3bc:	4613      	mov	r3, r2
 801a3be:	005b      	lsls	r3, r3, #1
 801a3c0:	4413      	add	r3, r2
 801a3c2:	00db      	lsls	r3, r3, #3
 801a3c4:	440b      	add	r3, r1
 801a3c6:	3312      	adds	r3, #18
 801a3c8:	881b      	ldrh	r3, [r3, #0]
 801a3ca:	8b7a      	ldrh	r2, [r7, #26]
 801a3cc:	429a      	cmp	r2, r3
 801a3ce:	d82a      	bhi.n	801a426 <etharp_find_entry+0x18a>
            old_pending = i;
 801a3d0:	8c3b      	ldrh	r3, [r7, #32]
 801a3d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3d8:	4965      	ldr	r1, [pc, #404]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a3da:	4613      	mov	r3, r2
 801a3dc:	005b      	lsls	r3, r3, #1
 801a3de:	4413      	add	r3, r2
 801a3e0:	00db      	lsls	r3, r3, #3
 801a3e2:	440b      	add	r3, r1
 801a3e4:	3312      	adds	r3, #18
 801a3e6:	881b      	ldrh	r3, [r3, #0]
 801a3e8:	837b      	strh	r3, [r7, #26]
 801a3ea:	e01c      	b.n	801a426 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a3ec:	7dfb      	ldrb	r3, [r7, #23]
 801a3ee:	2b01      	cmp	r3, #1
 801a3f0:	d919      	bls.n	801a426 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3f6:	495e      	ldr	r1, [pc, #376]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a3f8:	4613      	mov	r3, r2
 801a3fa:	005b      	lsls	r3, r3, #1
 801a3fc:	4413      	add	r3, r2
 801a3fe:	00db      	lsls	r3, r3, #3
 801a400:	440b      	add	r3, r1
 801a402:	3312      	adds	r3, #18
 801a404:	881b      	ldrh	r3, [r3, #0]
 801a406:	8b3a      	ldrh	r2, [r7, #24]
 801a408:	429a      	cmp	r2, r3
 801a40a:	d80c      	bhi.n	801a426 <etharp_find_entry+0x18a>
            old_stable = i;
 801a40c:	8c3b      	ldrh	r3, [r7, #32]
 801a40e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a414:	4956      	ldr	r1, [pc, #344]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a416:	4613      	mov	r3, r2
 801a418:	005b      	lsls	r3, r3, #1
 801a41a:	4413      	add	r3, r2
 801a41c:	00db      	lsls	r3, r3, #3
 801a41e:	440b      	add	r3, r1
 801a420:	3312      	adds	r3, #18
 801a422:	881b      	ldrh	r3, [r3, #0]
 801a424:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a426:	8c3b      	ldrh	r3, [r7, #32]
 801a428:	3301      	adds	r3, #1
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	843b      	strh	r3, [r7, #32]
 801a42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a432:	2b09      	cmp	r3, #9
 801a434:	f77f af4c 	ble.w	801a2d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a438:	7afb      	ldrb	r3, [r7, #11]
 801a43a:	f003 0302 	and.w	r3, r3, #2
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d108      	bne.n	801a454 <etharp_find_entry+0x1b8>
 801a442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a446:	2b0a      	cmp	r3, #10
 801a448:	d107      	bne.n	801a45a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a44a:	7afb      	ldrb	r3, [r7, #11]
 801a44c:	f003 0301 	and.w	r3, r3, #1
 801a450:	2b00      	cmp	r3, #0
 801a452:	d102      	bne.n	801a45a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a454:	f04f 33ff 	mov.w	r3, #4294967295
 801a458:	e085      	b.n	801a566 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a45a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a45e:	2b09      	cmp	r3, #9
 801a460:	dc02      	bgt.n	801a468 <etharp_find_entry+0x1cc>
    i = empty;
 801a462:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a464:	843b      	strh	r3, [r7, #32]
 801a466:	e039      	b.n	801a4dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a468:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a46c:	2b09      	cmp	r3, #9
 801a46e:	dc14      	bgt.n	801a49a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a472:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a478:	493d      	ldr	r1, [pc, #244]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a47a:	4613      	mov	r3, r2
 801a47c:	005b      	lsls	r3, r3, #1
 801a47e:	4413      	add	r3, r2
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	440b      	add	r3, r1
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d018      	beq.n	801a4bc <etharp_find_entry+0x220>
 801a48a:	4b3a      	ldr	r3, [pc, #232]	@ (801a574 <etharp_find_entry+0x2d8>)
 801a48c:	f240 126d 	movw	r2, #365	@ 0x16d
 801a490:	493b      	ldr	r1, [pc, #236]	@ (801a580 <etharp_find_entry+0x2e4>)
 801a492:	483a      	ldr	r0, [pc, #232]	@ (801a57c <etharp_find_entry+0x2e0>)
 801a494:	f003 f828 	bl	801d4e8 <iprintf>
 801a498:	e010      	b.n	801a4bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a49a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a49e:	2b09      	cmp	r3, #9
 801a4a0:	dc02      	bgt.n	801a4a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a4a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a4a4:	843b      	strh	r3, [r7, #32]
 801a4a6:	e009      	b.n	801a4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a4a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a4ac:	2b09      	cmp	r3, #9
 801a4ae:	dc02      	bgt.n	801a4b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a4b0:	8bfb      	ldrh	r3, [r7, #30]
 801a4b2:	843b      	strh	r3, [r7, #32]
 801a4b4:	e002      	b.n	801a4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 801a4ba:	e054      	b.n	801a566 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a4bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4c0:	2b09      	cmp	r3, #9
 801a4c2:	dd06      	ble.n	801a4d2 <etharp_find_entry+0x236>
 801a4c4:	4b2b      	ldr	r3, [pc, #172]	@ (801a574 <etharp_find_entry+0x2d8>)
 801a4c6:	f240 127f 	movw	r2, #383	@ 0x17f
 801a4ca:	492e      	ldr	r1, [pc, #184]	@ (801a584 <etharp_find_entry+0x2e8>)
 801a4cc:	482b      	ldr	r0, [pc, #172]	@ (801a57c <etharp_find_entry+0x2e0>)
 801a4ce:	f003 f80b 	bl	801d4e8 <iprintf>
    etharp_free_entry(i);
 801a4d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4d6:	4618      	mov	r0, r3
 801a4d8:	f7ff fe06 	bl	801a0e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a4dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4e0:	2b09      	cmp	r3, #9
 801a4e2:	dd06      	ble.n	801a4f2 <etharp_find_entry+0x256>
 801a4e4:	4b23      	ldr	r3, [pc, #140]	@ (801a574 <etharp_find_entry+0x2d8>)
 801a4e6:	f240 1283 	movw	r2, #387	@ 0x183
 801a4ea:	4926      	ldr	r1, [pc, #152]	@ (801a584 <etharp_find_entry+0x2e8>)
 801a4ec:	4823      	ldr	r0, [pc, #140]	@ (801a57c <etharp_find_entry+0x2e0>)
 801a4ee:	f002 fffb 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a4f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4f6:	491e      	ldr	r1, [pc, #120]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a4f8:	4613      	mov	r3, r2
 801a4fa:	005b      	lsls	r3, r3, #1
 801a4fc:	4413      	add	r3, r2
 801a4fe:	00db      	lsls	r3, r3, #3
 801a500:	440b      	add	r3, r1
 801a502:	3314      	adds	r3, #20
 801a504:	781b      	ldrb	r3, [r3, #0]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d006      	beq.n	801a518 <etharp_find_entry+0x27c>
 801a50a:	4b1a      	ldr	r3, [pc, #104]	@ (801a574 <etharp_find_entry+0x2d8>)
 801a50c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a510:	491d      	ldr	r1, [pc, #116]	@ (801a588 <etharp_find_entry+0x2ec>)
 801a512:	481a      	ldr	r0, [pc, #104]	@ (801a57c <etharp_find_entry+0x2e0>)
 801a514:	f002 ffe8 	bl	801d4e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d00b      	beq.n	801a536 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	6819      	ldr	r1, [r3, #0]
 801a526:	4812      	ldr	r0, [pc, #72]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a528:	4613      	mov	r3, r2
 801a52a:	005b      	lsls	r3, r3, #1
 801a52c:	4413      	add	r3, r2
 801a52e:	00db      	lsls	r3, r3, #3
 801a530:	4403      	add	r3, r0
 801a532:	3304      	adds	r3, #4
 801a534:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a53a:	490d      	ldr	r1, [pc, #52]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	440b      	add	r3, r1
 801a546:	3312      	adds	r3, #18
 801a548:	2200      	movs	r2, #0
 801a54a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a54c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a550:	4907      	ldr	r1, [pc, #28]	@ (801a570 <etharp_find_entry+0x2d4>)
 801a552:	4613      	mov	r3, r2
 801a554:	005b      	lsls	r3, r3, #1
 801a556:	4413      	add	r3, r2
 801a558:	00db      	lsls	r3, r3, #3
 801a55a:	440b      	add	r3, r1
 801a55c:	3308      	adds	r3, #8
 801a55e:	687a      	ldr	r2, [r7, #4]
 801a560:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a562:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a566:	4618      	mov	r0, r3
 801a568:	3728      	adds	r7, #40	@ 0x28
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	bf00      	nop
 801a570:	2000f3f4 	.word	0x2000f3f4
 801a574:	08022b9c 	.word	0x08022b9c
 801a578:	08022bd4 	.word	0x08022bd4
 801a57c:	08022c14 	.word	0x08022c14
 801a580:	08022c3c 	.word	0x08022c3c
 801a584:	08022c54 	.word	0x08022c54
 801a588:	08022c68 	.word	0x08022c68

0801a58c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b088      	sub	sp, #32
 801a590:	af02      	add	r7, sp, #8
 801a592:	60f8      	str	r0, [r7, #12]
 801a594:	60b9      	str	r1, [r7, #8]
 801a596:	607a      	str	r2, [r7, #4]
 801a598:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a5a0:	2b06      	cmp	r3, #6
 801a5a2:	d006      	beq.n	801a5b2 <etharp_update_arp_entry+0x26>
 801a5a4:	4b48      	ldr	r3, [pc, #288]	@ (801a6c8 <etharp_update_arp_entry+0x13c>)
 801a5a6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a5aa:	4948      	ldr	r1, [pc, #288]	@ (801a6cc <etharp_update_arp_entry+0x140>)
 801a5ac:	4848      	ldr	r0, [pc, #288]	@ (801a6d0 <etharp_update_arp_entry+0x144>)
 801a5ae:	f002 ff9b 	bl	801d4e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a5b2:	68bb      	ldr	r3, [r7, #8]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d012      	beq.n	801a5de <etharp_update_arp_entry+0x52>
 801a5b8:	68bb      	ldr	r3, [r7, #8]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d00e      	beq.n	801a5de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a5c0:	68bb      	ldr	r3, [r7, #8]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	68f9      	ldr	r1, [r7, #12]
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	f001 f8fe 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801a5cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d105      	bne.n	801a5de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a5da:	2be0      	cmp	r3, #224	@ 0xe0
 801a5dc:	d102      	bne.n	801a5e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a5de:	f06f 030f 	mvn.w	r3, #15
 801a5e2:	e06c      	b.n	801a6be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a5e4:	78fb      	ldrb	r3, [r7, #3]
 801a5e6:	68fa      	ldr	r2, [r7, #12]
 801a5e8:	4619      	mov	r1, r3
 801a5ea:	68b8      	ldr	r0, [r7, #8]
 801a5ec:	f7ff fe56 	bl	801a29c <etharp_find_entry>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a5f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	da02      	bge.n	801a602 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a5fc:	8afb      	ldrh	r3, [r7, #22]
 801a5fe:	b25b      	sxtb	r3, r3
 801a600:	e05d      	b.n	801a6be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a606:	4933      	ldr	r1, [pc, #204]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a608:	4613      	mov	r3, r2
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	4413      	add	r3, r2
 801a60e:	00db      	lsls	r3, r3, #3
 801a610:	440b      	add	r3, r1
 801a612:	3314      	adds	r3, #20
 801a614:	2202      	movs	r2, #2
 801a616:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a61c:	492d      	ldr	r1, [pc, #180]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a61e:	4613      	mov	r3, r2
 801a620:	005b      	lsls	r3, r3, #1
 801a622:	4413      	add	r3, r2
 801a624:	00db      	lsls	r3, r3, #3
 801a626:	440b      	add	r3, r1
 801a628:	3308      	adds	r3, #8
 801a62a:	68fa      	ldr	r2, [r7, #12]
 801a62c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a62e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a632:	4613      	mov	r3, r2
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	4413      	add	r3, r2
 801a638:	00db      	lsls	r3, r3, #3
 801a63a:	3308      	adds	r3, #8
 801a63c:	4a25      	ldr	r2, [pc, #148]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a63e:	4413      	add	r3, r2
 801a640:	3304      	adds	r3, #4
 801a642:	2206      	movs	r2, #6
 801a644:	6879      	ldr	r1, [r7, #4]
 801a646:	4618      	mov	r0, r3
 801a648:	f003 f8db 	bl	801d802 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a64c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a650:	4920      	ldr	r1, [pc, #128]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a652:	4613      	mov	r3, r2
 801a654:	005b      	lsls	r3, r3, #1
 801a656:	4413      	add	r3, r2
 801a658:	00db      	lsls	r3, r3, #3
 801a65a:	440b      	add	r3, r1
 801a65c:	3312      	adds	r3, #18
 801a65e:	2200      	movs	r2, #0
 801a660:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a662:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a666:	491b      	ldr	r1, [pc, #108]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a668:	4613      	mov	r3, r2
 801a66a:	005b      	lsls	r3, r3, #1
 801a66c:	4413      	add	r3, r2
 801a66e:	00db      	lsls	r3, r3, #3
 801a670:	440b      	add	r3, r1
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d021      	beq.n	801a6bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a67c:	4915      	ldr	r1, [pc, #84]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a67e:	4613      	mov	r3, r2
 801a680:	005b      	lsls	r3, r3, #1
 801a682:	4413      	add	r3, r2
 801a684:	00db      	lsls	r3, r3, #3
 801a686:	440b      	add	r3, r1
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a68c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a690:	4910      	ldr	r1, [pc, #64]	@ (801a6d4 <etharp_update_arp_entry+0x148>)
 801a692:	4613      	mov	r3, r2
 801a694:	005b      	lsls	r3, r3, #1
 801a696:	4413      	add	r3, r2
 801a698:	00db      	lsls	r3, r3, #3
 801a69a:	440b      	add	r3, r1
 801a69c:	2200      	movs	r2, #0
 801a69e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a6a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a6aa:	9300      	str	r3, [sp, #0]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6939      	ldr	r1, [r7, #16]
 801a6b0:	68f8      	ldr	r0, [r7, #12]
 801a6b2:	f001 ff97 	bl	801c5e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a6b6:	6938      	ldr	r0, [r7, #16]
 801a6b8:	f7f8 fb56 	bl	8012d68 <pbuf_free>
  }
  return ERR_OK;
 801a6bc:	2300      	movs	r3, #0
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3718      	adds	r7, #24
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
 801a6c6:	bf00      	nop
 801a6c8:	08022b9c 	.word	0x08022b9c
 801a6cc:	08022c94 	.word	0x08022c94
 801a6d0:	08022c14 	.word	0x08022c14
 801a6d4:	2000f3f4 	.word	0x2000f3f4

0801a6d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b084      	sub	sp, #16
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	60fb      	str	r3, [r7, #12]
 801a6e4:	e01e      	b.n	801a724 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a6e6:	4913      	ldr	r1, [pc, #76]	@ (801a734 <etharp_cleanup_netif+0x5c>)
 801a6e8:	68fa      	ldr	r2, [r7, #12]
 801a6ea:	4613      	mov	r3, r2
 801a6ec:	005b      	lsls	r3, r3, #1
 801a6ee:	4413      	add	r3, r2
 801a6f0:	00db      	lsls	r3, r3, #3
 801a6f2:	440b      	add	r3, r1
 801a6f4:	3314      	adds	r3, #20
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a6fa:	7afb      	ldrb	r3, [r7, #11]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d00e      	beq.n	801a71e <etharp_cleanup_netif+0x46>
 801a700:	490c      	ldr	r1, [pc, #48]	@ (801a734 <etharp_cleanup_netif+0x5c>)
 801a702:	68fa      	ldr	r2, [r7, #12]
 801a704:	4613      	mov	r3, r2
 801a706:	005b      	lsls	r3, r3, #1
 801a708:	4413      	add	r3, r2
 801a70a:	00db      	lsls	r3, r3, #3
 801a70c:	440b      	add	r3, r1
 801a70e:	3308      	adds	r3, #8
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	687a      	ldr	r2, [r7, #4]
 801a714:	429a      	cmp	r2, r3
 801a716:	d102      	bne.n	801a71e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a718:	68f8      	ldr	r0, [r7, #12]
 801a71a:	f7ff fce5 	bl	801a0e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	3301      	adds	r3, #1
 801a722:	60fb      	str	r3, [r7, #12]
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	2b09      	cmp	r3, #9
 801a728:	dddd      	ble.n	801a6e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a72a:	bf00      	nop
 801a72c:	bf00      	nop
 801a72e:	3710      	adds	r7, #16
 801a730:	46bd      	mov	sp, r7
 801a732:	bd80      	pop	{r7, pc}
 801a734:	2000f3f4 	.word	0x2000f3f4

0801a738 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a738:	b5b0      	push	{r4, r5, r7, lr}
 801a73a:	b08a      	sub	sp, #40	@ 0x28
 801a73c:	af04      	add	r7, sp, #16
 801a73e:	6078      	str	r0, [r7, #4]
 801a740:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d107      	bne.n	801a758 <etharp_input+0x20>
 801a748:	4b3d      	ldr	r3, [pc, #244]	@ (801a840 <etharp_input+0x108>)
 801a74a:	f240 228a 	movw	r2, #650	@ 0x28a
 801a74e:	493d      	ldr	r1, [pc, #244]	@ (801a844 <etharp_input+0x10c>)
 801a750:	483d      	ldr	r0, [pc, #244]	@ (801a848 <etharp_input+0x110>)
 801a752:	f002 fec9 	bl	801d4e8 <iprintf>
 801a756:	e06f      	b.n	801a838 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	685b      	ldr	r3, [r3, #4]
 801a75c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	881b      	ldrh	r3, [r3, #0]
 801a762:	b29b      	uxth	r3, r3
 801a764:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a768:	d10c      	bne.n	801a784 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a76a:	693b      	ldr	r3, [r7, #16]
 801a76c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a76e:	2b06      	cmp	r3, #6
 801a770:	d108      	bne.n	801a784 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a776:	2b04      	cmp	r3, #4
 801a778:	d104      	bne.n	801a784 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a77a:	693b      	ldr	r3, [r7, #16]
 801a77c:	885b      	ldrh	r3, [r3, #2]
 801a77e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a780:	2b08      	cmp	r3, #8
 801a782:	d003      	beq.n	801a78c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	f7f8 faef 	bl	8012d68 <pbuf_free>
    return;
 801a78a:	e055      	b.n	801a838 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a78c:	693b      	ldr	r3, [r7, #16]
 801a78e:	330e      	adds	r3, #14
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	3318      	adds	r3, #24
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	3304      	adds	r3, #4
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d102      	bne.n	801a7ac <etharp_input+0x74>
    for_us = 0;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	75fb      	strb	r3, [r7, #23]
 801a7aa:	e009      	b.n	801a7c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a7ac:	68ba      	ldr	r2, [r7, #8]
 801a7ae:	683b      	ldr	r3, [r7, #0]
 801a7b0:	3304      	adds	r3, #4
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	bf0c      	ite	eq
 801a7b8:	2301      	moveq	r3, #1
 801a7ba:	2300      	movne	r3, #0
 801a7bc:	b2db      	uxtb	r3, r3
 801a7be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a7c0:	693b      	ldr	r3, [r7, #16]
 801a7c2:	f103 0208 	add.w	r2, r3, #8
 801a7c6:	7dfb      	ldrb	r3, [r7, #23]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d001      	beq.n	801a7d0 <etharp_input+0x98>
 801a7cc:	2301      	movs	r3, #1
 801a7ce:	e000      	b.n	801a7d2 <etharp_input+0x9a>
 801a7d0:	2302      	movs	r3, #2
 801a7d2:	f107 010c 	add.w	r1, r7, #12
 801a7d6:	6838      	ldr	r0, [r7, #0]
 801a7d8:	f7ff fed8 	bl	801a58c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a7dc:	693b      	ldr	r3, [r7, #16]
 801a7de:	88db      	ldrh	r3, [r3, #6]
 801a7e0:	b29b      	uxth	r3, r3
 801a7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a7e6:	d003      	beq.n	801a7f0 <etharp_input+0xb8>
 801a7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a7ec:	d01e      	beq.n	801a82c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a7ee:	e020      	b.n	801a832 <etharp_input+0xfa>
      if (for_us) {
 801a7f0:	7dfb      	ldrb	r3, [r7, #23]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d01c      	beq.n	801a830 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a7fc:	693b      	ldr	r3, [r7, #16]
 801a7fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a808:	683b      	ldr	r3, [r7, #0]
 801a80a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a80c:	693a      	ldr	r2, [r7, #16]
 801a80e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a810:	2102      	movs	r1, #2
 801a812:	9103      	str	r1, [sp, #12]
 801a814:	f107 010c 	add.w	r1, r7, #12
 801a818:	9102      	str	r1, [sp, #8]
 801a81a:	9201      	str	r2, [sp, #4]
 801a81c:	9300      	str	r3, [sp, #0]
 801a81e:	462b      	mov	r3, r5
 801a820:	4622      	mov	r2, r4
 801a822:	4601      	mov	r1, r0
 801a824:	6838      	ldr	r0, [r7, #0]
 801a826:	f000 faeb 	bl	801ae00 <etharp_raw>
      break;
 801a82a:	e001      	b.n	801a830 <etharp_input+0xf8>
      break;
 801a82c:	bf00      	nop
 801a82e:	e000      	b.n	801a832 <etharp_input+0xfa>
      break;
 801a830:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	f7f8 fa98 	bl	8012d68 <pbuf_free>
}
 801a838:	3718      	adds	r7, #24
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bdb0      	pop	{r4, r5, r7, pc}
 801a83e:	bf00      	nop
 801a840:	08022b9c 	.word	0x08022b9c
 801a844:	08022cec 	.word	0x08022cec
 801a848:	08022c14 	.word	0x08022c14

0801a84c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b086      	sub	sp, #24
 801a850:	af02      	add	r7, sp, #8
 801a852:	60f8      	str	r0, [r7, #12]
 801a854:	60b9      	str	r1, [r7, #8]
 801a856:	4613      	mov	r3, r2
 801a858:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a85a:	79fa      	ldrb	r2, [r7, #7]
 801a85c:	4944      	ldr	r1, [pc, #272]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a85e:	4613      	mov	r3, r2
 801a860:	005b      	lsls	r3, r3, #1
 801a862:	4413      	add	r3, r2
 801a864:	00db      	lsls	r3, r3, #3
 801a866:	440b      	add	r3, r1
 801a868:	3314      	adds	r3, #20
 801a86a:	781b      	ldrb	r3, [r3, #0]
 801a86c:	2b01      	cmp	r3, #1
 801a86e:	d806      	bhi.n	801a87e <etharp_output_to_arp_index+0x32>
 801a870:	4b40      	ldr	r3, [pc, #256]	@ (801a974 <etharp_output_to_arp_index+0x128>)
 801a872:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a876:	4940      	ldr	r1, [pc, #256]	@ (801a978 <etharp_output_to_arp_index+0x12c>)
 801a878:	4840      	ldr	r0, [pc, #256]	@ (801a97c <etharp_output_to_arp_index+0x130>)
 801a87a:	f002 fe35 	bl	801d4e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a87e:	79fa      	ldrb	r2, [r7, #7]
 801a880:	493b      	ldr	r1, [pc, #236]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a882:	4613      	mov	r3, r2
 801a884:	005b      	lsls	r3, r3, #1
 801a886:	4413      	add	r3, r2
 801a888:	00db      	lsls	r3, r3, #3
 801a88a:	440b      	add	r3, r1
 801a88c:	3314      	adds	r3, #20
 801a88e:	781b      	ldrb	r3, [r3, #0]
 801a890:	2b02      	cmp	r3, #2
 801a892:	d153      	bne.n	801a93c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a894:	79fa      	ldrb	r2, [r7, #7]
 801a896:	4936      	ldr	r1, [pc, #216]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a898:	4613      	mov	r3, r2
 801a89a:	005b      	lsls	r3, r3, #1
 801a89c:	4413      	add	r3, r2
 801a89e:	00db      	lsls	r3, r3, #3
 801a8a0:	440b      	add	r3, r1
 801a8a2:	3312      	adds	r3, #18
 801a8a4:	881b      	ldrh	r3, [r3, #0]
 801a8a6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a8aa:	d919      	bls.n	801a8e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a8ac:	79fa      	ldrb	r2, [r7, #7]
 801a8ae:	4613      	mov	r3, r2
 801a8b0:	005b      	lsls	r3, r3, #1
 801a8b2:	4413      	add	r3, r2
 801a8b4:	00db      	lsls	r3, r3, #3
 801a8b6:	4a2e      	ldr	r2, [pc, #184]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a8b8:	4413      	add	r3, r2
 801a8ba:	3304      	adds	r3, #4
 801a8bc:	4619      	mov	r1, r3
 801a8be:	68f8      	ldr	r0, [r7, #12]
 801a8c0:	f000 fb4c 	bl	801af5c <etharp_request>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d138      	bne.n	801a93c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a8ca:	79fa      	ldrb	r2, [r7, #7]
 801a8cc:	4928      	ldr	r1, [pc, #160]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a8ce:	4613      	mov	r3, r2
 801a8d0:	005b      	lsls	r3, r3, #1
 801a8d2:	4413      	add	r3, r2
 801a8d4:	00db      	lsls	r3, r3, #3
 801a8d6:	440b      	add	r3, r1
 801a8d8:	3314      	adds	r3, #20
 801a8da:	2203      	movs	r2, #3
 801a8dc:	701a      	strb	r2, [r3, #0]
 801a8de:	e02d      	b.n	801a93c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a8e0:	79fa      	ldrb	r2, [r7, #7]
 801a8e2:	4923      	ldr	r1, [pc, #140]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a8e4:	4613      	mov	r3, r2
 801a8e6:	005b      	lsls	r3, r3, #1
 801a8e8:	4413      	add	r3, r2
 801a8ea:	00db      	lsls	r3, r3, #3
 801a8ec:	440b      	add	r3, r1
 801a8ee:	3312      	adds	r3, #18
 801a8f0:	881b      	ldrh	r3, [r3, #0]
 801a8f2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a8f6:	d321      	bcc.n	801a93c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a8f8:	79fa      	ldrb	r2, [r7, #7]
 801a8fa:	4613      	mov	r3, r2
 801a8fc:	005b      	lsls	r3, r3, #1
 801a8fe:	4413      	add	r3, r2
 801a900:	00db      	lsls	r3, r3, #3
 801a902:	4a1b      	ldr	r2, [pc, #108]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a904:	4413      	add	r3, r2
 801a906:	1d19      	adds	r1, r3, #4
 801a908:	79fa      	ldrb	r2, [r7, #7]
 801a90a:	4613      	mov	r3, r2
 801a90c:	005b      	lsls	r3, r3, #1
 801a90e:	4413      	add	r3, r2
 801a910:	00db      	lsls	r3, r3, #3
 801a912:	3308      	adds	r3, #8
 801a914:	4a16      	ldr	r2, [pc, #88]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a916:	4413      	add	r3, r2
 801a918:	3304      	adds	r3, #4
 801a91a:	461a      	mov	r2, r3
 801a91c:	68f8      	ldr	r0, [r7, #12]
 801a91e:	f000 fafb 	bl	801af18 <etharp_request_dst>
 801a922:	4603      	mov	r3, r0
 801a924:	2b00      	cmp	r3, #0
 801a926:	d109      	bne.n	801a93c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a928:	79fa      	ldrb	r2, [r7, #7]
 801a92a:	4911      	ldr	r1, [pc, #68]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a92c:	4613      	mov	r3, r2
 801a92e:	005b      	lsls	r3, r3, #1
 801a930:	4413      	add	r3, r2
 801a932:	00db      	lsls	r3, r3, #3
 801a934:	440b      	add	r3, r1
 801a936:	3314      	adds	r3, #20
 801a938:	2203      	movs	r2, #3
 801a93a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a942:	79fa      	ldrb	r2, [r7, #7]
 801a944:	4613      	mov	r3, r2
 801a946:	005b      	lsls	r3, r3, #1
 801a948:	4413      	add	r3, r2
 801a94a:	00db      	lsls	r3, r3, #3
 801a94c:	3308      	adds	r3, #8
 801a94e:	4a08      	ldr	r2, [pc, #32]	@ (801a970 <etharp_output_to_arp_index+0x124>)
 801a950:	4413      	add	r3, r2
 801a952:	3304      	adds	r3, #4
 801a954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a958:	9200      	str	r2, [sp, #0]
 801a95a:	460a      	mov	r2, r1
 801a95c:	68b9      	ldr	r1, [r7, #8]
 801a95e:	68f8      	ldr	r0, [r7, #12]
 801a960:	f001 fe40 	bl	801c5e4 <ethernet_output>
 801a964:	4603      	mov	r3, r0
}
 801a966:	4618      	mov	r0, r3
 801a968:	3710      	adds	r7, #16
 801a96a:	46bd      	mov	sp, r7
 801a96c:	bd80      	pop	{r7, pc}
 801a96e:	bf00      	nop
 801a970:	2000f3f4 	.word	0x2000f3f4
 801a974:	08022b9c 	.word	0x08022b9c
 801a978:	08022d0c 	.word	0x08022d0c
 801a97c:	08022c14 	.word	0x08022c14

0801a980 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a980:	b580      	push	{r7, lr}
 801a982:	b08a      	sub	sp, #40	@ 0x28
 801a984:	af02      	add	r7, sp, #8
 801a986:	60f8      	str	r0, [r7, #12]
 801a988:	60b9      	str	r1, [r7, #8]
 801a98a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d106      	bne.n	801a9a4 <etharp_output+0x24>
 801a996:	4b73      	ldr	r3, [pc, #460]	@ (801ab64 <etharp_output+0x1e4>)
 801a998:	f240 321e 	movw	r2, #798	@ 0x31e
 801a99c:	4972      	ldr	r1, [pc, #456]	@ (801ab68 <etharp_output+0x1e8>)
 801a99e:	4873      	ldr	r0, [pc, #460]	@ (801ab6c <etharp_output+0x1ec>)
 801a9a0:	f002 fda2 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d106      	bne.n	801a9b8 <etharp_output+0x38>
 801a9aa:	4b6e      	ldr	r3, [pc, #440]	@ (801ab64 <etharp_output+0x1e4>)
 801a9ac:	f240 321f 	movw	r2, #799	@ 0x31f
 801a9b0:	496f      	ldr	r1, [pc, #444]	@ (801ab70 <etharp_output+0x1f0>)
 801a9b2:	486e      	ldr	r0, [pc, #440]	@ (801ab6c <etharp_output+0x1ec>)
 801a9b4:	f002 fd98 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d106      	bne.n	801a9cc <etharp_output+0x4c>
 801a9be:	4b69      	ldr	r3, [pc, #420]	@ (801ab64 <etharp_output+0x1e4>)
 801a9c0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a9c4:	496b      	ldr	r1, [pc, #428]	@ (801ab74 <etharp_output+0x1f4>)
 801a9c6:	4869      	ldr	r0, [pc, #420]	@ (801ab6c <etharp_output+0x1ec>)
 801a9c8:	f002 fd8e 	bl	801d4e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	68f9      	ldr	r1, [r7, #12]
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f000 fef8 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d002      	beq.n	801a9e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a9de:	4b66      	ldr	r3, [pc, #408]	@ (801ab78 <etharp_output+0x1f8>)
 801a9e0:	61fb      	str	r3, [r7, #28]
 801a9e2:	e0af      	b.n	801ab44 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a9ec:	2be0      	cmp	r3, #224	@ 0xe0
 801a9ee:	d118      	bne.n	801aa22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a9f8:	235e      	movs	r3, #94	@ 0x5e
 801a9fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	3301      	adds	r3, #1
 801aa00:	781b      	ldrb	r3, [r3, #0]
 801aa02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa06:	b2db      	uxtb	r3, r3
 801aa08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	3302      	adds	r3, #2
 801aa0e:	781b      	ldrb	r3, [r3, #0]
 801aa10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	3303      	adds	r3, #3
 801aa16:	781b      	ldrb	r3, [r3, #0]
 801aa18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa1a:	f107 0310 	add.w	r3, r7, #16
 801aa1e:	61fb      	str	r3, [r7, #28]
 801aa20:	e090      	b.n	801ab44 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	681a      	ldr	r2, [r3, #0]
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	3304      	adds	r3, #4
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	405a      	eors	r2, r3
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	3308      	adds	r3, #8
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	4013      	ands	r3, r2
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d012      	beq.n	801aa60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa40:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801aa44:	4293      	cmp	r3, r2
 801aa46:	d00b      	beq.n	801aa60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	330c      	adds	r3, #12
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d003      	beq.n	801aa5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	330c      	adds	r3, #12
 801aa56:	61bb      	str	r3, [r7, #24]
 801aa58:	e002      	b.n	801aa60 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aa5a:	f06f 0303 	mvn.w	r3, #3
 801aa5e:	e07d      	b.n	801ab5c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa60:	4b46      	ldr	r3, [pc, #280]	@ (801ab7c <etharp_output+0x1fc>)
 801aa62:	781b      	ldrb	r3, [r3, #0]
 801aa64:	4619      	mov	r1, r3
 801aa66:	4a46      	ldr	r2, [pc, #280]	@ (801ab80 <etharp_output+0x200>)
 801aa68:	460b      	mov	r3, r1
 801aa6a:	005b      	lsls	r3, r3, #1
 801aa6c:	440b      	add	r3, r1
 801aa6e:	00db      	lsls	r3, r3, #3
 801aa70:	4413      	add	r3, r2
 801aa72:	3314      	adds	r3, #20
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	2b01      	cmp	r3, #1
 801aa78:	d925      	bls.n	801aac6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aa7a:	4b40      	ldr	r3, [pc, #256]	@ (801ab7c <etharp_output+0x1fc>)
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	4619      	mov	r1, r3
 801aa80:	4a3f      	ldr	r2, [pc, #252]	@ (801ab80 <etharp_output+0x200>)
 801aa82:	460b      	mov	r3, r1
 801aa84:	005b      	lsls	r3, r3, #1
 801aa86:	440b      	add	r3, r1
 801aa88:	00db      	lsls	r3, r3, #3
 801aa8a:	4413      	add	r3, r2
 801aa8c:	3308      	adds	r3, #8
 801aa8e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa90:	68fa      	ldr	r2, [r7, #12]
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d117      	bne.n	801aac6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aa96:	69bb      	ldr	r3, [r7, #24]
 801aa98:	681a      	ldr	r2, [r3, #0]
 801aa9a:	4b38      	ldr	r3, [pc, #224]	@ (801ab7c <etharp_output+0x1fc>)
 801aa9c:	781b      	ldrb	r3, [r3, #0]
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	4937      	ldr	r1, [pc, #220]	@ (801ab80 <etharp_output+0x200>)
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	005b      	lsls	r3, r3, #1
 801aaa6:	4403      	add	r3, r0
 801aaa8:	00db      	lsls	r3, r3, #3
 801aaaa:	440b      	add	r3, r1
 801aaac:	3304      	adds	r3, #4
 801aaae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d108      	bne.n	801aac6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aab4:	4b31      	ldr	r3, [pc, #196]	@ (801ab7c <etharp_output+0x1fc>)
 801aab6:	781b      	ldrb	r3, [r3, #0]
 801aab8:	461a      	mov	r2, r3
 801aaba:	68b9      	ldr	r1, [r7, #8]
 801aabc:	68f8      	ldr	r0, [r7, #12]
 801aabe:	f7ff fec5 	bl	801a84c <etharp_output_to_arp_index>
 801aac2:	4603      	mov	r3, r0
 801aac4:	e04a      	b.n	801ab5c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aac6:	2300      	movs	r3, #0
 801aac8:	75fb      	strb	r3, [r7, #23]
 801aaca:	e031      	b.n	801ab30 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aacc:	7dfa      	ldrb	r2, [r7, #23]
 801aace:	492c      	ldr	r1, [pc, #176]	@ (801ab80 <etharp_output+0x200>)
 801aad0:	4613      	mov	r3, r2
 801aad2:	005b      	lsls	r3, r3, #1
 801aad4:	4413      	add	r3, r2
 801aad6:	00db      	lsls	r3, r3, #3
 801aad8:	440b      	add	r3, r1
 801aada:	3314      	adds	r3, #20
 801aadc:	781b      	ldrb	r3, [r3, #0]
 801aade:	2b01      	cmp	r3, #1
 801aae0:	d923      	bls.n	801ab2a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801aae2:	7dfa      	ldrb	r2, [r7, #23]
 801aae4:	4926      	ldr	r1, [pc, #152]	@ (801ab80 <etharp_output+0x200>)
 801aae6:	4613      	mov	r3, r2
 801aae8:	005b      	lsls	r3, r3, #1
 801aaea:	4413      	add	r3, r2
 801aaec:	00db      	lsls	r3, r3, #3
 801aaee:	440b      	add	r3, r1
 801aaf0:	3308      	adds	r3, #8
 801aaf2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aaf4:	68fa      	ldr	r2, [r7, #12]
 801aaf6:	429a      	cmp	r2, r3
 801aaf8:	d117      	bne.n	801ab2a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801aafa:	69bb      	ldr	r3, [r7, #24]
 801aafc:	6819      	ldr	r1, [r3, #0]
 801aafe:	7dfa      	ldrb	r2, [r7, #23]
 801ab00:	481f      	ldr	r0, [pc, #124]	@ (801ab80 <etharp_output+0x200>)
 801ab02:	4613      	mov	r3, r2
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	00db      	lsls	r3, r3, #3
 801ab0a:	4403      	add	r3, r0
 801ab0c:	3304      	adds	r3, #4
 801ab0e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab10:	4299      	cmp	r1, r3
 801ab12:	d10a      	bne.n	801ab2a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab14:	4a19      	ldr	r2, [pc, #100]	@ (801ab7c <etharp_output+0x1fc>)
 801ab16:	7dfb      	ldrb	r3, [r7, #23]
 801ab18:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab1a:	7dfb      	ldrb	r3, [r7, #23]
 801ab1c:	461a      	mov	r2, r3
 801ab1e:	68b9      	ldr	r1, [r7, #8]
 801ab20:	68f8      	ldr	r0, [r7, #12]
 801ab22:	f7ff fe93 	bl	801a84c <etharp_output_to_arp_index>
 801ab26:	4603      	mov	r3, r0
 801ab28:	e018      	b.n	801ab5c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab2a:	7dfb      	ldrb	r3, [r7, #23]
 801ab2c:	3301      	adds	r3, #1
 801ab2e:	75fb      	strb	r3, [r7, #23]
 801ab30:	7dfb      	ldrb	r3, [r7, #23]
 801ab32:	2b09      	cmp	r3, #9
 801ab34:	d9ca      	bls.n	801aacc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ab36:	68ba      	ldr	r2, [r7, #8]
 801ab38:	69b9      	ldr	r1, [r7, #24]
 801ab3a:	68f8      	ldr	r0, [r7, #12]
 801ab3c:	f000 f822 	bl	801ab84 <etharp_query>
 801ab40:	4603      	mov	r3, r0
 801ab42:	e00b      	b.n	801ab5c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ab4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	69fb      	ldr	r3, [r7, #28]
 801ab52:	68b9      	ldr	r1, [r7, #8]
 801ab54:	68f8      	ldr	r0, [r7, #12]
 801ab56:	f001 fd45 	bl	801c5e4 <ethernet_output>
 801ab5a:	4603      	mov	r3, r0
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3720      	adds	r7, #32
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}
 801ab64:	08022b9c 	.word	0x08022b9c
 801ab68:	08022cec 	.word	0x08022cec
 801ab6c:	08022c14 	.word	0x08022c14
 801ab70:	08022d3c 	.word	0x08022d3c
 801ab74:	08022cdc 	.word	0x08022cdc
 801ab78:	08024a80 	.word	0x08024a80
 801ab7c:	2000f4e4 	.word	0x2000f4e4
 801ab80:	2000f3f4 	.word	0x2000f3f4

0801ab84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b08c      	sub	sp, #48	@ 0x30
 801ab88:	af02      	add	r7, sp, #8
 801ab8a:	60f8      	str	r0, [r7, #12]
 801ab8c:	60b9      	str	r1, [r7, #8]
 801ab8e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	3326      	adds	r3, #38	@ 0x26
 801ab94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ab96:	23ff      	movs	r3, #255	@ 0xff
 801ab98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801aba0:	68bb      	ldr	r3, [r7, #8]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	68f9      	ldr	r1, [r7, #12]
 801aba6:	4618      	mov	r0, r3
 801aba8:	f000 fe0e 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801abac:	4603      	mov	r3, r0
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d10c      	bne.n	801abcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abb2:	68bb      	ldr	r3, [r7, #8]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abba:	2be0      	cmp	r3, #224	@ 0xe0
 801abbc:	d006      	beq.n	801abcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d003      	beq.n	801abcc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d102      	bne.n	801abd2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801abcc:	f06f 030f 	mvn.w	r3, #15
 801abd0:	e101      	b.n	801add6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801abd2:	68fa      	ldr	r2, [r7, #12]
 801abd4:	2101      	movs	r1, #1
 801abd6:	68b8      	ldr	r0, [r7, #8]
 801abd8:	f7ff fb60 	bl	801a29c <etharp_find_entry>
 801abdc:	4603      	mov	r3, r0
 801abde:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801abe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	da02      	bge.n	801abee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801abe8:	8a7b      	ldrh	r3, [r7, #18]
 801abea:	b25b      	sxtb	r3, r3
 801abec:	e0f3      	b.n	801add6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801abee:	8a7b      	ldrh	r3, [r7, #18]
 801abf0:	2b7e      	cmp	r3, #126	@ 0x7e
 801abf2:	d906      	bls.n	801ac02 <etharp_query+0x7e>
 801abf4:	4b7a      	ldr	r3, [pc, #488]	@ (801ade0 <etharp_query+0x25c>)
 801abf6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801abfa:	497a      	ldr	r1, [pc, #488]	@ (801ade4 <etharp_query+0x260>)
 801abfc:	487a      	ldr	r0, [pc, #488]	@ (801ade8 <etharp_query+0x264>)
 801abfe:	f002 fc73 	bl	801d4e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac02:	8a7b      	ldrh	r3, [r7, #18]
 801ac04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac06:	7c7a      	ldrb	r2, [r7, #17]
 801ac08:	4978      	ldr	r1, [pc, #480]	@ (801adec <etharp_query+0x268>)
 801ac0a:	4613      	mov	r3, r2
 801ac0c:	005b      	lsls	r3, r3, #1
 801ac0e:	4413      	add	r3, r2
 801ac10:	00db      	lsls	r3, r3, #3
 801ac12:	440b      	add	r3, r1
 801ac14:	3314      	adds	r3, #20
 801ac16:	781b      	ldrb	r3, [r3, #0]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d115      	bne.n	801ac48 <etharp_query+0xc4>
    is_new_entry = 1;
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac20:	7c7a      	ldrb	r2, [r7, #17]
 801ac22:	4972      	ldr	r1, [pc, #456]	@ (801adec <etharp_query+0x268>)
 801ac24:	4613      	mov	r3, r2
 801ac26:	005b      	lsls	r3, r3, #1
 801ac28:	4413      	add	r3, r2
 801ac2a:	00db      	lsls	r3, r3, #3
 801ac2c:	440b      	add	r3, r1
 801ac2e:	3314      	adds	r3, #20
 801ac30:	2201      	movs	r2, #1
 801ac32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ac34:	7c7a      	ldrb	r2, [r7, #17]
 801ac36:	496d      	ldr	r1, [pc, #436]	@ (801adec <etharp_query+0x268>)
 801ac38:	4613      	mov	r3, r2
 801ac3a:	005b      	lsls	r3, r3, #1
 801ac3c:	4413      	add	r3, r2
 801ac3e:	00db      	lsls	r3, r3, #3
 801ac40:	440b      	add	r3, r1
 801ac42:	3308      	adds	r3, #8
 801ac44:	68fa      	ldr	r2, [r7, #12]
 801ac46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ac48:	7c7a      	ldrb	r2, [r7, #17]
 801ac4a:	4968      	ldr	r1, [pc, #416]	@ (801adec <etharp_query+0x268>)
 801ac4c:	4613      	mov	r3, r2
 801ac4e:	005b      	lsls	r3, r3, #1
 801ac50:	4413      	add	r3, r2
 801ac52:	00db      	lsls	r3, r3, #3
 801ac54:	440b      	add	r3, r1
 801ac56:	3314      	adds	r3, #20
 801ac58:	781b      	ldrb	r3, [r3, #0]
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d011      	beq.n	801ac82 <etharp_query+0xfe>
 801ac5e:	7c7a      	ldrb	r2, [r7, #17]
 801ac60:	4962      	ldr	r1, [pc, #392]	@ (801adec <etharp_query+0x268>)
 801ac62:	4613      	mov	r3, r2
 801ac64:	005b      	lsls	r3, r3, #1
 801ac66:	4413      	add	r3, r2
 801ac68:	00db      	lsls	r3, r3, #3
 801ac6a:	440b      	add	r3, r1
 801ac6c:	3314      	adds	r3, #20
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	2b01      	cmp	r3, #1
 801ac72:	d806      	bhi.n	801ac82 <etharp_query+0xfe>
 801ac74:	4b5a      	ldr	r3, [pc, #360]	@ (801ade0 <etharp_query+0x25c>)
 801ac76:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801ac7a:	495d      	ldr	r1, [pc, #372]	@ (801adf0 <etharp_query+0x26c>)
 801ac7c:	485a      	ldr	r0, [pc, #360]	@ (801ade8 <etharp_query+0x264>)
 801ac7e:	f002 fc33 	bl	801d4e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ac82:	6a3b      	ldr	r3, [r7, #32]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d102      	bne.n	801ac8e <etharp_query+0x10a>
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d10c      	bne.n	801aca8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ac8e:	68b9      	ldr	r1, [r7, #8]
 801ac90:	68f8      	ldr	r0, [r7, #12]
 801ac92:	f000 f963 	bl	801af5c <etharp_request>
 801ac96:	4603      	mov	r3, r0
 801ac98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d102      	bne.n	801aca8 <etharp_query+0x124>
      return result;
 801aca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801aca6:	e096      	b.n	801add6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d106      	bne.n	801acbc <etharp_query+0x138>
 801acae:	4b4c      	ldr	r3, [pc, #304]	@ (801ade0 <etharp_query+0x25c>)
 801acb0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801acb4:	494f      	ldr	r1, [pc, #316]	@ (801adf4 <etharp_query+0x270>)
 801acb6:	484c      	ldr	r0, [pc, #304]	@ (801ade8 <etharp_query+0x264>)
 801acb8:	f002 fc16 	bl	801d4e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801acbc:	7c7a      	ldrb	r2, [r7, #17]
 801acbe:	494b      	ldr	r1, [pc, #300]	@ (801adec <etharp_query+0x268>)
 801acc0:	4613      	mov	r3, r2
 801acc2:	005b      	lsls	r3, r3, #1
 801acc4:	4413      	add	r3, r2
 801acc6:	00db      	lsls	r3, r3, #3
 801acc8:	440b      	add	r3, r1
 801acca:	3314      	adds	r3, #20
 801accc:	781b      	ldrb	r3, [r3, #0]
 801acce:	2b01      	cmp	r3, #1
 801acd0:	d917      	bls.n	801ad02 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801acd2:	4a49      	ldr	r2, [pc, #292]	@ (801adf8 <etharp_query+0x274>)
 801acd4:	7c7b      	ldrb	r3, [r7, #17]
 801acd6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801acd8:	7c7a      	ldrb	r2, [r7, #17]
 801acda:	4613      	mov	r3, r2
 801acdc:	005b      	lsls	r3, r3, #1
 801acde:	4413      	add	r3, r2
 801ace0:	00db      	lsls	r3, r3, #3
 801ace2:	3308      	adds	r3, #8
 801ace4:	4a41      	ldr	r2, [pc, #260]	@ (801adec <etharp_query+0x268>)
 801ace6:	4413      	add	r3, r2
 801ace8:	3304      	adds	r3, #4
 801acea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801acee:	9200      	str	r2, [sp, #0]
 801acf0:	697a      	ldr	r2, [r7, #20]
 801acf2:	6879      	ldr	r1, [r7, #4]
 801acf4:	68f8      	ldr	r0, [r7, #12]
 801acf6:	f001 fc75 	bl	801c5e4 <ethernet_output>
 801acfa:	4603      	mov	r3, r0
 801acfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad00:	e067      	b.n	801add2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad02:	7c7a      	ldrb	r2, [r7, #17]
 801ad04:	4939      	ldr	r1, [pc, #228]	@ (801adec <etharp_query+0x268>)
 801ad06:	4613      	mov	r3, r2
 801ad08:	005b      	lsls	r3, r3, #1
 801ad0a:	4413      	add	r3, r2
 801ad0c:	00db      	lsls	r3, r3, #3
 801ad0e:	440b      	add	r3, r1
 801ad10:	3314      	adds	r3, #20
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	2b01      	cmp	r3, #1
 801ad16:	d15c      	bne.n	801add2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad18:	2300      	movs	r3, #0
 801ad1a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad20:	e01c      	b.n	801ad5c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad22:	69fb      	ldr	r3, [r7, #28]
 801ad24:	895a      	ldrh	r2, [r3, #10]
 801ad26:	69fb      	ldr	r3, [r7, #28]
 801ad28:	891b      	ldrh	r3, [r3, #8]
 801ad2a:	429a      	cmp	r2, r3
 801ad2c:	d10a      	bne.n	801ad44 <etharp_query+0x1c0>
 801ad2e:	69fb      	ldr	r3, [r7, #28]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d006      	beq.n	801ad44 <etharp_query+0x1c0>
 801ad36:	4b2a      	ldr	r3, [pc, #168]	@ (801ade0 <etharp_query+0x25c>)
 801ad38:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ad3c:	492f      	ldr	r1, [pc, #188]	@ (801adfc <etharp_query+0x278>)
 801ad3e:	482a      	ldr	r0, [pc, #168]	@ (801ade8 <etharp_query+0x264>)
 801ad40:	f002 fbd2 	bl	801d4e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ad44:	69fb      	ldr	r3, [r7, #28]
 801ad46:	7b1b      	ldrb	r3, [r3, #12]
 801ad48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d002      	beq.n	801ad56 <etharp_query+0x1d2>
        copy_needed = 1;
 801ad50:	2301      	movs	r3, #1
 801ad52:	61bb      	str	r3, [r7, #24]
        break;
 801ad54:	e005      	b.n	801ad62 <etharp_query+0x1de>
      }
      p = p->next;
 801ad56:	69fb      	ldr	r3, [r7, #28]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad5c:	69fb      	ldr	r3, [r7, #28]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d1df      	bne.n	801ad22 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ad62:	69bb      	ldr	r3, [r7, #24]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d007      	beq.n	801ad78 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ad68:	687a      	ldr	r2, [r7, #4]
 801ad6a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ad6e:	200e      	movs	r0, #14
 801ad70:	f7f8 fa72 	bl	8013258 <pbuf_clone>
 801ad74:	61f8      	str	r0, [r7, #28]
 801ad76:	e004      	b.n	801ad82 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ad7c:	69f8      	ldr	r0, [r7, #28]
 801ad7e:	f7f8 f899 	bl	8012eb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ad82:	69fb      	ldr	r3, [r7, #28]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d021      	beq.n	801adcc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ad88:	7c7a      	ldrb	r2, [r7, #17]
 801ad8a:	4918      	ldr	r1, [pc, #96]	@ (801adec <etharp_query+0x268>)
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	4413      	add	r3, r2
 801ad92:	00db      	lsls	r3, r3, #3
 801ad94:	440b      	add	r3, r1
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d00a      	beq.n	801adb2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ad9c:	7c7a      	ldrb	r2, [r7, #17]
 801ad9e:	4913      	ldr	r1, [pc, #76]	@ (801adec <etharp_query+0x268>)
 801ada0:	4613      	mov	r3, r2
 801ada2:	005b      	lsls	r3, r3, #1
 801ada4:	4413      	add	r3, r2
 801ada6:	00db      	lsls	r3, r3, #3
 801ada8:	440b      	add	r3, r1
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	4618      	mov	r0, r3
 801adae:	f7f7 ffdb 	bl	8012d68 <pbuf_free>
      }
      arp_table[i].q = p;
 801adb2:	7c7a      	ldrb	r2, [r7, #17]
 801adb4:	490d      	ldr	r1, [pc, #52]	@ (801adec <etharp_query+0x268>)
 801adb6:	4613      	mov	r3, r2
 801adb8:	005b      	lsls	r3, r3, #1
 801adba:	4413      	add	r3, r2
 801adbc:	00db      	lsls	r3, r3, #3
 801adbe:	440b      	add	r3, r1
 801adc0:	69fa      	ldr	r2, [r7, #28]
 801adc2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801adc4:	2300      	movs	r3, #0
 801adc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801adca:	e002      	b.n	801add2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801adcc:	23ff      	movs	r3, #255	@ 0xff
 801adce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801add2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801add6:	4618      	mov	r0, r3
 801add8:	3728      	adds	r7, #40	@ 0x28
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}
 801adde:	bf00      	nop
 801ade0:	08022b9c 	.word	0x08022b9c
 801ade4:	08022d48 	.word	0x08022d48
 801ade8:	08022c14 	.word	0x08022c14
 801adec:	2000f3f4 	.word	0x2000f3f4
 801adf0:	08022d58 	.word	0x08022d58
 801adf4:	08022d3c 	.word	0x08022d3c
 801adf8:	2000f4e4 	.word	0x2000f4e4
 801adfc:	08022d80 	.word	0x08022d80

0801ae00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b08a      	sub	sp, #40	@ 0x28
 801ae04:	af02      	add	r7, sp, #8
 801ae06:	60f8      	str	r0, [r7, #12]
 801ae08:	60b9      	str	r1, [r7, #8]
 801ae0a:	607a      	str	r2, [r7, #4]
 801ae0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d106      	bne.n	801ae26 <etharp_raw+0x26>
 801ae18:	4b3a      	ldr	r3, [pc, #232]	@ (801af04 <etharp_raw+0x104>)
 801ae1a:	f240 4257 	movw	r2, #1111	@ 0x457
 801ae1e:	493a      	ldr	r1, [pc, #232]	@ (801af08 <etharp_raw+0x108>)
 801ae20:	483a      	ldr	r0, [pc, #232]	@ (801af0c <etharp_raw+0x10c>)
 801ae22:	f002 fb61 	bl	801d4e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae2a:	211c      	movs	r1, #28
 801ae2c:	200e      	movs	r0, #14
 801ae2e:	f7f7 fcb7 	bl	80127a0 <pbuf_alloc>
 801ae32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ae34:	69bb      	ldr	r3, [r7, #24]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d102      	bne.n	801ae40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 801ae3e:	e05d      	b.n	801aefc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ae40:	69bb      	ldr	r3, [r7, #24]
 801ae42:	895b      	ldrh	r3, [r3, #10]
 801ae44:	2b1b      	cmp	r3, #27
 801ae46:	d806      	bhi.n	801ae56 <etharp_raw+0x56>
 801ae48:	4b2e      	ldr	r3, [pc, #184]	@ (801af04 <etharp_raw+0x104>)
 801ae4a:	f240 4262 	movw	r2, #1122	@ 0x462
 801ae4e:	4930      	ldr	r1, [pc, #192]	@ (801af10 <etharp_raw+0x110>)
 801ae50:	482e      	ldr	r0, [pc, #184]	@ (801af0c <etharp_raw+0x10c>)
 801ae52:	f002 fb49 	bl	801d4e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ae56:	69bb      	ldr	r3, [r7, #24]
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ae5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ae5e:	4618      	mov	r0, r3
 801ae60:	f7f6 fb5a 	bl	8011518 <lwip_htons>
 801ae64:	4603      	mov	r3, r0
 801ae66:	461a      	mov	r2, r3
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ae72:	2b06      	cmp	r3, #6
 801ae74:	d006      	beq.n	801ae84 <etharp_raw+0x84>
 801ae76:	4b23      	ldr	r3, [pc, #140]	@ (801af04 <etharp_raw+0x104>)
 801ae78:	f240 4269 	movw	r2, #1129	@ 0x469
 801ae7c:	4925      	ldr	r1, [pc, #148]	@ (801af14 <etharp_raw+0x114>)
 801ae7e:	4823      	ldr	r0, [pc, #140]	@ (801af0c <etharp_raw+0x10c>)
 801ae80:	f002 fb32 	bl	801d4e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ae84:	697b      	ldr	r3, [r7, #20]
 801ae86:	3308      	adds	r3, #8
 801ae88:	2206      	movs	r2, #6
 801ae8a:	6839      	ldr	r1, [r7, #0]
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f002 fcb8 	bl	801d802 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ae92:	697b      	ldr	r3, [r7, #20]
 801ae94:	3312      	adds	r3, #18
 801ae96:	2206      	movs	r2, #6
 801ae98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f002 fcb1 	bl	801d802 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	330e      	adds	r3, #14
 801aea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aea6:	6812      	ldr	r2, [r2, #0]
 801aea8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aeaa:	697b      	ldr	r3, [r7, #20]
 801aeac:	3318      	adds	r3, #24
 801aeae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aeb0:	6812      	ldr	r2, [r2, #0]
 801aeb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	701a      	strb	r2, [r3, #0]
 801aeba:	2200      	movs	r2, #0
 801aebc:	f042 0201 	orr.w	r2, r2, #1
 801aec0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801aec2:	697b      	ldr	r3, [r7, #20]
 801aec4:	2200      	movs	r2, #0
 801aec6:	f042 0208 	orr.w	r2, r2, #8
 801aeca:	709a      	strb	r2, [r3, #2]
 801aecc:	2200      	movs	r2, #0
 801aece:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	2206      	movs	r2, #6
 801aed4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	2204      	movs	r2, #4
 801aeda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801aedc:	f640 0306 	movw	r3, #2054	@ 0x806
 801aee0:	9300      	str	r3, [sp, #0]
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	68ba      	ldr	r2, [r7, #8]
 801aee6:	69b9      	ldr	r1, [r7, #24]
 801aee8:	68f8      	ldr	r0, [r7, #12]
 801aeea:	f001 fb7b 	bl	801c5e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801aeee:	69b8      	ldr	r0, [r7, #24]
 801aef0:	f7f7 ff3a 	bl	8012d68 <pbuf_free>
  p = NULL;
 801aef4:	2300      	movs	r3, #0
 801aef6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801aef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aefc:	4618      	mov	r0, r3
 801aefe:	3720      	adds	r7, #32
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}
 801af04:	08022b9c 	.word	0x08022b9c
 801af08:	08022cec 	.word	0x08022cec
 801af0c:	08022c14 	.word	0x08022c14
 801af10:	08022d9c 	.word	0x08022d9c
 801af14:	08022dd0 	.word	0x08022dd0

0801af18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b088      	sub	sp, #32
 801af1c:	af04      	add	r7, sp, #16
 801af1e:	60f8      	str	r0, [r7, #12]
 801af20:	60b9      	str	r1, [r7, #8]
 801af22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af34:	2201      	movs	r2, #1
 801af36:	9203      	str	r2, [sp, #12]
 801af38:	68ba      	ldr	r2, [r7, #8]
 801af3a:	9202      	str	r2, [sp, #8]
 801af3c:	4a06      	ldr	r2, [pc, #24]	@ (801af58 <etharp_request_dst+0x40>)
 801af3e:	9201      	str	r2, [sp, #4]
 801af40:	9300      	str	r3, [sp, #0]
 801af42:	4603      	mov	r3, r0
 801af44:	687a      	ldr	r2, [r7, #4]
 801af46:	68f8      	ldr	r0, [r7, #12]
 801af48:	f7ff ff5a 	bl	801ae00 <etharp_raw>
 801af4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801af4e:	4618      	mov	r0, r3
 801af50:	3710      	adds	r7, #16
 801af52:	46bd      	mov	sp, r7
 801af54:	bd80      	pop	{r7, pc}
 801af56:	bf00      	nop
 801af58:	08024a88 	.word	0x08024a88

0801af5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b082      	sub	sp, #8
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
 801af64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801af66:	4a05      	ldr	r2, [pc, #20]	@ (801af7c <etharp_request+0x20>)
 801af68:	6839      	ldr	r1, [r7, #0]
 801af6a:	6878      	ldr	r0, [r7, #4]
 801af6c:	f7ff ffd4 	bl	801af18 <etharp_request_dst>
 801af70:	4603      	mov	r3, r0
}
 801af72:	4618      	mov	r0, r3
 801af74:	3708      	adds	r7, #8
 801af76:	46bd      	mov	sp, r7
 801af78:	bd80      	pop	{r7, pc}
 801af7a:	bf00      	nop
 801af7c:	08024a80 	.word	0x08024a80

0801af80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b08e      	sub	sp, #56	@ 0x38
 801af84:	af04      	add	r7, sp, #16
 801af86:	6078      	str	r0, [r7, #4]
 801af88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801af8a:	4b79      	ldr	r3, [pc, #484]	@ (801b170 <icmp_input+0x1f0>)
 801af8c:	689b      	ldr	r3, [r3, #8]
 801af8e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801af90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af92:	781b      	ldrb	r3, [r3, #0]
 801af94:	f003 030f 	and.w	r3, r3, #15
 801af98:	b2db      	uxtb	r3, r3
 801af9a:	009b      	lsls	r3, r3, #2
 801af9c:	b2db      	uxtb	r3, r3
 801af9e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801afa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801afa2:	2b13      	cmp	r3, #19
 801afa4:	f240 80cd 	bls.w	801b142 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	895b      	ldrh	r3, [r3, #10]
 801afac:	2b03      	cmp	r3, #3
 801afae:	f240 80ca 	bls.w	801b146 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	685b      	ldr	r3, [r3, #4]
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801afbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	f000 80b7 	beq.w	801b134 <icmp_input+0x1b4>
 801afc6:	2b08      	cmp	r3, #8
 801afc8:	f040 80b7 	bne.w	801b13a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801afcc:	4b69      	ldr	r3, [pc, #420]	@ (801b174 <icmp_input+0x1f4>)
 801afce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801afd0:	4b67      	ldr	r3, [pc, #412]	@ (801b170 <icmp_input+0x1f0>)
 801afd2:	695b      	ldr	r3, [r3, #20]
 801afd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801afd8:	2be0      	cmp	r3, #224	@ 0xe0
 801afda:	f000 80bb 	beq.w	801b154 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801afde:	4b64      	ldr	r3, [pc, #400]	@ (801b170 <icmp_input+0x1f0>)
 801afe0:	695b      	ldr	r3, [r3, #20]
 801afe2:	4a63      	ldr	r2, [pc, #396]	@ (801b170 <icmp_input+0x1f0>)
 801afe4:	6812      	ldr	r2, [r2, #0]
 801afe6:	4611      	mov	r1, r2
 801afe8:	4618      	mov	r0, r3
 801afea:	f000 fbed 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801afee:	4603      	mov	r3, r0
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	f040 80b1 	bne.w	801b158 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	891b      	ldrh	r3, [r3, #8]
 801affa:	2b07      	cmp	r3, #7
 801affc:	f240 80a5 	bls.w	801b14a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b000:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b002:	330e      	adds	r3, #14
 801b004:	4619      	mov	r1, r3
 801b006:	6878      	ldr	r0, [r7, #4]
 801b008:	f7f7 fe18 	bl	8012c3c <pbuf_add_header>
 801b00c:	4603      	mov	r3, r0
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d04b      	beq.n	801b0aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	891a      	ldrh	r2, [r3, #8]
 801b016:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b018:	4413      	add	r3, r2
 801b01a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	891b      	ldrh	r3, [r3, #8]
 801b020:	8b7a      	ldrh	r2, [r7, #26]
 801b022:	429a      	cmp	r2, r3
 801b024:	f0c0 809a 	bcc.w	801b15c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b028:	8b7b      	ldrh	r3, [r7, #26]
 801b02a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b02e:	4619      	mov	r1, r3
 801b030:	200e      	movs	r0, #14
 801b032:	f7f7 fbb5 	bl	80127a0 <pbuf_alloc>
 801b036:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	f000 8090 	beq.w	801b160 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b040:	697b      	ldr	r3, [r7, #20]
 801b042:	895b      	ldrh	r3, [r3, #10]
 801b044:	461a      	mov	r2, r3
 801b046:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b048:	3308      	adds	r3, #8
 801b04a:	429a      	cmp	r2, r3
 801b04c:	d203      	bcs.n	801b056 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b04e:	6978      	ldr	r0, [r7, #20]
 801b050:	f7f7 fe8a 	bl	8012d68 <pbuf_free>
          goto icmperr;
 801b054:	e085      	b.n	801b162 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	685b      	ldr	r3, [r3, #4]
 801b05a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b05c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b05e:	4618      	mov	r0, r3
 801b060:	f002 fbcf 	bl	801d802 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b064:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b066:	4619      	mov	r1, r3
 801b068:	6978      	ldr	r0, [r7, #20]
 801b06a:	f7f7 fdf7 	bl	8012c5c <pbuf_remove_header>
 801b06e:	4603      	mov	r3, r0
 801b070:	2b00      	cmp	r3, #0
 801b072:	d009      	beq.n	801b088 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b074:	4b40      	ldr	r3, [pc, #256]	@ (801b178 <icmp_input+0x1f8>)
 801b076:	22b6      	movs	r2, #182	@ 0xb6
 801b078:	4940      	ldr	r1, [pc, #256]	@ (801b17c <icmp_input+0x1fc>)
 801b07a:	4841      	ldr	r0, [pc, #260]	@ (801b180 <icmp_input+0x200>)
 801b07c:	f002 fa34 	bl	801d4e8 <iprintf>
          pbuf_free(r);
 801b080:	6978      	ldr	r0, [r7, #20]
 801b082:	f7f7 fe71 	bl	8012d68 <pbuf_free>
          goto icmperr;
 801b086:	e06c      	b.n	801b162 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b088:	6879      	ldr	r1, [r7, #4]
 801b08a:	6978      	ldr	r0, [r7, #20]
 801b08c:	f7f7 ffa0 	bl	8012fd0 <pbuf_copy>
 801b090:	4603      	mov	r3, r0
 801b092:	2b00      	cmp	r3, #0
 801b094:	d003      	beq.n	801b09e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b096:	6978      	ldr	r0, [r7, #20]
 801b098:	f7f7 fe66 	bl	8012d68 <pbuf_free>
          goto icmperr;
 801b09c:	e061      	b.n	801b162 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b09e:	6878      	ldr	r0, [r7, #4]
 801b0a0:	f7f7 fe62 	bl	8012d68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b0a4:	697b      	ldr	r3, [r7, #20]
 801b0a6:	607b      	str	r3, [r7, #4]
 801b0a8:	e00f      	b.n	801b0ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0ac:	330e      	adds	r3, #14
 801b0ae:	4619      	mov	r1, r3
 801b0b0:	6878      	ldr	r0, [r7, #4]
 801b0b2:	f7f7 fdd3 	bl	8012c5c <pbuf_remove_header>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d006      	beq.n	801b0ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b0bc:	4b2e      	ldr	r3, [pc, #184]	@ (801b178 <icmp_input+0x1f8>)
 801b0be:	22c7      	movs	r2, #199	@ 0xc7
 801b0c0:	4930      	ldr	r1, [pc, #192]	@ (801b184 <icmp_input+0x204>)
 801b0c2:	482f      	ldr	r0, [pc, #188]	@ (801b180 <icmp_input+0x200>)
 801b0c4:	f002 fa10 	bl	801d4e8 <iprintf>
          goto icmperr;
 801b0c8:	e04b      	b.n	801b162 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	685b      	ldr	r3, [r3, #4]
 801b0ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b0d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0d2:	4619      	mov	r1, r3
 801b0d4:	6878      	ldr	r0, [r7, #4]
 801b0d6:	f7f7 fdb1 	bl	8012c3c <pbuf_add_header>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d12b      	bne.n	801b138 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	685b      	ldr	r3, [r3, #4]
 801b0e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b0e6:	69fb      	ldr	r3, [r7, #28]
 801b0e8:	681a      	ldr	r2, [r3, #0]
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b0ee:	4b20      	ldr	r3, [pc, #128]	@ (801b170 <icmp_input+0x1f0>)
 801b0f0:	691a      	ldr	r2, [r3, #16]
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b0f6:	693b      	ldr	r3, [r7, #16]
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b0fc:	693b      	ldr	r3, [r7, #16]
 801b0fe:	2200      	movs	r2, #0
 801b100:	709a      	strb	r2, [r3, #2]
 801b102:	2200      	movs	r2, #0
 801b104:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	22ff      	movs	r2, #255	@ 0xff
 801b10a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	2200      	movs	r2, #0
 801b110:	729a      	strb	r2, [r3, #10]
 801b112:	2200      	movs	r2, #0
 801b114:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	9302      	str	r3, [sp, #8]
 801b11a:	2301      	movs	r3, #1
 801b11c:	9301      	str	r3, [sp, #4]
 801b11e:	2300      	movs	r3, #0
 801b120:	9300      	str	r3, [sp, #0]
 801b122:	23ff      	movs	r3, #255	@ 0xff
 801b124:	2200      	movs	r2, #0
 801b126:	69f9      	ldr	r1, [r7, #28]
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f000 fa75 	bl	801b618 <ip4_output_if>
 801b12e:	4603      	mov	r3, r0
 801b130:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b132:	e001      	b.n	801b138 <icmp_input+0x1b8>
      break;
 801b134:	bf00      	nop
 801b136:	e000      	b.n	801b13a <icmp_input+0x1ba>
      break;
 801b138:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f7f7 fe14 	bl	8012d68 <pbuf_free>
  return;
 801b140:	e013      	b.n	801b16a <icmp_input+0x1ea>
    goto lenerr;
 801b142:	bf00      	nop
 801b144:	e002      	b.n	801b14c <icmp_input+0x1cc>
    goto lenerr;
 801b146:	bf00      	nop
 801b148:	e000      	b.n	801b14c <icmp_input+0x1cc>
        goto lenerr;
 801b14a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b14c:	6878      	ldr	r0, [r7, #4]
 801b14e:	f7f7 fe0b 	bl	8012d68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b152:	e00a      	b.n	801b16a <icmp_input+0x1ea>
        goto icmperr;
 801b154:	bf00      	nop
 801b156:	e004      	b.n	801b162 <icmp_input+0x1e2>
        goto icmperr;
 801b158:	bf00      	nop
 801b15a:	e002      	b.n	801b162 <icmp_input+0x1e2>
          goto icmperr;
 801b15c:	bf00      	nop
 801b15e:	e000      	b.n	801b162 <icmp_input+0x1e2>
          goto icmperr;
 801b160:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b162:	6878      	ldr	r0, [r7, #4]
 801b164:	f7f7 fe00 	bl	8012d68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b168:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b16a:	3728      	adds	r7, #40	@ 0x28
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	2000bc40 	.word	0x2000bc40
 801b174:	2000bc54 	.word	0x2000bc54
 801b178:	08022e14 	.word	0x08022e14
 801b17c:	08022e4c 	.word	0x08022e4c
 801b180:	08022e84 	.word	0x08022e84
 801b184:	08022eac 	.word	0x08022eac

0801b188 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b082      	sub	sp, #8
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
 801b190:	460b      	mov	r3, r1
 801b192:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b194:	78fb      	ldrb	r3, [r7, #3]
 801b196:	461a      	mov	r2, r3
 801b198:	2103      	movs	r1, #3
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f000 f814 	bl	801b1c8 <icmp_send_response>
}
 801b1a0:	bf00      	nop
 801b1a2:	3708      	adds	r7, #8
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}

0801b1a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b082      	sub	sp, #8
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
 801b1b0:	460b      	mov	r3, r1
 801b1b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b1b4:	78fb      	ldrb	r3, [r7, #3]
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	210b      	movs	r1, #11
 801b1ba:	6878      	ldr	r0, [r7, #4]
 801b1bc:	f000 f804 	bl	801b1c8 <icmp_send_response>
}
 801b1c0:	bf00      	nop
 801b1c2:	3708      	adds	r7, #8
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}

0801b1c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b08c      	sub	sp, #48	@ 0x30
 801b1cc:	af04      	add	r7, sp, #16
 801b1ce:	6078      	str	r0, [r7, #4]
 801b1d0:	460b      	mov	r3, r1
 801b1d2:	70fb      	strb	r3, [r7, #3]
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b1d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b1dc:	2124      	movs	r1, #36	@ 0x24
 801b1de:	2022      	movs	r0, #34	@ 0x22
 801b1e0:	f7f7 fade 	bl	80127a0 <pbuf_alloc>
 801b1e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b1e6:	69fb      	ldr	r3, [r7, #28]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d04c      	beq.n	801b286 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b1ec:	69fb      	ldr	r3, [r7, #28]
 801b1ee:	895b      	ldrh	r3, [r3, #10]
 801b1f0:	2b23      	cmp	r3, #35	@ 0x23
 801b1f2:	d806      	bhi.n	801b202 <icmp_send_response+0x3a>
 801b1f4:	4b26      	ldr	r3, [pc, #152]	@ (801b290 <icmp_send_response+0xc8>)
 801b1f6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b1fa:	4926      	ldr	r1, [pc, #152]	@ (801b294 <icmp_send_response+0xcc>)
 801b1fc:	4826      	ldr	r0, [pc, #152]	@ (801b298 <icmp_send_response+0xd0>)
 801b1fe:	f002 f973 	bl	801d4e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	685b      	ldr	r3, [r3, #4]
 801b206:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b208:	69fb      	ldr	r3, [r7, #28]
 801b20a:	685b      	ldr	r3, [r3, #4]
 801b20c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	78fa      	ldrb	r2, [r7, #3]
 801b212:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b214:	697b      	ldr	r3, [r7, #20]
 801b216:	78ba      	ldrb	r2, [r7, #2]
 801b218:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b21a:	697b      	ldr	r3, [r7, #20]
 801b21c:	2200      	movs	r2, #0
 801b21e:	711a      	strb	r2, [r3, #4]
 801b220:	2200      	movs	r2, #0
 801b222:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b224:	697b      	ldr	r3, [r7, #20]
 801b226:	2200      	movs	r2, #0
 801b228:	719a      	strb	r2, [r3, #6]
 801b22a:	2200      	movs	r2, #0
 801b22c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b22e:	69fb      	ldr	r3, [r7, #28]
 801b230:	685b      	ldr	r3, [r3, #4]
 801b232:	f103 0008 	add.w	r0, r3, #8
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	685b      	ldr	r3, [r3, #4]
 801b23a:	221c      	movs	r2, #28
 801b23c:	4619      	mov	r1, r3
 801b23e:	f002 fae0 	bl	801d802 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b242:	69bb      	ldr	r3, [r7, #24]
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b248:	f107 030c 	add.w	r3, r7, #12
 801b24c:	4618      	mov	r0, r3
 801b24e:	f000 f825 	bl	801b29c <ip4_route>
 801b252:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b254:	693b      	ldr	r3, [r7, #16]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d011      	beq.n	801b27e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b25a:	697b      	ldr	r3, [r7, #20]
 801b25c:	2200      	movs	r2, #0
 801b25e:	709a      	strb	r2, [r3, #2]
 801b260:	2200      	movs	r2, #0
 801b262:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b264:	f107 020c 	add.w	r2, r7, #12
 801b268:	693b      	ldr	r3, [r7, #16]
 801b26a:	9302      	str	r3, [sp, #8]
 801b26c:	2301      	movs	r3, #1
 801b26e:	9301      	str	r3, [sp, #4]
 801b270:	2300      	movs	r3, #0
 801b272:	9300      	str	r3, [sp, #0]
 801b274:	23ff      	movs	r3, #255	@ 0xff
 801b276:	2100      	movs	r1, #0
 801b278:	69f8      	ldr	r0, [r7, #28]
 801b27a:	f000 f9cd 	bl	801b618 <ip4_output_if>
  }
  pbuf_free(q);
 801b27e:	69f8      	ldr	r0, [r7, #28]
 801b280:	f7f7 fd72 	bl	8012d68 <pbuf_free>
 801b284:	e000      	b.n	801b288 <icmp_send_response+0xc0>
    return;
 801b286:	bf00      	nop
}
 801b288:	3720      	adds	r7, #32
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}
 801b28e:	bf00      	nop
 801b290:	08022e14 	.word	0x08022e14
 801b294:	08022ee0 	.word	0x08022ee0
 801b298:	08022e84 	.word	0x08022e84

0801b29c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b29c:	b480      	push	{r7}
 801b29e:	b085      	sub	sp, #20
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b2a4:	4b33      	ldr	r3, [pc, #204]	@ (801b374 <ip4_route+0xd8>)
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	60fb      	str	r3, [r7, #12]
 801b2aa:	e036      	b.n	801b31a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2b2:	f003 0301 	and.w	r3, r3, #1
 801b2b6:	b2db      	uxtb	r3, r3
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d02b      	beq.n	801b314 <ip4_route+0x78>
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2c2:	089b      	lsrs	r3, r3, #2
 801b2c4:	f003 0301 	and.w	r3, r3, #1
 801b2c8:	b2db      	uxtb	r3, r3
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d022      	beq.n	801b314 <ip4_route+0x78>
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	3304      	adds	r3, #4
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d01d      	beq.n	801b314 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681a      	ldr	r2, [r3, #0]
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	3304      	adds	r3, #4
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	405a      	eors	r2, r3
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	3308      	adds	r3, #8
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	4013      	ands	r3, r2
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d101      	bne.n	801b2f4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	e038      	b.n	801b366 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2fa:	f003 0302 	and.w	r3, r3, #2
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d108      	bne.n	801b314 <ip4_route+0x78>
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	330c      	adds	r3, #12
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	429a      	cmp	r2, r3
 801b30e:	d101      	bne.n	801b314 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	e028      	b.n	801b366 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	60fb      	str	r3, [r7, #12]
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d1c5      	bne.n	801b2ac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b320:	4b15      	ldr	r3, [pc, #84]	@ (801b378 <ip4_route+0xdc>)
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d01a      	beq.n	801b35e <ip4_route+0xc2>
 801b328:	4b13      	ldr	r3, [pc, #76]	@ (801b378 <ip4_route+0xdc>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b330:	f003 0301 	and.w	r3, r3, #1
 801b334:	2b00      	cmp	r3, #0
 801b336:	d012      	beq.n	801b35e <ip4_route+0xc2>
 801b338:	4b0f      	ldr	r3, [pc, #60]	@ (801b378 <ip4_route+0xdc>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b340:	f003 0304 	and.w	r3, r3, #4
 801b344:	2b00      	cmp	r3, #0
 801b346:	d00a      	beq.n	801b35e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b348:	4b0b      	ldr	r3, [pc, #44]	@ (801b378 <ip4_route+0xdc>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	3304      	adds	r3, #4
 801b34e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b350:	2b00      	cmp	r3, #0
 801b352:	d004      	beq.n	801b35e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	b2db      	uxtb	r3, r3
 801b35a:	2b7f      	cmp	r3, #127	@ 0x7f
 801b35c:	d101      	bne.n	801b362 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b35e:	2300      	movs	r3, #0
 801b360:	e001      	b.n	801b366 <ip4_route+0xca>
  }

  return netif_default;
 801b362:	4b05      	ldr	r3, [pc, #20]	@ (801b378 <ip4_route+0xdc>)
 801b364:	681b      	ldr	r3, [r3, #0]
}
 801b366:	4618      	mov	r0, r3
 801b368:	3714      	adds	r7, #20
 801b36a:	46bd      	mov	sp, r7
 801b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b370:	4770      	bx	lr
 801b372:	bf00      	nop
 801b374:	2000f388 	.word	0x2000f388
 801b378:	2000f38c 	.word	0x2000f38c

0801b37c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b082      	sub	sp, #8
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b38a:	f003 0301 	and.w	r3, r3, #1
 801b38e:	b2db      	uxtb	r3, r3
 801b390:	2b00      	cmp	r3, #0
 801b392:	d016      	beq.n	801b3c2 <ip4_input_accept+0x46>
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	3304      	adds	r3, #4
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d011      	beq.n	801b3c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b39e:	4b0b      	ldr	r3, [pc, #44]	@ (801b3cc <ip4_input_accept+0x50>)
 801b3a0:	695a      	ldr	r2, [r3, #20]
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	3304      	adds	r3, #4
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	429a      	cmp	r2, r3
 801b3aa:	d008      	beq.n	801b3be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b3ac:	4b07      	ldr	r3, [pc, #28]	@ (801b3cc <ip4_input_accept+0x50>)
 801b3ae:	695b      	ldr	r3, [r3, #20]
 801b3b0:	6879      	ldr	r1, [r7, #4]
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f000 fa08 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801b3b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d001      	beq.n	801b3c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b3be:	2301      	movs	r3, #1
 801b3c0:	e000      	b.n	801b3c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b3c2:	2300      	movs	r3, #0
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	3708      	adds	r7, #8
 801b3c8:	46bd      	mov	sp, r7
 801b3ca:	bd80      	pop	{r7, pc}
 801b3cc:	2000bc40 	.word	0x2000bc40

0801b3d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b086      	sub	sp, #24
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
 801b3d8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b3e0:	697b      	ldr	r3, [r7, #20]
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	091b      	lsrs	r3, r3, #4
 801b3e6:	b2db      	uxtb	r3, r3
 801b3e8:	2b04      	cmp	r3, #4
 801b3ea:	d004      	beq.n	801b3f6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b3ec:	6878      	ldr	r0, [r7, #4]
 801b3ee:	f7f7 fcbb 	bl	8012d68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	e107      	b.n	801b606 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	781b      	ldrb	r3, [r3, #0]
 801b3fa:	f003 030f 	and.w	r3, r3, #15
 801b3fe:	b2db      	uxtb	r3, r3
 801b400:	009b      	lsls	r3, r3, #2
 801b402:	b2db      	uxtb	r3, r3
 801b404:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	885b      	ldrh	r3, [r3, #2]
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f6 f883 	bl	8011518 <lwip_htons>
 801b412:	4603      	mov	r3, r0
 801b414:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	891b      	ldrh	r3, [r3, #8]
 801b41a:	89ba      	ldrh	r2, [r7, #12]
 801b41c:	429a      	cmp	r2, r3
 801b41e:	d204      	bcs.n	801b42a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b420:	89bb      	ldrh	r3, [r7, #12]
 801b422:	4619      	mov	r1, r3
 801b424:	6878      	ldr	r0, [r7, #4]
 801b426:	f7f7 fb19 	bl	8012a5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	895b      	ldrh	r3, [r3, #10]
 801b42e:	89fa      	ldrh	r2, [r7, #14]
 801b430:	429a      	cmp	r2, r3
 801b432:	d807      	bhi.n	801b444 <ip4_input+0x74>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	891b      	ldrh	r3, [r3, #8]
 801b438:	89ba      	ldrh	r2, [r7, #12]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d802      	bhi.n	801b444 <ip4_input+0x74>
 801b43e:	89fb      	ldrh	r3, [r7, #14]
 801b440:	2b13      	cmp	r3, #19
 801b442:	d804      	bhi.n	801b44e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b444:	6878      	ldr	r0, [r7, #4]
 801b446:	f7f7 fc8f 	bl	8012d68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b44a:	2300      	movs	r3, #0
 801b44c:	e0db      	b.n	801b606 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	691b      	ldr	r3, [r3, #16]
 801b452:	4a6f      	ldr	r2, [pc, #444]	@ (801b610 <ip4_input+0x240>)
 801b454:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b456:	697b      	ldr	r3, [r7, #20]
 801b458:	68db      	ldr	r3, [r3, #12]
 801b45a:	4a6d      	ldr	r2, [pc, #436]	@ (801b610 <ip4_input+0x240>)
 801b45c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b45e:	4b6c      	ldr	r3, [pc, #432]	@ (801b610 <ip4_input+0x240>)
 801b460:	695b      	ldr	r3, [r3, #20]
 801b462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b466:	2be0      	cmp	r3, #224	@ 0xe0
 801b468:	d112      	bne.n	801b490 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b46a:	683b      	ldr	r3, [r7, #0]
 801b46c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b470:	f003 0301 	and.w	r3, r3, #1
 801b474:	b2db      	uxtb	r3, r3
 801b476:	2b00      	cmp	r3, #0
 801b478:	d007      	beq.n	801b48a <ip4_input+0xba>
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	3304      	adds	r3, #4
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	2b00      	cmp	r3, #0
 801b482:	d002      	beq.n	801b48a <ip4_input+0xba>
      netif = inp;
 801b484:	683b      	ldr	r3, [r7, #0]
 801b486:	613b      	str	r3, [r7, #16]
 801b488:	e02a      	b.n	801b4e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b48a:	2300      	movs	r3, #0
 801b48c:	613b      	str	r3, [r7, #16]
 801b48e:	e027      	b.n	801b4e0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b490:	6838      	ldr	r0, [r7, #0]
 801b492:	f7ff ff73 	bl	801b37c <ip4_input_accept>
 801b496:	4603      	mov	r3, r0
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d002      	beq.n	801b4a2 <ip4_input+0xd2>
      netif = inp;
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	613b      	str	r3, [r7, #16]
 801b4a0:	e01e      	b.n	801b4e0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b4a6:	4b5a      	ldr	r3, [pc, #360]	@ (801b610 <ip4_input+0x240>)
 801b4a8:	695b      	ldr	r3, [r3, #20]
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	2b7f      	cmp	r3, #127	@ 0x7f
 801b4ae:	d017      	beq.n	801b4e0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b4b0:	4b58      	ldr	r3, [pc, #352]	@ (801b614 <ip4_input+0x244>)
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	613b      	str	r3, [r7, #16]
 801b4b6:	e00e      	b.n	801b4d6 <ip4_input+0x106>
          if (netif == inp) {
 801b4b8:	693a      	ldr	r2, [r7, #16]
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d006      	beq.n	801b4ce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b4c0:	6938      	ldr	r0, [r7, #16]
 801b4c2:	f7ff ff5b 	bl	801b37c <ip4_input_accept>
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d108      	bne.n	801b4de <ip4_input+0x10e>
 801b4cc:	e000      	b.n	801b4d0 <ip4_input+0x100>
            continue;
 801b4ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	613b      	str	r3, [r7, #16]
 801b4d6:	693b      	ldr	r3, [r7, #16]
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d1ed      	bne.n	801b4b8 <ip4_input+0xe8>
 801b4dc:	e000      	b.n	801b4e0 <ip4_input+0x110>
            break;
 801b4de:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b4e0:	4b4b      	ldr	r3, [pc, #300]	@ (801b610 <ip4_input+0x240>)
 801b4e2:	691b      	ldr	r3, [r3, #16]
 801b4e4:	6839      	ldr	r1, [r7, #0]
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	f000 f96e 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801b4ec:	4603      	mov	r3, r0
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d105      	bne.n	801b4fe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b4f2:	4b47      	ldr	r3, [pc, #284]	@ (801b610 <ip4_input+0x240>)
 801b4f4:	691b      	ldr	r3, [r3, #16]
 801b4f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b4fa:	2be0      	cmp	r3, #224	@ 0xe0
 801b4fc:	d104      	bne.n	801b508 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b4fe:	6878      	ldr	r0, [r7, #4]
 801b500:	f7f7 fc32 	bl	8012d68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b504:	2300      	movs	r3, #0
 801b506:	e07e      	b.n	801b606 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d104      	bne.n	801b518 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b50e:	6878      	ldr	r0, [r7, #4]
 801b510:	f7f7 fc2a 	bl	8012d68 <pbuf_free>
    return ERR_OK;
 801b514:	2300      	movs	r3, #0
 801b516:	e076      	b.n	801b606 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	88db      	ldrh	r3, [r3, #6]
 801b51c:	b29b      	uxth	r3, r3
 801b51e:	461a      	mov	r2, r3
 801b520:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b524:	4013      	ands	r3, r2
 801b526:	2b00      	cmp	r3, #0
 801b528:	d00b      	beq.n	801b542 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b52a:	6878      	ldr	r0, [r7, #4]
 801b52c:	f000 fc92 	bl	801be54 <ip4_reass>
 801b530:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d101      	bne.n	801b53c <ip4_input+0x16c>
      return ERR_OK;
 801b538:	2300      	movs	r3, #0
 801b53a:	e064      	b.n	801b606 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	685b      	ldr	r3, [r3, #4]
 801b540:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b542:	4a33      	ldr	r2, [pc, #204]	@ (801b610 <ip4_input+0x240>)
 801b544:	693b      	ldr	r3, [r7, #16]
 801b546:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b548:	4a31      	ldr	r2, [pc, #196]	@ (801b610 <ip4_input+0x240>)
 801b54a:	683b      	ldr	r3, [r7, #0]
 801b54c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b54e:	4a30      	ldr	r2, [pc, #192]	@ (801b610 <ip4_input+0x240>)
 801b550:	697b      	ldr	r3, [r7, #20]
 801b552:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	781b      	ldrb	r3, [r3, #0]
 801b558:	f003 030f 	and.w	r3, r3, #15
 801b55c:	b2db      	uxtb	r3, r3
 801b55e:	009b      	lsls	r3, r3, #2
 801b560:	b2db      	uxtb	r3, r3
 801b562:	461a      	mov	r2, r3
 801b564:	4b2a      	ldr	r3, [pc, #168]	@ (801b610 <ip4_input+0x240>)
 801b566:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b568:	89fb      	ldrh	r3, [r7, #14]
 801b56a:	4619      	mov	r1, r3
 801b56c:	6878      	ldr	r0, [r7, #4]
 801b56e:	f7f7 fb75 	bl	8012c5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	7a5b      	ldrb	r3, [r3, #9]
 801b576:	2b11      	cmp	r3, #17
 801b578:	d006      	beq.n	801b588 <ip4_input+0x1b8>
 801b57a:	2b11      	cmp	r3, #17
 801b57c:	dc13      	bgt.n	801b5a6 <ip4_input+0x1d6>
 801b57e:	2b01      	cmp	r3, #1
 801b580:	d00c      	beq.n	801b59c <ip4_input+0x1cc>
 801b582:	2b06      	cmp	r3, #6
 801b584:	d005      	beq.n	801b592 <ip4_input+0x1c2>
 801b586:	e00e      	b.n	801b5a6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b588:	6839      	ldr	r1, [r7, #0]
 801b58a:	6878      	ldr	r0, [r7, #4]
 801b58c:	f7fe f970 	bl	8019870 <udp_input>
        break;
 801b590:	e026      	b.n	801b5e0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b592:	6839      	ldr	r1, [r7, #0]
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	f7f9 fd2f 	bl	8014ff8 <tcp_input>
        break;
 801b59a:	e021      	b.n	801b5e0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b59c:	6839      	ldr	r1, [r7, #0]
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f7ff fcee 	bl	801af80 <icmp_input>
        break;
 801b5a4:	e01c      	b.n	801b5e0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5a6:	4b1a      	ldr	r3, [pc, #104]	@ (801b610 <ip4_input+0x240>)
 801b5a8:	695b      	ldr	r3, [r3, #20]
 801b5aa:	6939      	ldr	r1, [r7, #16]
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f000 f90b 	bl	801b7c8 <ip4_addr_isbroadcast_u32>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d10f      	bne.n	801b5d8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5b8:	4b15      	ldr	r3, [pc, #84]	@ (801b610 <ip4_input+0x240>)
 801b5ba:	695b      	ldr	r3, [r3, #20]
 801b5bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5c0:	2be0      	cmp	r3, #224	@ 0xe0
 801b5c2:	d009      	beq.n	801b5d8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b5c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b5c8:	4619      	mov	r1, r3
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f7f7 fbb9 	bl	8012d42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b5d0:	2102      	movs	r1, #2
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	f7ff fdd8 	bl	801b188 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b5d8:	6878      	ldr	r0, [r7, #4]
 801b5da:	f7f7 fbc5 	bl	8012d68 <pbuf_free>
        break;
 801b5de:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b5e0:	4b0b      	ldr	r3, [pc, #44]	@ (801b610 <ip4_input+0x240>)
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b5e6:	4b0a      	ldr	r3, [pc, #40]	@ (801b610 <ip4_input+0x240>)
 801b5e8:	2200      	movs	r2, #0
 801b5ea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b5ec:	4b08      	ldr	r3, [pc, #32]	@ (801b610 <ip4_input+0x240>)
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b5f2:	4b07      	ldr	r3, [pc, #28]	@ (801b610 <ip4_input+0x240>)
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b5f8:	4b05      	ldr	r3, [pc, #20]	@ (801b610 <ip4_input+0x240>)
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b5fe:	4b04      	ldr	r3, [pc, #16]	@ (801b610 <ip4_input+0x240>)
 801b600:	2200      	movs	r2, #0
 801b602:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b604:	2300      	movs	r3, #0
}
 801b606:	4618      	mov	r0, r3
 801b608:	3718      	adds	r7, #24
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bd80      	pop	{r7, pc}
 801b60e:	bf00      	nop
 801b610:	2000bc40 	.word	0x2000bc40
 801b614:	2000f388 	.word	0x2000f388

0801b618 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b618:	b580      	push	{r7, lr}
 801b61a:	b08a      	sub	sp, #40	@ 0x28
 801b61c:	af04      	add	r7, sp, #16
 801b61e:	60f8      	str	r0, [r7, #12]
 801b620:	60b9      	str	r1, [r7, #8]
 801b622:	607a      	str	r2, [r7, #4]
 801b624:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b626:	68bb      	ldr	r3, [r7, #8]
 801b628:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d009      	beq.n	801b644 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b630:	68bb      	ldr	r3, [r7, #8]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d003      	beq.n	801b63e <ip4_output_if+0x26>
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d102      	bne.n	801b644 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b640:	3304      	adds	r3, #4
 801b642:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b644:	78fa      	ldrb	r2, [r7, #3]
 801b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b648:	9302      	str	r3, [sp, #8]
 801b64a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b64e:	9301      	str	r3, [sp, #4]
 801b650:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b654:	9300      	str	r3, [sp, #0]
 801b656:	4613      	mov	r3, r2
 801b658:	687a      	ldr	r2, [r7, #4]
 801b65a:	6979      	ldr	r1, [r7, #20]
 801b65c:	68f8      	ldr	r0, [r7, #12]
 801b65e:	f000 f805 	bl	801b66c <ip4_output_if_src>
 801b662:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b664:	4618      	mov	r0, r3
 801b666:	3718      	adds	r7, #24
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd80      	pop	{r7, pc}

0801b66c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b088      	sub	sp, #32
 801b670:	af00      	add	r7, sp, #0
 801b672:	60f8      	str	r0, [r7, #12]
 801b674:	60b9      	str	r1, [r7, #8]
 801b676:	607a      	str	r2, [r7, #4]
 801b678:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	7b9b      	ldrb	r3, [r3, #14]
 801b67e:	2b01      	cmp	r3, #1
 801b680:	d006      	beq.n	801b690 <ip4_output_if_src+0x24>
 801b682:	4b4b      	ldr	r3, [pc, #300]	@ (801b7b0 <ip4_output_if_src+0x144>)
 801b684:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b688:	494a      	ldr	r1, [pc, #296]	@ (801b7b4 <ip4_output_if_src+0x148>)
 801b68a:	484b      	ldr	r0, [pc, #300]	@ (801b7b8 <ip4_output_if_src+0x14c>)
 801b68c:	f001 ff2c 	bl	801d4e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d060      	beq.n	801b758 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b696:	2314      	movs	r3, #20
 801b698:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b69a:	2114      	movs	r1, #20
 801b69c:	68f8      	ldr	r0, [r7, #12]
 801b69e:	f7f7 facd 	bl	8012c3c <pbuf_add_header>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d002      	beq.n	801b6ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b6a8:	f06f 0301 	mvn.w	r3, #1
 801b6ac:	e07c      	b.n	801b7a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	685b      	ldr	r3, [r3, #4]
 801b6b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	895b      	ldrh	r3, [r3, #10]
 801b6b8:	2b13      	cmp	r3, #19
 801b6ba:	d806      	bhi.n	801b6ca <ip4_output_if_src+0x5e>
 801b6bc:	4b3c      	ldr	r3, [pc, #240]	@ (801b7b0 <ip4_output_if_src+0x144>)
 801b6be:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b6c2:	493e      	ldr	r1, [pc, #248]	@ (801b7bc <ip4_output_if_src+0x150>)
 801b6c4:	483c      	ldr	r0, [pc, #240]	@ (801b7b8 <ip4_output_if_src+0x14c>)
 801b6c6:	f001 ff0f 	bl	801d4e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b6ca:	69fb      	ldr	r3, [r7, #28]
 801b6cc:	78fa      	ldrb	r2, [r7, #3]
 801b6ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b6d0:	69fb      	ldr	r3, [r7, #28]
 801b6d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b6d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	681a      	ldr	r2, [r3, #0]
 801b6dc:	69fb      	ldr	r3, [r7, #28]
 801b6de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b6e0:	8b7b      	ldrh	r3, [r7, #26]
 801b6e2:	089b      	lsrs	r3, r3, #2
 801b6e4:	b29b      	uxth	r3, r3
 801b6e6:	b2db      	uxtb	r3, r3
 801b6e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b6ec:	b2da      	uxtb	r2, r3
 801b6ee:	69fb      	ldr	r3, [r7, #28]
 801b6f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b6f2:	69fb      	ldr	r3, [r7, #28]
 801b6f4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b6f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	891b      	ldrh	r3, [r3, #8]
 801b6fe:	4618      	mov	r0, r3
 801b700:	f7f5 ff0a 	bl	8011518 <lwip_htons>
 801b704:	4603      	mov	r3, r0
 801b706:	461a      	mov	r2, r3
 801b708:	69fb      	ldr	r3, [r7, #28]
 801b70a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b70c:	69fb      	ldr	r3, [r7, #28]
 801b70e:	2200      	movs	r2, #0
 801b710:	719a      	strb	r2, [r3, #6]
 801b712:	2200      	movs	r2, #0
 801b714:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b716:	4b2a      	ldr	r3, [pc, #168]	@ (801b7c0 <ip4_output_if_src+0x154>)
 801b718:	881b      	ldrh	r3, [r3, #0]
 801b71a:	4618      	mov	r0, r3
 801b71c:	f7f5 fefc 	bl	8011518 <lwip_htons>
 801b720:	4603      	mov	r3, r0
 801b722:	461a      	mov	r2, r3
 801b724:	69fb      	ldr	r3, [r7, #28]
 801b726:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b728:	4b25      	ldr	r3, [pc, #148]	@ (801b7c0 <ip4_output_if_src+0x154>)
 801b72a:	881b      	ldrh	r3, [r3, #0]
 801b72c:	3301      	adds	r3, #1
 801b72e:	b29a      	uxth	r2, r3
 801b730:	4b23      	ldr	r3, [pc, #140]	@ (801b7c0 <ip4_output_if_src+0x154>)
 801b732:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d104      	bne.n	801b744 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b73a:	4b22      	ldr	r3, [pc, #136]	@ (801b7c4 <ip4_output_if_src+0x158>)
 801b73c:	681a      	ldr	r2, [r3, #0]
 801b73e:	69fb      	ldr	r3, [r7, #28]
 801b740:	60da      	str	r2, [r3, #12]
 801b742:	e003      	b.n	801b74c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	681a      	ldr	r2, [r3, #0]
 801b748:	69fb      	ldr	r3, [r7, #28]
 801b74a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	2200      	movs	r2, #0
 801b750:	729a      	strb	r2, [r3, #10]
 801b752:	2200      	movs	r2, #0
 801b754:	72da      	strb	r2, [r3, #11]
 801b756:	e00f      	b.n	801b778 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	895b      	ldrh	r3, [r3, #10]
 801b75c:	2b13      	cmp	r3, #19
 801b75e:	d802      	bhi.n	801b766 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b760:	f06f 0301 	mvn.w	r3, #1
 801b764:	e020      	b.n	801b7a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b76c:	69fb      	ldr	r3, [r7, #28]
 801b76e:	691b      	ldr	r3, [r3, #16]
 801b770:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b772:	f107 0314 	add.w	r3, r7, #20
 801b776:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b77a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d00c      	beq.n	801b79a <ip4_output_if_src+0x12e>
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	891a      	ldrh	r2, [r3, #8]
 801b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b786:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b788:	429a      	cmp	r2, r3
 801b78a:	d906      	bls.n	801b79a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b78c:	687a      	ldr	r2, [r7, #4]
 801b78e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b790:	68f8      	ldr	r0, [r7, #12]
 801b792:	f000 fd53 	bl	801c23c <ip4_frag>
 801b796:	4603      	mov	r3, r0
 801b798:	e006      	b.n	801b7a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b79c:	695b      	ldr	r3, [r3, #20]
 801b79e:	687a      	ldr	r2, [r7, #4]
 801b7a0:	68f9      	ldr	r1, [r7, #12]
 801b7a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b7a4:	4798      	blx	r3
 801b7a6:	4603      	mov	r3, r0
}
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	3720      	adds	r7, #32
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bd80      	pop	{r7, pc}
 801b7b0:	08022f0c 	.word	0x08022f0c
 801b7b4:	08022f40 	.word	0x08022f40
 801b7b8:	08022f4c 	.word	0x08022f4c
 801b7bc:	08022f74 	.word	0x08022f74
 801b7c0:	2000f4e6 	.word	0x2000f4e6
 801b7c4:	08024a7c 	.word	0x08024a7c

0801b7c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b7c8:	b480      	push	{r7}
 801b7ca:	b085      	sub	sp, #20
 801b7cc:	af00      	add	r7, sp, #0
 801b7ce:	6078      	str	r0, [r7, #4]
 801b7d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7dc:	d002      	beq.n	801b7e4 <ip4_addr_isbroadcast_u32+0x1c>
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d101      	bne.n	801b7e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	e02a      	b.n	801b83e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b7e8:	683b      	ldr	r3, [r7, #0]
 801b7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b7ee:	f003 0302 	and.w	r3, r3, #2
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d101      	bne.n	801b7fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	e021      	b.n	801b83e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b7fa:	683b      	ldr	r3, [r7, #0]
 801b7fc:	3304      	adds	r3, #4
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	687a      	ldr	r2, [r7, #4]
 801b802:	429a      	cmp	r2, r3
 801b804:	d101      	bne.n	801b80a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b806:	2300      	movs	r3, #0
 801b808:	e019      	b.n	801b83e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b80a:	68fa      	ldr	r2, [r7, #12]
 801b80c:	683b      	ldr	r3, [r7, #0]
 801b80e:	3304      	adds	r3, #4
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	405a      	eors	r2, r3
 801b814:	683b      	ldr	r3, [r7, #0]
 801b816:	3308      	adds	r3, #8
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	4013      	ands	r3, r2
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d10d      	bne.n	801b83c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	3308      	adds	r3, #8
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	43da      	mvns	r2, r3
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b82c:	683b      	ldr	r3, [r7, #0]
 801b82e:	3308      	adds	r3, #8
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b834:	429a      	cmp	r2, r3
 801b836:	d101      	bne.n	801b83c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b838:	2301      	movs	r3, #1
 801b83a:	e000      	b.n	801b83e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b83c:	2300      	movs	r3, #0
  }
}
 801b83e:	4618      	mov	r0, r3
 801b840:	3714      	adds	r7, #20
 801b842:	46bd      	mov	sp, r7
 801b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b848:	4770      	bx	lr
	...

0801b84c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b084      	sub	sp, #16
 801b850:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b852:	2300      	movs	r3, #0
 801b854:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b856:	4b12      	ldr	r3, [pc, #72]	@ (801b8a0 <ip_reass_tmr+0x54>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b85c:	e018      	b.n	801b890 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	7fdb      	ldrb	r3, [r3, #31]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d00b      	beq.n	801b87e <ip_reass_tmr+0x32>
      r->timer--;
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	7fdb      	ldrb	r3, [r3, #31]
 801b86a:	3b01      	subs	r3, #1
 801b86c:	b2da      	uxtb	r2, r3
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	60fb      	str	r3, [r7, #12]
 801b87c:	e008      	b.n	801b890 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b888:	68b9      	ldr	r1, [r7, #8]
 801b88a:	6878      	ldr	r0, [r7, #4]
 801b88c:	f000 f80a 	bl	801b8a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d1e3      	bne.n	801b85e <ip_reass_tmr+0x12>
    }
  }
}
 801b896:	bf00      	nop
 801b898:	bf00      	nop
 801b89a:	3710      	adds	r7, #16
 801b89c:	46bd      	mov	sp, r7
 801b89e:	bd80      	pop	{r7, pc}
 801b8a0:	2000f4e8 	.word	0x2000f4e8

0801b8a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b088      	sub	sp, #32
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
 801b8ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b8b2:	683a      	ldr	r2, [r7, #0]
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	d105      	bne.n	801b8c6 <ip_reass_free_complete_datagram+0x22>
 801b8ba:	4b45      	ldr	r3, [pc, #276]	@ (801b9d0 <ip_reass_free_complete_datagram+0x12c>)
 801b8bc:	22ab      	movs	r2, #171	@ 0xab
 801b8be:	4945      	ldr	r1, [pc, #276]	@ (801b9d4 <ip_reass_free_complete_datagram+0x130>)
 801b8c0:	4845      	ldr	r0, [pc, #276]	@ (801b9d8 <ip_reass_free_complete_datagram+0x134>)
 801b8c2:	f001 fe11 	bl	801d4e8 <iprintf>
  if (prev != NULL) {
 801b8c6:	683b      	ldr	r3, [r7, #0]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d00a      	beq.n	801b8e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b8cc:	683b      	ldr	r3, [r7, #0]
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	687a      	ldr	r2, [r7, #4]
 801b8d2:	429a      	cmp	r2, r3
 801b8d4:	d005      	beq.n	801b8e2 <ip_reass_free_complete_datagram+0x3e>
 801b8d6:	4b3e      	ldr	r3, [pc, #248]	@ (801b9d0 <ip_reass_free_complete_datagram+0x12c>)
 801b8d8:	22ad      	movs	r2, #173	@ 0xad
 801b8da:	4940      	ldr	r1, [pc, #256]	@ (801b9dc <ip_reass_free_complete_datagram+0x138>)
 801b8dc:	483e      	ldr	r0, [pc, #248]	@ (801b9d8 <ip_reass_free_complete_datagram+0x134>)
 801b8de:	f001 fe03 	bl	801d4e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	685b      	ldr	r3, [r3, #4]
 801b8e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b8ea:	697b      	ldr	r3, [r7, #20]
 801b8ec:	889b      	ldrh	r3, [r3, #4]
 801b8ee:	b29b      	uxth	r3, r3
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d12a      	bne.n	801b94a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	685b      	ldr	r3, [r3, #4]
 801b8f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b8fa:	697b      	ldr	r3, [r7, #20]
 801b8fc:	681a      	ldr	r2, [r3, #0]
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b902:	69bb      	ldr	r3, [r7, #24]
 801b904:	6858      	ldr	r0, [r3, #4]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	3308      	adds	r3, #8
 801b90a:	2214      	movs	r2, #20
 801b90c:	4619      	mov	r1, r3
 801b90e:	f001 ff78 	bl	801d802 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b912:	2101      	movs	r1, #1
 801b914:	69b8      	ldr	r0, [r7, #24]
 801b916:	f7ff fc47 	bl	801b1a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b91a:	69b8      	ldr	r0, [r7, #24]
 801b91c:	f7f7 fab2 	bl	8012e84 <pbuf_clen>
 801b920:	4603      	mov	r3, r0
 801b922:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b924:	8bfa      	ldrh	r2, [r7, #30]
 801b926:	8a7b      	ldrh	r3, [r7, #18]
 801b928:	4413      	add	r3, r2
 801b92a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b92e:	db05      	blt.n	801b93c <ip_reass_free_complete_datagram+0x98>
 801b930:	4b27      	ldr	r3, [pc, #156]	@ (801b9d0 <ip_reass_free_complete_datagram+0x12c>)
 801b932:	22bc      	movs	r2, #188	@ 0xbc
 801b934:	492a      	ldr	r1, [pc, #168]	@ (801b9e0 <ip_reass_free_complete_datagram+0x13c>)
 801b936:	4828      	ldr	r0, [pc, #160]	@ (801b9d8 <ip_reass_free_complete_datagram+0x134>)
 801b938:	f001 fdd6 	bl	801d4e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b93c:	8bfa      	ldrh	r2, [r7, #30]
 801b93e:	8a7b      	ldrh	r3, [r7, #18]
 801b940:	4413      	add	r3, r2
 801b942:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b944:	69b8      	ldr	r0, [r7, #24]
 801b946:	f7f7 fa0f 	bl	8012d68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b950:	e01f      	b.n	801b992 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b952:	69bb      	ldr	r3, [r7, #24]
 801b954:	685b      	ldr	r3, [r3, #4]
 801b956:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b958:	69bb      	ldr	r3, [r7, #24]
 801b95a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b962:	68f8      	ldr	r0, [r7, #12]
 801b964:	f7f7 fa8e 	bl	8012e84 <pbuf_clen>
 801b968:	4603      	mov	r3, r0
 801b96a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b96c:	8bfa      	ldrh	r2, [r7, #30]
 801b96e:	8a7b      	ldrh	r3, [r7, #18]
 801b970:	4413      	add	r3, r2
 801b972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b976:	db05      	blt.n	801b984 <ip_reass_free_complete_datagram+0xe0>
 801b978:	4b15      	ldr	r3, [pc, #84]	@ (801b9d0 <ip_reass_free_complete_datagram+0x12c>)
 801b97a:	22cc      	movs	r2, #204	@ 0xcc
 801b97c:	4918      	ldr	r1, [pc, #96]	@ (801b9e0 <ip_reass_free_complete_datagram+0x13c>)
 801b97e:	4816      	ldr	r0, [pc, #88]	@ (801b9d8 <ip_reass_free_complete_datagram+0x134>)
 801b980:	f001 fdb2 	bl	801d4e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b984:	8bfa      	ldrh	r2, [r7, #30]
 801b986:	8a7b      	ldrh	r3, [r7, #18]
 801b988:	4413      	add	r3, r2
 801b98a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b98c:	68f8      	ldr	r0, [r7, #12]
 801b98e:	f7f7 f9eb 	bl	8012d68 <pbuf_free>
  while (p != NULL) {
 801b992:	69bb      	ldr	r3, [r7, #24]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d1dc      	bne.n	801b952 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b998:	6839      	ldr	r1, [r7, #0]
 801b99a:	6878      	ldr	r0, [r7, #4]
 801b99c:	f000 f8c2 	bl	801bb24 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b9a0:	4b10      	ldr	r3, [pc, #64]	@ (801b9e4 <ip_reass_free_complete_datagram+0x140>)
 801b9a2:	881b      	ldrh	r3, [r3, #0]
 801b9a4:	8bfa      	ldrh	r2, [r7, #30]
 801b9a6:	429a      	cmp	r2, r3
 801b9a8:	d905      	bls.n	801b9b6 <ip_reass_free_complete_datagram+0x112>
 801b9aa:	4b09      	ldr	r3, [pc, #36]	@ (801b9d0 <ip_reass_free_complete_datagram+0x12c>)
 801b9ac:	22d2      	movs	r2, #210	@ 0xd2
 801b9ae:	490e      	ldr	r1, [pc, #56]	@ (801b9e8 <ip_reass_free_complete_datagram+0x144>)
 801b9b0:	4809      	ldr	r0, [pc, #36]	@ (801b9d8 <ip_reass_free_complete_datagram+0x134>)
 801b9b2:	f001 fd99 	bl	801d4e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b9b6:	4b0b      	ldr	r3, [pc, #44]	@ (801b9e4 <ip_reass_free_complete_datagram+0x140>)
 801b9b8:	881a      	ldrh	r2, [r3, #0]
 801b9ba:	8bfb      	ldrh	r3, [r7, #30]
 801b9bc:	1ad3      	subs	r3, r2, r3
 801b9be:	b29a      	uxth	r2, r3
 801b9c0:	4b08      	ldr	r3, [pc, #32]	@ (801b9e4 <ip_reass_free_complete_datagram+0x140>)
 801b9c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b9c4:	8bfb      	ldrh	r3, [r7, #30]
}
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	3720      	adds	r7, #32
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	bd80      	pop	{r7, pc}
 801b9ce:	bf00      	nop
 801b9d0:	08022fa4 	.word	0x08022fa4
 801b9d4:	08022fe0 	.word	0x08022fe0
 801b9d8:	08022fec 	.word	0x08022fec
 801b9dc:	08023014 	.word	0x08023014
 801b9e0:	08023028 	.word	0x08023028
 801b9e4:	2000f4ec 	.word	0x2000f4ec
 801b9e8:	08023048 	.word	0x08023048

0801b9ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b08a      	sub	sp, #40	@ 0x28
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
 801b9f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ba02:	2300      	movs	r3, #0
 801ba04:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ba06:	2300      	movs	r3, #0
 801ba08:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ba0a:	4b28      	ldr	r3, [pc, #160]	@ (801baac <ip_reass_remove_oldest_datagram+0xc0>)
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ba10:	e030      	b.n	801ba74 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba14:	695a      	ldr	r2, [r3, #20]
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	68db      	ldr	r3, [r3, #12]
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	d10c      	bne.n	801ba38 <ip_reass_remove_oldest_datagram+0x4c>
 801ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba20:	699a      	ldr	r2, [r3, #24]
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	691b      	ldr	r3, [r3, #16]
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d106      	bne.n	801ba38 <ip_reass_remove_oldest_datagram+0x4c>
 801ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba2c:	899a      	ldrh	r2, [r3, #12]
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	889b      	ldrh	r3, [r3, #4]
 801ba32:	b29b      	uxth	r3, r3
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d014      	beq.n	801ba62 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ba38:	693b      	ldr	r3, [r7, #16]
 801ba3a:	3301      	adds	r3, #1
 801ba3c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ba3e:	6a3b      	ldr	r3, [r7, #32]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d104      	bne.n	801ba4e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba46:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ba48:	69fb      	ldr	r3, [r7, #28]
 801ba4a:	61bb      	str	r3, [r7, #24]
 801ba4c:	e009      	b.n	801ba62 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ba4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba50:	7fda      	ldrb	r2, [r3, #31]
 801ba52:	6a3b      	ldr	r3, [r7, #32]
 801ba54:	7fdb      	ldrb	r3, [r3, #31]
 801ba56:	429a      	cmp	r2, r3
 801ba58:	d803      	bhi.n	801ba62 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba5c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ba5e:	69fb      	ldr	r3, [r7, #28]
 801ba60:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d001      	beq.n	801ba6e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba6c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ba74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d1cb      	bne.n	801ba12 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ba7a:	6a3b      	ldr	r3, [r7, #32]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d008      	beq.n	801ba92 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ba80:	69b9      	ldr	r1, [r7, #24]
 801ba82:	6a38      	ldr	r0, [r7, #32]
 801ba84:	f7ff ff0e 	bl	801b8a4 <ip_reass_free_complete_datagram>
 801ba88:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ba8a:	697a      	ldr	r2, [r7, #20]
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	4413      	add	r3, r2
 801ba90:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ba92:	697a      	ldr	r2, [r7, #20]
 801ba94:	683b      	ldr	r3, [r7, #0]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	da02      	bge.n	801baa0 <ip_reass_remove_oldest_datagram+0xb4>
 801ba9a:	693b      	ldr	r3, [r7, #16]
 801ba9c:	2b01      	cmp	r3, #1
 801ba9e:	dcac      	bgt.n	801b9fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801baa0:	697b      	ldr	r3, [r7, #20]
}
 801baa2:	4618      	mov	r0, r3
 801baa4:	3728      	adds	r7, #40	@ 0x28
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bd80      	pop	{r7, pc}
 801baaa:	bf00      	nop
 801baac:	2000f4e8 	.word	0x2000f4e8

0801bab0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b084      	sub	sp, #16
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	6078      	str	r0, [r7, #4]
 801bab8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801baba:	2004      	movs	r0, #4
 801babc:	f7f6 fa3a 	bl	8011f34 <memp_malloc>
 801bac0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d110      	bne.n	801baea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bac8:	6839      	ldr	r1, [r7, #0]
 801baca:	6878      	ldr	r0, [r7, #4]
 801bacc:	f7ff ff8e 	bl	801b9ec <ip_reass_remove_oldest_datagram>
 801bad0:	4602      	mov	r2, r0
 801bad2:	683b      	ldr	r3, [r7, #0]
 801bad4:	4293      	cmp	r3, r2
 801bad6:	dc03      	bgt.n	801bae0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bad8:	2004      	movs	r0, #4
 801bada:	f7f6 fa2b 	bl	8011f34 <memp_malloc>
 801bade:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d101      	bne.n	801baea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bae6:	2300      	movs	r3, #0
 801bae8:	e016      	b.n	801bb18 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801baea:	2220      	movs	r2, #32
 801baec:	2100      	movs	r1, #0
 801baee:	68f8      	ldr	r0, [r7, #12]
 801baf0:	f001 fd99 	bl	801d626 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	220f      	movs	r2, #15
 801baf8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bafa:	4b09      	ldr	r3, [pc, #36]	@ (801bb20 <ip_reass_enqueue_new_datagram+0x70>)
 801bafc:	681a      	ldr	r2, [r3, #0]
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bb02:	4a07      	ldr	r2, [pc, #28]	@ (801bb20 <ip_reass_enqueue_new_datagram+0x70>)
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	3308      	adds	r3, #8
 801bb0c:	2214      	movs	r2, #20
 801bb0e:	6879      	ldr	r1, [r7, #4]
 801bb10:	4618      	mov	r0, r3
 801bb12:	f001 fe76 	bl	801d802 <memcpy>
  return ipr;
 801bb16:	68fb      	ldr	r3, [r7, #12]
}
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3710      	adds	r7, #16
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}
 801bb20:	2000f4e8 	.word	0x2000f4e8

0801bb24 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b082      	sub	sp, #8
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	6078      	str	r0, [r7, #4]
 801bb2c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bb2e:	4b10      	ldr	r3, [pc, #64]	@ (801bb70 <ip_reass_dequeue_datagram+0x4c>)
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	687a      	ldr	r2, [r7, #4]
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d104      	bne.n	801bb42 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	4a0c      	ldr	r2, [pc, #48]	@ (801bb70 <ip_reass_dequeue_datagram+0x4c>)
 801bb3e:	6013      	str	r3, [r2, #0]
 801bb40:	e00d      	b.n	801bb5e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d106      	bne.n	801bb56 <ip_reass_dequeue_datagram+0x32>
 801bb48:	4b0a      	ldr	r3, [pc, #40]	@ (801bb74 <ip_reass_dequeue_datagram+0x50>)
 801bb4a:	f240 1245 	movw	r2, #325	@ 0x145
 801bb4e:	490a      	ldr	r1, [pc, #40]	@ (801bb78 <ip_reass_dequeue_datagram+0x54>)
 801bb50:	480a      	ldr	r0, [pc, #40]	@ (801bb7c <ip_reass_dequeue_datagram+0x58>)
 801bb52:	f001 fcc9 	bl	801d4e8 <iprintf>
    prev->next = ipr->next;
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681a      	ldr	r2, [r3, #0]
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bb5e:	6879      	ldr	r1, [r7, #4]
 801bb60:	2004      	movs	r0, #4
 801bb62:	f7f6 fa5d 	bl	8012020 <memp_free>
}
 801bb66:	bf00      	nop
 801bb68:	3708      	adds	r7, #8
 801bb6a:	46bd      	mov	sp, r7
 801bb6c:	bd80      	pop	{r7, pc}
 801bb6e:	bf00      	nop
 801bb70:	2000f4e8 	.word	0x2000f4e8
 801bb74:	08022fa4 	.word	0x08022fa4
 801bb78:	0802306c 	.word	0x0802306c
 801bb7c:	08022fec 	.word	0x08022fec

0801bb80 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b08c      	sub	sp, #48	@ 0x30
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	60f8      	str	r0, [r7, #12]
 801bb88:	60b9      	str	r1, [r7, #8]
 801bb8a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bb90:	2301      	movs	r3, #1
 801bb92:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bb94:	68bb      	ldr	r3, [r7, #8]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bb9a:	69fb      	ldr	r3, [r7, #28]
 801bb9c:	885b      	ldrh	r3, [r3, #2]
 801bb9e:	b29b      	uxth	r3, r3
 801bba0:	4618      	mov	r0, r3
 801bba2:	f7f5 fcb9 	bl	8011518 <lwip_htons>
 801bba6:	4603      	mov	r3, r0
 801bba8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bbaa:	69fb      	ldr	r3, [r7, #28]
 801bbac:	781b      	ldrb	r3, [r3, #0]
 801bbae:	f003 030f 	and.w	r3, r3, #15
 801bbb2:	b2db      	uxtb	r3, r3
 801bbb4:	009b      	lsls	r3, r3, #2
 801bbb6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bbb8:	7e7b      	ldrb	r3, [r7, #25]
 801bbba:	b29b      	uxth	r3, r3
 801bbbc:	8b7a      	ldrh	r2, [r7, #26]
 801bbbe:	429a      	cmp	r2, r3
 801bbc0:	d202      	bcs.n	801bbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbc2:	f04f 33ff 	mov.w	r3, #4294967295
 801bbc6:	e135      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bbc8:	7e7b      	ldrb	r3, [r7, #25]
 801bbca:	b29b      	uxth	r3, r3
 801bbcc:	8b7a      	ldrh	r2, [r7, #26]
 801bbce:	1ad3      	subs	r3, r2, r3
 801bbd0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bbd2:	69fb      	ldr	r3, [r7, #28]
 801bbd4:	88db      	ldrh	r3, [r3, #6]
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	4618      	mov	r0, r3
 801bbda:	f7f5 fc9d 	bl	8011518 <lwip_htons>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bbe4:	b29b      	uxth	r3, r3
 801bbe6:	00db      	lsls	r3, r3, #3
 801bbe8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	701a      	strb	r2, [r3, #0]
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	705a      	strb	r2, [r3, #1]
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	709a      	strb	r2, [r3, #2]
 801bbfe:	2200      	movs	r2, #0
 801bc00:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc04:	8afa      	ldrh	r2, [r7, #22]
 801bc06:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bc08:	8afa      	ldrh	r2, [r7, #22]
 801bc0a:	8b7b      	ldrh	r3, [r7, #26]
 801bc0c:	4413      	add	r3, r2
 801bc0e:	b29a      	uxth	r2, r3
 801bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc12:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc16:	88db      	ldrh	r3, [r3, #6]
 801bc18:	b29b      	uxth	r3, r3
 801bc1a:	8afa      	ldrh	r2, [r7, #22]
 801bc1c:	429a      	cmp	r2, r3
 801bc1e:	d902      	bls.n	801bc26 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc20:	f04f 33ff 	mov.w	r3, #4294967295
 801bc24:	e106      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	685b      	ldr	r3, [r3, #4]
 801bc2a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bc2c:	e068      	b.n	801bd00 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bc2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc30:	685b      	ldr	r3, [r3, #4]
 801bc32:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc36:	889b      	ldrh	r3, [r3, #4]
 801bc38:	b29a      	uxth	r2, r3
 801bc3a:	693b      	ldr	r3, [r7, #16]
 801bc3c:	889b      	ldrh	r3, [r3, #4]
 801bc3e:	b29b      	uxth	r3, r3
 801bc40:	429a      	cmp	r2, r3
 801bc42:	d235      	bcs.n	801bcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bc48:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d020      	beq.n	801bc92 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc52:	889b      	ldrh	r3, [r3, #4]
 801bc54:	b29a      	uxth	r2, r3
 801bc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc58:	88db      	ldrh	r3, [r3, #6]
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	429a      	cmp	r2, r3
 801bc5e:	d307      	bcc.n	801bc70 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc62:	88db      	ldrh	r3, [r3, #6]
 801bc64:	b29a      	uxth	r2, r3
 801bc66:	693b      	ldr	r3, [r7, #16]
 801bc68:	889b      	ldrh	r3, [r3, #4]
 801bc6a:	b29b      	uxth	r3, r3
 801bc6c:	429a      	cmp	r2, r3
 801bc6e:	d902      	bls.n	801bc76 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc70:	f04f 33ff 	mov.w	r3, #4294967295
 801bc74:	e0de      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc78:	68ba      	ldr	r2, [r7, #8]
 801bc7a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc7e:	88db      	ldrh	r3, [r3, #6]
 801bc80:	b29a      	uxth	r2, r3
 801bc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc84:	889b      	ldrh	r3, [r3, #4]
 801bc86:	b29b      	uxth	r3, r3
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	d03d      	beq.n	801bd08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bc90:	e03a      	b.n	801bd08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc94:	88db      	ldrh	r3, [r3, #6]
 801bc96:	b29a      	uxth	r2, r3
 801bc98:	693b      	ldr	r3, [r7, #16]
 801bc9a:	889b      	ldrh	r3, [r3, #4]
 801bc9c:	b29b      	uxth	r3, r3
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d902      	bls.n	801bca8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bca2:	f04f 33ff 	mov.w	r3, #4294967295
 801bca6:	e0c5      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	68ba      	ldr	r2, [r7, #8]
 801bcac:	605a      	str	r2, [r3, #4]
      break;
 801bcae:	e02b      	b.n	801bd08 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcb2:	889b      	ldrh	r3, [r3, #4]
 801bcb4:	b29a      	uxth	r2, r3
 801bcb6:	693b      	ldr	r3, [r7, #16]
 801bcb8:	889b      	ldrh	r3, [r3, #4]
 801bcba:	b29b      	uxth	r3, r3
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d102      	bne.n	801bcc6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcc0:	f04f 33ff 	mov.w	r3, #4294967295
 801bcc4:	e0b6      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcc8:	889b      	ldrh	r3, [r3, #4]
 801bcca:	b29a      	uxth	r2, r3
 801bccc:	693b      	ldr	r3, [r7, #16]
 801bcce:	88db      	ldrh	r3, [r3, #6]
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d202      	bcs.n	801bcdc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcd6:	f04f 33ff 	mov.w	r3, #4294967295
 801bcda:	e0ab      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bcdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d009      	beq.n	801bcf6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bce4:	88db      	ldrh	r3, [r3, #6]
 801bce6:	b29a      	uxth	r2, r3
 801bce8:	693b      	ldr	r3, [r7, #16]
 801bcea:	889b      	ldrh	r3, [r3, #4]
 801bcec:	b29b      	uxth	r3, r3
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d001      	beq.n	801bcf6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	681b      	ldr	r3, [r3, #0]
 801bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801bcfc:	693b      	ldr	r3, [r7, #16]
 801bcfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801bd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d193      	bne.n	801bc2e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bd06:	e000      	b.n	801bd0a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bd08:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d12d      	bne.n	801bd6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d01c      	beq.n	801bd50 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd18:	88db      	ldrh	r3, [r3, #6]
 801bd1a:	b29a      	uxth	r2, r3
 801bd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd1e:	889b      	ldrh	r3, [r3, #4]
 801bd20:	b29b      	uxth	r3, r3
 801bd22:	429a      	cmp	r2, r3
 801bd24:	d906      	bls.n	801bd34 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bd26:	4b45      	ldr	r3, [pc, #276]	@ (801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd28:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bd2c:	4944      	ldr	r1, [pc, #272]	@ (801be40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bd2e:	4845      	ldr	r0, [pc, #276]	@ (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd30:	f001 fbda 	bl	801d4e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd36:	68ba      	ldr	r2, [r7, #8]
 801bd38:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd3c:	88db      	ldrh	r3, [r3, #6]
 801bd3e:	b29a      	uxth	r2, r3
 801bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd42:	889b      	ldrh	r3, [r3, #4]
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	429a      	cmp	r2, r3
 801bd48:	d010      	beq.n	801bd6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	623b      	str	r3, [r7, #32]
 801bd4e:	e00d      	b.n	801bd6c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	685b      	ldr	r3, [r3, #4]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d006      	beq.n	801bd66 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bd58:	4b38      	ldr	r3, [pc, #224]	@ (801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd5a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801bd5e:	493a      	ldr	r1, [pc, #232]	@ (801be48 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bd60:	4838      	ldr	r0, [pc, #224]	@ (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd62:	f001 fbc1 	bl	801d4e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	68ba      	ldr	r2, [r7, #8]
 801bd6a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d105      	bne.n	801bd7e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	7f9b      	ldrb	r3, [r3, #30]
 801bd76:	f003 0301 	and.w	r3, r3, #1
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d059      	beq.n	801be32 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bd7e:	6a3b      	ldr	r3, [r7, #32]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d04f      	beq.n	801be24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	685b      	ldr	r3, [r3, #4]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d006      	beq.n	801bd9a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	685b      	ldr	r3, [r3, #4]
 801bd92:	889b      	ldrh	r3, [r3, #4]
 801bd94:	b29b      	uxth	r3, r3
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d002      	beq.n	801bda0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	623b      	str	r3, [r7, #32]
 801bd9e:	e041      	b.n	801be24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bda2:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bdaa:	e012      	b.n	801bdd2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdae:	685b      	ldr	r3, [r3, #4]
 801bdb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb4:	88db      	ldrh	r3, [r3, #6]
 801bdb6:	b29a      	uxth	r2, r3
 801bdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdba:	889b      	ldrh	r3, [r3, #4]
 801bdbc:	b29b      	uxth	r3, r3
 801bdbe:	429a      	cmp	r2, r3
 801bdc0:	d002      	beq.n	801bdc8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	623b      	str	r3, [r7, #32]
            break;
 801bdc6:	e007      	b.n	801bdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdca:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d1e9      	bne.n	801bdac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bdd8:	6a3b      	ldr	r3, [r7, #32]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d022      	beq.n	801be24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	685b      	ldr	r3, [r3, #4]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d106      	bne.n	801bdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bde6:	4b15      	ldr	r3, [pc, #84]	@ (801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bde8:	f240 12df 	movw	r2, #479	@ 0x1df
 801bdec:	4917      	ldr	r1, [pc, #92]	@ (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bdee:	4815      	ldr	r0, [pc, #84]	@ (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bdf0:	f001 fb7a 	bl	801d4e8 <iprintf>
          LWIP_ASSERT("sanity check",
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	685b      	ldr	r3, [r3, #4]
 801bdf8:	685b      	ldr	r3, [r3, #4]
 801bdfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bdfc:	429a      	cmp	r2, r3
 801bdfe:	d106      	bne.n	801be0e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801be00:	4b0e      	ldr	r3, [pc, #56]	@ (801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be02:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801be06:	4911      	ldr	r1, [pc, #68]	@ (801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801be08:	480e      	ldr	r0, [pc, #56]	@ (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be0a:	f001 fb6d 	bl	801d4e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801be0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d006      	beq.n	801be24 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801be16:	4b09      	ldr	r3, [pc, #36]	@ (801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be18:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801be1c:	490c      	ldr	r1, [pc, #48]	@ (801be50 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801be1e:	4809      	ldr	r0, [pc, #36]	@ (801be44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be20:	f001 fb62 	bl	801d4e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801be24:	6a3b      	ldr	r3, [r7, #32]
 801be26:	2b00      	cmp	r3, #0
 801be28:	bf14      	ite	ne
 801be2a:	2301      	movne	r3, #1
 801be2c:	2300      	moveq	r3, #0
 801be2e:	b2db      	uxtb	r3, r3
 801be30:	e000      	b.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801be32:	2300      	movs	r3, #0
}
 801be34:	4618      	mov	r0, r3
 801be36:	3730      	adds	r7, #48	@ 0x30
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}
 801be3c:	08022fa4 	.word	0x08022fa4
 801be40:	08023088 	.word	0x08023088
 801be44:	08022fec 	.word	0x08022fec
 801be48:	080230a8 	.word	0x080230a8
 801be4c:	080230e0 	.word	0x080230e0
 801be50:	080230f0 	.word	0x080230f0

0801be54 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b08e      	sub	sp, #56	@ 0x38
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	685b      	ldr	r3, [r3, #4]
 801be60:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801be62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be64:	781b      	ldrb	r3, [r3, #0]
 801be66:	f003 030f 	and.w	r3, r3, #15
 801be6a:	b2db      	uxtb	r3, r3
 801be6c:	009b      	lsls	r3, r3, #2
 801be6e:	b2db      	uxtb	r3, r3
 801be70:	2b14      	cmp	r3, #20
 801be72:	f040 8171 	bne.w	801c158 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be78:	88db      	ldrh	r3, [r3, #6]
 801be7a:	b29b      	uxth	r3, r3
 801be7c:	4618      	mov	r0, r3
 801be7e:	f7f5 fb4b 	bl	8011518 <lwip_htons>
 801be82:	4603      	mov	r3, r0
 801be84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be88:	b29b      	uxth	r3, r3
 801be8a:	00db      	lsls	r3, r3, #3
 801be8c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be90:	885b      	ldrh	r3, [r3, #2]
 801be92:	b29b      	uxth	r3, r3
 801be94:	4618      	mov	r0, r3
 801be96:	f7f5 fb3f 	bl	8011518 <lwip_htons>
 801be9a:	4603      	mov	r3, r0
 801be9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801be9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bea0:	781b      	ldrb	r3, [r3, #0]
 801bea2:	f003 030f 	and.w	r3, r3, #15
 801bea6:	b2db      	uxtb	r3, r3
 801bea8:	009b      	lsls	r3, r3, #2
 801beaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801beae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801beb2:	b29b      	uxth	r3, r3
 801beb4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801beb6:	429a      	cmp	r2, r3
 801beb8:	f0c0 8150 	bcc.w	801c15c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801bec4:	1ad3      	subs	r3, r2, r3
 801bec6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bec8:	6878      	ldr	r0, [r7, #4]
 801beca:	f7f6 ffdb 	bl	8012e84 <pbuf_clen>
 801bece:	4603      	mov	r3, r0
 801bed0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bed2:	4b8c      	ldr	r3, [pc, #560]	@ (801c104 <ip4_reass+0x2b0>)
 801bed4:	881b      	ldrh	r3, [r3, #0]
 801bed6:	461a      	mov	r2, r3
 801bed8:	8c3b      	ldrh	r3, [r7, #32]
 801beda:	4413      	add	r3, r2
 801bedc:	2b0a      	cmp	r3, #10
 801bede:	dd10      	ble.n	801bf02 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bee0:	8c3b      	ldrh	r3, [r7, #32]
 801bee2:	4619      	mov	r1, r3
 801bee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bee6:	f7ff fd81 	bl	801b9ec <ip_reass_remove_oldest_datagram>
 801beea:	4603      	mov	r3, r0
 801beec:	2b00      	cmp	r3, #0
 801beee:	f000 8137 	beq.w	801c160 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bef2:	4b84      	ldr	r3, [pc, #528]	@ (801c104 <ip4_reass+0x2b0>)
 801bef4:	881b      	ldrh	r3, [r3, #0]
 801bef6:	461a      	mov	r2, r3
 801bef8:	8c3b      	ldrh	r3, [r7, #32]
 801befa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801befc:	2b0a      	cmp	r3, #10
 801befe:	f300 812f 	bgt.w	801c160 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf02:	4b81      	ldr	r3, [pc, #516]	@ (801c108 <ip4_reass+0x2b4>)
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	633b      	str	r3, [r7, #48]	@ 0x30
 801bf08:	e015      	b.n	801bf36 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf0c:	695a      	ldr	r2, [r3, #20]
 801bf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf10:	68db      	ldr	r3, [r3, #12]
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d10c      	bne.n	801bf30 <ip4_reass+0xdc>
 801bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf18:	699a      	ldr	r2, [r3, #24]
 801bf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf1c:	691b      	ldr	r3, [r3, #16]
 801bf1e:	429a      	cmp	r2, r3
 801bf20:	d106      	bne.n	801bf30 <ip4_reass+0xdc>
 801bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf24:	899a      	ldrh	r2, [r3, #12]
 801bf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf28:	889b      	ldrh	r3, [r3, #4]
 801bf2a:	b29b      	uxth	r3, r3
 801bf2c:	429a      	cmp	r2, r3
 801bf2e:	d006      	beq.n	801bf3e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	633b      	str	r3, [r7, #48]	@ 0x30
 801bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d1e6      	bne.n	801bf0a <ip4_reass+0xb6>
 801bf3c:	e000      	b.n	801bf40 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bf3e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d109      	bne.n	801bf5a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bf46:	8c3b      	ldrh	r3, [r7, #32]
 801bf48:	4619      	mov	r1, r3
 801bf4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bf4c:	f7ff fdb0 	bl	801bab0 <ip_reass_enqueue_new_datagram>
 801bf50:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf54:	2b00      	cmp	r3, #0
 801bf56:	d11c      	bne.n	801bf92 <ip4_reass+0x13e>
      goto nullreturn;
 801bf58:	e105      	b.n	801c166 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf5c:	88db      	ldrh	r3, [r3, #6]
 801bf5e:	b29b      	uxth	r3, r3
 801bf60:	4618      	mov	r0, r3
 801bf62:	f7f5 fad9 	bl	8011518 <lwip_htons>
 801bf66:	4603      	mov	r3, r0
 801bf68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d110      	bne.n	801bf92 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf72:	89db      	ldrh	r3, [r3, #14]
 801bf74:	4618      	mov	r0, r3
 801bf76:	f7f5 facf 	bl	8011518 <lwip_htons>
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d006      	beq.n	801bf92 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf86:	3308      	adds	r3, #8
 801bf88:	2214      	movs	r2, #20
 801bf8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	f001 fc38 	bl	801d802 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf94:	88db      	ldrh	r3, [r3, #6]
 801bf96:	b29b      	uxth	r3, r3
 801bf98:	f003 0320 	and.w	r3, r3, #32
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	bf0c      	ite	eq
 801bfa0:	2301      	moveq	r3, #1
 801bfa2:	2300      	movne	r3, #0
 801bfa4:	b2db      	uxtb	r3, r3
 801bfa6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bfa8:	69fb      	ldr	r3, [r7, #28]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d00e      	beq.n	801bfcc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bfae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bfb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bfb2:	4413      	add	r3, r2
 801bfb4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bfb6:	8b7a      	ldrh	r2, [r7, #26]
 801bfb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	f0c0 80a0 	bcc.w	801c100 <ip4_reass+0x2ac>
 801bfc0:	8b7b      	ldrh	r3, [r7, #26]
 801bfc2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801bfc6:	4293      	cmp	r3, r2
 801bfc8:	f200 809a 	bhi.w	801c100 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bfcc:	69fa      	ldr	r2, [r7, #28]
 801bfce:	6879      	ldr	r1, [r7, #4]
 801bfd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bfd2:	f7ff fdd5 	bl	801bb80 <ip_reass_chain_frag_into_datagram_and_validate>
 801bfd6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfde:	f000 809b 	beq.w	801c118 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bfe2:	4b48      	ldr	r3, [pc, #288]	@ (801c104 <ip4_reass+0x2b0>)
 801bfe4:	881a      	ldrh	r2, [r3, #0]
 801bfe6:	8c3b      	ldrh	r3, [r7, #32]
 801bfe8:	4413      	add	r3, r2
 801bfea:	b29a      	uxth	r2, r3
 801bfec:	4b45      	ldr	r3, [pc, #276]	@ (801c104 <ip4_reass+0x2b0>)
 801bfee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bff0:	69fb      	ldr	r3, [r7, #28]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d00d      	beq.n	801c012 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bff6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bffa:	4413      	add	r3, r2
 801bffc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c000:	8a7a      	ldrh	r2, [r7, #18]
 801c002:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c006:	7f9b      	ldrb	r3, [r3, #30]
 801c008:	f043 0301 	orr.w	r3, r3, #1
 801c00c:	b2da      	uxtb	r2, r3
 801c00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c010:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c012:	697b      	ldr	r3, [r7, #20]
 801c014:	2b01      	cmp	r3, #1
 801c016:	d171      	bne.n	801c0fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c01a:	8b9b      	ldrh	r3, [r3, #28]
 801c01c:	3314      	adds	r3, #20
 801c01e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c022:	685b      	ldr	r3, [r3, #4]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c034:	3308      	adds	r3, #8
 801c036:	2214      	movs	r2, #20
 801c038:	4619      	mov	r1, r3
 801c03a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c03c:	f001 fbe1 	bl	801d802 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c040:	8a3b      	ldrh	r3, [r7, #16]
 801c042:	4618      	mov	r0, r3
 801c044:	f7f5 fa68 	bl	8011518 <lwip_htons>
 801c048:	4603      	mov	r3, r0
 801c04a:	461a      	mov	r2, r3
 801c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c04e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c052:	2200      	movs	r2, #0
 801c054:	719a      	strb	r2, [r3, #6]
 801c056:	2200      	movs	r2, #0
 801c058:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c05c:	2200      	movs	r2, #0
 801c05e:	729a      	strb	r2, [r3, #10]
 801c060:	2200      	movs	r2, #0
 801c062:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c066:	685b      	ldr	r3, [r3, #4]
 801c068:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c06a:	e00d      	b.n	801c088 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c06e:	685b      	ldr	r3, [r3, #4]
 801c070:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c072:	2114      	movs	r1, #20
 801c074:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c076:	f7f6 fdf1 	bl	8012c5c <pbuf_remove_header>
      pbuf_cat(p, r);
 801c07a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c07c:	6878      	ldr	r0, [r7, #4]
 801c07e:	f7f6 ff41 	bl	8012f04 <pbuf_cat>
      r = iprh->next_pbuf;
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d1ee      	bne.n	801c06c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c08e:	4b1e      	ldr	r3, [pc, #120]	@ (801c108 <ip4_reass+0x2b4>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c094:	429a      	cmp	r2, r3
 801c096:	d102      	bne.n	801c09e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c098:	2300      	movs	r3, #0
 801c09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c09c:	e010      	b.n	801c0c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c09e:	4b1a      	ldr	r3, [pc, #104]	@ (801c108 <ip4_reass+0x2b4>)
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c0a4:	e007      	b.n	801c0b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c0ac:	429a      	cmp	r2, r3
 801c0ae:	d006      	beq.n	801c0be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d1f4      	bne.n	801c0a6 <ip4_reass+0x252>
 801c0bc:	e000      	b.n	801c0c0 <ip4_reass+0x26c>
          break;
 801c0be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c0c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c0c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c0c4:	f7ff fd2e 	bl	801bb24 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c0c8:	6878      	ldr	r0, [r7, #4]
 801c0ca:	f7f6 fedb 	bl	8012e84 <pbuf_clen>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c0d2:	4b0c      	ldr	r3, [pc, #48]	@ (801c104 <ip4_reass+0x2b0>)
 801c0d4:	881b      	ldrh	r3, [r3, #0]
 801c0d6:	8c3a      	ldrh	r2, [r7, #32]
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	d906      	bls.n	801c0ea <ip4_reass+0x296>
 801c0dc:	4b0b      	ldr	r3, [pc, #44]	@ (801c10c <ip4_reass+0x2b8>)
 801c0de:	f240 229b 	movw	r2, #667	@ 0x29b
 801c0e2:	490b      	ldr	r1, [pc, #44]	@ (801c110 <ip4_reass+0x2bc>)
 801c0e4:	480b      	ldr	r0, [pc, #44]	@ (801c114 <ip4_reass+0x2c0>)
 801c0e6:	f001 f9ff 	bl	801d4e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c0ea:	4b06      	ldr	r3, [pc, #24]	@ (801c104 <ip4_reass+0x2b0>)
 801c0ec:	881a      	ldrh	r2, [r3, #0]
 801c0ee:	8c3b      	ldrh	r3, [r7, #32]
 801c0f0:	1ad3      	subs	r3, r2, r3
 801c0f2:	b29a      	uxth	r2, r3
 801c0f4:	4b03      	ldr	r3, [pc, #12]	@ (801c104 <ip4_reass+0x2b0>)
 801c0f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	e038      	b.n	801c16e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	e036      	b.n	801c16e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c100:	bf00      	nop
 801c102:	e00a      	b.n	801c11a <ip4_reass+0x2c6>
 801c104:	2000f4ec 	.word	0x2000f4ec
 801c108:	2000f4e8 	.word	0x2000f4e8
 801c10c:	08022fa4 	.word	0x08022fa4
 801c110:	08023114 	.word	0x08023114
 801c114:	08022fec 	.word	0x08022fec
    goto nullreturn_ipr;
 801c118:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d106      	bne.n	801c12e <ip4_reass+0x2da>
 801c120:	4b15      	ldr	r3, [pc, #84]	@ (801c178 <ip4_reass+0x324>)
 801c122:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c126:	4915      	ldr	r1, [pc, #84]	@ (801c17c <ip4_reass+0x328>)
 801c128:	4815      	ldr	r0, [pc, #84]	@ (801c180 <ip4_reass+0x32c>)
 801c12a:	f001 f9dd 	bl	801d4e8 <iprintf>
  if (ipr->p == NULL) {
 801c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c130:	685b      	ldr	r3, [r3, #4]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d116      	bne.n	801c164 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c136:	4b13      	ldr	r3, [pc, #76]	@ (801c184 <ip4_reass+0x330>)
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c13c:	429a      	cmp	r2, r3
 801c13e:	d006      	beq.n	801c14e <ip4_reass+0x2fa>
 801c140:	4b0d      	ldr	r3, [pc, #52]	@ (801c178 <ip4_reass+0x324>)
 801c142:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c146:	4910      	ldr	r1, [pc, #64]	@ (801c188 <ip4_reass+0x334>)
 801c148:	480d      	ldr	r0, [pc, #52]	@ (801c180 <ip4_reass+0x32c>)
 801c14a:	f001 f9cd 	bl	801d4e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c14e:	2100      	movs	r1, #0
 801c150:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c152:	f7ff fce7 	bl	801bb24 <ip_reass_dequeue_datagram>
 801c156:	e006      	b.n	801c166 <ip4_reass+0x312>
    goto nullreturn;
 801c158:	bf00      	nop
 801c15a:	e004      	b.n	801c166 <ip4_reass+0x312>
    goto nullreturn;
 801c15c:	bf00      	nop
 801c15e:	e002      	b.n	801c166 <ip4_reass+0x312>
      goto nullreturn;
 801c160:	bf00      	nop
 801c162:	e000      	b.n	801c166 <ip4_reass+0x312>
  }

nullreturn:
 801c164:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f7f6 fdfe 	bl	8012d68 <pbuf_free>
  return NULL;
 801c16c:	2300      	movs	r3, #0
}
 801c16e:	4618      	mov	r0, r3
 801c170:	3738      	adds	r7, #56	@ 0x38
 801c172:	46bd      	mov	sp, r7
 801c174:	bd80      	pop	{r7, pc}
 801c176:	bf00      	nop
 801c178:	08022fa4 	.word	0x08022fa4
 801c17c:	08023130 	.word	0x08023130
 801c180:	08022fec 	.word	0x08022fec
 801c184:	2000f4e8 	.word	0x2000f4e8
 801c188:	0802313c 	.word	0x0802313c

0801c18c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c190:	2005      	movs	r0, #5
 801c192:	f7f5 fecf 	bl	8011f34 <memp_malloc>
 801c196:	4603      	mov	r3, r0
}
 801c198:	4618      	mov	r0, r3
 801c19a:	bd80      	pop	{r7, pc}

0801c19c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c19c:	b580      	push	{r7, lr}
 801c19e:	b082      	sub	sp, #8
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d106      	bne.n	801c1b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c1aa:	4b07      	ldr	r3, [pc, #28]	@ (801c1c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c1ac:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c1b0:	4906      	ldr	r1, [pc, #24]	@ (801c1cc <ip_frag_free_pbuf_custom_ref+0x30>)
 801c1b2:	4807      	ldr	r0, [pc, #28]	@ (801c1d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c1b4:	f001 f998 	bl	801d4e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c1b8:	6879      	ldr	r1, [r7, #4]
 801c1ba:	2005      	movs	r0, #5
 801c1bc:	f7f5 ff30 	bl	8012020 <memp_free>
}
 801c1c0:	bf00      	nop
 801c1c2:	3708      	adds	r7, #8
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	bd80      	pop	{r7, pc}
 801c1c8:	08022fa4 	.word	0x08022fa4
 801c1cc:	0802315c 	.word	0x0802315c
 801c1d0:	08022fec 	.word	0x08022fec

0801c1d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d106      	bne.n	801c1f4 <ipfrag_free_pbuf_custom+0x20>
 801c1e6:	4b11      	ldr	r3, [pc, #68]	@ (801c22c <ipfrag_free_pbuf_custom+0x58>)
 801c1e8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c1ec:	4910      	ldr	r1, [pc, #64]	@ (801c230 <ipfrag_free_pbuf_custom+0x5c>)
 801c1ee:	4811      	ldr	r0, [pc, #68]	@ (801c234 <ipfrag_free_pbuf_custom+0x60>)
 801c1f0:	f001 f97a 	bl	801d4e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c1f4:	68fa      	ldr	r2, [r7, #12]
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	429a      	cmp	r2, r3
 801c1fa:	d006      	beq.n	801c20a <ipfrag_free_pbuf_custom+0x36>
 801c1fc:	4b0b      	ldr	r3, [pc, #44]	@ (801c22c <ipfrag_free_pbuf_custom+0x58>)
 801c1fe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c202:	490d      	ldr	r1, [pc, #52]	@ (801c238 <ipfrag_free_pbuf_custom+0x64>)
 801c204:	480b      	ldr	r0, [pc, #44]	@ (801c234 <ipfrag_free_pbuf_custom+0x60>)
 801c206:	f001 f96f 	bl	801d4e8 <iprintf>
  if (pcr->original != NULL) {
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	695b      	ldr	r3, [r3, #20]
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d004      	beq.n	801c21c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	695b      	ldr	r3, [r3, #20]
 801c216:	4618      	mov	r0, r3
 801c218:	f7f6 fda6 	bl	8012d68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c21c:	68f8      	ldr	r0, [r7, #12]
 801c21e:	f7ff ffbd 	bl	801c19c <ip_frag_free_pbuf_custom_ref>
}
 801c222:	bf00      	nop
 801c224:	3710      	adds	r7, #16
 801c226:	46bd      	mov	sp, r7
 801c228:	bd80      	pop	{r7, pc}
 801c22a:	bf00      	nop
 801c22c:	08022fa4 	.word	0x08022fa4
 801c230:	08023168 	.word	0x08023168
 801c234:	08022fec 	.word	0x08022fec
 801c238:	08023174 	.word	0x08023174

0801c23c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b094      	sub	sp, #80	@ 0x50
 801c240:	af02      	add	r7, sp, #8
 801c242:	60f8      	str	r0, [r7, #12]
 801c244:	60b9      	str	r1, [r7, #8]
 801c246:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c248:	2300      	movs	r3, #0
 801c24a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c24e:	68bb      	ldr	r3, [r7, #8]
 801c250:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c252:	3b14      	subs	r3, #20
 801c254:	2b00      	cmp	r3, #0
 801c256:	da00      	bge.n	801c25a <ip4_frag+0x1e>
 801c258:	3307      	adds	r3, #7
 801c25a:	10db      	asrs	r3, r3, #3
 801c25c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c25e:	2314      	movs	r3, #20
 801c260:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	685b      	ldr	r3, [r3, #4]
 801c266:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c26a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c26e:	781b      	ldrb	r3, [r3, #0]
 801c270:	f003 030f 	and.w	r3, r3, #15
 801c274:	b2db      	uxtb	r3, r3
 801c276:	009b      	lsls	r3, r3, #2
 801c278:	b2db      	uxtb	r3, r3
 801c27a:	2b14      	cmp	r3, #20
 801c27c:	d002      	beq.n	801c284 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c27e:	f06f 0305 	mvn.w	r3, #5
 801c282:	e110      	b.n	801c4a6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	895b      	ldrh	r3, [r3, #10]
 801c288:	2b13      	cmp	r3, #19
 801c28a:	d809      	bhi.n	801c2a0 <ip4_frag+0x64>
 801c28c:	4b88      	ldr	r3, [pc, #544]	@ (801c4b0 <ip4_frag+0x274>)
 801c28e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c292:	4988      	ldr	r1, [pc, #544]	@ (801c4b4 <ip4_frag+0x278>)
 801c294:	4888      	ldr	r0, [pc, #544]	@ (801c4b8 <ip4_frag+0x27c>)
 801c296:	f001 f927 	bl	801d4e8 <iprintf>
 801c29a:	f06f 0305 	mvn.w	r3, #5
 801c29e:	e102      	b.n	801c4a6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2a2:	88db      	ldrh	r3, [r3, #6]
 801c2a4:	b29b      	uxth	r3, r3
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	f7f5 f936 	bl	8011518 <lwip_htons>
 801c2ac:	4603      	mov	r3, r0
 801c2ae:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c2b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c2b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c2ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c2bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	891b      	ldrh	r3, [r3, #8]
 801c2c6:	3b14      	subs	r3, #20
 801c2c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c2cc:	e0e1      	b.n	801c492 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c2ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c2d0:	00db      	lsls	r3, r3, #3
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c2d8:	4293      	cmp	r3, r2
 801c2da:	bf28      	it	cs
 801c2dc:	4613      	movcs	r3, r2
 801c2de:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c2e0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c2e4:	2114      	movs	r1, #20
 801c2e6:	200e      	movs	r0, #14
 801c2e8:	f7f6 fa5a 	bl	80127a0 <pbuf_alloc>
 801c2ec:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	f000 80d5 	beq.w	801c4a0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f8:	895b      	ldrh	r3, [r3, #10]
 801c2fa:	2b13      	cmp	r3, #19
 801c2fc:	d806      	bhi.n	801c30c <ip4_frag+0xd0>
 801c2fe:	4b6c      	ldr	r3, [pc, #432]	@ (801c4b0 <ip4_frag+0x274>)
 801c300:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c304:	496d      	ldr	r1, [pc, #436]	@ (801c4bc <ip4_frag+0x280>)
 801c306:	486c      	ldr	r0, [pc, #432]	@ (801c4b8 <ip4_frag+0x27c>)
 801c308:	f001 f8ee 	bl	801d4e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	2214      	movs	r2, #20
 801c312:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c314:	4618      	mov	r0, r3
 801c316:	f001 fa74 	bl	801d802 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c320:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c322:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c326:	e064      	b.n	801c3f2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	895a      	ldrh	r2, [r3, #10]
 801c32c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c32e:	1ad3      	subs	r3, r2, r3
 801c330:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	895b      	ldrh	r3, [r3, #10]
 801c336:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c338:	429a      	cmp	r2, r3
 801c33a:	d906      	bls.n	801c34a <ip4_frag+0x10e>
 801c33c:	4b5c      	ldr	r3, [pc, #368]	@ (801c4b0 <ip4_frag+0x274>)
 801c33e:	f240 322d 	movw	r2, #813	@ 0x32d
 801c342:	495f      	ldr	r1, [pc, #380]	@ (801c4c0 <ip4_frag+0x284>)
 801c344:	485c      	ldr	r0, [pc, #368]	@ (801c4b8 <ip4_frag+0x27c>)
 801c346:	f001 f8cf 	bl	801d4e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c34a:	8bfa      	ldrh	r2, [r7, #30]
 801c34c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c350:	4293      	cmp	r3, r2
 801c352:	bf28      	it	cs
 801c354:	4613      	movcs	r3, r2
 801c356:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c35a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d105      	bne.n	801c36e <ip4_frag+0x132>
        poff = 0;
 801c362:	2300      	movs	r3, #0
 801c364:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	60fb      	str	r3, [r7, #12]
        continue;
 801c36c:	e041      	b.n	801c3f2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c36e:	f7ff ff0d 	bl	801c18c <ip_frag_alloc_pbuf_custom_ref>
 801c372:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d103      	bne.n	801c382 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c37a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c37c:	f7f6 fcf4 	bl	8012d68 <pbuf_free>
        goto memerr;
 801c380:	e08f      	b.n	801c4a2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c382:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c388:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c38a:	4413      	add	r3, r2
 801c38c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c390:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c394:	9201      	str	r2, [sp, #4]
 801c396:	9300      	str	r3, [sp, #0]
 801c398:	4603      	mov	r3, r0
 801c39a:	2241      	movs	r2, #65	@ 0x41
 801c39c:	2000      	movs	r0, #0
 801c39e:	f7f6 fb29 	bl	80129f4 <pbuf_alloced_custom>
 801c3a2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c3a4:	697b      	ldr	r3, [r7, #20]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d106      	bne.n	801c3b8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c3aa:	69b8      	ldr	r0, [r7, #24]
 801c3ac:	f7ff fef6 	bl	801c19c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c3b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c3b2:	f7f6 fcd9 	bl	8012d68 <pbuf_free>
        goto memerr;
 801c3b6:	e074      	b.n	801c4a2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c3b8:	68f8      	ldr	r0, [r7, #12]
 801c3ba:	f7f6 fd7b 	bl	8012eb4 <pbuf_ref>
      pcr->original = p;
 801c3be:	69bb      	ldr	r3, [r7, #24]
 801c3c0:	68fa      	ldr	r2, [r7, #12]
 801c3c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c3c4:	69bb      	ldr	r3, [r7, #24]
 801c3c6:	4a3f      	ldr	r2, [pc, #252]	@ (801c4c4 <ip4_frag+0x288>)
 801c3c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c3ca:	6979      	ldr	r1, [r7, #20]
 801c3cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c3ce:	f7f6 fd99 	bl	8012f04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c3d2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c3d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c3da:	1ad3      	subs	r3, r2, r3
 801c3dc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c3e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d004      	beq.n	801c3f2 <ip4_frag+0x1b6>
        poff = 0;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c3f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d196      	bne.n	801c328 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c3fa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c3fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c400:	4413      	add	r3, r2
 801c402:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c408:	f1a3 0213 	sub.w	r2, r3, #19
 801c40c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c410:	429a      	cmp	r2, r3
 801c412:	bfcc      	ite	gt
 801c414:	2301      	movgt	r3, #1
 801c416:	2300      	movle	r3, #0
 801c418:	b2db      	uxtb	r3, r3
 801c41a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c41c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c420:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c424:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c426:	6a3b      	ldr	r3, [r7, #32]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d002      	beq.n	801c432 <ip4_frag+0x1f6>
 801c42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d003      	beq.n	801c43a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c432:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c434:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c438:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c43a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7f5 f86b 	bl	8011518 <lwip_htons>
 801c442:	4603      	mov	r3, r0
 801c444:	461a      	mov	r2, r3
 801c446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c448:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c44a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c44c:	3314      	adds	r3, #20
 801c44e:	b29b      	uxth	r3, r3
 801c450:	4618      	mov	r0, r3
 801c452:	f7f5 f861 	bl	8011518 <lwip_htons>
 801c456:	4603      	mov	r3, r0
 801c458:	461a      	mov	r2, r3
 801c45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c45c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c460:	2200      	movs	r2, #0
 801c462:	729a      	strb	r2, [r3, #10]
 801c464:	2200      	movs	r2, #0
 801c466:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c468:	68bb      	ldr	r3, [r7, #8]
 801c46a:	695b      	ldr	r3, [r3, #20]
 801c46c:	687a      	ldr	r2, [r7, #4]
 801c46e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c470:	68b8      	ldr	r0, [r7, #8]
 801c472:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c474:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c476:	f7f6 fc77 	bl	8012d68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c47a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c47e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c480:	1ad3      	subs	r3, r2, r3
 801c482:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c486:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c48a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c48c:	4413      	add	r3, r2
 801c48e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c496:	2b00      	cmp	r3, #0
 801c498:	f47f af19 	bne.w	801c2ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c49c:	2300      	movs	r3, #0
 801c49e:	e002      	b.n	801c4a6 <ip4_frag+0x26a>
      goto memerr;
 801c4a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c4a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	3748      	adds	r7, #72	@ 0x48
 801c4aa:	46bd      	mov	sp, r7
 801c4ac:	bd80      	pop	{r7, pc}
 801c4ae:	bf00      	nop
 801c4b0:	08022fa4 	.word	0x08022fa4
 801c4b4:	08023180 	.word	0x08023180
 801c4b8:	08022fec 	.word	0x08022fec
 801c4bc:	0802319c 	.word	0x0802319c
 801c4c0:	080231bc 	.word	0x080231bc
 801c4c4:	0801c1d5 	.word	0x0801c1d5

0801c4c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b086      	sub	sp, #24
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
 801c4d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c4d2:	230e      	movs	r3, #14
 801c4d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	895b      	ldrh	r3, [r3, #10]
 801c4da:	2b0e      	cmp	r3, #14
 801c4dc:	d96e      	bls.n	801c5bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	7bdb      	ldrb	r3, [r3, #15]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d106      	bne.n	801c4f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c4e6:	683b      	ldr	r3, [r7, #0]
 801c4e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c4ec:	3301      	adds	r3, #1
 801c4ee:	b2da      	uxtb	r2, r3
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	685b      	ldr	r3, [r3, #4]
 801c4f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c4fa:	693b      	ldr	r3, [r7, #16]
 801c4fc:	7b1a      	ldrb	r2, [r3, #12]
 801c4fe:	7b5b      	ldrb	r3, [r3, #13]
 801c500:	021b      	lsls	r3, r3, #8
 801c502:	4313      	orrs	r3, r2
 801c504:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c506:	693b      	ldr	r3, [r7, #16]
 801c508:	781b      	ldrb	r3, [r3, #0]
 801c50a:	f003 0301 	and.w	r3, r3, #1
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d023      	beq.n	801c55a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c512:	693b      	ldr	r3, [r7, #16]
 801c514:	781b      	ldrb	r3, [r3, #0]
 801c516:	2b01      	cmp	r3, #1
 801c518:	d10f      	bne.n	801c53a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c51a:	693b      	ldr	r3, [r7, #16]
 801c51c:	785b      	ldrb	r3, [r3, #1]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	d11b      	bne.n	801c55a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c522:	693b      	ldr	r3, [r7, #16]
 801c524:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c526:	2b5e      	cmp	r3, #94	@ 0x5e
 801c528:	d117      	bne.n	801c55a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	7b5b      	ldrb	r3, [r3, #13]
 801c52e:	f043 0310 	orr.w	r3, r3, #16
 801c532:	b2da      	uxtb	r2, r3
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	735a      	strb	r2, [r3, #13]
 801c538:	e00f      	b.n	801c55a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c53a:	693b      	ldr	r3, [r7, #16]
 801c53c:	2206      	movs	r2, #6
 801c53e:	4928      	ldr	r1, [pc, #160]	@ (801c5e0 <ethernet_input+0x118>)
 801c540:	4618      	mov	r0, r3
 801c542:	f001 f846 	bl	801d5d2 <memcmp>
 801c546:	4603      	mov	r3, r0
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d106      	bne.n	801c55a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	7b5b      	ldrb	r3, [r3, #13]
 801c550:	f043 0308 	orr.w	r3, r3, #8
 801c554:	b2da      	uxtb	r2, r3
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c55a:	89fb      	ldrh	r3, [r7, #14]
 801c55c:	2b08      	cmp	r3, #8
 801c55e:	d003      	beq.n	801c568 <ethernet_input+0xa0>
 801c560:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c564:	d014      	beq.n	801c590 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c566:	e032      	b.n	801c5ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c568:	683b      	ldr	r3, [r7, #0]
 801c56a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c56e:	f003 0308 	and.w	r3, r3, #8
 801c572:	2b00      	cmp	r3, #0
 801c574:	d024      	beq.n	801c5c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c576:	8afb      	ldrh	r3, [r7, #22]
 801c578:	4619      	mov	r1, r3
 801c57a:	6878      	ldr	r0, [r7, #4]
 801c57c:	f7f6 fb6e 	bl	8012c5c <pbuf_remove_header>
 801c580:	4603      	mov	r3, r0
 801c582:	2b00      	cmp	r3, #0
 801c584:	d11e      	bne.n	801c5c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c586:	6839      	ldr	r1, [r7, #0]
 801c588:	6878      	ldr	r0, [r7, #4]
 801c58a:	f7fe ff21 	bl	801b3d0 <ip4_input>
      break;
 801c58e:	e013      	b.n	801c5b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c590:	683b      	ldr	r3, [r7, #0]
 801c592:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c596:	f003 0308 	and.w	r3, r3, #8
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d014      	beq.n	801c5c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c59e:	8afb      	ldrh	r3, [r7, #22]
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	6878      	ldr	r0, [r7, #4]
 801c5a4:	f7f6 fb5a 	bl	8012c5c <pbuf_remove_header>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d10e      	bne.n	801c5cc <ethernet_input+0x104>
        etharp_input(p, netif);
 801c5ae:	6839      	ldr	r1, [r7, #0]
 801c5b0:	6878      	ldr	r0, [r7, #4]
 801c5b2:	f7fe f8c1 	bl	801a738 <etharp_input>
      break;
 801c5b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	e00c      	b.n	801c5d6 <ethernet_input+0x10e>
    goto free_and_return;
 801c5bc:	bf00      	nop
 801c5be:	e006      	b.n	801c5ce <ethernet_input+0x106>
        goto free_and_return;
 801c5c0:	bf00      	nop
 801c5c2:	e004      	b.n	801c5ce <ethernet_input+0x106>
        goto free_and_return;
 801c5c4:	bf00      	nop
 801c5c6:	e002      	b.n	801c5ce <ethernet_input+0x106>
        goto free_and_return;
 801c5c8:	bf00      	nop
 801c5ca:	e000      	b.n	801c5ce <ethernet_input+0x106>
        goto free_and_return;
 801c5cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c5ce:	6878      	ldr	r0, [r7, #4]
 801c5d0:	f7f6 fbca 	bl	8012d68 <pbuf_free>
  return ERR_OK;
 801c5d4:	2300      	movs	r3, #0
}
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	3718      	adds	r7, #24
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	bd80      	pop	{r7, pc}
 801c5de:	bf00      	nop
 801c5e0:	08024a80 	.word	0x08024a80

0801c5e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	b086      	sub	sp, #24
 801c5e8:	af00      	add	r7, sp, #0
 801c5ea:	60f8      	str	r0, [r7, #12]
 801c5ec:	60b9      	str	r1, [r7, #8]
 801c5ee:	607a      	str	r2, [r7, #4]
 801c5f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c5f2:	8c3b      	ldrh	r3, [r7, #32]
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7f4 ff8f 	bl	8011518 <lwip_htons>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c5fe:	210e      	movs	r1, #14
 801c600:	68b8      	ldr	r0, [r7, #8]
 801c602:	f7f6 fb1b 	bl	8012c3c <pbuf_add_header>
 801c606:	4603      	mov	r3, r0
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d125      	bne.n	801c658 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c60c:	68bb      	ldr	r3, [r7, #8]
 801c60e:	685b      	ldr	r3, [r3, #4]
 801c610:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c612:	693b      	ldr	r3, [r7, #16]
 801c614:	8afa      	ldrh	r2, [r7, #22]
 801c616:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c618:	693b      	ldr	r3, [r7, #16]
 801c61a:	2206      	movs	r2, #6
 801c61c:	6839      	ldr	r1, [r7, #0]
 801c61e:	4618      	mov	r0, r3
 801c620:	f001 f8ef 	bl	801d802 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c624:	693b      	ldr	r3, [r7, #16]
 801c626:	3306      	adds	r3, #6
 801c628:	2206      	movs	r2, #6
 801c62a:	6879      	ldr	r1, [r7, #4]
 801c62c:	4618      	mov	r0, r3
 801c62e:	f001 f8e8 	bl	801d802 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c638:	2b06      	cmp	r3, #6
 801c63a:	d006      	beq.n	801c64a <ethernet_output+0x66>
 801c63c:	4b0a      	ldr	r3, [pc, #40]	@ (801c668 <ethernet_output+0x84>)
 801c63e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c642:	490a      	ldr	r1, [pc, #40]	@ (801c66c <ethernet_output+0x88>)
 801c644:	480a      	ldr	r0, [pc, #40]	@ (801c670 <ethernet_output+0x8c>)
 801c646:	f000 ff4f 	bl	801d4e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	699b      	ldr	r3, [r3, #24]
 801c64e:	68b9      	ldr	r1, [r7, #8]
 801c650:	68f8      	ldr	r0, [r7, #12]
 801c652:	4798      	blx	r3
 801c654:	4603      	mov	r3, r0
 801c656:	e002      	b.n	801c65e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c658:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c65a:	f06f 0301 	mvn.w	r3, #1
}
 801c65e:	4618      	mov	r0, r3
 801c660:	3718      	adds	r7, #24
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}
 801c666:	bf00      	nop
 801c668:	080231cc 	.word	0x080231cc
 801c66c:	08023204 	.word	0x08023204
 801c670:	08023238 	.word	0x08023238

0801c674 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c674:	b580      	push	{r7, lr}
 801c676:	b086      	sub	sp, #24
 801c678:	af00      	add	r7, sp, #0
 801c67a:	6078      	str	r0, [r7, #4]
 801c67c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c67e:	683b      	ldr	r3, [r7, #0]
 801c680:	60bb      	str	r3, [r7, #8]
 801c682:	2304      	movs	r3, #4
 801c684:	60fb      	str	r3, [r7, #12]
 801c686:	2300      	movs	r3, #0
 801c688:	613b      	str	r3, [r7, #16]
 801c68a:	2300      	movs	r3, #0
 801c68c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c68e:	f107 0308 	add.w	r3, r7, #8
 801c692:	2100      	movs	r1, #0
 801c694:	4618      	mov	r0, r3
 801c696:	f7ee febe 	bl	800b416 <osMessageCreate>
 801c69a:	4602      	mov	r2, r0
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d102      	bne.n	801c6ae <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ac:	e000      	b.n	801c6b0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c6ae:	2300      	movs	r3, #0
}
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	3718      	adds	r7, #24
 801c6b4:	46bd      	mov	sp, r7
 801c6b6:	bd80      	pop	{r7, pc}

0801c6b8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b082      	sub	sp, #8
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	4618      	mov	r0, r3
 801c6c6:	f7ee ff83 	bl	800b5d0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	f7ee ff94 	bl	800b5fc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c6d4:	bf00      	nop
 801c6d6:	3708      	adds	r7, #8
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	bd80      	pop	{r7, pc}

0801c6dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c6dc:	b580      	push	{r7, lr}
 801c6de:	b084      	sub	sp, #16
 801c6e0:	af00      	add	r7, sp, #0
 801c6e2:	6078      	str	r0, [r7, #4]
 801c6e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	6839      	ldr	r1, [r7, #0]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7ee feba 	bl	800b468 <osMessagePut>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d102      	bne.n	801c700 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	73fb      	strb	r3, [r7, #15]
 801c6fe:	e001      	b.n	801c704 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c700:	23ff      	movs	r3, #255	@ 0xff
 801c702:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c708:	4618      	mov	r0, r3
 801c70a:	3710      	adds	r7, #16
 801c70c:	46bd      	mov	sp, r7
 801c70e:	bd80      	pop	{r7, pc}

0801c710 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c710:	b580      	push	{r7, lr}
 801c712:	b08c      	sub	sp, #48	@ 0x30
 801c714:	af00      	add	r7, sp, #0
 801c716:	61f8      	str	r0, [r7, #28]
 801c718:	61b9      	str	r1, [r7, #24]
 801c71a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c71c:	f7ee fca6 	bl	800b06c <osKernelSysTick>
 801c720:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d017      	beq.n	801c758 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c728:	69fb      	ldr	r3, [r7, #28]
 801c72a:	6819      	ldr	r1, [r3, #0]
 801c72c:	f107 0320 	add.w	r3, r7, #32
 801c730:	697a      	ldr	r2, [r7, #20]
 801c732:	4618      	mov	r0, r3
 801c734:	f7ee fed8 	bl	800b4e8 <osMessageGet>

    if(event.status == osEventMessage)
 801c738:	6a3b      	ldr	r3, [r7, #32]
 801c73a:	2b10      	cmp	r3, #16
 801c73c:	d109      	bne.n	801c752 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c740:	461a      	mov	r2, r3
 801c742:	69bb      	ldr	r3, [r7, #24]
 801c744:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c746:	f7ee fc91 	bl	800b06c <osKernelSysTick>
 801c74a:	4602      	mov	r2, r0
 801c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c74e:	1ad3      	subs	r3, r2, r3
 801c750:	e019      	b.n	801c786 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c752:	f04f 33ff 	mov.w	r3, #4294967295
 801c756:	e016      	b.n	801c786 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	6819      	ldr	r1, [r3, #0]
 801c75c:	463b      	mov	r3, r7
 801c75e:	f04f 32ff 	mov.w	r2, #4294967295
 801c762:	4618      	mov	r0, r3
 801c764:	f7ee fec0 	bl	800b4e8 <osMessageGet>
 801c768:	f107 0320 	add.w	r3, r7, #32
 801c76c:	463a      	mov	r2, r7
 801c76e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c776:	461a      	mov	r2, r3
 801c778:	69bb      	ldr	r3, [r7, #24]
 801c77a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c77c:	f7ee fc76 	bl	800b06c <osKernelSysTick>
 801c780:	4602      	mov	r2, r0
 801c782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c784:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c786:	4618      	mov	r0, r3
 801c788:	3730      	adds	r7, #48	@ 0x30
 801c78a:	46bd      	mov	sp, r7
 801c78c:	bd80      	pop	{r7, pc}

0801c78e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c78e:	b580      	push	{r7, lr}
 801c790:	b086      	sub	sp, #24
 801c792:	af00      	add	r7, sp, #0
 801c794:	6078      	str	r0, [r7, #4]
 801c796:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	6819      	ldr	r1, [r3, #0]
 801c79c:	f107 030c 	add.w	r3, r7, #12
 801c7a0:	2200      	movs	r2, #0
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7ee fea0 	bl	800b4e8 <osMessageGet>

  if(event.status == osEventMessage)
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	2b10      	cmp	r3, #16
 801c7ac:	d105      	bne.n	801c7ba <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c7ae:	693b      	ldr	r3, [r7, #16]
 801c7b0:	461a      	mov	r2, r3
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	e001      	b.n	801c7be <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c7ba:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c7be:	4618      	mov	r0, r3
 801c7c0:	3718      	adds	r7, #24
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd80      	pop	{r7, pc}

0801c7c6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c7c6:	b480      	push	{r7}
 801c7c8:	b083      	sub	sp, #12
 801c7ca:	af00      	add	r7, sp, #0
 801c7cc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d101      	bne.n	801c7da <sys_mbox_valid+0x14>
    return 0;
 801c7d6:	2300      	movs	r3, #0
 801c7d8:	e000      	b.n	801c7dc <sys_mbox_valid+0x16>
  else
    return 1;
 801c7da:	2301      	movs	r3, #1
}
 801c7dc:	4618      	mov	r0, r3
 801c7de:	370c      	adds	r7, #12
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7e6:	4770      	bx	lr

0801c7e8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c7e8:	b480      	push	{r7}
 801c7ea:	b083      	sub	sp, #12
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	601a      	str	r2, [r3, #0]
}
 801c7f6:	bf00      	nop
 801c7f8:	370c      	adds	r7, #12
 801c7fa:	46bd      	mov	sp, r7
 801c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c800:	4770      	bx	lr

0801c802 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c802:	b580      	push	{r7, lr}
 801c804:	b084      	sub	sp, #16
 801c806:	af00      	add	r7, sp, #0
 801c808:	6078      	str	r0, [r7, #4]
 801c80a:	460b      	mov	r3, r1
 801c80c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c80e:	2300      	movs	r3, #0
 801c810:	60bb      	str	r3, [r7, #8]
 801c812:	2300      	movs	r3, #0
 801c814:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c816:	f107 0308 	add.w	r3, r7, #8
 801c81a:	2101      	movs	r1, #1
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7ee fd31 	bl	800b284 <osSemaphoreCreate>
 801c822:	4602      	mov	r2, r0
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d102      	bne.n	801c836 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c830:	f04f 33ff 	mov.w	r3, #4294967295
 801c834:	e009      	b.n	801c84a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c836:	78fb      	ldrb	r3, [r7, #3]
 801c838:	2b00      	cmp	r3, #0
 801c83a:	d105      	bne.n	801c848 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	2100      	movs	r1, #0
 801c842:	4618      	mov	r0, r3
 801c844:	f7ee fd50 	bl	800b2e8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c848:	2300      	movs	r3, #0
}
 801c84a:	4618      	mov	r0, r3
 801c84c:	3710      	adds	r7, #16
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd80      	pop	{r7, pc}

0801c852 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c852:	b580      	push	{r7, lr}
 801c854:	b084      	sub	sp, #16
 801c856:	af00      	add	r7, sp, #0
 801c858:	6078      	str	r0, [r7, #4]
 801c85a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c85c:	f7ee fc06 	bl	800b06c <osKernelSysTick>
 801c860:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c862:	683b      	ldr	r3, [r7, #0]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d011      	beq.n	801c88c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	6839      	ldr	r1, [r7, #0]
 801c86e:	4618      	mov	r0, r3
 801c870:	f7ee fd3a 	bl	800b2e8 <osSemaphoreWait>
 801c874:	4603      	mov	r3, r0
 801c876:	2b00      	cmp	r3, #0
 801c878:	d105      	bne.n	801c886 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c87a:	f7ee fbf7 	bl	800b06c <osKernelSysTick>
 801c87e:	4602      	mov	r2, r0
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	1ad3      	subs	r3, r2, r3
 801c884:	e012      	b.n	801c8ac <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c886:	f04f 33ff 	mov.w	r3, #4294967295
 801c88a:	e00f      	b.n	801c8ac <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c88c:	bf00      	nop
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	f04f 31ff 	mov.w	r1, #4294967295
 801c896:	4618      	mov	r0, r3
 801c898:	f7ee fd26 	bl	800b2e8 <osSemaphoreWait>
 801c89c:	4603      	mov	r3, r0
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d1f5      	bne.n	801c88e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c8a2:	f7ee fbe3 	bl	800b06c <osKernelSysTick>
 801c8a6:	4602      	mov	r2, r0
 801c8a8:	68fb      	ldr	r3, [r7, #12]
 801c8aa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c8ac:	4618      	mov	r0, r3
 801c8ae:	3710      	adds	r7, #16
 801c8b0:	46bd      	mov	sp, r7
 801c8b2:	bd80      	pop	{r7, pc}

0801c8b4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b082      	sub	sp, #8
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f7ee fd5f 	bl	800b384 <osSemaphoreRelease>
}
 801c8c6:	bf00      	nop
 801c8c8:	3708      	adds	r7, #8
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	bd80      	pop	{r7, pc}

0801c8ce <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c8ce:	b580      	push	{r7, lr}
 801c8d0:	b082      	sub	sp, #8
 801c8d2:	af00      	add	r7, sp, #0
 801c8d4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	4618      	mov	r0, r3
 801c8dc:	f7ee fd88 	bl	800b3f0 <osSemaphoreDelete>
}
 801c8e0:	bf00      	nop
 801c8e2:	3708      	adds	r7, #8
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd80      	pop	{r7, pc}

0801c8e8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c8e8:	b480      	push	{r7}
 801c8ea:	b083      	sub	sp, #12
 801c8ec:	af00      	add	r7, sp, #0
 801c8ee:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d101      	bne.n	801c8fc <sys_sem_valid+0x14>
    return 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	e000      	b.n	801c8fe <sys_sem_valid+0x16>
  else
    return 1;
 801c8fc:	2301      	movs	r3, #1
}
 801c8fe:	4618      	mov	r0, r3
 801c900:	370c      	adds	r7, #12
 801c902:	46bd      	mov	sp, r7
 801c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c908:	4770      	bx	lr

0801c90a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c90a:	b480      	push	{r7}
 801c90c:	b083      	sub	sp, #12
 801c90e:	af00      	add	r7, sp, #0
 801c910:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	2200      	movs	r2, #0
 801c916:	601a      	str	r2, [r3, #0]
}
 801c918:	bf00      	nop
 801c91a:	370c      	adds	r7, #12
 801c91c:	46bd      	mov	sp, r7
 801c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c922:	4770      	bx	lr

0801c924 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c924:	b580      	push	{r7, lr}
 801c926:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c928:	4803      	ldr	r0, [pc, #12]	@ (801c938 <sys_init+0x14>)
 801c92a:	f7ee fc0f 	bl	800b14c <osMutexCreate>
 801c92e:	4603      	mov	r3, r0
 801c930:	4a02      	ldr	r2, [pc, #8]	@ (801c93c <sys_init+0x18>)
 801c932:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c934:	bf00      	nop
 801c936:	bd80      	pop	{r7, pc}
 801c938:	08024a90 	.word	0x08024a90
 801c93c:	2000f4f0 	.word	0x2000f4f0

0801c940 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c940:	b580      	push	{r7, lr}
 801c942:	b084      	sub	sp, #16
 801c944:	af00      	add	r7, sp, #0
 801c946:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c948:	2300      	movs	r3, #0
 801c94a:	60bb      	str	r3, [r7, #8]
 801c94c:	2300      	movs	r3, #0
 801c94e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c950:	f107 0308 	add.w	r3, r7, #8
 801c954:	4618      	mov	r0, r3
 801c956:	f7ee fbf9 	bl	800b14c <osMutexCreate>
 801c95a:	4602      	mov	r2, r0
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	2b00      	cmp	r3, #0
 801c966:	d102      	bne.n	801c96e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c968:	f04f 33ff 	mov.w	r3, #4294967295
 801c96c:	e000      	b.n	801c970 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c96e:	2300      	movs	r3, #0
}
 801c970:	4618      	mov	r0, r3
 801c972:	3710      	adds	r7, #16
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}

0801c978 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b082      	sub	sp, #8
 801c97c:	af00      	add	r7, sp, #0
 801c97e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	f04f 31ff 	mov.w	r1, #4294967295
 801c988:	4618      	mov	r0, r3
 801c98a:	f7ee fbf7 	bl	800b17c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c98e:	bf00      	nop
 801c990:	3708      	adds	r7, #8
 801c992:	46bd      	mov	sp, r7
 801c994:	bd80      	pop	{r7, pc}

0801c996 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c996:	b580      	push	{r7, lr}
 801c998:	b082      	sub	sp, #8
 801c99a:	af00      	add	r7, sp, #0
 801c99c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7ee fc38 	bl	800b218 <osMutexRelease>
}
 801c9a8:	bf00      	nop
 801c9aa:	3708      	adds	r7, #8
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b08c      	sub	sp, #48	@ 0x30
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	60f8      	str	r0, [r7, #12]
 801c9b8:	60b9      	str	r1, [r7, #8]
 801c9ba:	607a      	str	r2, [r7, #4]
 801c9bc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c9be:	f107 0314 	add.w	r3, r7, #20
 801c9c2:	2200      	movs	r2, #0
 801c9c4:	601a      	str	r2, [r3, #0]
 801c9c6:	605a      	str	r2, [r3, #4]
 801c9c8:	609a      	str	r2, [r3, #8]
 801c9ca:	60da      	str	r2, [r3, #12]
 801c9cc:	611a      	str	r2, [r3, #16]
 801c9ce:	615a      	str	r2, [r3, #20]
 801c9d0:	619a      	str	r2, [r3, #24]
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	617b      	str	r3, [r7, #20]
 801c9d6:	68bb      	ldr	r3, [r7, #8]
 801c9d8:	61bb      	str	r3, [r7, #24]
 801c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9dc:	b21b      	sxth	r3, r3
 801c9de:	83bb      	strh	r3, [r7, #28]
 801c9e0:	683b      	ldr	r3, [r7, #0]
 801c9e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c9e4:	f107 0314 	add.w	r3, r7, #20
 801c9e8:	6879      	ldr	r1, [r7, #4]
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7ee fb4e 	bl	800b08c <osThreadCreate>
 801c9f0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c9f2:	4618      	mov	r0, r3
 801c9f4:	3730      	adds	r7, #48	@ 0x30
 801c9f6:	46bd      	mov	sp, r7
 801c9f8:	bd80      	pop	{r7, pc}
	...

0801c9fc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ca00:	4b04      	ldr	r3, [pc, #16]	@ (801ca14 <sys_arch_protect+0x18>)
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	f04f 31ff 	mov.w	r1, #4294967295
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7ee fbb7 	bl	800b17c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ca0e:	2301      	movs	r3, #1
}
 801ca10:	4618      	mov	r0, r3
 801ca12:	bd80      	pop	{r7, pc}
 801ca14:	2000f4f0 	.word	0x2000f4f0

0801ca18 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b082      	sub	sp, #8
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ca20:	4b04      	ldr	r3, [pc, #16]	@ (801ca34 <sys_arch_unprotect+0x1c>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7ee fbf7 	bl	800b218 <osMutexRelease>
}
 801ca2a:	bf00      	nop
 801ca2c:	3708      	adds	r7, #8
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	bd80      	pop	{r7, pc}
 801ca32:	bf00      	nop
 801ca34:	2000f4f0 	.word	0x2000f4f0

0801ca38 <rand>:
 801ca38:	4b16      	ldr	r3, [pc, #88]	@ (801ca94 <rand+0x5c>)
 801ca3a:	b510      	push	{r4, lr}
 801ca3c:	681c      	ldr	r4, [r3, #0]
 801ca3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ca40:	b9b3      	cbnz	r3, 801ca70 <rand+0x38>
 801ca42:	2018      	movs	r0, #24
 801ca44:	f001 fda2 	bl	801e58c <malloc>
 801ca48:	4602      	mov	r2, r0
 801ca4a:	6320      	str	r0, [r4, #48]	@ 0x30
 801ca4c:	b920      	cbnz	r0, 801ca58 <rand+0x20>
 801ca4e:	4b12      	ldr	r3, [pc, #72]	@ (801ca98 <rand+0x60>)
 801ca50:	4812      	ldr	r0, [pc, #72]	@ (801ca9c <rand+0x64>)
 801ca52:	2152      	movs	r1, #82	@ 0x52
 801ca54:	f000 fee4 	bl	801d820 <__assert_func>
 801ca58:	4911      	ldr	r1, [pc, #68]	@ (801caa0 <rand+0x68>)
 801ca5a:	4b12      	ldr	r3, [pc, #72]	@ (801caa4 <rand+0x6c>)
 801ca5c:	e9c0 1300 	strd	r1, r3, [r0]
 801ca60:	4b11      	ldr	r3, [pc, #68]	@ (801caa8 <rand+0x70>)
 801ca62:	6083      	str	r3, [r0, #8]
 801ca64:	230b      	movs	r3, #11
 801ca66:	8183      	strh	r3, [r0, #12]
 801ca68:	2100      	movs	r1, #0
 801ca6a:	2001      	movs	r0, #1
 801ca6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ca70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ca72:	480e      	ldr	r0, [pc, #56]	@ (801caac <rand+0x74>)
 801ca74:	690b      	ldr	r3, [r1, #16]
 801ca76:	694c      	ldr	r4, [r1, #20]
 801ca78:	4a0d      	ldr	r2, [pc, #52]	@ (801cab0 <rand+0x78>)
 801ca7a:	4358      	muls	r0, r3
 801ca7c:	fb02 0004 	mla	r0, r2, r4, r0
 801ca80:	fba3 3202 	umull	r3, r2, r3, r2
 801ca84:	3301      	adds	r3, #1
 801ca86:	eb40 0002 	adc.w	r0, r0, r2
 801ca8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ca8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ca92:	bd10      	pop	{r4, pc}
 801ca94:	20000094 	.word	0x20000094
 801ca98:	08024a98 	.word	0x08024a98
 801ca9c:	08024aaf 	.word	0x08024aaf
 801caa0:	abcd330e 	.word	0xabcd330e
 801caa4:	e66d1234 	.word	0xe66d1234
 801caa8:	0005deec 	.word	0x0005deec
 801caac:	5851f42d 	.word	0x5851f42d
 801cab0:	4c957f2d 	.word	0x4c957f2d

0801cab4 <__cvt>:
 801cab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cab8:	ec57 6b10 	vmov	r6, r7, d0
 801cabc:	2f00      	cmp	r7, #0
 801cabe:	460c      	mov	r4, r1
 801cac0:	4619      	mov	r1, r3
 801cac2:	463b      	mov	r3, r7
 801cac4:	bfbb      	ittet	lt
 801cac6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801caca:	461f      	movlt	r7, r3
 801cacc:	2300      	movge	r3, #0
 801cace:	232d      	movlt	r3, #45	@ 0x2d
 801cad0:	700b      	strb	r3, [r1, #0]
 801cad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cad4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cad8:	4691      	mov	r9, r2
 801cada:	f023 0820 	bic.w	r8, r3, #32
 801cade:	bfbc      	itt	lt
 801cae0:	4632      	movlt	r2, r6
 801cae2:	4616      	movlt	r6, r2
 801cae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cae8:	d005      	beq.n	801caf6 <__cvt+0x42>
 801caea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801caee:	d100      	bne.n	801caf2 <__cvt+0x3e>
 801caf0:	3401      	adds	r4, #1
 801caf2:	2102      	movs	r1, #2
 801caf4:	e000      	b.n	801caf8 <__cvt+0x44>
 801caf6:	2103      	movs	r1, #3
 801caf8:	ab03      	add	r3, sp, #12
 801cafa:	9301      	str	r3, [sp, #4]
 801cafc:	ab02      	add	r3, sp, #8
 801cafe:	9300      	str	r3, [sp, #0]
 801cb00:	ec47 6b10 	vmov	d0, r6, r7
 801cb04:	4653      	mov	r3, sl
 801cb06:	4622      	mov	r2, r4
 801cb08:	f000 ff32 	bl	801d970 <_dtoa_r>
 801cb0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cb10:	4605      	mov	r5, r0
 801cb12:	d119      	bne.n	801cb48 <__cvt+0x94>
 801cb14:	f019 0f01 	tst.w	r9, #1
 801cb18:	d00e      	beq.n	801cb38 <__cvt+0x84>
 801cb1a:	eb00 0904 	add.w	r9, r0, r4
 801cb1e:	2200      	movs	r2, #0
 801cb20:	2300      	movs	r3, #0
 801cb22:	4630      	mov	r0, r6
 801cb24:	4639      	mov	r1, r7
 801cb26:	f7e3 ffff 	bl	8000b28 <__aeabi_dcmpeq>
 801cb2a:	b108      	cbz	r0, 801cb30 <__cvt+0x7c>
 801cb2c:	f8cd 900c 	str.w	r9, [sp, #12]
 801cb30:	2230      	movs	r2, #48	@ 0x30
 801cb32:	9b03      	ldr	r3, [sp, #12]
 801cb34:	454b      	cmp	r3, r9
 801cb36:	d31e      	bcc.n	801cb76 <__cvt+0xc2>
 801cb38:	9b03      	ldr	r3, [sp, #12]
 801cb3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb3c:	1b5b      	subs	r3, r3, r5
 801cb3e:	4628      	mov	r0, r5
 801cb40:	6013      	str	r3, [r2, #0]
 801cb42:	b004      	add	sp, #16
 801cb44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cb4c:	eb00 0904 	add.w	r9, r0, r4
 801cb50:	d1e5      	bne.n	801cb1e <__cvt+0x6a>
 801cb52:	7803      	ldrb	r3, [r0, #0]
 801cb54:	2b30      	cmp	r3, #48	@ 0x30
 801cb56:	d10a      	bne.n	801cb6e <__cvt+0xba>
 801cb58:	2200      	movs	r2, #0
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	4630      	mov	r0, r6
 801cb5e:	4639      	mov	r1, r7
 801cb60:	f7e3 ffe2 	bl	8000b28 <__aeabi_dcmpeq>
 801cb64:	b918      	cbnz	r0, 801cb6e <__cvt+0xba>
 801cb66:	f1c4 0401 	rsb	r4, r4, #1
 801cb6a:	f8ca 4000 	str.w	r4, [sl]
 801cb6e:	f8da 3000 	ldr.w	r3, [sl]
 801cb72:	4499      	add	r9, r3
 801cb74:	e7d3      	b.n	801cb1e <__cvt+0x6a>
 801cb76:	1c59      	adds	r1, r3, #1
 801cb78:	9103      	str	r1, [sp, #12]
 801cb7a:	701a      	strb	r2, [r3, #0]
 801cb7c:	e7d9      	b.n	801cb32 <__cvt+0x7e>

0801cb7e <__exponent>:
 801cb7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb80:	2900      	cmp	r1, #0
 801cb82:	bfba      	itte	lt
 801cb84:	4249      	neglt	r1, r1
 801cb86:	232d      	movlt	r3, #45	@ 0x2d
 801cb88:	232b      	movge	r3, #43	@ 0x2b
 801cb8a:	2909      	cmp	r1, #9
 801cb8c:	7002      	strb	r2, [r0, #0]
 801cb8e:	7043      	strb	r3, [r0, #1]
 801cb90:	dd29      	ble.n	801cbe6 <__exponent+0x68>
 801cb92:	f10d 0307 	add.w	r3, sp, #7
 801cb96:	461d      	mov	r5, r3
 801cb98:	270a      	movs	r7, #10
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	fbb1 f6f7 	udiv	r6, r1, r7
 801cba0:	fb07 1416 	mls	r4, r7, r6, r1
 801cba4:	3430      	adds	r4, #48	@ 0x30
 801cba6:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cbaa:	460c      	mov	r4, r1
 801cbac:	2c63      	cmp	r4, #99	@ 0x63
 801cbae:	f103 33ff 	add.w	r3, r3, #4294967295
 801cbb2:	4631      	mov	r1, r6
 801cbb4:	dcf1      	bgt.n	801cb9a <__exponent+0x1c>
 801cbb6:	3130      	adds	r1, #48	@ 0x30
 801cbb8:	1e94      	subs	r4, r2, #2
 801cbba:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cbbe:	1c41      	adds	r1, r0, #1
 801cbc0:	4623      	mov	r3, r4
 801cbc2:	42ab      	cmp	r3, r5
 801cbc4:	d30a      	bcc.n	801cbdc <__exponent+0x5e>
 801cbc6:	f10d 0309 	add.w	r3, sp, #9
 801cbca:	1a9b      	subs	r3, r3, r2
 801cbcc:	42ac      	cmp	r4, r5
 801cbce:	bf88      	it	hi
 801cbd0:	2300      	movhi	r3, #0
 801cbd2:	3302      	adds	r3, #2
 801cbd4:	4403      	add	r3, r0
 801cbd6:	1a18      	subs	r0, r3, r0
 801cbd8:	b003      	add	sp, #12
 801cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cbe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cbe4:	e7ed      	b.n	801cbc2 <__exponent+0x44>
 801cbe6:	2330      	movs	r3, #48	@ 0x30
 801cbe8:	3130      	adds	r1, #48	@ 0x30
 801cbea:	7083      	strb	r3, [r0, #2]
 801cbec:	70c1      	strb	r1, [r0, #3]
 801cbee:	1d03      	adds	r3, r0, #4
 801cbf0:	e7f1      	b.n	801cbd6 <__exponent+0x58>
	...

0801cbf4 <_printf_float>:
 801cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbf8:	b08d      	sub	sp, #52	@ 0x34
 801cbfa:	460c      	mov	r4, r1
 801cbfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cc00:	4616      	mov	r6, r2
 801cc02:	461f      	mov	r7, r3
 801cc04:	4605      	mov	r5, r0
 801cc06:	f000 fd35 	bl	801d674 <_localeconv_r>
 801cc0a:	6803      	ldr	r3, [r0, #0]
 801cc0c:	9304      	str	r3, [sp, #16]
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f7e3 fb5e 	bl	80002d0 <strlen>
 801cc14:	2300      	movs	r3, #0
 801cc16:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc18:	f8d8 3000 	ldr.w	r3, [r8]
 801cc1c:	9005      	str	r0, [sp, #20]
 801cc1e:	3307      	adds	r3, #7
 801cc20:	f023 0307 	bic.w	r3, r3, #7
 801cc24:	f103 0208 	add.w	r2, r3, #8
 801cc28:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cc2c:	f8d4 b000 	ldr.w	fp, [r4]
 801cc30:	f8c8 2000 	str.w	r2, [r8]
 801cc34:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cc38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cc3c:	9307      	str	r3, [sp, #28]
 801cc3e:	f8cd 8018 	str.w	r8, [sp, #24]
 801cc42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cc46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc4a:	4b9c      	ldr	r3, [pc, #624]	@ (801cebc <_printf_float+0x2c8>)
 801cc4c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc50:	f7e3 ff9c 	bl	8000b8c <__aeabi_dcmpun>
 801cc54:	bb70      	cbnz	r0, 801ccb4 <_printf_float+0xc0>
 801cc56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc5a:	4b98      	ldr	r3, [pc, #608]	@ (801cebc <_printf_float+0x2c8>)
 801cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc60:	f7e3 ff76 	bl	8000b50 <__aeabi_dcmple>
 801cc64:	bb30      	cbnz	r0, 801ccb4 <_printf_float+0xc0>
 801cc66:	2200      	movs	r2, #0
 801cc68:	2300      	movs	r3, #0
 801cc6a:	4640      	mov	r0, r8
 801cc6c:	4649      	mov	r1, r9
 801cc6e:	f7e3 ff65 	bl	8000b3c <__aeabi_dcmplt>
 801cc72:	b110      	cbz	r0, 801cc7a <_printf_float+0x86>
 801cc74:	232d      	movs	r3, #45	@ 0x2d
 801cc76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc7a:	4a91      	ldr	r2, [pc, #580]	@ (801cec0 <_printf_float+0x2cc>)
 801cc7c:	4b91      	ldr	r3, [pc, #580]	@ (801cec4 <_printf_float+0x2d0>)
 801cc7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cc82:	bf94      	ite	ls
 801cc84:	4690      	movls	r8, r2
 801cc86:	4698      	movhi	r8, r3
 801cc88:	2303      	movs	r3, #3
 801cc8a:	6123      	str	r3, [r4, #16]
 801cc8c:	f02b 0304 	bic.w	r3, fp, #4
 801cc90:	6023      	str	r3, [r4, #0]
 801cc92:	f04f 0900 	mov.w	r9, #0
 801cc96:	9700      	str	r7, [sp, #0]
 801cc98:	4633      	mov	r3, r6
 801cc9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cc9c:	4621      	mov	r1, r4
 801cc9e:	4628      	mov	r0, r5
 801cca0:	f000 f9d2 	bl	801d048 <_printf_common>
 801cca4:	3001      	adds	r0, #1
 801cca6:	f040 808d 	bne.w	801cdc4 <_printf_float+0x1d0>
 801ccaa:	f04f 30ff 	mov.w	r0, #4294967295
 801ccae:	b00d      	add	sp, #52	@ 0x34
 801ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccb4:	4642      	mov	r2, r8
 801ccb6:	464b      	mov	r3, r9
 801ccb8:	4640      	mov	r0, r8
 801ccba:	4649      	mov	r1, r9
 801ccbc:	f7e3 ff66 	bl	8000b8c <__aeabi_dcmpun>
 801ccc0:	b140      	cbz	r0, 801ccd4 <_printf_float+0xe0>
 801ccc2:	464b      	mov	r3, r9
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	bfbc      	itt	lt
 801ccc8:	232d      	movlt	r3, #45	@ 0x2d
 801ccca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ccce:	4a7e      	ldr	r2, [pc, #504]	@ (801cec8 <_printf_float+0x2d4>)
 801ccd0:	4b7e      	ldr	r3, [pc, #504]	@ (801cecc <_printf_float+0x2d8>)
 801ccd2:	e7d4      	b.n	801cc7e <_printf_float+0x8a>
 801ccd4:	6863      	ldr	r3, [r4, #4]
 801ccd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801ccda:	9206      	str	r2, [sp, #24]
 801ccdc:	1c5a      	adds	r2, r3, #1
 801ccde:	d13b      	bne.n	801cd58 <_printf_float+0x164>
 801cce0:	2306      	movs	r3, #6
 801cce2:	6063      	str	r3, [r4, #4]
 801cce4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801cce8:	2300      	movs	r3, #0
 801ccea:	6022      	str	r2, [r4, #0]
 801ccec:	9303      	str	r3, [sp, #12]
 801ccee:	ab0a      	add	r3, sp, #40	@ 0x28
 801ccf0:	e9cd a301 	strd	sl, r3, [sp, #4]
 801ccf4:	ab09      	add	r3, sp, #36	@ 0x24
 801ccf6:	9300      	str	r3, [sp, #0]
 801ccf8:	6861      	ldr	r1, [r4, #4]
 801ccfa:	ec49 8b10 	vmov	d0, r8, r9
 801ccfe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cd02:	4628      	mov	r0, r5
 801cd04:	f7ff fed6 	bl	801cab4 <__cvt>
 801cd08:	9b06      	ldr	r3, [sp, #24]
 801cd0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cd0c:	2b47      	cmp	r3, #71	@ 0x47
 801cd0e:	4680      	mov	r8, r0
 801cd10:	d129      	bne.n	801cd66 <_printf_float+0x172>
 801cd12:	1cc8      	adds	r0, r1, #3
 801cd14:	db02      	blt.n	801cd1c <_printf_float+0x128>
 801cd16:	6863      	ldr	r3, [r4, #4]
 801cd18:	4299      	cmp	r1, r3
 801cd1a:	dd41      	ble.n	801cda0 <_printf_float+0x1ac>
 801cd1c:	f1aa 0a02 	sub.w	sl, sl, #2
 801cd20:	fa5f fa8a 	uxtb.w	sl, sl
 801cd24:	3901      	subs	r1, #1
 801cd26:	4652      	mov	r2, sl
 801cd28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cd2c:	9109      	str	r1, [sp, #36]	@ 0x24
 801cd2e:	f7ff ff26 	bl	801cb7e <__exponent>
 801cd32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd34:	1813      	adds	r3, r2, r0
 801cd36:	2a01      	cmp	r2, #1
 801cd38:	4681      	mov	r9, r0
 801cd3a:	6123      	str	r3, [r4, #16]
 801cd3c:	dc02      	bgt.n	801cd44 <_printf_float+0x150>
 801cd3e:	6822      	ldr	r2, [r4, #0]
 801cd40:	07d2      	lsls	r2, r2, #31
 801cd42:	d501      	bpl.n	801cd48 <_printf_float+0x154>
 801cd44:	3301      	adds	r3, #1
 801cd46:	6123      	str	r3, [r4, #16]
 801cd48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d0a2      	beq.n	801cc96 <_printf_float+0xa2>
 801cd50:	232d      	movs	r3, #45	@ 0x2d
 801cd52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cd56:	e79e      	b.n	801cc96 <_printf_float+0xa2>
 801cd58:	9a06      	ldr	r2, [sp, #24]
 801cd5a:	2a47      	cmp	r2, #71	@ 0x47
 801cd5c:	d1c2      	bne.n	801cce4 <_printf_float+0xf0>
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d1c0      	bne.n	801cce4 <_printf_float+0xf0>
 801cd62:	2301      	movs	r3, #1
 801cd64:	e7bd      	b.n	801cce2 <_printf_float+0xee>
 801cd66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cd6a:	d9db      	bls.n	801cd24 <_printf_float+0x130>
 801cd6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cd70:	d118      	bne.n	801cda4 <_printf_float+0x1b0>
 801cd72:	2900      	cmp	r1, #0
 801cd74:	6863      	ldr	r3, [r4, #4]
 801cd76:	dd0b      	ble.n	801cd90 <_printf_float+0x19c>
 801cd78:	6121      	str	r1, [r4, #16]
 801cd7a:	b913      	cbnz	r3, 801cd82 <_printf_float+0x18e>
 801cd7c:	6822      	ldr	r2, [r4, #0]
 801cd7e:	07d0      	lsls	r0, r2, #31
 801cd80:	d502      	bpl.n	801cd88 <_printf_float+0x194>
 801cd82:	3301      	adds	r3, #1
 801cd84:	440b      	add	r3, r1
 801cd86:	6123      	str	r3, [r4, #16]
 801cd88:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cd8a:	f04f 0900 	mov.w	r9, #0
 801cd8e:	e7db      	b.n	801cd48 <_printf_float+0x154>
 801cd90:	b913      	cbnz	r3, 801cd98 <_printf_float+0x1a4>
 801cd92:	6822      	ldr	r2, [r4, #0]
 801cd94:	07d2      	lsls	r2, r2, #31
 801cd96:	d501      	bpl.n	801cd9c <_printf_float+0x1a8>
 801cd98:	3302      	adds	r3, #2
 801cd9a:	e7f4      	b.n	801cd86 <_printf_float+0x192>
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	e7f2      	b.n	801cd86 <_printf_float+0x192>
 801cda0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801cda4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cda6:	4299      	cmp	r1, r3
 801cda8:	db05      	blt.n	801cdb6 <_printf_float+0x1c2>
 801cdaa:	6823      	ldr	r3, [r4, #0]
 801cdac:	6121      	str	r1, [r4, #16]
 801cdae:	07d8      	lsls	r0, r3, #31
 801cdb0:	d5ea      	bpl.n	801cd88 <_printf_float+0x194>
 801cdb2:	1c4b      	adds	r3, r1, #1
 801cdb4:	e7e7      	b.n	801cd86 <_printf_float+0x192>
 801cdb6:	2900      	cmp	r1, #0
 801cdb8:	bfd4      	ite	le
 801cdba:	f1c1 0202 	rsble	r2, r1, #2
 801cdbe:	2201      	movgt	r2, #1
 801cdc0:	4413      	add	r3, r2
 801cdc2:	e7e0      	b.n	801cd86 <_printf_float+0x192>
 801cdc4:	6823      	ldr	r3, [r4, #0]
 801cdc6:	055a      	lsls	r2, r3, #21
 801cdc8:	d407      	bmi.n	801cdda <_printf_float+0x1e6>
 801cdca:	6923      	ldr	r3, [r4, #16]
 801cdcc:	4642      	mov	r2, r8
 801cdce:	4631      	mov	r1, r6
 801cdd0:	4628      	mov	r0, r5
 801cdd2:	47b8      	blx	r7
 801cdd4:	3001      	adds	r0, #1
 801cdd6:	d12b      	bne.n	801ce30 <_printf_float+0x23c>
 801cdd8:	e767      	b.n	801ccaa <_printf_float+0xb6>
 801cdda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cdde:	f240 80dd 	bls.w	801cf9c <_printf_float+0x3a8>
 801cde2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cde6:	2200      	movs	r2, #0
 801cde8:	2300      	movs	r3, #0
 801cdea:	f7e3 fe9d 	bl	8000b28 <__aeabi_dcmpeq>
 801cdee:	2800      	cmp	r0, #0
 801cdf0:	d033      	beq.n	801ce5a <_printf_float+0x266>
 801cdf2:	4a37      	ldr	r2, [pc, #220]	@ (801ced0 <_printf_float+0x2dc>)
 801cdf4:	2301      	movs	r3, #1
 801cdf6:	4631      	mov	r1, r6
 801cdf8:	4628      	mov	r0, r5
 801cdfa:	47b8      	blx	r7
 801cdfc:	3001      	adds	r0, #1
 801cdfe:	f43f af54 	beq.w	801ccaa <_printf_float+0xb6>
 801ce02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ce06:	4543      	cmp	r3, r8
 801ce08:	db02      	blt.n	801ce10 <_printf_float+0x21c>
 801ce0a:	6823      	ldr	r3, [r4, #0]
 801ce0c:	07d8      	lsls	r0, r3, #31
 801ce0e:	d50f      	bpl.n	801ce30 <_printf_float+0x23c>
 801ce10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce14:	4631      	mov	r1, r6
 801ce16:	4628      	mov	r0, r5
 801ce18:	47b8      	blx	r7
 801ce1a:	3001      	adds	r0, #1
 801ce1c:	f43f af45 	beq.w	801ccaa <_printf_float+0xb6>
 801ce20:	f04f 0900 	mov.w	r9, #0
 801ce24:	f108 38ff 	add.w	r8, r8, #4294967295
 801ce28:	f104 0a1a 	add.w	sl, r4, #26
 801ce2c:	45c8      	cmp	r8, r9
 801ce2e:	dc09      	bgt.n	801ce44 <_printf_float+0x250>
 801ce30:	6823      	ldr	r3, [r4, #0]
 801ce32:	079b      	lsls	r3, r3, #30
 801ce34:	f100 8103 	bmi.w	801d03e <_printf_float+0x44a>
 801ce38:	68e0      	ldr	r0, [r4, #12]
 801ce3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce3c:	4298      	cmp	r0, r3
 801ce3e:	bfb8      	it	lt
 801ce40:	4618      	movlt	r0, r3
 801ce42:	e734      	b.n	801ccae <_printf_float+0xba>
 801ce44:	2301      	movs	r3, #1
 801ce46:	4652      	mov	r2, sl
 801ce48:	4631      	mov	r1, r6
 801ce4a:	4628      	mov	r0, r5
 801ce4c:	47b8      	blx	r7
 801ce4e:	3001      	adds	r0, #1
 801ce50:	f43f af2b 	beq.w	801ccaa <_printf_float+0xb6>
 801ce54:	f109 0901 	add.w	r9, r9, #1
 801ce58:	e7e8      	b.n	801ce2c <_printf_float+0x238>
 801ce5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	dc39      	bgt.n	801ced4 <_printf_float+0x2e0>
 801ce60:	4a1b      	ldr	r2, [pc, #108]	@ (801ced0 <_printf_float+0x2dc>)
 801ce62:	2301      	movs	r3, #1
 801ce64:	4631      	mov	r1, r6
 801ce66:	4628      	mov	r0, r5
 801ce68:	47b8      	blx	r7
 801ce6a:	3001      	adds	r0, #1
 801ce6c:	f43f af1d 	beq.w	801ccaa <_printf_float+0xb6>
 801ce70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ce74:	ea59 0303 	orrs.w	r3, r9, r3
 801ce78:	d102      	bne.n	801ce80 <_printf_float+0x28c>
 801ce7a:	6823      	ldr	r3, [r4, #0]
 801ce7c:	07d9      	lsls	r1, r3, #31
 801ce7e:	d5d7      	bpl.n	801ce30 <_printf_float+0x23c>
 801ce80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce84:	4631      	mov	r1, r6
 801ce86:	4628      	mov	r0, r5
 801ce88:	47b8      	blx	r7
 801ce8a:	3001      	adds	r0, #1
 801ce8c:	f43f af0d 	beq.w	801ccaa <_printf_float+0xb6>
 801ce90:	f04f 0a00 	mov.w	sl, #0
 801ce94:	f104 0b1a 	add.w	fp, r4, #26
 801ce98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce9a:	425b      	negs	r3, r3
 801ce9c:	4553      	cmp	r3, sl
 801ce9e:	dc01      	bgt.n	801cea4 <_printf_float+0x2b0>
 801cea0:	464b      	mov	r3, r9
 801cea2:	e793      	b.n	801cdcc <_printf_float+0x1d8>
 801cea4:	2301      	movs	r3, #1
 801cea6:	465a      	mov	r2, fp
 801cea8:	4631      	mov	r1, r6
 801ceaa:	4628      	mov	r0, r5
 801ceac:	47b8      	blx	r7
 801ceae:	3001      	adds	r0, #1
 801ceb0:	f43f aefb 	beq.w	801ccaa <_printf_float+0xb6>
 801ceb4:	f10a 0a01 	add.w	sl, sl, #1
 801ceb8:	e7ee      	b.n	801ce98 <_printf_float+0x2a4>
 801ceba:	bf00      	nop
 801cebc:	7fefffff 	.word	0x7fefffff
 801cec0:	08024c08 	.word	0x08024c08
 801cec4:	08024c0c 	.word	0x08024c0c
 801cec8:	08024c10 	.word	0x08024c10
 801cecc:	08024c14 	.word	0x08024c14
 801ced0:	08024c18 	.word	0x08024c18
 801ced4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ced6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ceda:	4553      	cmp	r3, sl
 801cedc:	bfa8      	it	ge
 801cede:	4653      	movge	r3, sl
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	4699      	mov	r9, r3
 801cee4:	dc36      	bgt.n	801cf54 <_printf_float+0x360>
 801cee6:	f04f 0b00 	mov.w	fp, #0
 801ceea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ceee:	f104 021a 	add.w	r2, r4, #26
 801cef2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801cef4:	9306      	str	r3, [sp, #24]
 801cef6:	eba3 0309 	sub.w	r3, r3, r9
 801cefa:	455b      	cmp	r3, fp
 801cefc:	dc31      	bgt.n	801cf62 <_printf_float+0x36e>
 801cefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf00:	459a      	cmp	sl, r3
 801cf02:	dc3a      	bgt.n	801cf7a <_printf_float+0x386>
 801cf04:	6823      	ldr	r3, [r4, #0]
 801cf06:	07da      	lsls	r2, r3, #31
 801cf08:	d437      	bmi.n	801cf7a <_printf_float+0x386>
 801cf0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf0c:	ebaa 0903 	sub.w	r9, sl, r3
 801cf10:	9b06      	ldr	r3, [sp, #24]
 801cf12:	ebaa 0303 	sub.w	r3, sl, r3
 801cf16:	4599      	cmp	r9, r3
 801cf18:	bfa8      	it	ge
 801cf1a:	4699      	movge	r9, r3
 801cf1c:	f1b9 0f00 	cmp.w	r9, #0
 801cf20:	dc33      	bgt.n	801cf8a <_printf_float+0x396>
 801cf22:	f04f 0800 	mov.w	r8, #0
 801cf26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf2a:	f104 0b1a 	add.w	fp, r4, #26
 801cf2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf30:	ebaa 0303 	sub.w	r3, sl, r3
 801cf34:	eba3 0309 	sub.w	r3, r3, r9
 801cf38:	4543      	cmp	r3, r8
 801cf3a:	f77f af79 	ble.w	801ce30 <_printf_float+0x23c>
 801cf3e:	2301      	movs	r3, #1
 801cf40:	465a      	mov	r2, fp
 801cf42:	4631      	mov	r1, r6
 801cf44:	4628      	mov	r0, r5
 801cf46:	47b8      	blx	r7
 801cf48:	3001      	adds	r0, #1
 801cf4a:	f43f aeae 	beq.w	801ccaa <_printf_float+0xb6>
 801cf4e:	f108 0801 	add.w	r8, r8, #1
 801cf52:	e7ec      	b.n	801cf2e <_printf_float+0x33a>
 801cf54:	4642      	mov	r2, r8
 801cf56:	4631      	mov	r1, r6
 801cf58:	4628      	mov	r0, r5
 801cf5a:	47b8      	blx	r7
 801cf5c:	3001      	adds	r0, #1
 801cf5e:	d1c2      	bne.n	801cee6 <_printf_float+0x2f2>
 801cf60:	e6a3      	b.n	801ccaa <_printf_float+0xb6>
 801cf62:	2301      	movs	r3, #1
 801cf64:	4631      	mov	r1, r6
 801cf66:	4628      	mov	r0, r5
 801cf68:	9206      	str	r2, [sp, #24]
 801cf6a:	47b8      	blx	r7
 801cf6c:	3001      	adds	r0, #1
 801cf6e:	f43f ae9c 	beq.w	801ccaa <_printf_float+0xb6>
 801cf72:	9a06      	ldr	r2, [sp, #24]
 801cf74:	f10b 0b01 	add.w	fp, fp, #1
 801cf78:	e7bb      	b.n	801cef2 <_printf_float+0x2fe>
 801cf7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf7e:	4631      	mov	r1, r6
 801cf80:	4628      	mov	r0, r5
 801cf82:	47b8      	blx	r7
 801cf84:	3001      	adds	r0, #1
 801cf86:	d1c0      	bne.n	801cf0a <_printf_float+0x316>
 801cf88:	e68f      	b.n	801ccaa <_printf_float+0xb6>
 801cf8a:	9a06      	ldr	r2, [sp, #24]
 801cf8c:	464b      	mov	r3, r9
 801cf8e:	4442      	add	r2, r8
 801cf90:	4631      	mov	r1, r6
 801cf92:	4628      	mov	r0, r5
 801cf94:	47b8      	blx	r7
 801cf96:	3001      	adds	r0, #1
 801cf98:	d1c3      	bne.n	801cf22 <_printf_float+0x32e>
 801cf9a:	e686      	b.n	801ccaa <_printf_float+0xb6>
 801cf9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cfa0:	f1ba 0f01 	cmp.w	sl, #1
 801cfa4:	dc01      	bgt.n	801cfaa <_printf_float+0x3b6>
 801cfa6:	07db      	lsls	r3, r3, #31
 801cfa8:	d536      	bpl.n	801d018 <_printf_float+0x424>
 801cfaa:	2301      	movs	r3, #1
 801cfac:	4642      	mov	r2, r8
 801cfae:	4631      	mov	r1, r6
 801cfb0:	4628      	mov	r0, r5
 801cfb2:	47b8      	blx	r7
 801cfb4:	3001      	adds	r0, #1
 801cfb6:	f43f ae78 	beq.w	801ccaa <_printf_float+0xb6>
 801cfba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cfbe:	4631      	mov	r1, r6
 801cfc0:	4628      	mov	r0, r5
 801cfc2:	47b8      	blx	r7
 801cfc4:	3001      	adds	r0, #1
 801cfc6:	f43f ae70 	beq.w	801ccaa <_printf_float+0xb6>
 801cfca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cfce:	2200      	movs	r2, #0
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cfd6:	f7e3 fda7 	bl	8000b28 <__aeabi_dcmpeq>
 801cfda:	b9c0      	cbnz	r0, 801d00e <_printf_float+0x41a>
 801cfdc:	4653      	mov	r3, sl
 801cfde:	f108 0201 	add.w	r2, r8, #1
 801cfe2:	4631      	mov	r1, r6
 801cfe4:	4628      	mov	r0, r5
 801cfe6:	47b8      	blx	r7
 801cfe8:	3001      	adds	r0, #1
 801cfea:	d10c      	bne.n	801d006 <_printf_float+0x412>
 801cfec:	e65d      	b.n	801ccaa <_printf_float+0xb6>
 801cfee:	2301      	movs	r3, #1
 801cff0:	465a      	mov	r2, fp
 801cff2:	4631      	mov	r1, r6
 801cff4:	4628      	mov	r0, r5
 801cff6:	47b8      	blx	r7
 801cff8:	3001      	adds	r0, #1
 801cffa:	f43f ae56 	beq.w	801ccaa <_printf_float+0xb6>
 801cffe:	f108 0801 	add.w	r8, r8, #1
 801d002:	45d0      	cmp	r8, sl
 801d004:	dbf3      	blt.n	801cfee <_printf_float+0x3fa>
 801d006:	464b      	mov	r3, r9
 801d008:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d00c:	e6df      	b.n	801cdce <_printf_float+0x1da>
 801d00e:	f04f 0800 	mov.w	r8, #0
 801d012:	f104 0b1a 	add.w	fp, r4, #26
 801d016:	e7f4      	b.n	801d002 <_printf_float+0x40e>
 801d018:	2301      	movs	r3, #1
 801d01a:	4642      	mov	r2, r8
 801d01c:	e7e1      	b.n	801cfe2 <_printf_float+0x3ee>
 801d01e:	2301      	movs	r3, #1
 801d020:	464a      	mov	r2, r9
 801d022:	4631      	mov	r1, r6
 801d024:	4628      	mov	r0, r5
 801d026:	47b8      	blx	r7
 801d028:	3001      	adds	r0, #1
 801d02a:	f43f ae3e 	beq.w	801ccaa <_printf_float+0xb6>
 801d02e:	f108 0801 	add.w	r8, r8, #1
 801d032:	68e3      	ldr	r3, [r4, #12]
 801d034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d036:	1a5b      	subs	r3, r3, r1
 801d038:	4543      	cmp	r3, r8
 801d03a:	dcf0      	bgt.n	801d01e <_printf_float+0x42a>
 801d03c:	e6fc      	b.n	801ce38 <_printf_float+0x244>
 801d03e:	f04f 0800 	mov.w	r8, #0
 801d042:	f104 0919 	add.w	r9, r4, #25
 801d046:	e7f4      	b.n	801d032 <_printf_float+0x43e>

0801d048 <_printf_common>:
 801d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d04c:	4616      	mov	r6, r2
 801d04e:	4698      	mov	r8, r3
 801d050:	688a      	ldr	r2, [r1, #8]
 801d052:	690b      	ldr	r3, [r1, #16]
 801d054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d058:	4293      	cmp	r3, r2
 801d05a:	bfb8      	it	lt
 801d05c:	4613      	movlt	r3, r2
 801d05e:	6033      	str	r3, [r6, #0]
 801d060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d064:	4607      	mov	r7, r0
 801d066:	460c      	mov	r4, r1
 801d068:	b10a      	cbz	r2, 801d06e <_printf_common+0x26>
 801d06a:	3301      	adds	r3, #1
 801d06c:	6033      	str	r3, [r6, #0]
 801d06e:	6823      	ldr	r3, [r4, #0]
 801d070:	0699      	lsls	r1, r3, #26
 801d072:	bf42      	ittt	mi
 801d074:	6833      	ldrmi	r3, [r6, #0]
 801d076:	3302      	addmi	r3, #2
 801d078:	6033      	strmi	r3, [r6, #0]
 801d07a:	6825      	ldr	r5, [r4, #0]
 801d07c:	f015 0506 	ands.w	r5, r5, #6
 801d080:	d106      	bne.n	801d090 <_printf_common+0x48>
 801d082:	f104 0a19 	add.w	sl, r4, #25
 801d086:	68e3      	ldr	r3, [r4, #12]
 801d088:	6832      	ldr	r2, [r6, #0]
 801d08a:	1a9b      	subs	r3, r3, r2
 801d08c:	42ab      	cmp	r3, r5
 801d08e:	dc26      	bgt.n	801d0de <_printf_common+0x96>
 801d090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d094:	6822      	ldr	r2, [r4, #0]
 801d096:	3b00      	subs	r3, #0
 801d098:	bf18      	it	ne
 801d09a:	2301      	movne	r3, #1
 801d09c:	0692      	lsls	r2, r2, #26
 801d09e:	d42b      	bmi.n	801d0f8 <_printf_common+0xb0>
 801d0a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d0a4:	4641      	mov	r1, r8
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	47c8      	blx	r9
 801d0aa:	3001      	adds	r0, #1
 801d0ac:	d01e      	beq.n	801d0ec <_printf_common+0xa4>
 801d0ae:	6823      	ldr	r3, [r4, #0]
 801d0b0:	6922      	ldr	r2, [r4, #16]
 801d0b2:	f003 0306 	and.w	r3, r3, #6
 801d0b6:	2b04      	cmp	r3, #4
 801d0b8:	bf02      	ittt	eq
 801d0ba:	68e5      	ldreq	r5, [r4, #12]
 801d0bc:	6833      	ldreq	r3, [r6, #0]
 801d0be:	1aed      	subeq	r5, r5, r3
 801d0c0:	68a3      	ldr	r3, [r4, #8]
 801d0c2:	bf0c      	ite	eq
 801d0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0c8:	2500      	movne	r5, #0
 801d0ca:	4293      	cmp	r3, r2
 801d0cc:	bfc4      	itt	gt
 801d0ce:	1a9b      	subgt	r3, r3, r2
 801d0d0:	18ed      	addgt	r5, r5, r3
 801d0d2:	2600      	movs	r6, #0
 801d0d4:	341a      	adds	r4, #26
 801d0d6:	42b5      	cmp	r5, r6
 801d0d8:	d11a      	bne.n	801d110 <_printf_common+0xc8>
 801d0da:	2000      	movs	r0, #0
 801d0dc:	e008      	b.n	801d0f0 <_printf_common+0xa8>
 801d0de:	2301      	movs	r3, #1
 801d0e0:	4652      	mov	r2, sl
 801d0e2:	4641      	mov	r1, r8
 801d0e4:	4638      	mov	r0, r7
 801d0e6:	47c8      	blx	r9
 801d0e8:	3001      	adds	r0, #1
 801d0ea:	d103      	bne.n	801d0f4 <_printf_common+0xac>
 801d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0f4:	3501      	adds	r5, #1
 801d0f6:	e7c6      	b.n	801d086 <_printf_common+0x3e>
 801d0f8:	18e1      	adds	r1, r4, r3
 801d0fa:	1c5a      	adds	r2, r3, #1
 801d0fc:	2030      	movs	r0, #48	@ 0x30
 801d0fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d102:	4422      	add	r2, r4
 801d104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d10c:	3302      	adds	r3, #2
 801d10e:	e7c7      	b.n	801d0a0 <_printf_common+0x58>
 801d110:	2301      	movs	r3, #1
 801d112:	4622      	mov	r2, r4
 801d114:	4641      	mov	r1, r8
 801d116:	4638      	mov	r0, r7
 801d118:	47c8      	blx	r9
 801d11a:	3001      	adds	r0, #1
 801d11c:	d0e6      	beq.n	801d0ec <_printf_common+0xa4>
 801d11e:	3601      	adds	r6, #1
 801d120:	e7d9      	b.n	801d0d6 <_printf_common+0x8e>
	...

0801d124 <_printf_i>:
 801d124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d128:	7e0f      	ldrb	r7, [r1, #24]
 801d12a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d12c:	2f78      	cmp	r7, #120	@ 0x78
 801d12e:	4691      	mov	r9, r2
 801d130:	4680      	mov	r8, r0
 801d132:	460c      	mov	r4, r1
 801d134:	469a      	mov	sl, r3
 801d136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d13a:	d807      	bhi.n	801d14c <_printf_i+0x28>
 801d13c:	2f62      	cmp	r7, #98	@ 0x62
 801d13e:	d80a      	bhi.n	801d156 <_printf_i+0x32>
 801d140:	2f00      	cmp	r7, #0
 801d142:	f000 80d2 	beq.w	801d2ea <_printf_i+0x1c6>
 801d146:	2f58      	cmp	r7, #88	@ 0x58
 801d148:	f000 80b9 	beq.w	801d2be <_printf_i+0x19a>
 801d14c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d154:	e03a      	b.n	801d1cc <_printf_i+0xa8>
 801d156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d15a:	2b15      	cmp	r3, #21
 801d15c:	d8f6      	bhi.n	801d14c <_printf_i+0x28>
 801d15e:	a101      	add	r1, pc, #4	@ (adr r1, 801d164 <_printf_i+0x40>)
 801d160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d164:	0801d1bd 	.word	0x0801d1bd
 801d168:	0801d1d1 	.word	0x0801d1d1
 801d16c:	0801d14d 	.word	0x0801d14d
 801d170:	0801d14d 	.word	0x0801d14d
 801d174:	0801d14d 	.word	0x0801d14d
 801d178:	0801d14d 	.word	0x0801d14d
 801d17c:	0801d1d1 	.word	0x0801d1d1
 801d180:	0801d14d 	.word	0x0801d14d
 801d184:	0801d14d 	.word	0x0801d14d
 801d188:	0801d14d 	.word	0x0801d14d
 801d18c:	0801d14d 	.word	0x0801d14d
 801d190:	0801d2d1 	.word	0x0801d2d1
 801d194:	0801d1fb 	.word	0x0801d1fb
 801d198:	0801d28b 	.word	0x0801d28b
 801d19c:	0801d14d 	.word	0x0801d14d
 801d1a0:	0801d14d 	.word	0x0801d14d
 801d1a4:	0801d2f3 	.word	0x0801d2f3
 801d1a8:	0801d14d 	.word	0x0801d14d
 801d1ac:	0801d1fb 	.word	0x0801d1fb
 801d1b0:	0801d14d 	.word	0x0801d14d
 801d1b4:	0801d14d 	.word	0x0801d14d
 801d1b8:	0801d293 	.word	0x0801d293
 801d1bc:	6833      	ldr	r3, [r6, #0]
 801d1be:	1d1a      	adds	r2, r3, #4
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	6032      	str	r2, [r6, #0]
 801d1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d1c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d1cc:	2301      	movs	r3, #1
 801d1ce:	e09d      	b.n	801d30c <_printf_i+0x1e8>
 801d1d0:	6833      	ldr	r3, [r6, #0]
 801d1d2:	6820      	ldr	r0, [r4, #0]
 801d1d4:	1d19      	adds	r1, r3, #4
 801d1d6:	6031      	str	r1, [r6, #0]
 801d1d8:	0606      	lsls	r6, r0, #24
 801d1da:	d501      	bpl.n	801d1e0 <_printf_i+0xbc>
 801d1dc:	681d      	ldr	r5, [r3, #0]
 801d1de:	e003      	b.n	801d1e8 <_printf_i+0xc4>
 801d1e0:	0645      	lsls	r5, r0, #25
 801d1e2:	d5fb      	bpl.n	801d1dc <_printf_i+0xb8>
 801d1e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d1e8:	2d00      	cmp	r5, #0
 801d1ea:	da03      	bge.n	801d1f4 <_printf_i+0xd0>
 801d1ec:	232d      	movs	r3, #45	@ 0x2d
 801d1ee:	426d      	negs	r5, r5
 801d1f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d1f4:	4859      	ldr	r0, [pc, #356]	@ (801d35c <_printf_i+0x238>)
 801d1f6:	230a      	movs	r3, #10
 801d1f8:	e011      	b.n	801d21e <_printf_i+0xfa>
 801d1fa:	6821      	ldr	r1, [r4, #0]
 801d1fc:	6833      	ldr	r3, [r6, #0]
 801d1fe:	0608      	lsls	r0, r1, #24
 801d200:	f853 5b04 	ldr.w	r5, [r3], #4
 801d204:	d402      	bmi.n	801d20c <_printf_i+0xe8>
 801d206:	0649      	lsls	r1, r1, #25
 801d208:	bf48      	it	mi
 801d20a:	b2ad      	uxthmi	r5, r5
 801d20c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d20e:	4853      	ldr	r0, [pc, #332]	@ (801d35c <_printf_i+0x238>)
 801d210:	6033      	str	r3, [r6, #0]
 801d212:	bf14      	ite	ne
 801d214:	230a      	movne	r3, #10
 801d216:	2308      	moveq	r3, #8
 801d218:	2100      	movs	r1, #0
 801d21a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d21e:	6866      	ldr	r6, [r4, #4]
 801d220:	60a6      	str	r6, [r4, #8]
 801d222:	2e00      	cmp	r6, #0
 801d224:	bfa2      	ittt	ge
 801d226:	6821      	ldrge	r1, [r4, #0]
 801d228:	f021 0104 	bicge.w	r1, r1, #4
 801d22c:	6021      	strge	r1, [r4, #0]
 801d22e:	b90d      	cbnz	r5, 801d234 <_printf_i+0x110>
 801d230:	2e00      	cmp	r6, #0
 801d232:	d04b      	beq.n	801d2cc <_printf_i+0x1a8>
 801d234:	4616      	mov	r6, r2
 801d236:	fbb5 f1f3 	udiv	r1, r5, r3
 801d23a:	fb03 5711 	mls	r7, r3, r1, r5
 801d23e:	5dc7      	ldrb	r7, [r0, r7]
 801d240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d244:	462f      	mov	r7, r5
 801d246:	42bb      	cmp	r3, r7
 801d248:	460d      	mov	r5, r1
 801d24a:	d9f4      	bls.n	801d236 <_printf_i+0x112>
 801d24c:	2b08      	cmp	r3, #8
 801d24e:	d10b      	bne.n	801d268 <_printf_i+0x144>
 801d250:	6823      	ldr	r3, [r4, #0]
 801d252:	07df      	lsls	r7, r3, #31
 801d254:	d508      	bpl.n	801d268 <_printf_i+0x144>
 801d256:	6923      	ldr	r3, [r4, #16]
 801d258:	6861      	ldr	r1, [r4, #4]
 801d25a:	4299      	cmp	r1, r3
 801d25c:	bfde      	ittt	le
 801d25e:	2330      	movle	r3, #48	@ 0x30
 801d260:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d264:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d268:	1b92      	subs	r2, r2, r6
 801d26a:	6122      	str	r2, [r4, #16]
 801d26c:	f8cd a000 	str.w	sl, [sp]
 801d270:	464b      	mov	r3, r9
 801d272:	aa03      	add	r2, sp, #12
 801d274:	4621      	mov	r1, r4
 801d276:	4640      	mov	r0, r8
 801d278:	f7ff fee6 	bl	801d048 <_printf_common>
 801d27c:	3001      	adds	r0, #1
 801d27e:	d14a      	bne.n	801d316 <_printf_i+0x1f2>
 801d280:	f04f 30ff 	mov.w	r0, #4294967295
 801d284:	b004      	add	sp, #16
 801d286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d28a:	6823      	ldr	r3, [r4, #0]
 801d28c:	f043 0320 	orr.w	r3, r3, #32
 801d290:	6023      	str	r3, [r4, #0]
 801d292:	4833      	ldr	r0, [pc, #204]	@ (801d360 <_printf_i+0x23c>)
 801d294:	2778      	movs	r7, #120	@ 0x78
 801d296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d29a:	6823      	ldr	r3, [r4, #0]
 801d29c:	6831      	ldr	r1, [r6, #0]
 801d29e:	061f      	lsls	r7, r3, #24
 801d2a0:	f851 5b04 	ldr.w	r5, [r1], #4
 801d2a4:	d402      	bmi.n	801d2ac <_printf_i+0x188>
 801d2a6:	065f      	lsls	r7, r3, #25
 801d2a8:	bf48      	it	mi
 801d2aa:	b2ad      	uxthmi	r5, r5
 801d2ac:	6031      	str	r1, [r6, #0]
 801d2ae:	07d9      	lsls	r1, r3, #31
 801d2b0:	bf44      	itt	mi
 801d2b2:	f043 0320 	orrmi.w	r3, r3, #32
 801d2b6:	6023      	strmi	r3, [r4, #0]
 801d2b8:	b11d      	cbz	r5, 801d2c2 <_printf_i+0x19e>
 801d2ba:	2310      	movs	r3, #16
 801d2bc:	e7ac      	b.n	801d218 <_printf_i+0xf4>
 801d2be:	4827      	ldr	r0, [pc, #156]	@ (801d35c <_printf_i+0x238>)
 801d2c0:	e7e9      	b.n	801d296 <_printf_i+0x172>
 801d2c2:	6823      	ldr	r3, [r4, #0]
 801d2c4:	f023 0320 	bic.w	r3, r3, #32
 801d2c8:	6023      	str	r3, [r4, #0]
 801d2ca:	e7f6      	b.n	801d2ba <_printf_i+0x196>
 801d2cc:	4616      	mov	r6, r2
 801d2ce:	e7bd      	b.n	801d24c <_printf_i+0x128>
 801d2d0:	6833      	ldr	r3, [r6, #0]
 801d2d2:	6825      	ldr	r5, [r4, #0]
 801d2d4:	6961      	ldr	r1, [r4, #20]
 801d2d6:	1d18      	adds	r0, r3, #4
 801d2d8:	6030      	str	r0, [r6, #0]
 801d2da:	062e      	lsls	r6, r5, #24
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	d501      	bpl.n	801d2e4 <_printf_i+0x1c0>
 801d2e0:	6019      	str	r1, [r3, #0]
 801d2e2:	e002      	b.n	801d2ea <_printf_i+0x1c6>
 801d2e4:	0668      	lsls	r0, r5, #25
 801d2e6:	d5fb      	bpl.n	801d2e0 <_printf_i+0x1bc>
 801d2e8:	8019      	strh	r1, [r3, #0]
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	6123      	str	r3, [r4, #16]
 801d2ee:	4616      	mov	r6, r2
 801d2f0:	e7bc      	b.n	801d26c <_printf_i+0x148>
 801d2f2:	6833      	ldr	r3, [r6, #0]
 801d2f4:	1d1a      	adds	r2, r3, #4
 801d2f6:	6032      	str	r2, [r6, #0]
 801d2f8:	681e      	ldr	r6, [r3, #0]
 801d2fa:	6862      	ldr	r2, [r4, #4]
 801d2fc:	2100      	movs	r1, #0
 801d2fe:	4630      	mov	r0, r6
 801d300:	f7e2 ff96 	bl	8000230 <memchr>
 801d304:	b108      	cbz	r0, 801d30a <_printf_i+0x1e6>
 801d306:	1b80      	subs	r0, r0, r6
 801d308:	6060      	str	r0, [r4, #4]
 801d30a:	6863      	ldr	r3, [r4, #4]
 801d30c:	6123      	str	r3, [r4, #16]
 801d30e:	2300      	movs	r3, #0
 801d310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d314:	e7aa      	b.n	801d26c <_printf_i+0x148>
 801d316:	6923      	ldr	r3, [r4, #16]
 801d318:	4632      	mov	r2, r6
 801d31a:	4649      	mov	r1, r9
 801d31c:	4640      	mov	r0, r8
 801d31e:	47d0      	blx	sl
 801d320:	3001      	adds	r0, #1
 801d322:	d0ad      	beq.n	801d280 <_printf_i+0x15c>
 801d324:	6823      	ldr	r3, [r4, #0]
 801d326:	079b      	lsls	r3, r3, #30
 801d328:	d413      	bmi.n	801d352 <_printf_i+0x22e>
 801d32a:	68e0      	ldr	r0, [r4, #12]
 801d32c:	9b03      	ldr	r3, [sp, #12]
 801d32e:	4298      	cmp	r0, r3
 801d330:	bfb8      	it	lt
 801d332:	4618      	movlt	r0, r3
 801d334:	e7a6      	b.n	801d284 <_printf_i+0x160>
 801d336:	2301      	movs	r3, #1
 801d338:	4632      	mov	r2, r6
 801d33a:	4649      	mov	r1, r9
 801d33c:	4640      	mov	r0, r8
 801d33e:	47d0      	blx	sl
 801d340:	3001      	adds	r0, #1
 801d342:	d09d      	beq.n	801d280 <_printf_i+0x15c>
 801d344:	3501      	adds	r5, #1
 801d346:	68e3      	ldr	r3, [r4, #12]
 801d348:	9903      	ldr	r1, [sp, #12]
 801d34a:	1a5b      	subs	r3, r3, r1
 801d34c:	42ab      	cmp	r3, r5
 801d34e:	dcf2      	bgt.n	801d336 <_printf_i+0x212>
 801d350:	e7eb      	b.n	801d32a <_printf_i+0x206>
 801d352:	2500      	movs	r5, #0
 801d354:	f104 0619 	add.w	r6, r4, #25
 801d358:	e7f5      	b.n	801d346 <_printf_i+0x222>
 801d35a:	bf00      	nop
 801d35c:	08024c1a 	.word	0x08024c1a
 801d360:	08024c2b 	.word	0x08024c2b

0801d364 <std>:
 801d364:	2300      	movs	r3, #0
 801d366:	b510      	push	{r4, lr}
 801d368:	4604      	mov	r4, r0
 801d36a:	e9c0 3300 	strd	r3, r3, [r0]
 801d36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d372:	6083      	str	r3, [r0, #8]
 801d374:	8181      	strh	r1, [r0, #12]
 801d376:	6643      	str	r3, [r0, #100]	@ 0x64
 801d378:	81c2      	strh	r2, [r0, #14]
 801d37a:	6183      	str	r3, [r0, #24]
 801d37c:	4619      	mov	r1, r3
 801d37e:	2208      	movs	r2, #8
 801d380:	305c      	adds	r0, #92	@ 0x5c
 801d382:	f000 f950 	bl	801d626 <memset>
 801d386:	4b0d      	ldr	r3, [pc, #52]	@ (801d3bc <std+0x58>)
 801d388:	6263      	str	r3, [r4, #36]	@ 0x24
 801d38a:	4b0d      	ldr	r3, [pc, #52]	@ (801d3c0 <std+0x5c>)
 801d38c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d38e:	4b0d      	ldr	r3, [pc, #52]	@ (801d3c4 <std+0x60>)
 801d390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d392:	4b0d      	ldr	r3, [pc, #52]	@ (801d3c8 <std+0x64>)
 801d394:	6323      	str	r3, [r4, #48]	@ 0x30
 801d396:	4b0d      	ldr	r3, [pc, #52]	@ (801d3cc <std+0x68>)
 801d398:	6224      	str	r4, [r4, #32]
 801d39a:	429c      	cmp	r4, r3
 801d39c:	d006      	beq.n	801d3ac <std+0x48>
 801d39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d3a2:	4294      	cmp	r4, r2
 801d3a4:	d002      	beq.n	801d3ac <std+0x48>
 801d3a6:	33d0      	adds	r3, #208	@ 0xd0
 801d3a8:	429c      	cmp	r4, r3
 801d3aa:	d105      	bne.n	801d3b8 <std+0x54>
 801d3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3b4:	f000 ba22 	b.w	801d7fc <__retarget_lock_init_recursive>
 801d3b8:	bd10      	pop	{r4, pc}
 801d3ba:	bf00      	nop
 801d3bc:	0801d54d 	.word	0x0801d54d
 801d3c0:	0801d56f 	.word	0x0801d56f
 801d3c4:	0801d5a7 	.word	0x0801d5a7
 801d3c8:	0801d5cb 	.word	0x0801d5cb
 801d3cc:	2000f4f4 	.word	0x2000f4f4

0801d3d0 <stdio_exit_handler>:
 801d3d0:	4a02      	ldr	r2, [pc, #8]	@ (801d3dc <stdio_exit_handler+0xc>)
 801d3d2:	4903      	ldr	r1, [pc, #12]	@ (801d3e0 <stdio_exit_handler+0x10>)
 801d3d4:	4803      	ldr	r0, [pc, #12]	@ (801d3e4 <stdio_exit_handler+0x14>)
 801d3d6:	f000 b869 	b.w	801d4ac <_fwalk_sglue>
 801d3da:	bf00      	nop
 801d3dc:	20000088 	.word	0x20000088
 801d3e0:	0801f439 	.word	0x0801f439
 801d3e4:	20000098 	.word	0x20000098

0801d3e8 <cleanup_stdio>:
 801d3e8:	6841      	ldr	r1, [r0, #4]
 801d3ea:	4b0c      	ldr	r3, [pc, #48]	@ (801d41c <cleanup_stdio+0x34>)
 801d3ec:	4299      	cmp	r1, r3
 801d3ee:	b510      	push	{r4, lr}
 801d3f0:	4604      	mov	r4, r0
 801d3f2:	d001      	beq.n	801d3f8 <cleanup_stdio+0x10>
 801d3f4:	f002 f820 	bl	801f438 <_fflush_r>
 801d3f8:	68a1      	ldr	r1, [r4, #8]
 801d3fa:	4b09      	ldr	r3, [pc, #36]	@ (801d420 <cleanup_stdio+0x38>)
 801d3fc:	4299      	cmp	r1, r3
 801d3fe:	d002      	beq.n	801d406 <cleanup_stdio+0x1e>
 801d400:	4620      	mov	r0, r4
 801d402:	f002 f819 	bl	801f438 <_fflush_r>
 801d406:	68e1      	ldr	r1, [r4, #12]
 801d408:	4b06      	ldr	r3, [pc, #24]	@ (801d424 <cleanup_stdio+0x3c>)
 801d40a:	4299      	cmp	r1, r3
 801d40c:	d004      	beq.n	801d418 <cleanup_stdio+0x30>
 801d40e:	4620      	mov	r0, r4
 801d410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d414:	f002 b810 	b.w	801f438 <_fflush_r>
 801d418:	bd10      	pop	{r4, pc}
 801d41a:	bf00      	nop
 801d41c:	2000f4f4 	.word	0x2000f4f4
 801d420:	2000f55c 	.word	0x2000f55c
 801d424:	2000f5c4 	.word	0x2000f5c4

0801d428 <global_stdio_init.part.0>:
 801d428:	b510      	push	{r4, lr}
 801d42a:	4b0b      	ldr	r3, [pc, #44]	@ (801d458 <global_stdio_init.part.0+0x30>)
 801d42c:	4c0b      	ldr	r4, [pc, #44]	@ (801d45c <global_stdio_init.part.0+0x34>)
 801d42e:	4a0c      	ldr	r2, [pc, #48]	@ (801d460 <global_stdio_init.part.0+0x38>)
 801d430:	601a      	str	r2, [r3, #0]
 801d432:	4620      	mov	r0, r4
 801d434:	2200      	movs	r2, #0
 801d436:	2104      	movs	r1, #4
 801d438:	f7ff ff94 	bl	801d364 <std>
 801d43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d440:	2201      	movs	r2, #1
 801d442:	2109      	movs	r1, #9
 801d444:	f7ff ff8e 	bl	801d364 <std>
 801d448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d44c:	2202      	movs	r2, #2
 801d44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d452:	2112      	movs	r1, #18
 801d454:	f7ff bf86 	b.w	801d364 <std>
 801d458:	2000f62c 	.word	0x2000f62c
 801d45c:	2000f4f4 	.word	0x2000f4f4
 801d460:	0801d3d1 	.word	0x0801d3d1

0801d464 <__sfp_lock_acquire>:
 801d464:	4801      	ldr	r0, [pc, #4]	@ (801d46c <__sfp_lock_acquire+0x8>)
 801d466:	f000 b9ca 	b.w	801d7fe <__retarget_lock_acquire_recursive>
 801d46a:	bf00      	nop
 801d46c:	2000f635 	.word	0x2000f635

0801d470 <__sfp_lock_release>:
 801d470:	4801      	ldr	r0, [pc, #4]	@ (801d478 <__sfp_lock_release+0x8>)
 801d472:	f000 b9c5 	b.w	801d800 <__retarget_lock_release_recursive>
 801d476:	bf00      	nop
 801d478:	2000f635 	.word	0x2000f635

0801d47c <__sinit>:
 801d47c:	b510      	push	{r4, lr}
 801d47e:	4604      	mov	r4, r0
 801d480:	f7ff fff0 	bl	801d464 <__sfp_lock_acquire>
 801d484:	6a23      	ldr	r3, [r4, #32]
 801d486:	b11b      	cbz	r3, 801d490 <__sinit+0x14>
 801d488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d48c:	f7ff bff0 	b.w	801d470 <__sfp_lock_release>
 801d490:	4b04      	ldr	r3, [pc, #16]	@ (801d4a4 <__sinit+0x28>)
 801d492:	6223      	str	r3, [r4, #32]
 801d494:	4b04      	ldr	r3, [pc, #16]	@ (801d4a8 <__sinit+0x2c>)
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d1f5      	bne.n	801d488 <__sinit+0xc>
 801d49c:	f7ff ffc4 	bl	801d428 <global_stdio_init.part.0>
 801d4a0:	e7f2      	b.n	801d488 <__sinit+0xc>
 801d4a2:	bf00      	nop
 801d4a4:	0801d3e9 	.word	0x0801d3e9
 801d4a8:	2000f62c 	.word	0x2000f62c

0801d4ac <_fwalk_sglue>:
 801d4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4b0:	4607      	mov	r7, r0
 801d4b2:	4688      	mov	r8, r1
 801d4b4:	4614      	mov	r4, r2
 801d4b6:	2600      	movs	r6, #0
 801d4b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d4bc:	f1b9 0901 	subs.w	r9, r9, #1
 801d4c0:	d505      	bpl.n	801d4ce <_fwalk_sglue+0x22>
 801d4c2:	6824      	ldr	r4, [r4, #0]
 801d4c4:	2c00      	cmp	r4, #0
 801d4c6:	d1f7      	bne.n	801d4b8 <_fwalk_sglue+0xc>
 801d4c8:	4630      	mov	r0, r6
 801d4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4ce:	89ab      	ldrh	r3, [r5, #12]
 801d4d0:	2b01      	cmp	r3, #1
 801d4d2:	d907      	bls.n	801d4e4 <_fwalk_sglue+0x38>
 801d4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d4d8:	3301      	adds	r3, #1
 801d4da:	d003      	beq.n	801d4e4 <_fwalk_sglue+0x38>
 801d4dc:	4629      	mov	r1, r5
 801d4de:	4638      	mov	r0, r7
 801d4e0:	47c0      	blx	r8
 801d4e2:	4306      	orrs	r6, r0
 801d4e4:	3568      	adds	r5, #104	@ 0x68
 801d4e6:	e7e9      	b.n	801d4bc <_fwalk_sglue+0x10>

0801d4e8 <iprintf>:
 801d4e8:	b40f      	push	{r0, r1, r2, r3}
 801d4ea:	b507      	push	{r0, r1, r2, lr}
 801d4ec:	4906      	ldr	r1, [pc, #24]	@ (801d508 <iprintf+0x20>)
 801d4ee:	ab04      	add	r3, sp, #16
 801d4f0:	6808      	ldr	r0, [r1, #0]
 801d4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4f6:	6881      	ldr	r1, [r0, #8]
 801d4f8:	9301      	str	r3, [sp, #4]
 801d4fa:	f001 fe01 	bl	801f100 <_vfiprintf_r>
 801d4fe:	b003      	add	sp, #12
 801d500:	f85d eb04 	ldr.w	lr, [sp], #4
 801d504:	b004      	add	sp, #16
 801d506:	4770      	bx	lr
 801d508:	20000094 	.word	0x20000094

0801d50c <siprintf>:
 801d50c:	b40e      	push	{r1, r2, r3}
 801d50e:	b500      	push	{lr}
 801d510:	b09c      	sub	sp, #112	@ 0x70
 801d512:	ab1d      	add	r3, sp, #116	@ 0x74
 801d514:	9002      	str	r0, [sp, #8]
 801d516:	9006      	str	r0, [sp, #24]
 801d518:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d51c:	4809      	ldr	r0, [pc, #36]	@ (801d544 <siprintf+0x38>)
 801d51e:	9107      	str	r1, [sp, #28]
 801d520:	9104      	str	r1, [sp, #16]
 801d522:	4909      	ldr	r1, [pc, #36]	@ (801d548 <siprintf+0x3c>)
 801d524:	f853 2b04 	ldr.w	r2, [r3], #4
 801d528:	9105      	str	r1, [sp, #20]
 801d52a:	6800      	ldr	r0, [r0, #0]
 801d52c:	9301      	str	r3, [sp, #4]
 801d52e:	a902      	add	r1, sp, #8
 801d530:	f001 fcc0 	bl	801eeb4 <_svfiprintf_r>
 801d534:	9b02      	ldr	r3, [sp, #8]
 801d536:	2200      	movs	r2, #0
 801d538:	701a      	strb	r2, [r3, #0]
 801d53a:	b01c      	add	sp, #112	@ 0x70
 801d53c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d540:	b003      	add	sp, #12
 801d542:	4770      	bx	lr
 801d544:	20000094 	.word	0x20000094
 801d548:	ffff0208 	.word	0xffff0208

0801d54c <__sread>:
 801d54c:	b510      	push	{r4, lr}
 801d54e:	460c      	mov	r4, r1
 801d550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d554:	f000 f90a 	bl	801d76c <_read_r>
 801d558:	2800      	cmp	r0, #0
 801d55a:	bfab      	itete	ge
 801d55c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d55e:	89a3      	ldrhlt	r3, [r4, #12]
 801d560:	181b      	addge	r3, r3, r0
 801d562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d566:	bfac      	ite	ge
 801d568:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d56a:	81a3      	strhlt	r3, [r4, #12]
 801d56c:	bd10      	pop	{r4, pc}

0801d56e <__swrite>:
 801d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d572:	461f      	mov	r7, r3
 801d574:	898b      	ldrh	r3, [r1, #12]
 801d576:	05db      	lsls	r3, r3, #23
 801d578:	4605      	mov	r5, r0
 801d57a:	460c      	mov	r4, r1
 801d57c:	4616      	mov	r6, r2
 801d57e:	d505      	bpl.n	801d58c <__swrite+0x1e>
 801d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d584:	2302      	movs	r3, #2
 801d586:	2200      	movs	r2, #0
 801d588:	f000 f8de 	bl	801d748 <_lseek_r>
 801d58c:	89a3      	ldrh	r3, [r4, #12]
 801d58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d596:	81a3      	strh	r3, [r4, #12]
 801d598:	4632      	mov	r2, r6
 801d59a:	463b      	mov	r3, r7
 801d59c:	4628      	mov	r0, r5
 801d59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a2:	f000 b8f5 	b.w	801d790 <_write_r>

0801d5a6 <__sseek>:
 801d5a6:	b510      	push	{r4, lr}
 801d5a8:	460c      	mov	r4, r1
 801d5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5ae:	f000 f8cb 	bl	801d748 <_lseek_r>
 801d5b2:	1c43      	adds	r3, r0, #1
 801d5b4:	89a3      	ldrh	r3, [r4, #12]
 801d5b6:	bf15      	itete	ne
 801d5b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d5ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d5be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d5c2:	81a3      	strheq	r3, [r4, #12]
 801d5c4:	bf18      	it	ne
 801d5c6:	81a3      	strhne	r3, [r4, #12]
 801d5c8:	bd10      	pop	{r4, pc}

0801d5ca <__sclose>:
 801d5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5ce:	f000 b855 	b.w	801d67c <_close_r>

0801d5d2 <memcmp>:
 801d5d2:	b510      	push	{r4, lr}
 801d5d4:	3901      	subs	r1, #1
 801d5d6:	4402      	add	r2, r0
 801d5d8:	4290      	cmp	r0, r2
 801d5da:	d101      	bne.n	801d5e0 <memcmp+0xe>
 801d5dc:	2000      	movs	r0, #0
 801d5de:	e005      	b.n	801d5ec <memcmp+0x1a>
 801d5e0:	7803      	ldrb	r3, [r0, #0]
 801d5e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d5e6:	42a3      	cmp	r3, r4
 801d5e8:	d001      	beq.n	801d5ee <memcmp+0x1c>
 801d5ea:	1b18      	subs	r0, r3, r4
 801d5ec:	bd10      	pop	{r4, pc}
 801d5ee:	3001      	adds	r0, #1
 801d5f0:	e7f2      	b.n	801d5d8 <memcmp+0x6>

0801d5f2 <memmove>:
 801d5f2:	4288      	cmp	r0, r1
 801d5f4:	b510      	push	{r4, lr}
 801d5f6:	eb01 0402 	add.w	r4, r1, r2
 801d5fa:	d902      	bls.n	801d602 <memmove+0x10>
 801d5fc:	4284      	cmp	r4, r0
 801d5fe:	4623      	mov	r3, r4
 801d600:	d807      	bhi.n	801d612 <memmove+0x20>
 801d602:	1e43      	subs	r3, r0, #1
 801d604:	42a1      	cmp	r1, r4
 801d606:	d008      	beq.n	801d61a <memmove+0x28>
 801d608:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d60c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d610:	e7f8      	b.n	801d604 <memmove+0x12>
 801d612:	4402      	add	r2, r0
 801d614:	4601      	mov	r1, r0
 801d616:	428a      	cmp	r2, r1
 801d618:	d100      	bne.n	801d61c <memmove+0x2a>
 801d61a:	bd10      	pop	{r4, pc}
 801d61c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d620:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d624:	e7f7      	b.n	801d616 <memmove+0x24>

0801d626 <memset>:
 801d626:	4402      	add	r2, r0
 801d628:	4603      	mov	r3, r0
 801d62a:	4293      	cmp	r3, r2
 801d62c:	d100      	bne.n	801d630 <memset+0xa>
 801d62e:	4770      	bx	lr
 801d630:	f803 1b01 	strb.w	r1, [r3], #1
 801d634:	e7f9      	b.n	801d62a <memset+0x4>

0801d636 <strchr>:
 801d636:	b2c9      	uxtb	r1, r1
 801d638:	4603      	mov	r3, r0
 801d63a:	4618      	mov	r0, r3
 801d63c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d640:	b112      	cbz	r2, 801d648 <strchr+0x12>
 801d642:	428a      	cmp	r2, r1
 801d644:	d1f9      	bne.n	801d63a <strchr+0x4>
 801d646:	4770      	bx	lr
 801d648:	2900      	cmp	r1, #0
 801d64a:	bf18      	it	ne
 801d64c:	2000      	movne	r0, #0
 801d64e:	4770      	bx	lr

0801d650 <strncmp>:
 801d650:	b510      	push	{r4, lr}
 801d652:	b16a      	cbz	r2, 801d670 <strncmp+0x20>
 801d654:	3901      	subs	r1, #1
 801d656:	1884      	adds	r4, r0, r2
 801d658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d65c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d660:	429a      	cmp	r2, r3
 801d662:	d103      	bne.n	801d66c <strncmp+0x1c>
 801d664:	42a0      	cmp	r0, r4
 801d666:	d001      	beq.n	801d66c <strncmp+0x1c>
 801d668:	2a00      	cmp	r2, #0
 801d66a:	d1f5      	bne.n	801d658 <strncmp+0x8>
 801d66c:	1ad0      	subs	r0, r2, r3
 801d66e:	bd10      	pop	{r4, pc}
 801d670:	4610      	mov	r0, r2
 801d672:	e7fc      	b.n	801d66e <strncmp+0x1e>

0801d674 <_localeconv_r>:
 801d674:	4800      	ldr	r0, [pc, #0]	@ (801d678 <_localeconv_r+0x4>)
 801d676:	4770      	bx	lr
 801d678:	200001d4 	.word	0x200001d4

0801d67c <_close_r>:
 801d67c:	b538      	push	{r3, r4, r5, lr}
 801d67e:	4d06      	ldr	r5, [pc, #24]	@ (801d698 <_close_r+0x1c>)
 801d680:	2300      	movs	r3, #0
 801d682:	4604      	mov	r4, r0
 801d684:	4608      	mov	r0, r1
 801d686:	602b      	str	r3, [r5, #0]
 801d688:	f7e5 fe04 	bl	8003294 <_close>
 801d68c:	1c43      	adds	r3, r0, #1
 801d68e:	d102      	bne.n	801d696 <_close_r+0x1a>
 801d690:	682b      	ldr	r3, [r5, #0]
 801d692:	b103      	cbz	r3, 801d696 <_close_r+0x1a>
 801d694:	6023      	str	r3, [r4, #0]
 801d696:	bd38      	pop	{r3, r4, r5, pc}
 801d698:	2000f630 	.word	0x2000f630

0801d69c <_reclaim_reent>:
 801d69c:	4b29      	ldr	r3, [pc, #164]	@ (801d744 <_reclaim_reent+0xa8>)
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	4283      	cmp	r3, r0
 801d6a2:	b570      	push	{r4, r5, r6, lr}
 801d6a4:	4604      	mov	r4, r0
 801d6a6:	d04b      	beq.n	801d740 <_reclaim_reent+0xa4>
 801d6a8:	69c3      	ldr	r3, [r0, #28]
 801d6aa:	b1ab      	cbz	r3, 801d6d8 <_reclaim_reent+0x3c>
 801d6ac:	68db      	ldr	r3, [r3, #12]
 801d6ae:	b16b      	cbz	r3, 801d6cc <_reclaim_reent+0x30>
 801d6b0:	2500      	movs	r5, #0
 801d6b2:	69e3      	ldr	r3, [r4, #28]
 801d6b4:	68db      	ldr	r3, [r3, #12]
 801d6b6:	5959      	ldr	r1, [r3, r5]
 801d6b8:	2900      	cmp	r1, #0
 801d6ba:	d13b      	bne.n	801d734 <_reclaim_reent+0x98>
 801d6bc:	3504      	adds	r5, #4
 801d6be:	2d80      	cmp	r5, #128	@ 0x80
 801d6c0:	d1f7      	bne.n	801d6b2 <_reclaim_reent+0x16>
 801d6c2:	69e3      	ldr	r3, [r4, #28]
 801d6c4:	4620      	mov	r0, r4
 801d6c6:	68d9      	ldr	r1, [r3, #12]
 801d6c8:	f000 ff16 	bl	801e4f8 <_free_r>
 801d6cc:	69e3      	ldr	r3, [r4, #28]
 801d6ce:	6819      	ldr	r1, [r3, #0]
 801d6d0:	b111      	cbz	r1, 801d6d8 <_reclaim_reent+0x3c>
 801d6d2:	4620      	mov	r0, r4
 801d6d4:	f000 ff10 	bl	801e4f8 <_free_r>
 801d6d8:	6961      	ldr	r1, [r4, #20]
 801d6da:	b111      	cbz	r1, 801d6e2 <_reclaim_reent+0x46>
 801d6dc:	4620      	mov	r0, r4
 801d6de:	f000 ff0b 	bl	801e4f8 <_free_r>
 801d6e2:	69e1      	ldr	r1, [r4, #28]
 801d6e4:	b111      	cbz	r1, 801d6ec <_reclaim_reent+0x50>
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	f000 ff06 	bl	801e4f8 <_free_r>
 801d6ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d6ee:	b111      	cbz	r1, 801d6f6 <_reclaim_reent+0x5a>
 801d6f0:	4620      	mov	r0, r4
 801d6f2:	f000 ff01 	bl	801e4f8 <_free_r>
 801d6f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d6f8:	b111      	cbz	r1, 801d700 <_reclaim_reent+0x64>
 801d6fa:	4620      	mov	r0, r4
 801d6fc:	f000 fefc 	bl	801e4f8 <_free_r>
 801d700:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d702:	b111      	cbz	r1, 801d70a <_reclaim_reent+0x6e>
 801d704:	4620      	mov	r0, r4
 801d706:	f000 fef7 	bl	801e4f8 <_free_r>
 801d70a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d70c:	b111      	cbz	r1, 801d714 <_reclaim_reent+0x78>
 801d70e:	4620      	mov	r0, r4
 801d710:	f000 fef2 	bl	801e4f8 <_free_r>
 801d714:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d716:	b111      	cbz	r1, 801d71e <_reclaim_reent+0x82>
 801d718:	4620      	mov	r0, r4
 801d71a:	f000 feed 	bl	801e4f8 <_free_r>
 801d71e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d720:	b111      	cbz	r1, 801d728 <_reclaim_reent+0x8c>
 801d722:	4620      	mov	r0, r4
 801d724:	f000 fee8 	bl	801e4f8 <_free_r>
 801d728:	6a23      	ldr	r3, [r4, #32]
 801d72a:	b14b      	cbz	r3, 801d740 <_reclaim_reent+0xa4>
 801d72c:	4620      	mov	r0, r4
 801d72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d732:	4718      	bx	r3
 801d734:	680e      	ldr	r6, [r1, #0]
 801d736:	4620      	mov	r0, r4
 801d738:	f000 fede 	bl	801e4f8 <_free_r>
 801d73c:	4631      	mov	r1, r6
 801d73e:	e7bb      	b.n	801d6b8 <_reclaim_reent+0x1c>
 801d740:	bd70      	pop	{r4, r5, r6, pc}
 801d742:	bf00      	nop
 801d744:	20000094 	.word	0x20000094

0801d748 <_lseek_r>:
 801d748:	b538      	push	{r3, r4, r5, lr}
 801d74a:	4d07      	ldr	r5, [pc, #28]	@ (801d768 <_lseek_r+0x20>)
 801d74c:	4604      	mov	r4, r0
 801d74e:	4608      	mov	r0, r1
 801d750:	4611      	mov	r1, r2
 801d752:	2200      	movs	r2, #0
 801d754:	602a      	str	r2, [r5, #0]
 801d756:	461a      	mov	r2, r3
 801d758:	f7e5 fdc3 	bl	80032e2 <_lseek>
 801d75c:	1c43      	adds	r3, r0, #1
 801d75e:	d102      	bne.n	801d766 <_lseek_r+0x1e>
 801d760:	682b      	ldr	r3, [r5, #0]
 801d762:	b103      	cbz	r3, 801d766 <_lseek_r+0x1e>
 801d764:	6023      	str	r3, [r4, #0]
 801d766:	bd38      	pop	{r3, r4, r5, pc}
 801d768:	2000f630 	.word	0x2000f630

0801d76c <_read_r>:
 801d76c:	b538      	push	{r3, r4, r5, lr}
 801d76e:	4d07      	ldr	r5, [pc, #28]	@ (801d78c <_read_r+0x20>)
 801d770:	4604      	mov	r4, r0
 801d772:	4608      	mov	r0, r1
 801d774:	4611      	mov	r1, r2
 801d776:	2200      	movs	r2, #0
 801d778:	602a      	str	r2, [r5, #0]
 801d77a:	461a      	mov	r2, r3
 801d77c:	f7e5 fd6d 	bl	800325a <_read>
 801d780:	1c43      	adds	r3, r0, #1
 801d782:	d102      	bne.n	801d78a <_read_r+0x1e>
 801d784:	682b      	ldr	r3, [r5, #0]
 801d786:	b103      	cbz	r3, 801d78a <_read_r+0x1e>
 801d788:	6023      	str	r3, [r4, #0]
 801d78a:	bd38      	pop	{r3, r4, r5, pc}
 801d78c:	2000f630 	.word	0x2000f630

0801d790 <_write_r>:
 801d790:	b538      	push	{r3, r4, r5, lr}
 801d792:	4d07      	ldr	r5, [pc, #28]	@ (801d7b0 <_write_r+0x20>)
 801d794:	4604      	mov	r4, r0
 801d796:	4608      	mov	r0, r1
 801d798:	4611      	mov	r1, r2
 801d79a:	2200      	movs	r2, #0
 801d79c:	602a      	str	r2, [r5, #0]
 801d79e:	461a      	mov	r2, r3
 801d7a0:	f7e5 fa8a 	bl	8002cb8 <_write>
 801d7a4:	1c43      	adds	r3, r0, #1
 801d7a6:	d102      	bne.n	801d7ae <_write_r+0x1e>
 801d7a8:	682b      	ldr	r3, [r5, #0]
 801d7aa:	b103      	cbz	r3, 801d7ae <_write_r+0x1e>
 801d7ac:	6023      	str	r3, [r4, #0]
 801d7ae:	bd38      	pop	{r3, r4, r5, pc}
 801d7b0:	2000f630 	.word	0x2000f630

0801d7b4 <__libc_init_array>:
 801d7b4:	b570      	push	{r4, r5, r6, lr}
 801d7b6:	4d0d      	ldr	r5, [pc, #52]	@ (801d7ec <__libc_init_array+0x38>)
 801d7b8:	4c0d      	ldr	r4, [pc, #52]	@ (801d7f0 <__libc_init_array+0x3c>)
 801d7ba:	1b64      	subs	r4, r4, r5
 801d7bc:	10a4      	asrs	r4, r4, #2
 801d7be:	2600      	movs	r6, #0
 801d7c0:	42a6      	cmp	r6, r4
 801d7c2:	d109      	bne.n	801d7d8 <__libc_init_array+0x24>
 801d7c4:	4d0b      	ldr	r5, [pc, #44]	@ (801d7f4 <__libc_init_array+0x40>)
 801d7c6:	4c0c      	ldr	r4, [pc, #48]	@ (801d7f8 <__libc_init_array+0x44>)
 801d7c8:	f002 f84c 	bl	801f864 <_init>
 801d7cc:	1b64      	subs	r4, r4, r5
 801d7ce:	10a4      	asrs	r4, r4, #2
 801d7d0:	2600      	movs	r6, #0
 801d7d2:	42a6      	cmp	r6, r4
 801d7d4:	d105      	bne.n	801d7e2 <__libc_init_array+0x2e>
 801d7d6:	bd70      	pop	{r4, r5, r6, pc}
 801d7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7dc:	4798      	blx	r3
 801d7de:	3601      	adds	r6, #1
 801d7e0:	e7ee      	b.n	801d7c0 <__libc_init_array+0xc>
 801d7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d7e6:	4798      	blx	r3
 801d7e8:	3601      	adds	r6, #1
 801d7ea:	e7f2      	b.n	801d7d2 <__libc_init_array+0x1e>
 801d7ec:	08024e6c 	.word	0x08024e6c
 801d7f0:	08024e6c 	.word	0x08024e6c
 801d7f4:	08024e6c 	.word	0x08024e6c
 801d7f8:	08024e70 	.word	0x08024e70

0801d7fc <__retarget_lock_init_recursive>:
 801d7fc:	4770      	bx	lr

0801d7fe <__retarget_lock_acquire_recursive>:
 801d7fe:	4770      	bx	lr

0801d800 <__retarget_lock_release_recursive>:
 801d800:	4770      	bx	lr

0801d802 <memcpy>:
 801d802:	440a      	add	r2, r1
 801d804:	4291      	cmp	r1, r2
 801d806:	f100 33ff 	add.w	r3, r0, #4294967295
 801d80a:	d100      	bne.n	801d80e <memcpy+0xc>
 801d80c:	4770      	bx	lr
 801d80e:	b510      	push	{r4, lr}
 801d810:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d814:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d818:	4291      	cmp	r1, r2
 801d81a:	d1f9      	bne.n	801d810 <memcpy+0xe>
 801d81c:	bd10      	pop	{r4, pc}
	...

0801d820 <__assert_func>:
 801d820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d822:	4614      	mov	r4, r2
 801d824:	461a      	mov	r2, r3
 801d826:	4b09      	ldr	r3, [pc, #36]	@ (801d84c <__assert_func+0x2c>)
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	4605      	mov	r5, r0
 801d82c:	68d8      	ldr	r0, [r3, #12]
 801d82e:	b954      	cbnz	r4, 801d846 <__assert_func+0x26>
 801d830:	4b07      	ldr	r3, [pc, #28]	@ (801d850 <__assert_func+0x30>)
 801d832:	461c      	mov	r4, r3
 801d834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d838:	9100      	str	r1, [sp, #0]
 801d83a:	462b      	mov	r3, r5
 801d83c:	4905      	ldr	r1, [pc, #20]	@ (801d854 <__assert_func+0x34>)
 801d83e:	f001 fe23 	bl	801f488 <fiprintf>
 801d842:	f001 fed7 	bl	801f5f4 <abort>
 801d846:	4b04      	ldr	r3, [pc, #16]	@ (801d858 <__assert_func+0x38>)
 801d848:	e7f4      	b.n	801d834 <__assert_func+0x14>
 801d84a:	bf00      	nop
 801d84c:	20000094 	.word	0x20000094
 801d850:	08024c77 	.word	0x08024c77
 801d854:	08024c49 	.word	0x08024c49
 801d858:	08024c3c 	.word	0x08024c3c

0801d85c <quorem>:
 801d85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d860:	6903      	ldr	r3, [r0, #16]
 801d862:	690c      	ldr	r4, [r1, #16]
 801d864:	42a3      	cmp	r3, r4
 801d866:	4607      	mov	r7, r0
 801d868:	db7e      	blt.n	801d968 <quorem+0x10c>
 801d86a:	3c01      	subs	r4, #1
 801d86c:	f101 0814 	add.w	r8, r1, #20
 801d870:	00a3      	lsls	r3, r4, #2
 801d872:	f100 0514 	add.w	r5, r0, #20
 801d876:	9300      	str	r3, [sp, #0]
 801d878:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d87c:	9301      	str	r3, [sp, #4]
 801d87e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d886:	3301      	adds	r3, #1
 801d888:	429a      	cmp	r2, r3
 801d88a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d88e:	fbb2 f6f3 	udiv	r6, r2, r3
 801d892:	d32e      	bcc.n	801d8f2 <quorem+0x96>
 801d894:	f04f 0a00 	mov.w	sl, #0
 801d898:	46c4      	mov	ip, r8
 801d89a:	46ae      	mov	lr, r5
 801d89c:	46d3      	mov	fp, sl
 801d89e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d8a2:	b298      	uxth	r0, r3
 801d8a4:	fb06 a000 	mla	r0, r6, r0, sl
 801d8a8:	0c02      	lsrs	r2, r0, #16
 801d8aa:	0c1b      	lsrs	r3, r3, #16
 801d8ac:	fb06 2303 	mla	r3, r6, r3, r2
 801d8b0:	f8de 2000 	ldr.w	r2, [lr]
 801d8b4:	b280      	uxth	r0, r0
 801d8b6:	b292      	uxth	r2, r2
 801d8b8:	1a12      	subs	r2, r2, r0
 801d8ba:	445a      	add	r2, fp
 801d8bc:	f8de 0000 	ldr.w	r0, [lr]
 801d8c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d8c4:	b29b      	uxth	r3, r3
 801d8c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d8ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d8ce:	b292      	uxth	r2, r2
 801d8d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d8d4:	45e1      	cmp	r9, ip
 801d8d6:	f84e 2b04 	str.w	r2, [lr], #4
 801d8da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d8de:	d2de      	bcs.n	801d89e <quorem+0x42>
 801d8e0:	9b00      	ldr	r3, [sp, #0]
 801d8e2:	58eb      	ldr	r3, [r5, r3]
 801d8e4:	b92b      	cbnz	r3, 801d8f2 <quorem+0x96>
 801d8e6:	9b01      	ldr	r3, [sp, #4]
 801d8e8:	3b04      	subs	r3, #4
 801d8ea:	429d      	cmp	r5, r3
 801d8ec:	461a      	mov	r2, r3
 801d8ee:	d32f      	bcc.n	801d950 <quorem+0xf4>
 801d8f0:	613c      	str	r4, [r7, #16]
 801d8f2:	4638      	mov	r0, r7
 801d8f4:	f001 f97a 	bl	801ebec <__mcmp>
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	db25      	blt.n	801d948 <quorem+0xec>
 801d8fc:	4629      	mov	r1, r5
 801d8fe:	2000      	movs	r0, #0
 801d900:	f858 2b04 	ldr.w	r2, [r8], #4
 801d904:	f8d1 c000 	ldr.w	ip, [r1]
 801d908:	fa1f fe82 	uxth.w	lr, r2
 801d90c:	fa1f f38c 	uxth.w	r3, ip
 801d910:	eba3 030e 	sub.w	r3, r3, lr
 801d914:	4403      	add	r3, r0
 801d916:	0c12      	lsrs	r2, r2, #16
 801d918:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d91c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d920:	b29b      	uxth	r3, r3
 801d922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d926:	45c1      	cmp	r9, r8
 801d928:	f841 3b04 	str.w	r3, [r1], #4
 801d92c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d930:	d2e6      	bcs.n	801d900 <quorem+0xa4>
 801d932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d93a:	b922      	cbnz	r2, 801d946 <quorem+0xea>
 801d93c:	3b04      	subs	r3, #4
 801d93e:	429d      	cmp	r5, r3
 801d940:	461a      	mov	r2, r3
 801d942:	d30b      	bcc.n	801d95c <quorem+0x100>
 801d944:	613c      	str	r4, [r7, #16]
 801d946:	3601      	adds	r6, #1
 801d948:	4630      	mov	r0, r6
 801d94a:	b003      	add	sp, #12
 801d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d950:	6812      	ldr	r2, [r2, #0]
 801d952:	3b04      	subs	r3, #4
 801d954:	2a00      	cmp	r2, #0
 801d956:	d1cb      	bne.n	801d8f0 <quorem+0x94>
 801d958:	3c01      	subs	r4, #1
 801d95a:	e7c6      	b.n	801d8ea <quorem+0x8e>
 801d95c:	6812      	ldr	r2, [r2, #0]
 801d95e:	3b04      	subs	r3, #4
 801d960:	2a00      	cmp	r2, #0
 801d962:	d1ef      	bne.n	801d944 <quorem+0xe8>
 801d964:	3c01      	subs	r4, #1
 801d966:	e7ea      	b.n	801d93e <quorem+0xe2>
 801d968:	2000      	movs	r0, #0
 801d96a:	e7ee      	b.n	801d94a <quorem+0xee>
 801d96c:	0000      	movs	r0, r0
	...

0801d970 <_dtoa_r>:
 801d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d974:	69c7      	ldr	r7, [r0, #28]
 801d976:	b099      	sub	sp, #100	@ 0x64
 801d978:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d97c:	ec55 4b10 	vmov	r4, r5, d0
 801d980:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d982:	9109      	str	r1, [sp, #36]	@ 0x24
 801d984:	4683      	mov	fp, r0
 801d986:	920e      	str	r2, [sp, #56]	@ 0x38
 801d988:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d98a:	b97f      	cbnz	r7, 801d9ac <_dtoa_r+0x3c>
 801d98c:	2010      	movs	r0, #16
 801d98e:	f000 fdfd 	bl	801e58c <malloc>
 801d992:	4602      	mov	r2, r0
 801d994:	f8cb 001c 	str.w	r0, [fp, #28]
 801d998:	b920      	cbnz	r0, 801d9a4 <_dtoa_r+0x34>
 801d99a:	4ba7      	ldr	r3, [pc, #668]	@ (801dc38 <_dtoa_r+0x2c8>)
 801d99c:	21ef      	movs	r1, #239	@ 0xef
 801d99e:	48a7      	ldr	r0, [pc, #668]	@ (801dc3c <_dtoa_r+0x2cc>)
 801d9a0:	f7ff ff3e 	bl	801d820 <__assert_func>
 801d9a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d9a8:	6007      	str	r7, [r0, #0]
 801d9aa:	60c7      	str	r7, [r0, #12]
 801d9ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d9b0:	6819      	ldr	r1, [r3, #0]
 801d9b2:	b159      	cbz	r1, 801d9cc <_dtoa_r+0x5c>
 801d9b4:	685a      	ldr	r2, [r3, #4]
 801d9b6:	604a      	str	r2, [r1, #4]
 801d9b8:	2301      	movs	r3, #1
 801d9ba:	4093      	lsls	r3, r2
 801d9bc:	608b      	str	r3, [r1, #8]
 801d9be:	4658      	mov	r0, fp
 801d9c0:	f000 feda 	bl	801e778 <_Bfree>
 801d9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d9c8:	2200      	movs	r2, #0
 801d9ca:	601a      	str	r2, [r3, #0]
 801d9cc:	1e2b      	subs	r3, r5, #0
 801d9ce:	bfb9      	ittee	lt
 801d9d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d9d4:	9303      	strlt	r3, [sp, #12]
 801d9d6:	2300      	movge	r3, #0
 801d9d8:	6033      	strge	r3, [r6, #0]
 801d9da:	9f03      	ldr	r7, [sp, #12]
 801d9dc:	4b98      	ldr	r3, [pc, #608]	@ (801dc40 <_dtoa_r+0x2d0>)
 801d9de:	bfbc      	itt	lt
 801d9e0:	2201      	movlt	r2, #1
 801d9e2:	6032      	strlt	r2, [r6, #0]
 801d9e4:	43bb      	bics	r3, r7
 801d9e6:	d112      	bne.n	801da0e <_dtoa_r+0x9e>
 801d9e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d9ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d9ee:	6013      	str	r3, [r2, #0]
 801d9f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d9f4:	4323      	orrs	r3, r4
 801d9f6:	f000 854d 	beq.w	801e494 <_dtoa_r+0xb24>
 801d9fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d9fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801dc54 <_dtoa_r+0x2e4>
 801da00:	2b00      	cmp	r3, #0
 801da02:	f000 854f 	beq.w	801e4a4 <_dtoa_r+0xb34>
 801da06:	f10a 0303 	add.w	r3, sl, #3
 801da0a:	f000 bd49 	b.w	801e4a0 <_dtoa_r+0xb30>
 801da0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801da12:	2200      	movs	r2, #0
 801da14:	ec51 0b17 	vmov	r0, r1, d7
 801da18:	2300      	movs	r3, #0
 801da1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801da1e:	f7e3 f883 	bl	8000b28 <__aeabi_dcmpeq>
 801da22:	4680      	mov	r8, r0
 801da24:	b158      	cbz	r0, 801da3e <_dtoa_r+0xce>
 801da26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801da28:	2301      	movs	r3, #1
 801da2a:	6013      	str	r3, [r2, #0]
 801da2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801da2e:	b113      	cbz	r3, 801da36 <_dtoa_r+0xc6>
 801da30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801da32:	4b84      	ldr	r3, [pc, #528]	@ (801dc44 <_dtoa_r+0x2d4>)
 801da34:	6013      	str	r3, [r2, #0]
 801da36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801dc58 <_dtoa_r+0x2e8>
 801da3a:	f000 bd33 	b.w	801e4a4 <_dtoa_r+0xb34>
 801da3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801da42:	aa16      	add	r2, sp, #88	@ 0x58
 801da44:	a917      	add	r1, sp, #92	@ 0x5c
 801da46:	4658      	mov	r0, fp
 801da48:	f001 f980 	bl	801ed4c <__d2b>
 801da4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801da50:	4681      	mov	r9, r0
 801da52:	2e00      	cmp	r6, #0
 801da54:	d077      	beq.n	801db46 <_dtoa_r+0x1d6>
 801da56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801da5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801da60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801da68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801da6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801da70:	4619      	mov	r1, r3
 801da72:	2200      	movs	r2, #0
 801da74:	4b74      	ldr	r3, [pc, #464]	@ (801dc48 <_dtoa_r+0x2d8>)
 801da76:	f7e2 fc37 	bl	80002e8 <__aeabi_dsub>
 801da7a:	a369      	add	r3, pc, #420	@ (adr r3, 801dc20 <_dtoa_r+0x2b0>)
 801da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da80:	f7e2 fdea 	bl	8000658 <__aeabi_dmul>
 801da84:	a368      	add	r3, pc, #416	@ (adr r3, 801dc28 <_dtoa_r+0x2b8>)
 801da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8a:	f7e2 fc2f 	bl	80002ec <__adddf3>
 801da8e:	4604      	mov	r4, r0
 801da90:	4630      	mov	r0, r6
 801da92:	460d      	mov	r5, r1
 801da94:	f7e2 fd76 	bl	8000584 <__aeabi_i2d>
 801da98:	a365      	add	r3, pc, #404	@ (adr r3, 801dc30 <_dtoa_r+0x2c0>)
 801da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da9e:	f7e2 fddb 	bl	8000658 <__aeabi_dmul>
 801daa2:	4602      	mov	r2, r0
 801daa4:	460b      	mov	r3, r1
 801daa6:	4620      	mov	r0, r4
 801daa8:	4629      	mov	r1, r5
 801daaa:	f7e2 fc1f 	bl	80002ec <__adddf3>
 801daae:	4604      	mov	r4, r0
 801dab0:	460d      	mov	r5, r1
 801dab2:	f7e3 f881 	bl	8000bb8 <__aeabi_d2iz>
 801dab6:	2200      	movs	r2, #0
 801dab8:	4607      	mov	r7, r0
 801daba:	2300      	movs	r3, #0
 801dabc:	4620      	mov	r0, r4
 801dabe:	4629      	mov	r1, r5
 801dac0:	f7e3 f83c 	bl	8000b3c <__aeabi_dcmplt>
 801dac4:	b140      	cbz	r0, 801dad8 <_dtoa_r+0x168>
 801dac6:	4638      	mov	r0, r7
 801dac8:	f7e2 fd5c 	bl	8000584 <__aeabi_i2d>
 801dacc:	4622      	mov	r2, r4
 801dace:	462b      	mov	r3, r5
 801dad0:	f7e3 f82a 	bl	8000b28 <__aeabi_dcmpeq>
 801dad4:	b900      	cbnz	r0, 801dad8 <_dtoa_r+0x168>
 801dad6:	3f01      	subs	r7, #1
 801dad8:	2f16      	cmp	r7, #22
 801dada:	d851      	bhi.n	801db80 <_dtoa_r+0x210>
 801dadc:	4b5b      	ldr	r3, [pc, #364]	@ (801dc4c <_dtoa_r+0x2dc>)
 801dade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801daea:	f7e3 f827 	bl	8000b3c <__aeabi_dcmplt>
 801daee:	2800      	cmp	r0, #0
 801daf0:	d048      	beq.n	801db84 <_dtoa_r+0x214>
 801daf2:	3f01      	subs	r7, #1
 801daf4:	2300      	movs	r3, #0
 801daf6:	9312      	str	r3, [sp, #72]	@ 0x48
 801daf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dafa:	1b9b      	subs	r3, r3, r6
 801dafc:	1e5a      	subs	r2, r3, #1
 801dafe:	bf44      	itt	mi
 801db00:	f1c3 0801 	rsbmi	r8, r3, #1
 801db04:	2300      	movmi	r3, #0
 801db06:	9208      	str	r2, [sp, #32]
 801db08:	bf54      	ite	pl
 801db0a:	f04f 0800 	movpl.w	r8, #0
 801db0e:	9308      	strmi	r3, [sp, #32]
 801db10:	2f00      	cmp	r7, #0
 801db12:	db39      	blt.n	801db88 <_dtoa_r+0x218>
 801db14:	9b08      	ldr	r3, [sp, #32]
 801db16:	970f      	str	r7, [sp, #60]	@ 0x3c
 801db18:	443b      	add	r3, r7
 801db1a:	9308      	str	r3, [sp, #32]
 801db1c:	2300      	movs	r3, #0
 801db1e:	930a      	str	r3, [sp, #40]	@ 0x28
 801db20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db22:	2b09      	cmp	r3, #9
 801db24:	d864      	bhi.n	801dbf0 <_dtoa_r+0x280>
 801db26:	2b05      	cmp	r3, #5
 801db28:	bfc4      	itt	gt
 801db2a:	3b04      	subgt	r3, #4
 801db2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801db2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db30:	f1a3 0302 	sub.w	r3, r3, #2
 801db34:	bfcc      	ite	gt
 801db36:	2400      	movgt	r4, #0
 801db38:	2401      	movle	r4, #1
 801db3a:	2b03      	cmp	r3, #3
 801db3c:	d863      	bhi.n	801dc06 <_dtoa_r+0x296>
 801db3e:	e8df f003 	tbb	[pc, r3]
 801db42:	372a      	.short	0x372a
 801db44:	5535      	.short	0x5535
 801db46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801db4a:	441e      	add	r6, r3
 801db4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801db50:	2b20      	cmp	r3, #32
 801db52:	bfc1      	itttt	gt
 801db54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801db58:	409f      	lslgt	r7, r3
 801db5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801db5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801db62:	bfd6      	itet	le
 801db64:	f1c3 0320 	rsble	r3, r3, #32
 801db68:	ea47 0003 	orrgt.w	r0, r7, r3
 801db6c:	fa04 f003 	lslle.w	r0, r4, r3
 801db70:	f7e2 fcf8 	bl	8000564 <__aeabi_ui2d>
 801db74:	2201      	movs	r2, #1
 801db76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801db7a:	3e01      	subs	r6, #1
 801db7c:	9214      	str	r2, [sp, #80]	@ 0x50
 801db7e:	e777      	b.n	801da70 <_dtoa_r+0x100>
 801db80:	2301      	movs	r3, #1
 801db82:	e7b8      	b.n	801daf6 <_dtoa_r+0x186>
 801db84:	9012      	str	r0, [sp, #72]	@ 0x48
 801db86:	e7b7      	b.n	801daf8 <_dtoa_r+0x188>
 801db88:	427b      	negs	r3, r7
 801db8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801db8c:	2300      	movs	r3, #0
 801db8e:	eba8 0807 	sub.w	r8, r8, r7
 801db92:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db94:	e7c4      	b.n	801db20 <_dtoa_r+0x1b0>
 801db96:	2300      	movs	r3, #0
 801db98:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	dc35      	bgt.n	801dc0c <_dtoa_r+0x29c>
 801dba0:	2301      	movs	r3, #1
 801dba2:	9300      	str	r3, [sp, #0]
 801dba4:	9307      	str	r3, [sp, #28]
 801dba6:	461a      	mov	r2, r3
 801dba8:	920e      	str	r2, [sp, #56]	@ 0x38
 801dbaa:	e00b      	b.n	801dbc4 <_dtoa_r+0x254>
 801dbac:	2301      	movs	r3, #1
 801dbae:	e7f3      	b.n	801db98 <_dtoa_r+0x228>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dbb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbb6:	18fb      	adds	r3, r7, r3
 801dbb8:	9300      	str	r3, [sp, #0]
 801dbba:	3301      	adds	r3, #1
 801dbbc:	2b01      	cmp	r3, #1
 801dbbe:	9307      	str	r3, [sp, #28]
 801dbc0:	bfb8      	it	lt
 801dbc2:	2301      	movlt	r3, #1
 801dbc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801dbc8:	2100      	movs	r1, #0
 801dbca:	2204      	movs	r2, #4
 801dbcc:	f102 0514 	add.w	r5, r2, #20
 801dbd0:	429d      	cmp	r5, r3
 801dbd2:	d91f      	bls.n	801dc14 <_dtoa_r+0x2a4>
 801dbd4:	6041      	str	r1, [r0, #4]
 801dbd6:	4658      	mov	r0, fp
 801dbd8:	f000 fd8e 	bl	801e6f8 <_Balloc>
 801dbdc:	4682      	mov	sl, r0
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	d13c      	bne.n	801dc5c <_dtoa_r+0x2ec>
 801dbe2:	4b1b      	ldr	r3, [pc, #108]	@ (801dc50 <_dtoa_r+0x2e0>)
 801dbe4:	4602      	mov	r2, r0
 801dbe6:	f240 11af 	movw	r1, #431	@ 0x1af
 801dbea:	e6d8      	b.n	801d99e <_dtoa_r+0x2e>
 801dbec:	2301      	movs	r3, #1
 801dbee:	e7e0      	b.n	801dbb2 <_dtoa_r+0x242>
 801dbf0:	2401      	movs	r4, #1
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801dbf8:	f04f 33ff 	mov.w	r3, #4294967295
 801dbfc:	9300      	str	r3, [sp, #0]
 801dbfe:	9307      	str	r3, [sp, #28]
 801dc00:	2200      	movs	r2, #0
 801dc02:	2312      	movs	r3, #18
 801dc04:	e7d0      	b.n	801dba8 <_dtoa_r+0x238>
 801dc06:	2301      	movs	r3, #1
 801dc08:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dc0a:	e7f5      	b.n	801dbf8 <_dtoa_r+0x288>
 801dc0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc0e:	9300      	str	r3, [sp, #0]
 801dc10:	9307      	str	r3, [sp, #28]
 801dc12:	e7d7      	b.n	801dbc4 <_dtoa_r+0x254>
 801dc14:	3101      	adds	r1, #1
 801dc16:	0052      	lsls	r2, r2, #1
 801dc18:	e7d8      	b.n	801dbcc <_dtoa_r+0x25c>
 801dc1a:	bf00      	nop
 801dc1c:	f3af 8000 	nop.w
 801dc20:	636f4361 	.word	0x636f4361
 801dc24:	3fd287a7 	.word	0x3fd287a7
 801dc28:	8b60c8b3 	.word	0x8b60c8b3
 801dc2c:	3fc68a28 	.word	0x3fc68a28
 801dc30:	509f79fb 	.word	0x509f79fb
 801dc34:	3fd34413 	.word	0x3fd34413
 801dc38:	08024a98 	.word	0x08024a98
 801dc3c:	08024c85 	.word	0x08024c85
 801dc40:	7ff00000 	.word	0x7ff00000
 801dc44:	08024c19 	.word	0x08024c19
 801dc48:	3ff80000 	.word	0x3ff80000
 801dc4c:	08024d80 	.word	0x08024d80
 801dc50:	08024cdd 	.word	0x08024cdd
 801dc54:	08024c81 	.word	0x08024c81
 801dc58:	08024c18 	.word	0x08024c18
 801dc5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dc60:	6018      	str	r0, [r3, #0]
 801dc62:	9b07      	ldr	r3, [sp, #28]
 801dc64:	2b0e      	cmp	r3, #14
 801dc66:	f200 80a4 	bhi.w	801ddb2 <_dtoa_r+0x442>
 801dc6a:	2c00      	cmp	r4, #0
 801dc6c:	f000 80a1 	beq.w	801ddb2 <_dtoa_r+0x442>
 801dc70:	2f00      	cmp	r7, #0
 801dc72:	dd33      	ble.n	801dcdc <_dtoa_r+0x36c>
 801dc74:	4bad      	ldr	r3, [pc, #692]	@ (801df2c <_dtoa_r+0x5bc>)
 801dc76:	f007 020f 	and.w	r2, r7, #15
 801dc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc7e:	ed93 7b00 	vldr	d7, [r3]
 801dc82:	05f8      	lsls	r0, r7, #23
 801dc84:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dc88:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dc8c:	d516      	bpl.n	801dcbc <_dtoa_r+0x34c>
 801dc8e:	4ba8      	ldr	r3, [pc, #672]	@ (801df30 <_dtoa_r+0x5c0>)
 801dc90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dc94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dc98:	f7e2 fe08 	bl	80008ac <__aeabi_ddiv>
 801dc9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dca0:	f004 040f 	and.w	r4, r4, #15
 801dca4:	2603      	movs	r6, #3
 801dca6:	4da2      	ldr	r5, [pc, #648]	@ (801df30 <_dtoa_r+0x5c0>)
 801dca8:	b954      	cbnz	r4, 801dcc0 <_dtoa_r+0x350>
 801dcaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dcb2:	f7e2 fdfb 	bl	80008ac <__aeabi_ddiv>
 801dcb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dcba:	e028      	b.n	801dd0e <_dtoa_r+0x39e>
 801dcbc:	2602      	movs	r6, #2
 801dcbe:	e7f2      	b.n	801dca6 <_dtoa_r+0x336>
 801dcc0:	07e1      	lsls	r1, r4, #31
 801dcc2:	d508      	bpl.n	801dcd6 <_dtoa_r+0x366>
 801dcc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dcc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dccc:	f7e2 fcc4 	bl	8000658 <__aeabi_dmul>
 801dcd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dcd4:	3601      	adds	r6, #1
 801dcd6:	1064      	asrs	r4, r4, #1
 801dcd8:	3508      	adds	r5, #8
 801dcda:	e7e5      	b.n	801dca8 <_dtoa_r+0x338>
 801dcdc:	f000 80d2 	beq.w	801de84 <_dtoa_r+0x514>
 801dce0:	427c      	negs	r4, r7
 801dce2:	4b92      	ldr	r3, [pc, #584]	@ (801df2c <_dtoa_r+0x5bc>)
 801dce4:	4d92      	ldr	r5, [pc, #584]	@ (801df30 <_dtoa_r+0x5c0>)
 801dce6:	f004 020f 	and.w	r2, r4, #15
 801dcea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dcf6:	f7e2 fcaf 	bl	8000658 <__aeabi_dmul>
 801dcfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dcfe:	1124      	asrs	r4, r4, #4
 801dd00:	2300      	movs	r3, #0
 801dd02:	2602      	movs	r6, #2
 801dd04:	2c00      	cmp	r4, #0
 801dd06:	f040 80b2 	bne.w	801de6e <_dtoa_r+0x4fe>
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d1d3      	bne.n	801dcb6 <_dtoa_r+0x346>
 801dd0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	f000 80b7 	beq.w	801de88 <_dtoa_r+0x518>
 801dd1a:	4b86      	ldr	r3, [pc, #536]	@ (801df34 <_dtoa_r+0x5c4>)
 801dd1c:	2200      	movs	r2, #0
 801dd1e:	4620      	mov	r0, r4
 801dd20:	4629      	mov	r1, r5
 801dd22:	f7e2 ff0b 	bl	8000b3c <__aeabi_dcmplt>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	f000 80ae 	beq.w	801de88 <_dtoa_r+0x518>
 801dd2c:	9b07      	ldr	r3, [sp, #28]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	f000 80aa 	beq.w	801de88 <_dtoa_r+0x518>
 801dd34:	9b00      	ldr	r3, [sp, #0]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	dd37      	ble.n	801ddaa <_dtoa_r+0x43a>
 801dd3a:	1e7b      	subs	r3, r7, #1
 801dd3c:	9304      	str	r3, [sp, #16]
 801dd3e:	4620      	mov	r0, r4
 801dd40:	4b7d      	ldr	r3, [pc, #500]	@ (801df38 <_dtoa_r+0x5c8>)
 801dd42:	2200      	movs	r2, #0
 801dd44:	4629      	mov	r1, r5
 801dd46:	f7e2 fc87 	bl	8000658 <__aeabi_dmul>
 801dd4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dd4e:	9c00      	ldr	r4, [sp, #0]
 801dd50:	3601      	adds	r6, #1
 801dd52:	4630      	mov	r0, r6
 801dd54:	f7e2 fc16 	bl	8000584 <__aeabi_i2d>
 801dd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dd5c:	f7e2 fc7c 	bl	8000658 <__aeabi_dmul>
 801dd60:	4b76      	ldr	r3, [pc, #472]	@ (801df3c <_dtoa_r+0x5cc>)
 801dd62:	2200      	movs	r2, #0
 801dd64:	f7e2 fac2 	bl	80002ec <__adddf3>
 801dd68:	4605      	mov	r5, r0
 801dd6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dd6e:	2c00      	cmp	r4, #0
 801dd70:	f040 808d 	bne.w	801de8e <_dtoa_r+0x51e>
 801dd74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd78:	4b71      	ldr	r3, [pc, #452]	@ (801df40 <_dtoa_r+0x5d0>)
 801dd7a:	2200      	movs	r2, #0
 801dd7c:	f7e2 fab4 	bl	80002e8 <__aeabi_dsub>
 801dd80:	4602      	mov	r2, r0
 801dd82:	460b      	mov	r3, r1
 801dd84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dd88:	462a      	mov	r2, r5
 801dd8a:	4633      	mov	r3, r6
 801dd8c:	f7e2 fef4 	bl	8000b78 <__aeabi_dcmpgt>
 801dd90:	2800      	cmp	r0, #0
 801dd92:	f040 828b 	bne.w	801e2ac <_dtoa_r+0x93c>
 801dd96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd9a:	462a      	mov	r2, r5
 801dd9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dda0:	f7e2 fecc 	bl	8000b3c <__aeabi_dcmplt>
 801dda4:	2800      	cmp	r0, #0
 801dda6:	f040 8128 	bne.w	801dffa <_dtoa_r+0x68a>
 801ddaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801ddae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ddb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	f2c0 815a 	blt.w	801e06e <_dtoa_r+0x6fe>
 801ddba:	2f0e      	cmp	r7, #14
 801ddbc:	f300 8157 	bgt.w	801e06e <_dtoa_r+0x6fe>
 801ddc0:	4b5a      	ldr	r3, [pc, #360]	@ (801df2c <_dtoa_r+0x5bc>)
 801ddc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ddc6:	ed93 7b00 	vldr	d7, [r3]
 801ddca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	ed8d 7b00 	vstr	d7, [sp]
 801ddd2:	da03      	bge.n	801dddc <_dtoa_r+0x46c>
 801ddd4:	9b07      	ldr	r3, [sp, #28]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	f340 8101 	ble.w	801dfde <_dtoa_r+0x66e>
 801dddc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dde0:	4656      	mov	r6, sl
 801dde2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dde6:	4620      	mov	r0, r4
 801dde8:	4629      	mov	r1, r5
 801ddea:	f7e2 fd5f 	bl	80008ac <__aeabi_ddiv>
 801ddee:	f7e2 fee3 	bl	8000bb8 <__aeabi_d2iz>
 801ddf2:	4680      	mov	r8, r0
 801ddf4:	f7e2 fbc6 	bl	8000584 <__aeabi_i2d>
 801ddf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ddfc:	f7e2 fc2c 	bl	8000658 <__aeabi_dmul>
 801de00:	4602      	mov	r2, r0
 801de02:	460b      	mov	r3, r1
 801de04:	4620      	mov	r0, r4
 801de06:	4629      	mov	r1, r5
 801de08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801de0c:	f7e2 fa6c 	bl	80002e8 <__aeabi_dsub>
 801de10:	f806 4b01 	strb.w	r4, [r6], #1
 801de14:	9d07      	ldr	r5, [sp, #28]
 801de16:	eba6 040a 	sub.w	r4, r6, sl
 801de1a:	42a5      	cmp	r5, r4
 801de1c:	4602      	mov	r2, r0
 801de1e:	460b      	mov	r3, r1
 801de20:	f040 8117 	bne.w	801e052 <_dtoa_r+0x6e2>
 801de24:	f7e2 fa62 	bl	80002ec <__adddf3>
 801de28:	e9dd 2300 	ldrd	r2, r3, [sp]
 801de2c:	4604      	mov	r4, r0
 801de2e:	460d      	mov	r5, r1
 801de30:	f7e2 fea2 	bl	8000b78 <__aeabi_dcmpgt>
 801de34:	2800      	cmp	r0, #0
 801de36:	f040 80f9 	bne.w	801e02c <_dtoa_r+0x6bc>
 801de3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801de3e:	4620      	mov	r0, r4
 801de40:	4629      	mov	r1, r5
 801de42:	f7e2 fe71 	bl	8000b28 <__aeabi_dcmpeq>
 801de46:	b118      	cbz	r0, 801de50 <_dtoa_r+0x4e0>
 801de48:	f018 0f01 	tst.w	r8, #1
 801de4c:	f040 80ee 	bne.w	801e02c <_dtoa_r+0x6bc>
 801de50:	4649      	mov	r1, r9
 801de52:	4658      	mov	r0, fp
 801de54:	f000 fc90 	bl	801e778 <_Bfree>
 801de58:	2300      	movs	r3, #0
 801de5a:	7033      	strb	r3, [r6, #0]
 801de5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de5e:	3701      	adds	r7, #1
 801de60:	601f      	str	r7, [r3, #0]
 801de62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801de64:	2b00      	cmp	r3, #0
 801de66:	f000 831d 	beq.w	801e4a4 <_dtoa_r+0xb34>
 801de6a:	601e      	str	r6, [r3, #0]
 801de6c:	e31a      	b.n	801e4a4 <_dtoa_r+0xb34>
 801de6e:	07e2      	lsls	r2, r4, #31
 801de70:	d505      	bpl.n	801de7e <_dtoa_r+0x50e>
 801de72:	e9d5 2300 	ldrd	r2, r3, [r5]
 801de76:	f7e2 fbef 	bl	8000658 <__aeabi_dmul>
 801de7a:	3601      	adds	r6, #1
 801de7c:	2301      	movs	r3, #1
 801de7e:	1064      	asrs	r4, r4, #1
 801de80:	3508      	adds	r5, #8
 801de82:	e73f      	b.n	801dd04 <_dtoa_r+0x394>
 801de84:	2602      	movs	r6, #2
 801de86:	e742      	b.n	801dd0e <_dtoa_r+0x39e>
 801de88:	9c07      	ldr	r4, [sp, #28]
 801de8a:	9704      	str	r7, [sp, #16]
 801de8c:	e761      	b.n	801dd52 <_dtoa_r+0x3e2>
 801de8e:	4b27      	ldr	r3, [pc, #156]	@ (801df2c <_dtoa_r+0x5bc>)
 801de90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801de96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801de9a:	4454      	add	r4, sl
 801de9c:	2900      	cmp	r1, #0
 801de9e:	d053      	beq.n	801df48 <_dtoa_r+0x5d8>
 801dea0:	4928      	ldr	r1, [pc, #160]	@ (801df44 <_dtoa_r+0x5d4>)
 801dea2:	2000      	movs	r0, #0
 801dea4:	f7e2 fd02 	bl	80008ac <__aeabi_ddiv>
 801dea8:	4633      	mov	r3, r6
 801deaa:	462a      	mov	r2, r5
 801deac:	f7e2 fa1c 	bl	80002e8 <__aeabi_dsub>
 801deb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801deb4:	4656      	mov	r6, sl
 801deb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801deba:	f7e2 fe7d 	bl	8000bb8 <__aeabi_d2iz>
 801debe:	4605      	mov	r5, r0
 801dec0:	f7e2 fb60 	bl	8000584 <__aeabi_i2d>
 801dec4:	4602      	mov	r2, r0
 801dec6:	460b      	mov	r3, r1
 801dec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801decc:	f7e2 fa0c 	bl	80002e8 <__aeabi_dsub>
 801ded0:	3530      	adds	r5, #48	@ 0x30
 801ded2:	4602      	mov	r2, r0
 801ded4:	460b      	mov	r3, r1
 801ded6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801deda:	f806 5b01 	strb.w	r5, [r6], #1
 801dede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dee2:	f7e2 fe2b 	bl	8000b3c <__aeabi_dcmplt>
 801dee6:	2800      	cmp	r0, #0
 801dee8:	d171      	bne.n	801dfce <_dtoa_r+0x65e>
 801deea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801deee:	4911      	ldr	r1, [pc, #68]	@ (801df34 <_dtoa_r+0x5c4>)
 801def0:	2000      	movs	r0, #0
 801def2:	f7e2 f9f9 	bl	80002e8 <__aeabi_dsub>
 801def6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801defa:	f7e2 fe1f 	bl	8000b3c <__aeabi_dcmplt>
 801defe:	2800      	cmp	r0, #0
 801df00:	f040 8095 	bne.w	801e02e <_dtoa_r+0x6be>
 801df04:	42a6      	cmp	r6, r4
 801df06:	f43f af50 	beq.w	801ddaa <_dtoa_r+0x43a>
 801df0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801df0e:	4b0a      	ldr	r3, [pc, #40]	@ (801df38 <_dtoa_r+0x5c8>)
 801df10:	2200      	movs	r2, #0
 801df12:	f7e2 fba1 	bl	8000658 <__aeabi_dmul>
 801df16:	4b08      	ldr	r3, [pc, #32]	@ (801df38 <_dtoa_r+0x5c8>)
 801df18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801df1c:	2200      	movs	r2, #0
 801df1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df22:	f7e2 fb99 	bl	8000658 <__aeabi_dmul>
 801df26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df2a:	e7c4      	b.n	801deb6 <_dtoa_r+0x546>
 801df2c:	08024d80 	.word	0x08024d80
 801df30:	08024d58 	.word	0x08024d58
 801df34:	3ff00000 	.word	0x3ff00000
 801df38:	40240000 	.word	0x40240000
 801df3c:	401c0000 	.word	0x401c0000
 801df40:	40140000 	.word	0x40140000
 801df44:	3fe00000 	.word	0x3fe00000
 801df48:	4631      	mov	r1, r6
 801df4a:	4628      	mov	r0, r5
 801df4c:	f7e2 fb84 	bl	8000658 <__aeabi_dmul>
 801df50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801df54:	9415      	str	r4, [sp, #84]	@ 0x54
 801df56:	4656      	mov	r6, sl
 801df58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df5c:	f7e2 fe2c 	bl	8000bb8 <__aeabi_d2iz>
 801df60:	4605      	mov	r5, r0
 801df62:	f7e2 fb0f 	bl	8000584 <__aeabi_i2d>
 801df66:	4602      	mov	r2, r0
 801df68:	460b      	mov	r3, r1
 801df6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df6e:	f7e2 f9bb 	bl	80002e8 <__aeabi_dsub>
 801df72:	3530      	adds	r5, #48	@ 0x30
 801df74:	f806 5b01 	strb.w	r5, [r6], #1
 801df78:	4602      	mov	r2, r0
 801df7a:	460b      	mov	r3, r1
 801df7c:	42a6      	cmp	r6, r4
 801df7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801df82:	f04f 0200 	mov.w	r2, #0
 801df86:	d124      	bne.n	801dfd2 <_dtoa_r+0x662>
 801df88:	4bac      	ldr	r3, [pc, #688]	@ (801e23c <_dtoa_r+0x8cc>)
 801df8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801df8e:	f7e2 f9ad 	bl	80002ec <__adddf3>
 801df92:	4602      	mov	r2, r0
 801df94:	460b      	mov	r3, r1
 801df96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df9a:	f7e2 fded 	bl	8000b78 <__aeabi_dcmpgt>
 801df9e:	2800      	cmp	r0, #0
 801dfa0:	d145      	bne.n	801e02e <_dtoa_r+0x6be>
 801dfa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801dfa6:	49a5      	ldr	r1, [pc, #660]	@ (801e23c <_dtoa_r+0x8cc>)
 801dfa8:	2000      	movs	r0, #0
 801dfaa:	f7e2 f99d 	bl	80002e8 <__aeabi_dsub>
 801dfae:	4602      	mov	r2, r0
 801dfb0:	460b      	mov	r3, r1
 801dfb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dfb6:	f7e2 fdc1 	bl	8000b3c <__aeabi_dcmplt>
 801dfba:	2800      	cmp	r0, #0
 801dfbc:	f43f aef5 	beq.w	801ddaa <_dtoa_r+0x43a>
 801dfc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801dfc2:	1e73      	subs	r3, r6, #1
 801dfc4:	9315      	str	r3, [sp, #84]	@ 0x54
 801dfc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dfca:	2b30      	cmp	r3, #48	@ 0x30
 801dfcc:	d0f8      	beq.n	801dfc0 <_dtoa_r+0x650>
 801dfce:	9f04      	ldr	r7, [sp, #16]
 801dfd0:	e73e      	b.n	801de50 <_dtoa_r+0x4e0>
 801dfd2:	4b9b      	ldr	r3, [pc, #620]	@ (801e240 <_dtoa_r+0x8d0>)
 801dfd4:	f7e2 fb40 	bl	8000658 <__aeabi_dmul>
 801dfd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dfdc:	e7bc      	b.n	801df58 <_dtoa_r+0x5e8>
 801dfde:	d10c      	bne.n	801dffa <_dtoa_r+0x68a>
 801dfe0:	4b98      	ldr	r3, [pc, #608]	@ (801e244 <_dtoa_r+0x8d4>)
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dfe8:	f7e2 fb36 	bl	8000658 <__aeabi_dmul>
 801dfec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dff0:	f7e2 fdb8 	bl	8000b64 <__aeabi_dcmpge>
 801dff4:	2800      	cmp	r0, #0
 801dff6:	f000 8157 	beq.w	801e2a8 <_dtoa_r+0x938>
 801dffa:	2400      	movs	r4, #0
 801dffc:	4625      	mov	r5, r4
 801dffe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e000:	43db      	mvns	r3, r3
 801e002:	9304      	str	r3, [sp, #16]
 801e004:	4656      	mov	r6, sl
 801e006:	2700      	movs	r7, #0
 801e008:	4621      	mov	r1, r4
 801e00a:	4658      	mov	r0, fp
 801e00c:	f000 fbb4 	bl	801e778 <_Bfree>
 801e010:	2d00      	cmp	r5, #0
 801e012:	d0dc      	beq.n	801dfce <_dtoa_r+0x65e>
 801e014:	b12f      	cbz	r7, 801e022 <_dtoa_r+0x6b2>
 801e016:	42af      	cmp	r7, r5
 801e018:	d003      	beq.n	801e022 <_dtoa_r+0x6b2>
 801e01a:	4639      	mov	r1, r7
 801e01c:	4658      	mov	r0, fp
 801e01e:	f000 fbab 	bl	801e778 <_Bfree>
 801e022:	4629      	mov	r1, r5
 801e024:	4658      	mov	r0, fp
 801e026:	f000 fba7 	bl	801e778 <_Bfree>
 801e02a:	e7d0      	b.n	801dfce <_dtoa_r+0x65e>
 801e02c:	9704      	str	r7, [sp, #16]
 801e02e:	4633      	mov	r3, r6
 801e030:	461e      	mov	r6, r3
 801e032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e036:	2a39      	cmp	r2, #57	@ 0x39
 801e038:	d107      	bne.n	801e04a <_dtoa_r+0x6da>
 801e03a:	459a      	cmp	sl, r3
 801e03c:	d1f8      	bne.n	801e030 <_dtoa_r+0x6c0>
 801e03e:	9a04      	ldr	r2, [sp, #16]
 801e040:	3201      	adds	r2, #1
 801e042:	9204      	str	r2, [sp, #16]
 801e044:	2230      	movs	r2, #48	@ 0x30
 801e046:	f88a 2000 	strb.w	r2, [sl]
 801e04a:	781a      	ldrb	r2, [r3, #0]
 801e04c:	3201      	adds	r2, #1
 801e04e:	701a      	strb	r2, [r3, #0]
 801e050:	e7bd      	b.n	801dfce <_dtoa_r+0x65e>
 801e052:	4b7b      	ldr	r3, [pc, #492]	@ (801e240 <_dtoa_r+0x8d0>)
 801e054:	2200      	movs	r2, #0
 801e056:	f7e2 faff 	bl	8000658 <__aeabi_dmul>
 801e05a:	2200      	movs	r2, #0
 801e05c:	2300      	movs	r3, #0
 801e05e:	4604      	mov	r4, r0
 801e060:	460d      	mov	r5, r1
 801e062:	f7e2 fd61 	bl	8000b28 <__aeabi_dcmpeq>
 801e066:	2800      	cmp	r0, #0
 801e068:	f43f aebb 	beq.w	801dde2 <_dtoa_r+0x472>
 801e06c:	e6f0      	b.n	801de50 <_dtoa_r+0x4e0>
 801e06e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e070:	2a00      	cmp	r2, #0
 801e072:	f000 80db 	beq.w	801e22c <_dtoa_r+0x8bc>
 801e076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e078:	2a01      	cmp	r2, #1
 801e07a:	f300 80bf 	bgt.w	801e1fc <_dtoa_r+0x88c>
 801e07e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e080:	2a00      	cmp	r2, #0
 801e082:	f000 80b7 	beq.w	801e1f4 <_dtoa_r+0x884>
 801e086:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e08a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e08c:	4646      	mov	r6, r8
 801e08e:	9a08      	ldr	r2, [sp, #32]
 801e090:	2101      	movs	r1, #1
 801e092:	441a      	add	r2, r3
 801e094:	4658      	mov	r0, fp
 801e096:	4498      	add	r8, r3
 801e098:	9208      	str	r2, [sp, #32]
 801e09a:	f000 fc21 	bl	801e8e0 <__i2b>
 801e09e:	4605      	mov	r5, r0
 801e0a0:	b15e      	cbz	r6, 801e0ba <_dtoa_r+0x74a>
 801e0a2:	9b08      	ldr	r3, [sp, #32]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	dd08      	ble.n	801e0ba <_dtoa_r+0x74a>
 801e0a8:	42b3      	cmp	r3, r6
 801e0aa:	9a08      	ldr	r2, [sp, #32]
 801e0ac:	bfa8      	it	ge
 801e0ae:	4633      	movge	r3, r6
 801e0b0:	eba8 0803 	sub.w	r8, r8, r3
 801e0b4:	1af6      	subs	r6, r6, r3
 801e0b6:	1ad3      	subs	r3, r2, r3
 801e0b8:	9308      	str	r3, [sp, #32]
 801e0ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0bc:	b1f3      	cbz	r3, 801e0fc <_dtoa_r+0x78c>
 801e0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	f000 80b7 	beq.w	801e234 <_dtoa_r+0x8c4>
 801e0c6:	b18c      	cbz	r4, 801e0ec <_dtoa_r+0x77c>
 801e0c8:	4629      	mov	r1, r5
 801e0ca:	4622      	mov	r2, r4
 801e0cc:	4658      	mov	r0, fp
 801e0ce:	f000 fcc7 	bl	801ea60 <__pow5mult>
 801e0d2:	464a      	mov	r2, r9
 801e0d4:	4601      	mov	r1, r0
 801e0d6:	4605      	mov	r5, r0
 801e0d8:	4658      	mov	r0, fp
 801e0da:	f000 fc17 	bl	801e90c <__multiply>
 801e0de:	4649      	mov	r1, r9
 801e0e0:	9004      	str	r0, [sp, #16]
 801e0e2:	4658      	mov	r0, fp
 801e0e4:	f000 fb48 	bl	801e778 <_Bfree>
 801e0e8:	9b04      	ldr	r3, [sp, #16]
 801e0ea:	4699      	mov	r9, r3
 801e0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0ee:	1b1a      	subs	r2, r3, r4
 801e0f0:	d004      	beq.n	801e0fc <_dtoa_r+0x78c>
 801e0f2:	4649      	mov	r1, r9
 801e0f4:	4658      	mov	r0, fp
 801e0f6:	f000 fcb3 	bl	801ea60 <__pow5mult>
 801e0fa:	4681      	mov	r9, r0
 801e0fc:	2101      	movs	r1, #1
 801e0fe:	4658      	mov	r0, fp
 801e100:	f000 fbee 	bl	801e8e0 <__i2b>
 801e104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e106:	4604      	mov	r4, r0
 801e108:	2b00      	cmp	r3, #0
 801e10a:	f000 81cf 	beq.w	801e4ac <_dtoa_r+0xb3c>
 801e10e:	461a      	mov	r2, r3
 801e110:	4601      	mov	r1, r0
 801e112:	4658      	mov	r0, fp
 801e114:	f000 fca4 	bl	801ea60 <__pow5mult>
 801e118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e11a:	2b01      	cmp	r3, #1
 801e11c:	4604      	mov	r4, r0
 801e11e:	f300 8095 	bgt.w	801e24c <_dtoa_r+0x8dc>
 801e122:	9b02      	ldr	r3, [sp, #8]
 801e124:	2b00      	cmp	r3, #0
 801e126:	f040 8087 	bne.w	801e238 <_dtoa_r+0x8c8>
 801e12a:	9b03      	ldr	r3, [sp, #12]
 801e12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e130:	2b00      	cmp	r3, #0
 801e132:	f040 8089 	bne.w	801e248 <_dtoa_r+0x8d8>
 801e136:	9b03      	ldr	r3, [sp, #12]
 801e138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e13c:	0d1b      	lsrs	r3, r3, #20
 801e13e:	051b      	lsls	r3, r3, #20
 801e140:	b12b      	cbz	r3, 801e14e <_dtoa_r+0x7de>
 801e142:	9b08      	ldr	r3, [sp, #32]
 801e144:	3301      	adds	r3, #1
 801e146:	9308      	str	r3, [sp, #32]
 801e148:	f108 0801 	add.w	r8, r8, #1
 801e14c:	2301      	movs	r3, #1
 801e14e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e152:	2b00      	cmp	r3, #0
 801e154:	f000 81b0 	beq.w	801e4b8 <_dtoa_r+0xb48>
 801e158:	6923      	ldr	r3, [r4, #16]
 801e15a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e15e:	6918      	ldr	r0, [r3, #16]
 801e160:	f000 fb72 	bl	801e848 <__hi0bits>
 801e164:	f1c0 0020 	rsb	r0, r0, #32
 801e168:	9b08      	ldr	r3, [sp, #32]
 801e16a:	4418      	add	r0, r3
 801e16c:	f010 001f 	ands.w	r0, r0, #31
 801e170:	d077      	beq.n	801e262 <_dtoa_r+0x8f2>
 801e172:	f1c0 0320 	rsb	r3, r0, #32
 801e176:	2b04      	cmp	r3, #4
 801e178:	dd6b      	ble.n	801e252 <_dtoa_r+0x8e2>
 801e17a:	9b08      	ldr	r3, [sp, #32]
 801e17c:	f1c0 001c 	rsb	r0, r0, #28
 801e180:	4403      	add	r3, r0
 801e182:	4480      	add	r8, r0
 801e184:	4406      	add	r6, r0
 801e186:	9308      	str	r3, [sp, #32]
 801e188:	f1b8 0f00 	cmp.w	r8, #0
 801e18c:	dd05      	ble.n	801e19a <_dtoa_r+0x82a>
 801e18e:	4649      	mov	r1, r9
 801e190:	4642      	mov	r2, r8
 801e192:	4658      	mov	r0, fp
 801e194:	f000 fcbe 	bl	801eb14 <__lshift>
 801e198:	4681      	mov	r9, r0
 801e19a:	9b08      	ldr	r3, [sp, #32]
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	dd05      	ble.n	801e1ac <_dtoa_r+0x83c>
 801e1a0:	4621      	mov	r1, r4
 801e1a2:	461a      	mov	r2, r3
 801e1a4:	4658      	mov	r0, fp
 801e1a6:	f000 fcb5 	bl	801eb14 <__lshift>
 801e1aa:	4604      	mov	r4, r0
 801e1ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d059      	beq.n	801e266 <_dtoa_r+0x8f6>
 801e1b2:	4621      	mov	r1, r4
 801e1b4:	4648      	mov	r0, r9
 801e1b6:	f000 fd19 	bl	801ebec <__mcmp>
 801e1ba:	2800      	cmp	r0, #0
 801e1bc:	da53      	bge.n	801e266 <_dtoa_r+0x8f6>
 801e1be:	1e7b      	subs	r3, r7, #1
 801e1c0:	9304      	str	r3, [sp, #16]
 801e1c2:	4649      	mov	r1, r9
 801e1c4:	2300      	movs	r3, #0
 801e1c6:	220a      	movs	r2, #10
 801e1c8:	4658      	mov	r0, fp
 801e1ca:	f000 faf7 	bl	801e7bc <__multadd>
 801e1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e1d0:	4681      	mov	r9, r0
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	f000 8172 	beq.w	801e4bc <_dtoa_r+0xb4c>
 801e1d8:	2300      	movs	r3, #0
 801e1da:	4629      	mov	r1, r5
 801e1dc:	220a      	movs	r2, #10
 801e1de:	4658      	mov	r0, fp
 801e1e0:	f000 faec 	bl	801e7bc <__multadd>
 801e1e4:	9b00      	ldr	r3, [sp, #0]
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	4605      	mov	r5, r0
 801e1ea:	dc67      	bgt.n	801e2bc <_dtoa_r+0x94c>
 801e1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1ee:	2b02      	cmp	r3, #2
 801e1f0:	dc41      	bgt.n	801e276 <_dtoa_r+0x906>
 801e1f2:	e063      	b.n	801e2bc <_dtoa_r+0x94c>
 801e1f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e1f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e1fa:	e746      	b.n	801e08a <_dtoa_r+0x71a>
 801e1fc:	9b07      	ldr	r3, [sp, #28]
 801e1fe:	1e5c      	subs	r4, r3, #1
 801e200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e202:	42a3      	cmp	r3, r4
 801e204:	bfbf      	itttt	lt
 801e206:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e208:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e20a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e20c:	1ae3      	sublt	r3, r4, r3
 801e20e:	bfb4      	ite	lt
 801e210:	18d2      	addlt	r2, r2, r3
 801e212:	1b1c      	subge	r4, r3, r4
 801e214:	9b07      	ldr	r3, [sp, #28]
 801e216:	bfbc      	itt	lt
 801e218:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e21a:	2400      	movlt	r4, #0
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	bfb5      	itete	lt
 801e220:	eba8 0603 	sublt.w	r6, r8, r3
 801e224:	9b07      	ldrge	r3, [sp, #28]
 801e226:	2300      	movlt	r3, #0
 801e228:	4646      	movge	r6, r8
 801e22a:	e730      	b.n	801e08e <_dtoa_r+0x71e>
 801e22c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e22e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e230:	4646      	mov	r6, r8
 801e232:	e735      	b.n	801e0a0 <_dtoa_r+0x730>
 801e234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e236:	e75c      	b.n	801e0f2 <_dtoa_r+0x782>
 801e238:	2300      	movs	r3, #0
 801e23a:	e788      	b.n	801e14e <_dtoa_r+0x7de>
 801e23c:	3fe00000 	.word	0x3fe00000
 801e240:	40240000 	.word	0x40240000
 801e244:	40140000 	.word	0x40140000
 801e248:	9b02      	ldr	r3, [sp, #8]
 801e24a:	e780      	b.n	801e14e <_dtoa_r+0x7de>
 801e24c:	2300      	movs	r3, #0
 801e24e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e250:	e782      	b.n	801e158 <_dtoa_r+0x7e8>
 801e252:	d099      	beq.n	801e188 <_dtoa_r+0x818>
 801e254:	9a08      	ldr	r2, [sp, #32]
 801e256:	331c      	adds	r3, #28
 801e258:	441a      	add	r2, r3
 801e25a:	4498      	add	r8, r3
 801e25c:	441e      	add	r6, r3
 801e25e:	9208      	str	r2, [sp, #32]
 801e260:	e792      	b.n	801e188 <_dtoa_r+0x818>
 801e262:	4603      	mov	r3, r0
 801e264:	e7f6      	b.n	801e254 <_dtoa_r+0x8e4>
 801e266:	9b07      	ldr	r3, [sp, #28]
 801e268:	9704      	str	r7, [sp, #16]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	dc20      	bgt.n	801e2b0 <_dtoa_r+0x940>
 801e26e:	9300      	str	r3, [sp, #0]
 801e270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e272:	2b02      	cmp	r3, #2
 801e274:	dd1e      	ble.n	801e2b4 <_dtoa_r+0x944>
 801e276:	9b00      	ldr	r3, [sp, #0]
 801e278:	2b00      	cmp	r3, #0
 801e27a:	f47f aec0 	bne.w	801dffe <_dtoa_r+0x68e>
 801e27e:	4621      	mov	r1, r4
 801e280:	2205      	movs	r2, #5
 801e282:	4658      	mov	r0, fp
 801e284:	f000 fa9a 	bl	801e7bc <__multadd>
 801e288:	4601      	mov	r1, r0
 801e28a:	4604      	mov	r4, r0
 801e28c:	4648      	mov	r0, r9
 801e28e:	f000 fcad 	bl	801ebec <__mcmp>
 801e292:	2800      	cmp	r0, #0
 801e294:	f77f aeb3 	ble.w	801dffe <_dtoa_r+0x68e>
 801e298:	4656      	mov	r6, sl
 801e29a:	2331      	movs	r3, #49	@ 0x31
 801e29c:	f806 3b01 	strb.w	r3, [r6], #1
 801e2a0:	9b04      	ldr	r3, [sp, #16]
 801e2a2:	3301      	adds	r3, #1
 801e2a4:	9304      	str	r3, [sp, #16]
 801e2a6:	e6ae      	b.n	801e006 <_dtoa_r+0x696>
 801e2a8:	9c07      	ldr	r4, [sp, #28]
 801e2aa:	9704      	str	r7, [sp, #16]
 801e2ac:	4625      	mov	r5, r4
 801e2ae:	e7f3      	b.n	801e298 <_dtoa_r+0x928>
 801e2b0:	9b07      	ldr	r3, [sp, #28]
 801e2b2:	9300      	str	r3, [sp, #0]
 801e2b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	f000 8104 	beq.w	801e4c4 <_dtoa_r+0xb54>
 801e2bc:	2e00      	cmp	r6, #0
 801e2be:	dd05      	ble.n	801e2cc <_dtoa_r+0x95c>
 801e2c0:	4629      	mov	r1, r5
 801e2c2:	4632      	mov	r2, r6
 801e2c4:	4658      	mov	r0, fp
 801e2c6:	f000 fc25 	bl	801eb14 <__lshift>
 801e2ca:	4605      	mov	r5, r0
 801e2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d05a      	beq.n	801e388 <_dtoa_r+0xa18>
 801e2d2:	6869      	ldr	r1, [r5, #4]
 801e2d4:	4658      	mov	r0, fp
 801e2d6:	f000 fa0f 	bl	801e6f8 <_Balloc>
 801e2da:	4606      	mov	r6, r0
 801e2dc:	b928      	cbnz	r0, 801e2ea <_dtoa_r+0x97a>
 801e2de:	4b84      	ldr	r3, [pc, #528]	@ (801e4f0 <_dtoa_r+0xb80>)
 801e2e0:	4602      	mov	r2, r0
 801e2e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e2e6:	f7ff bb5a 	b.w	801d99e <_dtoa_r+0x2e>
 801e2ea:	692a      	ldr	r2, [r5, #16]
 801e2ec:	3202      	adds	r2, #2
 801e2ee:	0092      	lsls	r2, r2, #2
 801e2f0:	f105 010c 	add.w	r1, r5, #12
 801e2f4:	300c      	adds	r0, #12
 801e2f6:	f7ff fa84 	bl	801d802 <memcpy>
 801e2fa:	2201      	movs	r2, #1
 801e2fc:	4631      	mov	r1, r6
 801e2fe:	4658      	mov	r0, fp
 801e300:	f000 fc08 	bl	801eb14 <__lshift>
 801e304:	f10a 0301 	add.w	r3, sl, #1
 801e308:	9307      	str	r3, [sp, #28]
 801e30a:	9b00      	ldr	r3, [sp, #0]
 801e30c:	4453      	add	r3, sl
 801e30e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e310:	9b02      	ldr	r3, [sp, #8]
 801e312:	f003 0301 	and.w	r3, r3, #1
 801e316:	462f      	mov	r7, r5
 801e318:	930a      	str	r3, [sp, #40]	@ 0x28
 801e31a:	4605      	mov	r5, r0
 801e31c:	9b07      	ldr	r3, [sp, #28]
 801e31e:	4621      	mov	r1, r4
 801e320:	3b01      	subs	r3, #1
 801e322:	4648      	mov	r0, r9
 801e324:	9300      	str	r3, [sp, #0]
 801e326:	f7ff fa99 	bl	801d85c <quorem>
 801e32a:	4639      	mov	r1, r7
 801e32c:	9002      	str	r0, [sp, #8]
 801e32e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e332:	4648      	mov	r0, r9
 801e334:	f000 fc5a 	bl	801ebec <__mcmp>
 801e338:	462a      	mov	r2, r5
 801e33a:	9008      	str	r0, [sp, #32]
 801e33c:	4621      	mov	r1, r4
 801e33e:	4658      	mov	r0, fp
 801e340:	f000 fc70 	bl	801ec24 <__mdiff>
 801e344:	68c2      	ldr	r2, [r0, #12]
 801e346:	4606      	mov	r6, r0
 801e348:	bb02      	cbnz	r2, 801e38c <_dtoa_r+0xa1c>
 801e34a:	4601      	mov	r1, r0
 801e34c:	4648      	mov	r0, r9
 801e34e:	f000 fc4d 	bl	801ebec <__mcmp>
 801e352:	4602      	mov	r2, r0
 801e354:	4631      	mov	r1, r6
 801e356:	4658      	mov	r0, fp
 801e358:	920e      	str	r2, [sp, #56]	@ 0x38
 801e35a:	f000 fa0d 	bl	801e778 <_Bfree>
 801e35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e362:	9e07      	ldr	r6, [sp, #28]
 801e364:	ea43 0102 	orr.w	r1, r3, r2
 801e368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e36a:	4319      	orrs	r1, r3
 801e36c:	d110      	bne.n	801e390 <_dtoa_r+0xa20>
 801e36e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e372:	d029      	beq.n	801e3c8 <_dtoa_r+0xa58>
 801e374:	9b08      	ldr	r3, [sp, #32]
 801e376:	2b00      	cmp	r3, #0
 801e378:	dd02      	ble.n	801e380 <_dtoa_r+0xa10>
 801e37a:	9b02      	ldr	r3, [sp, #8]
 801e37c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e380:	9b00      	ldr	r3, [sp, #0]
 801e382:	f883 8000 	strb.w	r8, [r3]
 801e386:	e63f      	b.n	801e008 <_dtoa_r+0x698>
 801e388:	4628      	mov	r0, r5
 801e38a:	e7bb      	b.n	801e304 <_dtoa_r+0x994>
 801e38c:	2201      	movs	r2, #1
 801e38e:	e7e1      	b.n	801e354 <_dtoa_r+0x9e4>
 801e390:	9b08      	ldr	r3, [sp, #32]
 801e392:	2b00      	cmp	r3, #0
 801e394:	db04      	blt.n	801e3a0 <_dtoa_r+0xa30>
 801e396:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e398:	430b      	orrs	r3, r1
 801e39a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e39c:	430b      	orrs	r3, r1
 801e39e:	d120      	bne.n	801e3e2 <_dtoa_r+0xa72>
 801e3a0:	2a00      	cmp	r2, #0
 801e3a2:	dded      	ble.n	801e380 <_dtoa_r+0xa10>
 801e3a4:	4649      	mov	r1, r9
 801e3a6:	2201      	movs	r2, #1
 801e3a8:	4658      	mov	r0, fp
 801e3aa:	f000 fbb3 	bl	801eb14 <__lshift>
 801e3ae:	4621      	mov	r1, r4
 801e3b0:	4681      	mov	r9, r0
 801e3b2:	f000 fc1b 	bl	801ebec <__mcmp>
 801e3b6:	2800      	cmp	r0, #0
 801e3b8:	dc03      	bgt.n	801e3c2 <_dtoa_r+0xa52>
 801e3ba:	d1e1      	bne.n	801e380 <_dtoa_r+0xa10>
 801e3bc:	f018 0f01 	tst.w	r8, #1
 801e3c0:	d0de      	beq.n	801e380 <_dtoa_r+0xa10>
 801e3c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e3c6:	d1d8      	bne.n	801e37a <_dtoa_r+0xa0a>
 801e3c8:	9a00      	ldr	r2, [sp, #0]
 801e3ca:	2339      	movs	r3, #57	@ 0x39
 801e3cc:	7013      	strb	r3, [r2, #0]
 801e3ce:	4633      	mov	r3, r6
 801e3d0:	461e      	mov	r6, r3
 801e3d2:	3b01      	subs	r3, #1
 801e3d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e3d8:	2a39      	cmp	r2, #57	@ 0x39
 801e3da:	d052      	beq.n	801e482 <_dtoa_r+0xb12>
 801e3dc:	3201      	adds	r2, #1
 801e3de:	701a      	strb	r2, [r3, #0]
 801e3e0:	e612      	b.n	801e008 <_dtoa_r+0x698>
 801e3e2:	2a00      	cmp	r2, #0
 801e3e4:	dd07      	ble.n	801e3f6 <_dtoa_r+0xa86>
 801e3e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e3ea:	d0ed      	beq.n	801e3c8 <_dtoa_r+0xa58>
 801e3ec:	9a00      	ldr	r2, [sp, #0]
 801e3ee:	f108 0301 	add.w	r3, r8, #1
 801e3f2:	7013      	strb	r3, [r2, #0]
 801e3f4:	e608      	b.n	801e008 <_dtoa_r+0x698>
 801e3f6:	9b07      	ldr	r3, [sp, #28]
 801e3f8:	9a07      	ldr	r2, [sp, #28]
 801e3fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e400:	4293      	cmp	r3, r2
 801e402:	d028      	beq.n	801e456 <_dtoa_r+0xae6>
 801e404:	4649      	mov	r1, r9
 801e406:	2300      	movs	r3, #0
 801e408:	220a      	movs	r2, #10
 801e40a:	4658      	mov	r0, fp
 801e40c:	f000 f9d6 	bl	801e7bc <__multadd>
 801e410:	42af      	cmp	r7, r5
 801e412:	4681      	mov	r9, r0
 801e414:	f04f 0300 	mov.w	r3, #0
 801e418:	f04f 020a 	mov.w	r2, #10
 801e41c:	4639      	mov	r1, r7
 801e41e:	4658      	mov	r0, fp
 801e420:	d107      	bne.n	801e432 <_dtoa_r+0xac2>
 801e422:	f000 f9cb 	bl	801e7bc <__multadd>
 801e426:	4607      	mov	r7, r0
 801e428:	4605      	mov	r5, r0
 801e42a:	9b07      	ldr	r3, [sp, #28]
 801e42c:	3301      	adds	r3, #1
 801e42e:	9307      	str	r3, [sp, #28]
 801e430:	e774      	b.n	801e31c <_dtoa_r+0x9ac>
 801e432:	f000 f9c3 	bl	801e7bc <__multadd>
 801e436:	4629      	mov	r1, r5
 801e438:	4607      	mov	r7, r0
 801e43a:	2300      	movs	r3, #0
 801e43c:	220a      	movs	r2, #10
 801e43e:	4658      	mov	r0, fp
 801e440:	f000 f9bc 	bl	801e7bc <__multadd>
 801e444:	4605      	mov	r5, r0
 801e446:	e7f0      	b.n	801e42a <_dtoa_r+0xaba>
 801e448:	9b00      	ldr	r3, [sp, #0]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	bfcc      	ite	gt
 801e44e:	461e      	movgt	r6, r3
 801e450:	2601      	movle	r6, #1
 801e452:	4456      	add	r6, sl
 801e454:	2700      	movs	r7, #0
 801e456:	4649      	mov	r1, r9
 801e458:	2201      	movs	r2, #1
 801e45a:	4658      	mov	r0, fp
 801e45c:	f000 fb5a 	bl	801eb14 <__lshift>
 801e460:	4621      	mov	r1, r4
 801e462:	4681      	mov	r9, r0
 801e464:	f000 fbc2 	bl	801ebec <__mcmp>
 801e468:	2800      	cmp	r0, #0
 801e46a:	dcb0      	bgt.n	801e3ce <_dtoa_r+0xa5e>
 801e46c:	d102      	bne.n	801e474 <_dtoa_r+0xb04>
 801e46e:	f018 0f01 	tst.w	r8, #1
 801e472:	d1ac      	bne.n	801e3ce <_dtoa_r+0xa5e>
 801e474:	4633      	mov	r3, r6
 801e476:	461e      	mov	r6, r3
 801e478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e47c:	2a30      	cmp	r2, #48	@ 0x30
 801e47e:	d0fa      	beq.n	801e476 <_dtoa_r+0xb06>
 801e480:	e5c2      	b.n	801e008 <_dtoa_r+0x698>
 801e482:	459a      	cmp	sl, r3
 801e484:	d1a4      	bne.n	801e3d0 <_dtoa_r+0xa60>
 801e486:	9b04      	ldr	r3, [sp, #16]
 801e488:	3301      	adds	r3, #1
 801e48a:	9304      	str	r3, [sp, #16]
 801e48c:	2331      	movs	r3, #49	@ 0x31
 801e48e:	f88a 3000 	strb.w	r3, [sl]
 801e492:	e5b9      	b.n	801e008 <_dtoa_r+0x698>
 801e494:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e496:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e4f4 <_dtoa_r+0xb84>
 801e49a:	b11b      	cbz	r3, 801e4a4 <_dtoa_r+0xb34>
 801e49c:	f10a 0308 	add.w	r3, sl, #8
 801e4a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e4a2:	6013      	str	r3, [r2, #0]
 801e4a4:	4650      	mov	r0, sl
 801e4a6:	b019      	add	sp, #100	@ 0x64
 801e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4ae:	2b01      	cmp	r3, #1
 801e4b0:	f77f ae37 	ble.w	801e122 <_dtoa_r+0x7b2>
 801e4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4b6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4b8:	2001      	movs	r0, #1
 801e4ba:	e655      	b.n	801e168 <_dtoa_r+0x7f8>
 801e4bc:	9b00      	ldr	r3, [sp, #0]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	f77f aed6 	ble.w	801e270 <_dtoa_r+0x900>
 801e4c4:	4656      	mov	r6, sl
 801e4c6:	4621      	mov	r1, r4
 801e4c8:	4648      	mov	r0, r9
 801e4ca:	f7ff f9c7 	bl	801d85c <quorem>
 801e4ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e4d2:	f806 8b01 	strb.w	r8, [r6], #1
 801e4d6:	9b00      	ldr	r3, [sp, #0]
 801e4d8:	eba6 020a 	sub.w	r2, r6, sl
 801e4dc:	4293      	cmp	r3, r2
 801e4de:	ddb3      	ble.n	801e448 <_dtoa_r+0xad8>
 801e4e0:	4649      	mov	r1, r9
 801e4e2:	2300      	movs	r3, #0
 801e4e4:	220a      	movs	r2, #10
 801e4e6:	4658      	mov	r0, fp
 801e4e8:	f000 f968 	bl	801e7bc <__multadd>
 801e4ec:	4681      	mov	r9, r0
 801e4ee:	e7ea      	b.n	801e4c6 <_dtoa_r+0xb56>
 801e4f0:	08024cdd 	.word	0x08024cdd
 801e4f4:	08024c78 	.word	0x08024c78

0801e4f8 <_free_r>:
 801e4f8:	b538      	push	{r3, r4, r5, lr}
 801e4fa:	4605      	mov	r5, r0
 801e4fc:	2900      	cmp	r1, #0
 801e4fe:	d041      	beq.n	801e584 <_free_r+0x8c>
 801e500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e504:	1f0c      	subs	r4, r1, #4
 801e506:	2b00      	cmp	r3, #0
 801e508:	bfb8      	it	lt
 801e50a:	18e4      	addlt	r4, r4, r3
 801e50c:	f000 f8e8 	bl	801e6e0 <__malloc_lock>
 801e510:	4a1d      	ldr	r2, [pc, #116]	@ (801e588 <_free_r+0x90>)
 801e512:	6813      	ldr	r3, [r2, #0]
 801e514:	b933      	cbnz	r3, 801e524 <_free_r+0x2c>
 801e516:	6063      	str	r3, [r4, #4]
 801e518:	6014      	str	r4, [r2, #0]
 801e51a:	4628      	mov	r0, r5
 801e51c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e520:	f000 b8e4 	b.w	801e6ec <__malloc_unlock>
 801e524:	42a3      	cmp	r3, r4
 801e526:	d908      	bls.n	801e53a <_free_r+0x42>
 801e528:	6820      	ldr	r0, [r4, #0]
 801e52a:	1821      	adds	r1, r4, r0
 801e52c:	428b      	cmp	r3, r1
 801e52e:	bf01      	itttt	eq
 801e530:	6819      	ldreq	r1, [r3, #0]
 801e532:	685b      	ldreq	r3, [r3, #4]
 801e534:	1809      	addeq	r1, r1, r0
 801e536:	6021      	streq	r1, [r4, #0]
 801e538:	e7ed      	b.n	801e516 <_free_r+0x1e>
 801e53a:	461a      	mov	r2, r3
 801e53c:	685b      	ldr	r3, [r3, #4]
 801e53e:	b10b      	cbz	r3, 801e544 <_free_r+0x4c>
 801e540:	42a3      	cmp	r3, r4
 801e542:	d9fa      	bls.n	801e53a <_free_r+0x42>
 801e544:	6811      	ldr	r1, [r2, #0]
 801e546:	1850      	adds	r0, r2, r1
 801e548:	42a0      	cmp	r0, r4
 801e54a:	d10b      	bne.n	801e564 <_free_r+0x6c>
 801e54c:	6820      	ldr	r0, [r4, #0]
 801e54e:	4401      	add	r1, r0
 801e550:	1850      	adds	r0, r2, r1
 801e552:	4283      	cmp	r3, r0
 801e554:	6011      	str	r1, [r2, #0]
 801e556:	d1e0      	bne.n	801e51a <_free_r+0x22>
 801e558:	6818      	ldr	r0, [r3, #0]
 801e55a:	685b      	ldr	r3, [r3, #4]
 801e55c:	6053      	str	r3, [r2, #4]
 801e55e:	4408      	add	r0, r1
 801e560:	6010      	str	r0, [r2, #0]
 801e562:	e7da      	b.n	801e51a <_free_r+0x22>
 801e564:	d902      	bls.n	801e56c <_free_r+0x74>
 801e566:	230c      	movs	r3, #12
 801e568:	602b      	str	r3, [r5, #0]
 801e56a:	e7d6      	b.n	801e51a <_free_r+0x22>
 801e56c:	6820      	ldr	r0, [r4, #0]
 801e56e:	1821      	adds	r1, r4, r0
 801e570:	428b      	cmp	r3, r1
 801e572:	bf04      	itt	eq
 801e574:	6819      	ldreq	r1, [r3, #0]
 801e576:	685b      	ldreq	r3, [r3, #4]
 801e578:	6063      	str	r3, [r4, #4]
 801e57a:	bf04      	itt	eq
 801e57c:	1809      	addeq	r1, r1, r0
 801e57e:	6021      	streq	r1, [r4, #0]
 801e580:	6054      	str	r4, [r2, #4]
 801e582:	e7ca      	b.n	801e51a <_free_r+0x22>
 801e584:	bd38      	pop	{r3, r4, r5, pc}
 801e586:	bf00      	nop
 801e588:	2000f63c 	.word	0x2000f63c

0801e58c <malloc>:
 801e58c:	4b02      	ldr	r3, [pc, #8]	@ (801e598 <malloc+0xc>)
 801e58e:	4601      	mov	r1, r0
 801e590:	6818      	ldr	r0, [r3, #0]
 801e592:	f000 b825 	b.w	801e5e0 <_malloc_r>
 801e596:	bf00      	nop
 801e598:	20000094 	.word	0x20000094

0801e59c <sbrk_aligned>:
 801e59c:	b570      	push	{r4, r5, r6, lr}
 801e59e:	4e0f      	ldr	r6, [pc, #60]	@ (801e5dc <sbrk_aligned+0x40>)
 801e5a0:	460c      	mov	r4, r1
 801e5a2:	6831      	ldr	r1, [r6, #0]
 801e5a4:	4605      	mov	r5, r0
 801e5a6:	b911      	cbnz	r1, 801e5ae <sbrk_aligned+0x12>
 801e5a8:	f001 f814 	bl	801f5d4 <_sbrk_r>
 801e5ac:	6030      	str	r0, [r6, #0]
 801e5ae:	4621      	mov	r1, r4
 801e5b0:	4628      	mov	r0, r5
 801e5b2:	f001 f80f 	bl	801f5d4 <_sbrk_r>
 801e5b6:	1c43      	adds	r3, r0, #1
 801e5b8:	d103      	bne.n	801e5c2 <sbrk_aligned+0x26>
 801e5ba:	f04f 34ff 	mov.w	r4, #4294967295
 801e5be:	4620      	mov	r0, r4
 801e5c0:	bd70      	pop	{r4, r5, r6, pc}
 801e5c2:	1cc4      	adds	r4, r0, #3
 801e5c4:	f024 0403 	bic.w	r4, r4, #3
 801e5c8:	42a0      	cmp	r0, r4
 801e5ca:	d0f8      	beq.n	801e5be <sbrk_aligned+0x22>
 801e5cc:	1a21      	subs	r1, r4, r0
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f001 f800 	bl	801f5d4 <_sbrk_r>
 801e5d4:	3001      	adds	r0, #1
 801e5d6:	d1f2      	bne.n	801e5be <sbrk_aligned+0x22>
 801e5d8:	e7ef      	b.n	801e5ba <sbrk_aligned+0x1e>
 801e5da:	bf00      	nop
 801e5dc:	2000f638 	.word	0x2000f638

0801e5e0 <_malloc_r>:
 801e5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5e4:	1ccd      	adds	r5, r1, #3
 801e5e6:	f025 0503 	bic.w	r5, r5, #3
 801e5ea:	3508      	adds	r5, #8
 801e5ec:	2d0c      	cmp	r5, #12
 801e5ee:	bf38      	it	cc
 801e5f0:	250c      	movcc	r5, #12
 801e5f2:	2d00      	cmp	r5, #0
 801e5f4:	4606      	mov	r6, r0
 801e5f6:	db01      	blt.n	801e5fc <_malloc_r+0x1c>
 801e5f8:	42a9      	cmp	r1, r5
 801e5fa:	d904      	bls.n	801e606 <_malloc_r+0x26>
 801e5fc:	230c      	movs	r3, #12
 801e5fe:	6033      	str	r3, [r6, #0]
 801e600:	2000      	movs	r0, #0
 801e602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e6dc <_malloc_r+0xfc>
 801e60a:	f000 f869 	bl	801e6e0 <__malloc_lock>
 801e60e:	f8d8 3000 	ldr.w	r3, [r8]
 801e612:	461c      	mov	r4, r3
 801e614:	bb44      	cbnz	r4, 801e668 <_malloc_r+0x88>
 801e616:	4629      	mov	r1, r5
 801e618:	4630      	mov	r0, r6
 801e61a:	f7ff ffbf 	bl	801e59c <sbrk_aligned>
 801e61e:	1c43      	adds	r3, r0, #1
 801e620:	4604      	mov	r4, r0
 801e622:	d158      	bne.n	801e6d6 <_malloc_r+0xf6>
 801e624:	f8d8 4000 	ldr.w	r4, [r8]
 801e628:	4627      	mov	r7, r4
 801e62a:	2f00      	cmp	r7, #0
 801e62c:	d143      	bne.n	801e6b6 <_malloc_r+0xd6>
 801e62e:	2c00      	cmp	r4, #0
 801e630:	d04b      	beq.n	801e6ca <_malloc_r+0xea>
 801e632:	6823      	ldr	r3, [r4, #0]
 801e634:	4639      	mov	r1, r7
 801e636:	4630      	mov	r0, r6
 801e638:	eb04 0903 	add.w	r9, r4, r3
 801e63c:	f000 ffca 	bl	801f5d4 <_sbrk_r>
 801e640:	4581      	cmp	r9, r0
 801e642:	d142      	bne.n	801e6ca <_malloc_r+0xea>
 801e644:	6821      	ldr	r1, [r4, #0]
 801e646:	1a6d      	subs	r5, r5, r1
 801e648:	4629      	mov	r1, r5
 801e64a:	4630      	mov	r0, r6
 801e64c:	f7ff ffa6 	bl	801e59c <sbrk_aligned>
 801e650:	3001      	adds	r0, #1
 801e652:	d03a      	beq.n	801e6ca <_malloc_r+0xea>
 801e654:	6823      	ldr	r3, [r4, #0]
 801e656:	442b      	add	r3, r5
 801e658:	6023      	str	r3, [r4, #0]
 801e65a:	f8d8 3000 	ldr.w	r3, [r8]
 801e65e:	685a      	ldr	r2, [r3, #4]
 801e660:	bb62      	cbnz	r2, 801e6bc <_malloc_r+0xdc>
 801e662:	f8c8 7000 	str.w	r7, [r8]
 801e666:	e00f      	b.n	801e688 <_malloc_r+0xa8>
 801e668:	6822      	ldr	r2, [r4, #0]
 801e66a:	1b52      	subs	r2, r2, r5
 801e66c:	d420      	bmi.n	801e6b0 <_malloc_r+0xd0>
 801e66e:	2a0b      	cmp	r2, #11
 801e670:	d917      	bls.n	801e6a2 <_malloc_r+0xc2>
 801e672:	1961      	adds	r1, r4, r5
 801e674:	42a3      	cmp	r3, r4
 801e676:	6025      	str	r5, [r4, #0]
 801e678:	bf18      	it	ne
 801e67a:	6059      	strne	r1, [r3, #4]
 801e67c:	6863      	ldr	r3, [r4, #4]
 801e67e:	bf08      	it	eq
 801e680:	f8c8 1000 	streq.w	r1, [r8]
 801e684:	5162      	str	r2, [r4, r5]
 801e686:	604b      	str	r3, [r1, #4]
 801e688:	4630      	mov	r0, r6
 801e68a:	f000 f82f 	bl	801e6ec <__malloc_unlock>
 801e68e:	f104 000b 	add.w	r0, r4, #11
 801e692:	1d23      	adds	r3, r4, #4
 801e694:	f020 0007 	bic.w	r0, r0, #7
 801e698:	1ac2      	subs	r2, r0, r3
 801e69a:	bf1c      	itt	ne
 801e69c:	1a1b      	subne	r3, r3, r0
 801e69e:	50a3      	strne	r3, [r4, r2]
 801e6a0:	e7af      	b.n	801e602 <_malloc_r+0x22>
 801e6a2:	6862      	ldr	r2, [r4, #4]
 801e6a4:	42a3      	cmp	r3, r4
 801e6a6:	bf0c      	ite	eq
 801e6a8:	f8c8 2000 	streq.w	r2, [r8]
 801e6ac:	605a      	strne	r2, [r3, #4]
 801e6ae:	e7eb      	b.n	801e688 <_malloc_r+0xa8>
 801e6b0:	4623      	mov	r3, r4
 801e6b2:	6864      	ldr	r4, [r4, #4]
 801e6b4:	e7ae      	b.n	801e614 <_malloc_r+0x34>
 801e6b6:	463c      	mov	r4, r7
 801e6b8:	687f      	ldr	r7, [r7, #4]
 801e6ba:	e7b6      	b.n	801e62a <_malloc_r+0x4a>
 801e6bc:	461a      	mov	r2, r3
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	42a3      	cmp	r3, r4
 801e6c2:	d1fb      	bne.n	801e6bc <_malloc_r+0xdc>
 801e6c4:	2300      	movs	r3, #0
 801e6c6:	6053      	str	r3, [r2, #4]
 801e6c8:	e7de      	b.n	801e688 <_malloc_r+0xa8>
 801e6ca:	230c      	movs	r3, #12
 801e6cc:	6033      	str	r3, [r6, #0]
 801e6ce:	4630      	mov	r0, r6
 801e6d0:	f000 f80c 	bl	801e6ec <__malloc_unlock>
 801e6d4:	e794      	b.n	801e600 <_malloc_r+0x20>
 801e6d6:	6005      	str	r5, [r0, #0]
 801e6d8:	e7d6      	b.n	801e688 <_malloc_r+0xa8>
 801e6da:	bf00      	nop
 801e6dc:	2000f63c 	.word	0x2000f63c

0801e6e0 <__malloc_lock>:
 801e6e0:	4801      	ldr	r0, [pc, #4]	@ (801e6e8 <__malloc_lock+0x8>)
 801e6e2:	f7ff b88c 	b.w	801d7fe <__retarget_lock_acquire_recursive>
 801e6e6:	bf00      	nop
 801e6e8:	2000f634 	.word	0x2000f634

0801e6ec <__malloc_unlock>:
 801e6ec:	4801      	ldr	r0, [pc, #4]	@ (801e6f4 <__malloc_unlock+0x8>)
 801e6ee:	f7ff b887 	b.w	801d800 <__retarget_lock_release_recursive>
 801e6f2:	bf00      	nop
 801e6f4:	2000f634 	.word	0x2000f634

0801e6f8 <_Balloc>:
 801e6f8:	b570      	push	{r4, r5, r6, lr}
 801e6fa:	69c6      	ldr	r6, [r0, #28]
 801e6fc:	4604      	mov	r4, r0
 801e6fe:	460d      	mov	r5, r1
 801e700:	b976      	cbnz	r6, 801e720 <_Balloc+0x28>
 801e702:	2010      	movs	r0, #16
 801e704:	f7ff ff42 	bl	801e58c <malloc>
 801e708:	4602      	mov	r2, r0
 801e70a:	61e0      	str	r0, [r4, #28]
 801e70c:	b920      	cbnz	r0, 801e718 <_Balloc+0x20>
 801e70e:	4b18      	ldr	r3, [pc, #96]	@ (801e770 <_Balloc+0x78>)
 801e710:	4818      	ldr	r0, [pc, #96]	@ (801e774 <_Balloc+0x7c>)
 801e712:	216b      	movs	r1, #107	@ 0x6b
 801e714:	f7ff f884 	bl	801d820 <__assert_func>
 801e718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e71c:	6006      	str	r6, [r0, #0]
 801e71e:	60c6      	str	r6, [r0, #12]
 801e720:	69e6      	ldr	r6, [r4, #28]
 801e722:	68f3      	ldr	r3, [r6, #12]
 801e724:	b183      	cbz	r3, 801e748 <_Balloc+0x50>
 801e726:	69e3      	ldr	r3, [r4, #28]
 801e728:	68db      	ldr	r3, [r3, #12]
 801e72a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e72e:	b9b8      	cbnz	r0, 801e760 <_Balloc+0x68>
 801e730:	2101      	movs	r1, #1
 801e732:	fa01 f605 	lsl.w	r6, r1, r5
 801e736:	1d72      	adds	r2, r6, #5
 801e738:	0092      	lsls	r2, r2, #2
 801e73a:	4620      	mov	r0, r4
 801e73c:	f000 ff61 	bl	801f602 <_calloc_r>
 801e740:	b160      	cbz	r0, 801e75c <_Balloc+0x64>
 801e742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e746:	e00e      	b.n	801e766 <_Balloc+0x6e>
 801e748:	2221      	movs	r2, #33	@ 0x21
 801e74a:	2104      	movs	r1, #4
 801e74c:	4620      	mov	r0, r4
 801e74e:	f000 ff58 	bl	801f602 <_calloc_r>
 801e752:	69e3      	ldr	r3, [r4, #28]
 801e754:	60f0      	str	r0, [r6, #12]
 801e756:	68db      	ldr	r3, [r3, #12]
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d1e4      	bne.n	801e726 <_Balloc+0x2e>
 801e75c:	2000      	movs	r0, #0
 801e75e:	bd70      	pop	{r4, r5, r6, pc}
 801e760:	6802      	ldr	r2, [r0, #0]
 801e762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e766:	2300      	movs	r3, #0
 801e768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e76c:	e7f7      	b.n	801e75e <_Balloc+0x66>
 801e76e:	bf00      	nop
 801e770:	08024a98 	.word	0x08024a98
 801e774:	08024cee 	.word	0x08024cee

0801e778 <_Bfree>:
 801e778:	b570      	push	{r4, r5, r6, lr}
 801e77a:	69c6      	ldr	r6, [r0, #28]
 801e77c:	4605      	mov	r5, r0
 801e77e:	460c      	mov	r4, r1
 801e780:	b976      	cbnz	r6, 801e7a0 <_Bfree+0x28>
 801e782:	2010      	movs	r0, #16
 801e784:	f7ff ff02 	bl	801e58c <malloc>
 801e788:	4602      	mov	r2, r0
 801e78a:	61e8      	str	r0, [r5, #28]
 801e78c:	b920      	cbnz	r0, 801e798 <_Bfree+0x20>
 801e78e:	4b09      	ldr	r3, [pc, #36]	@ (801e7b4 <_Bfree+0x3c>)
 801e790:	4809      	ldr	r0, [pc, #36]	@ (801e7b8 <_Bfree+0x40>)
 801e792:	218f      	movs	r1, #143	@ 0x8f
 801e794:	f7ff f844 	bl	801d820 <__assert_func>
 801e798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e79c:	6006      	str	r6, [r0, #0]
 801e79e:	60c6      	str	r6, [r0, #12]
 801e7a0:	b13c      	cbz	r4, 801e7b2 <_Bfree+0x3a>
 801e7a2:	69eb      	ldr	r3, [r5, #28]
 801e7a4:	6862      	ldr	r2, [r4, #4]
 801e7a6:	68db      	ldr	r3, [r3, #12]
 801e7a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e7ac:	6021      	str	r1, [r4, #0]
 801e7ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e7b2:	bd70      	pop	{r4, r5, r6, pc}
 801e7b4:	08024a98 	.word	0x08024a98
 801e7b8:	08024cee 	.word	0x08024cee

0801e7bc <__multadd>:
 801e7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7c0:	690d      	ldr	r5, [r1, #16]
 801e7c2:	4607      	mov	r7, r0
 801e7c4:	460c      	mov	r4, r1
 801e7c6:	461e      	mov	r6, r3
 801e7c8:	f101 0c14 	add.w	ip, r1, #20
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	f8dc 3000 	ldr.w	r3, [ip]
 801e7d2:	b299      	uxth	r1, r3
 801e7d4:	fb02 6101 	mla	r1, r2, r1, r6
 801e7d8:	0c1e      	lsrs	r6, r3, #16
 801e7da:	0c0b      	lsrs	r3, r1, #16
 801e7dc:	fb02 3306 	mla	r3, r2, r6, r3
 801e7e0:	b289      	uxth	r1, r1
 801e7e2:	3001      	adds	r0, #1
 801e7e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e7e8:	4285      	cmp	r5, r0
 801e7ea:	f84c 1b04 	str.w	r1, [ip], #4
 801e7ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e7f2:	dcec      	bgt.n	801e7ce <__multadd+0x12>
 801e7f4:	b30e      	cbz	r6, 801e83a <__multadd+0x7e>
 801e7f6:	68a3      	ldr	r3, [r4, #8]
 801e7f8:	42ab      	cmp	r3, r5
 801e7fa:	dc19      	bgt.n	801e830 <__multadd+0x74>
 801e7fc:	6861      	ldr	r1, [r4, #4]
 801e7fe:	4638      	mov	r0, r7
 801e800:	3101      	adds	r1, #1
 801e802:	f7ff ff79 	bl	801e6f8 <_Balloc>
 801e806:	4680      	mov	r8, r0
 801e808:	b928      	cbnz	r0, 801e816 <__multadd+0x5a>
 801e80a:	4602      	mov	r2, r0
 801e80c:	4b0c      	ldr	r3, [pc, #48]	@ (801e840 <__multadd+0x84>)
 801e80e:	480d      	ldr	r0, [pc, #52]	@ (801e844 <__multadd+0x88>)
 801e810:	21ba      	movs	r1, #186	@ 0xba
 801e812:	f7ff f805 	bl	801d820 <__assert_func>
 801e816:	6922      	ldr	r2, [r4, #16]
 801e818:	3202      	adds	r2, #2
 801e81a:	f104 010c 	add.w	r1, r4, #12
 801e81e:	0092      	lsls	r2, r2, #2
 801e820:	300c      	adds	r0, #12
 801e822:	f7fe ffee 	bl	801d802 <memcpy>
 801e826:	4621      	mov	r1, r4
 801e828:	4638      	mov	r0, r7
 801e82a:	f7ff ffa5 	bl	801e778 <_Bfree>
 801e82e:	4644      	mov	r4, r8
 801e830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e834:	3501      	adds	r5, #1
 801e836:	615e      	str	r6, [r3, #20]
 801e838:	6125      	str	r5, [r4, #16]
 801e83a:	4620      	mov	r0, r4
 801e83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e840:	08024cdd 	.word	0x08024cdd
 801e844:	08024cee 	.word	0x08024cee

0801e848 <__hi0bits>:
 801e848:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e84c:	4603      	mov	r3, r0
 801e84e:	bf36      	itet	cc
 801e850:	0403      	lslcc	r3, r0, #16
 801e852:	2000      	movcs	r0, #0
 801e854:	2010      	movcc	r0, #16
 801e856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e85a:	bf3c      	itt	cc
 801e85c:	021b      	lslcc	r3, r3, #8
 801e85e:	3008      	addcc	r0, #8
 801e860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e864:	bf3c      	itt	cc
 801e866:	011b      	lslcc	r3, r3, #4
 801e868:	3004      	addcc	r0, #4
 801e86a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e86e:	bf3c      	itt	cc
 801e870:	009b      	lslcc	r3, r3, #2
 801e872:	3002      	addcc	r0, #2
 801e874:	2b00      	cmp	r3, #0
 801e876:	db05      	blt.n	801e884 <__hi0bits+0x3c>
 801e878:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e87c:	f100 0001 	add.w	r0, r0, #1
 801e880:	bf08      	it	eq
 801e882:	2020      	moveq	r0, #32
 801e884:	4770      	bx	lr

0801e886 <__lo0bits>:
 801e886:	6803      	ldr	r3, [r0, #0]
 801e888:	4602      	mov	r2, r0
 801e88a:	f013 0007 	ands.w	r0, r3, #7
 801e88e:	d00b      	beq.n	801e8a8 <__lo0bits+0x22>
 801e890:	07d9      	lsls	r1, r3, #31
 801e892:	d421      	bmi.n	801e8d8 <__lo0bits+0x52>
 801e894:	0798      	lsls	r0, r3, #30
 801e896:	bf49      	itett	mi
 801e898:	085b      	lsrmi	r3, r3, #1
 801e89a:	089b      	lsrpl	r3, r3, #2
 801e89c:	2001      	movmi	r0, #1
 801e89e:	6013      	strmi	r3, [r2, #0]
 801e8a0:	bf5c      	itt	pl
 801e8a2:	6013      	strpl	r3, [r2, #0]
 801e8a4:	2002      	movpl	r0, #2
 801e8a6:	4770      	bx	lr
 801e8a8:	b299      	uxth	r1, r3
 801e8aa:	b909      	cbnz	r1, 801e8b0 <__lo0bits+0x2a>
 801e8ac:	0c1b      	lsrs	r3, r3, #16
 801e8ae:	2010      	movs	r0, #16
 801e8b0:	b2d9      	uxtb	r1, r3
 801e8b2:	b909      	cbnz	r1, 801e8b8 <__lo0bits+0x32>
 801e8b4:	3008      	adds	r0, #8
 801e8b6:	0a1b      	lsrs	r3, r3, #8
 801e8b8:	0719      	lsls	r1, r3, #28
 801e8ba:	bf04      	itt	eq
 801e8bc:	091b      	lsreq	r3, r3, #4
 801e8be:	3004      	addeq	r0, #4
 801e8c0:	0799      	lsls	r1, r3, #30
 801e8c2:	bf04      	itt	eq
 801e8c4:	089b      	lsreq	r3, r3, #2
 801e8c6:	3002      	addeq	r0, #2
 801e8c8:	07d9      	lsls	r1, r3, #31
 801e8ca:	d403      	bmi.n	801e8d4 <__lo0bits+0x4e>
 801e8cc:	085b      	lsrs	r3, r3, #1
 801e8ce:	f100 0001 	add.w	r0, r0, #1
 801e8d2:	d003      	beq.n	801e8dc <__lo0bits+0x56>
 801e8d4:	6013      	str	r3, [r2, #0]
 801e8d6:	4770      	bx	lr
 801e8d8:	2000      	movs	r0, #0
 801e8da:	4770      	bx	lr
 801e8dc:	2020      	movs	r0, #32
 801e8de:	4770      	bx	lr

0801e8e0 <__i2b>:
 801e8e0:	b510      	push	{r4, lr}
 801e8e2:	460c      	mov	r4, r1
 801e8e4:	2101      	movs	r1, #1
 801e8e6:	f7ff ff07 	bl	801e6f8 <_Balloc>
 801e8ea:	4602      	mov	r2, r0
 801e8ec:	b928      	cbnz	r0, 801e8fa <__i2b+0x1a>
 801e8ee:	4b05      	ldr	r3, [pc, #20]	@ (801e904 <__i2b+0x24>)
 801e8f0:	4805      	ldr	r0, [pc, #20]	@ (801e908 <__i2b+0x28>)
 801e8f2:	f240 1145 	movw	r1, #325	@ 0x145
 801e8f6:	f7fe ff93 	bl	801d820 <__assert_func>
 801e8fa:	2301      	movs	r3, #1
 801e8fc:	6144      	str	r4, [r0, #20]
 801e8fe:	6103      	str	r3, [r0, #16]
 801e900:	bd10      	pop	{r4, pc}
 801e902:	bf00      	nop
 801e904:	08024cdd 	.word	0x08024cdd
 801e908:	08024cee 	.word	0x08024cee

0801e90c <__multiply>:
 801e90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e910:	4614      	mov	r4, r2
 801e912:	690a      	ldr	r2, [r1, #16]
 801e914:	6923      	ldr	r3, [r4, #16]
 801e916:	429a      	cmp	r2, r3
 801e918:	bfa8      	it	ge
 801e91a:	4623      	movge	r3, r4
 801e91c:	460f      	mov	r7, r1
 801e91e:	bfa4      	itt	ge
 801e920:	460c      	movge	r4, r1
 801e922:	461f      	movge	r7, r3
 801e924:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e928:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e92c:	68a3      	ldr	r3, [r4, #8]
 801e92e:	6861      	ldr	r1, [r4, #4]
 801e930:	eb0a 0609 	add.w	r6, sl, r9
 801e934:	42b3      	cmp	r3, r6
 801e936:	b085      	sub	sp, #20
 801e938:	bfb8      	it	lt
 801e93a:	3101      	addlt	r1, #1
 801e93c:	f7ff fedc 	bl	801e6f8 <_Balloc>
 801e940:	b930      	cbnz	r0, 801e950 <__multiply+0x44>
 801e942:	4602      	mov	r2, r0
 801e944:	4b44      	ldr	r3, [pc, #272]	@ (801ea58 <__multiply+0x14c>)
 801e946:	4845      	ldr	r0, [pc, #276]	@ (801ea5c <__multiply+0x150>)
 801e948:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e94c:	f7fe ff68 	bl	801d820 <__assert_func>
 801e950:	f100 0514 	add.w	r5, r0, #20
 801e954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e958:	462b      	mov	r3, r5
 801e95a:	2200      	movs	r2, #0
 801e95c:	4543      	cmp	r3, r8
 801e95e:	d321      	bcc.n	801e9a4 <__multiply+0x98>
 801e960:	f107 0114 	add.w	r1, r7, #20
 801e964:	f104 0214 	add.w	r2, r4, #20
 801e968:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e96c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e970:	9302      	str	r3, [sp, #8]
 801e972:	1b13      	subs	r3, r2, r4
 801e974:	3b15      	subs	r3, #21
 801e976:	f023 0303 	bic.w	r3, r3, #3
 801e97a:	3304      	adds	r3, #4
 801e97c:	f104 0715 	add.w	r7, r4, #21
 801e980:	42ba      	cmp	r2, r7
 801e982:	bf38      	it	cc
 801e984:	2304      	movcc	r3, #4
 801e986:	9301      	str	r3, [sp, #4]
 801e988:	9b02      	ldr	r3, [sp, #8]
 801e98a:	9103      	str	r1, [sp, #12]
 801e98c:	428b      	cmp	r3, r1
 801e98e:	d80c      	bhi.n	801e9aa <__multiply+0x9e>
 801e990:	2e00      	cmp	r6, #0
 801e992:	dd03      	ble.n	801e99c <__multiply+0x90>
 801e994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d05b      	beq.n	801ea54 <__multiply+0x148>
 801e99c:	6106      	str	r6, [r0, #16]
 801e99e:	b005      	add	sp, #20
 801e9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9a4:	f843 2b04 	str.w	r2, [r3], #4
 801e9a8:	e7d8      	b.n	801e95c <__multiply+0x50>
 801e9aa:	f8b1 a000 	ldrh.w	sl, [r1]
 801e9ae:	f1ba 0f00 	cmp.w	sl, #0
 801e9b2:	d024      	beq.n	801e9fe <__multiply+0xf2>
 801e9b4:	f104 0e14 	add.w	lr, r4, #20
 801e9b8:	46a9      	mov	r9, r5
 801e9ba:	f04f 0c00 	mov.w	ip, #0
 801e9be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e9c2:	f8d9 3000 	ldr.w	r3, [r9]
 801e9c6:	fa1f fb87 	uxth.w	fp, r7
 801e9ca:	b29b      	uxth	r3, r3
 801e9cc:	fb0a 330b 	mla	r3, sl, fp, r3
 801e9d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e9d4:	f8d9 7000 	ldr.w	r7, [r9]
 801e9d8:	4463      	add	r3, ip
 801e9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e9de:	fb0a c70b 	mla	r7, sl, fp, ip
 801e9e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e9ec:	4572      	cmp	r2, lr
 801e9ee:	f849 3b04 	str.w	r3, [r9], #4
 801e9f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e9f6:	d8e2      	bhi.n	801e9be <__multiply+0xb2>
 801e9f8:	9b01      	ldr	r3, [sp, #4]
 801e9fa:	f845 c003 	str.w	ip, [r5, r3]
 801e9fe:	9b03      	ldr	r3, [sp, #12]
 801ea00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ea04:	3104      	adds	r1, #4
 801ea06:	f1b9 0f00 	cmp.w	r9, #0
 801ea0a:	d021      	beq.n	801ea50 <__multiply+0x144>
 801ea0c:	682b      	ldr	r3, [r5, #0]
 801ea0e:	f104 0c14 	add.w	ip, r4, #20
 801ea12:	46ae      	mov	lr, r5
 801ea14:	f04f 0a00 	mov.w	sl, #0
 801ea18:	f8bc b000 	ldrh.w	fp, [ip]
 801ea1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ea20:	fb09 770b 	mla	r7, r9, fp, r7
 801ea24:	4457      	add	r7, sl
 801ea26:	b29b      	uxth	r3, r3
 801ea28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ea2c:	f84e 3b04 	str.w	r3, [lr], #4
 801ea30:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ea34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ea38:	f8be 3000 	ldrh.w	r3, [lr]
 801ea3c:	fb09 330a 	mla	r3, r9, sl, r3
 801ea40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801ea44:	4562      	cmp	r2, ip
 801ea46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ea4a:	d8e5      	bhi.n	801ea18 <__multiply+0x10c>
 801ea4c:	9f01      	ldr	r7, [sp, #4]
 801ea4e:	51eb      	str	r3, [r5, r7]
 801ea50:	3504      	adds	r5, #4
 801ea52:	e799      	b.n	801e988 <__multiply+0x7c>
 801ea54:	3e01      	subs	r6, #1
 801ea56:	e79b      	b.n	801e990 <__multiply+0x84>
 801ea58:	08024cdd 	.word	0x08024cdd
 801ea5c:	08024cee 	.word	0x08024cee

0801ea60 <__pow5mult>:
 801ea60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea64:	4615      	mov	r5, r2
 801ea66:	f012 0203 	ands.w	r2, r2, #3
 801ea6a:	4607      	mov	r7, r0
 801ea6c:	460e      	mov	r6, r1
 801ea6e:	d007      	beq.n	801ea80 <__pow5mult+0x20>
 801ea70:	4c25      	ldr	r4, [pc, #148]	@ (801eb08 <__pow5mult+0xa8>)
 801ea72:	3a01      	subs	r2, #1
 801ea74:	2300      	movs	r3, #0
 801ea76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ea7a:	f7ff fe9f 	bl	801e7bc <__multadd>
 801ea7e:	4606      	mov	r6, r0
 801ea80:	10ad      	asrs	r5, r5, #2
 801ea82:	d03d      	beq.n	801eb00 <__pow5mult+0xa0>
 801ea84:	69fc      	ldr	r4, [r7, #28]
 801ea86:	b97c      	cbnz	r4, 801eaa8 <__pow5mult+0x48>
 801ea88:	2010      	movs	r0, #16
 801ea8a:	f7ff fd7f 	bl	801e58c <malloc>
 801ea8e:	4602      	mov	r2, r0
 801ea90:	61f8      	str	r0, [r7, #28]
 801ea92:	b928      	cbnz	r0, 801eaa0 <__pow5mult+0x40>
 801ea94:	4b1d      	ldr	r3, [pc, #116]	@ (801eb0c <__pow5mult+0xac>)
 801ea96:	481e      	ldr	r0, [pc, #120]	@ (801eb10 <__pow5mult+0xb0>)
 801ea98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ea9c:	f7fe fec0 	bl	801d820 <__assert_func>
 801eaa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801eaa4:	6004      	str	r4, [r0, #0]
 801eaa6:	60c4      	str	r4, [r0, #12]
 801eaa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801eaac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801eab0:	b94c      	cbnz	r4, 801eac6 <__pow5mult+0x66>
 801eab2:	f240 2171 	movw	r1, #625	@ 0x271
 801eab6:	4638      	mov	r0, r7
 801eab8:	f7ff ff12 	bl	801e8e0 <__i2b>
 801eabc:	2300      	movs	r3, #0
 801eabe:	f8c8 0008 	str.w	r0, [r8, #8]
 801eac2:	4604      	mov	r4, r0
 801eac4:	6003      	str	r3, [r0, #0]
 801eac6:	f04f 0900 	mov.w	r9, #0
 801eaca:	07eb      	lsls	r3, r5, #31
 801eacc:	d50a      	bpl.n	801eae4 <__pow5mult+0x84>
 801eace:	4631      	mov	r1, r6
 801ead0:	4622      	mov	r2, r4
 801ead2:	4638      	mov	r0, r7
 801ead4:	f7ff ff1a 	bl	801e90c <__multiply>
 801ead8:	4631      	mov	r1, r6
 801eada:	4680      	mov	r8, r0
 801eadc:	4638      	mov	r0, r7
 801eade:	f7ff fe4b 	bl	801e778 <_Bfree>
 801eae2:	4646      	mov	r6, r8
 801eae4:	106d      	asrs	r5, r5, #1
 801eae6:	d00b      	beq.n	801eb00 <__pow5mult+0xa0>
 801eae8:	6820      	ldr	r0, [r4, #0]
 801eaea:	b938      	cbnz	r0, 801eafc <__pow5mult+0x9c>
 801eaec:	4622      	mov	r2, r4
 801eaee:	4621      	mov	r1, r4
 801eaf0:	4638      	mov	r0, r7
 801eaf2:	f7ff ff0b 	bl	801e90c <__multiply>
 801eaf6:	6020      	str	r0, [r4, #0]
 801eaf8:	f8c0 9000 	str.w	r9, [r0]
 801eafc:	4604      	mov	r4, r0
 801eafe:	e7e4      	b.n	801eaca <__pow5mult+0x6a>
 801eb00:	4630      	mov	r0, r6
 801eb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eb06:	bf00      	nop
 801eb08:	08024d48 	.word	0x08024d48
 801eb0c:	08024a98 	.word	0x08024a98
 801eb10:	08024cee 	.word	0x08024cee

0801eb14 <__lshift>:
 801eb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb18:	460c      	mov	r4, r1
 801eb1a:	6849      	ldr	r1, [r1, #4]
 801eb1c:	6923      	ldr	r3, [r4, #16]
 801eb1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801eb22:	68a3      	ldr	r3, [r4, #8]
 801eb24:	4607      	mov	r7, r0
 801eb26:	4691      	mov	r9, r2
 801eb28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801eb2c:	f108 0601 	add.w	r6, r8, #1
 801eb30:	42b3      	cmp	r3, r6
 801eb32:	db0b      	blt.n	801eb4c <__lshift+0x38>
 801eb34:	4638      	mov	r0, r7
 801eb36:	f7ff fddf 	bl	801e6f8 <_Balloc>
 801eb3a:	4605      	mov	r5, r0
 801eb3c:	b948      	cbnz	r0, 801eb52 <__lshift+0x3e>
 801eb3e:	4602      	mov	r2, r0
 801eb40:	4b28      	ldr	r3, [pc, #160]	@ (801ebe4 <__lshift+0xd0>)
 801eb42:	4829      	ldr	r0, [pc, #164]	@ (801ebe8 <__lshift+0xd4>)
 801eb44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801eb48:	f7fe fe6a 	bl	801d820 <__assert_func>
 801eb4c:	3101      	adds	r1, #1
 801eb4e:	005b      	lsls	r3, r3, #1
 801eb50:	e7ee      	b.n	801eb30 <__lshift+0x1c>
 801eb52:	2300      	movs	r3, #0
 801eb54:	f100 0114 	add.w	r1, r0, #20
 801eb58:	f100 0210 	add.w	r2, r0, #16
 801eb5c:	4618      	mov	r0, r3
 801eb5e:	4553      	cmp	r3, sl
 801eb60:	db33      	blt.n	801ebca <__lshift+0xb6>
 801eb62:	6920      	ldr	r0, [r4, #16]
 801eb64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eb68:	f104 0314 	add.w	r3, r4, #20
 801eb6c:	f019 091f 	ands.w	r9, r9, #31
 801eb70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eb74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eb78:	d02b      	beq.n	801ebd2 <__lshift+0xbe>
 801eb7a:	f1c9 0e20 	rsb	lr, r9, #32
 801eb7e:	468a      	mov	sl, r1
 801eb80:	2200      	movs	r2, #0
 801eb82:	6818      	ldr	r0, [r3, #0]
 801eb84:	fa00 f009 	lsl.w	r0, r0, r9
 801eb88:	4310      	orrs	r0, r2
 801eb8a:	f84a 0b04 	str.w	r0, [sl], #4
 801eb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb92:	459c      	cmp	ip, r3
 801eb94:	fa22 f20e 	lsr.w	r2, r2, lr
 801eb98:	d8f3      	bhi.n	801eb82 <__lshift+0x6e>
 801eb9a:	ebac 0304 	sub.w	r3, ip, r4
 801eb9e:	3b15      	subs	r3, #21
 801eba0:	f023 0303 	bic.w	r3, r3, #3
 801eba4:	3304      	adds	r3, #4
 801eba6:	f104 0015 	add.w	r0, r4, #21
 801ebaa:	4584      	cmp	ip, r0
 801ebac:	bf38      	it	cc
 801ebae:	2304      	movcc	r3, #4
 801ebb0:	50ca      	str	r2, [r1, r3]
 801ebb2:	b10a      	cbz	r2, 801ebb8 <__lshift+0xa4>
 801ebb4:	f108 0602 	add.w	r6, r8, #2
 801ebb8:	3e01      	subs	r6, #1
 801ebba:	4638      	mov	r0, r7
 801ebbc:	612e      	str	r6, [r5, #16]
 801ebbe:	4621      	mov	r1, r4
 801ebc0:	f7ff fdda 	bl	801e778 <_Bfree>
 801ebc4:	4628      	mov	r0, r5
 801ebc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ebca:	f842 0f04 	str.w	r0, [r2, #4]!
 801ebce:	3301      	adds	r3, #1
 801ebd0:	e7c5      	b.n	801eb5e <__lshift+0x4a>
 801ebd2:	3904      	subs	r1, #4
 801ebd4:	f853 2b04 	ldr.w	r2, [r3], #4
 801ebd8:	f841 2f04 	str.w	r2, [r1, #4]!
 801ebdc:	459c      	cmp	ip, r3
 801ebde:	d8f9      	bhi.n	801ebd4 <__lshift+0xc0>
 801ebe0:	e7ea      	b.n	801ebb8 <__lshift+0xa4>
 801ebe2:	bf00      	nop
 801ebe4:	08024cdd 	.word	0x08024cdd
 801ebe8:	08024cee 	.word	0x08024cee

0801ebec <__mcmp>:
 801ebec:	690a      	ldr	r2, [r1, #16]
 801ebee:	4603      	mov	r3, r0
 801ebf0:	6900      	ldr	r0, [r0, #16]
 801ebf2:	1a80      	subs	r0, r0, r2
 801ebf4:	b530      	push	{r4, r5, lr}
 801ebf6:	d10e      	bne.n	801ec16 <__mcmp+0x2a>
 801ebf8:	3314      	adds	r3, #20
 801ebfa:	3114      	adds	r1, #20
 801ebfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ec00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ec04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ec08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ec0c:	4295      	cmp	r5, r2
 801ec0e:	d003      	beq.n	801ec18 <__mcmp+0x2c>
 801ec10:	d205      	bcs.n	801ec1e <__mcmp+0x32>
 801ec12:	f04f 30ff 	mov.w	r0, #4294967295
 801ec16:	bd30      	pop	{r4, r5, pc}
 801ec18:	42a3      	cmp	r3, r4
 801ec1a:	d3f3      	bcc.n	801ec04 <__mcmp+0x18>
 801ec1c:	e7fb      	b.n	801ec16 <__mcmp+0x2a>
 801ec1e:	2001      	movs	r0, #1
 801ec20:	e7f9      	b.n	801ec16 <__mcmp+0x2a>
	...

0801ec24 <__mdiff>:
 801ec24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec28:	4689      	mov	r9, r1
 801ec2a:	4606      	mov	r6, r0
 801ec2c:	4611      	mov	r1, r2
 801ec2e:	4648      	mov	r0, r9
 801ec30:	4614      	mov	r4, r2
 801ec32:	f7ff ffdb 	bl	801ebec <__mcmp>
 801ec36:	1e05      	subs	r5, r0, #0
 801ec38:	d112      	bne.n	801ec60 <__mdiff+0x3c>
 801ec3a:	4629      	mov	r1, r5
 801ec3c:	4630      	mov	r0, r6
 801ec3e:	f7ff fd5b 	bl	801e6f8 <_Balloc>
 801ec42:	4602      	mov	r2, r0
 801ec44:	b928      	cbnz	r0, 801ec52 <__mdiff+0x2e>
 801ec46:	4b3f      	ldr	r3, [pc, #252]	@ (801ed44 <__mdiff+0x120>)
 801ec48:	f240 2137 	movw	r1, #567	@ 0x237
 801ec4c:	483e      	ldr	r0, [pc, #248]	@ (801ed48 <__mdiff+0x124>)
 801ec4e:	f7fe fde7 	bl	801d820 <__assert_func>
 801ec52:	2301      	movs	r3, #1
 801ec54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ec58:	4610      	mov	r0, r2
 801ec5a:	b003      	add	sp, #12
 801ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec60:	bfbc      	itt	lt
 801ec62:	464b      	movlt	r3, r9
 801ec64:	46a1      	movlt	r9, r4
 801ec66:	4630      	mov	r0, r6
 801ec68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ec6c:	bfba      	itte	lt
 801ec6e:	461c      	movlt	r4, r3
 801ec70:	2501      	movlt	r5, #1
 801ec72:	2500      	movge	r5, #0
 801ec74:	f7ff fd40 	bl	801e6f8 <_Balloc>
 801ec78:	4602      	mov	r2, r0
 801ec7a:	b918      	cbnz	r0, 801ec84 <__mdiff+0x60>
 801ec7c:	4b31      	ldr	r3, [pc, #196]	@ (801ed44 <__mdiff+0x120>)
 801ec7e:	f240 2145 	movw	r1, #581	@ 0x245
 801ec82:	e7e3      	b.n	801ec4c <__mdiff+0x28>
 801ec84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ec88:	6926      	ldr	r6, [r4, #16]
 801ec8a:	60c5      	str	r5, [r0, #12]
 801ec8c:	f109 0310 	add.w	r3, r9, #16
 801ec90:	f109 0514 	add.w	r5, r9, #20
 801ec94:	f104 0e14 	add.w	lr, r4, #20
 801ec98:	f100 0b14 	add.w	fp, r0, #20
 801ec9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801eca0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801eca4:	9301      	str	r3, [sp, #4]
 801eca6:	46d9      	mov	r9, fp
 801eca8:	f04f 0c00 	mov.w	ip, #0
 801ecac:	9b01      	ldr	r3, [sp, #4]
 801ecae:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ecb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ecb6:	9301      	str	r3, [sp, #4]
 801ecb8:	fa1f f38a 	uxth.w	r3, sl
 801ecbc:	4619      	mov	r1, r3
 801ecbe:	b283      	uxth	r3, r0
 801ecc0:	1acb      	subs	r3, r1, r3
 801ecc2:	0c00      	lsrs	r0, r0, #16
 801ecc4:	4463      	add	r3, ip
 801ecc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ecca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ecce:	b29b      	uxth	r3, r3
 801ecd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ecd4:	4576      	cmp	r6, lr
 801ecd6:	f849 3b04 	str.w	r3, [r9], #4
 801ecda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ecde:	d8e5      	bhi.n	801ecac <__mdiff+0x88>
 801ece0:	1b33      	subs	r3, r6, r4
 801ece2:	3b15      	subs	r3, #21
 801ece4:	f023 0303 	bic.w	r3, r3, #3
 801ece8:	3415      	adds	r4, #21
 801ecea:	3304      	adds	r3, #4
 801ecec:	42a6      	cmp	r6, r4
 801ecee:	bf38      	it	cc
 801ecf0:	2304      	movcc	r3, #4
 801ecf2:	441d      	add	r5, r3
 801ecf4:	445b      	add	r3, fp
 801ecf6:	461e      	mov	r6, r3
 801ecf8:	462c      	mov	r4, r5
 801ecfa:	4544      	cmp	r4, r8
 801ecfc:	d30e      	bcc.n	801ed1c <__mdiff+0xf8>
 801ecfe:	f108 0103 	add.w	r1, r8, #3
 801ed02:	1b49      	subs	r1, r1, r5
 801ed04:	f021 0103 	bic.w	r1, r1, #3
 801ed08:	3d03      	subs	r5, #3
 801ed0a:	45a8      	cmp	r8, r5
 801ed0c:	bf38      	it	cc
 801ed0e:	2100      	movcc	r1, #0
 801ed10:	440b      	add	r3, r1
 801ed12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ed16:	b191      	cbz	r1, 801ed3e <__mdiff+0x11a>
 801ed18:	6117      	str	r7, [r2, #16]
 801ed1a:	e79d      	b.n	801ec58 <__mdiff+0x34>
 801ed1c:	f854 1b04 	ldr.w	r1, [r4], #4
 801ed20:	46e6      	mov	lr, ip
 801ed22:	0c08      	lsrs	r0, r1, #16
 801ed24:	fa1c fc81 	uxtah	ip, ip, r1
 801ed28:	4471      	add	r1, lr
 801ed2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ed2e:	b289      	uxth	r1, r1
 801ed30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ed34:	f846 1b04 	str.w	r1, [r6], #4
 801ed38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ed3c:	e7dd      	b.n	801ecfa <__mdiff+0xd6>
 801ed3e:	3f01      	subs	r7, #1
 801ed40:	e7e7      	b.n	801ed12 <__mdiff+0xee>
 801ed42:	bf00      	nop
 801ed44:	08024cdd 	.word	0x08024cdd
 801ed48:	08024cee 	.word	0x08024cee

0801ed4c <__d2b>:
 801ed4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ed50:	460f      	mov	r7, r1
 801ed52:	2101      	movs	r1, #1
 801ed54:	ec59 8b10 	vmov	r8, r9, d0
 801ed58:	4616      	mov	r6, r2
 801ed5a:	f7ff fccd 	bl	801e6f8 <_Balloc>
 801ed5e:	4604      	mov	r4, r0
 801ed60:	b930      	cbnz	r0, 801ed70 <__d2b+0x24>
 801ed62:	4602      	mov	r2, r0
 801ed64:	4b23      	ldr	r3, [pc, #140]	@ (801edf4 <__d2b+0xa8>)
 801ed66:	4824      	ldr	r0, [pc, #144]	@ (801edf8 <__d2b+0xac>)
 801ed68:	f240 310f 	movw	r1, #783	@ 0x30f
 801ed6c:	f7fe fd58 	bl	801d820 <__assert_func>
 801ed70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ed74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ed78:	b10d      	cbz	r5, 801ed7e <__d2b+0x32>
 801ed7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ed7e:	9301      	str	r3, [sp, #4]
 801ed80:	f1b8 0300 	subs.w	r3, r8, #0
 801ed84:	d023      	beq.n	801edce <__d2b+0x82>
 801ed86:	4668      	mov	r0, sp
 801ed88:	9300      	str	r3, [sp, #0]
 801ed8a:	f7ff fd7c 	bl	801e886 <__lo0bits>
 801ed8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ed92:	b1d0      	cbz	r0, 801edca <__d2b+0x7e>
 801ed94:	f1c0 0320 	rsb	r3, r0, #32
 801ed98:	fa02 f303 	lsl.w	r3, r2, r3
 801ed9c:	430b      	orrs	r3, r1
 801ed9e:	40c2      	lsrs	r2, r0
 801eda0:	6163      	str	r3, [r4, #20]
 801eda2:	9201      	str	r2, [sp, #4]
 801eda4:	9b01      	ldr	r3, [sp, #4]
 801eda6:	61a3      	str	r3, [r4, #24]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	bf0c      	ite	eq
 801edac:	2201      	moveq	r2, #1
 801edae:	2202      	movne	r2, #2
 801edb0:	6122      	str	r2, [r4, #16]
 801edb2:	b1a5      	cbz	r5, 801edde <__d2b+0x92>
 801edb4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801edb8:	4405      	add	r5, r0
 801edba:	603d      	str	r5, [r7, #0]
 801edbc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801edc0:	6030      	str	r0, [r6, #0]
 801edc2:	4620      	mov	r0, r4
 801edc4:	b003      	add	sp, #12
 801edc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801edca:	6161      	str	r1, [r4, #20]
 801edcc:	e7ea      	b.n	801eda4 <__d2b+0x58>
 801edce:	a801      	add	r0, sp, #4
 801edd0:	f7ff fd59 	bl	801e886 <__lo0bits>
 801edd4:	9b01      	ldr	r3, [sp, #4]
 801edd6:	6163      	str	r3, [r4, #20]
 801edd8:	3020      	adds	r0, #32
 801edda:	2201      	movs	r2, #1
 801eddc:	e7e8      	b.n	801edb0 <__d2b+0x64>
 801edde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ede2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ede6:	6038      	str	r0, [r7, #0]
 801ede8:	6918      	ldr	r0, [r3, #16]
 801edea:	f7ff fd2d 	bl	801e848 <__hi0bits>
 801edee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801edf2:	e7e5      	b.n	801edc0 <__d2b+0x74>
 801edf4:	08024cdd 	.word	0x08024cdd
 801edf8:	08024cee 	.word	0x08024cee

0801edfc <__ssputs_r>:
 801edfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee00:	688e      	ldr	r6, [r1, #8]
 801ee02:	461f      	mov	r7, r3
 801ee04:	42be      	cmp	r6, r7
 801ee06:	680b      	ldr	r3, [r1, #0]
 801ee08:	4682      	mov	sl, r0
 801ee0a:	460c      	mov	r4, r1
 801ee0c:	4690      	mov	r8, r2
 801ee0e:	d82d      	bhi.n	801ee6c <__ssputs_r+0x70>
 801ee10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ee14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ee18:	d026      	beq.n	801ee68 <__ssputs_r+0x6c>
 801ee1a:	6965      	ldr	r5, [r4, #20]
 801ee1c:	6909      	ldr	r1, [r1, #16]
 801ee1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee22:	eba3 0901 	sub.w	r9, r3, r1
 801ee26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ee2a:	1c7b      	adds	r3, r7, #1
 801ee2c:	444b      	add	r3, r9
 801ee2e:	106d      	asrs	r5, r5, #1
 801ee30:	429d      	cmp	r5, r3
 801ee32:	bf38      	it	cc
 801ee34:	461d      	movcc	r5, r3
 801ee36:	0553      	lsls	r3, r2, #21
 801ee38:	d527      	bpl.n	801ee8a <__ssputs_r+0x8e>
 801ee3a:	4629      	mov	r1, r5
 801ee3c:	f7ff fbd0 	bl	801e5e0 <_malloc_r>
 801ee40:	4606      	mov	r6, r0
 801ee42:	b360      	cbz	r0, 801ee9e <__ssputs_r+0xa2>
 801ee44:	6921      	ldr	r1, [r4, #16]
 801ee46:	464a      	mov	r2, r9
 801ee48:	f7fe fcdb 	bl	801d802 <memcpy>
 801ee4c:	89a3      	ldrh	r3, [r4, #12]
 801ee4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ee52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee56:	81a3      	strh	r3, [r4, #12]
 801ee58:	6126      	str	r6, [r4, #16]
 801ee5a:	6165      	str	r5, [r4, #20]
 801ee5c:	444e      	add	r6, r9
 801ee5e:	eba5 0509 	sub.w	r5, r5, r9
 801ee62:	6026      	str	r6, [r4, #0]
 801ee64:	60a5      	str	r5, [r4, #8]
 801ee66:	463e      	mov	r6, r7
 801ee68:	42be      	cmp	r6, r7
 801ee6a:	d900      	bls.n	801ee6e <__ssputs_r+0x72>
 801ee6c:	463e      	mov	r6, r7
 801ee6e:	6820      	ldr	r0, [r4, #0]
 801ee70:	4632      	mov	r2, r6
 801ee72:	4641      	mov	r1, r8
 801ee74:	f7fe fbbd 	bl	801d5f2 <memmove>
 801ee78:	68a3      	ldr	r3, [r4, #8]
 801ee7a:	1b9b      	subs	r3, r3, r6
 801ee7c:	60a3      	str	r3, [r4, #8]
 801ee7e:	6823      	ldr	r3, [r4, #0]
 801ee80:	4433      	add	r3, r6
 801ee82:	6023      	str	r3, [r4, #0]
 801ee84:	2000      	movs	r0, #0
 801ee86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee8a:	462a      	mov	r2, r5
 801ee8c:	f000 fbdf 	bl	801f64e <_realloc_r>
 801ee90:	4606      	mov	r6, r0
 801ee92:	2800      	cmp	r0, #0
 801ee94:	d1e0      	bne.n	801ee58 <__ssputs_r+0x5c>
 801ee96:	6921      	ldr	r1, [r4, #16]
 801ee98:	4650      	mov	r0, sl
 801ee9a:	f7ff fb2d 	bl	801e4f8 <_free_r>
 801ee9e:	230c      	movs	r3, #12
 801eea0:	f8ca 3000 	str.w	r3, [sl]
 801eea4:	89a3      	ldrh	r3, [r4, #12]
 801eea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eeaa:	81a3      	strh	r3, [r4, #12]
 801eeac:	f04f 30ff 	mov.w	r0, #4294967295
 801eeb0:	e7e9      	b.n	801ee86 <__ssputs_r+0x8a>
	...

0801eeb4 <_svfiprintf_r>:
 801eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb8:	4698      	mov	r8, r3
 801eeba:	898b      	ldrh	r3, [r1, #12]
 801eebc:	061b      	lsls	r3, r3, #24
 801eebe:	b09d      	sub	sp, #116	@ 0x74
 801eec0:	4607      	mov	r7, r0
 801eec2:	460d      	mov	r5, r1
 801eec4:	4614      	mov	r4, r2
 801eec6:	d510      	bpl.n	801eeea <_svfiprintf_r+0x36>
 801eec8:	690b      	ldr	r3, [r1, #16]
 801eeca:	b973      	cbnz	r3, 801eeea <_svfiprintf_r+0x36>
 801eecc:	2140      	movs	r1, #64	@ 0x40
 801eece:	f7ff fb87 	bl	801e5e0 <_malloc_r>
 801eed2:	6028      	str	r0, [r5, #0]
 801eed4:	6128      	str	r0, [r5, #16]
 801eed6:	b930      	cbnz	r0, 801eee6 <_svfiprintf_r+0x32>
 801eed8:	230c      	movs	r3, #12
 801eeda:	603b      	str	r3, [r7, #0]
 801eedc:	f04f 30ff 	mov.w	r0, #4294967295
 801eee0:	b01d      	add	sp, #116	@ 0x74
 801eee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eee6:	2340      	movs	r3, #64	@ 0x40
 801eee8:	616b      	str	r3, [r5, #20]
 801eeea:	2300      	movs	r3, #0
 801eeec:	9309      	str	r3, [sp, #36]	@ 0x24
 801eeee:	2320      	movs	r3, #32
 801eef0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801eef4:	f8cd 800c 	str.w	r8, [sp, #12]
 801eef8:	2330      	movs	r3, #48	@ 0x30
 801eefa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f098 <_svfiprintf_r+0x1e4>
 801eefe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ef02:	f04f 0901 	mov.w	r9, #1
 801ef06:	4623      	mov	r3, r4
 801ef08:	469a      	mov	sl, r3
 801ef0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ef0e:	b10a      	cbz	r2, 801ef14 <_svfiprintf_r+0x60>
 801ef10:	2a25      	cmp	r2, #37	@ 0x25
 801ef12:	d1f9      	bne.n	801ef08 <_svfiprintf_r+0x54>
 801ef14:	ebba 0b04 	subs.w	fp, sl, r4
 801ef18:	d00b      	beq.n	801ef32 <_svfiprintf_r+0x7e>
 801ef1a:	465b      	mov	r3, fp
 801ef1c:	4622      	mov	r2, r4
 801ef1e:	4629      	mov	r1, r5
 801ef20:	4638      	mov	r0, r7
 801ef22:	f7ff ff6b 	bl	801edfc <__ssputs_r>
 801ef26:	3001      	adds	r0, #1
 801ef28:	f000 80a7 	beq.w	801f07a <_svfiprintf_r+0x1c6>
 801ef2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef2e:	445a      	add	r2, fp
 801ef30:	9209      	str	r2, [sp, #36]	@ 0x24
 801ef32:	f89a 3000 	ldrb.w	r3, [sl]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	f000 809f 	beq.w	801f07a <_svfiprintf_r+0x1c6>
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 801ef42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ef46:	f10a 0a01 	add.w	sl, sl, #1
 801ef4a:	9304      	str	r3, [sp, #16]
 801ef4c:	9307      	str	r3, [sp, #28]
 801ef4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ef52:	931a      	str	r3, [sp, #104]	@ 0x68
 801ef54:	4654      	mov	r4, sl
 801ef56:	2205      	movs	r2, #5
 801ef58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef5c:	484e      	ldr	r0, [pc, #312]	@ (801f098 <_svfiprintf_r+0x1e4>)
 801ef5e:	f7e1 f967 	bl	8000230 <memchr>
 801ef62:	9a04      	ldr	r2, [sp, #16]
 801ef64:	b9d8      	cbnz	r0, 801ef9e <_svfiprintf_r+0xea>
 801ef66:	06d0      	lsls	r0, r2, #27
 801ef68:	bf44      	itt	mi
 801ef6a:	2320      	movmi	r3, #32
 801ef6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef70:	0711      	lsls	r1, r2, #28
 801ef72:	bf44      	itt	mi
 801ef74:	232b      	movmi	r3, #43	@ 0x2b
 801ef76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef7a:	f89a 3000 	ldrb.w	r3, [sl]
 801ef7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef80:	d015      	beq.n	801efae <_svfiprintf_r+0xfa>
 801ef82:	9a07      	ldr	r2, [sp, #28]
 801ef84:	4654      	mov	r4, sl
 801ef86:	2000      	movs	r0, #0
 801ef88:	f04f 0c0a 	mov.w	ip, #10
 801ef8c:	4621      	mov	r1, r4
 801ef8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef92:	3b30      	subs	r3, #48	@ 0x30
 801ef94:	2b09      	cmp	r3, #9
 801ef96:	d94b      	bls.n	801f030 <_svfiprintf_r+0x17c>
 801ef98:	b1b0      	cbz	r0, 801efc8 <_svfiprintf_r+0x114>
 801ef9a:	9207      	str	r2, [sp, #28]
 801ef9c:	e014      	b.n	801efc8 <_svfiprintf_r+0x114>
 801ef9e:	eba0 0308 	sub.w	r3, r0, r8
 801efa2:	fa09 f303 	lsl.w	r3, r9, r3
 801efa6:	4313      	orrs	r3, r2
 801efa8:	9304      	str	r3, [sp, #16]
 801efaa:	46a2      	mov	sl, r4
 801efac:	e7d2      	b.n	801ef54 <_svfiprintf_r+0xa0>
 801efae:	9b03      	ldr	r3, [sp, #12]
 801efb0:	1d19      	adds	r1, r3, #4
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	9103      	str	r1, [sp, #12]
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	bfbb      	ittet	lt
 801efba:	425b      	neglt	r3, r3
 801efbc:	f042 0202 	orrlt.w	r2, r2, #2
 801efc0:	9307      	strge	r3, [sp, #28]
 801efc2:	9307      	strlt	r3, [sp, #28]
 801efc4:	bfb8      	it	lt
 801efc6:	9204      	strlt	r2, [sp, #16]
 801efc8:	7823      	ldrb	r3, [r4, #0]
 801efca:	2b2e      	cmp	r3, #46	@ 0x2e
 801efcc:	d10a      	bne.n	801efe4 <_svfiprintf_r+0x130>
 801efce:	7863      	ldrb	r3, [r4, #1]
 801efd0:	2b2a      	cmp	r3, #42	@ 0x2a
 801efd2:	d132      	bne.n	801f03a <_svfiprintf_r+0x186>
 801efd4:	9b03      	ldr	r3, [sp, #12]
 801efd6:	1d1a      	adds	r2, r3, #4
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	9203      	str	r2, [sp, #12]
 801efdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801efe0:	3402      	adds	r4, #2
 801efe2:	9305      	str	r3, [sp, #20]
 801efe4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f0a8 <_svfiprintf_r+0x1f4>
 801efe8:	7821      	ldrb	r1, [r4, #0]
 801efea:	2203      	movs	r2, #3
 801efec:	4650      	mov	r0, sl
 801efee:	f7e1 f91f 	bl	8000230 <memchr>
 801eff2:	b138      	cbz	r0, 801f004 <_svfiprintf_r+0x150>
 801eff4:	9b04      	ldr	r3, [sp, #16]
 801eff6:	eba0 000a 	sub.w	r0, r0, sl
 801effa:	2240      	movs	r2, #64	@ 0x40
 801effc:	4082      	lsls	r2, r0
 801effe:	4313      	orrs	r3, r2
 801f000:	3401      	adds	r4, #1
 801f002:	9304      	str	r3, [sp, #16]
 801f004:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f008:	4824      	ldr	r0, [pc, #144]	@ (801f09c <_svfiprintf_r+0x1e8>)
 801f00a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f00e:	2206      	movs	r2, #6
 801f010:	f7e1 f90e 	bl	8000230 <memchr>
 801f014:	2800      	cmp	r0, #0
 801f016:	d036      	beq.n	801f086 <_svfiprintf_r+0x1d2>
 801f018:	4b21      	ldr	r3, [pc, #132]	@ (801f0a0 <_svfiprintf_r+0x1ec>)
 801f01a:	bb1b      	cbnz	r3, 801f064 <_svfiprintf_r+0x1b0>
 801f01c:	9b03      	ldr	r3, [sp, #12]
 801f01e:	3307      	adds	r3, #7
 801f020:	f023 0307 	bic.w	r3, r3, #7
 801f024:	3308      	adds	r3, #8
 801f026:	9303      	str	r3, [sp, #12]
 801f028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f02a:	4433      	add	r3, r6
 801f02c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f02e:	e76a      	b.n	801ef06 <_svfiprintf_r+0x52>
 801f030:	fb0c 3202 	mla	r2, ip, r2, r3
 801f034:	460c      	mov	r4, r1
 801f036:	2001      	movs	r0, #1
 801f038:	e7a8      	b.n	801ef8c <_svfiprintf_r+0xd8>
 801f03a:	2300      	movs	r3, #0
 801f03c:	3401      	adds	r4, #1
 801f03e:	9305      	str	r3, [sp, #20]
 801f040:	4619      	mov	r1, r3
 801f042:	f04f 0c0a 	mov.w	ip, #10
 801f046:	4620      	mov	r0, r4
 801f048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f04c:	3a30      	subs	r2, #48	@ 0x30
 801f04e:	2a09      	cmp	r2, #9
 801f050:	d903      	bls.n	801f05a <_svfiprintf_r+0x1a6>
 801f052:	2b00      	cmp	r3, #0
 801f054:	d0c6      	beq.n	801efe4 <_svfiprintf_r+0x130>
 801f056:	9105      	str	r1, [sp, #20]
 801f058:	e7c4      	b.n	801efe4 <_svfiprintf_r+0x130>
 801f05a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f05e:	4604      	mov	r4, r0
 801f060:	2301      	movs	r3, #1
 801f062:	e7f0      	b.n	801f046 <_svfiprintf_r+0x192>
 801f064:	ab03      	add	r3, sp, #12
 801f066:	9300      	str	r3, [sp, #0]
 801f068:	462a      	mov	r2, r5
 801f06a:	4b0e      	ldr	r3, [pc, #56]	@ (801f0a4 <_svfiprintf_r+0x1f0>)
 801f06c:	a904      	add	r1, sp, #16
 801f06e:	4638      	mov	r0, r7
 801f070:	f7fd fdc0 	bl	801cbf4 <_printf_float>
 801f074:	1c42      	adds	r2, r0, #1
 801f076:	4606      	mov	r6, r0
 801f078:	d1d6      	bne.n	801f028 <_svfiprintf_r+0x174>
 801f07a:	89ab      	ldrh	r3, [r5, #12]
 801f07c:	065b      	lsls	r3, r3, #25
 801f07e:	f53f af2d 	bmi.w	801eedc <_svfiprintf_r+0x28>
 801f082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f084:	e72c      	b.n	801eee0 <_svfiprintf_r+0x2c>
 801f086:	ab03      	add	r3, sp, #12
 801f088:	9300      	str	r3, [sp, #0]
 801f08a:	462a      	mov	r2, r5
 801f08c:	4b05      	ldr	r3, [pc, #20]	@ (801f0a4 <_svfiprintf_r+0x1f0>)
 801f08e:	a904      	add	r1, sp, #16
 801f090:	4638      	mov	r0, r7
 801f092:	f7fe f847 	bl	801d124 <_printf_i>
 801f096:	e7ed      	b.n	801f074 <_svfiprintf_r+0x1c0>
 801f098:	08024e48 	.word	0x08024e48
 801f09c:	08024e52 	.word	0x08024e52
 801f0a0:	0801cbf5 	.word	0x0801cbf5
 801f0a4:	0801edfd 	.word	0x0801edfd
 801f0a8:	08024e4e 	.word	0x08024e4e

0801f0ac <__sfputc_r>:
 801f0ac:	6893      	ldr	r3, [r2, #8]
 801f0ae:	3b01      	subs	r3, #1
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	b410      	push	{r4}
 801f0b4:	6093      	str	r3, [r2, #8]
 801f0b6:	da08      	bge.n	801f0ca <__sfputc_r+0x1e>
 801f0b8:	6994      	ldr	r4, [r2, #24]
 801f0ba:	42a3      	cmp	r3, r4
 801f0bc:	db01      	blt.n	801f0c2 <__sfputc_r+0x16>
 801f0be:	290a      	cmp	r1, #10
 801f0c0:	d103      	bne.n	801f0ca <__sfputc_r+0x1e>
 801f0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0c6:	f000 b9f1 	b.w	801f4ac <__swbuf_r>
 801f0ca:	6813      	ldr	r3, [r2, #0]
 801f0cc:	1c58      	adds	r0, r3, #1
 801f0ce:	6010      	str	r0, [r2, #0]
 801f0d0:	7019      	strb	r1, [r3, #0]
 801f0d2:	4608      	mov	r0, r1
 801f0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f0d8:	4770      	bx	lr

0801f0da <__sfputs_r>:
 801f0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0dc:	4606      	mov	r6, r0
 801f0de:	460f      	mov	r7, r1
 801f0e0:	4614      	mov	r4, r2
 801f0e2:	18d5      	adds	r5, r2, r3
 801f0e4:	42ac      	cmp	r4, r5
 801f0e6:	d101      	bne.n	801f0ec <__sfputs_r+0x12>
 801f0e8:	2000      	movs	r0, #0
 801f0ea:	e007      	b.n	801f0fc <__sfputs_r+0x22>
 801f0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0f0:	463a      	mov	r2, r7
 801f0f2:	4630      	mov	r0, r6
 801f0f4:	f7ff ffda 	bl	801f0ac <__sfputc_r>
 801f0f8:	1c43      	adds	r3, r0, #1
 801f0fa:	d1f3      	bne.n	801f0e4 <__sfputs_r+0xa>
 801f0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f100 <_vfiprintf_r>:
 801f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f104:	460d      	mov	r5, r1
 801f106:	b09d      	sub	sp, #116	@ 0x74
 801f108:	4614      	mov	r4, r2
 801f10a:	4698      	mov	r8, r3
 801f10c:	4606      	mov	r6, r0
 801f10e:	b118      	cbz	r0, 801f118 <_vfiprintf_r+0x18>
 801f110:	6a03      	ldr	r3, [r0, #32]
 801f112:	b90b      	cbnz	r3, 801f118 <_vfiprintf_r+0x18>
 801f114:	f7fe f9b2 	bl	801d47c <__sinit>
 801f118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f11a:	07d9      	lsls	r1, r3, #31
 801f11c:	d405      	bmi.n	801f12a <_vfiprintf_r+0x2a>
 801f11e:	89ab      	ldrh	r3, [r5, #12]
 801f120:	059a      	lsls	r2, r3, #22
 801f122:	d402      	bmi.n	801f12a <_vfiprintf_r+0x2a>
 801f124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f126:	f7fe fb6a 	bl	801d7fe <__retarget_lock_acquire_recursive>
 801f12a:	89ab      	ldrh	r3, [r5, #12]
 801f12c:	071b      	lsls	r3, r3, #28
 801f12e:	d501      	bpl.n	801f134 <_vfiprintf_r+0x34>
 801f130:	692b      	ldr	r3, [r5, #16]
 801f132:	b99b      	cbnz	r3, 801f15c <_vfiprintf_r+0x5c>
 801f134:	4629      	mov	r1, r5
 801f136:	4630      	mov	r0, r6
 801f138:	f000 f9f6 	bl	801f528 <__swsetup_r>
 801f13c:	b170      	cbz	r0, 801f15c <_vfiprintf_r+0x5c>
 801f13e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f140:	07dc      	lsls	r4, r3, #31
 801f142:	d504      	bpl.n	801f14e <_vfiprintf_r+0x4e>
 801f144:	f04f 30ff 	mov.w	r0, #4294967295
 801f148:	b01d      	add	sp, #116	@ 0x74
 801f14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f14e:	89ab      	ldrh	r3, [r5, #12]
 801f150:	0598      	lsls	r0, r3, #22
 801f152:	d4f7      	bmi.n	801f144 <_vfiprintf_r+0x44>
 801f154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f156:	f7fe fb53 	bl	801d800 <__retarget_lock_release_recursive>
 801f15a:	e7f3      	b.n	801f144 <_vfiprintf_r+0x44>
 801f15c:	2300      	movs	r3, #0
 801f15e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f160:	2320      	movs	r3, #32
 801f162:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f166:	f8cd 800c 	str.w	r8, [sp, #12]
 801f16a:	2330      	movs	r3, #48	@ 0x30
 801f16c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f31c <_vfiprintf_r+0x21c>
 801f170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f174:	f04f 0901 	mov.w	r9, #1
 801f178:	4623      	mov	r3, r4
 801f17a:	469a      	mov	sl, r3
 801f17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f180:	b10a      	cbz	r2, 801f186 <_vfiprintf_r+0x86>
 801f182:	2a25      	cmp	r2, #37	@ 0x25
 801f184:	d1f9      	bne.n	801f17a <_vfiprintf_r+0x7a>
 801f186:	ebba 0b04 	subs.w	fp, sl, r4
 801f18a:	d00b      	beq.n	801f1a4 <_vfiprintf_r+0xa4>
 801f18c:	465b      	mov	r3, fp
 801f18e:	4622      	mov	r2, r4
 801f190:	4629      	mov	r1, r5
 801f192:	4630      	mov	r0, r6
 801f194:	f7ff ffa1 	bl	801f0da <__sfputs_r>
 801f198:	3001      	adds	r0, #1
 801f19a:	f000 80a7 	beq.w	801f2ec <_vfiprintf_r+0x1ec>
 801f19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f1a0:	445a      	add	r2, fp
 801f1a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801f1a4:	f89a 3000 	ldrb.w	r3, [sl]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	f000 809f 	beq.w	801f2ec <_vfiprintf_r+0x1ec>
 801f1ae:	2300      	movs	r3, #0
 801f1b0:	f04f 32ff 	mov.w	r2, #4294967295
 801f1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f1b8:	f10a 0a01 	add.w	sl, sl, #1
 801f1bc:	9304      	str	r3, [sp, #16]
 801f1be:	9307      	str	r3, [sp, #28]
 801f1c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f1c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801f1c6:	4654      	mov	r4, sl
 801f1c8:	2205      	movs	r2, #5
 801f1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f1ce:	4853      	ldr	r0, [pc, #332]	@ (801f31c <_vfiprintf_r+0x21c>)
 801f1d0:	f7e1 f82e 	bl	8000230 <memchr>
 801f1d4:	9a04      	ldr	r2, [sp, #16]
 801f1d6:	b9d8      	cbnz	r0, 801f210 <_vfiprintf_r+0x110>
 801f1d8:	06d1      	lsls	r1, r2, #27
 801f1da:	bf44      	itt	mi
 801f1dc:	2320      	movmi	r3, #32
 801f1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f1e2:	0713      	lsls	r3, r2, #28
 801f1e4:	bf44      	itt	mi
 801f1e6:	232b      	movmi	r3, #43	@ 0x2b
 801f1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f1ec:	f89a 3000 	ldrb.w	r3, [sl]
 801f1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801f1f2:	d015      	beq.n	801f220 <_vfiprintf_r+0x120>
 801f1f4:	9a07      	ldr	r2, [sp, #28]
 801f1f6:	4654      	mov	r4, sl
 801f1f8:	2000      	movs	r0, #0
 801f1fa:	f04f 0c0a 	mov.w	ip, #10
 801f1fe:	4621      	mov	r1, r4
 801f200:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f204:	3b30      	subs	r3, #48	@ 0x30
 801f206:	2b09      	cmp	r3, #9
 801f208:	d94b      	bls.n	801f2a2 <_vfiprintf_r+0x1a2>
 801f20a:	b1b0      	cbz	r0, 801f23a <_vfiprintf_r+0x13a>
 801f20c:	9207      	str	r2, [sp, #28]
 801f20e:	e014      	b.n	801f23a <_vfiprintf_r+0x13a>
 801f210:	eba0 0308 	sub.w	r3, r0, r8
 801f214:	fa09 f303 	lsl.w	r3, r9, r3
 801f218:	4313      	orrs	r3, r2
 801f21a:	9304      	str	r3, [sp, #16]
 801f21c:	46a2      	mov	sl, r4
 801f21e:	e7d2      	b.n	801f1c6 <_vfiprintf_r+0xc6>
 801f220:	9b03      	ldr	r3, [sp, #12]
 801f222:	1d19      	adds	r1, r3, #4
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	9103      	str	r1, [sp, #12]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	bfbb      	ittet	lt
 801f22c:	425b      	neglt	r3, r3
 801f22e:	f042 0202 	orrlt.w	r2, r2, #2
 801f232:	9307      	strge	r3, [sp, #28]
 801f234:	9307      	strlt	r3, [sp, #28]
 801f236:	bfb8      	it	lt
 801f238:	9204      	strlt	r2, [sp, #16]
 801f23a:	7823      	ldrb	r3, [r4, #0]
 801f23c:	2b2e      	cmp	r3, #46	@ 0x2e
 801f23e:	d10a      	bne.n	801f256 <_vfiprintf_r+0x156>
 801f240:	7863      	ldrb	r3, [r4, #1]
 801f242:	2b2a      	cmp	r3, #42	@ 0x2a
 801f244:	d132      	bne.n	801f2ac <_vfiprintf_r+0x1ac>
 801f246:	9b03      	ldr	r3, [sp, #12]
 801f248:	1d1a      	adds	r2, r3, #4
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	9203      	str	r2, [sp, #12]
 801f24e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f252:	3402      	adds	r4, #2
 801f254:	9305      	str	r3, [sp, #20]
 801f256:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f32c <_vfiprintf_r+0x22c>
 801f25a:	7821      	ldrb	r1, [r4, #0]
 801f25c:	2203      	movs	r2, #3
 801f25e:	4650      	mov	r0, sl
 801f260:	f7e0 ffe6 	bl	8000230 <memchr>
 801f264:	b138      	cbz	r0, 801f276 <_vfiprintf_r+0x176>
 801f266:	9b04      	ldr	r3, [sp, #16]
 801f268:	eba0 000a 	sub.w	r0, r0, sl
 801f26c:	2240      	movs	r2, #64	@ 0x40
 801f26e:	4082      	lsls	r2, r0
 801f270:	4313      	orrs	r3, r2
 801f272:	3401      	adds	r4, #1
 801f274:	9304      	str	r3, [sp, #16]
 801f276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f27a:	4829      	ldr	r0, [pc, #164]	@ (801f320 <_vfiprintf_r+0x220>)
 801f27c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f280:	2206      	movs	r2, #6
 801f282:	f7e0 ffd5 	bl	8000230 <memchr>
 801f286:	2800      	cmp	r0, #0
 801f288:	d03f      	beq.n	801f30a <_vfiprintf_r+0x20a>
 801f28a:	4b26      	ldr	r3, [pc, #152]	@ (801f324 <_vfiprintf_r+0x224>)
 801f28c:	bb1b      	cbnz	r3, 801f2d6 <_vfiprintf_r+0x1d6>
 801f28e:	9b03      	ldr	r3, [sp, #12]
 801f290:	3307      	adds	r3, #7
 801f292:	f023 0307 	bic.w	r3, r3, #7
 801f296:	3308      	adds	r3, #8
 801f298:	9303      	str	r3, [sp, #12]
 801f29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f29c:	443b      	add	r3, r7
 801f29e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f2a0:	e76a      	b.n	801f178 <_vfiprintf_r+0x78>
 801f2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f2a6:	460c      	mov	r4, r1
 801f2a8:	2001      	movs	r0, #1
 801f2aa:	e7a8      	b.n	801f1fe <_vfiprintf_r+0xfe>
 801f2ac:	2300      	movs	r3, #0
 801f2ae:	3401      	adds	r4, #1
 801f2b0:	9305      	str	r3, [sp, #20]
 801f2b2:	4619      	mov	r1, r3
 801f2b4:	f04f 0c0a 	mov.w	ip, #10
 801f2b8:	4620      	mov	r0, r4
 801f2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f2be:	3a30      	subs	r2, #48	@ 0x30
 801f2c0:	2a09      	cmp	r2, #9
 801f2c2:	d903      	bls.n	801f2cc <_vfiprintf_r+0x1cc>
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d0c6      	beq.n	801f256 <_vfiprintf_r+0x156>
 801f2c8:	9105      	str	r1, [sp, #20]
 801f2ca:	e7c4      	b.n	801f256 <_vfiprintf_r+0x156>
 801f2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801f2d0:	4604      	mov	r4, r0
 801f2d2:	2301      	movs	r3, #1
 801f2d4:	e7f0      	b.n	801f2b8 <_vfiprintf_r+0x1b8>
 801f2d6:	ab03      	add	r3, sp, #12
 801f2d8:	9300      	str	r3, [sp, #0]
 801f2da:	462a      	mov	r2, r5
 801f2dc:	4b12      	ldr	r3, [pc, #72]	@ (801f328 <_vfiprintf_r+0x228>)
 801f2de:	a904      	add	r1, sp, #16
 801f2e0:	4630      	mov	r0, r6
 801f2e2:	f7fd fc87 	bl	801cbf4 <_printf_float>
 801f2e6:	4607      	mov	r7, r0
 801f2e8:	1c78      	adds	r0, r7, #1
 801f2ea:	d1d6      	bne.n	801f29a <_vfiprintf_r+0x19a>
 801f2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f2ee:	07d9      	lsls	r1, r3, #31
 801f2f0:	d405      	bmi.n	801f2fe <_vfiprintf_r+0x1fe>
 801f2f2:	89ab      	ldrh	r3, [r5, #12]
 801f2f4:	059a      	lsls	r2, r3, #22
 801f2f6:	d402      	bmi.n	801f2fe <_vfiprintf_r+0x1fe>
 801f2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f2fa:	f7fe fa81 	bl	801d800 <__retarget_lock_release_recursive>
 801f2fe:	89ab      	ldrh	r3, [r5, #12]
 801f300:	065b      	lsls	r3, r3, #25
 801f302:	f53f af1f 	bmi.w	801f144 <_vfiprintf_r+0x44>
 801f306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f308:	e71e      	b.n	801f148 <_vfiprintf_r+0x48>
 801f30a:	ab03      	add	r3, sp, #12
 801f30c:	9300      	str	r3, [sp, #0]
 801f30e:	462a      	mov	r2, r5
 801f310:	4b05      	ldr	r3, [pc, #20]	@ (801f328 <_vfiprintf_r+0x228>)
 801f312:	a904      	add	r1, sp, #16
 801f314:	4630      	mov	r0, r6
 801f316:	f7fd ff05 	bl	801d124 <_printf_i>
 801f31a:	e7e4      	b.n	801f2e6 <_vfiprintf_r+0x1e6>
 801f31c:	08024e48 	.word	0x08024e48
 801f320:	08024e52 	.word	0x08024e52
 801f324:	0801cbf5 	.word	0x0801cbf5
 801f328:	0801f0db 	.word	0x0801f0db
 801f32c:	08024e4e 	.word	0x08024e4e

0801f330 <__sflush_r>:
 801f330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f338:	0716      	lsls	r6, r2, #28
 801f33a:	4605      	mov	r5, r0
 801f33c:	460c      	mov	r4, r1
 801f33e:	d454      	bmi.n	801f3ea <__sflush_r+0xba>
 801f340:	684b      	ldr	r3, [r1, #4]
 801f342:	2b00      	cmp	r3, #0
 801f344:	dc02      	bgt.n	801f34c <__sflush_r+0x1c>
 801f346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f348:	2b00      	cmp	r3, #0
 801f34a:	dd48      	ble.n	801f3de <__sflush_r+0xae>
 801f34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f34e:	2e00      	cmp	r6, #0
 801f350:	d045      	beq.n	801f3de <__sflush_r+0xae>
 801f352:	2300      	movs	r3, #0
 801f354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f358:	682f      	ldr	r7, [r5, #0]
 801f35a:	6a21      	ldr	r1, [r4, #32]
 801f35c:	602b      	str	r3, [r5, #0]
 801f35e:	d030      	beq.n	801f3c2 <__sflush_r+0x92>
 801f360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f362:	89a3      	ldrh	r3, [r4, #12]
 801f364:	0759      	lsls	r1, r3, #29
 801f366:	d505      	bpl.n	801f374 <__sflush_r+0x44>
 801f368:	6863      	ldr	r3, [r4, #4]
 801f36a:	1ad2      	subs	r2, r2, r3
 801f36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f36e:	b10b      	cbz	r3, 801f374 <__sflush_r+0x44>
 801f370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f372:	1ad2      	subs	r2, r2, r3
 801f374:	2300      	movs	r3, #0
 801f376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f378:	6a21      	ldr	r1, [r4, #32]
 801f37a:	4628      	mov	r0, r5
 801f37c:	47b0      	blx	r6
 801f37e:	1c43      	adds	r3, r0, #1
 801f380:	89a3      	ldrh	r3, [r4, #12]
 801f382:	d106      	bne.n	801f392 <__sflush_r+0x62>
 801f384:	6829      	ldr	r1, [r5, #0]
 801f386:	291d      	cmp	r1, #29
 801f388:	d82b      	bhi.n	801f3e2 <__sflush_r+0xb2>
 801f38a:	4a2a      	ldr	r2, [pc, #168]	@ (801f434 <__sflush_r+0x104>)
 801f38c:	410a      	asrs	r2, r1
 801f38e:	07d6      	lsls	r6, r2, #31
 801f390:	d427      	bmi.n	801f3e2 <__sflush_r+0xb2>
 801f392:	2200      	movs	r2, #0
 801f394:	6062      	str	r2, [r4, #4]
 801f396:	04d9      	lsls	r1, r3, #19
 801f398:	6922      	ldr	r2, [r4, #16]
 801f39a:	6022      	str	r2, [r4, #0]
 801f39c:	d504      	bpl.n	801f3a8 <__sflush_r+0x78>
 801f39e:	1c42      	adds	r2, r0, #1
 801f3a0:	d101      	bne.n	801f3a6 <__sflush_r+0x76>
 801f3a2:	682b      	ldr	r3, [r5, #0]
 801f3a4:	b903      	cbnz	r3, 801f3a8 <__sflush_r+0x78>
 801f3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 801f3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f3aa:	602f      	str	r7, [r5, #0]
 801f3ac:	b1b9      	cbz	r1, 801f3de <__sflush_r+0xae>
 801f3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f3b2:	4299      	cmp	r1, r3
 801f3b4:	d002      	beq.n	801f3bc <__sflush_r+0x8c>
 801f3b6:	4628      	mov	r0, r5
 801f3b8:	f7ff f89e 	bl	801e4f8 <_free_r>
 801f3bc:	2300      	movs	r3, #0
 801f3be:	6363      	str	r3, [r4, #52]	@ 0x34
 801f3c0:	e00d      	b.n	801f3de <__sflush_r+0xae>
 801f3c2:	2301      	movs	r3, #1
 801f3c4:	4628      	mov	r0, r5
 801f3c6:	47b0      	blx	r6
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	1c50      	adds	r0, r2, #1
 801f3cc:	d1c9      	bne.n	801f362 <__sflush_r+0x32>
 801f3ce:	682b      	ldr	r3, [r5, #0]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d0c6      	beq.n	801f362 <__sflush_r+0x32>
 801f3d4:	2b1d      	cmp	r3, #29
 801f3d6:	d001      	beq.n	801f3dc <__sflush_r+0xac>
 801f3d8:	2b16      	cmp	r3, #22
 801f3da:	d11e      	bne.n	801f41a <__sflush_r+0xea>
 801f3dc:	602f      	str	r7, [r5, #0]
 801f3de:	2000      	movs	r0, #0
 801f3e0:	e022      	b.n	801f428 <__sflush_r+0xf8>
 801f3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3e6:	b21b      	sxth	r3, r3
 801f3e8:	e01b      	b.n	801f422 <__sflush_r+0xf2>
 801f3ea:	690f      	ldr	r7, [r1, #16]
 801f3ec:	2f00      	cmp	r7, #0
 801f3ee:	d0f6      	beq.n	801f3de <__sflush_r+0xae>
 801f3f0:	0793      	lsls	r3, r2, #30
 801f3f2:	680e      	ldr	r6, [r1, #0]
 801f3f4:	bf08      	it	eq
 801f3f6:	694b      	ldreq	r3, [r1, #20]
 801f3f8:	600f      	str	r7, [r1, #0]
 801f3fa:	bf18      	it	ne
 801f3fc:	2300      	movne	r3, #0
 801f3fe:	eba6 0807 	sub.w	r8, r6, r7
 801f402:	608b      	str	r3, [r1, #8]
 801f404:	f1b8 0f00 	cmp.w	r8, #0
 801f408:	dde9      	ble.n	801f3de <__sflush_r+0xae>
 801f40a:	6a21      	ldr	r1, [r4, #32]
 801f40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f40e:	4643      	mov	r3, r8
 801f410:	463a      	mov	r2, r7
 801f412:	4628      	mov	r0, r5
 801f414:	47b0      	blx	r6
 801f416:	2800      	cmp	r0, #0
 801f418:	dc08      	bgt.n	801f42c <__sflush_r+0xfc>
 801f41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f422:	81a3      	strh	r3, [r4, #12]
 801f424:	f04f 30ff 	mov.w	r0, #4294967295
 801f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f42c:	4407      	add	r7, r0
 801f42e:	eba8 0800 	sub.w	r8, r8, r0
 801f432:	e7e7      	b.n	801f404 <__sflush_r+0xd4>
 801f434:	dfbffffe 	.word	0xdfbffffe

0801f438 <_fflush_r>:
 801f438:	b538      	push	{r3, r4, r5, lr}
 801f43a:	690b      	ldr	r3, [r1, #16]
 801f43c:	4605      	mov	r5, r0
 801f43e:	460c      	mov	r4, r1
 801f440:	b913      	cbnz	r3, 801f448 <_fflush_r+0x10>
 801f442:	2500      	movs	r5, #0
 801f444:	4628      	mov	r0, r5
 801f446:	bd38      	pop	{r3, r4, r5, pc}
 801f448:	b118      	cbz	r0, 801f452 <_fflush_r+0x1a>
 801f44a:	6a03      	ldr	r3, [r0, #32]
 801f44c:	b90b      	cbnz	r3, 801f452 <_fflush_r+0x1a>
 801f44e:	f7fe f815 	bl	801d47c <__sinit>
 801f452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f456:	2b00      	cmp	r3, #0
 801f458:	d0f3      	beq.n	801f442 <_fflush_r+0xa>
 801f45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f45c:	07d0      	lsls	r0, r2, #31
 801f45e:	d404      	bmi.n	801f46a <_fflush_r+0x32>
 801f460:	0599      	lsls	r1, r3, #22
 801f462:	d402      	bmi.n	801f46a <_fflush_r+0x32>
 801f464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f466:	f7fe f9ca 	bl	801d7fe <__retarget_lock_acquire_recursive>
 801f46a:	4628      	mov	r0, r5
 801f46c:	4621      	mov	r1, r4
 801f46e:	f7ff ff5f 	bl	801f330 <__sflush_r>
 801f472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f474:	07da      	lsls	r2, r3, #31
 801f476:	4605      	mov	r5, r0
 801f478:	d4e4      	bmi.n	801f444 <_fflush_r+0xc>
 801f47a:	89a3      	ldrh	r3, [r4, #12]
 801f47c:	059b      	lsls	r3, r3, #22
 801f47e:	d4e1      	bmi.n	801f444 <_fflush_r+0xc>
 801f480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f482:	f7fe f9bd 	bl	801d800 <__retarget_lock_release_recursive>
 801f486:	e7dd      	b.n	801f444 <_fflush_r+0xc>

0801f488 <fiprintf>:
 801f488:	b40e      	push	{r1, r2, r3}
 801f48a:	b503      	push	{r0, r1, lr}
 801f48c:	4601      	mov	r1, r0
 801f48e:	ab03      	add	r3, sp, #12
 801f490:	4805      	ldr	r0, [pc, #20]	@ (801f4a8 <fiprintf+0x20>)
 801f492:	f853 2b04 	ldr.w	r2, [r3], #4
 801f496:	6800      	ldr	r0, [r0, #0]
 801f498:	9301      	str	r3, [sp, #4]
 801f49a:	f7ff fe31 	bl	801f100 <_vfiprintf_r>
 801f49e:	b002      	add	sp, #8
 801f4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f4a4:	b003      	add	sp, #12
 801f4a6:	4770      	bx	lr
 801f4a8:	20000094 	.word	0x20000094

0801f4ac <__swbuf_r>:
 801f4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4ae:	460e      	mov	r6, r1
 801f4b0:	4614      	mov	r4, r2
 801f4b2:	4605      	mov	r5, r0
 801f4b4:	b118      	cbz	r0, 801f4be <__swbuf_r+0x12>
 801f4b6:	6a03      	ldr	r3, [r0, #32]
 801f4b8:	b90b      	cbnz	r3, 801f4be <__swbuf_r+0x12>
 801f4ba:	f7fd ffdf 	bl	801d47c <__sinit>
 801f4be:	69a3      	ldr	r3, [r4, #24]
 801f4c0:	60a3      	str	r3, [r4, #8]
 801f4c2:	89a3      	ldrh	r3, [r4, #12]
 801f4c4:	071a      	lsls	r2, r3, #28
 801f4c6:	d501      	bpl.n	801f4cc <__swbuf_r+0x20>
 801f4c8:	6923      	ldr	r3, [r4, #16]
 801f4ca:	b943      	cbnz	r3, 801f4de <__swbuf_r+0x32>
 801f4cc:	4621      	mov	r1, r4
 801f4ce:	4628      	mov	r0, r5
 801f4d0:	f000 f82a 	bl	801f528 <__swsetup_r>
 801f4d4:	b118      	cbz	r0, 801f4de <__swbuf_r+0x32>
 801f4d6:	f04f 37ff 	mov.w	r7, #4294967295
 801f4da:	4638      	mov	r0, r7
 801f4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4de:	6823      	ldr	r3, [r4, #0]
 801f4e0:	6922      	ldr	r2, [r4, #16]
 801f4e2:	1a98      	subs	r0, r3, r2
 801f4e4:	6963      	ldr	r3, [r4, #20]
 801f4e6:	b2f6      	uxtb	r6, r6
 801f4e8:	4283      	cmp	r3, r0
 801f4ea:	4637      	mov	r7, r6
 801f4ec:	dc05      	bgt.n	801f4fa <__swbuf_r+0x4e>
 801f4ee:	4621      	mov	r1, r4
 801f4f0:	4628      	mov	r0, r5
 801f4f2:	f7ff ffa1 	bl	801f438 <_fflush_r>
 801f4f6:	2800      	cmp	r0, #0
 801f4f8:	d1ed      	bne.n	801f4d6 <__swbuf_r+0x2a>
 801f4fa:	68a3      	ldr	r3, [r4, #8]
 801f4fc:	3b01      	subs	r3, #1
 801f4fe:	60a3      	str	r3, [r4, #8]
 801f500:	6823      	ldr	r3, [r4, #0]
 801f502:	1c5a      	adds	r2, r3, #1
 801f504:	6022      	str	r2, [r4, #0]
 801f506:	701e      	strb	r6, [r3, #0]
 801f508:	6962      	ldr	r2, [r4, #20]
 801f50a:	1c43      	adds	r3, r0, #1
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d004      	beq.n	801f51a <__swbuf_r+0x6e>
 801f510:	89a3      	ldrh	r3, [r4, #12]
 801f512:	07db      	lsls	r3, r3, #31
 801f514:	d5e1      	bpl.n	801f4da <__swbuf_r+0x2e>
 801f516:	2e0a      	cmp	r6, #10
 801f518:	d1df      	bne.n	801f4da <__swbuf_r+0x2e>
 801f51a:	4621      	mov	r1, r4
 801f51c:	4628      	mov	r0, r5
 801f51e:	f7ff ff8b 	bl	801f438 <_fflush_r>
 801f522:	2800      	cmp	r0, #0
 801f524:	d0d9      	beq.n	801f4da <__swbuf_r+0x2e>
 801f526:	e7d6      	b.n	801f4d6 <__swbuf_r+0x2a>

0801f528 <__swsetup_r>:
 801f528:	b538      	push	{r3, r4, r5, lr}
 801f52a:	4b29      	ldr	r3, [pc, #164]	@ (801f5d0 <__swsetup_r+0xa8>)
 801f52c:	4605      	mov	r5, r0
 801f52e:	6818      	ldr	r0, [r3, #0]
 801f530:	460c      	mov	r4, r1
 801f532:	b118      	cbz	r0, 801f53c <__swsetup_r+0x14>
 801f534:	6a03      	ldr	r3, [r0, #32]
 801f536:	b90b      	cbnz	r3, 801f53c <__swsetup_r+0x14>
 801f538:	f7fd ffa0 	bl	801d47c <__sinit>
 801f53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f540:	0719      	lsls	r1, r3, #28
 801f542:	d422      	bmi.n	801f58a <__swsetup_r+0x62>
 801f544:	06da      	lsls	r2, r3, #27
 801f546:	d407      	bmi.n	801f558 <__swsetup_r+0x30>
 801f548:	2209      	movs	r2, #9
 801f54a:	602a      	str	r2, [r5, #0]
 801f54c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f550:	81a3      	strh	r3, [r4, #12]
 801f552:	f04f 30ff 	mov.w	r0, #4294967295
 801f556:	e033      	b.n	801f5c0 <__swsetup_r+0x98>
 801f558:	0758      	lsls	r0, r3, #29
 801f55a:	d512      	bpl.n	801f582 <__swsetup_r+0x5a>
 801f55c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f55e:	b141      	cbz	r1, 801f572 <__swsetup_r+0x4a>
 801f560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f564:	4299      	cmp	r1, r3
 801f566:	d002      	beq.n	801f56e <__swsetup_r+0x46>
 801f568:	4628      	mov	r0, r5
 801f56a:	f7fe ffc5 	bl	801e4f8 <_free_r>
 801f56e:	2300      	movs	r3, #0
 801f570:	6363      	str	r3, [r4, #52]	@ 0x34
 801f572:	89a3      	ldrh	r3, [r4, #12]
 801f574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f578:	81a3      	strh	r3, [r4, #12]
 801f57a:	2300      	movs	r3, #0
 801f57c:	6063      	str	r3, [r4, #4]
 801f57e:	6923      	ldr	r3, [r4, #16]
 801f580:	6023      	str	r3, [r4, #0]
 801f582:	89a3      	ldrh	r3, [r4, #12]
 801f584:	f043 0308 	orr.w	r3, r3, #8
 801f588:	81a3      	strh	r3, [r4, #12]
 801f58a:	6923      	ldr	r3, [r4, #16]
 801f58c:	b94b      	cbnz	r3, 801f5a2 <__swsetup_r+0x7a>
 801f58e:	89a3      	ldrh	r3, [r4, #12]
 801f590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f598:	d003      	beq.n	801f5a2 <__swsetup_r+0x7a>
 801f59a:	4621      	mov	r1, r4
 801f59c:	4628      	mov	r0, r5
 801f59e:	f000 f8b7 	bl	801f710 <__smakebuf_r>
 801f5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f5a6:	f013 0201 	ands.w	r2, r3, #1
 801f5aa:	d00a      	beq.n	801f5c2 <__swsetup_r+0x9a>
 801f5ac:	2200      	movs	r2, #0
 801f5ae:	60a2      	str	r2, [r4, #8]
 801f5b0:	6962      	ldr	r2, [r4, #20]
 801f5b2:	4252      	negs	r2, r2
 801f5b4:	61a2      	str	r2, [r4, #24]
 801f5b6:	6922      	ldr	r2, [r4, #16]
 801f5b8:	b942      	cbnz	r2, 801f5cc <__swsetup_r+0xa4>
 801f5ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f5be:	d1c5      	bne.n	801f54c <__swsetup_r+0x24>
 801f5c0:	bd38      	pop	{r3, r4, r5, pc}
 801f5c2:	0799      	lsls	r1, r3, #30
 801f5c4:	bf58      	it	pl
 801f5c6:	6962      	ldrpl	r2, [r4, #20]
 801f5c8:	60a2      	str	r2, [r4, #8]
 801f5ca:	e7f4      	b.n	801f5b6 <__swsetup_r+0x8e>
 801f5cc:	2000      	movs	r0, #0
 801f5ce:	e7f7      	b.n	801f5c0 <__swsetup_r+0x98>
 801f5d0:	20000094 	.word	0x20000094

0801f5d4 <_sbrk_r>:
 801f5d4:	b538      	push	{r3, r4, r5, lr}
 801f5d6:	4d06      	ldr	r5, [pc, #24]	@ (801f5f0 <_sbrk_r+0x1c>)
 801f5d8:	2300      	movs	r3, #0
 801f5da:	4604      	mov	r4, r0
 801f5dc:	4608      	mov	r0, r1
 801f5de:	602b      	str	r3, [r5, #0]
 801f5e0:	f7e3 fe8c 	bl	80032fc <_sbrk>
 801f5e4:	1c43      	adds	r3, r0, #1
 801f5e6:	d102      	bne.n	801f5ee <_sbrk_r+0x1a>
 801f5e8:	682b      	ldr	r3, [r5, #0]
 801f5ea:	b103      	cbz	r3, 801f5ee <_sbrk_r+0x1a>
 801f5ec:	6023      	str	r3, [r4, #0]
 801f5ee:	bd38      	pop	{r3, r4, r5, pc}
 801f5f0:	2000f630 	.word	0x2000f630

0801f5f4 <abort>:
 801f5f4:	b508      	push	{r3, lr}
 801f5f6:	2006      	movs	r0, #6
 801f5f8:	f000 f8ee 	bl	801f7d8 <raise>
 801f5fc:	2001      	movs	r0, #1
 801f5fe:	f7e3 fe21 	bl	8003244 <_exit>

0801f602 <_calloc_r>:
 801f602:	b570      	push	{r4, r5, r6, lr}
 801f604:	fba1 5402 	umull	r5, r4, r1, r2
 801f608:	b93c      	cbnz	r4, 801f61a <_calloc_r+0x18>
 801f60a:	4629      	mov	r1, r5
 801f60c:	f7fe ffe8 	bl	801e5e0 <_malloc_r>
 801f610:	4606      	mov	r6, r0
 801f612:	b928      	cbnz	r0, 801f620 <_calloc_r+0x1e>
 801f614:	2600      	movs	r6, #0
 801f616:	4630      	mov	r0, r6
 801f618:	bd70      	pop	{r4, r5, r6, pc}
 801f61a:	220c      	movs	r2, #12
 801f61c:	6002      	str	r2, [r0, #0]
 801f61e:	e7f9      	b.n	801f614 <_calloc_r+0x12>
 801f620:	462a      	mov	r2, r5
 801f622:	4621      	mov	r1, r4
 801f624:	f7fd ffff 	bl	801d626 <memset>
 801f628:	e7f5      	b.n	801f616 <_calloc_r+0x14>

0801f62a <__ascii_mbtowc>:
 801f62a:	b082      	sub	sp, #8
 801f62c:	b901      	cbnz	r1, 801f630 <__ascii_mbtowc+0x6>
 801f62e:	a901      	add	r1, sp, #4
 801f630:	b142      	cbz	r2, 801f644 <__ascii_mbtowc+0x1a>
 801f632:	b14b      	cbz	r3, 801f648 <__ascii_mbtowc+0x1e>
 801f634:	7813      	ldrb	r3, [r2, #0]
 801f636:	600b      	str	r3, [r1, #0]
 801f638:	7812      	ldrb	r2, [r2, #0]
 801f63a:	1e10      	subs	r0, r2, #0
 801f63c:	bf18      	it	ne
 801f63e:	2001      	movne	r0, #1
 801f640:	b002      	add	sp, #8
 801f642:	4770      	bx	lr
 801f644:	4610      	mov	r0, r2
 801f646:	e7fb      	b.n	801f640 <__ascii_mbtowc+0x16>
 801f648:	f06f 0001 	mvn.w	r0, #1
 801f64c:	e7f8      	b.n	801f640 <__ascii_mbtowc+0x16>

0801f64e <_realloc_r>:
 801f64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f652:	4680      	mov	r8, r0
 801f654:	4615      	mov	r5, r2
 801f656:	460c      	mov	r4, r1
 801f658:	b921      	cbnz	r1, 801f664 <_realloc_r+0x16>
 801f65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f65e:	4611      	mov	r1, r2
 801f660:	f7fe bfbe 	b.w	801e5e0 <_malloc_r>
 801f664:	b92a      	cbnz	r2, 801f672 <_realloc_r+0x24>
 801f666:	f7fe ff47 	bl	801e4f8 <_free_r>
 801f66a:	2400      	movs	r4, #0
 801f66c:	4620      	mov	r0, r4
 801f66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f672:	f000 f8ef 	bl	801f854 <_malloc_usable_size_r>
 801f676:	4285      	cmp	r5, r0
 801f678:	4606      	mov	r6, r0
 801f67a:	d802      	bhi.n	801f682 <_realloc_r+0x34>
 801f67c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801f680:	d8f4      	bhi.n	801f66c <_realloc_r+0x1e>
 801f682:	4629      	mov	r1, r5
 801f684:	4640      	mov	r0, r8
 801f686:	f7fe ffab 	bl	801e5e0 <_malloc_r>
 801f68a:	4607      	mov	r7, r0
 801f68c:	2800      	cmp	r0, #0
 801f68e:	d0ec      	beq.n	801f66a <_realloc_r+0x1c>
 801f690:	42b5      	cmp	r5, r6
 801f692:	462a      	mov	r2, r5
 801f694:	4621      	mov	r1, r4
 801f696:	bf28      	it	cs
 801f698:	4632      	movcs	r2, r6
 801f69a:	f7fe f8b2 	bl	801d802 <memcpy>
 801f69e:	4621      	mov	r1, r4
 801f6a0:	4640      	mov	r0, r8
 801f6a2:	f7fe ff29 	bl	801e4f8 <_free_r>
 801f6a6:	463c      	mov	r4, r7
 801f6a8:	e7e0      	b.n	801f66c <_realloc_r+0x1e>

0801f6aa <__ascii_wctomb>:
 801f6aa:	4603      	mov	r3, r0
 801f6ac:	4608      	mov	r0, r1
 801f6ae:	b141      	cbz	r1, 801f6c2 <__ascii_wctomb+0x18>
 801f6b0:	2aff      	cmp	r2, #255	@ 0xff
 801f6b2:	d904      	bls.n	801f6be <__ascii_wctomb+0x14>
 801f6b4:	228a      	movs	r2, #138	@ 0x8a
 801f6b6:	601a      	str	r2, [r3, #0]
 801f6b8:	f04f 30ff 	mov.w	r0, #4294967295
 801f6bc:	4770      	bx	lr
 801f6be:	700a      	strb	r2, [r1, #0]
 801f6c0:	2001      	movs	r0, #1
 801f6c2:	4770      	bx	lr

0801f6c4 <__swhatbuf_r>:
 801f6c4:	b570      	push	{r4, r5, r6, lr}
 801f6c6:	460c      	mov	r4, r1
 801f6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f6cc:	2900      	cmp	r1, #0
 801f6ce:	b096      	sub	sp, #88	@ 0x58
 801f6d0:	4615      	mov	r5, r2
 801f6d2:	461e      	mov	r6, r3
 801f6d4:	da0d      	bge.n	801f6f2 <__swhatbuf_r+0x2e>
 801f6d6:	89a3      	ldrh	r3, [r4, #12]
 801f6d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f6dc:	f04f 0100 	mov.w	r1, #0
 801f6e0:	bf14      	ite	ne
 801f6e2:	2340      	movne	r3, #64	@ 0x40
 801f6e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f6e8:	2000      	movs	r0, #0
 801f6ea:	6031      	str	r1, [r6, #0]
 801f6ec:	602b      	str	r3, [r5, #0]
 801f6ee:	b016      	add	sp, #88	@ 0x58
 801f6f0:	bd70      	pop	{r4, r5, r6, pc}
 801f6f2:	466a      	mov	r2, sp
 801f6f4:	f000 f878 	bl	801f7e8 <_fstat_r>
 801f6f8:	2800      	cmp	r0, #0
 801f6fa:	dbec      	blt.n	801f6d6 <__swhatbuf_r+0x12>
 801f6fc:	9901      	ldr	r1, [sp, #4]
 801f6fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f702:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f706:	4259      	negs	r1, r3
 801f708:	4159      	adcs	r1, r3
 801f70a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f70e:	e7eb      	b.n	801f6e8 <__swhatbuf_r+0x24>

0801f710 <__smakebuf_r>:
 801f710:	898b      	ldrh	r3, [r1, #12]
 801f712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f714:	079d      	lsls	r5, r3, #30
 801f716:	4606      	mov	r6, r0
 801f718:	460c      	mov	r4, r1
 801f71a:	d507      	bpl.n	801f72c <__smakebuf_r+0x1c>
 801f71c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f720:	6023      	str	r3, [r4, #0]
 801f722:	6123      	str	r3, [r4, #16]
 801f724:	2301      	movs	r3, #1
 801f726:	6163      	str	r3, [r4, #20]
 801f728:	b003      	add	sp, #12
 801f72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f72c:	ab01      	add	r3, sp, #4
 801f72e:	466a      	mov	r2, sp
 801f730:	f7ff ffc8 	bl	801f6c4 <__swhatbuf_r>
 801f734:	9f00      	ldr	r7, [sp, #0]
 801f736:	4605      	mov	r5, r0
 801f738:	4639      	mov	r1, r7
 801f73a:	4630      	mov	r0, r6
 801f73c:	f7fe ff50 	bl	801e5e0 <_malloc_r>
 801f740:	b948      	cbnz	r0, 801f756 <__smakebuf_r+0x46>
 801f742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f746:	059a      	lsls	r2, r3, #22
 801f748:	d4ee      	bmi.n	801f728 <__smakebuf_r+0x18>
 801f74a:	f023 0303 	bic.w	r3, r3, #3
 801f74e:	f043 0302 	orr.w	r3, r3, #2
 801f752:	81a3      	strh	r3, [r4, #12]
 801f754:	e7e2      	b.n	801f71c <__smakebuf_r+0xc>
 801f756:	89a3      	ldrh	r3, [r4, #12]
 801f758:	6020      	str	r0, [r4, #0]
 801f75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f75e:	81a3      	strh	r3, [r4, #12]
 801f760:	9b01      	ldr	r3, [sp, #4]
 801f762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f766:	b15b      	cbz	r3, 801f780 <__smakebuf_r+0x70>
 801f768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f76c:	4630      	mov	r0, r6
 801f76e:	f000 f84d 	bl	801f80c <_isatty_r>
 801f772:	b128      	cbz	r0, 801f780 <__smakebuf_r+0x70>
 801f774:	89a3      	ldrh	r3, [r4, #12]
 801f776:	f023 0303 	bic.w	r3, r3, #3
 801f77a:	f043 0301 	orr.w	r3, r3, #1
 801f77e:	81a3      	strh	r3, [r4, #12]
 801f780:	89a3      	ldrh	r3, [r4, #12]
 801f782:	431d      	orrs	r5, r3
 801f784:	81a5      	strh	r5, [r4, #12]
 801f786:	e7cf      	b.n	801f728 <__smakebuf_r+0x18>

0801f788 <_raise_r>:
 801f788:	291f      	cmp	r1, #31
 801f78a:	b538      	push	{r3, r4, r5, lr}
 801f78c:	4605      	mov	r5, r0
 801f78e:	460c      	mov	r4, r1
 801f790:	d904      	bls.n	801f79c <_raise_r+0x14>
 801f792:	2316      	movs	r3, #22
 801f794:	6003      	str	r3, [r0, #0]
 801f796:	f04f 30ff 	mov.w	r0, #4294967295
 801f79a:	bd38      	pop	{r3, r4, r5, pc}
 801f79c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f79e:	b112      	cbz	r2, 801f7a6 <_raise_r+0x1e>
 801f7a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f7a4:	b94b      	cbnz	r3, 801f7ba <_raise_r+0x32>
 801f7a6:	4628      	mov	r0, r5
 801f7a8:	f000 f852 	bl	801f850 <_getpid_r>
 801f7ac:	4622      	mov	r2, r4
 801f7ae:	4601      	mov	r1, r0
 801f7b0:	4628      	mov	r0, r5
 801f7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f7b6:	f000 b839 	b.w	801f82c <_kill_r>
 801f7ba:	2b01      	cmp	r3, #1
 801f7bc:	d00a      	beq.n	801f7d4 <_raise_r+0x4c>
 801f7be:	1c59      	adds	r1, r3, #1
 801f7c0:	d103      	bne.n	801f7ca <_raise_r+0x42>
 801f7c2:	2316      	movs	r3, #22
 801f7c4:	6003      	str	r3, [r0, #0]
 801f7c6:	2001      	movs	r0, #1
 801f7c8:	e7e7      	b.n	801f79a <_raise_r+0x12>
 801f7ca:	2100      	movs	r1, #0
 801f7cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	4798      	blx	r3
 801f7d4:	2000      	movs	r0, #0
 801f7d6:	e7e0      	b.n	801f79a <_raise_r+0x12>

0801f7d8 <raise>:
 801f7d8:	4b02      	ldr	r3, [pc, #8]	@ (801f7e4 <raise+0xc>)
 801f7da:	4601      	mov	r1, r0
 801f7dc:	6818      	ldr	r0, [r3, #0]
 801f7de:	f7ff bfd3 	b.w	801f788 <_raise_r>
 801f7e2:	bf00      	nop
 801f7e4:	20000094 	.word	0x20000094

0801f7e8 <_fstat_r>:
 801f7e8:	b538      	push	{r3, r4, r5, lr}
 801f7ea:	4d07      	ldr	r5, [pc, #28]	@ (801f808 <_fstat_r+0x20>)
 801f7ec:	2300      	movs	r3, #0
 801f7ee:	4604      	mov	r4, r0
 801f7f0:	4608      	mov	r0, r1
 801f7f2:	4611      	mov	r1, r2
 801f7f4:	602b      	str	r3, [r5, #0]
 801f7f6:	f7e3 fd59 	bl	80032ac <_fstat>
 801f7fa:	1c43      	adds	r3, r0, #1
 801f7fc:	d102      	bne.n	801f804 <_fstat_r+0x1c>
 801f7fe:	682b      	ldr	r3, [r5, #0]
 801f800:	b103      	cbz	r3, 801f804 <_fstat_r+0x1c>
 801f802:	6023      	str	r3, [r4, #0]
 801f804:	bd38      	pop	{r3, r4, r5, pc}
 801f806:	bf00      	nop
 801f808:	2000f630 	.word	0x2000f630

0801f80c <_isatty_r>:
 801f80c:	b538      	push	{r3, r4, r5, lr}
 801f80e:	4d06      	ldr	r5, [pc, #24]	@ (801f828 <_isatty_r+0x1c>)
 801f810:	2300      	movs	r3, #0
 801f812:	4604      	mov	r4, r0
 801f814:	4608      	mov	r0, r1
 801f816:	602b      	str	r3, [r5, #0]
 801f818:	f7e3 fd58 	bl	80032cc <_isatty>
 801f81c:	1c43      	adds	r3, r0, #1
 801f81e:	d102      	bne.n	801f826 <_isatty_r+0x1a>
 801f820:	682b      	ldr	r3, [r5, #0]
 801f822:	b103      	cbz	r3, 801f826 <_isatty_r+0x1a>
 801f824:	6023      	str	r3, [r4, #0]
 801f826:	bd38      	pop	{r3, r4, r5, pc}
 801f828:	2000f630 	.word	0x2000f630

0801f82c <_kill_r>:
 801f82c:	b538      	push	{r3, r4, r5, lr}
 801f82e:	4d07      	ldr	r5, [pc, #28]	@ (801f84c <_kill_r+0x20>)
 801f830:	2300      	movs	r3, #0
 801f832:	4604      	mov	r4, r0
 801f834:	4608      	mov	r0, r1
 801f836:	4611      	mov	r1, r2
 801f838:	602b      	str	r3, [r5, #0]
 801f83a:	f7e3 fcf1 	bl	8003220 <_kill>
 801f83e:	1c43      	adds	r3, r0, #1
 801f840:	d102      	bne.n	801f848 <_kill_r+0x1c>
 801f842:	682b      	ldr	r3, [r5, #0]
 801f844:	b103      	cbz	r3, 801f848 <_kill_r+0x1c>
 801f846:	6023      	str	r3, [r4, #0]
 801f848:	bd38      	pop	{r3, r4, r5, pc}
 801f84a:	bf00      	nop
 801f84c:	2000f630 	.word	0x2000f630

0801f850 <_getpid_r>:
 801f850:	f7e3 bcde 	b.w	8003210 <_getpid>

0801f854 <_malloc_usable_size_r>:
 801f854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f858:	1f18      	subs	r0, r3, #4
 801f85a:	2b00      	cmp	r3, #0
 801f85c:	bfbc      	itt	lt
 801f85e:	580b      	ldrlt	r3, [r1, r0]
 801f860:	18c0      	addlt	r0, r0, r3
 801f862:	4770      	bx	lr

0801f864 <_init>:
 801f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f866:	bf00      	nop
 801f868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f86a:	bc08      	pop	{r3}
 801f86c:	469e      	mov	lr, r3
 801f86e:	4770      	bx	lr

0801f870 <_fini>:
 801f870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f872:	bf00      	nop
 801f874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f876:	bc08      	pop	{r3}
 801f878:	469e      	mov	lr, r3
 801f87a:	4770      	bx	lr
